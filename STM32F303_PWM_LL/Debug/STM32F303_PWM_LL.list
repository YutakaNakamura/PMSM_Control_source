
STM32F303_PWM_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000619c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08006328  08006328  00016328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006570  08006570  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006570  08006570  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006570  08006570  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006570  08006570  00016570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000070  080065e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080065e8  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019445  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003550  00000000  00000000  000394e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c60  00000000  00000000  0003ca38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  0003d698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cbd3  00000000  00000000  0003e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e8ad  00000000  00000000  0005ad73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ec48  00000000  00000000  00069620  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108268  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a18  00000000  00000000  001082e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800630c 	.word	0x0800630c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800630c 	.word	0x0800630c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x28>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x28>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f92f 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f003 feae 	bl	80048e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f939 	bl	8000e26 <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 f90f 	bl	8000dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004
 8000bec:	20000000 	.word	0x20000000

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000004 	.word	0x20000004
 8000c14:	2000009c 	.word	0x2000009c

08000c18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	2000009c 	.word	0x2000009c

08000c30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff ffee 	bl	8000c18 <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_Delay+0x40>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffde 	bl	8000c18 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000004 	.word	0x20000004

08000c74 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	da0b      	bge.n	8000d04 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <NVIC_SetPriority+0x4c>)
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	3b04      	subs	r3, #4
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d02:	e009      	b.n	8000d18 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4907      	ldr	r1, [pc, #28]	; (8000d28 <NVIC_SetPriority+0x50>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db8:	f7ff ff8e 	bl	8000cd8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff47 	bl	8000c74 <NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff5c 	bl	8000cbc <NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffb0 	bl	8000d94 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e56:	e14e      	b.n	80010f6 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 8140 	beq.w	80010f0 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x40>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b12      	cmp	r3, #18
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	6939      	ldr	r1, [r7, #16]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d00b      	beq.n	8000f1c <HAL_GPIO_Init+0xdc>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f10:	2b11      	cmp	r3, #17
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b12      	cmp	r3, #18
 8000f1a:	d130      	bne.n	8000f7e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f52:	2201      	movs	r2, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	f003 0201 	and.w	r2, r3, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 809a 	beq.w	80010f0 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbc:	4b55      	ldr	r3, [pc, #340]	; (8001114 <HAL_GPIO_Init+0x2d4>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a54      	ldr	r2, [pc, #336]	; (8001114 <HAL_GPIO_Init+0x2d4>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b52      	ldr	r3, [pc, #328]	; (8001114 <HAL_GPIO_Init+0x2d4>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fd4:	4a50      	ldr	r2, [pc, #320]	; (8001118 <HAL_GPIO_Init+0x2d8>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ffe:	d013      	beq.n	8001028 <HAL_GPIO_Init+0x1e8>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a46      	ldr	r2, [pc, #280]	; (800111c <HAL_GPIO_Init+0x2dc>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d00d      	beq.n	8001024 <HAL_GPIO_Init+0x1e4>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a45      	ldr	r2, [pc, #276]	; (8001120 <HAL_GPIO_Init+0x2e0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d007      	beq.n	8001020 <HAL_GPIO_Init+0x1e0>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a44      	ldr	r2, [pc, #272]	; (8001124 <HAL_GPIO_Init+0x2e4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d101      	bne.n	800101c <HAL_GPIO_Init+0x1dc>
 8001018:	2303      	movs	r3, #3
 800101a:	e006      	b.n	800102a <HAL_GPIO_Init+0x1ea>
 800101c:	2305      	movs	r3, #5
 800101e:	e004      	b.n	800102a <HAL_GPIO_Init+0x1ea>
 8001020:	2302      	movs	r3, #2
 8001022:	e002      	b.n	800102a <HAL_GPIO_Init+0x1ea>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <HAL_GPIO_Init+0x1ea>
 8001028:	2300      	movs	r3, #0
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	f002 0203 	and.w	r2, r2, #3
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	4093      	lsls	r3, r2
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800103a:	4937      	ldr	r1, [pc, #220]	; (8001118 <HAL_GPIO_Init+0x2d8>)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001048:	4b37      	ldr	r3, [pc, #220]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800106c:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001096:	4a24      	ldr	r2, [pc, #144]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	f47f aea9 	bne.w	8000e58 <HAL_GPIO_Init+0x18>
  }
}
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800
 8001124:	48000c00 	.word	0x48000c00
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001132:	af00      	add	r7, sp, #0
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	f000 beda 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 816e 	beq.w	8001432 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001156:	4bb5      	ldr	r3, [pc, #724]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b04      	cmp	r3, #4
 8001160:	d00c      	beq.n	800117c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001162:	4bb2      	ldr	r3, [pc, #712]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b08      	cmp	r3, #8
 800116c:	d15a      	bne.n	8001224 <HAL_RCC_OscConfig+0xf8>
 800116e:	4baf      	ldr	r3, [pc, #700]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117a:	d153      	bne.n	8001224 <HAL_RCC_OscConfig+0xf8>
 800117c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001180:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001190:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	fab3 f383 	clz	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <HAL_RCC_OscConfig+0x82>
 80011a8:	4ba0      	ldr	r3, [pc, #640]	; (800142c <HAL_RCC_OscConfig+0x300>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	e015      	b.n	80011da <HAL_RCC_OscConfig+0xae>
 80011ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80011c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011ca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011d6:	4b95      	ldr	r3, [pc, #596]	; (800142c <HAL_RCC_OscConfig+0x300>)
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011de:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80011e2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80011e6:	fa92 f2a2 	rbit	r2, r2
 80011ea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80011ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80011f2:	fab2 f282 	clz	r2, r2
 80011f6:	b252      	sxtb	r2, r2
 80011f8:	f042 0220 	orr.w	r2, r2, #32
 80011fc:	b252      	sxtb	r2, r2
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f002 021f 	and.w	r2, r2, #31
 8001204:	2101      	movs	r1, #1
 8001206:	fa01 f202 	lsl.w	r2, r1, r2
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 810f 	beq.w	8001430 <HAL_RCC_OscConfig+0x304>
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 8109 	bne.w	8001430 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	f000 be6b 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x112>
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a7d      	ldr	r2, [pc, #500]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e030      	b.n	80012a0 <HAL_RCC_OscConfig+0x174>
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10c      	bne.n	8001262 <HAL_RCC_OscConfig+0x136>
 8001248:	4b78      	ldr	r3, [pc, #480]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a77      	ldr	r2, [pc, #476]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800124e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b75      	ldr	r3, [pc, #468]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a74      	ldr	r2, [pc, #464]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e01e      	b.n	80012a0 <HAL_RCC_OscConfig+0x174>
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x15c>
 800126e:	4b6f      	ldr	r3, [pc, #444]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a6e      	ldr	r2, [pc, #440]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b6c      	ldr	r3, [pc, #432]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6b      	ldr	r2, [pc, #428]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0x174>
 8001288:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a67      	ldr	r2, [pc, #412]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b65      	ldr	r3, [pc, #404]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a64      	ldr	r2, [pc, #400]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012a0:	4b62      	ldr	r3, [pc, #392]	; (800142c <HAL_RCC_OscConfig+0x300>)
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	f023 020f 	bic.w	r2, r3, #15
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	495f      	ldr	r1, [pc, #380]	; (800142c <HAL_RCC_OscConfig+0x300>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d05a      	beq.n	8001374 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff fcab 	bl	8000c18 <HAL_GetTick>
 80012c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	e00a      	b.n	80012de <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fca6 	bl	8000c18 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b64      	cmp	r3, #100	; 0x64
 80012d6:	d902      	bls.n	80012de <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	f000 be0e 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>
 80012de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012e2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80012f2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	fab3 f383 	clz	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	095b      	lsrs	r3, r3, #5
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d102      	bne.n	8001310 <HAL_RCC_OscConfig+0x1e4>
 800130a:	4b48      	ldr	r3, [pc, #288]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	e015      	b.n	800133c <HAL_RCC_OscConfig+0x210>
 8001310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001314:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001318:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800131c:	fa93 f3a3 	rbit	r3, r3
 8001320:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001328:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800132c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001338:	4b3c      	ldr	r3, [pc, #240]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001340:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001344:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001348:	fa92 f2a2 	rbit	r2, r2
 800134c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001350:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001354:	fab2 f282 	clz	r2, r2
 8001358:	b252      	sxtb	r2, r2
 800135a:	f042 0220 	orr.w	r2, r2, #32
 800135e:	b252      	sxtb	r2, r2
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	f002 021f 	and.w	r2, r2, #31
 8001366:	2101      	movs	r1, #1
 8001368:	fa01 f202 	lsl.w	r2, r1, r2
 800136c:	4013      	ands	r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0aa      	beq.n	80012c8 <HAL_RCC_OscConfig+0x19c>
 8001372:	e05e      	b.n	8001432 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fc50 	bl	8000c18 <HAL_GetTick>
 8001378:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137c:	e00a      	b.n	8001394 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137e:	f7ff fc4b 	bl	8000c18 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d902      	bls.n	8001394 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	f000 bdb3 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>
 8001394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001398:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80013a0:	fa93 f3a3 	rbit	r3, r3
 80013a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80013a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ac:	fab3 f383 	clz	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d102      	bne.n	80013c6 <HAL_RCC_OscConfig+0x29a>
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_RCC_OscConfig+0x300>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	e015      	b.n	80013f2 <HAL_RCC_OscConfig+0x2c6>
 80013c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80013d2:	fa93 f3a3 	rbit	r3, r3
 80013d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80013da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_RCC_OscConfig+0x300>)
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80013fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80013fe:	fa92 f2a2 	rbit	r2, r2
 8001402:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001406:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800140a:	fab2 f282 	clz	r2, r2
 800140e:	b252      	sxtb	r2, r2
 8001410:	f042 0220 	orr.w	r2, r2, #32
 8001414:	b252      	sxtb	r2, r2
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	f002 021f 	and.w	r2, r2, #31
 800141c:	2101      	movs	r1, #1
 800141e:	fa01 f202 	lsl.w	r2, r1, r2
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1aa      	bne.n	800137e <HAL_RCC_OscConfig+0x252>
 8001428:	e003      	b.n	8001432 <HAL_RCC_OscConfig+0x306>
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8170 	beq.w	8001722 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001442:	4bd0      	ldr	r3, [pc, #832]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800144e:	4bcd      	ldr	r3, [pc, #820]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b08      	cmp	r3, #8
 8001458:	d16d      	bne.n	8001536 <HAL_RCC_OscConfig+0x40a>
 800145a:	4bca      	ldr	r3, [pc, #808]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d167      	bne.n	8001536 <HAL_RCC_OscConfig+0x40a>
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001478:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d102      	bne.n	8001496 <HAL_RCC_OscConfig+0x36a>
 8001490:	4bbc      	ldr	r3, [pc, #752]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	e013      	b.n	80014be <HAL_RCC_OscConfig+0x392>
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014ae:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014ba:	4bb2      	ldr	r3, [pc, #712]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	2202      	movs	r2, #2
 80014c0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80014c4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80014c8:	fa92 f2a2 	rbit	r2, r2
 80014cc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80014d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014d4:	fab2 f282 	clz	r2, r2
 80014d8:	b252      	sxtb	r2, r2
 80014da:	f042 0220 	orr.w	r2, r2, #32
 80014de:	b252      	sxtb	r2, r2
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	f002 021f 	and.w	r2, r2, #31
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <HAL_RCC_OscConfig+0x3d6>
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d002      	beq.n	8001502 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	f000 bcfc 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4ba0      	ldr	r3, [pc, #640]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6959      	ldr	r1, [r3, #20]
 8001510:	23f8      	movs	r3, #248	; 0xf8
 8001512:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001522:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	4995      	ldr	r1, [pc, #596]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001534:	e0f5      	b.n	8001722 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 8085 	beq.w	800164c <HAL_RCC_OscConfig+0x520>
 8001542:	2301      	movs	r3, #1
 8001544:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001554:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001558:	fab3 f383 	clz	r3, r3
 800155c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001560:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	461a      	mov	r2, r3
 8001568:	2301      	movs	r3, #1
 800156a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fb54 	bl	8000c18 <HAL_GetTick>
 8001570:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fb4f 	bl	8000c18 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d902      	bls.n	800158c <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	f000 bcb7 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>
 800158c:	2302      	movs	r3, #2
 800158e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 800159e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	fab3 f383 	clz	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	095b      	lsrs	r3, r3, #5
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d102      	bne.n	80015bc <HAL_RCC_OscConfig+0x490>
 80015b6:	4b73      	ldr	r3, [pc, #460]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	e013      	b.n	80015e4 <HAL_RCC_OscConfig+0x4b8>
 80015bc:	2302      	movs	r3, #2
 80015be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015d4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015e0:	4b68      	ldr	r3, [pc, #416]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	2202      	movs	r2, #2
 80015e6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80015ea:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80015ee:	fa92 f2a2 	rbit	r2, r2
 80015f2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80015f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015fa:	fab2 f282 	clz	r2, r2
 80015fe:	b252      	sxtb	r2, r2
 8001600:	f042 0220 	orr.w	r2, r2, #32
 8001604:	b252      	sxtb	r2, r2
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	f002 021f 	and.w	r2, r2, #31
 800160c:	2101      	movs	r1, #1
 800160e:	fa01 f202 	lsl.w	r2, r1, r2
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0ae      	beq.n	8001576 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001618:	4b5a      	ldr	r3, [pc, #360]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6959      	ldr	r1, [r3, #20]
 8001626:	23f8      	movs	r3, #248	; 0xf8
 8001628:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001638:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800163c:	fab3 f383 	clz	r3, r3
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	494f      	ldr	r1, [pc, #316]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
 800164a:	e06a      	b.n	8001722 <HAL_RCC_OscConfig+0x5f6>
 800164c:	2301      	movs	r3, #1
 800164e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800165e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800166a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	461a      	mov	r2, r3
 8001672:	2300      	movs	r3, #0
 8001674:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff facf 	bl	8000c18 <HAL_GetTick>
 800167a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff faca 	bl	8000c18 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d902      	bls.n	8001696 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	f000 bc32 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>
 8001696:	2302      	movs	r3, #2
 8001698:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80016a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_OscConfig+0x59a>
 80016c0:	4b30      	ldr	r3, [pc, #192]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	e013      	b.n	80016ee <HAL_RCC_OscConfig+0x5c2>
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016d0:	fa93 f3a3 	rbit	r3, r3
 80016d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	2202      	movs	r2, #2
 80016f0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80016f4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80016f8:	fa92 f2a2 	rbit	r2, r2
 80016fc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001700:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001704:	fab2 f282 	clz	r2, r2
 8001708:	b252      	sxtb	r2, r2
 800170a:	f042 0220 	orr.w	r2, r2, #32
 800170e:	b252      	sxtb	r2, r2
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f002 021f 	and.w	r2, r2, #31
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f202 	lsl.w	r2, r1, r2
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ae      	bne.n	8001680 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80d8 	beq.w	80018e2 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d067      	beq.n	800180c <HAL_RCC_OscConfig+0x6e0>
 800173c:	2301      	movs	r3, #1
 800173e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001746:	fa93 f3a3 	rbit	r3, r3
 800174a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800174e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	fab3 f383 	clz	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_RCC_OscConfig+0x65c>)
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	461a      	mov	r2, r3
 8001760:	2301      	movs	r3, #1
 8001762:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001764:	f7ff fa58 	bl	8000c18 <HAL_GetTick>
 8001768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176c:	e00e      	b.n	800178c <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff fa53 	bl	8000c18 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d906      	bls.n	800178c <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e3bb      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	10908120 	.word	0x10908120
 800178c:	2302      	movs	r3, #2
 800178e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017a8:	fa93 f2a3 	rbit	r2, r3
 80017ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017b6:	2202      	movs	r2, #2
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	fa93 f2a3 	rbit	r2, r3
 80017c4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	4ba5      	ldr	r3, [pc, #660]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80017cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017d2:	2102      	movs	r1, #2
 80017d4:	6019      	str	r1, [r3, #0]
 80017d6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	fa93 f1a3 	rbit	r1, r3
 80017e0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017e4:	6019      	str	r1, [r3, #0]
  return(result);
 80017e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0b1      	beq.n	800176e <HAL_RCC_OscConfig+0x642>
 800180a:	e06a      	b.n	80018e2 <HAL_RCC_OscConfig+0x7b6>
 800180c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001822:	601a      	str	r2, [r3, #0]
  return(result);
 8001824:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001828:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	4b8c      	ldr	r3, [pc, #560]	; (8001a64 <HAL_RCC_OscConfig+0x938>)
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	461a      	mov	r2, r3
 8001838:	2300      	movs	r3, #0
 800183a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183c:	f7ff f9ec 	bl	8000c18 <HAL_GetTick>
 8001840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	e009      	b.n	800185a <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff f9e7 	bl	8000c18 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e34f      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 800185a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800185e:	2202      	movs	r2, #2
 8001860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001876:	2202      	movs	r2, #2
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fa93 f2a3 	rbit	r2, r3
 8001884:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800188e:	2202      	movs	r2, #2
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a2:	4b6f      	ldr	r3, [pc, #444]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80018a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018aa:	2102      	movs	r1, #2
 80018ac:	6019      	str	r1, [r3, #0]
 80018ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f1a3 	rbit	r1, r3
 80018b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018bc:	6019      	str	r1, [r3, #0]
  return(result);
 80018be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	2101      	movs	r1, #1
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	4013      	ands	r3, r2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1b1      	bne.n	8001846 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8159 	beq.w	8001ba4 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f8:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d112      	bne.n	800192a <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	4b56      	ldr	r3, [pc, #344]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	4a55      	ldr	r2, [pc, #340]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190e:	61d3      	str	r3, [r2, #28]
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001924:	2301      	movs	r3, #1
 8001926:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <HAL_RCC_OscConfig+0x93c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11a      	bne.n	800196c <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001936:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <HAL_RCC_OscConfig+0x93c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a4b      	ldr	r2, [pc, #300]	; (8001a68 <HAL_RCC_OscConfig+0x93c>)
 800193c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001940:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001942:	f7ff f969 	bl	8000c18 <HAL_GetTick>
 8001946:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194a:	e009      	b.n	8001960 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194c:	f7ff f964 	bl	8000c18 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b64      	cmp	r3, #100	; 0x64
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e2cc      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <HAL_RCC_OscConfig+0x93c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ef      	beq.n	800194c <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d106      	bne.n	8001984 <HAL_RCC_OscConfig+0x858>
 8001976:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a39      	ldr	r2, [pc, #228]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	e02f      	b.n	80019e4 <HAL_RCC_OscConfig+0x8b8>
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x87c>
 800198e:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a33      	ldr	r2, [pc, #204]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6213      	str	r3, [r2, #32]
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a30      	ldr	r2, [pc, #192]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	e01d      	b.n	80019e4 <HAL_RCC_OscConfig+0x8b8>
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x8a0>
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a2a      	ldr	r2, [pc, #168]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a27      	ldr	r2, [pc, #156]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6213      	str	r3, [r2, #32]
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_OscConfig+0x8b8>
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019de:	f023 0304 	bic.w	r3, r3, #4
 80019e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d06b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ee:	f7ff f913 	bl	8000c18 <HAL_GetTick>
 80019f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff f90e 	bl	8000c18 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e274      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 8001a10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a14:	2202      	movs	r2, #2
 8001a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	fa93 f2a3 	rbit	r2, r3
 8001a22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a3e:	601a      	str	r2, [r3, #0]
  return(result);
 8001a40:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a44:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	095b      	lsrs	r3, r3, #5
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d108      	bne.n	8001a6c <HAL_RCC_OscConfig+0x940>
 8001a5a:	4b01      	ldr	r3, [pc, #4]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	e013      	b.n	8001a88 <HAL_RCC_OscConfig+0x95c>
 8001a60:	40021000 	.word	0x40021000
 8001a64:	10908120 	.word	0x10908120
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a70:	2202      	movs	r2, #2
 8001a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	fa93 f2a3 	rbit	r2, r3
 8001a7e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	4bbb      	ldr	r3, [pc, #748]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	6011      	str	r1, [r2, #0]
 8001a90:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	fa92 f1a2 	rbit	r1, r2
 8001a9a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a9e:	6011      	str	r1, [r2, #0]
  return(result);
 8001aa0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	fab2 f282 	clz	r2, r2
 8001aaa:	b252      	sxtb	r2, r2
 8001aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab0:	b252      	sxtb	r2, r2
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	f002 021f 	and.w	r2, r2, #31
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d099      	beq.n	80019f8 <HAL_RCC_OscConfig+0x8cc>
 8001ac4:	e064      	b.n	8001b90 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f8a7 	bl	8000c18 <HAL_GetTick>
 8001aca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f8a2 	bl	8000c18 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e208      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 8001ae8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aec:	2202      	movs	r2, #2
 8001aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b04:	2202      	movs	r2, #2
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b16:	601a      	str	r2, [r3, #0]
  return(result);
 8001b18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b1c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	095b      	lsrs	r3, r3, #5
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0xa0c>
 8001b32:	4b90      	ldr	r3, [pc, #576]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	e00d      	b.n	8001b54 <HAL_RCC_OscConfig+0xa28>
 8001b38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f2a3 	rbit	r2, r3
 8001b4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4b88      	ldr	r3, [pc, #544]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b58:	2102      	movs	r1, #2
 8001b5a:	6011      	str	r1, [r2, #0]
 8001b5c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	fa92 f1a2 	rbit	r1, r2
 8001b66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b6a:	6011      	str	r1, [r2, #0]
  return(result);
 8001b6c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	fab2 f282 	clz	r2, r2
 8001b76:	b252      	sxtb	r2, r2
 8001b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b7c:	b252      	sxtb	r2, r2
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	f002 021f 	and.w	r2, r2, #31
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d19f      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b90:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	4a75      	ldr	r2, [pc, #468]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 81a4 	beq.w	8001ef8 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb0:	4b70      	ldr	r3, [pc, #448]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	f000 819b 	beq.w	8001ef4 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	f040 8113 	bne.w	8001df0 <HAL_RCC_OscConfig+0xcc4>
 8001bca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001bce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001be2:	601a      	str	r2, [r3, #0]
  return(result);
 8001be4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001be8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f80b 	bl	8000c18 <HAL_GetTick>
 8001c02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c06:	e009      	b.n	8001c1c <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff f806 	bl	8000c18 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e16e      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 8001c1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c34:	601a      	str	r2, [r3, #0]
  return(result);
 8001c36:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d102      	bne.n	8001c56 <HAL_RCC_OscConfig+0xb2a>
 8001c50:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	e01b      	b.n	8001c8e <HAL_RCC_OscConfig+0xb62>
 8001c56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	fa93 f2a3 	rbit	r2, r3
 8001c6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c96:	6011      	str	r1, [r2, #0]
 8001c98:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	fa92 f1a2 	rbit	r1, r2
 8001ca2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ca6:	6011      	str	r1, [r2, #0]
  return(result);
 8001ca8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	fab2 f282 	clz	r2, r2
 8001cb2:	b252      	sxtb	r2, r2
 8001cb4:	f042 0220 	orr.w	r2, r2, #32
 8001cb8:	b252      	sxtb	r2, r2
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f002 021f 	and.w	r2, r2, #31
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d19d      	bne.n	8001c08 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	4924      	ldr	r1, [pc, #144]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
 8001ce8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d00:	601a      	str	r2, [r3, #0]
  return(result);
 8001d02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d06:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	461a      	mov	r2, r3
 8001d18:	2301      	movs	r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe ff7c 	bl	8000c18 <HAL_GetTick>
 8001d20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d24:	e009      	b.n	8001d3a <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d26:	f7fe ff77 	bl	8000c18 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0df      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 8001d3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d52:	601a      	str	r2, [r3, #0]
  return(result);
 8001d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d104      	bne.n	8001d78 <HAL_RCC_OscConfig+0xc4c>
 8001d6e:	4b01      	ldr	r3, [pc, #4]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e01d      	b.n	8001db0 <HAL_RCC_OscConfig+0xc84>
 8001d74:	40021000 	.word	0x40021000
 8001d78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fa93 f2a3 	rbit	r2, r3
 8001da6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	4b55      	ldr	r3, [pc, #340]	; (8001f04 <HAL_RCC_OscConfig+0xdd8>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001db4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001db8:	6011      	str	r1, [r2, #0]
 8001dba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fa92 f1a2 	rbit	r1, r2
 8001dc4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dc8:	6011      	str	r1, [r2, #0]
  return(result);
 8001dca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	b252      	sxtb	r2, r2
 8001dd6:	f042 0220 	orr.w	r2, r2, #32
 8001dda:	b252      	sxtb	r2, r2
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f002 021f 	and.w	r2, r2, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f202 	lsl.w	r2, r1, r2
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d09b      	beq.n	8001d26 <HAL_RCC_OscConfig+0xbfa>
 8001dee:	e083      	b.n	8001ef8 <HAL_RCC_OscConfig+0xdcc>
 8001df0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001df4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e08:	601a      	str	r2, [r3, #0]
  return(result);
 8001e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e0e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2300      	movs	r3, #0
 8001e22:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7fe fef8 	bl	8000c18 <HAL_GetTick>
 8001e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2c:	e009      	b.n	8001e42 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7fe fef3 	bl	8000c18 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e05b      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 8001e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5a:	601a      	str	r2, [r3, #0]
  return(result);
 8001e5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0xd50>
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_RCC_OscConfig+0xdd8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e01b      	b.n	8001eb4 <HAL_RCC_OscConfig+0xd88>
 8001e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	fa93 f2a3 	rbit	r2, r3
 8001e90:	f107 0320 	add.w	r3, r7, #32
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	fa93 f2a3 	rbit	r2, r3
 8001eaa:	f107 0318 	add.w	r3, r7, #24
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_RCC_OscConfig+0xdd8>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	f107 0214 	add.w	r2, r7, #20
 8001eb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ebc:	6011      	str	r1, [r2, #0]
 8001ebe:	f107 0214 	add.w	r2, r7, #20
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	fa92 f1a2 	rbit	r1, r2
 8001ec8:	f107 0210 	add.w	r2, r7, #16
 8001ecc:	6011      	str	r1, [r2, #0]
  return(result);
 8001ece:	f107 0210 	add.w	r2, r7, #16
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	fab2 f282 	clz	r2, r2
 8001ed8:	b252      	sxtb	r2, r2
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	b252      	sxtb	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f002 021f 	and.w	r2, r2, #31
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d19d      	bne.n	8001e2e <HAL_RCC_OscConfig+0xd02>
 8001ef2:	e001      	b.n	8001ef8 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b09e      	sub	sp, #120	; 0x78
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e164      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b92      	ldr	r3, [pc, #584]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b8f      	ldr	r3, [pc, #572]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	498d      	ldr	r1, [pc, #564]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b8b      	ldr	r3, [pc, #556]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e14c      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b84      	ldr	r3, [pc, #528]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4981      	ldr	r1, [pc, #516]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80df 	beq.w	800213a <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d13d      	bne.n	8002000 <HAL_RCC_ClockConfig+0xf8>
 8001f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d102      	bne.n	8001fae <HAL_RCC_ClockConfig+0xa6>
 8001fa8:	4b71      	ldr	r3, [pc, #452]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	e00f      	b.n	8001fce <HAL_RCC_ClockConfig+0xc6>
 8001fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	667b      	str	r3, [r7, #100]	; 0x64
 8001fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8001fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fca:	4b69      	ldr	r3, [pc, #420]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fd6:	fa92 f2a2 	rbit	r2, r2
 8001fda:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001fdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fde:	fab2 f282 	clz	r2, r2
 8001fe2:	b252      	sxtb	r2, r2
 8001fe4:	f042 0220 	orr.w	r2, r2, #32
 8001fe8:	b252      	sxtb	r2, r2
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	f002 021f 	and.w	r2, r2, #31
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d17d      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0f4      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d13d      	bne.n	8002084 <HAL_RCC_ClockConfig+0x17c>
 8002008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d102      	bne.n	8002032 <HAL_RCC_ClockConfig+0x12a>
 800202c:	4b50      	ldr	r3, [pc, #320]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	e00f      	b.n	8002052 <HAL_RCC_ClockConfig+0x14a>
 8002032:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002036:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	647b      	str	r3, [r7, #68]	; 0x44
 8002040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002044:	643b      	str	r3, [r7, #64]	; 0x40
 8002046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800204e:	4b48      	ldr	r3, [pc, #288]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002056:	63ba      	str	r2, [r7, #56]	; 0x38
 8002058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800205a:	fa92 f2a2 	rbit	r2, r2
 800205e:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002062:	fab2 f282 	clz	r2, r2
 8002066:	b252      	sxtb	r2, r2
 8002068:	f042 0220 	orr.w	r2, r2, #32
 800206c:	b252      	sxtb	r2, r2
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f002 021f 	and.w	r2, r2, #31
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f202 	lsl.w	r2, r1, r2
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d13b      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b2      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
 8002084:	2302      	movs	r3, #2
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_ClockConfig+0x1a4>
 80020a6:	4b32      	ldr	r3, [pc, #200]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	e00d      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1c0>
 80020ac:	2302      	movs	r3, #2
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
 80020b8:	2302      	movs	r3, #2
 80020ba:	623b      	str	r3, [r7, #32]
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2202      	movs	r2, #2
 80020ca:	61ba      	str	r2, [r7, #24]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	fa92 f2a2 	rbit	r2, r2
 80020d2:	617a      	str	r2, [r7, #20]
  return(result);
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	fab2 f282 	clz	r2, r2
 80020da:	b252      	sxtb	r2, r2
 80020dc:	f042 0220 	orr.w	r2, r2, #32
 80020e0:	b252      	sxtb	r2, r2
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	f002 021f 	and.w	r2, r2, #31
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f202 	lsl.w	r2, r1, r2
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e078      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f023 0203 	bic.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	491a      	ldr	r1, [pc, #104]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800210a:	f7fe fd85 	bl	8000c18 <HAL_GetTick>
 800210e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002110:	e00a      	b.n	8002128 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002112:	f7fe fd81 	bl	8000c18 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e060      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 020c 	and.w	r2, r3, #12
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	429a      	cmp	r2, r3
 8002138:	d1eb      	bne.n	8002112 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d215      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 0207 	bic.w	r2, r3, #7
 8002150:	4906      	ldr	r1, [pc, #24]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d006      	beq.n	8002174 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e03f      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
 800216a:	bf00      	nop
 800216c:	40022000 	.word	0x40022000
 8002170:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_RCC_ClockConfig+0x2ec>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4919      	ldr	r1, [pc, #100]	; (80021f4 <HAL_RCC_ClockConfig+0x2ec>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_RCC_ClockConfig+0x2ec>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4911      	ldr	r1, [pc, #68]	; (80021f4 <HAL_RCC_ClockConfig+0x2ec>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021b2:	f000 f825 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021b6:	4601      	mov	r1, r0
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_RCC_ClockConfig+0x2ec>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021c0:	23f0      	movs	r3, #240	; 0xf0
 80021c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <HAL_RCC_ClockConfig+0x2f0>)
 80021d8:	5cd3      	ldrb	r3, [r2, r3]
 80021da:	fa21 f303 	lsr.w	r3, r1, r3
 80021de:	4a07      	ldr	r2, [pc, #28]	; (80021fc <HAL_RCC_ClockConfig+0x2f4>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7fe fcd4 	bl	8000b90 <HAL_InitTick>
  
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3778      	adds	r7, #120	; 0x78
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	08006364 	.word	0x08006364
 80021fc:	20000008 	.word	0x20000008

08002200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b08b      	sub	sp, #44	; 0x2c
 8002204:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d002      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x30>
 800222a:	2b08      	cmp	r3, #8
 800222c:	d003      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x36>
 800222e:	e03c      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002232:	623b      	str	r3, [r7, #32]
      break;
 8002234:	e03c      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800223c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002240:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	607b      	str	r3, [r7, #4]
  return(result);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	f003 020f 	and.w	r2, r3, #15
 8002262:	230f      	movs	r3, #15
 8002264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	60fb      	str	r3, [r7, #12]
  return(result);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002288:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	e004      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	e002      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ac:	623b      	str	r3, [r7, #32]
      break;
 80022ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b0:	6a3b      	ldr	r3, [r7, #32]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	372c      	adds	r7, #44	; 0x2c
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	007a1200 	.word	0x007a1200
 80022c8:	08006344 	.word	0x08006344
 80022cc:	08006354 	.word	0x08006354
 80022d0:	003d0900 	.word	0x003d0900

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000008 	.word	0x20000008

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022f2:	f7ff ffef 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f6:	4601      	mov	r1, r0
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002300:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002304:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	603b      	str	r3, [r7, #0]
  return(result);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_RCC_GetPCLK1Freq+0x40>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	08006374 	.word	0x08006374

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002336:	f7ff ffcd 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 800233a:	4601      	mov	r1, r0
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002344:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002348:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	603b      	str	r3, [r7, #0]
  return(result);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x40>)
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	08006374 	.word	0x08006374

08002374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b092      	sub	sp, #72	; 0x48
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80cf 	beq.w	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002398:	4b86      	ldr	r3, [pc, #536]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10e      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b83      	ldr	r3, [pc, #524]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4a82      	ldr	r2, [pc, #520]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	61d3      	str	r3, [r2, #28]
 80023b0:	4b80      	ldr	r3, [pc, #512]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	4b7d      	ldr	r3, [pc, #500]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d118      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ce:	4b7a      	ldr	r3, [pc, #488]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a79      	ldr	r2, [pc, #484]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023da:	f7fe fc1d 	bl	8000c18 <HAL_GetTick>
 80023de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	e008      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7fe fc19 	bl	8000c18 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0da      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002400:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002408:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800240a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d07c      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800241a:	429a      	cmp	r2, r3
 800241c:	d075      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	461a      	mov	r2, r3
 8002446:	2301      	movs	r3, #1
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800244e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	4b56      	ldr	r3, [pc, #344]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	461a      	mov	r2, r3
 8002468:	2300      	movs	r3, #0
 800246a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800246c:	4a51      	ldr	r2, [pc, #324]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800246e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002470:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d046      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fbcc 	bl	8000c18 <HAL_GetTick>
 8002480:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002482:	e00a      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002484:	f7fe fbc8 	bl	8000c18 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e087      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x236>
 800249a:	2302      	movs	r3, #2
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
 80024a6:	2302      	movs	r3, #2
 80024a8:	623b      	str	r3, [r7, #32]
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80024b2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d102      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80024c8:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	e007      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80024ce:	2302      	movs	r3, #2
 80024d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2202      	movs	r2, #2
 80024e0:	613a      	str	r2, [r7, #16]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	fa92 f2a2 	rbit	r2, r2
 80024e8:	60fa      	str	r2, [r7, #12]
  return(result);
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	fab2 f282 	clz	r2, r2
 80024f0:	b252      	sxtb	r2, r2
 80024f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f6:	b252      	sxtb	r2, r2
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	f002 021f 	and.w	r2, r2, #31
 80024fe:	2101      	movs	r1, #1
 8002500:	fa01 f202 	lsl.w	r2, r1, r2
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0bc      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800250a:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4927      	ldr	r1, [pc, #156]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002518:	4313      	orrs	r3, r2
 800251a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800251c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	4a22      	ldr	r2, [pc, #136]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800252a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f023 0203 	bic.w	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	491a      	ldr	r1, [pc, #104]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800254a:	4313      	orrs	r3, r2
 800254c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f023 0210 	bic.w	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	4913      	ldr	r1, [pc, #76]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002568:	4313      	orrs	r3, r2
 800256a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	490b      	ldr	r1, [pc, #44]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002586:	4313      	orrs	r3, r2
 8002588:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	4904      	ldr	r1, [pc, #16]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3748      	adds	r7, #72	; 0x48
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	10908100 	.word	0x10908100

080025c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e043      	b.n	800265a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f002 fc8e 	bl	8004f08 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f82d 	bl	8002664 <UART_SetConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e022      	b.n	800265a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f987 	bl	8002930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002630:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002640:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fa0e 	bl	8002a74 <UART_CheckIdleState>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002670:	2310      	movs	r3, #16
 8002672:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002674:	2300      	movs	r3, #0
 8002676:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002678:	2300      	movs	r3, #0
 800267a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	4b9f      	ldr	r3, [pc, #636]	; (800291c <UART_SetConfig+0x2b8>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	68f9      	ldr	r1, [r7, #12]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	430a      	orrs	r2, r1
 80026e0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a8e      	ldr	r2, [pc, #568]	; (8002920 <UART_SetConfig+0x2bc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d121      	bne.n	8002730 <UART_SetConfig+0xcc>
 80026ec:	4b8d      	ldr	r3, [pc, #564]	; (8002924 <UART_SetConfig+0x2c0>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d817      	bhi.n	8002728 <UART_SetConfig+0xc4>
 80026f8:	a201      	add	r2, pc, #4	; (adr r2, 8002700 <UART_SetConfig+0x9c>)
 80026fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fe:	bf00      	nop
 8002700:	08002711 	.word	0x08002711
 8002704:	0800271d 	.word	0x0800271d
 8002708:	08002723 	.word	0x08002723
 800270c:	08002717 	.word	0x08002717
 8002710:	2300      	movs	r3, #0
 8002712:	75fb      	strb	r3, [r7, #23]
 8002714:	e01e      	b.n	8002754 <UART_SetConfig+0xf0>
 8002716:	2302      	movs	r3, #2
 8002718:	75fb      	strb	r3, [r7, #23]
 800271a:	e01b      	b.n	8002754 <UART_SetConfig+0xf0>
 800271c:	2304      	movs	r3, #4
 800271e:	75fb      	strb	r3, [r7, #23]
 8002720:	e018      	b.n	8002754 <UART_SetConfig+0xf0>
 8002722:	2308      	movs	r3, #8
 8002724:	75fb      	strb	r3, [r7, #23]
 8002726:	e015      	b.n	8002754 <UART_SetConfig+0xf0>
 8002728:	2310      	movs	r3, #16
 800272a:	75fb      	strb	r3, [r7, #23]
 800272c:	bf00      	nop
 800272e:	e011      	b.n	8002754 <UART_SetConfig+0xf0>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a7c      	ldr	r2, [pc, #496]	; (8002928 <UART_SetConfig+0x2c4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d102      	bne.n	8002740 <UART_SetConfig+0xdc>
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
 800273e:	e009      	b.n	8002754 <UART_SetConfig+0xf0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a79      	ldr	r2, [pc, #484]	; (800292c <UART_SetConfig+0x2c8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d102      	bne.n	8002750 <UART_SetConfig+0xec>
 800274a:	2300      	movs	r3, #0
 800274c:	75fb      	strb	r3, [r7, #23]
 800274e:	e001      	b.n	8002754 <UART_SetConfig+0xf0>
 8002750:	2310      	movs	r3, #16
 8002752:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800275c:	d16f      	bne.n	800283e <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d857      	bhi.n	8002814 <UART_SetConfig+0x1b0>
 8002764:	a201      	add	r2, pc, #4	; (adr r2, 800276c <UART_SetConfig+0x108>)
 8002766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276a:	bf00      	nop
 800276c:	08002791 	.word	0x08002791
 8002770:	080027ad 	.word	0x080027ad
 8002774:	080027c9 	.word	0x080027c9
 8002778:	08002815 	.word	0x08002815
 800277c:	080027e3 	.word	0x080027e3
 8002780:	08002815 	.word	0x08002815
 8002784:	08002815 	.word	0x08002815
 8002788:	08002815 	.word	0x08002815
 800278c:	080027ff 	.word	0x080027ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002790:	f7ff fdac 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8002794:	4603      	mov	r3, r0
 8002796:	005a      	lsls	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	441a      	add	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	82bb      	strh	r3, [r7, #20]
        break;
 80027aa:	e036      	b.n	800281a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027ac:	f7ff fdc0 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 80027b0:	4603      	mov	r3, r0
 80027b2:	005a      	lsls	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	441a      	add	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	82bb      	strh	r3, [r7, #20]
        break;
 80027c6:	e028      	b.n	800281a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80027d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6852      	ldr	r2, [r2, #4]
 80027da:	fbb3 f3f2 	udiv	r3, r3, r2
 80027de:	82bb      	strh	r3, [r7, #20]
        break;
 80027e0:	e01b      	b.n	800281a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027e2:	f7ff fd0d 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80027e6:	4603      	mov	r3, r0
 80027e8:	005a      	lsls	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	441a      	add	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	82bb      	strh	r3, [r7, #20]
        break;
 80027fc:	e00d      	b.n	800281a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	085b      	lsrs	r3, r3, #1
 8002804:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	82bb      	strh	r3, [r7, #20]
        break;
 8002812:	e002      	b.n	800281a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	74fb      	strb	r3, [r7, #19]
        break;
 8002818:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800281a:	8abb      	ldrh	r3, [r7, #20]
 800281c:	f023 030f 	bic.w	r3, r3, #15
 8002820:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002822:	8abb      	ldrh	r3, [r7, #20]
 8002824:	105b      	asrs	r3, r3, #1
 8002826:	b29b      	uxth	r3, r3
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	b29a      	uxth	r2, r3
 800282e:	897b      	ldrh	r3, [r7, #10]
 8002830:	4313      	orrs	r3, r2
 8002832:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	897a      	ldrh	r2, [r7, #10]
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	e069      	b.n	8002912 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d863      	bhi.n	800290c <UART_SetConfig+0x2a8>
 8002844:	a201      	add	r2, pc, #4	; (adr r2, 800284c <UART_SetConfig+0x1e8>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	08002871 	.word	0x08002871
 8002850:	08002891 	.word	0x08002891
 8002854:	080028b1 	.word	0x080028b1
 8002858:	0800290d 	.word	0x0800290d
 800285c:	080028d1 	.word	0x080028d1
 8002860:	0800290d 	.word	0x0800290d
 8002864:	0800290d 	.word	0x0800290d
 8002868:	0800290d 	.word	0x0800290d
 800286c:	080028f1 	.word	0x080028f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002870:	f7ff fd3c 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8002874:	4602      	mov	r2, r0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	441a      	add	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	b29a      	uxth	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60da      	str	r2, [r3, #12]
        break;
 800288e:	e040      	b.n	8002912 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002890:	f7ff fd4e 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8002894:	4602      	mov	r2, r0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	441a      	add	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60da      	str	r2, [r3, #12]
        break;
 80028ae:	e030      	b.n	8002912 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80028ba:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6852      	ldr	r2, [r2, #4]
 80028c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60da      	str	r2, [r3, #12]
        break;
 80028ce:	e020      	b.n	8002912 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028d0:	f7ff fc96 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	441a      	add	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60da      	str	r2, [r3, #12]
        break;
 80028ee:	e010      	b.n	8002912 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60da      	str	r2, [r3, #12]
        break;
 800290a:	e002      	b.n	8002912 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	74fb      	strb	r3, [r7, #19]
        break;
 8002910:	bf00      	nop
    }
  }

  return ret;
 8002912:	7cfb      	ldrb	r3, [r7, #19]

}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	efff69f3 	.word	0xefff69f3
 8002920:	40013800 	.word	0x40013800
 8002924:	40021000 	.word	0x40021000
 8002928:	40004400 	.word	0x40004400
 800292c:	40004800 	.word	0x40004800

08002930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01a      	beq.n	8002a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a2e:	d10a      	bne.n	8002a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
  }
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002a86:	f7fe f8c7 	bl	8000c18 <HAL_GetTick>
 8002a8a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d10e      	bne.n	8002ab8 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f82c 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e022      	b.n	8002afe <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d10e      	bne.n	8002ae4 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ac6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f816 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e00c      	b.n	8002afe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b16:	e02c      	b.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b1e:	d028      	beq.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b26:	f7fe f877 	bl	8000c18 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d21d      	bcs.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e00f      	b.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69da      	ldr	r2, [r3, #28]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d0c3      	beq.n	8002b18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f023 020f 	bic.w	r2, r3, #15
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002bf6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bfa:	f7ff ffe1 	bl	8002bc0 <LL_ADC_IsEnabled>
 8002bfe:	4604      	mov	r4, r0
 8002c00:	4817      	ldr	r0, [pc, #92]	; (8002c60 <LL_ADC_CommonInit+0x78>)
 8002c02:	f7ff ffdd 	bl	8002bc0 <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4323      	orrs	r3, r4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d120      	bne.n	8002c50 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <LL_ADC_CommonInit+0x7c>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	6811      	ldr	r1, [r2, #0]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	6852      	ldr	r2, [r2, #4]
 8002c26:	4311      	orrs	r1, r2
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	6892      	ldr	r2, [r2, #8]
 8002c2c:	4311      	orrs	r1, r2
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	68d2      	ldr	r2, [r2, #12]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	e00b      	b.n	8002c54 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <LL_ADC_CommonInit+0x7c>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	e001      	b.n	8002c54 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd90      	pop	{r4, r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	50000100 	.word	0x50000100
 8002c64:	fffc30e0 	.word	0xfffc30e0

08002c68 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ffa2 	bl	8002bc0 <LL_ADC_IsEnabled>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d111      	bne.n	8002ca6 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c8a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	6811      	ldr	r1, [r2, #0]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	6852      	ldr	r2, [r2, #4]
 8002c96:	4311      	orrs	r1, r2
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	6892      	ldr	r2, [r2, #8]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]
 8002ca4:	e001      	b.n	8002caa <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ff7c 	bl	8002bc0 <LL_ADC_IsEnabled>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d132      	bne.n	8002d34 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <LL_ADC_REG_Init+0x90>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	6811      	ldr	r1, [r2, #0]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6892      	ldr	r2, [r2, #8]
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	68d2      	ldr	r2, [r2, #12]
 8002cec:	4311      	orrs	r1, r2
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	6912      	ldr	r2, [r2, #16]
 8002cf2:	4311      	orrs	r1, r2
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	6952      	ldr	r2, [r2, #20]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	e011      	b.n	8002d26 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <LL_ADC_REG_Init+0x90>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	6811      	ldr	r1, [r2, #0]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	68d2      	ldr	r2, [r2, #12]
 8002d12:	4311      	orrs	r1, r2
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	6912      	ldr	r2, [r2, #16]
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	6952      	ldr	r2, [r2, #20]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ff34 	bl	8002b9a <LL_ADC_REG_SetSequencerLength>
 8002d32:	e001      	b.n	8002d38 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	fff0c03c 	.word	0xfff0c03c

08002d48 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	613b      	str	r3, [r7, #16]
  return(result);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2103      	movs	r1, #3
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	401a      	ands	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	431a      	orrs	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	601a      	str	r2, [r3, #0]
}
 8002d96:	bf00      	nop
 8002d98:	3724      	adds	r7, #36	; 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	605a      	str	r2, [r3, #4]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b089      	sub	sp, #36	; 0x24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	613b      	str	r3, [r7, #16]
  return(result);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2103      	movs	r1, #3
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	401a      	ands	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002e20:	bf00      	nop
 8002e22:	3724      	adds	r7, #36	; 0x24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	613b      	str	r3, [r7, #16]
  return(result);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2103      	movs	r1, #3
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	401a      	ands	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	60da      	str	r2, [r3, #12]
}
 8002e7a:	bf00      	nop
 8002e7c:	3724      	adds	r7, #36	; 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b089      	sub	sp, #36	; 0x24
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	613b      	str	r3, [r7, #16]
  return(result);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	210f      	movs	r1, #15
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002ed4:	bf00      	nop
 8002ed6:	3724      	adds	r7, #36	; 0x24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	613b      	str	r3, [r7, #16]
  return(result);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	fab3 f383 	clz	r3, r3
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	210f      	movs	r1, #15
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	401a      	ands	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002f32:	bf00      	nop
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b088      	sub	sp, #32
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	613b      	str	r3, [r7, #16]
  return(result);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002f66:	e048      	b.n	8002ffa <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa01 f303 	lsl.w	r3, r1, r3
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d03a      	beq.n	8002ff4 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	461a      	mov	r2, r3
 8002f84:	69b9      	ldr	r1, [r7, #24]
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fede 	bl	8002d48 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d003      	beq.n	8002f9c <LL_GPIO_Init+0x5e>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d106      	bne.n	8002faa <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	69b9      	ldr	r1, [r7, #24]
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ff14 	bl	8002dd2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	69b9      	ldr	r1, [r7, #24]
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ff3a 	bl	8002e2c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d119      	bne.n	8002ff4 <LL_GPIO_Init+0xb6>
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	2b07      	cmp	r3, #7
 8002fd4:	d807      	bhi.n	8002fe6 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	69b9      	ldr	r1, [r7, #24]
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ff51 	bl	8002e86 <LL_GPIO_SetAFPin_0_7>
 8002fe4:	e006      	b.n	8002ff4 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	461a      	mov	r2, r3
 8002fec:	69b9      	ldr	r1, [r7, #24]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ff76 	bl	8002ee0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1af      	bne.n	8002f68 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d003      	beq.n	8003018 <LL_GPIO_Init+0xda>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d107      	bne.n	8003028 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	6819      	ldr	r1, [r3, #0]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	461a      	mov	r2, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff febd 	bl	8002da2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	615a      	str	r2, [r3, #20]
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a2f      	ldr	r2, [pc, #188]	; (8003224 <LL_TIM_Init+0xd4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d007      	beq.n	800317c <LL_TIM_Init+0x2c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003172:	d003      	beq.n	800317c <LL_TIM_Init+0x2c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a2c      	ldr	r2, [pc, #176]	; (8003228 <LL_TIM_Init+0xd8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d106      	bne.n	800318a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a25      	ldr	r2, [pc, #148]	; (8003224 <LL_TIM_Init+0xd4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <LL_TIM_Init+0x6a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003198:	d00f      	beq.n	80031ba <LL_TIM_Init+0x6a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a22      	ldr	r2, [pc, #136]	; (8003228 <LL_TIM_Init+0xd8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00b      	beq.n	80031ba <LL_TIM_Init+0x6a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a21      	ldr	r2, [pc, #132]	; (800322c <LL_TIM_Init+0xdc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <LL_TIM_Init+0x6a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a20      	ldr	r2, [pc, #128]	; (8003230 <LL_TIM_Init+0xe0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <LL_TIM_Init+0x6a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1f      	ldr	r2, [pc, #124]	; (8003234 <LL_TIM_Init+0xe4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d106      	bne.n	80031c8 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	4619      	mov	r1, r3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff3a 	bl	800304e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	4619      	mov	r1, r3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff26 	bl	8003032 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <LL_TIM_Init+0xd4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00b      	beq.n	8003206 <LL_TIM_Init+0xb6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a0e      	ldr	r2, [pc, #56]	; (800322c <LL_TIM_Init+0xdc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d007      	beq.n	8003206 <LL_TIM_Init+0xb6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a0d      	ldr	r2, [pc, #52]	; (8003230 <LL_TIM_Init+0xe0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d003      	beq.n	8003206 <LL_TIM_Init+0xb6>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <LL_TIM_Init+0xe4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d105      	bne.n	8003212 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	7c1b      	ldrb	r3, [r3, #16]
 800320a:	4619      	mov	r1, r3
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ff2c 	bl	800306a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff ff8b 	bl	800312e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40000400 	.word	0x40000400
 800322c:	40014000 	.word	0x40014000
 8003230:	40014400 	.word	0x40014400
 8003234:	40014800 	.word	0x40014800

08003238 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324e:	d01f      	beq.n	8003290 <LL_TIM_OC_Init+0x58>
 8003250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003254:	d804      	bhi.n	8003260 <LL_TIM_OC_Init+0x28>
 8003256:	2b01      	cmp	r3, #1
 8003258:	d00c      	beq.n	8003274 <LL_TIM_OC_Init+0x3c>
 800325a:	2b10      	cmp	r3, #16
 800325c:	d011      	beq.n	8003282 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800325e:	e033      	b.n	80032c8 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d022      	beq.n	80032ac <LL_TIM_OC_Init+0x74>
 8003266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800326a:	d026      	beq.n	80032ba <LL_TIM_OC_Init+0x82>
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003270:	d015      	beq.n	800329e <LL_TIM_OC_Init+0x66>
      break;
 8003272:	e029      	b.n	80032c8 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f89c 	bl	80033b4 <OC1Config>
 800327c:	4603      	mov	r3, r0
 800327e:	75fb      	strb	r3, [r7, #23]
      break;
 8003280:	e022      	b.n	80032c8 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f915 	bl	80034b4 <OC2Config>
 800328a:	4603      	mov	r3, r0
 800328c:	75fb      	strb	r3, [r7, #23]
      break;
 800328e:	e01b      	b.n	80032c8 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f992 	bl	80035bc <OC3Config>
 8003298:	4603      	mov	r3, r0
 800329a:	75fb      	strb	r3, [r7, #23]
      break;
 800329c:	e014      	b.n	80032c8 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fa0f 	bl	80036c4 <OC4Config>
 80032a6:	4603      	mov	r3, r0
 80032a8:	75fb      	strb	r3, [r7, #23]
      break;
 80032aa:	e00d      	b.n	80032c8 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fa74 	bl	800379c <OC5Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	75fb      	strb	r3, [r7, #23]
      break;
 80032b8:	e006      	b.n	80032c8 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 facf 	bl	8003860 <OC6Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	75fb      	strb	r3, [r7, #23]
      break;
 80032c6:	bf00      	nop
  }

  return result;
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	7b12      	ldrb	r2, [r2, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	89d2      	ldrh	r2, [r2, #14]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a16      	ldr	r2, [pc, #88]	; (80033b0 <LL_TIM_BDTR_Init+0xdc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d106      	bne.n	8003368 <LL_TIM_BDTR_Init+0x94>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BKF */
#if defined(TIM_BDTR_BK2E)

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <LL_TIM_BDTR_Init+0xdc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d114      	bne.n	800339a <LL_TIM_BDTR_Init+0xc6>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40012c00 	.word	0x40012c00

080033b4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f023 0201 	bic.w	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 0202 	bic.w	r2, r3, #2
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a20      	ldr	r2, [pc, #128]	; (80034a4 <OC1Config+0xf0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00b      	beq.n	800343e <OC1Config+0x8a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1f      	ldr	r2, [pc, #124]	; (80034a8 <OC1Config+0xf4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <OC1Config+0x8a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <OC1Config+0xf8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <OC1Config+0x8a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <OC1Config+0xfc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d11e      	bne.n	800347c <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f023 0208 	bic.w	r2, r3, #8
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 0204 	bic.w	r2, r3, #4
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4619      	mov	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fdf9 	bl	8003086 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40014400 	.word	0x40014400
 80034b0:	40014800 	.word	0x40014800

080034b4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f023 0210 	bic.w	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	0212      	lsls	r2, r2, #8
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0220 	bic.w	r2, r3, #32
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f023 0210 	bic.w	r2, r3, #16
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a21      	ldr	r2, [pc, #132]	; (80035ac <OC2Config+0xf8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00b      	beq.n	8003544 <OC2Config+0x90>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a20      	ldr	r2, [pc, #128]	; (80035b0 <OC2Config+0xfc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d007      	beq.n	8003544 <OC2Config+0x90>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <OC2Config+0x100>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <OC2Config+0x90>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <OC2Config+0x104>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d11f      	bne.n	8003584 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	019b      	lsls	r3, r3, #6
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	019b      	lsls	r3, r3, #6
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fd83 	bl	80030a2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40012c00 	.word	0x40012c00
 80035b0:	40014000 	.word	0x40014000
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800

080035bc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0303 	bic.w	r3, r3, #3
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <OC3Config+0xf8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00b      	beq.n	800364a <OC3Config+0x8e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a20      	ldr	r2, [pc, #128]	; (80036b8 <OC3Config+0xfc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d007      	beq.n	800364a <OC3Config+0x8e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <OC3Config+0x100>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d003      	beq.n	800364a <OC3Config+0x8e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a1e      	ldr	r2, [pc, #120]	; (80036c0 <OC3Config+0x104>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d11f      	bne.n	800368a <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	029b      	lsls	r3, r3, #10
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	029b      	lsls	r3, r3, #10
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	015b      	lsls	r3, r3, #5
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff fd0e 	bl	80030be <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40014000 	.word	0x40014000
 80036bc:	40014400 	.word	0x40014400
 80036c0:	40014800 	.word	0x40014800

080036c4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fe:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	0212      	lsls	r2, r2, #8
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	031b      	lsls	r3, r3, #12
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	031b      	lsls	r3, r3, #12
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a15      	ldr	r2, [pc, #84]	; (800378c <OC4Config+0xc8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00b      	beq.n	8003754 <OC4Config+0x90>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a14      	ldr	r2, [pc, #80]	; (8003790 <OC4Config+0xcc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d007      	beq.n	8003754 <OC4Config+0x90>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a13      	ldr	r2, [pc, #76]	; (8003794 <OC4Config+0xd0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <OC4Config+0x90>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a12      	ldr	r2, [pc, #72]	; (8003798 <OC4Config+0xd4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d107      	bne.n	8003764 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	019b      	lsls	r3, r3, #6
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fcaf 	bl	80030da <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800

0800379c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	041b      	lsls	r3, r3, #16
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a15      	ldr	r2, [pc, #84]	; (8003850 <OC5Config+0xb4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00b      	beq.n	8003818 <OC5Config+0x7c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a14      	ldr	r2, [pc, #80]	; (8003854 <OC5Config+0xb8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d007      	beq.n	8003818 <OC5Config+0x7c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a13      	ldr	r2, [pc, #76]	; (8003858 <OC5Config+0xbc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <OC5Config+0x7c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a12      	ldr	r2, [pc, #72]	; (800385c <OC5Config+0xc0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d109      	bne.n	800382c <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff fc5c 	bl	80030f6 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40012c00 	.word	0x40012c00
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800

08003860 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	0212      	lsls	r2, r2, #8
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	051b      	lsls	r3, r3, #20
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	051b      	lsls	r3, r3, #20
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a14      	ldr	r2, [pc, #80]	; (8003914 <OC6Config+0xb4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00b      	beq.n	80038de <OC6Config+0x7e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a13      	ldr	r2, [pc, #76]	; (8003918 <OC6Config+0xb8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <OC6Config+0x7e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a12      	ldr	r2, [pc, #72]	; (800391c <OC6Config+0xbc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d003      	beq.n	80038de <OC6Config+0x7e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a11      	ldr	r2, [pc, #68]	; (8003920 <OC6Config+0xc0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d109      	bne.n	80038f2 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	029b      	lsls	r3, r3, #10
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4619      	mov	r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff fc07 	bl	8003112 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40014000 	.word	0x40014000
 800391c:	40014400 	.word	0x40014400
 8003920:	40014800 	.word	0x40014800

08003924 <LL_TIM_EnableCounter>:
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f043 0201 	orr.w	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	601a      	str	r2, [r3, #0]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <LL_TIM_CC_EnableChannel>:
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1a      	ldr	r2, [r3, #32]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	621a      	str	r2, [r3, #32]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <LL_TIM_EnableAllOutputs>:
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <_ZN3PWM6setTIMEP11TIM_TypeDef>:

#include "PWM.hpp"
#include "stm32f3xx_hal.h"
#include "tim.h"

void PWM::setTIM(TIM_TypeDef* pTIMx){
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	601a      	str	r2, [r3, #0]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	605a      	str	r2, [r3, #4]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <_ZN3PWM4InitEv>:

void PWM::Init(){
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]

	if(mCH==0){//error check
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d100      	bne.n	80039d0 <_ZN3PWM4InitEv+0x12>
		while(1){}
 80039ce:	e7fe      	b.n	80039ce <_ZN3PWM4InitEv+0x10>
	}

	//mREG Init
	if (mCH == 1){
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d105      	bne.n	80039e4 <_ZN3PWM4InitEv+0x26>
		mREG=&(mTIMx->CCR1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	609a      	str	r2, [r3, #8]
	}
	if (mCH == 2){
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d105      	bne.n	80039f8 <_ZN3PWM4InitEv+0x3a>
		mREG=&(mTIMx->CCR2);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	609a      	str	r2, [r3, #8]
	}
	if (mCH == 3){
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d105      	bne.n	8003a0c <_ZN3PWM4InitEv+0x4e>
		mREG=&(mTIMx->CCR3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
	}

	if(mREG==NULL){//error check
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d100      	bne.n	8003a16 <_ZN3PWM4InitEv+0x58>
		while(1){}
 8003a14:	e7fe      	b.n	8003a14 <_ZN3PWM4InitEv+0x56>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d100      	bne.n	8003a20 <_ZN3PWM4InitEv+0x62>
		while(1){}
 8003a1e:	e7fe      	b.n	8003a1e <_ZN3PWM4InitEv+0x60>
	}
	if (mCH == 1){
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d105      	bne.n	8003a34 <_ZN3PWM4InitEv+0x76>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ff88 	bl	8003944 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d105      	bne.n	8003a48 <_ZN3PWM4InitEv+0x8a>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2110      	movs	r1, #16
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff ff7e 	bl	8003944 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d106      	bne.n	8003a5e <_ZN3PWM4InitEv+0xa0>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff73 	bl	8003944 <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff ff5e 	bl	8003924 <LL_TIM_EnableCounter>
	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ff7a 	bl	8003966 <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <_ZN3PWM4DutyEi>:

void PWM::Duty(int pDuty){
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
	WRITE_REG(*mREG, pDuty);
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	601a      	str	r2, [r3, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_ZN3PWMC1Ev>:


#ifndef PWM_HPP_
#define PWM_HPP_

class PWM {
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <CPP_Wrapper>:
#include "LedBlink.hpp"
#include "PWM.hpp"

void vectorInit(std::vector<int> *pVector);//プロトタイプ宣言

void CPP_Wrapper(void){
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08e      	sub	sp, #56	; 0x38
 8003ad0:	af00      	add	r7, sp, #0

	std::vector<int> num;
 8003ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f906 	bl	8003ce8 <_ZNSt6vectorIiSaIiEEC1Ev>
	vectorInit(&num);
 8003adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 f895 	bl	8003c10 <_Z10vectorInitPSt6vectorIiSaIiEE>

	PWM PWM_Object1;
 8003ae6:	f107 031c 	add.w	r3, r7, #28
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ffe0 	bl	8003ab0 <_ZN3PWMC1Ev>
	PWM PWM_Object2;
 8003af0:	f107 0310 	add.w	r3, r7, #16
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ffdb 	bl	8003ab0 <_ZN3PWMC1Ev>
	PWM PWM_Object3;
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff ffd7 	bl	8003ab0 <_ZN3PWMC1Ev>

	PWM_Object1.setTIM(TIM1);
 8003b02:	f107 031c 	add.w	r3, r7, #28
 8003b06:	4940      	ldr	r1, [pc, #256]	; (8003c08 <CPP_Wrapper+0x13c>)
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff3c 	bl	8003986 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 8003b0e:	f107 0310 	add.w	r3, r7, #16
 8003b12:	493d      	ldr	r1, [pc, #244]	; (8003c08 <CPP_Wrapper+0x13c>)
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ff36 	bl	8003986 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	493a      	ldr	r1, [pc, #232]	; (8003c08 <CPP_Wrapper+0x13c>)
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ff31 	bl	8003986 <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 8003b24:	f107 031c 	add.w	r3, r7, #28
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ff39 	bl	80039a2 <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 8003b30:	f107 0310 	add.w	r3, r7, #16
 8003b34:	2102      	movs	r1, #2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff ff33 	bl	80039a2 <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 8003b3c:	1d3b      	adds	r3, r7, #4
 8003b3e:	2103      	movs	r1, #3
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff2e 	bl	80039a2 <_ZN3PWM5setCHEi>

	PWM_Object1.Init();
 8003b46:	f107 031c 	add.w	r3, r7, #28
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff37 	bl	80039be <_ZN3PWM4InitEv>
	PWM_Object2.Init();
 8003b50:	f107 0310 	add.w	r3, r7, #16
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff32 	bl	80039be <_ZN3PWM4InitEv>
	PWM_Object3.Init();
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff ff2e 	bl	80039be <_ZN3PWM4InitEv>

	while(1){
		  for(int i=0;i<600;i++){
 8003b62:	2300      	movs	r3, #0
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b68:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003b6c:	daf9      	bge.n	8003b62 <CPP_Wrapper+0x96>
			  HAL_Delay(1);
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f7fd f85e 	bl	8000c30 <HAL_Delay>
			  PWM_Object1.Duty(num[i]);;
 8003b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 f8c0 	bl	8003d02 <_ZNSt6vectorIiSaIiEEixEj>
 8003b82:	4603      	mov	r3, r0
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	f107 031c 	add.w	r3, r7, #28
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ff74 	bl	8003a7a <_ZN3PWM4DutyEi>
			  PWM_Object2.Duty(num[(i+200)%600]);
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	33c8      	adds	r3, #200	; 0xc8
 8003b96:	4a1d      	ldr	r2, [pc, #116]	; (8003c0c <CPP_Wrapper+0x140>)
 8003b98:	fb82 1203 	smull	r1, r2, r2, r3
 8003b9c:	1191      	asrs	r1, r2, #6
 8003b9e:	17da      	asrs	r2, r3, #31
 8003ba0:	1a8a      	subs	r2, r1, r2
 8003ba2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003ba6:	fb01 f202 	mul.w	r2, r1, r2
 8003baa:	1a9a      	subs	r2, r3, r2
 8003bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f8a5 	bl	8003d02 <_ZNSt6vectorIiSaIiEEixEj>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	f107 0310 	add.w	r3, r7, #16
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff ff59 	bl	8003a7a <_ZN3PWM4DutyEi>
			  PWM_Object3.Duty(num[(i+400)%600]);
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bca:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003bce:	4a0f      	ldr	r2, [pc, #60]	; (8003c0c <CPP_Wrapper+0x140>)
 8003bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8003bd4:	1191      	asrs	r1, r2, #6
 8003bd6:	17da      	asrs	r2, r3, #31
 8003bd8:	1a8a      	subs	r2, r1, r2
 8003bda:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003bde:	fb01 f202 	mul.w	r2, r1, r2
 8003be2:	1a9a      	subs	r2, r3, r2
 8003be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f889 	bl	8003d02 <_ZNSt6vectorIiSaIiEEixEj>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff3e 	bl	8003a7a <_ZN3PWM4DutyEi>
		  for(int i=0;i<600;i++){
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c00:	3301      	adds	r3, #1
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
 8003c04:	e7af      	b.n	8003b66 <CPP_Wrapper+0x9a>
 8003c06:	bf00      	nop
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	1b4e81b5 	.word	0x1b4e81b5

08003c10 <_Z10vectorInitPSt6vectorIiSaIiEE>:
		  }
	}
}


void vectorInit(std::vector<int> *pVector){
 8003c10:	b5b0      	push	{r4, r5, r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	int lange;
	lange = 600;
 8003c18:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003c1c:	61bb      	str	r3, [r7, #24]
	int count = 65535;
 8003c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c22:	617b      	str	r3, [r7, #20]
	for(int i=0;i<lange;i++){
 8003c24:	2300      	movs	r3, #0
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	da53      	bge.n	8003cd8 <_Z10vectorInitPSt6vectorIiSaIiEE+0xc8>
		float fsinval = sin(i*2*M_PI/(float)lange);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fc fc19 	bl	800046c <__aeabi_i2d>
 8003c3a:	a329      	add	r3, pc, #164	; (adr r3, 8003ce0 <_Z10vectorInitPSt6vectorIiSaIiEE+0xd0>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f7fc fc7e 	bl	8000540 <__aeabi_dmul>
 8003c44:	4603      	mov	r3, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	4625      	mov	r5, r4
 8003c4a:	461c      	mov	r4, r3
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c56:	ee17 0a90 	vmov	r0, s15
 8003c5a:	f7fc fc19 	bl	8000490 <__aeabi_f2d>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4620      	mov	r0, r4
 8003c64:	4629      	mov	r1, r5
 8003c66:	f7fc fd95 	bl	8000794 <__aeabi_ddiv>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	ec44 3b17 	vmov	d7, r3, r4
 8003c72:	eeb0 0a47 	vmov.f32	s0, s14
 8003c76:	eef0 0a67 	vmov.f32	s1, s15
 8003c7a:	f001 f9d5 	bl	8005028 <sin>
 8003c7e:	ec54 3b10 	vmov	r3, r4, d0
 8003c82:	4618      	mov	r0, r3
 8003c84:	4621      	mov	r1, r4
 8003c86:	f7fc ff1d 	bl	8000ac4 <__aeabi_d2f>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	613b      	str	r3, [r7, #16]
		int val = count/2 * fsinval + count/2;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	0fda      	lsrs	r2, r3, #31
 8003c92:	4413      	add	r3, r2
 8003c94:	105b      	asrs	r3, r3, #1
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	0fda      	lsrs	r2, r3, #31
 8003caa:	4413      	add	r3, r2
 8003cac:	105b      	asrs	r3, r3, #1
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cbe:	ee17 3a90 	vmov	r3, s15
 8003cc2:	60fb      	str	r3, [r7, #12]
		pVector->push_back(val);
 8003cc4:	f107 030c 	add.w	r3, r7, #12
 8003cc8:	4619      	mov	r1, r3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f829 	bl	8003d22 <_ZNSt6vectorIiSaIiEE9push_backERKi>
	for(int i=0;i<lange;i++){
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e7a7      	b.n	8003c28 <_Z10vectorInitPSt6vectorIiSaIiEE+0x18>
	}
}
 8003cd8:	bf00      	nop
 8003cda:	3720      	adds	r7, #32
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce0:	54442d18 	.word	0x54442d18
 8003ce4:	400921fb 	.word	0x400921fb

08003ce8 <_ZNSt6vectorIiSaIiEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f83a 	bl	8003d6c <_ZNSt12_Vector_baseIiSaIiEEC1Ev>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ZNSt6vectorIiSaIiEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
      }
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <_ZNSt6vectorIiSaIiEE9push_backERKi>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d00c      	beq.n	8003d52 <_ZNSt6vectorIiSaIiEE9push_backERKi+0x30>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	4619      	mov	r1, r3
 8003d42:	f000 f844 	bl	8003dce <_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8003d50:	e008      	b.n	8003d64 <_ZNSt6vectorIiSaIiEE9push_backERKi+0x42>
	  _M_realloc_insert(end(), __x);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f84e 	bl	8003df4 <_ZNSt6vectorIiSaIiEE3endEv>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f85a 	bl	8003e18 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_>
      }
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <_ZNSt12_Vector_baseIiSaIiEEC1Ev>:
      _Vector_base()
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f8da 	bl	8003f30 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f8e8 	bl	8003f80 <_ZSt8_DestroyIPiEvT_S1_>
    }
 8003db0:	bf00      	nop
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ffec 	bl	8003db8 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f8d7 	bl	8003f9a <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_>
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <_ZNSt6vectorIiSaIiEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	1d1a      	adds	r2, r3, #4
 8003e00:	f107 030c 	add.w	r3, r7, #12
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f8df 	bl	8003fca <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8003e24:	4a41      	ldr	r2, [pc, #260]	; (8003f2c <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_+0x114>)
 8003e26:	2101      	movs	r1, #1
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f8de 	bl	8003fea <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc>
 8003e2e:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f922 	bl	800407a <_ZNSt6vectorIiSaIiEE5beginEv>
 8003e36:	4603      	mov	r3, r0
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	f107 0214 	add.w	r2, r7, #20
 8003e3e:	f107 0308 	add.w	r3, r7, #8
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 f928 	bl	800409a <_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f937 	bl	80040c6 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 8003e58:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8003e5e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	18d5      	adds	r5, r2, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ffa5 	bl	8003db8 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	461a      	mov	r2, r3
 8003e72:	4629      	mov	r1, r5
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff ffaa 	bl	8003dce <_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681c      	ldr	r4, [r3, #0]
 8003e82:	f107 0308 	add.w	r3, r7, #8
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f931 	bl	80040ee <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ff77 	bl	8003d86 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8003e98:	4603      	mov	r3, r0
	  __new_finish
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f000 f930 	bl	8004104 <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>
 8003ea4:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8003eac:	f107 0308 	add.w	r3, r7, #8
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f91c 	bl	80040ee <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	681c      	ldr	r4, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff60 	bl	8003d86 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8003ec6:	4603      	mov	r3, r0
	  __new_finish
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4629      	mov	r1, r5
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f000 f919 	bl	8004104 <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>
 8003ed2:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681c      	ldr	r4, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff ff51 	bl	8003d86 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8003ee4:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4629      	mov	r1, r5
 8003eea:	4620      	mov	r0, r4
 8003eec:	f7ff ff56 	bl	8003d9c <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8003f04:	461a      	mov	r2, r3
 8003f06:	f000 f828 	bl	8003f5a <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
      this->_M_impl._M_start = __new_start;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	441a      	add	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	609a      	str	r2, [r3, #8]
    }
 8003f22:	bf00      	nop
 8003f24:	3728      	adds	r7, #40	; 0x28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bdb0      	pop	{r4, r5, r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	08006328 	.word	0x08006328

08003f30 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>:
	_Vector_impl()
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f8fc 	bl	8004136 <_ZNSaIiEC1Ev>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	609a      	str	r2, [r3, #8]
	{ }
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
	if (__p)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f8eb 	bl	800414e <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <_ZSt8_DestroyIPiEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f8ed 	bl	800416c <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8003f9a:	b590      	push	{r4, r7, lr}
 8003f9c:	b085      	sub	sp, #20
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ff06 	bl	8003db8 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8003fac:	4603      	mov	r3, r0
 8003fae:	681c      	ldr	r4, [r3, #0]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	2004      	movs	r0, #4
 8003fb6:	f7ff fd6f 	bl	8003a98 <_ZnwjPv>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d000      	beq.n	8003fc2 <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_+0x28>
 8003fc0:	601c      	str	r4, [r3, #0]
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd90      	pop	{r4, r7, pc}

08003fca <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8003fea:	b590      	push	{r4, r7, lr}
 8003fec:	b087      	sub	sp, #28
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f8c3 	bl	8004182 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f8d0 	bl	80041a4 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8004004:	4603      	mov	r3, r0
 8004006:	1ae2      	subs	r2, r4, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	429a      	cmp	r2, r3
 800400c:	bf34      	ite	cc
 800400e:	2301      	movcc	r3, #1
 8004010:	2300      	movcs	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fff7 	bl	800500e <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f8bf 	bl	80041a4 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8004026:	4604      	mov	r4, r0
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f8bb 	bl	80041a4 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 800402e:	4603      	mov	r3, r0
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	f107 0208 	add.w	r2, r7, #8
 8004036:	f107 0310 	add.w	r3, r7, #16
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f8c2 	bl	80041c6 <_ZSt3maxIjERKT_S2_S2_>
 8004042:	4603      	mov	r3, r0
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4423      	add	r3, r4
 8004048:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f8aa 	bl	80041a4 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8004050:	4602      	mov	r2, r0
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	4293      	cmp	r3, r2
 8004056:	d306      	bcc.n	8004066 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x7c>
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f892 	bl	8004182 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 800405e:	4602      	mov	r2, r0
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	4293      	cmp	r3, r2
 8004064:	d904      	bls.n	8004070 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x86>
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f88b 	bl	8004182 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 800406c:	4603      	mov	r3, r0
 800406e:	e000      	b.n	8004072 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x88>
 8004070:	697b      	ldr	r3, [r7, #20]
      }
 8004072:	4618      	mov	r0, r3
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd90      	pop	{r4, r7, pc}

0800407a <_ZNSt6vectorIiSaIiEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	f107 030c 	add.w	r3, r7, #12
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff ff9d 	bl	8003fca <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800409a:	b590      	push	{r4, r7, lr}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f822 	bl	80040ee <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 80040aa:	4603      	mov	r3, r0
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461c      	mov	r4, r3
 80040b0:	6838      	ldr	r0, [r7, #0]
 80040b2:	f000 f81c 	bl	80040ee <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 80040b6:	4603      	mov	r3, r0
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	1ae3      	subs	r3, r4, r3
 80040bc:	109b      	asrs	r3, r3, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd90      	pop	{r4, r7, pc}

080040c6 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d006      	beq.n	80040e4 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6839      	ldr	r1, [r7, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f887 	bl	80041ee <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 80040e0:	4603      	mov	r3, r0
 80040e2:	e000      	b.n	80040e6 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 80040e4:	2300      	movs	r3, #0
      }
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f87a 	bl	800420c <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>
 8004118:	4604      	mov	r4, r0
 800411a:	68b8      	ldr	r0, [r7, #8]
 800411c:	f000 f876 	bl	800420c <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>
 8004120:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4620      	mov	r0, r4
 8004128:	f000 f87f 	bl	800422a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E>
 800412c:	4603      	mov	r3, r0
    }
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	bd90      	pop	{r4, r7, pc}

08004136 <_ZNSaIiEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f884 	bl	800424c <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f87f 	bl	8004262 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4618      	mov	r0, r3
 800418e:	f000 f881 	bl	8004294 <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8004192:	4603      	mov	r3, r0
 8004194:	4618      	mov	r0, r3
 8004196:	f000 f871 	bl	800427c <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 800419a:	4603      	mov	r3, r0
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	461a      	mov	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	109b      	asrs	r3, r3, #2
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d201      	bcs.n	80041e0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	e000      	b.n	80041e2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80041e0:	687b      	ldr	r3, [r7, #4]
    }
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80041f8:	2200      	movs	r2, #0
 80041fa:	6839      	ldr	r1, [r7, #0]
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f854 	bl	80042aa <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>
 8004202:	4603      	mov	r3, r0
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8004214:	f107 030c 	add.w	r3, r7, #12
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f863 	bl	80042e6 <_ZNSt13move_iteratorIPiEC1ES0_>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f861 	bl	8004304 <_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>
 8004242:	4603      	mov	r3, r0
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>:
      deallocate(pointer __p, size_type)
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800426e:	68b8      	ldr	r0, [r7, #8]
 8004270:	f000 feb7 	bl	8004fe2 <_ZdlPv>
      }
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f84f 	bl	8004328 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 800428a:	4603      	mov	r3, r0
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f836 	bl	8004328 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 80042bc:	4602      	mov	r2, r0
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4293      	cmp	r3, r2
 80042c2:	bf8c      	ite	hi
 80042c4:	2301      	movhi	r3, #1
 80042c6:	2300      	movls	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80042ce:	f000 fe9b 	bl	8005008 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fe85 	bl	8004fe6 <_Znwj>
 80042dc:	4603      	mov	r3, r0
      }
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <_ZNSt13move_iteratorIPiEC1ES0_>:
      move_iterator(iterator_type __i)
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004310:	2301      	movs	r3, #1
 8004312:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f811 	bl	8004340 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_>
 800431e:	4603      	mov	r3, r0
    }
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8004330:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f805 	bl	8004360 <_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>
 8004356:	4603      	mov	r3, r0
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8004360:	b590      	push	{r4, r7, lr}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f80f 	bl	8004390 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004372:	4604      	mov	r4, r0
 8004374:	68b8      	ldr	r0, [r7, #8]
 8004376:	f000 f80b 	bl	8004390 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800437a:	4603      	mov	r3, r0
	       __result));
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	4619      	mov	r1, r3
 8004380:	4620      	mov	r0, r4
 8004382:	f000 f816 	bl	80043b2 <_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_>
 8004386:	4603      	mov	r3, r0
    }
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}

08004390 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8004398:	1d3b      	adds	r3, r7, #4
 800439a:	4618      	mov	r0, r3
 800439c:	f000 f825 	bl	80043ea <_ZNKSt13move_iteratorIPiE4baseEv>
 80043a0:	4603      	mov	r3, r0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f82d 	bl	8004402 <_ZSt12__miter_baseIPiET_S1_>
 80043a8:	4603      	mov	r3, r0
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80043b2:	b5b0      	push	{r4, r5, r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f82a 	bl	8004418 <_ZSt12__niter_baseIPiET_S1_>
 80043c4:	4604      	mov	r4, r0
 80043c6:	68b8      	ldr	r0, [r7, #8]
 80043c8:	f000 f826 	bl	8004418 <_ZSt12__niter_baseIPiET_S1_>
 80043cc:	4605      	mov	r5, r0
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f822 	bl	8004418 <_ZSt12__niter_baseIPiET_S1_>
 80043d4:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80043d6:	461a      	mov	r2, r3
 80043d8:	4629      	mov	r1, r5
 80043da:	4620      	mov	r0, r4
 80043dc:	f000 f827 	bl	800442e <_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_>
 80043e0:	4603      	mov	r3, r0
    }
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bdb0      	pop	{r4, r5, r7, pc}

080043ea <_ZNKSt13move_iteratorIPiE4baseEv>:
      base() const
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <_ZSt12__miter_baseIPiET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
    { return __it; }
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f805 	bl	8004452 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 8004448:	4603      	mov	r3, r0
    }
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	109b      	asrs	r3, r3, #2
 8004466:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d006      	beq.n	800447c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	461a      	mov	r2, r3
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f001 fe28 	bl	80060cc <memmove>
	  return __result + _Num;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	4413      	add	r3, r2
	}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <LL_ADC_REG_SetSequencerRanks>:
{
 800448c:	b490      	push	{r4, r7}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3330      	adds	r3, #48	; 0x30
 800449c:	4619      	mov	r1, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80044a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	fa93 f3a3 	rbit	r3, r3
 80044b0:	613b      	str	r3, [r7, #16]
  return(result);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	fab3 f383 	clz	r3, r3
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80044c2:	6822      	ldr	r2, [r4, #0]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	211f      	movs	r1, #31
 80044cc:	fa01 f303 	lsl.w	r3, r1, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	401a      	ands	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	f1c3 031a 	rsb	r3, r3, #26
 80044e4:	fa21 f303 	lsr.w	r3, r1, r3
 80044e8:	4313      	orrs	r3, r2
 80044ea:	6023      	str	r3, [r4, #0]
}
 80044ec:	bf00      	nop
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc90      	pop	{r4, r7}
 80044f4:	4770      	bx	lr

080044f6 <LL_ADC_SetChannelSamplingTime>:
{
 80044f6:	b490      	push	{r4, r7}
 80044f8:	b08a      	sub	sp, #40	; 0x28
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3314      	adds	r3, #20
 8004506:	4619      	mov	r1, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800450e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	fa93 f3a3 	rbit	r3, r3
 800451a:	613b      	str	r3, [r7, #16]
  return(result);
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	fab3 f383 	clz	r3, r3
 8004522:	fa22 f303 	lsr.w	r3, r2, r3
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8004534:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8004538:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	fa93 f3a3 	rbit	r3, r3
 8004540:	61bb      	str	r3, [r7, #24]
  return(result);
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	fab3 f383 	clz	r3, r3
 8004548:	fa21 f303 	lsr.w	r3, r1, r3
 800454c:	2107      	movs	r1, #7
 800454e:	fa01 f303 	lsl.w	r3, r1, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	401a      	ands	r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 800455c:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	fa93 f3a3 	rbit	r3, r3
 8004568:	623b      	str	r3, [r7, #32]
  return(result);
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	fab3 f383 	clz	r3, r3
 8004570:	fa21 f303 	lsr.w	r3, r1, r3
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	fa01 f303 	lsl.w	r3, r1, r3
 800457a:	4313      	orrs	r3, r2
 800457c:	6023      	str	r3, [r4, #0]
}
 800457e:	bf00      	nop
 8004580:	3728      	adds	r7, #40	; 0x28
 8004582:	46bd      	mov	sp, r7
 8004584:	bc90      	pop	{r4, r7}
 8004586:	4770      	bx	lr

08004588 <LL_ADC_SetChannelSingleDiff>:
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a0:	43db      	mvns	r3, r3
 80045a2:	401a      	ands	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	4908      	ldr	r1, [pc, #32]	; (80045cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80045ac:	4099      	lsls	r1, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	400b      	ands	r3, r1
 80045b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b6:	431a      	orrs	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80045be:	bf00      	nop
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	0007ffff 	.word	0x0007ffff

080045d0 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f023 0204 	bic.w	r2, r3, #4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	605a      	str	r2, [r3, #4]
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f023 0208 	bic.w	r2, r3, #8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	605a      	str	r2, [r3, #4]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8004618:	4b08      	ldr	r3, [pc, #32]	; (800463c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800461a:	695a      	ldr	r2, [r3, #20]
 800461c:	4907      	ldr	r1, [pc, #28]	; (800463c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4313      	orrs	r3, r2
 8004622:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4013      	ands	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800462e:	68fb      	ldr	r3, [r7, #12]
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	40021000 	.word	0x40021000

08004640 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b094      	sub	sp, #80	; 0x50
 8004644:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004646:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	605a      	str	r2, [r3, #4]
 800465c:	609a      	str	r2, [r3, #8]
 800465e:	60da      	str	r2, [r3, #12]
 8004660:	611a      	str	r2, [r3, #16]
 8004662:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8004664:	f107 031c 	add.w	r3, r7, #28
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	605a      	str	r2, [r3, #4]
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004672:	1d3b      	adds	r3, r7, #4
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	611a      	str	r2, [r3, #16]
 8004680:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8004682:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004686:	f7ff ffc3 	bl	8004610 <LL_AHB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800468a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800468e:	f7ff ffbf 	bl	8004610 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration  
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  PA3   ------> ADC1_IN4 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3;
 8004692:	230b      	movs	r3, #11
 8004694:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004696:	2303      	movs	r3, #3
 8004698:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469e:	1d3b      	adds	r3, r7, #4
 80046a0:	4619      	mov	r1, r3
 80046a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046a6:	f7fe fc4a 	bl	8002f3e <LL_GPIO_Init>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80046aa:	2300      	movs	r3, #0
 80046ac:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80046ae:	2300      	movs	r3, #0
 80046b0:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80046b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046ba:	4619      	mov	r1, r3
 80046bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046c0:	f7fe fad2 	bl	8002c68 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80046cc:	2300      	movs	r3, #0
 80046ce:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80046d4:	2301      	movs	r3, #1
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 80046d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046dc:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80046de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046e2:	4619      	mov	r1, r3
 80046e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046e8:	f7fe fae4 	bl	8002cb4 <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC1);
 80046ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046f0:	f7ff ff6e 	bl	80045d0 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 80046f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046f8:	f7ff ff7a 	bl	80045f0 <LL_ADC_DisableIT_EOS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8004700:	2300      	movs	r3, #0
 8004702:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8004704:	f107 031c 	add.w	r3, r7, #28
 8004708:	4619      	mov	r1, r3
 800470a:	480c      	ldr	r0, [pc, #48]	; (800473c <MX_ADC1_Init+0xfc>)
 800470c:	f7fe fa6c 	bl	8002be8 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8004710:	4a0b      	ldr	r2, [pc, #44]	; (8004740 <MX_ADC1_Init+0x100>)
 8004712:	2106      	movs	r1, #6
 8004714:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004718:	f7ff feb8 	bl	800448c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800471c:	2200      	movs	r2, #0
 800471e:	4908      	ldr	r1, [pc, #32]	; (8004740 <MX_ADC1_Init+0x100>)
 8004720:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004724:	f7ff fee7 	bl	80044f6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8004728:	227f      	movs	r2, #127	; 0x7f
 800472a:	4905      	ldr	r1, [pc, #20]	; (8004740 <MX_ADC1_Init+0x100>)
 800472c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004730:	f7ff ff2a 	bl	8004588 <LL_ADC_SetChannelSingleDiff>

}
 8004734:	bf00      	nop
 8004736:	3750      	adds	r7, #80	; 0x50
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	50000300 	.word	0x50000300
 8004740:	04300002 	.word	0x04300002

08004744 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <LL_AHB1_GRP1_EnableClock>:
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	4907      	ldr	r1, [pc, #28]	; (800478c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4313      	orrs	r3, r2
 8004772:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004776:	695a      	ldr	r2, [r3, #20]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4013      	ands	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800477e:	68fb      	ldr	r3, [r7, #12]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	40021000 	.word	0x40021000

08004790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004796:	463b      	mov	r3, r7
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	60da      	str	r2, [r3, #12]
 80047a2:	611a      	str	r2, [r3, #16]
 80047a4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80047a6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80047aa:	f7ff ffd9 	bl	8004760 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80047ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80047b2:	f7ff ffd5 	bl	8004760 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80047b6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80047ba:	f7ff ffd1 	bl	8004760 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 80047be:	2108      	movs	r1, #8
 80047c0:	480a      	ldr	r0, [pc, #40]	; (80047ec <MX_GPIO_Init+0x5c>)
 80047c2:	f7ff ffbf 	bl	8004744 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 80047c6:	2308      	movs	r3, #8
 80047c8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80047ca:	2301      	movs	r3, #1
 80047cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80047da:	463b      	mov	r3, r7
 80047dc:	4619      	mov	r1, r3
 80047de:	4803      	ldr	r0, [pc, #12]	; (80047ec <MX_GPIO_Init+0x5c>)
 80047e0:	f7fe fbad 	bl	8002f3e <LL_GPIO_Init>

}
 80047e4:	bf00      	nop
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	48000400 	.word	0x48000400

080047f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047f4:	f7fc f9b6 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047f8:	f000 f80b 	bl	8004812 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047fc:	f7ff ffc8 	bl	8004790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004800:	f000 fb52 	bl	8004ea8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004804:	f000 fa7e 	bl	8004d04 <MX_TIM1_Init>
  MX_ADC1_Init();
 8004808:	f7ff ff1a 	bl	8004640 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  CPP_Wrapper();
 800480c:	f7ff f95e 	bl	8003acc <CPP_Wrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004810:	e7fe      	b.n	8004810 <main+0x20>

08004812 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b096      	sub	sp, #88	; 0x58
 8004816:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800481c:	2228      	movs	r2, #40	; 0x28
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f001 fc6c 	bl	80060fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004826:	f107 031c 	add.w	r3, r7, #28
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	609a      	str	r2, [r3, #8]
 8004832:	60da      	str	r2, [r3, #12]
 8004834:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004836:	1d3b      	adds	r3, r7, #4
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	60da      	str	r2, [r3, #12]
 8004842:	611a      	str	r2, [r3, #16]
 8004844:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004846:	2301      	movs	r3, #1
 8004848:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800484a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800484e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004850:	2300      	movs	r3, #0
 8004852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004854:	2301      	movs	r3, #1
 8004856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004858:	2302      	movs	r3, #2
 800485a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800485c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004860:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004862:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004866:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800486c:	4618      	mov	r0, r3
 800486e:	f7fc fc5d 	bl	800112c <HAL_RCC_OscConfig>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8004878:	f000 f82b 	bl	80048d2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800487c:	230f      	movs	r3, #15
 800487e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004880:	2302      	movs	r3, #2
 8004882:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004884:	2300      	movs	r3, #0
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800488c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800488e:	2300      	movs	r3, #0
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004892:	f107 031c 	add.w	r3, r7, #28
 8004896:	2102      	movs	r1, #2
 8004898:	4618      	mov	r0, r3
 800489a:	f7fd fb35 	bl	8001f08 <HAL_RCC_ClockConfig>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80048a4:	f000 f815 	bl	80048d2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 80048a8:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80048ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80048ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048b2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048b8:	1d3b      	adds	r3, r7, #4
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fd fd5a 	bl	8002374 <HAL_RCCEx_PeriphCLKConfig>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80048c6:	f000 f804 	bl	80048d2 <Error_Handler>
  }
}
 80048ca:	bf00      	nop
 80048cc:	3758      	adds	r7, #88	; 0x58
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048d2:	b480      	push	{r7}
 80048d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80048d6:	bf00      	nop
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e6:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <HAL_MspInit+0x44>)
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	4a0e      	ldr	r2, [pc, #56]	; (8004924 <HAL_MspInit+0x44>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	6193      	str	r3, [r2, #24]
 80048f2:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <HAL_MspInit+0x44>)
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048fe:	4b09      	ldr	r3, [pc, #36]	; (8004924 <HAL_MspInit+0x44>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	4a08      	ldr	r2, [pc, #32]	; (8004924 <HAL_MspInit+0x44>)
 8004904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004908:	61d3      	str	r3, [r2, #28]
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_MspInit+0x44>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40021000 	.word	0x40021000

08004928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800492c:	bf00      	nop
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004936:	b480      	push	{r7}
 8004938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800493a:	e7fe      	b.n	800493a <HardFault_Handler+0x4>

0800493c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004940:	e7fe      	b.n	8004940 <MemManage_Handler+0x4>

08004942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004942:	b480      	push	{r7}
 8004944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004946:	e7fe      	b.n	8004946 <BusFault_Handler+0x4>

08004948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800494c:	e7fe      	b.n	800494c <UsageFault_Handler+0x4>

0800494e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800494e:	b480      	push	{r7}
 8004950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004952:	bf00      	nop
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004960:	bf00      	nop
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800496a:	b480      	push	{r7}
 800496c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800496e:	bf00      	nop
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800497c:	f7fc f938 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004980:	bf00      	nop
 8004982:	bd80      	pop	{r7, pc}

08004984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
	return 1;
 8004988:	2301      	movs	r3, #1
}
 800498a:	4618      	mov	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <_kill>:

int _kill(int pid, int sig)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800499e:	f001 fb5b 	bl	8006058 <__errno>
 80049a2:	4602      	mov	r2, r0
 80049a4:	2316      	movs	r3, #22
 80049a6:	6013      	str	r3, [r2, #0]
	return -1;
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <_exit>:

void _exit (int status)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80049bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff ffe7 	bl	8004994 <_kill>
	while (1) {}		/* Make sure we hang here */
 80049c6:	e7fe      	b.n	80049c6 <_exit+0x12>

080049c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80049d0:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <_sbrk+0x50>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <_sbrk+0x16>
		heap_end = &end;
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <_sbrk+0x50>)
 80049da:	4a10      	ldr	r2, [pc, #64]	; (8004a1c <_sbrk+0x54>)
 80049dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80049de:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <_sbrk+0x50>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <_sbrk+0x50>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4413      	add	r3, r2
 80049ec:	466a      	mov	r2, sp
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d907      	bls.n	8004a02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80049f2:	f001 fb31 	bl	8006058 <__errno>
 80049f6:	4602      	mov	r2, r0
 80049f8:	230c      	movs	r3, #12
 80049fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80049fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a00:	e006      	b.n	8004a10 <_sbrk+0x48>
	}

	heap_end += incr;
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <_sbrk+0x50>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	4a03      	ldr	r2, [pc, #12]	; (8004a18 <_sbrk+0x50>)
 8004a0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	2000008c 	.word	0x2000008c
 8004a1c:	20000118 	.word	0x20000118

08004a20 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a24:	4b1f      	ldr	r3, [pc, #124]	; (8004aa4 <SystemInit+0x84>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <SystemInit+0x84>)
 8004a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004a34:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <SystemInit+0x88>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <SystemInit+0x88>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <SystemInit+0x88>)
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	4918      	ldr	r1, [pc, #96]	; (8004aa8 <SystemInit+0x88>)
 8004a46:	4b19      	ldr	r3, [pc, #100]	; (8004aac <SystemInit+0x8c>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004a4c:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <SystemInit+0x88>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <SystemInit+0x88>)
 8004a52:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a5a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a5c:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <SystemInit+0x88>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a11      	ldr	r2, [pc, #68]	; (8004aa8 <SystemInit+0x88>)
 8004a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a66:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004a68:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <SystemInit+0x88>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4a0e      	ldr	r2, [pc, #56]	; (8004aa8 <SystemInit+0x88>)
 8004a6e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004a72:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004a74:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <SystemInit+0x88>)
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	4a0b      	ldr	r2, [pc, #44]	; (8004aa8 <SystemInit+0x88>)
 8004a7a:	f023 030f 	bic.w	r3, r3, #15
 8004a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <SystemInit+0x88>)
 8004a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a84:	4908      	ldr	r1, [pc, #32]	; (8004aa8 <SystemInit+0x88>)
 8004a86:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <SystemInit+0x90>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <SystemInit+0x88>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a92:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <SystemInit+0x84>)
 8004a94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a98:	609a      	str	r2, [r3, #8]
#endif
}
 8004a9a:	bf00      	nop
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	e000ed00 	.word	0xe000ed00
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	f87fc00c 	.word	0xf87fc00c
 8004ab0:	ff00fccc 	.word	0xff00fccc

08004ab4 <LL_TIM_DisableARRPreload>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	601a      	str	r2, [r3, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_TIM_OC_DisableFast>:
{
 8004ad4:	b4b0      	push	{r4, r5, r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d028      	beq.n	8004b36 <LL_TIM_OC_DisableFast+0x62>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d023      	beq.n	8004b32 <LL_TIM_OC_DisableFast+0x5e>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d01e      	beq.n	8004b2e <LL_TIM_OC_DisableFast+0x5a>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d019      	beq.n	8004b2a <LL_TIM_OC_DisableFast+0x56>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004afc:	d013      	beq.n	8004b26 <LL_TIM_OC_DisableFast+0x52>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b04:	d00d      	beq.n	8004b22 <LL_TIM_OC_DisableFast+0x4e>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0c:	d007      	beq.n	8004b1e <LL_TIM_OC_DisableFast+0x4a>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b14:	d101      	bne.n	8004b1a <LL_TIM_OC_DisableFast+0x46>
 8004b16:	2307      	movs	r3, #7
 8004b18:	e00e      	b.n	8004b38 <LL_TIM_OC_DisableFast+0x64>
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	e00c      	b.n	8004b38 <LL_TIM_OC_DisableFast+0x64>
 8004b1e:	2306      	movs	r3, #6
 8004b20:	e00a      	b.n	8004b38 <LL_TIM_OC_DisableFast+0x64>
 8004b22:	2305      	movs	r3, #5
 8004b24:	e008      	b.n	8004b38 <LL_TIM_OC_DisableFast+0x64>
 8004b26:	2304      	movs	r3, #4
 8004b28:	e006      	b.n	8004b38 <LL_TIM_OC_DisableFast+0x64>
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e004      	b.n	8004b38 <LL_TIM_OC_DisableFast+0x64>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e002      	b.n	8004b38 <LL_TIM_OC_DisableFast+0x64>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <LL_TIM_OC_DisableFast+0x64>
 8004b36:	2300      	movs	r3, #0
 8004b38:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3318      	adds	r3, #24
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4629      	mov	r1, r5
 8004b42:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <LL_TIM_OC_DisableFast+0x94>)
 8004b44:	5c5b      	ldrb	r3, [r3, r1]
 8004b46:	4413      	add	r3, r2
 8004b48:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <LL_TIM_OC_DisableFast+0x98>)
 8004b50:	5c5b      	ldrb	r3, [r3, r1]
 8004b52:	4619      	mov	r1, r3
 8004b54:	2304      	movs	r3, #4
 8004b56:	408b      	lsls	r3, r1
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	6023      	str	r3, [r4, #0]
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bcb0      	pop	{r4, r5, r7}
 8004b66:	4770      	bx	lr
 8004b68:	0800637c 	.word	0x0800637c
 8004b6c:	08006388 	.word	0x08006388

08004b70 <LL_TIM_OC_EnablePreload>:
{
 8004b70:	b4b0      	push	{r4, r5, r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d028      	beq.n	8004bd2 <LL_TIM_OC_EnablePreload+0x62>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d023      	beq.n	8004bce <LL_TIM_OC_EnablePreload+0x5e>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d01e      	beq.n	8004bca <LL_TIM_OC_EnablePreload+0x5a>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d019      	beq.n	8004bc6 <LL_TIM_OC_EnablePreload+0x56>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b98:	d013      	beq.n	8004bc2 <LL_TIM_OC_EnablePreload+0x52>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba0:	d00d      	beq.n	8004bbe <LL_TIM_OC_EnablePreload+0x4e>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba8:	d007      	beq.n	8004bba <LL_TIM_OC_EnablePreload+0x4a>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb0:	d101      	bne.n	8004bb6 <LL_TIM_OC_EnablePreload+0x46>
 8004bb2:	2307      	movs	r3, #7
 8004bb4:	e00e      	b.n	8004bd4 <LL_TIM_OC_EnablePreload+0x64>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	e00c      	b.n	8004bd4 <LL_TIM_OC_EnablePreload+0x64>
 8004bba:	2306      	movs	r3, #6
 8004bbc:	e00a      	b.n	8004bd4 <LL_TIM_OC_EnablePreload+0x64>
 8004bbe:	2305      	movs	r3, #5
 8004bc0:	e008      	b.n	8004bd4 <LL_TIM_OC_EnablePreload+0x64>
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	e006      	b.n	8004bd4 <LL_TIM_OC_EnablePreload+0x64>
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e004      	b.n	8004bd4 <LL_TIM_OC_EnablePreload+0x64>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e002      	b.n	8004bd4 <LL_TIM_OC_EnablePreload+0x64>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <LL_TIM_OC_EnablePreload+0x64>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3318      	adds	r3, #24
 8004bda:	461a      	mov	r2, r3
 8004bdc:	4629      	mov	r1, r5
 8004bde:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <LL_TIM_OC_EnablePreload+0x94>)
 8004be0:	5c5b      	ldrb	r3, [r3, r1]
 8004be2:	4413      	add	r3, r2
 8004be4:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004be6:	6822      	ldr	r2, [r4, #0]
 8004be8:	4629      	mov	r1, r5
 8004bea:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <LL_TIM_OC_EnablePreload+0x98>)
 8004bec:	5c5b      	ldrb	r3, [r3, r1]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	408b      	lsls	r3, r1
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	6023      	str	r3, [r4, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bcb0      	pop	{r4, r5, r7}
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	0800637c 	.word	0x0800637c
 8004c08:	08006388 	.word	0x08006388

08004c0c <LL_TIM_SetClockSource>:
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004c1e:	f023 0307 	bic.w	r3, r3, #7
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	609a      	str	r2, [r3, #8]
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <LL_TIM_SetTriggerOutput>:
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	605a      	str	r2, [r3, #4]
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <LL_TIM_SetTriggerOutput2>:
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	605a      	str	r2, [r3, #4]
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <LL_TIM_DisableMasterSlaveMode>:
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	609a      	str	r2, [r3, #8]
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <LL_AHB1_GRP1_EnableClock>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8004cac:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	4907      	ldr	r1, [pc, #28]	; (8004cd0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40021000 	.word	0x40021000

08004cd4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004cdc:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004cde:	699a      	ldr	r2, [r3, #24]
 8004ce0:	4907      	ldr	r1, [pc, #28]	; (8004d00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004cea:	699a      	ldr	r2, [r3, #24]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	bf00      	nop
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40021000 	.word	0x40021000

08004d04 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b09e      	sub	sp, #120	; 0x78
 8004d08:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004d0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	605a      	str	r2, [r3, #4]
 8004d14:	609a      	str	r2, [r3, #8]
 8004d16:	60da      	str	r2, [r3, #12]
 8004d18:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004d1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d1e:	2220      	movs	r2, #32
 8004d20:	2100      	movs	r1, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 f9eb 	bl	80060fe <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8004d28:	f107 031c 	add.w	r3, r7, #28
 8004d2c:	2228      	movs	r2, #40	; 0x28
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f001 f9e4 	bl	80060fe <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	611a      	str	r2, [r3, #16]
 8004d44:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8004d46:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004d4a:	f7ff ffc3 	bl	8004cd4 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004d54:	2300      	movs	r3, #0
 8004d56:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 65535;
 8004d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8004d68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	484d      	ldr	r0, [pc, #308]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004d70:	f7fe f9ee 	bl	8003150 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8004d74:	484b      	ldr	r0, [pc, #300]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004d76:	f7ff fe9d 	bl	8004ab4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	4849      	ldr	r0, [pc, #292]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004d7e:	f7ff ff45 	bl	8004c0c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8004d82:	2101      	movs	r1, #1
 8004d84:	4847      	ldr	r0, [pc, #284]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004d86:	f7ff fef3 	bl	8004b70 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004d8a:	2360      	movs	r3, #96	; 0x60
 8004d8c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 10000;
 8004d96:	f242 7310 	movw	r3, #10000	; 0x2710
 8004d9a:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004da0:	2300      	movs	r3, #0
 8004da2:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004da4:	2300      	movs	r3, #0
 8004da6:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004da8:	2300      	movs	r3, #0
 8004daa:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004dac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004db0:	461a      	mov	r2, r3
 8004db2:	2101      	movs	r1, #1
 8004db4:	483b      	ldr	r0, [pc, #236]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004db6:	f7fe fa3f 	bl	8003238 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8004dba:	2101      	movs	r1, #1
 8004dbc:	4839      	ldr	r0, [pc, #228]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004dbe:	f7ff fe89 	bl	8004ad4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8004dc2:	2110      	movs	r1, #16
 8004dc4:	4837      	ldr	r0, [pc, #220]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004dc6:	f7ff fed3 	bl	8004b70 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8004dd6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004dda:	461a      	mov	r2, r3
 8004ddc:	2110      	movs	r1, #16
 8004dde:	4831      	ldr	r0, [pc, #196]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004de0:	f7fe fa2a 	bl	8003238 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8004de4:	2110      	movs	r1, #16
 8004de6:	482f      	ldr	r0, [pc, #188]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004de8:	f7ff fe74 	bl	8004ad4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8004dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004df0:	482c      	ldr	r0, [pc, #176]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004df2:	f7ff febd 	bl	8004b70 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004dfe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e02:	461a      	mov	r2, r3
 8004e04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e08:	4826      	ldr	r0, [pc, #152]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004e0a:	f7fe fa15 	bl	8003238 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8004e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e12:	4824      	ldr	r0, [pc, #144]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004e14:	f7ff fe5e 	bl	8004ad4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4822      	ldr	r0, [pc, #136]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004e1c:	f7ff ff0b 	bl	8004c36 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8004e20:	2100      	movs	r1, #0
 8004e22:	4820      	ldr	r0, [pc, #128]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004e24:	f7ff ff1a 	bl	8004c5c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8004e28:	481e      	ldr	r0, [pc, #120]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004e2a:	f7ff ff2a 	bl	8004c82 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8004e36:	2300      	movs	r3, #0
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8004e40:	2300      	movs	r3, #0
 8004e42:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8004e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8004e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e56:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8004e60:	f107 031c 	add.w	r3, r7, #28
 8004e64:	4619      	mov	r1, r3
 8004e66:	480f      	ldr	r0, [pc, #60]	; (8004ea4 <MX_TIM1_Init+0x1a0>)
 8004e68:	f7fe fa34 	bl	80032d4 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004e6c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004e70:	f7ff ff18 	bl	8004ca4 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8004e74:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004e78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8004e8a:	2306      	movs	r3, #6
 8004e8c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e8e:	1d3b      	adds	r3, r7, #4
 8004e90:	4619      	mov	r1, r3
 8004e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e96:	f7fe f852 	bl	8002f3e <LL_GPIO_Init>

}
 8004e9a:	bf00      	nop
 8004e9c:	3778      	adds	r7, #120	; 0x78
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40012c00 	.word	0x40012c00

08004ea8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004eac:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <MX_USART2_UART_Init+0x58>)
 8004eae:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <MX_USART2_UART_Init+0x5c>)
 8004eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8004eb2:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <MX_USART2_UART_Init+0x58>)
 8004eb4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8004eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004eba:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <MX_USART2_UART_Init+0x58>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004ec0:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <MX_USART2_UART_Init+0x58>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004ec6:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <MX_USART2_UART_Init+0x58>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ecc:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <MX_USART2_UART_Init+0x58>)
 8004ece:	220c      	movs	r2, #12
 8004ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <MX_USART2_UART_Init+0x58>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <MX_USART2_UART_Init+0x58>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ede:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <MX_USART2_UART_Init+0x58>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <MX_USART2_UART_Init+0x58>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004eea:	4805      	ldr	r0, [pc, #20]	; (8004f00 <MX_USART2_UART_Init+0x58>)
 8004eec:	f7fd fb68 	bl	80025c0 <HAL_UART_Init>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004ef6:	f7ff fcec 	bl	80048d2 <Error_Handler>
  }

}
 8004efa:	bf00      	nop
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	200000a0 	.word	0x200000a0
 8004f04:	40004400 	.word	0x40004400

08004f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f10:	f107 0314 	add.w	r3, r7, #20
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	60da      	str	r2, [r3, #12]
 8004f1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <HAL_UART_MspInit+0x80>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d129      	bne.n	8004f7e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f2a:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <HAL_UART_MspInit+0x84>)
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <HAL_UART_MspInit+0x84>)
 8004f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f34:	61d3      	str	r3, [r2, #28]
 8004f36:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <HAL_UART_MspInit+0x84>)
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <HAL_UART_MspInit+0x84>)
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <HAL_UART_MspInit+0x84>)
 8004f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f4c:	6153      	str	r3, [r2, #20]
 8004f4e:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <HAL_UART_MspInit+0x84>)
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8004f5a:	f248 0304 	movw	r3, #32772	; 0x8004
 8004f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f60:	2302      	movs	r3, #2
 8004f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f6c:	2307      	movs	r3, #7
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f70:	f107 0314 	add.w	r3, r7, #20
 8004f74:	4619      	mov	r1, r3
 8004f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f7a:	f7fb ff61 	bl	8000e40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004f7e:	bf00      	nop
 8004f80:	3728      	adds	r7, #40	; 0x28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40004400 	.word	0x40004400
 8004f8c:	40021000 	.word	0x40021000

08004f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fc8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004f94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004f96:	e003      	b.n	8004fa0 <LoopCopyDataInit>

08004f98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004f98:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004f9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004f9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004f9e:	3104      	adds	r1, #4

08004fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004fa0:	480b      	ldr	r0, [pc, #44]	; (8004fd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004fa4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004fa6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004fa8:	d3f6      	bcc.n	8004f98 <CopyDataInit>
	ldr	r2, =_sbss
 8004faa:	4a0b      	ldr	r2, [pc, #44]	; (8004fd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004fac:	e002      	b.n	8004fb4 <LoopFillZerobss>

08004fae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004fae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004fb0:	f842 3b04 	str.w	r3, [r2], #4

08004fb4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004fb4:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <LoopForever+0x16>)
	cmp	r2, r3
 8004fb6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004fb8:	d3f9      	bcc.n	8004fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004fba:	f7ff fd31 	bl	8004a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fbe:	f001 f851 	bl	8006064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004fc2:	f7ff fc15 	bl	80047f0 <main>

08004fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8004fc6:	e7fe      	b.n	8004fc6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004fc8:	20002fff 	.word	0x20002fff
	ldr	r3, =_sidata
 8004fcc:	08006578 	.word	0x08006578
	ldr	r0, =_sdata
 8004fd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004fd4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8004fd8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8004fdc:	20000114 	.word	0x20000114

08004fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004fe0:	e7fe      	b.n	8004fe0 <ADC1_2_IRQHandler>

08004fe2 <_ZdlPv>:
 8004fe2:	f001 b86b 	b.w	80060bc <free>

08004fe6 <_Znwj>:
 8004fe6:	b510      	push	{r4, lr}
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	bf14      	ite	ne
 8004fec:	4604      	movne	r4, r0
 8004fee:	2401      	moveq	r4, #1
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f001 f85b 	bl	80060ac <malloc>
 8004ff6:	b930      	cbnz	r0, 8005006 <_Znwj+0x20>
 8004ff8:	f000 f80c 	bl	8005014 <_ZSt15get_new_handlerv>
 8004ffc:	b908      	cbnz	r0, 8005002 <_Znwj+0x1c>
 8004ffe:	f001 f824 	bl	800604a <abort>
 8005002:	4780      	blx	r0
 8005004:	e7f4      	b.n	8004ff0 <_Znwj+0xa>
 8005006:	bd10      	pop	{r4, pc}

08005008 <_ZSt17__throw_bad_allocv>:
 8005008:	b508      	push	{r3, lr}
 800500a:	f001 f81e 	bl	800604a <abort>

0800500e <_ZSt20__throw_length_errorPKc>:
 800500e:	b508      	push	{r3, lr}
 8005010:	f001 f81b 	bl	800604a <abort>

08005014 <_ZSt15get_new_handlerv>:
 8005014:	4b02      	ldr	r3, [pc, #8]	; (8005020 <_ZSt15get_new_handlerv+0xc>)
 8005016:	6818      	ldr	r0, [r3, #0]
 8005018:	f3bf 8f5b 	dmb	ish
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	20000090 	.word	0x20000090
 8005024:	00000000 	.word	0x00000000

08005028 <sin>:
 8005028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800502a:	ec51 0b10 	vmov	r0, r1, d0
 800502e:	4a20      	ldr	r2, [pc, #128]	; (80050b0 <sin+0x88>)
 8005030:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005034:	4293      	cmp	r3, r2
 8005036:	dc07      	bgt.n	8005048 <sin+0x20>
 8005038:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80050a8 <sin+0x80>
 800503c:	2000      	movs	r0, #0
 800503e:	f000 fe37 	bl	8005cb0 <__kernel_sin>
 8005042:	ec51 0b10 	vmov	r0, r1, d0
 8005046:	e007      	b.n	8005058 <sin+0x30>
 8005048:	4a1a      	ldr	r2, [pc, #104]	; (80050b4 <sin+0x8c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	dd09      	ble.n	8005062 <sin+0x3a>
 800504e:	ee10 2a10 	vmov	r2, s0
 8005052:	460b      	mov	r3, r1
 8005054:	f7fb f8bc 	bl	80001d0 <__aeabi_dsub>
 8005058:	ec41 0b10 	vmov	d0, r0, r1
 800505c:	b005      	add	sp, #20
 800505e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005062:	4668      	mov	r0, sp
 8005064:	f000 f828 	bl	80050b8 <__ieee754_rem_pio2>
 8005068:	f000 0003 	and.w	r0, r0, #3
 800506c:	2801      	cmp	r0, #1
 800506e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005072:	ed9d 0b00 	vldr	d0, [sp]
 8005076:	d004      	beq.n	8005082 <sin+0x5a>
 8005078:	2802      	cmp	r0, #2
 800507a:	d005      	beq.n	8005088 <sin+0x60>
 800507c:	b970      	cbnz	r0, 800509c <sin+0x74>
 800507e:	2001      	movs	r0, #1
 8005080:	e7dd      	b.n	800503e <sin+0x16>
 8005082:	f000 fa0d 	bl	80054a0 <__kernel_cos>
 8005086:	e7dc      	b.n	8005042 <sin+0x1a>
 8005088:	2001      	movs	r0, #1
 800508a:	f000 fe11 	bl	8005cb0 <__kernel_sin>
 800508e:	ec53 2b10 	vmov	r2, r3, d0
 8005092:	ee10 0a10 	vmov	r0, s0
 8005096:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800509a:	e7dd      	b.n	8005058 <sin+0x30>
 800509c:	f000 fa00 	bl	80054a0 <__kernel_cos>
 80050a0:	e7f5      	b.n	800508e <sin+0x66>
 80050a2:	bf00      	nop
 80050a4:	f3af 8000 	nop.w
	...
 80050b0:	3fe921fb 	.word	0x3fe921fb
 80050b4:	7fefffff 	.word	0x7fefffff

080050b8 <__ieee754_rem_pio2>:
 80050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	ec57 6b10 	vmov	r6, r7, d0
 80050c0:	4bc3      	ldr	r3, [pc, #780]	; (80053d0 <__ieee754_rem_pio2+0x318>)
 80050c2:	b08d      	sub	sp, #52	; 0x34
 80050c4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80050c8:	4598      	cmp	r8, r3
 80050ca:	4604      	mov	r4, r0
 80050cc:	9704      	str	r7, [sp, #16]
 80050ce:	dc07      	bgt.n	80050e0 <__ieee754_rem_pio2+0x28>
 80050d0:	2200      	movs	r2, #0
 80050d2:	2300      	movs	r3, #0
 80050d4:	ed84 0b00 	vstr	d0, [r4]
 80050d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80050dc:	2500      	movs	r5, #0
 80050de:	e027      	b.n	8005130 <__ieee754_rem_pio2+0x78>
 80050e0:	4bbc      	ldr	r3, [pc, #752]	; (80053d4 <__ieee754_rem_pio2+0x31c>)
 80050e2:	4598      	cmp	r8, r3
 80050e4:	dc75      	bgt.n	80051d2 <__ieee754_rem_pio2+0x11a>
 80050e6:	9b04      	ldr	r3, [sp, #16]
 80050e8:	4dbb      	ldr	r5, [pc, #748]	; (80053d8 <__ieee754_rem_pio2+0x320>)
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	ee10 0a10 	vmov	r0, s0
 80050f0:	a3a9      	add	r3, pc, #676	; (adr r3, 8005398 <__ieee754_rem_pio2+0x2e0>)
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	4639      	mov	r1, r7
 80050f8:	dd36      	ble.n	8005168 <__ieee754_rem_pio2+0xb0>
 80050fa:	f7fb f869 	bl	80001d0 <__aeabi_dsub>
 80050fe:	45a8      	cmp	r8, r5
 8005100:	4606      	mov	r6, r0
 8005102:	460f      	mov	r7, r1
 8005104:	d018      	beq.n	8005138 <__ieee754_rem_pio2+0x80>
 8005106:	a3a6      	add	r3, pc, #664	; (adr r3, 80053a0 <__ieee754_rem_pio2+0x2e8>)
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f7fb f860 	bl	80001d0 <__aeabi_dsub>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	e9c4 2300 	strd	r2, r3, [r4]
 8005118:	4630      	mov	r0, r6
 800511a:	4639      	mov	r1, r7
 800511c:	f7fb f858 	bl	80001d0 <__aeabi_dsub>
 8005120:	a39f      	add	r3, pc, #636	; (adr r3, 80053a0 <__ieee754_rem_pio2+0x2e8>)
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	f7fb f853 	bl	80001d0 <__aeabi_dsub>
 800512a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800512e:	2501      	movs	r5, #1
 8005130:	4628      	mov	r0, r5
 8005132:	b00d      	add	sp, #52	; 0x34
 8005134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005138:	a39b      	add	r3, pc, #620	; (adr r3, 80053a8 <__ieee754_rem_pio2+0x2f0>)
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	f7fb f847 	bl	80001d0 <__aeabi_dsub>
 8005142:	a39b      	add	r3, pc, #620	; (adr r3, 80053b0 <__ieee754_rem_pio2+0x2f8>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	4606      	mov	r6, r0
 800514a:	460f      	mov	r7, r1
 800514c:	f7fb f840 	bl	80001d0 <__aeabi_dsub>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	e9c4 2300 	strd	r2, r3, [r4]
 8005158:	4630      	mov	r0, r6
 800515a:	4639      	mov	r1, r7
 800515c:	f7fb f838 	bl	80001d0 <__aeabi_dsub>
 8005160:	a393      	add	r3, pc, #588	; (adr r3, 80053b0 <__ieee754_rem_pio2+0x2f8>)
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	e7de      	b.n	8005126 <__ieee754_rem_pio2+0x6e>
 8005168:	f7fb f834 	bl	80001d4 <__adddf3>
 800516c:	45a8      	cmp	r8, r5
 800516e:	4606      	mov	r6, r0
 8005170:	460f      	mov	r7, r1
 8005172:	d016      	beq.n	80051a2 <__ieee754_rem_pio2+0xea>
 8005174:	a38a      	add	r3, pc, #552	; (adr r3, 80053a0 <__ieee754_rem_pio2+0x2e8>)
 8005176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517a:	f7fb f82b 	bl	80001d4 <__adddf3>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	e9c4 2300 	strd	r2, r3, [r4]
 8005186:	4630      	mov	r0, r6
 8005188:	4639      	mov	r1, r7
 800518a:	f7fb f821 	bl	80001d0 <__aeabi_dsub>
 800518e:	a384      	add	r3, pc, #528	; (adr r3, 80053a0 <__ieee754_rem_pio2+0x2e8>)
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	f7fb f81e 	bl	80001d4 <__adddf3>
 8005198:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800519c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80051a0:	e7c6      	b.n	8005130 <__ieee754_rem_pio2+0x78>
 80051a2:	a381      	add	r3, pc, #516	; (adr r3, 80053a8 <__ieee754_rem_pio2+0x2f0>)
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	f7fb f814 	bl	80001d4 <__adddf3>
 80051ac:	a380      	add	r3, pc, #512	; (adr r3, 80053b0 <__ieee754_rem_pio2+0x2f8>)
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	4606      	mov	r6, r0
 80051b4:	460f      	mov	r7, r1
 80051b6:	f7fb f80d 	bl	80001d4 <__adddf3>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	e9c4 2300 	strd	r2, r3, [r4]
 80051c2:	4630      	mov	r0, r6
 80051c4:	4639      	mov	r1, r7
 80051c6:	f7fb f803 	bl	80001d0 <__aeabi_dsub>
 80051ca:	a379      	add	r3, pc, #484	; (adr r3, 80053b0 <__ieee754_rem_pio2+0x2f8>)
 80051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d0:	e7e0      	b.n	8005194 <__ieee754_rem_pio2+0xdc>
 80051d2:	4b82      	ldr	r3, [pc, #520]	; (80053dc <__ieee754_rem_pio2+0x324>)
 80051d4:	4598      	cmp	r8, r3
 80051d6:	f300 80d0 	bgt.w	800537a <__ieee754_rem_pio2+0x2c2>
 80051da:	f000 fe23 	bl	8005e24 <fabs>
 80051de:	ec57 6b10 	vmov	r6, r7, d0
 80051e2:	ee10 0a10 	vmov	r0, s0
 80051e6:	a374      	add	r3, pc, #464	; (adr r3, 80053b8 <__ieee754_rem_pio2+0x300>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	4639      	mov	r1, r7
 80051ee:	f7fb f9a7 	bl	8000540 <__aeabi_dmul>
 80051f2:	2200      	movs	r2, #0
 80051f4:	4b7a      	ldr	r3, [pc, #488]	; (80053e0 <__ieee754_rem_pio2+0x328>)
 80051f6:	f7fa ffed 	bl	80001d4 <__adddf3>
 80051fa:	f7fb fc3b 	bl	8000a74 <__aeabi_d2iz>
 80051fe:	4605      	mov	r5, r0
 8005200:	f7fb f934 	bl	800046c <__aeabi_i2d>
 8005204:	a364      	add	r3, pc, #400	; (adr r3, 8005398 <__ieee754_rem_pio2+0x2e0>)
 8005206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800520e:	f7fb f997 	bl	8000540 <__aeabi_dmul>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4630      	mov	r0, r6
 8005218:	4639      	mov	r1, r7
 800521a:	f7fa ffd9 	bl	80001d0 <__aeabi_dsub>
 800521e:	a360      	add	r3, pc, #384	; (adr r3, 80053a0 <__ieee754_rem_pio2+0x2e8>)
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	4682      	mov	sl, r0
 8005226:	468b      	mov	fp, r1
 8005228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800522c:	f7fb f988 	bl	8000540 <__aeabi_dmul>
 8005230:	2d1f      	cmp	r5, #31
 8005232:	4606      	mov	r6, r0
 8005234:	460f      	mov	r7, r1
 8005236:	dc0c      	bgt.n	8005252 <__ieee754_rem_pio2+0x19a>
 8005238:	1e6a      	subs	r2, r5, #1
 800523a:	4b6a      	ldr	r3, [pc, #424]	; (80053e4 <__ieee754_rem_pio2+0x32c>)
 800523c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005240:	4543      	cmp	r3, r8
 8005242:	d006      	beq.n	8005252 <__ieee754_rem_pio2+0x19a>
 8005244:	4632      	mov	r2, r6
 8005246:	463b      	mov	r3, r7
 8005248:	4650      	mov	r0, sl
 800524a:	4659      	mov	r1, fp
 800524c:	f7fa ffc0 	bl	80001d0 <__aeabi_dsub>
 8005250:	e00e      	b.n	8005270 <__ieee754_rem_pio2+0x1b8>
 8005252:	4632      	mov	r2, r6
 8005254:	463b      	mov	r3, r7
 8005256:	4650      	mov	r0, sl
 8005258:	4659      	mov	r1, fp
 800525a:	f7fa ffb9 	bl	80001d0 <__aeabi_dsub>
 800525e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005262:	9305      	str	r3, [sp, #20]
 8005264:	9a05      	ldr	r2, [sp, #20]
 8005266:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b10      	cmp	r3, #16
 800526e:	dc02      	bgt.n	8005276 <__ieee754_rem_pio2+0x1be>
 8005270:	e9c4 0100 	strd	r0, r1, [r4]
 8005274:	e039      	b.n	80052ea <__ieee754_rem_pio2+0x232>
 8005276:	a34c      	add	r3, pc, #304	; (adr r3, 80053a8 <__ieee754_rem_pio2+0x2f0>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005280:	f7fb f95e 	bl	8000540 <__aeabi_dmul>
 8005284:	4606      	mov	r6, r0
 8005286:	460f      	mov	r7, r1
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4650      	mov	r0, sl
 800528e:	4659      	mov	r1, fp
 8005290:	f7fa ff9e 	bl	80001d0 <__aeabi_dsub>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4680      	mov	r8, r0
 800529a:	4689      	mov	r9, r1
 800529c:	4650      	mov	r0, sl
 800529e:	4659      	mov	r1, fp
 80052a0:	f7fa ff96 	bl	80001d0 <__aeabi_dsub>
 80052a4:	4632      	mov	r2, r6
 80052a6:	463b      	mov	r3, r7
 80052a8:	f7fa ff92 	bl	80001d0 <__aeabi_dsub>
 80052ac:	a340      	add	r3, pc, #256	; (adr r3, 80053b0 <__ieee754_rem_pio2+0x2f8>)
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	4606      	mov	r6, r0
 80052b4:	460f      	mov	r7, r1
 80052b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ba:	f7fb f941 	bl	8000540 <__aeabi_dmul>
 80052be:	4632      	mov	r2, r6
 80052c0:	463b      	mov	r3, r7
 80052c2:	f7fa ff85 	bl	80001d0 <__aeabi_dsub>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4606      	mov	r6, r0
 80052cc:	460f      	mov	r7, r1
 80052ce:	4640      	mov	r0, r8
 80052d0:	4649      	mov	r1, r9
 80052d2:	f7fa ff7d 	bl	80001d0 <__aeabi_dsub>
 80052d6:	9a05      	ldr	r2, [sp, #20]
 80052d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b31      	cmp	r3, #49	; 0x31
 80052e0:	dc20      	bgt.n	8005324 <__ieee754_rem_pio2+0x26c>
 80052e2:	e9c4 0100 	strd	r0, r1, [r4]
 80052e6:	46c2      	mov	sl, r8
 80052e8:	46cb      	mov	fp, r9
 80052ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 80052ee:	4650      	mov	r0, sl
 80052f0:	4642      	mov	r2, r8
 80052f2:	464b      	mov	r3, r9
 80052f4:	4659      	mov	r1, fp
 80052f6:	f7fa ff6b 	bl	80001d0 <__aeabi_dsub>
 80052fa:	463b      	mov	r3, r7
 80052fc:	4632      	mov	r2, r6
 80052fe:	f7fa ff67 	bl	80001d0 <__aeabi_dsub>
 8005302:	9b04      	ldr	r3, [sp, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800530a:	f6bf af11 	bge.w	8005130 <__ieee754_rem_pio2+0x78>
 800530e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005312:	6063      	str	r3, [r4, #4]
 8005314:	f8c4 8000 	str.w	r8, [r4]
 8005318:	60a0      	str	r0, [r4, #8]
 800531a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800531e:	60e3      	str	r3, [r4, #12]
 8005320:	426d      	negs	r5, r5
 8005322:	e705      	b.n	8005130 <__ieee754_rem_pio2+0x78>
 8005324:	a326      	add	r3, pc, #152	; (adr r3, 80053c0 <__ieee754_rem_pio2+0x308>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800532e:	f7fb f907 	bl	8000540 <__aeabi_dmul>
 8005332:	4606      	mov	r6, r0
 8005334:	460f      	mov	r7, r1
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4640      	mov	r0, r8
 800533c:	4649      	mov	r1, r9
 800533e:	f7fa ff47 	bl	80001d0 <__aeabi_dsub>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4682      	mov	sl, r0
 8005348:	468b      	mov	fp, r1
 800534a:	4640      	mov	r0, r8
 800534c:	4649      	mov	r1, r9
 800534e:	f7fa ff3f 	bl	80001d0 <__aeabi_dsub>
 8005352:	4632      	mov	r2, r6
 8005354:	463b      	mov	r3, r7
 8005356:	f7fa ff3b 	bl	80001d0 <__aeabi_dsub>
 800535a:	a31b      	add	r3, pc, #108	; (adr r3, 80053c8 <__ieee754_rem_pio2+0x310>)
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	4606      	mov	r6, r0
 8005362:	460f      	mov	r7, r1
 8005364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005368:	f7fb f8ea 	bl	8000540 <__aeabi_dmul>
 800536c:	4632      	mov	r2, r6
 800536e:	463b      	mov	r3, r7
 8005370:	f7fa ff2e 	bl	80001d0 <__aeabi_dsub>
 8005374:	4606      	mov	r6, r0
 8005376:	460f      	mov	r7, r1
 8005378:	e764      	b.n	8005244 <__ieee754_rem_pio2+0x18c>
 800537a:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <__ieee754_rem_pio2+0x330>)
 800537c:	4598      	cmp	r8, r3
 800537e:	dd35      	ble.n	80053ec <__ieee754_rem_pio2+0x334>
 8005380:	ee10 2a10 	vmov	r2, s0
 8005384:	463b      	mov	r3, r7
 8005386:	4630      	mov	r0, r6
 8005388:	4639      	mov	r1, r7
 800538a:	f7fa ff21 	bl	80001d0 <__aeabi_dsub>
 800538e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005392:	e9c4 0100 	strd	r0, r1, [r4]
 8005396:	e6a1      	b.n	80050dc <__ieee754_rem_pio2+0x24>
 8005398:	54400000 	.word	0x54400000
 800539c:	3ff921fb 	.word	0x3ff921fb
 80053a0:	1a626331 	.word	0x1a626331
 80053a4:	3dd0b461 	.word	0x3dd0b461
 80053a8:	1a600000 	.word	0x1a600000
 80053ac:	3dd0b461 	.word	0x3dd0b461
 80053b0:	2e037073 	.word	0x2e037073
 80053b4:	3ba3198a 	.word	0x3ba3198a
 80053b8:	6dc9c883 	.word	0x6dc9c883
 80053bc:	3fe45f30 	.word	0x3fe45f30
 80053c0:	2e000000 	.word	0x2e000000
 80053c4:	3ba3198a 	.word	0x3ba3198a
 80053c8:	252049c1 	.word	0x252049c1
 80053cc:	397b839a 	.word	0x397b839a
 80053d0:	3fe921fb 	.word	0x3fe921fb
 80053d4:	4002d97b 	.word	0x4002d97b
 80053d8:	3ff921fb 	.word	0x3ff921fb
 80053dc:	413921fb 	.word	0x413921fb
 80053e0:	3fe00000 	.word	0x3fe00000
 80053e4:	08006394 	.word	0x08006394
 80053e8:	7fefffff 	.word	0x7fefffff
 80053ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 80053f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80053f4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80053f8:	4630      	mov	r0, r6
 80053fa:	460f      	mov	r7, r1
 80053fc:	f7fb fb3a 	bl	8000a74 <__aeabi_d2iz>
 8005400:	f7fb f834 	bl	800046c <__aeabi_i2d>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4630      	mov	r0, r6
 800540a:	4639      	mov	r1, r7
 800540c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005410:	f7fa fede 	bl	80001d0 <__aeabi_dsub>
 8005414:	2200      	movs	r2, #0
 8005416:	4b1f      	ldr	r3, [pc, #124]	; (8005494 <__ieee754_rem_pio2+0x3dc>)
 8005418:	f7fb f892 	bl	8000540 <__aeabi_dmul>
 800541c:	460f      	mov	r7, r1
 800541e:	4606      	mov	r6, r0
 8005420:	f7fb fb28 	bl	8000a74 <__aeabi_d2iz>
 8005424:	f7fb f822 	bl	800046c <__aeabi_i2d>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4630      	mov	r0, r6
 800542e:	4639      	mov	r1, r7
 8005430:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005434:	f7fa fecc 	bl	80001d0 <__aeabi_dsub>
 8005438:	2200      	movs	r2, #0
 800543a:	4b16      	ldr	r3, [pc, #88]	; (8005494 <__ieee754_rem_pio2+0x3dc>)
 800543c:	f7fb f880 	bl	8000540 <__aeabi_dmul>
 8005440:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005444:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005448:	f04f 0803 	mov.w	r8, #3
 800544c:	2600      	movs	r6, #0
 800544e:	2700      	movs	r7, #0
 8005450:	4632      	mov	r2, r6
 8005452:	463b      	mov	r3, r7
 8005454:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005458:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800545c:	f7fb fad8 	bl	8000a10 <__aeabi_dcmpeq>
 8005460:	b9b0      	cbnz	r0, 8005490 <__ieee754_rem_pio2+0x3d8>
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <__ieee754_rem_pio2+0x3e0>)
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	2302      	movs	r3, #2
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	462a      	mov	r2, r5
 800546c:	4643      	mov	r3, r8
 800546e:	4621      	mov	r1, r4
 8005470:	a806      	add	r0, sp, #24
 8005472:	f000 f8dd 	bl	8005630 <__kernel_rem_pio2>
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	4605      	mov	r5, r0
 800547c:	f6bf ae58 	bge.w	8005130 <__ieee754_rem_pio2+0x78>
 8005480:	6863      	ldr	r3, [r4, #4]
 8005482:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005486:	6063      	str	r3, [r4, #4]
 8005488:	68e3      	ldr	r3, [r4, #12]
 800548a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800548e:	e746      	b.n	800531e <__ieee754_rem_pio2+0x266>
 8005490:	46d0      	mov	r8, sl
 8005492:	e7dd      	b.n	8005450 <__ieee754_rem_pio2+0x398>
 8005494:	41700000 	.word	0x41700000
 8005498:	08006414 	.word	0x08006414
 800549c:	00000000 	.word	0x00000000

080054a0 <__kernel_cos>:
 80054a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a4:	ec59 8b10 	vmov	r8, r9, d0
 80054a8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80054ac:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80054b0:	ed2d 8b02 	vpush	{d8}
 80054b4:	eeb0 8a41 	vmov.f32	s16, s2
 80054b8:	eef0 8a61 	vmov.f32	s17, s3
 80054bc:	da07      	bge.n	80054ce <__kernel_cos+0x2e>
 80054be:	ee10 0a10 	vmov	r0, s0
 80054c2:	4649      	mov	r1, r9
 80054c4:	f7fb fad6 	bl	8000a74 <__aeabi_d2iz>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	f000 8089 	beq.w	80055e0 <__kernel_cos+0x140>
 80054ce:	4642      	mov	r2, r8
 80054d0:	464b      	mov	r3, r9
 80054d2:	4640      	mov	r0, r8
 80054d4:	4649      	mov	r1, r9
 80054d6:	f7fb f833 	bl	8000540 <__aeabi_dmul>
 80054da:	2200      	movs	r2, #0
 80054dc:	4b4e      	ldr	r3, [pc, #312]	; (8005618 <__kernel_cos+0x178>)
 80054de:	4604      	mov	r4, r0
 80054e0:	460d      	mov	r5, r1
 80054e2:	f7fb f82d 	bl	8000540 <__aeabi_dmul>
 80054e6:	a340      	add	r3, pc, #256	; (adr r3, 80055e8 <__kernel_cos+0x148>)
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	4682      	mov	sl, r0
 80054ee:	468b      	mov	fp, r1
 80054f0:	4620      	mov	r0, r4
 80054f2:	4629      	mov	r1, r5
 80054f4:	f7fb f824 	bl	8000540 <__aeabi_dmul>
 80054f8:	a33d      	add	r3, pc, #244	; (adr r3, 80055f0 <__kernel_cos+0x150>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fa fe69 	bl	80001d4 <__adddf3>
 8005502:	4622      	mov	r2, r4
 8005504:	462b      	mov	r3, r5
 8005506:	f7fb f81b 	bl	8000540 <__aeabi_dmul>
 800550a:	a33b      	add	r3, pc, #236	; (adr r3, 80055f8 <__kernel_cos+0x158>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f7fa fe5e 	bl	80001d0 <__aeabi_dsub>
 8005514:	4622      	mov	r2, r4
 8005516:	462b      	mov	r3, r5
 8005518:	f7fb f812 	bl	8000540 <__aeabi_dmul>
 800551c:	a338      	add	r3, pc, #224	; (adr r3, 8005600 <__kernel_cos+0x160>)
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	f7fa fe57 	bl	80001d4 <__adddf3>
 8005526:	4622      	mov	r2, r4
 8005528:	462b      	mov	r3, r5
 800552a:	f7fb f809 	bl	8000540 <__aeabi_dmul>
 800552e:	a336      	add	r3, pc, #216	; (adr r3, 8005608 <__kernel_cos+0x168>)
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	f7fa fe4c 	bl	80001d0 <__aeabi_dsub>
 8005538:	4622      	mov	r2, r4
 800553a:	462b      	mov	r3, r5
 800553c:	f7fb f800 	bl	8000540 <__aeabi_dmul>
 8005540:	a333      	add	r3, pc, #204	; (adr r3, 8005610 <__kernel_cos+0x170>)
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	f7fa fe45 	bl	80001d4 <__adddf3>
 800554a:	4622      	mov	r2, r4
 800554c:	462b      	mov	r3, r5
 800554e:	f7fa fff7 	bl	8000540 <__aeabi_dmul>
 8005552:	4622      	mov	r2, r4
 8005554:	462b      	mov	r3, r5
 8005556:	f7fa fff3 	bl	8000540 <__aeabi_dmul>
 800555a:	ec53 2b18 	vmov	r2, r3, d8
 800555e:	4604      	mov	r4, r0
 8005560:	460d      	mov	r5, r1
 8005562:	4640      	mov	r0, r8
 8005564:	4649      	mov	r1, r9
 8005566:	f7fa ffeb 	bl	8000540 <__aeabi_dmul>
 800556a:	460b      	mov	r3, r1
 800556c:	4602      	mov	r2, r0
 800556e:	4629      	mov	r1, r5
 8005570:	4620      	mov	r0, r4
 8005572:	f7fa fe2d 	bl	80001d0 <__aeabi_dsub>
 8005576:	4b29      	ldr	r3, [pc, #164]	; (800561c <__kernel_cos+0x17c>)
 8005578:	429e      	cmp	r6, r3
 800557a:	4680      	mov	r8, r0
 800557c:	4689      	mov	r9, r1
 800557e:	dc11      	bgt.n	80055a4 <__kernel_cos+0x104>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4650      	mov	r0, sl
 8005586:	4659      	mov	r1, fp
 8005588:	f7fa fe22 	bl	80001d0 <__aeabi_dsub>
 800558c:	460b      	mov	r3, r1
 800558e:	4924      	ldr	r1, [pc, #144]	; (8005620 <__kernel_cos+0x180>)
 8005590:	4602      	mov	r2, r0
 8005592:	2000      	movs	r0, #0
 8005594:	f7fa fe1c 	bl	80001d0 <__aeabi_dsub>
 8005598:	ecbd 8b02 	vpop	{d8}
 800559c:	ec41 0b10 	vmov	d0, r0, r1
 80055a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a4:	4b1f      	ldr	r3, [pc, #124]	; (8005624 <__kernel_cos+0x184>)
 80055a6:	491e      	ldr	r1, [pc, #120]	; (8005620 <__kernel_cos+0x180>)
 80055a8:	429e      	cmp	r6, r3
 80055aa:	bfcc      	ite	gt
 80055ac:	4d1e      	ldrgt	r5, [pc, #120]	; (8005628 <__kernel_cos+0x188>)
 80055ae:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80055b2:	2400      	movs	r4, #0
 80055b4:	4622      	mov	r2, r4
 80055b6:	462b      	mov	r3, r5
 80055b8:	2000      	movs	r0, #0
 80055ba:	f7fa fe09 	bl	80001d0 <__aeabi_dsub>
 80055be:	4622      	mov	r2, r4
 80055c0:	4606      	mov	r6, r0
 80055c2:	460f      	mov	r7, r1
 80055c4:	462b      	mov	r3, r5
 80055c6:	4650      	mov	r0, sl
 80055c8:	4659      	mov	r1, fp
 80055ca:	f7fa fe01 	bl	80001d0 <__aeabi_dsub>
 80055ce:	4642      	mov	r2, r8
 80055d0:	464b      	mov	r3, r9
 80055d2:	f7fa fdfd 	bl	80001d0 <__aeabi_dsub>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4630      	mov	r0, r6
 80055dc:	4639      	mov	r1, r7
 80055de:	e7d9      	b.n	8005594 <__kernel_cos+0xf4>
 80055e0:	2000      	movs	r0, #0
 80055e2:	490f      	ldr	r1, [pc, #60]	; (8005620 <__kernel_cos+0x180>)
 80055e4:	e7d8      	b.n	8005598 <__kernel_cos+0xf8>
 80055e6:	bf00      	nop
 80055e8:	be8838d4 	.word	0xbe8838d4
 80055ec:	bda8fae9 	.word	0xbda8fae9
 80055f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80055f4:	3e21ee9e 	.word	0x3e21ee9e
 80055f8:	809c52ad 	.word	0x809c52ad
 80055fc:	3e927e4f 	.word	0x3e927e4f
 8005600:	19cb1590 	.word	0x19cb1590
 8005604:	3efa01a0 	.word	0x3efa01a0
 8005608:	16c15177 	.word	0x16c15177
 800560c:	3f56c16c 	.word	0x3f56c16c
 8005610:	5555554c 	.word	0x5555554c
 8005614:	3fa55555 	.word	0x3fa55555
 8005618:	3fe00000 	.word	0x3fe00000
 800561c:	3fd33332 	.word	0x3fd33332
 8005620:	3ff00000 	.word	0x3ff00000
 8005624:	3fe90000 	.word	0x3fe90000
 8005628:	3fd20000 	.word	0x3fd20000
 800562c:	00000000 	.word	0x00000000

08005630 <__kernel_rem_pio2>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	ed2d 8b02 	vpush	{d8}
 8005638:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800563c:	1ed4      	subs	r4, r2, #3
 800563e:	9308      	str	r3, [sp, #32]
 8005640:	9101      	str	r1, [sp, #4]
 8005642:	4bc5      	ldr	r3, [pc, #788]	; (8005958 <__kernel_rem_pio2+0x328>)
 8005644:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005646:	9009      	str	r0, [sp, #36]	; 0x24
 8005648:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800564c:	9304      	str	r3, [sp, #16]
 800564e:	9b08      	ldr	r3, [sp, #32]
 8005650:	3b01      	subs	r3, #1
 8005652:	9307      	str	r3, [sp, #28]
 8005654:	2318      	movs	r3, #24
 8005656:	fb94 f4f3 	sdiv	r4, r4, r3
 800565a:	f06f 0317 	mvn.w	r3, #23
 800565e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005662:	fb04 3303 	mla	r3, r4, r3, r3
 8005666:	eb03 0a02 	add.w	sl, r3, r2
 800566a:	9b04      	ldr	r3, [sp, #16]
 800566c:	9a07      	ldr	r2, [sp, #28]
 800566e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005948 <__kernel_rem_pio2+0x318>
 8005672:	eb03 0802 	add.w	r8, r3, r2
 8005676:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005678:	1aa7      	subs	r7, r4, r2
 800567a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800567e:	ae22      	add	r6, sp, #136	; 0x88
 8005680:	2500      	movs	r5, #0
 8005682:	4545      	cmp	r5, r8
 8005684:	dd13      	ble.n	80056ae <__kernel_rem_pio2+0x7e>
 8005686:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005948 <__kernel_rem_pio2+0x318>
 800568a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800568e:	2600      	movs	r6, #0
 8005690:	9b04      	ldr	r3, [sp, #16]
 8005692:	429e      	cmp	r6, r3
 8005694:	dc32      	bgt.n	80056fc <__kernel_rem_pio2+0xcc>
 8005696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005698:	9302      	str	r3, [sp, #8]
 800569a:	9b08      	ldr	r3, [sp, #32]
 800569c:	199d      	adds	r5, r3, r6
 800569e:	ab22      	add	r3, sp, #136	; 0x88
 80056a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80056a4:	9306      	str	r3, [sp, #24]
 80056a6:	ec59 8b18 	vmov	r8, r9, d8
 80056aa:	2700      	movs	r7, #0
 80056ac:	e01f      	b.n	80056ee <__kernel_rem_pio2+0xbe>
 80056ae:	42ef      	cmn	r7, r5
 80056b0:	d407      	bmi.n	80056c2 <__kernel_rem_pio2+0x92>
 80056b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80056b6:	f7fa fed9 	bl	800046c <__aeabi_i2d>
 80056ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80056be:	3501      	adds	r5, #1
 80056c0:	e7df      	b.n	8005682 <__kernel_rem_pio2+0x52>
 80056c2:	ec51 0b18 	vmov	r0, r1, d8
 80056c6:	e7f8      	b.n	80056ba <__kernel_rem_pio2+0x8a>
 80056c8:	9906      	ldr	r1, [sp, #24]
 80056ca:	9d02      	ldr	r5, [sp, #8]
 80056cc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80056d0:	9106      	str	r1, [sp, #24]
 80056d2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80056d6:	9502      	str	r5, [sp, #8]
 80056d8:	f7fa ff32 	bl	8000540 <__aeabi_dmul>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4640      	mov	r0, r8
 80056e2:	4649      	mov	r1, r9
 80056e4:	f7fa fd76 	bl	80001d4 <__adddf3>
 80056e8:	3701      	adds	r7, #1
 80056ea:	4680      	mov	r8, r0
 80056ec:	4689      	mov	r9, r1
 80056ee:	9b07      	ldr	r3, [sp, #28]
 80056f0:	429f      	cmp	r7, r3
 80056f2:	dde9      	ble.n	80056c8 <__kernel_rem_pio2+0x98>
 80056f4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80056f8:	3601      	adds	r6, #1
 80056fa:	e7c9      	b.n	8005690 <__kernel_rem_pio2+0x60>
 80056fc:	9b04      	ldr	r3, [sp, #16]
 80056fe:	aa0e      	add	r2, sp, #56	; 0x38
 8005700:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005704:	930c      	str	r3, [sp, #48]	; 0x30
 8005706:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005708:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800570c:	9c04      	ldr	r4, [sp, #16]
 800570e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005710:	ab9a      	add	r3, sp, #616	; 0x268
 8005712:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005716:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800571a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800571e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005722:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005726:	ab9a      	add	r3, sp, #616	; 0x268
 8005728:	445b      	add	r3, fp
 800572a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800572e:	2500      	movs	r5, #0
 8005730:	1b63      	subs	r3, r4, r5
 8005732:	2b00      	cmp	r3, #0
 8005734:	dc78      	bgt.n	8005828 <__kernel_rem_pio2+0x1f8>
 8005736:	4650      	mov	r0, sl
 8005738:	ec49 8b10 	vmov	d0, r8, r9
 800573c:	f000 fc00 	bl	8005f40 <scalbn>
 8005740:	ec57 6b10 	vmov	r6, r7, d0
 8005744:	2200      	movs	r2, #0
 8005746:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800574a:	ee10 0a10 	vmov	r0, s0
 800574e:	4639      	mov	r1, r7
 8005750:	f7fa fef6 	bl	8000540 <__aeabi_dmul>
 8005754:	ec41 0b10 	vmov	d0, r0, r1
 8005758:	f000 fb6e 	bl	8005e38 <floor>
 800575c:	2200      	movs	r2, #0
 800575e:	ec51 0b10 	vmov	r0, r1, d0
 8005762:	4b7e      	ldr	r3, [pc, #504]	; (800595c <__kernel_rem_pio2+0x32c>)
 8005764:	f7fa feec 	bl	8000540 <__aeabi_dmul>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4630      	mov	r0, r6
 800576e:	4639      	mov	r1, r7
 8005770:	f7fa fd2e 	bl	80001d0 <__aeabi_dsub>
 8005774:	460f      	mov	r7, r1
 8005776:	4606      	mov	r6, r0
 8005778:	f7fb f97c 	bl	8000a74 <__aeabi_d2iz>
 800577c:	9006      	str	r0, [sp, #24]
 800577e:	f7fa fe75 	bl	800046c <__aeabi_i2d>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4630      	mov	r0, r6
 8005788:	4639      	mov	r1, r7
 800578a:	f7fa fd21 	bl	80001d0 <__aeabi_dsub>
 800578e:	f1ba 0f00 	cmp.w	sl, #0
 8005792:	4606      	mov	r6, r0
 8005794:	460f      	mov	r7, r1
 8005796:	dd6c      	ble.n	8005872 <__kernel_rem_pio2+0x242>
 8005798:	1e62      	subs	r2, r4, #1
 800579a:	ab0e      	add	r3, sp, #56	; 0x38
 800579c:	f1ca 0118 	rsb	r1, sl, #24
 80057a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80057a4:	9d06      	ldr	r5, [sp, #24]
 80057a6:	fa40 f301 	asr.w	r3, r0, r1
 80057aa:	441d      	add	r5, r3
 80057ac:	408b      	lsls	r3, r1
 80057ae:	1ac0      	subs	r0, r0, r3
 80057b0:	ab0e      	add	r3, sp, #56	; 0x38
 80057b2:	9506      	str	r5, [sp, #24]
 80057b4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80057b8:	f1ca 0317 	rsb	r3, sl, #23
 80057bc:	fa40 f303 	asr.w	r3, r0, r3
 80057c0:	9302      	str	r3, [sp, #8]
 80057c2:	9b02      	ldr	r3, [sp, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	dd62      	ble.n	800588e <__kernel_rem_pio2+0x25e>
 80057c8:	9b06      	ldr	r3, [sp, #24]
 80057ca:	2200      	movs	r2, #0
 80057cc:	3301      	adds	r3, #1
 80057ce:	9306      	str	r3, [sp, #24]
 80057d0:	4615      	mov	r5, r2
 80057d2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80057d6:	4294      	cmp	r4, r2
 80057d8:	f300 8095 	bgt.w	8005906 <__kernel_rem_pio2+0x2d6>
 80057dc:	f1ba 0f00 	cmp.w	sl, #0
 80057e0:	dd07      	ble.n	80057f2 <__kernel_rem_pio2+0x1c2>
 80057e2:	f1ba 0f01 	cmp.w	sl, #1
 80057e6:	f000 80a2 	beq.w	800592e <__kernel_rem_pio2+0x2fe>
 80057ea:	f1ba 0f02 	cmp.w	sl, #2
 80057ee:	f000 80c1 	beq.w	8005974 <__kernel_rem_pio2+0x344>
 80057f2:	9b02      	ldr	r3, [sp, #8]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d14a      	bne.n	800588e <__kernel_rem_pio2+0x25e>
 80057f8:	4632      	mov	r2, r6
 80057fa:	463b      	mov	r3, r7
 80057fc:	2000      	movs	r0, #0
 80057fe:	4958      	ldr	r1, [pc, #352]	; (8005960 <__kernel_rem_pio2+0x330>)
 8005800:	f7fa fce6 	bl	80001d0 <__aeabi_dsub>
 8005804:	4606      	mov	r6, r0
 8005806:	460f      	mov	r7, r1
 8005808:	2d00      	cmp	r5, #0
 800580a:	d040      	beq.n	800588e <__kernel_rem_pio2+0x25e>
 800580c:	4650      	mov	r0, sl
 800580e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005950 <__kernel_rem_pio2+0x320>
 8005812:	f000 fb95 	bl	8005f40 <scalbn>
 8005816:	4630      	mov	r0, r6
 8005818:	4639      	mov	r1, r7
 800581a:	ec53 2b10 	vmov	r2, r3, d0
 800581e:	f7fa fcd7 	bl	80001d0 <__aeabi_dsub>
 8005822:	4606      	mov	r6, r0
 8005824:	460f      	mov	r7, r1
 8005826:	e032      	b.n	800588e <__kernel_rem_pio2+0x25e>
 8005828:	2200      	movs	r2, #0
 800582a:	4b4e      	ldr	r3, [pc, #312]	; (8005964 <__kernel_rem_pio2+0x334>)
 800582c:	4640      	mov	r0, r8
 800582e:	4649      	mov	r1, r9
 8005830:	f7fa fe86 	bl	8000540 <__aeabi_dmul>
 8005834:	f7fb f91e 	bl	8000a74 <__aeabi_d2iz>
 8005838:	f7fa fe18 	bl	800046c <__aeabi_i2d>
 800583c:	2200      	movs	r2, #0
 800583e:	4b4a      	ldr	r3, [pc, #296]	; (8005968 <__kernel_rem_pio2+0x338>)
 8005840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005844:	f7fa fe7c 	bl	8000540 <__aeabi_dmul>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4640      	mov	r0, r8
 800584e:	4649      	mov	r1, r9
 8005850:	f7fa fcbe 	bl	80001d0 <__aeabi_dsub>
 8005854:	f7fb f90e 	bl	8000a74 <__aeabi_d2iz>
 8005858:	ab0e      	add	r3, sp, #56	; 0x38
 800585a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800585e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005866:	f7fa fcb5 	bl	80001d4 <__adddf3>
 800586a:	3501      	adds	r5, #1
 800586c:	4680      	mov	r8, r0
 800586e:	4689      	mov	r9, r1
 8005870:	e75e      	b.n	8005730 <__kernel_rem_pio2+0x100>
 8005872:	d105      	bne.n	8005880 <__kernel_rem_pio2+0x250>
 8005874:	1e63      	subs	r3, r4, #1
 8005876:	aa0e      	add	r2, sp, #56	; 0x38
 8005878:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800587c:	15c3      	asrs	r3, r0, #23
 800587e:	e79f      	b.n	80057c0 <__kernel_rem_pio2+0x190>
 8005880:	2200      	movs	r2, #0
 8005882:	4b3a      	ldr	r3, [pc, #232]	; (800596c <__kernel_rem_pio2+0x33c>)
 8005884:	f7fb f8e2 	bl	8000a4c <__aeabi_dcmpge>
 8005888:	2800      	cmp	r0, #0
 800588a:	d139      	bne.n	8005900 <__kernel_rem_pio2+0x2d0>
 800588c:	9002      	str	r0, [sp, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	2300      	movs	r3, #0
 8005892:	4630      	mov	r0, r6
 8005894:	4639      	mov	r1, r7
 8005896:	f7fb f8bb 	bl	8000a10 <__aeabi_dcmpeq>
 800589a:	2800      	cmp	r0, #0
 800589c:	f000 80c7 	beq.w	8005a2e <__kernel_rem_pio2+0x3fe>
 80058a0:	1e65      	subs	r5, r4, #1
 80058a2:	462b      	mov	r3, r5
 80058a4:	2200      	movs	r2, #0
 80058a6:	9904      	ldr	r1, [sp, #16]
 80058a8:	428b      	cmp	r3, r1
 80058aa:	da6a      	bge.n	8005982 <__kernel_rem_pio2+0x352>
 80058ac:	2a00      	cmp	r2, #0
 80058ae:	f000 8088 	beq.w	80059c2 <__kernel_rem_pio2+0x392>
 80058b2:	ab0e      	add	r3, sp, #56	; 0x38
 80058b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80058b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80b4 	beq.w	8005a2a <__kernel_rem_pio2+0x3fa>
 80058c2:	4650      	mov	r0, sl
 80058c4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005950 <__kernel_rem_pio2+0x320>
 80058c8:	f000 fb3a 	bl	8005f40 <scalbn>
 80058cc:	00ec      	lsls	r4, r5, #3
 80058ce:	ab72      	add	r3, sp, #456	; 0x1c8
 80058d0:	191e      	adds	r6, r3, r4
 80058d2:	ec59 8b10 	vmov	r8, r9, d0
 80058d6:	f106 0a08 	add.w	sl, r6, #8
 80058da:	462f      	mov	r7, r5
 80058dc:	2f00      	cmp	r7, #0
 80058de:	f280 80df 	bge.w	8005aa0 <__kernel_rem_pio2+0x470>
 80058e2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005948 <__kernel_rem_pio2+0x318>
 80058e6:	f04f 0a00 	mov.w	sl, #0
 80058ea:	eba5 030a 	sub.w	r3, r5, sl
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f2c0 810a 	blt.w	8005b08 <__kernel_rem_pio2+0x4d8>
 80058f4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005970 <__kernel_rem_pio2+0x340>
 80058f8:	ec59 8b18 	vmov	r8, r9, d8
 80058fc:	2700      	movs	r7, #0
 80058fe:	e0f5      	b.n	8005aec <__kernel_rem_pio2+0x4bc>
 8005900:	2302      	movs	r3, #2
 8005902:	9302      	str	r3, [sp, #8]
 8005904:	e760      	b.n	80057c8 <__kernel_rem_pio2+0x198>
 8005906:	ab0e      	add	r3, sp, #56	; 0x38
 8005908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590c:	b94d      	cbnz	r5, 8005922 <__kernel_rem_pio2+0x2f2>
 800590e:	b12b      	cbz	r3, 800591c <__kernel_rem_pio2+0x2ec>
 8005910:	a80e      	add	r0, sp, #56	; 0x38
 8005912:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005916:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800591a:	2301      	movs	r3, #1
 800591c:	3201      	adds	r2, #1
 800591e:	461d      	mov	r5, r3
 8005920:	e759      	b.n	80057d6 <__kernel_rem_pio2+0x1a6>
 8005922:	a80e      	add	r0, sp, #56	; 0x38
 8005924:	1acb      	subs	r3, r1, r3
 8005926:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800592a:	462b      	mov	r3, r5
 800592c:	e7f6      	b.n	800591c <__kernel_rem_pio2+0x2ec>
 800592e:	1e62      	subs	r2, r4, #1
 8005930:	ab0e      	add	r3, sp, #56	; 0x38
 8005932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005936:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800593a:	a90e      	add	r1, sp, #56	; 0x38
 800593c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005940:	e757      	b.n	80057f2 <__kernel_rem_pio2+0x1c2>
 8005942:	bf00      	nop
 8005944:	f3af 8000 	nop.w
	...
 8005954:	3ff00000 	.word	0x3ff00000
 8005958:	08006560 	.word	0x08006560
 800595c:	40200000 	.word	0x40200000
 8005960:	3ff00000 	.word	0x3ff00000
 8005964:	3e700000 	.word	0x3e700000
 8005968:	41700000 	.word	0x41700000
 800596c:	3fe00000 	.word	0x3fe00000
 8005970:	08006520 	.word	0x08006520
 8005974:	1e62      	subs	r2, r4, #1
 8005976:	ab0e      	add	r3, sp, #56	; 0x38
 8005978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005980:	e7db      	b.n	800593a <__kernel_rem_pio2+0x30a>
 8005982:	a90e      	add	r1, sp, #56	; 0x38
 8005984:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005988:	3b01      	subs	r3, #1
 800598a:	430a      	orrs	r2, r1
 800598c:	e78b      	b.n	80058a6 <__kernel_rem_pio2+0x276>
 800598e:	3301      	adds	r3, #1
 8005990:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005994:	2900      	cmp	r1, #0
 8005996:	d0fa      	beq.n	800598e <__kernel_rem_pio2+0x35e>
 8005998:	9a08      	ldr	r2, [sp, #32]
 800599a:	4422      	add	r2, r4
 800599c:	00d2      	lsls	r2, r2, #3
 800599e:	a922      	add	r1, sp, #136	; 0x88
 80059a0:	18e3      	adds	r3, r4, r3
 80059a2:	9206      	str	r2, [sp, #24]
 80059a4:	440a      	add	r2, r1
 80059a6:	9302      	str	r3, [sp, #8]
 80059a8:	f10b 0108 	add.w	r1, fp, #8
 80059ac:	f102 0308 	add.w	r3, r2, #8
 80059b0:	1c66      	adds	r6, r4, #1
 80059b2:	910a      	str	r1, [sp, #40]	; 0x28
 80059b4:	2500      	movs	r5, #0
 80059b6:	930d      	str	r3, [sp, #52]	; 0x34
 80059b8:	9b02      	ldr	r3, [sp, #8]
 80059ba:	42b3      	cmp	r3, r6
 80059bc:	da04      	bge.n	80059c8 <__kernel_rem_pio2+0x398>
 80059be:	461c      	mov	r4, r3
 80059c0:	e6a6      	b.n	8005710 <__kernel_rem_pio2+0xe0>
 80059c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059c4:	2301      	movs	r3, #1
 80059c6:	e7e3      	b.n	8005990 <__kernel_rem_pio2+0x360>
 80059c8:	9b06      	ldr	r3, [sp, #24]
 80059ca:	18ef      	adds	r7, r5, r3
 80059cc:	ab22      	add	r3, sp, #136	; 0x88
 80059ce:	441f      	add	r7, r3
 80059d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80059d6:	f7fa fd49 	bl	800046c <__aeabi_i2d>
 80059da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059dc:	461c      	mov	r4, r3
 80059de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059e0:	e9c7 0100 	strd	r0, r1, [r7]
 80059e4:	eb03 0b05 	add.w	fp, r3, r5
 80059e8:	2700      	movs	r7, #0
 80059ea:	f04f 0800 	mov.w	r8, #0
 80059ee:	f04f 0900 	mov.w	r9, #0
 80059f2:	9b07      	ldr	r3, [sp, #28]
 80059f4:	429f      	cmp	r7, r3
 80059f6:	dd08      	ble.n	8005a0a <__kernel_rem_pio2+0x3da>
 80059f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059fa:	aa72      	add	r2, sp, #456	; 0x1c8
 80059fc:	18eb      	adds	r3, r5, r3
 80059fe:	4413      	add	r3, r2
 8005a00:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005a04:	3601      	adds	r6, #1
 8005a06:	3508      	adds	r5, #8
 8005a08:	e7d6      	b.n	80059b8 <__kernel_rem_pio2+0x388>
 8005a0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005a0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005a12:	f7fa fd95 	bl	8000540 <__aeabi_dmul>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	f7fa fbd9 	bl	80001d4 <__adddf3>
 8005a22:	3701      	adds	r7, #1
 8005a24:	4680      	mov	r8, r0
 8005a26:	4689      	mov	r9, r1
 8005a28:	e7e3      	b.n	80059f2 <__kernel_rem_pio2+0x3c2>
 8005a2a:	3d01      	subs	r5, #1
 8005a2c:	e741      	b.n	80058b2 <__kernel_rem_pio2+0x282>
 8005a2e:	f1ca 0000 	rsb	r0, sl, #0
 8005a32:	ec47 6b10 	vmov	d0, r6, r7
 8005a36:	f000 fa83 	bl	8005f40 <scalbn>
 8005a3a:	ec57 6b10 	vmov	r6, r7, d0
 8005a3e:	2200      	movs	r2, #0
 8005a40:	4b99      	ldr	r3, [pc, #612]	; (8005ca8 <__kernel_rem_pio2+0x678>)
 8005a42:	ee10 0a10 	vmov	r0, s0
 8005a46:	4639      	mov	r1, r7
 8005a48:	f7fb f800 	bl	8000a4c <__aeabi_dcmpge>
 8005a4c:	b1f8      	cbz	r0, 8005a8e <__kernel_rem_pio2+0x45e>
 8005a4e:	2200      	movs	r2, #0
 8005a50:	4b96      	ldr	r3, [pc, #600]	; (8005cac <__kernel_rem_pio2+0x67c>)
 8005a52:	4630      	mov	r0, r6
 8005a54:	4639      	mov	r1, r7
 8005a56:	f7fa fd73 	bl	8000540 <__aeabi_dmul>
 8005a5a:	f7fb f80b 	bl	8000a74 <__aeabi_d2iz>
 8005a5e:	4680      	mov	r8, r0
 8005a60:	f7fa fd04 	bl	800046c <__aeabi_i2d>
 8005a64:	2200      	movs	r2, #0
 8005a66:	4b90      	ldr	r3, [pc, #576]	; (8005ca8 <__kernel_rem_pio2+0x678>)
 8005a68:	f7fa fd6a 	bl	8000540 <__aeabi_dmul>
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4602      	mov	r2, r0
 8005a70:	4639      	mov	r1, r7
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7fa fbac 	bl	80001d0 <__aeabi_dsub>
 8005a78:	f7fa fffc 	bl	8000a74 <__aeabi_d2iz>
 8005a7c:	1c65      	adds	r5, r4, #1
 8005a7e:	ab0e      	add	r3, sp, #56	; 0x38
 8005a80:	f10a 0a18 	add.w	sl, sl, #24
 8005a84:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005a88:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005a8c:	e719      	b.n	80058c2 <__kernel_rem_pio2+0x292>
 8005a8e:	4630      	mov	r0, r6
 8005a90:	4639      	mov	r1, r7
 8005a92:	f7fa ffef 	bl	8000a74 <__aeabi_d2iz>
 8005a96:	ab0e      	add	r3, sp, #56	; 0x38
 8005a98:	4625      	mov	r5, r4
 8005a9a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005a9e:	e710      	b.n	80058c2 <__kernel_rem_pio2+0x292>
 8005aa0:	ab0e      	add	r3, sp, #56	; 0x38
 8005aa2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005aa6:	f7fa fce1 	bl	800046c <__aeabi_i2d>
 8005aaa:	4642      	mov	r2, r8
 8005aac:	464b      	mov	r3, r9
 8005aae:	f7fa fd47 	bl	8000540 <__aeabi_dmul>
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005ab8:	4b7c      	ldr	r3, [pc, #496]	; (8005cac <__kernel_rem_pio2+0x67c>)
 8005aba:	4640      	mov	r0, r8
 8005abc:	4649      	mov	r1, r9
 8005abe:	f7fa fd3f 	bl	8000540 <__aeabi_dmul>
 8005ac2:	3f01      	subs	r7, #1
 8005ac4:	4680      	mov	r8, r0
 8005ac6:	4689      	mov	r9, r1
 8005ac8:	e708      	b.n	80058dc <__kernel_rem_pio2+0x2ac>
 8005aca:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005ad6:	f7fa fd33 	bl	8000540 <__aeabi_dmul>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4640      	mov	r0, r8
 8005ae0:	4649      	mov	r1, r9
 8005ae2:	f7fa fb77 	bl	80001d4 <__adddf3>
 8005ae6:	3701      	adds	r7, #1
 8005ae8:	4680      	mov	r8, r0
 8005aea:	4689      	mov	r9, r1
 8005aec:	9b04      	ldr	r3, [sp, #16]
 8005aee:	429f      	cmp	r7, r3
 8005af0:	dc01      	bgt.n	8005af6 <__kernel_rem_pio2+0x4c6>
 8005af2:	45ba      	cmp	sl, r7
 8005af4:	dae9      	bge.n	8005aca <__kernel_rem_pio2+0x49a>
 8005af6:	ab4a      	add	r3, sp, #296	; 0x128
 8005af8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005afc:	e9c3 8900 	strd	r8, r9, [r3]
 8005b00:	f10a 0a01 	add.w	sl, sl, #1
 8005b04:	3e08      	subs	r6, #8
 8005b06:	e6f0      	b.n	80058ea <__kernel_rem_pio2+0x2ba>
 8005b08:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d85b      	bhi.n	8005bc6 <__kernel_rem_pio2+0x596>
 8005b0e:	e8df f003 	tbb	[pc, r3]
 8005b12:	264a      	.short	0x264a
 8005b14:	0226      	.short	0x0226
 8005b16:	ab9a      	add	r3, sp, #616	; 0x268
 8005b18:	441c      	add	r4, r3
 8005b1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005b1e:	46a2      	mov	sl, r4
 8005b20:	46ab      	mov	fp, r5
 8005b22:	f1bb 0f00 	cmp.w	fp, #0
 8005b26:	dc6c      	bgt.n	8005c02 <__kernel_rem_pio2+0x5d2>
 8005b28:	46a2      	mov	sl, r4
 8005b2a:	46ab      	mov	fp, r5
 8005b2c:	f1bb 0f01 	cmp.w	fp, #1
 8005b30:	f300 8086 	bgt.w	8005c40 <__kernel_rem_pio2+0x610>
 8005b34:	2000      	movs	r0, #0
 8005b36:	2100      	movs	r1, #0
 8005b38:	2d01      	cmp	r5, #1
 8005b3a:	f300 80a0 	bgt.w	8005c7e <__kernel_rem_pio2+0x64e>
 8005b3e:	9b02      	ldr	r3, [sp, #8]
 8005b40:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005b44:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f040 809e 	bne.w	8005c8a <__kernel_rem_pio2+0x65a>
 8005b4e:	9b01      	ldr	r3, [sp, #4]
 8005b50:	e9c3 7800 	strd	r7, r8, [r3]
 8005b54:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005b58:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005b5c:	e033      	b.n	8005bc6 <__kernel_rem_pio2+0x596>
 8005b5e:	3408      	adds	r4, #8
 8005b60:	ab4a      	add	r3, sp, #296	; 0x128
 8005b62:	441c      	add	r4, r3
 8005b64:	462e      	mov	r6, r5
 8005b66:	2000      	movs	r0, #0
 8005b68:	2100      	movs	r1, #0
 8005b6a:	2e00      	cmp	r6, #0
 8005b6c:	da3a      	bge.n	8005be4 <__kernel_rem_pio2+0x5b4>
 8005b6e:	9b02      	ldr	r3, [sp, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d03d      	beq.n	8005bf0 <__kernel_rem_pio2+0x5c0>
 8005b74:	4602      	mov	r2, r0
 8005b76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b7a:	9c01      	ldr	r4, [sp, #4]
 8005b7c:	e9c4 2300 	strd	r2, r3, [r4]
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005b88:	f7fa fb22 	bl	80001d0 <__aeabi_dsub>
 8005b8c:	ae4c      	add	r6, sp, #304	; 0x130
 8005b8e:	2401      	movs	r4, #1
 8005b90:	42a5      	cmp	r5, r4
 8005b92:	da30      	bge.n	8005bf6 <__kernel_rem_pio2+0x5c6>
 8005b94:	9b02      	ldr	r3, [sp, #8]
 8005b96:	b113      	cbz	r3, 8005b9e <__kernel_rem_pio2+0x56e>
 8005b98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	9b01      	ldr	r3, [sp, #4]
 8005ba0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005ba4:	e00f      	b.n	8005bc6 <__kernel_rem_pio2+0x596>
 8005ba6:	ab9a      	add	r3, sp, #616	; 0x268
 8005ba8:	441c      	add	r4, r3
 8005baa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005bae:	2000      	movs	r0, #0
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	2d00      	cmp	r5, #0
 8005bb4:	da10      	bge.n	8005bd8 <__kernel_rem_pio2+0x5a8>
 8005bb6:	9b02      	ldr	r3, [sp, #8]
 8005bb8:	b113      	cbz	r3, 8005bc0 <__kernel_rem_pio2+0x590>
 8005bba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	9b01      	ldr	r3, [sp, #4]
 8005bc2:	e9c3 0100 	strd	r0, r1, [r3]
 8005bc6:	9b06      	ldr	r3, [sp, #24]
 8005bc8:	f003 0007 	and.w	r0, r3, #7
 8005bcc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005bd0:	ecbd 8b02 	vpop	{d8}
 8005bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005bdc:	f7fa fafa 	bl	80001d4 <__adddf3>
 8005be0:	3d01      	subs	r5, #1
 8005be2:	e7e6      	b.n	8005bb2 <__kernel_rem_pio2+0x582>
 8005be4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005be8:	f7fa faf4 	bl	80001d4 <__adddf3>
 8005bec:	3e01      	subs	r6, #1
 8005bee:	e7bc      	b.n	8005b6a <__kernel_rem_pio2+0x53a>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	e7c1      	b.n	8005b7a <__kernel_rem_pio2+0x54a>
 8005bf6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005bfa:	f7fa faeb 	bl	80001d4 <__adddf3>
 8005bfe:	3401      	adds	r4, #1
 8005c00:	e7c6      	b.n	8005b90 <__kernel_rem_pio2+0x560>
 8005c02:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005c06:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	ec53 2b17 	vmov	r2, r3, d7
 8005c10:	4649      	mov	r1, r9
 8005c12:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005c16:	f7fa fadd 	bl	80001d4 <__adddf3>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4606      	mov	r6, r0
 8005c20:	460f      	mov	r7, r1
 8005c22:	4640      	mov	r0, r8
 8005c24:	4649      	mov	r1, r9
 8005c26:	f7fa fad3 	bl	80001d0 <__aeabi_dsub>
 8005c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c2e:	f7fa fad1 	bl	80001d4 <__adddf3>
 8005c32:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005c36:	e9ca 0100 	strd	r0, r1, [sl]
 8005c3a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005c3e:	e770      	b.n	8005b22 <__kernel_rem_pio2+0x4f2>
 8005c40:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005c44:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005c48:	4630      	mov	r0, r6
 8005c4a:	ec53 2b17 	vmov	r2, r3, d7
 8005c4e:	4639      	mov	r1, r7
 8005c50:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005c54:	f7fa fabe 	bl	80001d4 <__adddf3>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	4689      	mov	r9, r1
 8005c60:	4630      	mov	r0, r6
 8005c62:	4639      	mov	r1, r7
 8005c64:	f7fa fab4 	bl	80001d0 <__aeabi_dsub>
 8005c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c6c:	f7fa fab2 	bl	80001d4 <__adddf3>
 8005c70:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005c74:	e9ca 0100 	strd	r0, r1, [sl]
 8005c78:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005c7c:	e756      	b.n	8005b2c <__kernel_rem_pio2+0x4fc>
 8005c7e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c82:	f7fa faa7 	bl	80001d4 <__adddf3>
 8005c86:	3d01      	subs	r5, #1
 8005c88:	e756      	b.n	8005b38 <__kernel_rem_pio2+0x508>
 8005c8a:	9b01      	ldr	r3, [sp, #4]
 8005c8c:	9a01      	ldr	r2, [sp, #4]
 8005c8e:	601f      	str	r7, [r3, #0]
 8005c90:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005c94:	605c      	str	r4, [r3, #4]
 8005c96:	609d      	str	r5, [r3, #8]
 8005c98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c9c:	60d3      	str	r3, [r2, #12]
 8005c9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ca2:	6110      	str	r0, [r2, #16]
 8005ca4:	6153      	str	r3, [r2, #20]
 8005ca6:	e78e      	b.n	8005bc6 <__kernel_rem_pio2+0x596>
 8005ca8:	41700000 	.word	0x41700000
 8005cac:	3e700000 	.word	0x3e700000

08005cb0 <__kernel_sin>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	ec55 4b10 	vmov	r4, r5, d0
 8005cb8:	b085      	sub	sp, #20
 8005cba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005cbe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005cc2:	ed8d 1b00 	vstr	d1, [sp]
 8005cc6:	9002      	str	r0, [sp, #8]
 8005cc8:	da06      	bge.n	8005cd8 <__kernel_sin+0x28>
 8005cca:	ee10 0a10 	vmov	r0, s0
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f7fa fed0 	bl	8000a74 <__aeabi_d2iz>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d051      	beq.n	8005d7c <__kernel_sin+0xcc>
 8005cd8:	4622      	mov	r2, r4
 8005cda:	462b      	mov	r3, r5
 8005cdc:	4620      	mov	r0, r4
 8005cde:	4629      	mov	r1, r5
 8005ce0:	f7fa fc2e 	bl	8000540 <__aeabi_dmul>
 8005ce4:	4682      	mov	sl, r0
 8005ce6:	468b      	mov	fp, r1
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4620      	mov	r0, r4
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f7fa fc26 	bl	8000540 <__aeabi_dmul>
 8005cf4:	a341      	add	r3, pc, #260	; (adr r3, 8005dfc <__kernel_sin+0x14c>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	4680      	mov	r8, r0
 8005cfc:	4689      	mov	r9, r1
 8005cfe:	4650      	mov	r0, sl
 8005d00:	4659      	mov	r1, fp
 8005d02:	f7fa fc1d 	bl	8000540 <__aeabi_dmul>
 8005d06:	a33f      	add	r3, pc, #252	; (adr r3, 8005e04 <__kernel_sin+0x154>)
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f7fa fa60 	bl	80001d0 <__aeabi_dsub>
 8005d10:	4652      	mov	r2, sl
 8005d12:	465b      	mov	r3, fp
 8005d14:	f7fa fc14 	bl	8000540 <__aeabi_dmul>
 8005d18:	a33c      	add	r3, pc, #240	; (adr r3, 8005e0c <__kernel_sin+0x15c>)
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f7fa fa59 	bl	80001d4 <__adddf3>
 8005d22:	4652      	mov	r2, sl
 8005d24:	465b      	mov	r3, fp
 8005d26:	f7fa fc0b 	bl	8000540 <__aeabi_dmul>
 8005d2a:	a33a      	add	r3, pc, #232	; (adr r3, 8005e14 <__kernel_sin+0x164>)
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	f7fa fa4e 	bl	80001d0 <__aeabi_dsub>
 8005d34:	4652      	mov	r2, sl
 8005d36:	465b      	mov	r3, fp
 8005d38:	f7fa fc02 	bl	8000540 <__aeabi_dmul>
 8005d3c:	a337      	add	r3, pc, #220	; (adr r3, 8005e1c <__kernel_sin+0x16c>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f7fa fa47 	bl	80001d4 <__adddf3>
 8005d46:	9b02      	ldr	r3, [sp, #8]
 8005d48:	4606      	mov	r6, r0
 8005d4a:	460f      	mov	r7, r1
 8005d4c:	b9db      	cbnz	r3, 8005d86 <__kernel_sin+0xd6>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4650      	mov	r0, sl
 8005d54:	4659      	mov	r1, fp
 8005d56:	f7fa fbf3 	bl	8000540 <__aeabi_dmul>
 8005d5a:	a325      	add	r3, pc, #148	; (adr r3, 8005df0 <__kernel_sin+0x140>)
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f7fa fa36 	bl	80001d0 <__aeabi_dsub>
 8005d64:	4642      	mov	r2, r8
 8005d66:	464b      	mov	r3, r9
 8005d68:	f7fa fbea 	bl	8000540 <__aeabi_dmul>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4620      	mov	r0, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	f7fa fa2e 	bl	80001d4 <__adddf3>
 8005d78:	4604      	mov	r4, r0
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	ec45 4b10 	vmov	d0, r4, r5
 8005d80:	b005      	add	sp, #20
 8005d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d86:	2200      	movs	r2, #0
 8005d88:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <__kernel_sin+0x148>)
 8005d8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d8e:	f7fa fbd7 	bl	8000540 <__aeabi_dmul>
 8005d92:	4632      	mov	r2, r6
 8005d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d98:	463b      	mov	r3, r7
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	f7fa fbcf 	bl	8000540 <__aeabi_dmul>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005daa:	f7fa fa11 	bl	80001d0 <__aeabi_dsub>
 8005dae:	4652      	mov	r2, sl
 8005db0:	465b      	mov	r3, fp
 8005db2:	f7fa fbc5 	bl	8000540 <__aeabi_dmul>
 8005db6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dba:	f7fa fa09 	bl	80001d0 <__aeabi_dsub>
 8005dbe:	a30c      	add	r3, pc, #48	; (adr r3, 8005df0 <__kernel_sin+0x140>)
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	460f      	mov	r7, r1
 8005dc8:	4640      	mov	r0, r8
 8005dca:	4649      	mov	r1, r9
 8005dcc:	f7fa fbb8 	bl	8000540 <__aeabi_dmul>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	f7fa f9fc 	bl	80001d4 <__adddf3>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4620      	mov	r0, r4
 8005de2:	4629      	mov	r1, r5
 8005de4:	f7fa f9f4 	bl	80001d0 <__aeabi_dsub>
 8005de8:	e7c6      	b.n	8005d78 <__kernel_sin+0xc8>
 8005dea:	bf00      	nop
 8005dec:	f3af 8000 	nop.w
 8005df0:	55555549 	.word	0x55555549
 8005df4:	3fc55555 	.word	0x3fc55555
 8005df8:	3fe00000 	.word	0x3fe00000
 8005dfc:	5acfd57c 	.word	0x5acfd57c
 8005e00:	3de5d93a 	.word	0x3de5d93a
 8005e04:	8a2b9ceb 	.word	0x8a2b9ceb
 8005e08:	3e5ae5e6 	.word	0x3e5ae5e6
 8005e0c:	57b1fe7d 	.word	0x57b1fe7d
 8005e10:	3ec71de3 	.word	0x3ec71de3
 8005e14:	19c161d5 	.word	0x19c161d5
 8005e18:	3f2a01a0 	.word	0x3f2a01a0
 8005e1c:	1110f8a6 	.word	0x1110f8a6
 8005e20:	3f811111 	.word	0x3f811111

08005e24 <fabs>:
 8005e24:	ec51 0b10 	vmov	r0, r1, d0
 8005e28:	ee10 2a10 	vmov	r2, s0
 8005e2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e30:	ec43 2b10 	vmov	d0, r2, r3
 8005e34:	4770      	bx	lr
	...

08005e38 <floor>:
 8005e38:	ec51 0b10 	vmov	r0, r1, d0
 8005e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005e44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005e48:	2e13      	cmp	r6, #19
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	ee10 5a10 	vmov	r5, s0
 8005e50:	4680      	mov	r8, r0
 8005e52:	dc34      	bgt.n	8005ebe <floor+0x86>
 8005e54:	2e00      	cmp	r6, #0
 8005e56:	da16      	bge.n	8005e86 <floor+0x4e>
 8005e58:	a335      	add	r3, pc, #212	; (adr r3, 8005f30 <floor+0xf8>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa f9b9 	bl	80001d4 <__adddf3>
 8005e62:	2200      	movs	r2, #0
 8005e64:	2300      	movs	r3, #0
 8005e66:	f7fa fdfb 	bl	8000a60 <__aeabi_dcmpgt>
 8005e6a:	b148      	cbz	r0, 8005e80 <floor+0x48>
 8005e6c:	2c00      	cmp	r4, #0
 8005e6e:	da59      	bge.n	8005f24 <floor+0xec>
 8005e70:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005e74:	4a30      	ldr	r2, [pc, #192]	; (8005f38 <floor+0x100>)
 8005e76:	432b      	orrs	r3, r5
 8005e78:	2500      	movs	r5, #0
 8005e7a:	42ab      	cmp	r3, r5
 8005e7c:	bf18      	it	ne
 8005e7e:	4614      	movne	r4, r2
 8005e80:	4621      	mov	r1, r4
 8005e82:	4628      	mov	r0, r5
 8005e84:	e025      	b.n	8005ed2 <floor+0x9a>
 8005e86:	4f2d      	ldr	r7, [pc, #180]	; (8005f3c <floor+0x104>)
 8005e88:	4137      	asrs	r7, r6
 8005e8a:	ea01 0307 	and.w	r3, r1, r7
 8005e8e:	4303      	orrs	r3, r0
 8005e90:	d01f      	beq.n	8005ed2 <floor+0x9a>
 8005e92:	a327      	add	r3, pc, #156	; (adr r3, 8005f30 <floor+0xf8>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f7fa f99c 	bl	80001d4 <__adddf3>
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f7fa fdde 	bl	8000a60 <__aeabi_dcmpgt>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d0eb      	beq.n	8005e80 <floor+0x48>
 8005ea8:	2c00      	cmp	r4, #0
 8005eaa:	bfbe      	ittt	lt
 8005eac:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005eb0:	fa43 f606 	asrlt.w	r6, r3, r6
 8005eb4:	19a4      	addlt	r4, r4, r6
 8005eb6:	ea24 0407 	bic.w	r4, r4, r7
 8005eba:	2500      	movs	r5, #0
 8005ebc:	e7e0      	b.n	8005e80 <floor+0x48>
 8005ebe:	2e33      	cmp	r6, #51	; 0x33
 8005ec0:	dd0b      	ble.n	8005eda <floor+0xa2>
 8005ec2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005ec6:	d104      	bne.n	8005ed2 <floor+0x9a>
 8005ec8:	ee10 2a10 	vmov	r2, s0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	f7fa f981 	bl	80001d4 <__adddf3>
 8005ed2:	ec41 0b10 	vmov	d0, r0, r1
 8005ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eda:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ee2:	fa23 f707 	lsr.w	r7, r3, r7
 8005ee6:	4207      	tst	r7, r0
 8005ee8:	d0f3      	beq.n	8005ed2 <floor+0x9a>
 8005eea:	a311      	add	r3, pc, #68	; (adr r3, 8005f30 <floor+0xf8>)
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f7fa f970 	bl	80001d4 <__adddf3>
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f7fa fdb2 	bl	8000a60 <__aeabi_dcmpgt>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d0bf      	beq.n	8005e80 <floor+0x48>
 8005f00:	2c00      	cmp	r4, #0
 8005f02:	da02      	bge.n	8005f0a <floor+0xd2>
 8005f04:	2e14      	cmp	r6, #20
 8005f06:	d103      	bne.n	8005f10 <floor+0xd8>
 8005f08:	3401      	adds	r4, #1
 8005f0a:	ea25 0507 	bic.w	r5, r5, r7
 8005f0e:	e7b7      	b.n	8005e80 <floor+0x48>
 8005f10:	2301      	movs	r3, #1
 8005f12:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005f16:	fa03 f606 	lsl.w	r6, r3, r6
 8005f1a:	4435      	add	r5, r6
 8005f1c:	4545      	cmp	r5, r8
 8005f1e:	bf38      	it	cc
 8005f20:	18e4      	addcc	r4, r4, r3
 8005f22:	e7f2      	b.n	8005f0a <floor+0xd2>
 8005f24:	2500      	movs	r5, #0
 8005f26:	462c      	mov	r4, r5
 8005f28:	e7aa      	b.n	8005e80 <floor+0x48>
 8005f2a:	bf00      	nop
 8005f2c:	f3af 8000 	nop.w
 8005f30:	8800759c 	.word	0x8800759c
 8005f34:	7e37e43c 	.word	0x7e37e43c
 8005f38:	bff00000 	.word	0xbff00000
 8005f3c:	000fffff 	.word	0x000fffff

08005f40 <scalbn>:
 8005f40:	b570      	push	{r4, r5, r6, lr}
 8005f42:	ec55 4b10 	vmov	r4, r5, d0
 8005f46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	462b      	mov	r3, r5
 8005f4e:	b9aa      	cbnz	r2, 8005f7c <scalbn+0x3c>
 8005f50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005f54:	4323      	orrs	r3, r4
 8005f56:	d03b      	beq.n	8005fd0 <scalbn+0x90>
 8005f58:	4b31      	ldr	r3, [pc, #196]	; (8006020 <scalbn+0xe0>)
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	ee10 0a10 	vmov	r0, s0
 8005f62:	f7fa faed 	bl	8000540 <__aeabi_dmul>
 8005f66:	4b2f      	ldr	r3, [pc, #188]	; (8006024 <scalbn+0xe4>)
 8005f68:	429e      	cmp	r6, r3
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	460d      	mov	r5, r1
 8005f6e:	da12      	bge.n	8005f96 <scalbn+0x56>
 8005f70:	a327      	add	r3, pc, #156	; (adr r3, 8006010 <scalbn+0xd0>)
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f7fa fae3 	bl	8000540 <__aeabi_dmul>
 8005f7a:	e009      	b.n	8005f90 <scalbn+0x50>
 8005f7c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005f80:	428a      	cmp	r2, r1
 8005f82:	d10c      	bne.n	8005f9e <scalbn+0x5e>
 8005f84:	ee10 2a10 	vmov	r2, s0
 8005f88:	4620      	mov	r0, r4
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	f7fa f922 	bl	80001d4 <__adddf3>
 8005f90:	4604      	mov	r4, r0
 8005f92:	460d      	mov	r5, r1
 8005f94:	e01c      	b.n	8005fd0 <scalbn+0x90>
 8005f96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	3a36      	subs	r2, #54	; 0x36
 8005f9e:	4432      	add	r2, r6
 8005fa0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005fa4:	428a      	cmp	r2, r1
 8005fa6:	dd0b      	ble.n	8005fc0 <scalbn+0x80>
 8005fa8:	ec45 4b11 	vmov	d1, r4, r5
 8005fac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006018 <scalbn+0xd8>
 8005fb0:	f000 f83c 	bl	800602c <copysign>
 8005fb4:	a318      	add	r3, pc, #96	; (adr r3, 8006018 <scalbn+0xd8>)
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	ec51 0b10 	vmov	r0, r1, d0
 8005fbe:	e7da      	b.n	8005f76 <scalbn+0x36>
 8005fc0:	2a00      	cmp	r2, #0
 8005fc2:	dd08      	ble.n	8005fd6 <scalbn+0x96>
 8005fc4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005fc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005fcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005fd0:	ec45 4b10 	vmov	d0, r4, r5
 8005fd4:	bd70      	pop	{r4, r5, r6, pc}
 8005fd6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005fda:	da0d      	bge.n	8005ff8 <scalbn+0xb8>
 8005fdc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005fe0:	429e      	cmp	r6, r3
 8005fe2:	ec45 4b11 	vmov	d1, r4, r5
 8005fe6:	dce1      	bgt.n	8005fac <scalbn+0x6c>
 8005fe8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006010 <scalbn+0xd0>
 8005fec:	f000 f81e 	bl	800602c <copysign>
 8005ff0:	a307      	add	r3, pc, #28	; (adr r3, 8006010 <scalbn+0xd0>)
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	e7e0      	b.n	8005fba <scalbn+0x7a>
 8005ff8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ffc:	3236      	adds	r2, #54	; 0x36
 8005ffe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006002:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006006:	4620      	mov	r0, r4
 8006008:	4629      	mov	r1, r5
 800600a:	2200      	movs	r2, #0
 800600c:	4b06      	ldr	r3, [pc, #24]	; (8006028 <scalbn+0xe8>)
 800600e:	e7b2      	b.n	8005f76 <scalbn+0x36>
 8006010:	c2f8f359 	.word	0xc2f8f359
 8006014:	01a56e1f 	.word	0x01a56e1f
 8006018:	8800759c 	.word	0x8800759c
 800601c:	7e37e43c 	.word	0x7e37e43c
 8006020:	43500000 	.word	0x43500000
 8006024:	ffff3cb0 	.word	0xffff3cb0
 8006028:	3c900000 	.word	0x3c900000

0800602c <copysign>:
 800602c:	ec51 0b10 	vmov	r0, r1, d0
 8006030:	ee11 0a90 	vmov	r0, s3
 8006034:	ee10 2a10 	vmov	r2, s0
 8006038:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800603c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006040:	ea41 0300 	orr.w	r3, r1, r0
 8006044:	ec43 2b10 	vmov	d0, r2, r3
 8006048:	4770      	bx	lr

0800604a <abort>:
 800604a:	b508      	push	{r3, lr}
 800604c:	2006      	movs	r0, #6
 800604e:	f000 f93f 	bl	80062d0 <raise>
 8006052:	2001      	movs	r0, #1
 8006054:	f7fe fcae 	bl	80049b4 <_exit>

08006058 <__errno>:
 8006058:	4b01      	ldr	r3, [pc, #4]	; (8006060 <__errno+0x8>)
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	2000000c 	.word	0x2000000c

08006064 <__libc_init_array>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	4e0d      	ldr	r6, [pc, #52]	; (800609c <__libc_init_array+0x38>)
 8006068:	4c0d      	ldr	r4, [pc, #52]	; (80060a0 <__libc_init_array+0x3c>)
 800606a:	1ba4      	subs	r4, r4, r6
 800606c:	10a4      	asrs	r4, r4, #2
 800606e:	2500      	movs	r5, #0
 8006070:	42a5      	cmp	r5, r4
 8006072:	d109      	bne.n	8006088 <__libc_init_array+0x24>
 8006074:	4e0b      	ldr	r6, [pc, #44]	; (80060a4 <__libc_init_array+0x40>)
 8006076:	4c0c      	ldr	r4, [pc, #48]	; (80060a8 <__libc_init_array+0x44>)
 8006078:	f000 f948 	bl	800630c <_init>
 800607c:	1ba4      	subs	r4, r4, r6
 800607e:	10a4      	asrs	r4, r4, #2
 8006080:	2500      	movs	r5, #0
 8006082:	42a5      	cmp	r5, r4
 8006084:	d105      	bne.n	8006092 <__libc_init_array+0x2e>
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800608c:	4798      	blx	r3
 800608e:	3501      	adds	r5, #1
 8006090:	e7ee      	b.n	8006070 <__libc_init_array+0xc>
 8006092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006096:	4798      	blx	r3
 8006098:	3501      	adds	r5, #1
 800609a:	e7f2      	b.n	8006082 <__libc_init_array+0x1e>
 800609c:	08006570 	.word	0x08006570
 80060a0:	08006570 	.word	0x08006570
 80060a4:	08006570 	.word	0x08006570
 80060a8:	08006574 	.word	0x08006574

080060ac <malloc>:
 80060ac:	4b02      	ldr	r3, [pc, #8]	; (80060b8 <malloc+0xc>)
 80060ae:	4601      	mov	r1, r0
 80060b0:	6818      	ldr	r0, [r3, #0]
 80060b2:	f000 b87b 	b.w	80061ac <_malloc_r>
 80060b6:	bf00      	nop
 80060b8:	2000000c 	.word	0x2000000c

080060bc <free>:
 80060bc:	4b02      	ldr	r3, [pc, #8]	; (80060c8 <free+0xc>)
 80060be:	4601      	mov	r1, r0
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	f000 b825 	b.w	8006110 <_free_r>
 80060c6:	bf00      	nop
 80060c8:	2000000c 	.word	0x2000000c

080060cc <memmove>:
 80060cc:	4288      	cmp	r0, r1
 80060ce:	b510      	push	{r4, lr}
 80060d0:	eb01 0302 	add.w	r3, r1, r2
 80060d4:	d807      	bhi.n	80060e6 <memmove+0x1a>
 80060d6:	1e42      	subs	r2, r0, #1
 80060d8:	4299      	cmp	r1, r3
 80060da:	d00a      	beq.n	80060f2 <memmove+0x26>
 80060dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80060e4:	e7f8      	b.n	80060d8 <memmove+0xc>
 80060e6:	4283      	cmp	r3, r0
 80060e8:	d9f5      	bls.n	80060d6 <memmove+0xa>
 80060ea:	1881      	adds	r1, r0, r2
 80060ec:	1ad2      	subs	r2, r2, r3
 80060ee:	42d3      	cmn	r3, r2
 80060f0:	d100      	bne.n	80060f4 <memmove+0x28>
 80060f2:	bd10      	pop	{r4, pc}
 80060f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80060fc:	e7f7      	b.n	80060ee <memmove+0x22>

080060fe <memset>:
 80060fe:	4402      	add	r2, r0
 8006100:	4603      	mov	r3, r0
 8006102:	4293      	cmp	r3, r2
 8006104:	d100      	bne.n	8006108 <memset+0xa>
 8006106:	4770      	bx	lr
 8006108:	f803 1b01 	strb.w	r1, [r3], #1
 800610c:	e7f9      	b.n	8006102 <memset+0x4>
	...

08006110 <_free_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4605      	mov	r5, r0
 8006114:	2900      	cmp	r1, #0
 8006116:	d045      	beq.n	80061a4 <_free_r+0x94>
 8006118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800611c:	1f0c      	subs	r4, r1, #4
 800611e:	2b00      	cmp	r3, #0
 8006120:	bfb8      	it	lt
 8006122:	18e4      	addlt	r4, r4, r3
 8006124:	f000 f8f0 	bl	8006308 <__malloc_lock>
 8006128:	4a1f      	ldr	r2, [pc, #124]	; (80061a8 <_free_r+0x98>)
 800612a:	6813      	ldr	r3, [r2, #0]
 800612c:	4610      	mov	r0, r2
 800612e:	b933      	cbnz	r3, 800613e <_free_r+0x2e>
 8006130:	6063      	str	r3, [r4, #4]
 8006132:	6014      	str	r4, [r2, #0]
 8006134:	4628      	mov	r0, r5
 8006136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800613a:	f000 b8e6 	b.w	800630a <__malloc_unlock>
 800613e:	42a3      	cmp	r3, r4
 8006140:	d90c      	bls.n	800615c <_free_r+0x4c>
 8006142:	6821      	ldr	r1, [r4, #0]
 8006144:	1862      	adds	r2, r4, r1
 8006146:	4293      	cmp	r3, r2
 8006148:	bf04      	itt	eq
 800614a:	681a      	ldreq	r2, [r3, #0]
 800614c:	685b      	ldreq	r3, [r3, #4]
 800614e:	6063      	str	r3, [r4, #4]
 8006150:	bf04      	itt	eq
 8006152:	1852      	addeq	r2, r2, r1
 8006154:	6022      	streq	r2, [r4, #0]
 8006156:	6004      	str	r4, [r0, #0]
 8006158:	e7ec      	b.n	8006134 <_free_r+0x24>
 800615a:	4613      	mov	r3, r2
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	b10a      	cbz	r2, 8006164 <_free_r+0x54>
 8006160:	42a2      	cmp	r2, r4
 8006162:	d9fa      	bls.n	800615a <_free_r+0x4a>
 8006164:	6819      	ldr	r1, [r3, #0]
 8006166:	1858      	adds	r0, r3, r1
 8006168:	42a0      	cmp	r0, r4
 800616a:	d10b      	bne.n	8006184 <_free_r+0x74>
 800616c:	6820      	ldr	r0, [r4, #0]
 800616e:	4401      	add	r1, r0
 8006170:	1858      	adds	r0, r3, r1
 8006172:	4282      	cmp	r2, r0
 8006174:	6019      	str	r1, [r3, #0]
 8006176:	d1dd      	bne.n	8006134 <_free_r+0x24>
 8006178:	6810      	ldr	r0, [r2, #0]
 800617a:	6852      	ldr	r2, [r2, #4]
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	4401      	add	r1, r0
 8006180:	6019      	str	r1, [r3, #0]
 8006182:	e7d7      	b.n	8006134 <_free_r+0x24>
 8006184:	d902      	bls.n	800618c <_free_r+0x7c>
 8006186:	230c      	movs	r3, #12
 8006188:	602b      	str	r3, [r5, #0]
 800618a:	e7d3      	b.n	8006134 <_free_r+0x24>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	1821      	adds	r1, r4, r0
 8006190:	428a      	cmp	r2, r1
 8006192:	bf04      	itt	eq
 8006194:	6811      	ldreq	r1, [r2, #0]
 8006196:	6852      	ldreq	r2, [r2, #4]
 8006198:	6062      	str	r2, [r4, #4]
 800619a:	bf04      	itt	eq
 800619c:	1809      	addeq	r1, r1, r0
 800619e:	6021      	streq	r1, [r4, #0]
 80061a0:	605c      	str	r4, [r3, #4]
 80061a2:	e7c7      	b.n	8006134 <_free_r+0x24>
 80061a4:	bd38      	pop	{r3, r4, r5, pc}
 80061a6:	bf00      	nop
 80061a8:	20000094 	.word	0x20000094

080061ac <_malloc_r>:
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	1ccd      	adds	r5, r1, #3
 80061b0:	f025 0503 	bic.w	r5, r5, #3
 80061b4:	3508      	adds	r5, #8
 80061b6:	2d0c      	cmp	r5, #12
 80061b8:	bf38      	it	cc
 80061ba:	250c      	movcc	r5, #12
 80061bc:	2d00      	cmp	r5, #0
 80061be:	4606      	mov	r6, r0
 80061c0:	db01      	blt.n	80061c6 <_malloc_r+0x1a>
 80061c2:	42a9      	cmp	r1, r5
 80061c4:	d903      	bls.n	80061ce <_malloc_r+0x22>
 80061c6:	230c      	movs	r3, #12
 80061c8:	6033      	str	r3, [r6, #0]
 80061ca:	2000      	movs	r0, #0
 80061cc:	bd70      	pop	{r4, r5, r6, pc}
 80061ce:	f000 f89b 	bl	8006308 <__malloc_lock>
 80061d2:	4a21      	ldr	r2, [pc, #132]	; (8006258 <_malloc_r+0xac>)
 80061d4:	6814      	ldr	r4, [r2, #0]
 80061d6:	4621      	mov	r1, r4
 80061d8:	b991      	cbnz	r1, 8006200 <_malloc_r+0x54>
 80061da:	4c20      	ldr	r4, [pc, #128]	; (800625c <_malloc_r+0xb0>)
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	b91b      	cbnz	r3, 80061e8 <_malloc_r+0x3c>
 80061e0:	4630      	mov	r0, r6
 80061e2:	f000 f83d 	bl	8006260 <_sbrk_r>
 80061e6:	6020      	str	r0, [r4, #0]
 80061e8:	4629      	mov	r1, r5
 80061ea:	4630      	mov	r0, r6
 80061ec:	f000 f838 	bl	8006260 <_sbrk_r>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d124      	bne.n	800623e <_malloc_r+0x92>
 80061f4:	230c      	movs	r3, #12
 80061f6:	6033      	str	r3, [r6, #0]
 80061f8:	4630      	mov	r0, r6
 80061fa:	f000 f886 	bl	800630a <__malloc_unlock>
 80061fe:	e7e4      	b.n	80061ca <_malloc_r+0x1e>
 8006200:	680b      	ldr	r3, [r1, #0]
 8006202:	1b5b      	subs	r3, r3, r5
 8006204:	d418      	bmi.n	8006238 <_malloc_r+0x8c>
 8006206:	2b0b      	cmp	r3, #11
 8006208:	d90f      	bls.n	800622a <_malloc_r+0x7e>
 800620a:	600b      	str	r3, [r1, #0]
 800620c:	50cd      	str	r5, [r1, r3]
 800620e:	18cc      	adds	r4, r1, r3
 8006210:	4630      	mov	r0, r6
 8006212:	f000 f87a 	bl	800630a <__malloc_unlock>
 8006216:	f104 000b 	add.w	r0, r4, #11
 800621a:	1d23      	adds	r3, r4, #4
 800621c:	f020 0007 	bic.w	r0, r0, #7
 8006220:	1ac3      	subs	r3, r0, r3
 8006222:	d0d3      	beq.n	80061cc <_malloc_r+0x20>
 8006224:	425a      	negs	r2, r3
 8006226:	50e2      	str	r2, [r4, r3]
 8006228:	e7d0      	b.n	80061cc <_malloc_r+0x20>
 800622a:	428c      	cmp	r4, r1
 800622c:	684b      	ldr	r3, [r1, #4]
 800622e:	bf16      	itet	ne
 8006230:	6063      	strne	r3, [r4, #4]
 8006232:	6013      	streq	r3, [r2, #0]
 8006234:	460c      	movne	r4, r1
 8006236:	e7eb      	b.n	8006210 <_malloc_r+0x64>
 8006238:	460c      	mov	r4, r1
 800623a:	6849      	ldr	r1, [r1, #4]
 800623c:	e7cc      	b.n	80061d8 <_malloc_r+0x2c>
 800623e:	1cc4      	adds	r4, r0, #3
 8006240:	f024 0403 	bic.w	r4, r4, #3
 8006244:	42a0      	cmp	r0, r4
 8006246:	d005      	beq.n	8006254 <_malloc_r+0xa8>
 8006248:	1a21      	subs	r1, r4, r0
 800624a:	4630      	mov	r0, r6
 800624c:	f000 f808 	bl	8006260 <_sbrk_r>
 8006250:	3001      	adds	r0, #1
 8006252:	d0cf      	beq.n	80061f4 <_malloc_r+0x48>
 8006254:	6025      	str	r5, [r4, #0]
 8006256:	e7db      	b.n	8006210 <_malloc_r+0x64>
 8006258:	20000094 	.word	0x20000094
 800625c:	20000098 	.word	0x20000098

08006260 <_sbrk_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4c06      	ldr	r4, [pc, #24]	; (800627c <_sbrk_r+0x1c>)
 8006264:	2300      	movs	r3, #0
 8006266:	4605      	mov	r5, r0
 8006268:	4608      	mov	r0, r1
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	f7fe fbac 	bl	80049c8 <_sbrk>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d102      	bne.n	800627a <_sbrk_r+0x1a>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	b103      	cbz	r3, 800627a <_sbrk_r+0x1a>
 8006278:	602b      	str	r3, [r5, #0]
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	20000110 	.word	0x20000110

08006280 <_raise_r>:
 8006280:	291f      	cmp	r1, #31
 8006282:	b538      	push	{r3, r4, r5, lr}
 8006284:	4604      	mov	r4, r0
 8006286:	460d      	mov	r5, r1
 8006288:	d904      	bls.n	8006294 <_raise_r+0x14>
 800628a:	2316      	movs	r3, #22
 800628c:	6003      	str	r3, [r0, #0]
 800628e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006296:	b112      	cbz	r2, 800629e <_raise_r+0x1e>
 8006298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800629c:	b94b      	cbnz	r3, 80062b2 <_raise_r+0x32>
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 f830 	bl	8006304 <_getpid_r>
 80062a4:	462a      	mov	r2, r5
 80062a6:	4601      	mov	r1, r0
 80062a8:	4620      	mov	r0, r4
 80062aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ae:	f000 b817 	b.w	80062e0 <_kill_r>
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d00a      	beq.n	80062cc <_raise_r+0x4c>
 80062b6:	1c59      	adds	r1, r3, #1
 80062b8:	d103      	bne.n	80062c2 <_raise_r+0x42>
 80062ba:	2316      	movs	r3, #22
 80062bc:	6003      	str	r3, [r0, #0]
 80062be:	2001      	movs	r0, #1
 80062c0:	e7e7      	b.n	8006292 <_raise_r+0x12>
 80062c2:	2400      	movs	r4, #0
 80062c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062c8:	4628      	mov	r0, r5
 80062ca:	4798      	blx	r3
 80062cc:	2000      	movs	r0, #0
 80062ce:	e7e0      	b.n	8006292 <_raise_r+0x12>

080062d0 <raise>:
 80062d0:	4b02      	ldr	r3, [pc, #8]	; (80062dc <raise+0xc>)
 80062d2:	4601      	mov	r1, r0
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	f7ff bfd3 	b.w	8006280 <_raise_r>
 80062da:	bf00      	nop
 80062dc:	2000000c 	.word	0x2000000c

080062e0 <_kill_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4c07      	ldr	r4, [pc, #28]	; (8006300 <_kill_r+0x20>)
 80062e4:	2300      	movs	r3, #0
 80062e6:	4605      	mov	r5, r0
 80062e8:	4608      	mov	r0, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	f7fe fb51 	bl	8004994 <_kill>
 80062f2:	1c43      	adds	r3, r0, #1
 80062f4:	d102      	bne.n	80062fc <_kill_r+0x1c>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	b103      	cbz	r3, 80062fc <_kill_r+0x1c>
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	bd38      	pop	{r3, r4, r5, pc}
 80062fe:	bf00      	nop
 8006300:	20000110 	.word	0x20000110

08006304 <_getpid_r>:
 8006304:	f7fe bb3e 	b.w	8004984 <_getpid>

08006308 <__malloc_lock>:
 8006308:	4770      	bx	lr

0800630a <__malloc_unlock>:
 800630a:	4770      	bx	lr

0800630c <_init>:
 800630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630e:	bf00      	nop
 8006310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006312:	bc08      	pop	{r3}
 8006314:	469e      	mov	lr, r3
 8006316:	4770      	bx	lr

08006318 <_fini>:
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	bf00      	nop
 800631c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631e:	bc08      	pop	{r3}
 8006320:	469e      	mov	lr, r3
 8006322:	4770      	bx	lr
