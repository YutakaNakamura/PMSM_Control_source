
STM32F303_PWM_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b44  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08006cd0  08006cd0  00016cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f18  08006f18  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006f18  08006f18  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f18  08006f18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f18  08006f18  00016f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f1c  08006f1c  00016f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000070  08006f90  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08006f90  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9ad  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000376a  00000000  00000000  0003aa4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d78  00000000  00000000  0003e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  0003ef30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cbdc  00000000  00000000  0003fb50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec4a  00000000  00000000  0005c72c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ee8e  00000000  00000000  0006b376  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  0010a280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006cb4 	.word	0x08006cb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08006cb4 	.word	0x08006cb4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x28>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x28>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f92f 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f004 fa30 	bl	8004fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f939 	bl	8000e26 <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 f90f 	bl	8000dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004
 8000bec:	20000000 	.word	0x20000000

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000004 	.word	0x20000004
 8000c14:	200000a4 	.word	0x200000a4

08000c18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200000a4 	.word	0x200000a4

08000c30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff ffee 	bl	8000c18 <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_Delay+0x40>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffde 	bl	8000c18 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000004 	.word	0x20000004

08000c74 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	da0b      	bge.n	8000d04 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <NVIC_SetPriority+0x4c>)
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	3b04      	subs	r3, #4
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d02:	e009      	b.n	8000d18 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4907      	ldr	r1, [pc, #28]	; (8000d28 <NVIC_SetPriority+0x50>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db8:	f7ff ff8e 	bl	8000cd8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff47 	bl	8000c74 <NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff5c 	bl	8000cbc <NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffb0 	bl	8000d94 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e56:	e14e      	b.n	80010f6 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 8140 	beq.w	80010f0 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x40>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b12      	cmp	r3, #18
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	6939      	ldr	r1, [r7, #16]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d00b      	beq.n	8000f1c <HAL_GPIO_Init+0xdc>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f10:	2b11      	cmp	r3, #17
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b12      	cmp	r3, #18
 8000f1a:	d130      	bne.n	8000f7e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f52:	2201      	movs	r2, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	f003 0201 	and.w	r2, r3, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 809a 	beq.w	80010f0 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbc:	4b55      	ldr	r3, [pc, #340]	; (8001114 <HAL_GPIO_Init+0x2d4>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a54      	ldr	r2, [pc, #336]	; (8001114 <HAL_GPIO_Init+0x2d4>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b52      	ldr	r3, [pc, #328]	; (8001114 <HAL_GPIO_Init+0x2d4>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fd4:	4a50      	ldr	r2, [pc, #320]	; (8001118 <HAL_GPIO_Init+0x2d8>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ffe:	d013      	beq.n	8001028 <HAL_GPIO_Init+0x1e8>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a46      	ldr	r2, [pc, #280]	; (800111c <HAL_GPIO_Init+0x2dc>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d00d      	beq.n	8001024 <HAL_GPIO_Init+0x1e4>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a45      	ldr	r2, [pc, #276]	; (8001120 <HAL_GPIO_Init+0x2e0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d007      	beq.n	8001020 <HAL_GPIO_Init+0x1e0>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a44      	ldr	r2, [pc, #272]	; (8001124 <HAL_GPIO_Init+0x2e4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d101      	bne.n	800101c <HAL_GPIO_Init+0x1dc>
 8001018:	2303      	movs	r3, #3
 800101a:	e006      	b.n	800102a <HAL_GPIO_Init+0x1ea>
 800101c:	2305      	movs	r3, #5
 800101e:	e004      	b.n	800102a <HAL_GPIO_Init+0x1ea>
 8001020:	2302      	movs	r3, #2
 8001022:	e002      	b.n	800102a <HAL_GPIO_Init+0x1ea>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <HAL_GPIO_Init+0x1ea>
 8001028:	2300      	movs	r3, #0
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	f002 0203 	and.w	r2, r2, #3
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	4093      	lsls	r3, r2
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800103a:	4937      	ldr	r1, [pc, #220]	; (8001118 <HAL_GPIO_Init+0x2d8>)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001048:	4b37      	ldr	r3, [pc, #220]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800106c:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001096:	4a24      	ldr	r2, [pc, #144]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	f47f aea9 	bne.w	8000e58 <HAL_GPIO_Init+0x18>
  }
}
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800
 8001124:	48000c00 	.word	0x48000c00
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001132:	af00      	add	r7, sp, #0
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	f000 beda 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 816e 	beq.w	8001432 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001156:	4bb5      	ldr	r3, [pc, #724]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b04      	cmp	r3, #4
 8001160:	d00c      	beq.n	800117c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001162:	4bb2      	ldr	r3, [pc, #712]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b08      	cmp	r3, #8
 800116c:	d15a      	bne.n	8001224 <HAL_RCC_OscConfig+0xf8>
 800116e:	4baf      	ldr	r3, [pc, #700]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117a:	d153      	bne.n	8001224 <HAL_RCC_OscConfig+0xf8>
 800117c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001180:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001190:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	fab3 f383 	clz	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <HAL_RCC_OscConfig+0x82>
 80011a8:	4ba0      	ldr	r3, [pc, #640]	; (800142c <HAL_RCC_OscConfig+0x300>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	e015      	b.n	80011da <HAL_RCC_OscConfig+0xae>
 80011ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80011c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011ca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011d6:	4b95      	ldr	r3, [pc, #596]	; (800142c <HAL_RCC_OscConfig+0x300>)
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011de:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80011e2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80011e6:	fa92 f2a2 	rbit	r2, r2
 80011ea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80011ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80011f2:	fab2 f282 	clz	r2, r2
 80011f6:	b252      	sxtb	r2, r2
 80011f8:	f042 0220 	orr.w	r2, r2, #32
 80011fc:	b252      	sxtb	r2, r2
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f002 021f 	and.w	r2, r2, #31
 8001204:	2101      	movs	r1, #1
 8001206:	fa01 f202 	lsl.w	r2, r1, r2
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 810f 	beq.w	8001430 <HAL_RCC_OscConfig+0x304>
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 8109 	bne.w	8001430 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	f000 be6b 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x112>
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a7d      	ldr	r2, [pc, #500]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e030      	b.n	80012a0 <HAL_RCC_OscConfig+0x174>
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10c      	bne.n	8001262 <HAL_RCC_OscConfig+0x136>
 8001248:	4b78      	ldr	r3, [pc, #480]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a77      	ldr	r2, [pc, #476]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800124e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b75      	ldr	r3, [pc, #468]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a74      	ldr	r2, [pc, #464]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e01e      	b.n	80012a0 <HAL_RCC_OscConfig+0x174>
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x15c>
 800126e:	4b6f      	ldr	r3, [pc, #444]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a6e      	ldr	r2, [pc, #440]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b6c      	ldr	r3, [pc, #432]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6b      	ldr	r2, [pc, #428]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0x174>
 8001288:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a67      	ldr	r2, [pc, #412]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b65      	ldr	r3, [pc, #404]	; (800142c <HAL_RCC_OscConfig+0x300>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a64      	ldr	r2, [pc, #400]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012a0:	4b62      	ldr	r3, [pc, #392]	; (800142c <HAL_RCC_OscConfig+0x300>)
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	f023 020f 	bic.w	r2, r3, #15
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	495f      	ldr	r1, [pc, #380]	; (800142c <HAL_RCC_OscConfig+0x300>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d05a      	beq.n	8001374 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff fcab 	bl	8000c18 <HAL_GetTick>
 80012c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	e00a      	b.n	80012de <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fca6 	bl	8000c18 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b64      	cmp	r3, #100	; 0x64
 80012d6:	d902      	bls.n	80012de <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	f000 be0e 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>
 80012de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012e2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80012f2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	fab3 f383 	clz	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	095b      	lsrs	r3, r3, #5
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d102      	bne.n	8001310 <HAL_RCC_OscConfig+0x1e4>
 800130a:	4b48      	ldr	r3, [pc, #288]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	e015      	b.n	800133c <HAL_RCC_OscConfig+0x210>
 8001310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001314:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001318:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800131c:	fa93 f3a3 	rbit	r3, r3
 8001320:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001328:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800132c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001338:	4b3c      	ldr	r3, [pc, #240]	; (800142c <HAL_RCC_OscConfig+0x300>)
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001340:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001344:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001348:	fa92 f2a2 	rbit	r2, r2
 800134c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001350:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001354:	fab2 f282 	clz	r2, r2
 8001358:	b252      	sxtb	r2, r2
 800135a:	f042 0220 	orr.w	r2, r2, #32
 800135e:	b252      	sxtb	r2, r2
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	f002 021f 	and.w	r2, r2, #31
 8001366:	2101      	movs	r1, #1
 8001368:	fa01 f202 	lsl.w	r2, r1, r2
 800136c:	4013      	ands	r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0aa      	beq.n	80012c8 <HAL_RCC_OscConfig+0x19c>
 8001372:	e05e      	b.n	8001432 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fc50 	bl	8000c18 <HAL_GetTick>
 8001378:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137c:	e00a      	b.n	8001394 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137e:	f7ff fc4b 	bl	8000c18 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d902      	bls.n	8001394 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	f000 bdb3 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>
 8001394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001398:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80013a0:	fa93 f3a3 	rbit	r3, r3
 80013a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80013a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ac:	fab3 f383 	clz	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d102      	bne.n	80013c6 <HAL_RCC_OscConfig+0x29a>
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_RCC_OscConfig+0x300>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	e015      	b.n	80013f2 <HAL_RCC_OscConfig+0x2c6>
 80013c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80013d2:	fa93 f3a3 	rbit	r3, r3
 80013d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80013da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_RCC_OscConfig+0x300>)
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80013fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80013fe:	fa92 f2a2 	rbit	r2, r2
 8001402:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001406:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800140a:	fab2 f282 	clz	r2, r2
 800140e:	b252      	sxtb	r2, r2
 8001410:	f042 0220 	orr.w	r2, r2, #32
 8001414:	b252      	sxtb	r2, r2
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	f002 021f 	and.w	r2, r2, #31
 800141c:	2101      	movs	r1, #1
 800141e:	fa01 f202 	lsl.w	r2, r1, r2
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1aa      	bne.n	800137e <HAL_RCC_OscConfig+0x252>
 8001428:	e003      	b.n	8001432 <HAL_RCC_OscConfig+0x306>
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8170 	beq.w	8001722 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001442:	4bd0      	ldr	r3, [pc, #832]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800144e:	4bcd      	ldr	r3, [pc, #820]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b08      	cmp	r3, #8
 8001458:	d16d      	bne.n	8001536 <HAL_RCC_OscConfig+0x40a>
 800145a:	4bca      	ldr	r3, [pc, #808]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d167      	bne.n	8001536 <HAL_RCC_OscConfig+0x40a>
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001478:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d102      	bne.n	8001496 <HAL_RCC_OscConfig+0x36a>
 8001490:	4bbc      	ldr	r3, [pc, #752]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	e013      	b.n	80014be <HAL_RCC_OscConfig+0x392>
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014ae:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014ba:	4bb2      	ldr	r3, [pc, #712]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	2202      	movs	r2, #2
 80014c0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80014c4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80014c8:	fa92 f2a2 	rbit	r2, r2
 80014cc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80014d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014d4:	fab2 f282 	clz	r2, r2
 80014d8:	b252      	sxtb	r2, r2
 80014da:	f042 0220 	orr.w	r2, r2, #32
 80014de:	b252      	sxtb	r2, r2
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	f002 021f 	and.w	r2, r2, #31
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <HAL_RCC_OscConfig+0x3d6>
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d002      	beq.n	8001502 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	f000 bcfc 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4ba0      	ldr	r3, [pc, #640]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6959      	ldr	r1, [r3, #20]
 8001510:	23f8      	movs	r3, #248	; 0xf8
 8001512:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001522:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	4995      	ldr	r1, [pc, #596]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001534:	e0f5      	b.n	8001722 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 8085 	beq.w	800164c <HAL_RCC_OscConfig+0x520>
 8001542:	2301      	movs	r3, #1
 8001544:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001554:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001558:	fab3 f383 	clz	r3, r3
 800155c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001560:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	461a      	mov	r2, r3
 8001568:	2301      	movs	r3, #1
 800156a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fb54 	bl	8000c18 <HAL_GetTick>
 8001570:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fb4f 	bl	8000c18 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d902      	bls.n	800158c <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	f000 bcb7 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>
 800158c:	2302      	movs	r3, #2
 800158e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 800159e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	fab3 f383 	clz	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	095b      	lsrs	r3, r3, #5
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d102      	bne.n	80015bc <HAL_RCC_OscConfig+0x490>
 80015b6:	4b73      	ldr	r3, [pc, #460]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	e013      	b.n	80015e4 <HAL_RCC_OscConfig+0x4b8>
 80015bc:	2302      	movs	r3, #2
 80015be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015d4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015e0:	4b68      	ldr	r3, [pc, #416]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	2202      	movs	r2, #2
 80015e6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80015ea:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80015ee:	fa92 f2a2 	rbit	r2, r2
 80015f2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80015f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015fa:	fab2 f282 	clz	r2, r2
 80015fe:	b252      	sxtb	r2, r2
 8001600:	f042 0220 	orr.w	r2, r2, #32
 8001604:	b252      	sxtb	r2, r2
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	f002 021f 	and.w	r2, r2, #31
 800160c:	2101      	movs	r1, #1
 800160e:	fa01 f202 	lsl.w	r2, r1, r2
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0ae      	beq.n	8001576 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001618:	4b5a      	ldr	r3, [pc, #360]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6959      	ldr	r1, [r3, #20]
 8001626:	23f8      	movs	r3, #248	; 0xf8
 8001628:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001638:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800163c:	fab3 f383 	clz	r3, r3
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	494f      	ldr	r1, [pc, #316]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
 800164a:	e06a      	b.n	8001722 <HAL_RCC_OscConfig+0x5f6>
 800164c:	2301      	movs	r3, #1
 800164e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800165e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800166a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	461a      	mov	r2, r3
 8001672:	2300      	movs	r3, #0
 8001674:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff facf 	bl	8000c18 <HAL_GetTick>
 800167a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff faca 	bl	8000c18 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d902      	bls.n	8001696 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	f000 bc32 	b.w	8001efa <HAL_RCC_OscConfig+0xdce>
 8001696:	2302      	movs	r3, #2
 8001698:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80016a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_OscConfig+0x59a>
 80016c0:	4b30      	ldr	r3, [pc, #192]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	e013      	b.n	80016ee <HAL_RCC_OscConfig+0x5c2>
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016d0:	fa93 f3a3 	rbit	r3, r3
 80016d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <HAL_RCC_OscConfig+0x658>)
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	2202      	movs	r2, #2
 80016f0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80016f4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80016f8:	fa92 f2a2 	rbit	r2, r2
 80016fc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001700:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001704:	fab2 f282 	clz	r2, r2
 8001708:	b252      	sxtb	r2, r2
 800170a:	f042 0220 	orr.w	r2, r2, #32
 800170e:	b252      	sxtb	r2, r2
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f002 021f 	and.w	r2, r2, #31
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f202 	lsl.w	r2, r1, r2
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ae      	bne.n	8001680 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80d8 	beq.w	80018e2 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d067      	beq.n	800180c <HAL_RCC_OscConfig+0x6e0>
 800173c:	2301      	movs	r3, #1
 800173e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001746:	fa93 f3a3 	rbit	r3, r3
 800174a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800174e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	fab3 f383 	clz	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_RCC_OscConfig+0x65c>)
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	461a      	mov	r2, r3
 8001760:	2301      	movs	r3, #1
 8001762:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001764:	f7ff fa58 	bl	8000c18 <HAL_GetTick>
 8001768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176c:	e00e      	b.n	800178c <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff fa53 	bl	8000c18 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d906      	bls.n	800178c <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e3bb      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	10908120 	.word	0x10908120
 800178c:	2302      	movs	r3, #2
 800178e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017a8:	fa93 f2a3 	rbit	r2, r3
 80017ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017b6:	2202      	movs	r2, #2
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	fa93 f2a3 	rbit	r2, r3
 80017c4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	4ba5      	ldr	r3, [pc, #660]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80017cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017d2:	2102      	movs	r1, #2
 80017d4:	6019      	str	r1, [r3, #0]
 80017d6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	fa93 f1a3 	rbit	r1, r3
 80017e0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017e4:	6019      	str	r1, [r3, #0]
  return(result);
 80017e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0b1      	beq.n	800176e <HAL_RCC_OscConfig+0x642>
 800180a:	e06a      	b.n	80018e2 <HAL_RCC_OscConfig+0x7b6>
 800180c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001822:	601a      	str	r2, [r3, #0]
  return(result);
 8001824:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001828:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	4b8c      	ldr	r3, [pc, #560]	; (8001a64 <HAL_RCC_OscConfig+0x938>)
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	461a      	mov	r2, r3
 8001838:	2300      	movs	r3, #0
 800183a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183c:	f7ff f9ec 	bl	8000c18 <HAL_GetTick>
 8001840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	e009      	b.n	800185a <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff f9e7 	bl	8000c18 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e34f      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 800185a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800185e:	2202      	movs	r2, #2
 8001860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001876:	2202      	movs	r2, #2
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fa93 f2a3 	rbit	r2, r3
 8001884:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800188e:	2202      	movs	r2, #2
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a2:	4b6f      	ldr	r3, [pc, #444]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80018a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018aa:	2102      	movs	r1, #2
 80018ac:	6019      	str	r1, [r3, #0]
 80018ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f1a3 	rbit	r1, r3
 80018b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018bc:	6019      	str	r1, [r3, #0]
  return(result);
 80018be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	2101      	movs	r1, #1
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	4013      	ands	r3, r2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1b1      	bne.n	8001846 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8159 	beq.w	8001ba4 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f8:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d112      	bne.n	800192a <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	4b56      	ldr	r3, [pc, #344]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	4a55      	ldr	r2, [pc, #340]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190e:	61d3      	str	r3, [r2, #28]
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001924:	2301      	movs	r3, #1
 8001926:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <HAL_RCC_OscConfig+0x93c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11a      	bne.n	800196c <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001936:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <HAL_RCC_OscConfig+0x93c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a4b      	ldr	r2, [pc, #300]	; (8001a68 <HAL_RCC_OscConfig+0x93c>)
 800193c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001940:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001942:	f7ff f969 	bl	8000c18 <HAL_GetTick>
 8001946:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194a:	e009      	b.n	8001960 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194c:	f7ff f964 	bl	8000c18 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b64      	cmp	r3, #100	; 0x64
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e2cc      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <HAL_RCC_OscConfig+0x93c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ef      	beq.n	800194c <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d106      	bne.n	8001984 <HAL_RCC_OscConfig+0x858>
 8001976:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a39      	ldr	r2, [pc, #228]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	e02f      	b.n	80019e4 <HAL_RCC_OscConfig+0x8b8>
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x87c>
 800198e:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a33      	ldr	r2, [pc, #204]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6213      	str	r3, [r2, #32]
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a30      	ldr	r2, [pc, #192]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	e01d      	b.n	80019e4 <HAL_RCC_OscConfig+0x8b8>
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x8a0>
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a2a      	ldr	r2, [pc, #168]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a27      	ldr	r2, [pc, #156]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6213      	str	r3, [r2, #32]
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_OscConfig+0x8b8>
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 80019de:	f023 0304 	bic.w	r3, r3, #4
 80019e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d06b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ee:	f7ff f913 	bl	8000c18 <HAL_GetTick>
 80019f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff f90e 	bl	8000c18 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e274      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 8001a10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a14:	2202      	movs	r2, #2
 8001a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	fa93 f2a3 	rbit	r2, r3
 8001a22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a3e:	601a      	str	r2, [r3, #0]
  return(result);
 8001a40:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a44:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	095b      	lsrs	r3, r3, #5
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d108      	bne.n	8001a6c <HAL_RCC_OscConfig+0x940>
 8001a5a:	4b01      	ldr	r3, [pc, #4]	; (8001a60 <HAL_RCC_OscConfig+0x934>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	e013      	b.n	8001a88 <HAL_RCC_OscConfig+0x95c>
 8001a60:	40021000 	.word	0x40021000
 8001a64:	10908120 	.word	0x10908120
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a70:	2202      	movs	r2, #2
 8001a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	fa93 f2a3 	rbit	r2, r3
 8001a7e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	4bbb      	ldr	r3, [pc, #748]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	6011      	str	r1, [r2, #0]
 8001a90:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	fa92 f1a2 	rbit	r1, r2
 8001a9a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a9e:	6011      	str	r1, [r2, #0]
  return(result);
 8001aa0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	fab2 f282 	clz	r2, r2
 8001aaa:	b252      	sxtb	r2, r2
 8001aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab0:	b252      	sxtb	r2, r2
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	f002 021f 	and.w	r2, r2, #31
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d099      	beq.n	80019f8 <HAL_RCC_OscConfig+0x8cc>
 8001ac4:	e064      	b.n	8001b90 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f8a7 	bl	8000c18 <HAL_GetTick>
 8001aca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f8a2 	bl	8000c18 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e208      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 8001ae8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aec:	2202      	movs	r2, #2
 8001aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b04:	2202      	movs	r2, #2
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b16:	601a      	str	r2, [r3, #0]
  return(result);
 8001b18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b1c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	095b      	lsrs	r3, r3, #5
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0xa0c>
 8001b32:	4b90      	ldr	r3, [pc, #576]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	e00d      	b.n	8001b54 <HAL_RCC_OscConfig+0xa28>
 8001b38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f2a3 	rbit	r2, r3
 8001b4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4b88      	ldr	r3, [pc, #544]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b58:	2102      	movs	r1, #2
 8001b5a:	6011      	str	r1, [r2, #0]
 8001b5c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	fa92 f1a2 	rbit	r1, r2
 8001b66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b6a:	6011      	str	r1, [r2, #0]
  return(result);
 8001b6c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	fab2 f282 	clz	r2, r2
 8001b76:	b252      	sxtb	r2, r2
 8001b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b7c:	b252      	sxtb	r2, r2
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	f002 021f 	and.w	r2, r2, #31
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d19f      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b90:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	4a75      	ldr	r2, [pc, #468]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 81a4 	beq.w	8001ef8 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb0:	4b70      	ldr	r3, [pc, #448]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	f000 819b 	beq.w	8001ef4 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	f040 8113 	bne.w	8001df0 <HAL_RCC_OscConfig+0xcc4>
 8001bca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001bce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001be2:	601a      	str	r2, [r3, #0]
  return(result);
 8001be4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001be8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f80b 	bl	8000c18 <HAL_GetTick>
 8001c02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c06:	e009      	b.n	8001c1c <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff f806 	bl	8000c18 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e16e      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 8001c1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c34:	601a      	str	r2, [r3, #0]
  return(result);
 8001c36:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d102      	bne.n	8001c56 <HAL_RCC_OscConfig+0xb2a>
 8001c50:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	e01b      	b.n	8001c8e <HAL_RCC_OscConfig+0xb62>
 8001c56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	fa93 f2a3 	rbit	r2, r3
 8001c6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c96:	6011      	str	r1, [r2, #0]
 8001c98:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	fa92 f1a2 	rbit	r1, r2
 8001ca2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ca6:	6011      	str	r1, [r2, #0]
  return(result);
 8001ca8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	fab2 f282 	clz	r2, r2
 8001cb2:	b252      	sxtb	r2, r2
 8001cb4:	f042 0220 	orr.w	r2, r2, #32
 8001cb8:	b252      	sxtb	r2, r2
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f002 021f 	and.w	r2, r2, #31
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d19d      	bne.n	8001c08 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	4924      	ldr	r1, [pc, #144]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
 8001ce8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d00:	601a      	str	r2, [r3, #0]
  return(result);
 8001d02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d06:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	461a      	mov	r2, r3
 8001d18:	2301      	movs	r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe ff7c 	bl	8000c18 <HAL_GetTick>
 8001d20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d24:	e009      	b.n	8001d3a <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d26:	f7fe ff77 	bl	8000c18 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0df      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 8001d3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d52:	601a      	str	r2, [r3, #0]
  return(result);
 8001d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d104      	bne.n	8001d78 <HAL_RCC_OscConfig+0xc4c>
 8001d6e:	4b01      	ldr	r3, [pc, #4]	; (8001d74 <HAL_RCC_OscConfig+0xc48>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e01d      	b.n	8001db0 <HAL_RCC_OscConfig+0xc84>
 8001d74:	40021000 	.word	0x40021000
 8001d78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fa93 f2a3 	rbit	r2, r3
 8001da6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	4b55      	ldr	r3, [pc, #340]	; (8001f04 <HAL_RCC_OscConfig+0xdd8>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001db4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001db8:	6011      	str	r1, [r2, #0]
 8001dba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fa92 f1a2 	rbit	r1, r2
 8001dc4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dc8:	6011      	str	r1, [r2, #0]
  return(result);
 8001dca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	b252      	sxtb	r2, r2
 8001dd6:	f042 0220 	orr.w	r2, r2, #32
 8001dda:	b252      	sxtb	r2, r2
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f002 021f 	and.w	r2, r2, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f202 	lsl.w	r2, r1, r2
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d09b      	beq.n	8001d26 <HAL_RCC_OscConfig+0xbfa>
 8001dee:	e083      	b.n	8001ef8 <HAL_RCC_OscConfig+0xdcc>
 8001df0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001df4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e08:	601a      	str	r2, [r3, #0]
  return(result);
 8001e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e0e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2300      	movs	r3, #0
 8001e22:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7fe fef8 	bl	8000c18 <HAL_GetTick>
 8001e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2c:	e009      	b.n	8001e42 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7fe fef3 	bl	8000c18 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e05b      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
 8001e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5a:	601a      	str	r2, [r3, #0]
  return(result);
 8001e5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0xd50>
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_RCC_OscConfig+0xdd8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e01b      	b.n	8001eb4 <HAL_RCC_OscConfig+0xd88>
 8001e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	fa93 f2a3 	rbit	r2, r3
 8001e90:	f107 0320 	add.w	r3, r7, #32
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	fa93 f2a3 	rbit	r2, r3
 8001eaa:	f107 0318 	add.w	r3, r7, #24
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_RCC_OscConfig+0xdd8>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	f107 0214 	add.w	r2, r7, #20
 8001eb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ebc:	6011      	str	r1, [r2, #0]
 8001ebe:	f107 0214 	add.w	r2, r7, #20
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	fa92 f1a2 	rbit	r1, r2
 8001ec8:	f107 0210 	add.w	r2, r7, #16
 8001ecc:	6011      	str	r1, [r2, #0]
  return(result);
 8001ece:	f107 0210 	add.w	r2, r7, #16
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	fab2 f282 	clz	r2, r2
 8001ed8:	b252      	sxtb	r2, r2
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	b252      	sxtb	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f002 021f 	and.w	r2, r2, #31
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d19d      	bne.n	8001e2e <HAL_RCC_OscConfig+0xd02>
 8001ef2:	e001      	b.n	8001ef8 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b09e      	sub	sp, #120	; 0x78
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e164      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b92      	ldr	r3, [pc, #584]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b8f      	ldr	r3, [pc, #572]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	498d      	ldr	r1, [pc, #564]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b8b      	ldr	r3, [pc, #556]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e14c      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b84      	ldr	r3, [pc, #528]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4981      	ldr	r1, [pc, #516]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80df 	beq.w	800213a <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d13d      	bne.n	8002000 <HAL_RCC_ClockConfig+0xf8>
 8001f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d102      	bne.n	8001fae <HAL_RCC_ClockConfig+0xa6>
 8001fa8:	4b71      	ldr	r3, [pc, #452]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	e00f      	b.n	8001fce <HAL_RCC_ClockConfig+0xc6>
 8001fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	667b      	str	r3, [r7, #100]	; 0x64
 8001fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8001fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fca:	4b69      	ldr	r3, [pc, #420]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fd6:	fa92 f2a2 	rbit	r2, r2
 8001fda:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001fdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fde:	fab2 f282 	clz	r2, r2
 8001fe2:	b252      	sxtb	r2, r2
 8001fe4:	f042 0220 	orr.w	r2, r2, #32
 8001fe8:	b252      	sxtb	r2, r2
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	f002 021f 	and.w	r2, r2, #31
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d17d      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0f4      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d13d      	bne.n	8002084 <HAL_RCC_ClockConfig+0x17c>
 8002008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d102      	bne.n	8002032 <HAL_RCC_ClockConfig+0x12a>
 800202c:	4b50      	ldr	r3, [pc, #320]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	e00f      	b.n	8002052 <HAL_RCC_ClockConfig+0x14a>
 8002032:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002036:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	647b      	str	r3, [r7, #68]	; 0x44
 8002040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002044:	643b      	str	r3, [r7, #64]	; 0x40
 8002046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800204e:	4b48      	ldr	r3, [pc, #288]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002056:	63ba      	str	r2, [r7, #56]	; 0x38
 8002058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800205a:	fa92 f2a2 	rbit	r2, r2
 800205e:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002062:	fab2 f282 	clz	r2, r2
 8002066:	b252      	sxtb	r2, r2
 8002068:	f042 0220 	orr.w	r2, r2, #32
 800206c:	b252      	sxtb	r2, r2
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f002 021f 	and.w	r2, r2, #31
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f202 	lsl.w	r2, r1, r2
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d13b      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b2      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
 8002084:	2302      	movs	r3, #2
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_ClockConfig+0x1a4>
 80020a6:	4b32      	ldr	r3, [pc, #200]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	e00d      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1c0>
 80020ac:	2302      	movs	r3, #2
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
 80020b8:	2302      	movs	r3, #2
 80020ba:	623b      	str	r3, [r7, #32]
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2202      	movs	r2, #2
 80020ca:	61ba      	str	r2, [r7, #24]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	fa92 f2a2 	rbit	r2, r2
 80020d2:	617a      	str	r2, [r7, #20]
  return(result);
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	fab2 f282 	clz	r2, r2
 80020da:	b252      	sxtb	r2, r2
 80020dc:	f042 0220 	orr.w	r2, r2, #32
 80020e0:	b252      	sxtb	r2, r2
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	f002 021f 	and.w	r2, r2, #31
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f202 	lsl.w	r2, r1, r2
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e078      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f023 0203 	bic.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	491a      	ldr	r1, [pc, #104]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800210a:	f7fe fd85 	bl	8000c18 <HAL_GetTick>
 800210e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002110:	e00a      	b.n	8002128 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002112:	f7fe fd81 	bl	8000c18 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e060      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCC_ClockConfig+0x268>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 020c 	and.w	r2, r3, #12
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	429a      	cmp	r2, r3
 8002138:	d1eb      	bne.n	8002112 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d215      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 0207 	bic.w	r2, r3, #7
 8002150:	4906      	ldr	r1, [pc, #24]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <HAL_RCC_ClockConfig+0x264>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d006      	beq.n	8002174 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e03f      	b.n	80021ea <HAL_RCC_ClockConfig+0x2e2>
 800216a:	bf00      	nop
 800216c:	40022000 	.word	0x40022000
 8002170:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_RCC_ClockConfig+0x2ec>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4919      	ldr	r1, [pc, #100]	; (80021f4 <HAL_RCC_ClockConfig+0x2ec>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_RCC_ClockConfig+0x2ec>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4911      	ldr	r1, [pc, #68]	; (80021f4 <HAL_RCC_ClockConfig+0x2ec>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021b2:	f000 f825 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021b6:	4601      	mov	r1, r0
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_RCC_ClockConfig+0x2ec>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021c0:	23f0      	movs	r3, #240	; 0xf0
 80021c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <HAL_RCC_ClockConfig+0x2f0>)
 80021d8:	5cd3      	ldrb	r3, [r2, r3]
 80021da:	fa21 f303 	lsr.w	r3, r1, r3
 80021de:	4a07      	ldr	r2, [pc, #28]	; (80021fc <HAL_RCC_ClockConfig+0x2f4>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7fe fcd4 	bl	8000b90 <HAL_InitTick>
  
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3778      	adds	r7, #120	; 0x78
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	08006d0c 	.word	0x08006d0c
 80021fc:	20000008 	.word	0x20000008

08002200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b08b      	sub	sp, #44	; 0x2c
 8002204:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d002      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x30>
 800222a:	2b08      	cmp	r3, #8
 800222c:	d003      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x36>
 800222e:	e03c      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002232:	623b      	str	r3, [r7, #32]
      break;
 8002234:	e03c      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800223c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002240:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	607b      	str	r3, [r7, #4]
  return(result);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	f003 020f 	and.w	r2, r3, #15
 8002262:	230f      	movs	r3, #15
 8002264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	60fb      	str	r3, [r7, #12]
  return(result);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002288:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	e004      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	e002      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ac:	623b      	str	r3, [r7, #32]
      break;
 80022ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b0:	6a3b      	ldr	r3, [r7, #32]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	372c      	adds	r7, #44	; 0x2c
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	007a1200 	.word	0x007a1200
 80022c8:	08006cec 	.word	0x08006cec
 80022cc:	08006cfc 	.word	0x08006cfc
 80022d0:	003d0900 	.word	0x003d0900

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000008 	.word	0x20000008

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022f2:	f7ff ffef 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f6:	4601      	mov	r1, r0
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002300:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002304:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	603b      	str	r3, [r7, #0]
  return(result);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_RCC_GetPCLK1Freq+0x40>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	08006d1c 	.word	0x08006d1c

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002336:	f7ff ffcd 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 800233a:	4601      	mov	r1, r0
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002344:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002348:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	603b      	str	r3, [r7, #0]
  return(result);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x40>)
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	08006d1c 	.word	0x08006d1c

08002374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b092      	sub	sp, #72	; 0x48
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80cf 	beq.w	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002398:	4b86      	ldr	r3, [pc, #536]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10e      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b83      	ldr	r3, [pc, #524]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4a82      	ldr	r2, [pc, #520]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	61d3      	str	r3, [r2, #28]
 80023b0:	4b80      	ldr	r3, [pc, #512]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	4b7d      	ldr	r3, [pc, #500]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d118      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ce:	4b7a      	ldr	r3, [pc, #488]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a79      	ldr	r2, [pc, #484]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023da:	f7fe fc1d 	bl	8000c18 <HAL_GetTick>
 80023de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	e008      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7fe fc19 	bl	8000c18 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0da      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002400:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002408:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800240a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d07c      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800241a:	429a      	cmp	r2, r3
 800241c:	d075      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	461a      	mov	r2, r3
 8002446:	2301      	movs	r3, #1
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800244e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	4b56      	ldr	r3, [pc, #344]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	461a      	mov	r2, r3
 8002468:	2300      	movs	r3, #0
 800246a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800246c:	4a51      	ldr	r2, [pc, #324]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800246e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002470:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d046      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fbcc 	bl	8000c18 <HAL_GetTick>
 8002480:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002482:	e00a      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002484:	f7fe fbc8 	bl	8000c18 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e087      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x236>
 800249a:	2302      	movs	r3, #2
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
 80024a6:	2302      	movs	r3, #2
 80024a8:	623b      	str	r3, [r7, #32]
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80024b2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d102      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80024c8:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	e007      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80024ce:	2302      	movs	r3, #2
 80024d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2202      	movs	r2, #2
 80024e0:	613a      	str	r2, [r7, #16]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	fa92 f2a2 	rbit	r2, r2
 80024e8:	60fa      	str	r2, [r7, #12]
  return(result);
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	fab2 f282 	clz	r2, r2
 80024f0:	b252      	sxtb	r2, r2
 80024f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f6:	b252      	sxtb	r2, r2
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	f002 021f 	and.w	r2, r2, #31
 80024fe:	2101      	movs	r1, #1
 8002500:	fa01 f202 	lsl.w	r2, r1, r2
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0bc      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800250a:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4927      	ldr	r1, [pc, #156]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002518:	4313      	orrs	r3, r2
 800251a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800251c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	4a22      	ldr	r2, [pc, #136]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800252a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f023 0203 	bic.w	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	491a      	ldr	r1, [pc, #104]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800254a:	4313      	orrs	r3, r2
 800254c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f023 0210 	bic.w	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	4913      	ldr	r1, [pc, #76]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002568:	4313      	orrs	r3, r2
 800256a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	490b      	ldr	r1, [pc, #44]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002586:	4313      	orrs	r3, r2
 8002588:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	4904      	ldr	r1, [pc, #16]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3748      	adds	r7, #72	; 0x48
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	10908100 	.word	0x10908100

080025c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e043      	b.n	800265a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f003 f964 	bl	80058b4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f82d 	bl	8002664 <UART_SetConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e022      	b.n	800265a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f987 	bl	8002930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002630:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002640:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fa0e 	bl	8002a74 <UART_CheckIdleState>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002670:	2310      	movs	r3, #16
 8002672:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002674:	2300      	movs	r3, #0
 8002676:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002678:	2300      	movs	r3, #0
 800267a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	4b9f      	ldr	r3, [pc, #636]	; (800291c <UART_SetConfig+0x2b8>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	68f9      	ldr	r1, [r7, #12]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	430a      	orrs	r2, r1
 80026e0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a8e      	ldr	r2, [pc, #568]	; (8002920 <UART_SetConfig+0x2bc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d121      	bne.n	8002730 <UART_SetConfig+0xcc>
 80026ec:	4b8d      	ldr	r3, [pc, #564]	; (8002924 <UART_SetConfig+0x2c0>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d817      	bhi.n	8002728 <UART_SetConfig+0xc4>
 80026f8:	a201      	add	r2, pc, #4	; (adr r2, 8002700 <UART_SetConfig+0x9c>)
 80026fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fe:	bf00      	nop
 8002700:	08002711 	.word	0x08002711
 8002704:	0800271d 	.word	0x0800271d
 8002708:	08002723 	.word	0x08002723
 800270c:	08002717 	.word	0x08002717
 8002710:	2300      	movs	r3, #0
 8002712:	75fb      	strb	r3, [r7, #23]
 8002714:	e01e      	b.n	8002754 <UART_SetConfig+0xf0>
 8002716:	2302      	movs	r3, #2
 8002718:	75fb      	strb	r3, [r7, #23]
 800271a:	e01b      	b.n	8002754 <UART_SetConfig+0xf0>
 800271c:	2304      	movs	r3, #4
 800271e:	75fb      	strb	r3, [r7, #23]
 8002720:	e018      	b.n	8002754 <UART_SetConfig+0xf0>
 8002722:	2308      	movs	r3, #8
 8002724:	75fb      	strb	r3, [r7, #23]
 8002726:	e015      	b.n	8002754 <UART_SetConfig+0xf0>
 8002728:	2310      	movs	r3, #16
 800272a:	75fb      	strb	r3, [r7, #23]
 800272c:	bf00      	nop
 800272e:	e011      	b.n	8002754 <UART_SetConfig+0xf0>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a7c      	ldr	r2, [pc, #496]	; (8002928 <UART_SetConfig+0x2c4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d102      	bne.n	8002740 <UART_SetConfig+0xdc>
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
 800273e:	e009      	b.n	8002754 <UART_SetConfig+0xf0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a79      	ldr	r2, [pc, #484]	; (800292c <UART_SetConfig+0x2c8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d102      	bne.n	8002750 <UART_SetConfig+0xec>
 800274a:	2300      	movs	r3, #0
 800274c:	75fb      	strb	r3, [r7, #23]
 800274e:	e001      	b.n	8002754 <UART_SetConfig+0xf0>
 8002750:	2310      	movs	r3, #16
 8002752:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800275c:	d16f      	bne.n	800283e <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d857      	bhi.n	8002814 <UART_SetConfig+0x1b0>
 8002764:	a201      	add	r2, pc, #4	; (adr r2, 800276c <UART_SetConfig+0x108>)
 8002766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276a:	bf00      	nop
 800276c:	08002791 	.word	0x08002791
 8002770:	080027ad 	.word	0x080027ad
 8002774:	080027c9 	.word	0x080027c9
 8002778:	08002815 	.word	0x08002815
 800277c:	080027e3 	.word	0x080027e3
 8002780:	08002815 	.word	0x08002815
 8002784:	08002815 	.word	0x08002815
 8002788:	08002815 	.word	0x08002815
 800278c:	080027ff 	.word	0x080027ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002790:	f7ff fdac 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8002794:	4603      	mov	r3, r0
 8002796:	005a      	lsls	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	441a      	add	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	82bb      	strh	r3, [r7, #20]
        break;
 80027aa:	e036      	b.n	800281a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027ac:	f7ff fdc0 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 80027b0:	4603      	mov	r3, r0
 80027b2:	005a      	lsls	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	441a      	add	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	82bb      	strh	r3, [r7, #20]
        break;
 80027c6:	e028      	b.n	800281a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80027d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6852      	ldr	r2, [r2, #4]
 80027da:	fbb3 f3f2 	udiv	r3, r3, r2
 80027de:	82bb      	strh	r3, [r7, #20]
        break;
 80027e0:	e01b      	b.n	800281a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027e2:	f7ff fd0d 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80027e6:	4603      	mov	r3, r0
 80027e8:	005a      	lsls	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	441a      	add	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	82bb      	strh	r3, [r7, #20]
        break;
 80027fc:	e00d      	b.n	800281a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	085b      	lsrs	r3, r3, #1
 8002804:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	82bb      	strh	r3, [r7, #20]
        break;
 8002812:	e002      	b.n	800281a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	74fb      	strb	r3, [r7, #19]
        break;
 8002818:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800281a:	8abb      	ldrh	r3, [r7, #20]
 800281c:	f023 030f 	bic.w	r3, r3, #15
 8002820:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002822:	8abb      	ldrh	r3, [r7, #20]
 8002824:	105b      	asrs	r3, r3, #1
 8002826:	b29b      	uxth	r3, r3
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	b29a      	uxth	r2, r3
 800282e:	897b      	ldrh	r3, [r7, #10]
 8002830:	4313      	orrs	r3, r2
 8002832:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	897a      	ldrh	r2, [r7, #10]
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	e069      	b.n	8002912 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d863      	bhi.n	800290c <UART_SetConfig+0x2a8>
 8002844:	a201      	add	r2, pc, #4	; (adr r2, 800284c <UART_SetConfig+0x1e8>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	08002871 	.word	0x08002871
 8002850:	08002891 	.word	0x08002891
 8002854:	080028b1 	.word	0x080028b1
 8002858:	0800290d 	.word	0x0800290d
 800285c:	080028d1 	.word	0x080028d1
 8002860:	0800290d 	.word	0x0800290d
 8002864:	0800290d 	.word	0x0800290d
 8002868:	0800290d 	.word	0x0800290d
 800286c:	080028f1 	.word	0x080028f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002870:	f7ff fd3c 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8002874:	4602      	mov	r2, r0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	441a      	add	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	b29a      	uxth	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60da      	str	r2, [r3, #12]
        break;
 800288e:	e040      	b.n	8002912 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002890:	f7ff fd4e 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8002894:	4602      	mov	r2, r0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	441a      	add	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60da      	str	r2, [r3, #12]
        break;
 80028ae:	e030      	b.n	8002912 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80028ba:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6852      	ldr	r2, [r2, #4]
 80028c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60da      	str	r2, [r3, #12]
        break;
 80028ce:	e020      	b.n	8002912 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028d0:	f7ff fc96 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	441a      	add	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60da      	str	r2, [r3, #12]
        break;
 80028ee:	e010      	b.n	8002912 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60da      	str	r2, [r3, #12]
        break;
 800290a:	e002      	b.n	8002912 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	74fb      	strb	r3, [r7, #19]
        break;
 8002910:	bf00      	nop
    }
  }

  return ret;
 8002912:	7cfb      	ldrb	r3, [r7, #19]

}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	efff69f3 	.word	0xefff69f3
 8002920:	40013800 	.word	0x40013800
 8002924:	40021000 	.word	0x40021000
 8002928:	40004400 	.word	0x40004400
 800292c:	40004800 	.word	0x40004800

08002930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01a      	beq.n	8002a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a2e:	d10a      	bne.n	8002a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
  }
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002a86:	f7fe f8c7 	bl	8000c18 <HAL_GetTick>
 8002a8a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d10e      	bne.n	8002ab8 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f82c 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e022      	b.n	8002afe <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d10e      	bne.n	8002ae4 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ac6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f816 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e00c      	b.n	8002afe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b16:	e02c      	b.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b1e:	d028      	beq.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b26:	f7fe f877 	bl	8000c18 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d21d      	bcs.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e00f      	b.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69da      	ldr	r2, [r3, #28]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d0c3      	beq.n	8002b18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f023 020f 	bic.w	r2, r3, #15
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002bf6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bfa:	f7ff ffe1 	bl	8002bc0 <LL_ADC_IsEnabled>
 8002bfe:	4604      	mov	r4, r0
 8002c00:	4817      	ldr	r0, [pc, #92]	; (8002c60 <LL_ADC_CommonInit+0x78>)
 8002c02:	f7ff ffdd 	bl	8002bc0 <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4323      	orrs	r3, r4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d120      	bne.n	8002c50 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <LL_ADC_CommonInit+0x7c>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	6811      	ldr	r1, [r2, #0]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	6852      	ldr	r2, [r2, #4]
 8002c26:	4311      	orrs	r1, r2
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	6892      	ldr	r2, [r2, #8]
 8002c2c:	4311      	orrs	r1, r2
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	68d2      	ldr	r2, [r2, #12]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	e00b      	b.n	8002c54 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <LL_ADC_CommonInit+0x7c>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	e001      	b.n	8002c54 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd90      	pop	{r4, r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	50000100 	.word	0x50000100
 8002c64:	fffc30e0 	.word	0xfffc30e0

08002c68 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ffa2 	bl	8002bc0 <LL_ADC_IsEnabled>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d111      	bne.n	8002ca6 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c8a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	6811      	ldr	r1, [r2, #0]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	6852      	ldr	r2, [r2, #4]
 8002c96:	4311      	orrs	r1, r2
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	6892      	ldr	r2, [r2, #8]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]
 8002ca4:	e001      	b.n	8002caa <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ff7c 	bl	8002bc0 <LL_ADC_IsEnabled>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d132      	bne.n	8002d34 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <LL_ADC_REG_Init+0x90>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	6811      	ldr	r1, [r2, #0]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6892      	ldr	r2, [r2, #8]
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	68d2      	ldr	r2, [r2, #12]
 8002cec:	4311      	orrs	r1, r2
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	6912      	ldr	r2, [r2, #16]
 8002cf2:	4311      	orrs	r1, r2
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	6952      	ldr	r2, [r2, #20]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	e011      	b.n	8002d26 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <LL_ADC_REG_Init+0x90>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	6811      	ldr	r1, [r2, #0]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	68d2      	ldr	r2, [r2, #12]
 8002d12:	4311      	orrs	r1, r2
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	6912      	ldr	r2, [r2, #16]
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	6952      	ldr	r2, [r2, #20]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ff34 	bl	8002b9a <LL_ADC_REG_SetSequencerLength>
 8002d32:	e001      	b.n	8002d38 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	fff0c03c 	.word	0xfff0c03c

08002d48 <LL_ADC_INJ_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff32 	bl	8002bc0 <LL_ADC_IsEnabled>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d126      	bne.n	8002db0 <LL_ADC_INJ_Init+0x68>
    /*    - Set ADC group injected sequencer discontinuous mode               */
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00c      	beq.n	8002d84 <LL_ADC_INJ_Init+0x3c>
    {
      MODIFY_REG(ADCx->CFGR,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f023 7204 	bic.w	r2, r3, #34603008	; 0x2100000
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6899      	ldr	r1, [r3, #8]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	e008      	b.n	8002d96 <LL_ADC_INJ_Init+0x4e>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f023 7204 	bic.w	r2, r3, #34603008	; 0x2100000
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60da      	str	r2, [r3, #12]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->JSQR,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6819      	ldr	r1, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	430b      	orrs	r3, r1
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	64da      	str	r2, [r3, #76]	; 0x4c
 8002dae:	e001      	b.n	8002db4 <LL_ADC_INJ_Init+0x6c>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b089      	sub	sp, #36	; 0x24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	613b      	str	r3, [r7, #16]
  return(result);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2103      	movs	r1, #3
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	401a      	ands	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	431a      	orrs	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	601a      	str	r2, [r3, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	3724      	adds	r7, #36	; 0x24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	431a      	orrs	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	605a      	str	r2, [r3, #4]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	; 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	613b      	str	r3, [r7, #16]
  return(result);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	2103      	movs	r1, #3
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	401a      	ands	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002e96:	bf00      	nop
 8002e98:	3724      	adds	r7, #36	; 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b089      	sub	sp, #36	; 0x24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	613b      	str	r3, [r7, #16]
  return(result);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2103      	movs	r1, #3
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	401a      	ands	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	61bb      	str	r3, [r7, #24]
  return(result);
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	431a      	orrs	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	60da      	str	r2, [r3, #12]
}
 8002ef0:	bf00      	nop
 8002ef2:	3724      	adds	r7, #36	; 0x24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	; 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a1a      	ldr	r2, [r3, #32]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	613b      	str	r3, [r7, #16]
  return(result);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	210f      	movs	r1, #15
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	401a      	ands	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002f4a:	bf00      	nop
 8002f4c:	3724      	adds	r7, #36	; 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b089      	sub	sp, #36	; 0x24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	613b      	str	r3, [r7, #16]
  return(result);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	210f      	movs	r1, #15
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	401a      	ands	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002fa8:	bf00      	nop
 8002faa:	3724      	adds	r7, #36	; 0x24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	613b      	str	r3, [r7, #16]
  return(result);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002fdc:	e048      	b.n	8003070 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d03a      	beq.n	800306a <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	69b9      	ldr	r1, [r7, #24]
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff fede 	bl	8002dbe <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d003      	beq.n	8003012 <LL_GPIO_Init+0x5e>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d106      	bne.n	8003020 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	461a      	mov	r2, r3
 8003018:	69b9      	ldr	r1, [r7, #24]
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ff14 	bl	8002e48 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	461a      	mov	r2, r3
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff3a 	bl	8002ea2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d119      	bne.n	800306a <LL_GPIO_Init+0xb6>
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	60bb      	str	r3, [r7, #8]
  return(result);
 8003042:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	2b07      	cmp	r3, #7
 800304a:	d807      	bhi.n	800305c <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	461a      	mov	r2, r3
 8003052:	69b9      	ldr	r1, [r7, #24]
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff51 	bl	8002efc <LL_GPIO_SetAFPin_0_7>
 800305a:	e006      	b.n	800306a <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	461a      	mov	r2, r3
 8003062:	69b9      	ldr	r1, [r7, #24]
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff76 	bl	8002f56 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	fa22 f303 	lsr.w	r3, r2, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1af      	bne.n	8002fde <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d003      	beq.n	800308e <LL_GPIO_Init+0xda>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d107      	bne.n	800309e <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6819      	ldr	r1, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	461a      	mov	r2, r3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff febd 	bl	8002e18 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	615a      	str	r2, [r3, #20]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a2f      	ldr	r2, [pc, #188]	; (8003298 <LL_TIM_Init+0xd4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d007      	beq.n	80031f0 <LL_TIM_Init+0x2c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e6:	d003      	beq.n	80031f0 <LL_TIM_Init+0x2c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a2c      	ldr	r2, [pc, #176]	; (800329c <LL_TIM_Init+0xd8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d106      	bne.n	80031fe <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a25      	ldr	r2, [pc, #148]	; (8003298 <LL_TIM_Init+0xd4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <LL_TIM_Init+0x6a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320c:	d00f      	beq.n	800322e <LL_TIM_Init+0x6a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a22      	ldr	r2, [pc, #136]	; (800329c <LL_TIM_Init+0xd8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00b      	beq.n	800322e <LL_TIM_Init+0x6a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <LL_TIM_Init+0xdc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <LL_TIM_Init+0x6a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <LL_TIM_Init+0xe0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <LL_TIM_Init+0x6a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <LL_TIM_Init+0xe4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d106      	bne.n	800323c <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	4619      	mov	r1, r3
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff3b 	bl	80030c4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff27 	bl	80030a8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <LL_TIM_Init+0xd4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00b      	beq.n	800327a <LL_TIM_Init+0xb6>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <LL_TIM_Init+0xdc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d007      	beq.n	800327a <LL_TIM_Init+0xb6>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <LL_TIM_Init+0xe0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d003      	beq.n	800327a <LL_TIM_Init+0xb6>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a0c      	ldr	r2, [pc, #48]	; (80032a8 <LL_TIM_Init+0xe4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d105      	bne.n	8003286 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	7c1b      	ldrb	r3, [r3, #16]
 800327e:	4619      	mov	r1, r3
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff ff2d 	bl	80030e0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ff8c 	bl	80031a4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40012c00 	.word	0x40012c00
 800329c:	40000400 	.word	0x40000400
 80032a0:	40014000 	.word	0x40014000
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800

080032ac <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c2:	d01f      	beq.n	8003304 <LL_TIM_OC_Init+0x58>
 80032c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c8:	d804      	bhi.n	80032d4 <LL_TIM_OC_Init+0x28>
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00c      	beq.n	80032e8 <LL_TIM_OC_Init+0x3c>
 80032ce:	2b10      	cmp	r3, #16
 80032d0:	d011      	beq.n	80032f6 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80032d2:	e033      	b.n	800333c <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d022      	beq.n	8003320 <LL_TIM_OC_Init+0x74>
 80032da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032de:	d026      	beq.n	800332e <LL_TIM_OC_Init+0x82>
 80032e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e4:	d015      	beq.n	8003312 <LL_TIM_OC_Init+0x66>
      break;
 80032e6:	e029      	b.n	800333c <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f89c 	bl	8003428 <OC1Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	75fb      	strb	r3, [r7, #23]
      break;
 80032f4:	e022      	b.n	800333c <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f915 	bl	8003528 <OC2Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	75fb      	strb	r3, [r7, #23]
      break;
 8003302:	e01b      	b.n	800333c <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f992 	bl	8003630 <OC3Config>
 800330c:	4603      	mov	r3, r0
 800330e:	75fb      	strb	r3, [r7, #23]
      break;
 8003310:	e014      	b.n	800333c <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fa0f 	bl	8003738 <OC4Config>
 800331a:	4603      	mov	r3, r0
 800331c:	75fb      	strb	r3, [r7, #23]
      break;
 800331e:	e00d      	b.n	800333c <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fa74 	bl	8003810 <OC5Config>
 8003328:	4603      	mov	r3, r0
 800332a:	75fb      	strb	r3, [r7, #23]
      break;
 800332c:	e006      	b.n	800333c <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 facf 	bl	80038d4 <OC6Config>
 8003336:	4603      	mov	r3, r0
 8003338:	75fb      	strb	r3, [r7, #23]
      break;
 800333a:	bf00      	nop
  }

  return result;
 800333c:	7dfb      	ldrb	r3, [r7, #23]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	7b12      	ldrb	r2, [r2, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	89d2      	ldrh	r2, [r2, #14]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a16      	ldr	r2, [pc, #88]	; (8003424 <LL_TIM_BDTR_Init+0xdc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d106      	bne.n	80033dc <LL_TIM_BDTR_Init+0x94>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BKF */
#if defined(TIM_BDTR_BK2E)

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a11      	ldr	r2, [pc, #68]	; (8003424 <LL_TIM_BDTR_Init+0xdc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d114      	bne.n	800340e <LL_TIM_BDTR_Init+0xc6>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40012c00 	.word	0x40012c00

08003428 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f023 0201 	bic.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f023 0202 	bic.w	r2, r3, #2
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0201 	bic.w	r2, r3, #1
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a20      	ldr	r2, [pc, #128]	; (8003518 <OC1Config+0xf0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00b      	beq.n	80034b2 <OC1Config+0x8a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <OC1Config+0xf4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <OC1Config+0x8a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <OC1Config+0xf8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <OC1Config+0x8a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <OC1Config+0xfc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d11e      	bne.n	80034f0 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f023 0208 	bic.w	r2, r3, #8
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 0204 	bic.w	r2, r3, #4
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fdfa 	bl	80030fc <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40014000 	.word	0x40014000
 8003520:	40014400 	.word	0x40014400
 8003524:	40014800 	.word	0x40014800

08003528 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 0210 	bic.w	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	0212      	lsls	r2, r2, #8
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f023 0220 	bic.w	r2, r3, #32
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f023 0210 	bic.w	r2, r3, #16
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a21      	ldr	r2, [pc, #132]	; (8003620 <OC2Config+0xf8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00b      	beq.n	80035b8 <OC2Config+0x90>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a20      	ldr	r2, [pc, #128]	; (8003624 <OC2Config+0xfc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d007      	beq.n	80035b8 <OC2Config+0x90>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <OC2Config+0x100>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <OC2Config+0x90>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a1e      	ldr	r2, [pc, #120]	; (800362c <OC2Config+0x104>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d11f      	bne.n	80035f8 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	019b      	lsls	r3, r3, #6
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	019b      	lsls	r3, r3, #6
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fd84 	bl	8003118 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40014000 	.word	0x40014000
 8003628:	40014400 	.word	0x40014400
 800362c:	40014800 	.word	0x40014800

08003630 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a21      	ldr	r2, [pc, #132]	; (8003728 <OC3Config+0xf8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00b      	beq.n	80036be <OC3Config+0x8e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a20      	ldr	r2, [pc, #128]	; (800372c <OC3Config+0xfc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <OC3Config+0x8e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a1f      	ldr	r2, [pc, #124]	; (8003730 <OC3Config+0x100>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <OC3Config+0x8e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a1e      	ldr	r2, [pc, #120]	; (8003734 <OC3Config+0x104>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d11f      	bne.n	80036fe <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	029b      	lsls	r3, r3, #10
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	029b      	lsls	r3, r3, #10
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	015b      	lsls	r3, r3, #5
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	4619      	mov	r1, r3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff fd0f 	bl	8003134 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40012c00 	.word	0x40012c00
 800372c:	40014000 	.word	0x40014000
 8003730:	40014400 	.word	0x40014400
 8003734:	40014800 	.word	0x40014800

08003738 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003772:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	0212      	lsls	r2, r2, #8
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	031b      	lsls	r3, r3, #12
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	031b      	lsls	r3, r3, #12
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a15      	ldr	r2, [pc, #84]	; (8003800 <OC4Config+0xc8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00b      	beq.n	80037c8 <OC4Config+0x90>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a14      	ldr	r2, [pc, #80]	; (8003804 <OC4Config+0xcc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d007      	beq.n	80037c8 <OC4Config+0x90>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a13      	ldr	r2, [pc, #76]	; (8003808 <OC4Config+0xd0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <OC4Config+0x90>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a12      	ldr	r2, [pc, #72]	; (800380c <OC4Config+0xd4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d107      	bne.n	80037d8 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	019b      	lsls	r3, r3, #6
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fcb0 	bl	8003150 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40014000 	.word	0x40014000
 8003808:	40014400 	.word	0x40014400
 800380c:	40014800 	.word	0x40014800

08003810 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	041b      	lsls	r3, r3, #16
 8003858:	4313      	orrs	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	041b      	lsls	r3, r3, #16
 8003868:	4313      	orrs	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <OC5Config+0xb4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00b      	beq.n	800388c <OC5Config+0x7c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <OC5Config+0xb8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d007      	beq.n	800388c <OC5Config+0x7c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a13      	ldr	r2, [pc, #76]	; (80038cc <OC5Config+0xbc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <OC5Config+0x7c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a12      	ldr	r2, [pc, #72]	; (80038d0 <OC5Config+0xc0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d109      	bne.n	80038a0 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fc5d 	bl	800316c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40014000 	.word	0x40014000
 80038cc:	40014400 	.word	0x40014400
 80038d0:	40014800 	.word	0x40014800

080038d4 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	0212      	lsls	r2, r2, #8
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	051b      	lsls	r3, r3, #20
 800391e:	4313      	orrs	r3, r2
 8003920:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	051b      	lsls	r3, r3, #20
 800392e:	4313      	orrs	r3, r2
 8003930:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <OC6Config+0xb4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00b      	beq.n	8003952 <OC6Config+0x7e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a13      	ldr	r2, [pc, #76]	; (800398c <OC6Config+0xb8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <OC6Config+0x7e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a12      	ldr	r2, [pc, #72]	; (8003990 <OC6Config+0xbc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d003      	beq.n	8003952 <OC6Config+0x7e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a11      	ldr	r2, [pc, #68]	; (8003994 <OC6Config+0xc0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d109      	bne.n	8003966 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	029b      	lsls	r3, r3, #10
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4619      	mov	r1, r3
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fc08 	bl	8003188 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40014000 	.word	0x40014000
 8003990:	40014400 	.word	0x40014400
 8003994:	40014800 	.word	0x40014800

08003998 <LL_TIM_EnableCounter>:
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f043 0201 	orr.w	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	601a      	str	r2, [r3, #0]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <LL_TIM_CC_EnableChannel>:
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1a      	ldr	r2, [r3, #32]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <LL_TIM_EnableAllOutputs>:
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <_ZN3PWM6setTIMEP11TIM_TypeDef>:

#include "PWM.hpp"
#include "stm32f3xx_hal.h"
#include "tim.h"

void PWM::setTIM(TIM_TypeDef* pTIMx){
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	601a      	str	r2, [r3, #0]
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	605a      	str	r2, [r3, #4]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <_ZN3PWM4InitEv>:

void PWM::Init(){
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]

	if(mCH==0){//error check
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d100      	bne.n	8003a44 <_ZN3PWM4InitEv+0x12>
		while(1){}
 8003a42:	e7fe      	b.n	8003a42 <_ZN3PWM4InitEv+0x10>
	}

	//mREG Init
	if (mCH == 1){
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d105      	bne.n	8003a58 <_ZN3PWM4InitEv+0x26>
		mREG=&(mTIMx->CCR1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	609a      	str	r2, [r3, #8]
	}
	if (mCH == 2){
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d105      	bne.n	8003a6c <_ZN3PWM4InitEv+0x3a>
		mREG=&(mTIMx->CCR2);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
	}
	if (mCH == 3){
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d105      	bne.n	8003a80 <_ZN3PWM4InitEv+0x4e>
		mREG=&(mTIMx->CCR3);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
	}
	if (mCH == 4){
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d105      	bne.n	8003a94 <_ZN3PWM4InitEv+0x62>
		mREG=&(mTIMx->CCR3);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	609a      	str	r2, [r3, #8]
	}

	if(mREG==NULL){//error check
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d100      	bne.n	8003a9e <_ZN3PWM4InitEv+0x6c>
		while(1){}
 8003a9c:	e7fe      	b.n	8003a9c <_ZN3PWM4InitEv+0x6a>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d100      	bne.n	8003aa8 <_ZN3PWM4InitEv+0x76>
		while(1){}
 8003aa6:	e7fe      	b.n	8003aa6 <_ZN3PWM4InitEv+0x74>
	}
	if (mCH == 1){
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d105      	bne.n	8003abc <_ZN3PWM4InitEv+0x8a>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff7e 	bl	80039b8 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d105      	bne.n	8003ad0 <_ZN3PWM4InitEv+0x9e>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2110      	movs	r1, #16
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ff74 	bl	80039b8 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d106      	bne.n	8003ae6 <_ZN3PWM4InitEv+0xb4>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff ff69 	bl	80039b8 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d106      	bne.n	8003afc <_ZN3PWM4InitEv+0xca>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ff5e 	bl	80039b8 <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff49 	bl	8003998 <LL_TIM_EnableCounter>
	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff ff65 	bl	80039da <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <_ZN3PWM4DutyEi>:

void PWM::Duty(int pDuty){
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
	WRITE_REG(*mREG, pDuty);
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	601a      	str	r2, [r3, #0]
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <LL_TIM_EnableCounter>:
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f043 0201 	orr.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	601a      	str	r2, [r3, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <LL_TIM_SetRepetitionCounter>:
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <LL_TIM_CC_EnableChannel>:
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1a      	ldr	r2, [r3, #32]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	621a      	str	r2, [r3, #32]
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <LL_ADC_INJ_ConfigQueueContext>:
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(ADCx->JSQR           ,
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ba6:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <LL_ADC_INJ_ConfigQueueContext+0x6c>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	2a00      	cmp	r2, #0
 8003bae:	bf14      	ite	ne
 8003bb0:	2201      	movne	r2, #1
 8003bb2:	2200      	moveq	r2, #0
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	fb02 f101 	mul.w	r1, r2, r1
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	4311      	orrs	r1, r2
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003bc8:	4311      	orrs	r1, r2
 8003bca:	6a3a      	ldr	r2, [r7, #32]
 8003bcc:	0992      	lsrs	r2, r2, #6
 8003bce:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
 8003bd2:	4311      	orrs	r1, r2
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	0b12      	lsrs	r2, r2, #12
 8003bd8:	f402 22f8 	and.w	r2, r2, #507904	; 0x7c000
 8003bdc:	4311      	orrs	r1, r2
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	0c92      	lsrs	r2, r2, #18
 8003be2:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8003be6:	4311      	orrs	r1, r2
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	431a      	orrs	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	82082000 	.word	0x82082000

08003c04 <LL_ADC_EnableInternalRegulator>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <LL_ADC_Enable>:
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c4c:	f043 0201 	orr.w	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	609a      	str	r2, [r3, #8]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003c72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_ADC_INJ_StartConversion>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cce:	f043 0208 	orr.w	r2, r3, #8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTART);
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cf2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cf6:	f043 0220 	orr.w	r2, r3, #32
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_ADC_INJ_IsStopConversionOngoing>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_IsStopConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no command of conversion stop is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsStopConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_JADSTP) == (ADC_CR_JADSTP));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	bf0c      	ite	eq
 8003d1e:	2301      	moveq	r3, #1
 8003d20:	2300      	movne	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <LL_ADC_EnableIT_JEOS>:
  * @rmtoll IER      JEOSIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	605a      	str	r2, [r3, #4]
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <LL_ADC_DisableIT_JQOVF>:
  * @rmtoll IER      JQOVFIE        LL_ADC_DisableIT_JQOVF
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JQOVF(ADC_TypeDef *ADCx)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JQOVF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	605a      	str	r2, [r3, #4]
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <_ZN3PWMC1Ev>:


#ifndef PWM_HPP_
#define PWM_HPP_

class PWM {
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <CPP_Wrapper>:
void HighFreqTask(void);

void vectorInit(std::vector<int> *pVector);//プロトタイプ宣言
void ADCReInit(void);

void CPP_Wrapper(void){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b090      	sub	sp, #64	; 0x40
 8003dd0:	af00      	add	r7, sp, #0

	std::vector<int> num;
 8003dd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f9ba 	bl	8004150 <_ZNSt6vectorIiSaIiEEC1Ev>
	vectorInit(&num);
 8003ddc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 f8c9 	bl	8003f78 <_Z10vectorInitPSt6vectorIiSaIiEE>

	PWM PWM_Object1;
 8003de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ffdf 	bl	8003dae <_ZN3PWMC1Ev>
	PWM PWM_Object2;
 8003df0:	f107 0318 	add.w	r3, r7, #24
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ffda 	bl	8003dae <_ZN3PWMC1Ev>
	PWM PWM_Object3;
 8003dfa:	f107 030c 	add.w	r3, r7, #12
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff ffd5 	bl	8003dae <_ZN3PWMC1Ev>
	PWM PWM_Object4;
 8003e04:	463b      	mov	r3, r7
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff ffd1 	bl	8003dae <_ZN3PWMC1Ev>

	PWM_Object1.setTIM(TIM1);
 8003e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e10:	4957      	ldr	r1, [pc, #348]	; (8003f70 <CPP_Wrapper+0x1a4>)
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fdf1 	bl	80039fa <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 8003e18:	f107 0318 	add.w	r3, r7, #24
 8003e1c:	4954      	ldr	r1, [pc, #336]	; (8003f70 <CPP_Wrapper+0x1a4>)
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fdeb 	bl	80039fa <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 8003e24:	f107 030c 	add.w	r3, r7, #12
 8003e28:	4951      	ldr	r1, [pc, #324]	; (8003f70 <CPP_Wrapper+0x1a4>)
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fde5 	bl	80039fa <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 8003e30:	463b      	mov	r3, r7
 8003e32:	494f      	ldr	r1, [pc, #316]	; (8003f70 <CPP_Wrapper+0x1a4>)
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fde0 	bl	80039fa <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 8003e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e3e:	2101      	movs	r1, #1
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fde8 	bl	8003a16 <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 8003e46:	f107 0318 	add.w	r3, r7, #24
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fde2 	bl	8003a16 <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 8003e52:	f107 030c 	add.w	r3, r7, #12
 8003e56:	2103      	movs	r1, #3
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fddc 	bl	8003a16 <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 8003e5e:	463b      	mov	r3, r7
 8003e60:	2104      	movs	r1, #4
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fdd7 	bl	8003a16 <_ZN3PWM5setCHEi>

	PWM_Object1.Init();
 8003e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fde0 	bl	8003a32 <_ZN3PWM4InitEv>
	PWM_Object2.Init();
 8003e72:	f107 0318 	add.w	r3, r7, #24
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fddb 	bl	8003a32 <_ZN3PWM4InitEv>
	PWM_Object3.Init();
 8003e7c:	f107 030c 	add.w	r3, r7, #12
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fdd6 	bl	8003a32 <_ZN3PWM4InitEv>
	PWM_Object4.Init();
 8003e86:	463b      	mov	r3, r7
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fdd2 	bl	8003a32 <_ZN3PWM4InitEv>


	PWM_Object1.Duty(60000);
 8003e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e92:	f64e 2160 	movw	r1, #60000	; 0xea60
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fe3e 	bl	8003b18 <_ZN3PWM4DutyEi>
	PWM_Object2.Duty(60000);
 8003e9c:	f107 0318 	add.w	r3, r7, #24
 8003ea0:	f64e 2160 	movw	r1, #60000	; 0xea60
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fe37 	bl	8003b18 <_ZN3PWM4DutyEi>
	PWM_Object3.Duty(60000);
 8003eaa:	f107 030c 	add.w	r3, r7, #12
 8003eae:	f64e 2160 	movw	r1, #60000	; 0xea60
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff fe30 	bl	8003b18 <_ZN3PWM4DutyEi>
	PWM_Object4.Duty(60000);
 8003eb8:	463b      	mov	r3, r7
 8003eba:	f64e 2160 	movw	r1, #60000	; 0xea60
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fe2a 	bl	8003b18 <_ZN3PWM4DutyEi>
	ADCReInit();
 8003ec4:	f000 f8c4 	bl	8004050 <_Z9ADCReInitv>


	while(1){
		  for(int i=0;i<600;i++){
 8003ec8:	2300      	movs	r3, #0
 8003eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ece:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003ed2:	daf9      	bge.n	8003ec8 <CPP_Wrapper+0xfc>
			  HAL_Delay(1);
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	f7fc feab 	bl	8000c30 <HAL_Delay>
			  PWM_Object1.Duty(num[i]);
 8003eda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003edc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f941 	bl	800416a <_ZNSt6vectorIiSaIiEEixEj>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff fe10 	bl	8003b18 <_ZN3PWM4DutyEi>
			  PWM_Object2.Duty(num[(i+200)%600]);
 8003ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efa:	33c8      	adds	r3, #200	; 0xc8
 8003efc:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <CPP_Wrapper+0x1a8>)
 8003efe:	fb82 1203 	smull	r1, r2, r2, r3
 8003f02:	1191      	asrs	r1, r2, #6
 8003f04:	17da      	asrs	r2, r3, #31
 8003f06:	1a8a      	subs	r2, r1, r2
 8003f08:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003f0c:	fb01 f202 	mul.w	r2, r1, r2
 8003f10:	1a9a      	subs	r2, r3, r2
 8003f12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f926 	bl	800416a <_ZNSt6vectorIiSaIiEEixEj>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f107 0318 	add.w	r3, r7, #24
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fdf5 	bl	8003b18 <_ZN3PWM4DutyEi>
			  PWM_Object3.Duty(num[(i+400)%600]);
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f30:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003f34:	4a0f      	ldr	r2, [pc, #60]	; (8003f74 <CPP_Wrapper+0x1a8>)
 8003f36:	fb82 1203 	smull	r1, r2, r2, r3
 8003f3a:	1191      	asrs	r1, r2, #6
 8003f3c:	17da      	asrs	r2, r3, #31
 8003f3e:	1a8a      	subs	r2, r1, r2
 8003f40:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003f44:	fb01 f202 	mul.w	r2, r1, r2
 8003f48:	1a9a      	subs	r2, r3, r2
 8003f4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 f90a 	bl	800416a <_ZNSt6vectorIiSaIiEEixEj>
 8003f56:	4603      	mov	r3, r0
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	f107 030c 	add.w	r3, r7, #12
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fdd9 	bl	8003b18 <_ZN3PWM4DutyEi>
		  for(int i=0;i<600;i++){
 8003f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f68:	3301      	adds	r3, #1
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f6c:	e7ae      	b.n	8003ecc <CPP_Wrapper+0x100>
 8003f6e:	bf00      	nop
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	1b4e81b5 	.word	0x1b4e81b5

08003f78 <_Z10vectorInitPSt6vectorIiSaIiEE>:
}




void vectorInit(std::vector<int> *pVector){
 8003f78:	b5b0      	push	{r4, r5, r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	int lange;
	lange = 600;
 8003f80:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003f84:	61bb      	str	r3, [r7, #24]
	int count = 65535;
 8003f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f8a:	617b      	str	r3, [r7, #20]
	for(int i=0;i<lange;i++){
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	da53      	bge.n	8004040 <_Z10vectorInitPSt6vectorIiSaIiEE+0xc8>
		float fsinval = sin(i*2*M_PI/(float)lange);
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc fa65 	bl	800046c <__aeabi_i2d>
 8003fa2:	a329      	add	r3, pc, #164	; (adr r3, 8004048 <_Z10vectorInitPSt6vectorIiSaIiEE+0xd0>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f7fc faca 	bl	8000540 <__aeabi_dmul>
 8003fac:	4603      	mov	r3, r0
 8003fae:	460c      	mov	r4, r1
 8003fb0:	4625      	mov	r5, r4
 8003fb2:	461c      	mov	r4, r3
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fbe:	ee17 0a90 	vmov	r0, s15
 8003fc2:	f7fc fa65 	bl	8000490 <__aeabi_f2d>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4620      	mov	r0, r4
 8003fcc:	4629      	mov	r1, r5
 8003fce:	f7fc fbe1 	bl	8000794 <__aeabi_ddiv>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	ec44 3b17 	vmov	d7, r3, r4
 8003fda:	eeb0 0a47 	vmov.f32	s0, s14
 8003fde:	eef0 0a67 	vmov.f32	s1, s15
 8003fe2:	f001 fcf5 	bl	80059d0 <sin>
 8003fe6:	ec54 3b10 	vmov	r3, r4, d0
 8003fea:	4618      	mov	r0, r3
 8003fec:	4621      	mov	r1, r4
 8003fee:	f7fc fd69 	bl	8000ac4 <__aeabi_d2f>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	613b      	str	r3, [r7, #16]
		int val = count/2 * fsinval + count/2;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	0fda      	lsrs	r2, r3, #31
 8003ffa:	4413      	add	r3, r2
 8003ffc:	105b      	asrs	r3, r3, #1
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004006:	edd7 7a04 	vldr	s15, [r7, #16]
 800400a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	0fda      	lsrs	r2, r3, #31
 8004012:	4413      	add	r3, r2
 8004014:	105b      	asrs	r3, r3, #1
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004026:	ee17 3a90 	vmov	r3, s15
 800402a:	60fb      	str	r3, [r7, #12]
		pVector->push_back(val);
 800402c:	f107 030c 	add.w	r3, r7, #12
 8004030:	4619      	mov	r1, r3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8a9 	bl	800418a <_ZNSt6vectorIiSaIiEE9push_backERKi>
	for(int i=0;i<lange;i++){
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	3301      	adds	r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e7a7      	b.n	8003f90 <_Z10vectorInitPSt6vectorIiSaIiEE+0x18>
	}
}
 8004040:	bf00      	nop
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bdb0      	pop	{r4, r5, r7, pc}
 8004048:	54442d18 	.word	0x54442d18
 800404c:	400921fb 	.word	0x400921fb

08004050 <_Z9ADCReInitv>:

void ADCReInit(void){
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af04      	add	r7, sp, #16
	// ADC2 Initialization
	  WRITE_REG(ADC1->DIFSEL,0U); // LL_ADC_SetChannelSingleDiffが未定義動作を起こすので、レジスタに直接書き込む
 8004056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800405a:	2200      	movs	r2, #0
 800405c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	  LL_ADC_EnableInternalRegulator(ADC1);
 8004060:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004064:	f7ff fdce 	bl	8003c04 <LL_ADC_EnableInternalRegulator>
	  HAL_Delay(10);
 8004068:	200a      	movs	r0, #10
 800406a:	f7fc fde1 	bl	8000c30 <HAL_Delay>
	  LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 800406e:	217f      	movs	r1, #127	; 0x7f
 8004070:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004074:	f7ff fdf4 	bl	8003c60 <LL_ADC_StartCalibration>
	  while (LL_ADC_IsCalibrationOnGoing(ADC1));
 8004078:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800407c:	f7ff fe09 	bl	8003c92 <LL_ADC_IsCalibrationOnGoing>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d000      	beq.n	8004092 <_Z9ADCReInitv+0x42>
 8004090:	e7f2      	b.n	8004078 <_Z9ADCReInitv+0x28>
	  LL_ADC_Enable(ADC1);
 8004092:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004096:	f7ff fdcf 	bl	8003c38 <LL_ADC_Enable>
	  while (!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 800409a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800409e:	f7ff fe47 	bl	8003d30 <LL_ADC_IsActiveFlag_ADRDY>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d000      	beq.n	80040b4 <_Z9ADCReInitv+0x64>
 80040b2:	e7f2      	b.n	800409a <_Z9ADCReInitv+0x4a>
	  // JSQRをクリア
	  LL_ADC_INJ_StopConversion(ADC1);
 80040b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040b8:	f7ff fe13 	bl	8003ce2 <LL_ADC_INJ_StopConversion>
	  while (LL_ADC_INJ_IsStopConversionOngoing(ADC1));
 80040bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040c0:	f7ff fe23 	bl	8003d0a <LL_ADC_INJ_IsStopConversionOngoing>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bf14      	ite	ne
 80040ca:	2301      	movne	r3, #1
 80040cc:	2300      	moveq	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d000      	beq.n	80040d6 <_Z9ADCReInitv+0x86>
 80040d4:	e7f2      	b.n	80040bc <_Z9ADCReInitv+0x6c>
	  // CubeMXが出力するコードが不適切なため、ADC2のJSQRを改めて設定する
	  LL_ADC_DisableIT_JQOVF(ADC1);
 80040d6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040da:	f7ff fe4c 	bl	8003d76 <LL_ADC_DisableIT_JQOVF>
	  LL_ADC_INJ_ConfigQueueContext(ADC1,
 80040de:	4b17      	ldr	r3, [pc, #92]	; (800413c <_Z9ADCReInitv+0xec>)
 80040e0:	9303      	str	r3, [sp, #12]
 80040e2:	4b17      	ldr	r3, [pc, #92]	; (8004140 <_Z9ADCReInitv+0xf0>)
 80040e4:	9302      	str	r3, [sp, #8]
 80040e6:	4b17      	ldr	r3, [pc, #92]	; (8004144 <_Z9ADCReInitv+0xf4>)
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	4b17      	ldr	r3, [pc, #92]	; (8004148 <_Z9ADCReInitv+0xf8>)
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2302      	movs	r3, #2
 80040f0:	2240      	movs	r2, #64	; 0x40
 80040f2:	2160      	movs	r1, #96	; 0x60
 80040f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040f8:	f7ff fd4c 	bl	8003b94 <LL_ADC_INJ_ConfigQueueContext>
	                                LL_ADC_CHANNEL_2,
	                                LL_ADC_CHANNEL_3,
	                                LL_ADC_CHANNEL_4);
	  //(ADCx, TriggerSource, ExternalTriggerEdge, SequencerNbRanks, Rank1_Channel, Rank2_Channel, Rank3_Channel, Rank4_Channel)
	  // Inject変換の外部トリガを許可
	  LL_ADC_INJ_StartConversion(ADC1);
 80040fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004100:	f7ff fddb 	bl	8003cba <LL_ADC_INJ_StartConversion>

	  // Enable ADC Interrupt
	  LL_ADC_EnableIT_JEOS(ADC1);
 8004104:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004108:	f7ff fe25 	bl	8003d56 <LL_ADC_EnableIT_JEOS>

	   // Set ADC Sampling Timing
//	   LL_TIM_OC_SetCompareCH4(TIM1, (uint32_t)(65530 - 90));

	    // Enable PWM Career
	    LL_TIM_EnableCounter(TIM1);
 800410c:	480f      	ldr	r0, [pc, #60]	; (800414c <_Z9ADCReInitv+0xfc>)
 800410e:	f7ff fd12 	bl	8003b36 <LL_TIM_EnableCounter>
	    LL_TIM_SetRepetitionCounter(TIM1,1);
 8004112:	2101      	movs	r1, #1
 8004114:	480d      	ldr	r0, [pc, #52]	; (800414c <_Z9ADCReInitv+0xfc>)
 8004116:	f7ff fd1e 	bl	8003b56 <LL_TIM_SetRepetitionCounter>

	    // Enable PWM Channels
	    LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 800411a:	2101      	movs	r1, #1
 800411c:	480b      	ldr	r0, [pc, #44]	; (800414c <_Z9ADCReInitv+0xfc>)
 800411e:	f7ff fd28 	bl	8003b72 <LL_TIM_CC_EnableChannel>
//	    LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
	    LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 8004122:	2110      	movs	r1, #16
 8004124:	4809      	ldr	r0, [pc, #36]	; (800414c <_Z9ADCReInitv+0xfc>)
 8004126:	f7ff fd24 	bl	8003b72 <LL_TIM_CC_EnableChannel>
//	    LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2N);
	    LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3);
 800412a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800412e:	4807      	ldr	r0, [pc, #28]	; (800414c <_Z9ADCReInitv+0xfc>)
 8004130:	f7ff fd1f 	bl	8003b72 <LL_TIM_CC_EnableChannel>
	    // Enable SPI Channel
	    //LL_SPI_Enable(SPI1);

	    // Enable EXTI Interrupt
	    //LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_3);
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	10c00010 	.word	0x10c00010
 8004140:	0c900008 	.word	0x0c900008
 8004144:	08600004 	.word	0x08600004
 8004148:	04300002 	.word	0x04300002
 800414c:	40012c00 	.word	0x40012c00

08004150 <_ZNSt6vectorIiSaIiEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f83a 	bl	80041d4 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <_ZNSt6vectorIiSaIiEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
      }
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <_ZNSt6vectorIiSaIiEE9push_backERKi>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	429a      	cmp	r2, r3
 800419e:	d00c      	beq.n	80041ba <_ZNSt6vectorIiSaIiEE9push_backERKi+0x30>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	4619      	mov	r1, r3
 80041aa:	f000 f844 	bl	8004236 <_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	1d1a      	adds	r2, r3, #4
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 80041b8:	e008      	b.n	80041cc <_ZNSt6vectorIiSaIiEE9push_backERKi+0x42>
	  _M_realloc_insert(end(), __x);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f84e 	bl	800425c <_ZNSt6vectorIiSaIiEE3endEv>
 80041c0:	4603      	mov	r3, r0
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f85a 	bl	8004280 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_>
      }
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>:
      _Vector_base()
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f8da 	bl	8004398 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f8e8 	bl	80043e8 <_ZSt8_DestroyIPiEvT_S1_>
    }
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff ffec 	bl	8004220 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f8d7 	bl	8004402 <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_>
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <_ZNSt6vectorIiSaIiEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	1d1a      	adds	r2, r3, #4
 8004268:	f107 030c 	add.w	r3, r7, #12
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f8df 	bl	8004432 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8004280:	b5b0      	push	{r4, r5, r7, lr}
 8004282:	b08a      	sub	sp, #40	; 0x28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800428c:	4a41      	ldr	r2, [pc, #260]	; (8004394 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_+0x114>)
 800428e:	2101      	movs	r1, #1
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f8de 	bl	8004452 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc>
 8004296:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f922 	bl	80044e2 <_ZNSt6vectorIiSaIiEE5beginEv>
 800429e:	4603      	mov	r3, r0
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	f107 0214 	add.w	r2, r7, #20
 80042a6:	f107 0308 	add.w	r3, r7, #8
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 f928 	bl	8004502 <_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80042b2:	4603      	mov	r3, r0
 80042b4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 f937 	bl	800452e <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 80042c0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80042c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	18d5      	adds	r5, r2, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ffa5 	bl	8004220 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461a      	mov	r2, r3
 80042da:	4629      	mov	r1, r5
 80042dc:	4620      	mov	r0, r4
 80042de:	f7ff ffaa 	bl	8004236 <_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681c      	ldr	r4, [r3, #0]
 80042ea:	f107 0308 	add.w	r3, r7, #8
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f931 	bl	8004556 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 80042f4:	4603      	mov	r3, r0
 80042f6:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff ff77 	bl	80041ee <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8004300:	4603      	mov	r3, r0
	  __new_finish
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	4629      	mov	r1, r5
 8004306:	4620      	mov	r0, r4
 8004308:	f000 f930 	bl	800456c <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>
 800430c:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	3304      	adds	r3, #4
 8004312:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8004314:	f107 0308 	add.w	r3, r7, #8
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f91c 	bl	8004556 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 800431e:	4603      	mov	r3, r0
 8004320:	681c      	ldr	r4, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff60 	bl	80041ee <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 800432e:	4603      	mov	r3, r0
	  __new_finish
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4629      	mov	r1, r5
 8004334:	4620      	mov	r0, r4
 8004336:	f000 f919 	bl	800456c <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>
 800433a:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681c      	ldr	r4, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff ff51 	bl	80041ee <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 800434c:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800434e:	461a      	mov	r2, r3
 8004350:	4629      	mov	r1, r5
 8004352:	4620      	mov	r0, r4
 8004354:	f7ff ff56 	bl	8004204 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8004362:	461a      	mov	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 800436c:	461a      	mov	r2, r3
 800436e:	f000 f828 	bl	80043c2 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
      this->_M_impl._M_start = __new_start;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	441a      	add	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	609a      	str	r2, [r3, #8]
    }
 800438a:	bf00      	nop
 800438c:	3728      	adds	r7, #40	; 0x28
 800438e:	46bd      	mov	sp, r7
 8004390:	bdb0      	pop	{r4, r5, r7, pc}
 8004392:	bf00      	nop
 8004394:	08006cd0 	.word	0x08006cd0

08004398 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>:
	_Vector_impl()
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f8fc 	bl	800459e <_ZNSaIiEC1Ev>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	609a      	str	r2, [r3, #8]
	{ }
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
	if (__p)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f8eb 	bl	80045b6 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <_ZSt8_DestroyIPiEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f8ed 	bl	80045d4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8004402:	b590      	push	{r4, r7, lr}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff ff06 	bl	8004220 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8004414:	4603      	mov	r3, r0
 8004416:	681c      	ldr	r4, [r3, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4619      	mov	r1, r3
 800441c:	2004      	movs	r0, #4
 800441e:	f7ff fcba 	bl	8003d96 <_ZnwjPv>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d000      	beq.n	800442a <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_+0x28>
 8004428:	601c      	str	r4, [r3, #0]
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	bd90      	pop	{r4, r7, pc}

08004432 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8004452:	b590      	push	{r4, r7, lr}
 8004454:	b087      	sub	sp, #28
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f8c3 	bl	80045ea <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 8004464:	4604      	mov	r4, r0
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f8d0 	bl	800460c <_ZNKSt6vectorIiSaIiEE4sizeEv>
 800446c:	4603      	mov	r3, r0
 800446e:	1ae2      	subs	r2, r4, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	bf34      	ite	cc
 8004476:	2301      	movcc	r3, #1
 8004478:	2300      	movcs	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4618      	mov	r0, r3
 8004484:	f001 fa99 	bl	80059ba <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f8bf 	bl	800460c <_ZNKSt6vectorIiSaIiEE4sizeEv>
 800448e:	4604      	mov	r4, r0
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f8bb 	bl	800460c <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8004496:	4603      	mov	r3, r0
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	f107 0208 	add.w	r2, r7, #8
 800449e:	f107 0310 	add.w	r3, r7, #16
 80044a2:	4611      	mov	r1, r2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 f8c2 	bl	800462e <_ZSt3maxIjERKT_S2_S2_>
 80044aa:	4603      	mov	r3, r0
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4423      	add	r3, r4
 80044b0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f8aa 	bl	800460c <_ZNKSt6vectorIiSaIiEE4sizeEv>
 80044b8:	4602      	mov	r2, r0
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	4293      	cmp	r3, r2
 80044be:	d306      	bcc.n	80044ce <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x7c>
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f892 	bl	80045ea <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 80044c6:	4602      	mov	r2, r0
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d904      	bls.n	80044d8 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x86>
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f88b 	bl	80045ea <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 80044d4:	4603      	mov	r3, r0
 80044d6:	e000      	b.n	80044da <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x88>
 80044d8:	697b      	ldr	r3, [r7, #20]
      }
 80044da:	4618      	mov	r0, r3
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd90      	pop	{r4, r7, pc}

080044e2 <_ZNSt6vectorIiSaIiEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	f107 030c 	add.w	r3, r7, #12
 80044f0:	4611      	mov	r1, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff ff9d 	bl	8004432 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004502:	b590      	push	{r4, r7, lr}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f822 	bl	8004556 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 8004512:	4603      	mov	r3, r0
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	461c      	mov	r4, r3
 8004518:	6838      	ldr	r0, [r7, #0]
 800451a:	f000 f81c 	bl	8004556 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 800451e:	4603      	mov	r3, r0
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	1ae3      	subs	r3, r4, r3
 8004524:	109b      	asrs	r3, r3, #2
 8004526:	4618      	mov	r0, r3
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bd90      	pop	{r4, r7, pc}

0800452e <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d006      	beq.n	800454c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6839      	ldr	r1, [r7, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f887 	bl	8004656 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 8004548:	4603      	mov	r3, r0
 800454a:	e000      	b.n	800454e <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 800454c:	2300      	movs	r3, #0
      }
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f87a 	bl	8004674 <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>
 8004580:	4604      	mov	r4, r0
 8004582:	68b8      	ldr	r0, [r7, #8]
 8004584:	f000 f876 	bl	8004674 <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>
 8004588:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	4620      	mov	r0, r4
 8004590:	f000 f87f 	bl	8004692 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E>
 8004594:	4603      	mov	r3, r0
    }
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bd90      	pop	{r4, r7, pc}

0800459e <_ZNSaIiEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f884 	bl	80046b4 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f87f 	bl	80046ca <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <_ZNKSt6vectorIiSaIiEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f881 	bl	80046fc <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 f871 	bl	80046e4 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 8004602:	4603      	mov	r3, r0
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	461a      	mov	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	109b      	asrs	r3, r3, #2
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d201      	bcs.n	8004648 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	e000      	b.n	800464a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8004648:	687b      	ldr	r3, [r7, #4]
    }
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004660:	2200      	movs	r2, #0
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f854 	bl	8004712 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>
 800466a:	4603      	mov	r3, r0
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800467c:	f107 030c 	add.w	r3, r7, #12
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 f863 	bl	800474e <_ZNSt13move_iteratorIPiEC1ES0_>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f861 	bl	800476c <_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>:
      deallocate(pointer __p, size_type)
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80046d6:	68b8      	ldr	r0, [r7, #8]
 80046d8:	f001 f959 	bl	800598e <_ZdlPv>
      }
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f84f 	bl	8004790 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 80046f2:	4603      	mov	r3, r0
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f836 	bl	8004790 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 8004724:	4602      	mov	r2, r0
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4293      	cmp	r3, r2
 800472a:	bf8c      	ite	hi
 800472c:	2301      	movhi	r3, #1
 800472e:	2300      	movls	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004736:	f001 f93d 	bl	80059b4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4618      	mov	r0, r3
 8004740:	f001 f927 	bl	8005992 <_Znwj>
 8004744:	4603      	mov	r3, r0
      }
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <_ZNSt13move_iteratorIPiEC1ES0_>:
      move_iterator(iterator_type __i)
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004778:	2301      	movs	r3, #1
 800477a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f811 	bl	80047a8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_>
 8004786:	4603      	mov	r3, r0
    }
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8004798:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f805 	bl	80047c8 <_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>
 80047be:	4603      	mov	r3, r0
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f80f 	bl	80047f8 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80047da:	4604      	mov	r4, r0
 80047dc:	68b8      	ldr	r0, [r7, #8]
 80047de:	f000 f80b 	bl	80047f8 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80047e2:	4603      	mov	r3, r0
	       __result));
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4619      	mov	r1, r3
 80047e8:	4620      	mov	r0, r4
 80047ea:	f000 f816 	bl	800481a <_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_>
 80047ee:	4603      	mov	r3, r0
    }
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd90      	pop	{r4, r7, pc}

080047f8 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8004800:	1d3b      	adds	r3, r7, #4
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f825 	bl	8004852 <_ZNKSt13move_iteratorIPiE4baseEv>
 8004808:	4603      	mov	r3, r0
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f82d 	bl	800486a <_ZSt12__miter_baseIPiET_S1_>
 8004810:	4603      	mov	r3, r0
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800481a:	b5b0      	push	{r4, r5, r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f82a 	bl	8004880 <_ZSt12__niter_baseIPiET_S1_>
 800482c:	4604      	mov	r4, r0
 800482e:	68b8      	ldr	r0, [r7, #8]
 8004830:	f000 f826 	bl	8004880 <_ZSt12__niter_baseIPiET_S1_>
 8004834:	4605      	mov	r5, r0
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f822 	bl	8004880 <_ZSt12__niter_baseIPiET_S1_>
 800483c:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800483e:	461a      	mov	r2, r3
 8004840:	4629      	mov	r1, r5
 8004842:	4620      	mov	r0, r4
 8004844:	f000 f827 	bl	8004896 <_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_>
 8004848:	4603      	mov	r3, r0
    }
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bdb0      	pop	{r4, r5, r7, pc}

08004852 <_ZNKSt13move_iteratorIPiE4baseEv>:
      base() const
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <_ZSt12__miter_baseIPiET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f805 	bl	80048ba <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 80048b0:	4603      	mov	r3, r0
    }
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b086      	sub	sp, #24
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	109b      	asrs	r3, r3, #2
 80048ce:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	461a      	mov	r2, r3
 80048dc:	68f9      	ldr	r1, [r7, #12]
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f002 f8c8 	bl	8006a74 <memmove>
	  return __result + _Num;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4413      	add	r3, r2
	}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <NVIC_GetPriorityGrouping>:
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <NVIC_GetPriorityGrouping+0x18>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	f003 0307 	and.w	r3, r3, #7
}
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <NVIC_EnableIRQ>:
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	f003 021f 	and.w	r2, r3, #31
 8004920:	4907      	ldr	r1, [pc, #28]	; (8004940 <NVIC_EnableIRQ+0x30>)
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	2001      	movs	r0, #1
 800492a:	fa00 f202 	lsl.w	r2, r0, r2
 800492e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	e000e100 	.word	0xe000e100

08004944 <NVIC_SetPriority>:
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	6039      	str	r1, [r7, #0]
 800494e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8004950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004954:	2b00      	cmp	r3, #0
 8004956:	da0b      	bge.n	8004970 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	b2da      	uxtb	r2, r3
 800495c:	490c      	ldr	r1, [pc, #48]	; (8004990 <NVIC_SetPriority+0x4c>)
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	3b04      	subs	r3, #4
 8004966:	0112      	lsls	r2, r2, #4
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	440b      	add	r3, r1
 800496c:	761a      	strb	r2, [r3, #24]
}
 800496e:	e009      	b.n	8004984 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	b2da      	uxtb	r2, r3
 8004974:	4907      	ldr	r1, [pc, #28]	; (8004994 <NVIC_SetPriority+0x50>)
 8004976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497a:	0112      	lsls	r2, r2, #4
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	440b      	add	r3, r1
 8004980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	e000ed00 	.word	0xe000ed00
 8004994:	e000e100 	.word	0xe000e100

08004998 <NVIC_EncodePriority>:
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	; 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f1c3 0307 	rsb	r3, r3, #7
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	bf28      	it	cs
 80049b6:	2304      	movcs	r3, #4
 80049b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3304      	adds	r3, #4
 80049be:	2b06      	cmp	r3, #6
 80049c0:	d902      	bls.n	80049c8 <NVIC_EncodePriority+0x30>
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	3b03      	subs	r3, #3
 80049c6:	e000      	b.n	80049ca <NVIC_EncodePriority+0x32>
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43da      	mvns	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	401a      	ands	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ea:	43d9      	mvns	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f0:	4313      	orrs	r3, r2
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3724      	adds	r7, #36	; 0x24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <LL_ADC_INJ_SetTriggerEdge>:
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <LL_ADC_INJ_SetSequencerRanks>:
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->JSQR,
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	f1c3 031a 	rsb	r3, r3, #26
 8004a3e:	f04f 41f8 	mov.w	r1, #2080374784	; 0x7c000000
 8004a42:	fa21 f303 	lsr.w	r3, r1, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	401a      	ands	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	f1c3 031a 	rsb	r3, r3, #26
 8004a5a:	fa21 f303 	lsr.w	r3, r1, r3
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <LL_ADC_INJ_SetQueueMode>:
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60da      	str	r2, [r3, #12]
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <LL_ADC_SetChannelSamplingTime>:
{
 8004a96:	b490      	push	{r4, r7}
 8004a98:	b08a      	sub	sp, #40	; 0x28
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3314      	adds	r3, #20
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8004aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	fa93 f3a3 	rbit	r3, r3
 8004aba:	613b      	str	r3, [r7, #16]
  return(result);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	fab3 f383 	clz	r3, r3
 8004ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004acc:	6822      	ldr	r2, [r4, #0]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8004ad4:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8004ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	fab3 f383 	clz	r3, r3
 8004ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8004aec:	2107      	movs	r1, #7
 8004aee:	fa01 f303 	lsl.w	r3, r1, r3
 8004af2:	43db      	mvns	r3, r3
 8004af4:	401a      	ands	r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8004afc:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	fa93 f3a3 	rbit	r3, r3
 8004b08:	623b      	str	r3, [r7, #32]
  return(result);
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	fab3 f383 	clz	r3, r3
 8004b10:	fa21 f303 	lsr.w	r3, r1, r3
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	6023      	str	r3, [r4, #0]
}
 8004b1e:	bf00      	nop
 8004b20:	3728      	adds	r7, #40	; 0x28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc90      	pop	{r4, r7}
 8004b26:	4770      	bx	lr

08004b28 <LL_ADC_SetChannelSingleDiff>:
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b40:	43db      	mvns	r3, r3
 8004b42:	401a      	ands	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	4908      	ldr	r1, [pc, #32]	; (8004b6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8004b4c:	4099      	lsls	r1, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	400b      	ands	r3, r1
 8004b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b56:	431a      	orrs	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004b5e:	bf00      	nop
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	0007ffff 	.word	0x0007ffff

08004b70 <LL_ADC_DisableIT_EOC>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f023 0204 	bic.w	r2, r3, #4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	605a      	str	r2, [r3, #4]
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_ADC_DisableIT_EOS>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f023 0208 	bic.w	r2, r3, #8
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	605a      	str	r2, [r3, #4]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <LL_ADC_DisableIT_JEOC>:
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f023 0220 	bic.w	r2, r3, #32
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	605a      	str	r2, [r3, #4]
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <LL_ADC_DisableIT_JEOS>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	605a      	str	r2, [r3, #4]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	4907      	ldr	r1, [pc, #28]	; (8004c1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40021000 	.word	0x40021000

08004c20 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b098      	sub	sp, #96	; 0x60
 8004c24:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004c26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004c32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
 8004c3c:	609a      	str	r2, [r3, #8]
 8004c3e:	60da      	str	r2, [r3, #12]
 8004c40:	611a      	str	r2, [r3, #16]
 8004c42:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8004c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	609a      	str	r2, [r3, #8]
 8004c50:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8004c52:	f107 031c 	add.w	r3, r7, #28
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	605a      	str	r2, [r3, #4]
 8004c5c:	609a      	str	r2, [r3, #8]
 8004c5e:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c60:	1d3b      	adds	r3, r7, #4
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	611a      	str	r2, [r3, #16]
 8004c6e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8004c70:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004c74:	f7ff ffbc 	bl	8004bf0 <LL_AHB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004c78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004c7c:	f7ff ffb8 	bl	8004bf0 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration  
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  PA3   ------> ADC1_IN4 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3;
 8004c80:	230b      	movs	r3, #11
 8004c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004c84:	2303      	movs	r3, #3
 8004c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8c:	1d3b      	adds	r3, r7, #4
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c94:	f7fe f98e 	bl	8002fb4 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004c98:	f7ff fe2c 	bl	80048f4 <NVIC_GetPriorityGrouping>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fe78 	bl	8004998 <NVIC_EncodePriority>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4619      	mov	r1, r3
 8004cac:	2012      	movs	r0, #18
 8004cae:	f7ff fe49 	bl	8004944 <NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 8004cb2:	2012      	movs	r0, #18
 8004cb4:	f7ff fe2c 	bl	8004910 <NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	657b      	str	r3, [r7, #84]	; 0x54
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	65bb      	str	r3, [r7, #88]	; 0x58
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004cc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004cce:	f7fd ffcb 	bl	8002c68 <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8004ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ce6:	653b      	str	r3, [r7, #80]	; 0x50
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004ce8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004cec:	4619      	mov	r1, r3
 8004cee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004cf2:	f7fd ffdf 	bl	8002cb4 <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC1);
 8004cf6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004cfa:	f7ff ff39 	bl	8004b70 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8004cfe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d02:	f7ff ff45 	bl	8004b90 <LL_ADC_DisableIT_EOS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8004d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8004d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d14:	4619      	mov	r1, r3
 8004d16:	4849      	ldr	r0, [pc, #292]	; (8004e3c <MX_ADC1_Init+0x21c>)
 8004d18:	f7fd ff66 	bl	8002be8 <LL_ADC_CommonInit>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2;
 8004d1c:	2360      	movs	r3, #96	; 0x60
 8004d1e:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8004d20:	2302      	movs	r3, #2
 8004d22:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_DISABLE;
 8004d24:	2300      	movs	r3, #0
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8004d2c:	f107 031c 	add.w	r3, r7, #28
 8004d30:	4619      	mov	r1, r3
 8004d32:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d36:	f7fe f807 	bl	8002d48 <LL_ADC_INJ_Init>
  LL_ADC_INJ_SetQueueMode(ADC1, LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE);
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d40:	f7ff fe96 	bl	8004a70 <LL_ADC_INJ_SetQueueMode>
  LL_ADC_DisableIT_JEOC(ADC1);
 8004d44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d48:	f7ff ff32 	bl	8004bb0 <LL_ADC_DisableIT_JEOC>
  LL_ADC_DisableIT_JEOS(ADC1);
 8004d4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d50:	f7ff ff3e 	bl	8004bd0 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_1);
 8004d54:	4a3a      	ldr	r2, [pc, #232]	; (8004e40 <MX_ADC1_Init+0x220>)
 8004d56:	2108      	movs	r1, #8
 8004d58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d5c:	f7ff fe62 	bl	8004a24 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_7CYCLES_5);
 8004d60:	2203      	movs	r2, #3
 8004d62:	4937      	ldr	r1, [pc, #220]	; (8004e40 <MX_ADC1_Init+0x220>)
 8004d64:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d68:	f7ff fe95 	bl	8004a96 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8004d6c:	227f      	movs	r2, #127	; 0x7f
 8004d6e:	4934      	ldr	r1, [pc, #208]	; (8004e40 <MX_ADC1_Init+0x220>)
 8004d70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d74:	f7ff fed8 	bl	8004b28 <LL_ADC_SetChannelSingleDiff>
  LL_ADC_INJ_SetTriggerEdge(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8004d78:	2140      	movs	r1, #64	; 0x40
 8004d7a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d7e:	f7ff fe3e 	bl	80049fe <LL_ADC_INJ_SetTriggerEdge>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8004d82:	f107 031c 	add.w	r3, r7, #28
 8004d86:	4619      	mov	r1, r3
 8004d88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d8c:	f7fd ffdc 	bl	8002d48 <LL_ADC_INJ_Init>
  LL_ADC_INJ_SetQueueMode(ADC1, LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE);
 8004d90:	2100      	movs	r1, #0
 8004d92:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d96:	f7ff fe6b 	bl	8004a70 <LL_ADC_INJ_SetQueueMode>
  LL_ADC_DisableIT_JEOC(ADC1);
 8004d9a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d9e:	f7ff ff07 	bl	8004bb0 <LL_ADC_DisableIT_JEOC>
  LL_ADC_DisableIT_JEOS(ADC1);
 8004da2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004da6:	f7ff ff13 	bl	8004bd0 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_2);
 8004daa:	4a26      	ldr	r2, [pc, #152]	; (8004e44 <MX_ADC1_Init+0x224>)
 8004dac:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004db0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004db4:	f7ff fe36 	bl	8004a24 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_7CYCLES_5);
 8004db8:	2203      	movs	r2, #3
 8004dba:	4922      	ldr	r1, [pc, #136]	; (8004e44 <MX_ADC1_Init+0x224>)
 8004dbc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004dc0:	f7ff fe69 	bl	8004a96 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8004dc4:	227f      	movs	r2, #127	; 0x7f
 8004dc6:	491f      	ldr	r1, [pc, #124]	; (8004e44 <MX_ADC1_Init+0x224>)
 8004dc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004dcc:	f7ff feac 	bl	8004b28 <LL_ADC_SetChannelSingleDiff>
  LL_ADC_INJ_SetTriggerEdge(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8004dd0:	2140      	movs	r1, #64	; 0x40
 8004dd2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004dd6:	f7ff fe12 	bl	80049fe <LL_ADC_INJ_SetTriggerEdge>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8004dda:	f107 031c 	add.w	r3, r7, #28
 8004dde:	4619      	mov	r1, r3
 8004de0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004de4:	f7fd ffb0 	bl	8002d48 <LL_ADC_INJ_Init>
  LL_ADC_INJ_SetQueueMode(ADC1, LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE);
 8004de8:	2100      	movs	r1, #0
 8004dea:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004dee:	f7ff fe3f 	bl	8004a70 <LL_ADC_INJ_SetQueueMode>
  LL_ADC_DisableIT_JEOC(ADC1);
 8004df2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004df6:	f7ff fedb 	bl	8004bb0 <LL_ADC_DisableIT_JEOC>
  LL_ADC_DisableIT_JEOS(ADC1);
 8004dfa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004dfe:	f7ff fee7 	bl	8004bd0 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_4);
 8004e02:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <MX_ADC1_Init+0x228>)
 8004e04:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004e08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004e0c:	f7ff fe0a 	bl	8004a24 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_7CYCLES_5);
 8004e10:	2203      	movs	r2, #3
 8004e12:	490d      	ldr	r1, [pc, #52]	; (8004e48 <MX_ADC1_Init+0x228>)
 8004e14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004e18:	f7ff fe3d 	bl	8004a96 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8004e1c:	227f      	movs	r2, #127	; 0x7f
 8004e1e:	490a      	ldr	r1, [pc, #40]	; (8004e48 <MX_ADC1_Init+0x228>)
 8004e20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004e24:	f7ff fe80 	bl	8004b28 <LL_ADC_SetChannelSingleDiff>
  LL_ADC_INJ_SetTriggerEdge(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8004e28:	2140      	movs	r1, #64	; 0x40
 8004e2a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004e2e:	f7ff fde6 	bl	80049fe <LL_ADC_INJ_SetTriggerEdge>

}
 8004e32:	bf00      	nop
 8004e34:	3760      	adds	r7, #96	; 0x60
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	50000300 	.word	0x50000300
 8004e40:	04300002 	.word	0x04300002
 8004e44:	08600004 	.word	0x08600004
 8004e48:	10c00010 	.word	0x10c00010

08004e4c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <LL_AHB1_GRP1_EnableClock>:
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8004e70:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	4907      	ldr	r1, [pc, #28]	; (8004e94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4013      	ands	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e86:	68fb      	ldr	r3, [r7, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40021000 	.word	0x40021000

08004e98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e9e:	463b      	mov	r3, r7
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	605a      	str	r2, [r3, #4]
 8004ea6:	609a      	str	r2, [r3, #8]
 8004ea8:	60da      	str	r2, [r3, #12]
 8004eaa:	611a      	str	r2, [r3, #16]
 8004eac:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8004eae:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004eb2:	f7ff ffd9 	bl	8004e68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004eb6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004eba:	f7ff ffd5 	bl	8004e68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004ebe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004ec2:	f7ff ffd1 	bl	8004e68 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 8004ec6:	2108      	movs	r1, #8
 8004ec8:	480a      	ldr	r0, [pc, #40]	; (8004ef4 <MX_GPIO_Init+0x5c>)
 8004eca:	f7ff ffbf 	bl	8004e4c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 8004ece:	2308      	movs	r3, #8
 8004ed0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8004ee2:	463b      	mov	r3, r7
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4803      	ldr	r0, [pc, #12]	; (8004ef4 <MX_GPIO_Init+0x5c>)
 8004ee8:	f7fe f864 	bl	8002fb4 <LL_GPIO_Init>

}
 8004eec:	bf00      	nop
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	48000400 	.word	0x48000400

08004ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004efc:	f7fb fe32 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f00:	f000 f80b 	bl	8004f1a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f04:	f7ff ffc8 	bl	8004e98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004f08:	f000 fca4 	bl	8005854 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004f0c:	f000 fb94 	bl	8005638 <MX_TIM1_Init>
  MX_ADC1_Init();
 8004f10:	f7ff fe86 	bl	8004c20 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  CPP_Wrapper();
 8004f14:	f7fe ff5a 	bl	8003dcc <CPP_Wrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004f18:	e7fe      	b.n	8004f18 <main+0x20>

08004f1a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b096      	sub	sp, #88	; 0x58
 8004f1e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f24:	2228      	movs	r2, #40	; 0x28
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 fdbc 	bl	8006aa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f2e:	f107 031c 	add.w	r3, r7, #28
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	605a      	str	r2, [r3, #4]
 8004f38:	609a      	str	r2, [r3, #8]
 8004f3a:	60da      	str	r2, [r3, #12]
 8004f3c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f3e:	1d3b      	adds	r3, r7, #4
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	605a      	str	r2, [r3, #4]
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	60da      	str	r2, [r3, #12]
 8004f4a:	611a      	str	r2, [r3, #16]
 8004f4c:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004f52:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004f56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f60:	2302      	movs	r3, #2
 8004f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f68:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004f6a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004f6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fc f8d9 	bl	800112c <HAL_RCC_OscConfig>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8004f80:	f000 f828 	bl	8004fd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f84:	230f      	movs	r3, #15
 8004f86:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f96:	2300      	movs	r3, #0
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f9a:	f107 031c 	add.w	r3, r7, #28
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fc ffb1 	bl	8001f08 <HAL_RCC_ClockConfig>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004fac:	f000 f812 	bl	8004fd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fb4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fba:	1d3b      	adds	r3, r7, #4
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fd f9d9 	bl	8002374 <HAL_RCCEx_PeriphCLKConfig>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004fc8:	f000 f804 	bl	8004fd4 <Error_Handler>
  }
}
 8004fcc:	bf00      	nop
 8004fce:	3758      	adds	r7, #88	; 0x58
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fea:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <HAL_MspInit+0x44>)
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	4a0e      	ldr	r2, [pc, #56]	; (8005028 <HAL_MspInit+0x44>)
 8004ff0:	f043 0301 	orr.w	r3, r3, #1
 8004ff4:	6193      	str	r3, [r2, #24]
 8004ff6:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <HAL_MspInit+0x44>)
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	607b      	str	r3, [r7, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005002:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_MspInit+0x44>)
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	4a08      	ldr	r2, [pc, #32]	; (8005028 <HAL_MspInit+0x44>)
 8005008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500c:	61d3      	str	r3, [r2, #28]
 800500e:	4b06      	ldr	r3, [pc, #24]	; (8005028 <HAL_MspInit+0x44>)
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40021000 	.word	0x40021000

0800502c <LL_ADC_INJ_ReadConversionData12>:
{
 800502c:	b490      	push	{r4, r7}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3380      	adds	r3, #128	; 0x80
 800503a:	4619      	mov	r1, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005042:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	fa93 f3a3 	rbit	r3, r3
 800504e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	fab3 f383 	clz	r3, r3
 8005056:	fa22 f303 	lsr.w	r3, r2, r3
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	461c      	mov	r4, r3
  return (uint16_t)(READ_BIT(*preg,
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	b29b      	uxth	r3, r3
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bc90      	pop	{r4, r7}
 800506c:	4770      	bx	lr

0800506e <LL_ADC_IsActiveFlag_JEOS>:
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	bf0c      	ite	eq
 8005082:	2301      	moveq	r3, #1
 8005084:	2300      	movne	r3, #0
 8005086:	b2db      	uxtb	r3, r3
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <LL_ADC_ClearFlag_JEOS>:
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2240      	movs	r2, #64	; 0x40
 80050a0:	601a      	str	r2, [r3, #0]
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <LL_TIM_ClearFlag_UPDATE>:
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f06f 0201 	mvn.w	r2, #1
 80050bc:	611a      	str	r2, [r3, #16]
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050ca:	b480      	push	{r7}
 80050cc:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050ce:	bf00      	nop
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050dc:	e7fe      	b.n	80050dc <HardFault_Handler+0x4>

080050de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050de:	b480      	push	{r7}
 80050e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050e2:	e7fe      	b.n	80050e2 <MemManage_Handler+0x4>

080050e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050e8:	e7fe      	b.n	80050e8 <BusFault_Handler+0x4>

080050ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050ea:	b480      	push	{r7}
 80050ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050ee:	e7fe      	b.n	80050ee <UsageFault_Handler+0x4>

080050f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050fe:	b480      	push	{r7}
 8005100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005102:	bf00      	nop
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800511e:	f7fb fd67 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <ADC1_2_IRQHandler>:
/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
uint16_t adc_data1 = 0, adc_data2 = 0, adc_data3 = 0, adc_data4 = 0;
void ADC1_2_IRQHandler(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	if (LL_ADC_IsActiveFlag_JEOS(ADC1) == 1)
 800512c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005130:	f7ff ff9d 	bl	800506e <LL_ADC_IsActiveFlag_JEOS>
 8005134:	4603      	mov	r3, r0
 8005136:	2b01      	cmp	r3, #1
 8005138:	d121      	bne.n	800517e <ADC1_2_IRQHandler+0x56>
	{
		LL_ADC_ClearFlag_JEOS(ADC1);
 800513a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800513e:	f7ff ffa9 	bl	8005094 <LL_ADC_ClearFlag_JEOS>
		//HighFreqTask();

		adc_data1 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1);
 8005142:	2108      	movs	r1, #8
 8005144:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005148:	f7ff ff70 	bl	800502c <LL_ADC_INJ_ReadConversionData12>
 800514c:	4603      	mov	r3, r0
 800514e:	461a      	mov	r2, r3
 8005150:	4b0e      	ldr	r3, [pc, #56]	; (800518c <ADC1_2_IRQHandler+0x64>)
 8005152:	801a      	strh	r2, [r3, #0]
		adc_data2 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2);
 8005154:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8005158:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800515c:	f7ff ff66 	bl	800502c <LL_ADC_INJ_ReadConversionData12>
 8005160:	4603      	mov	r3, r0
 8005162:	461a      	mov	r2, r3
 8005164:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <ADC1_2_IRQHandler+0x68>)
 8005166:	801a      	strh	r2, [r3, #0]
		adc_data3 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3);
 8005168:	f44f 7105 	mov.w	r1, #532	; 0x214
 800516c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005170:	f7ff ff5c 	bl	800502c <LL_ADC_INJ_ReadConversionData12>
 8005174:	4603      	mov	r3, r0
 8005176:	461a      	mov	r2, r3
 8005178:	4b06      	ldr	r3, [pc, #24]	; (8005194 <ADC1_2_IRQHandler+0x6c>)
 800517a:	801a      	strh	r2, [r3, #0]
	else
	{
		LL_ADC_WriteReg(ADC1,ISR,0);
	}
	//bool isActiveJEOC=LL_ADC_IsActiveFlag_JEOC(ADCx)
	return;
 800517c:	e004      	b.n	8005188 <ADC1_2_IRQHandler+0x60>
		LL_ADC_WriteReg(ADC1,ISR,0);
 800517e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
	return;
 8005186:	bf00      	nop
  /* USER CODE END ADC1_2_IRQn 0 */
  
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	2000008c 	.word	0x2000008c
 8005190:	2000008e 	.word	0x2000008e
 8005194:	20000090 	.word	0x20000090

08005198 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM1);
 800519c:	4802      	ldr	r0, [pc, #8]	; (80051a8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800519e:	f7ff ff86 	bl	80050ae <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80051a2:	bf00      	nop
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40012c00 	.word	0x40012c00

080051ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
	return 1;
 80051b0:	2301      	movs	r3, #1
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <_kill>:

int _kill(int pid, int sig)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80051c6:	f001 fc1b 	bl	8006a00 <__errno>
 80051ca:	4602      	mov	r2, r0
 80051cc:	2316      	movs	r3, #22
 80051ce:	6013      	str	r3, [r2, #0]
	return -1;
 80051d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <_exit>:

void _exit (int status)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff ffe7 	bl	80051bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80051ee:	e7fe      	b.n	80051ee <_exit+0x12>

080051f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80051f8:	4b11      	ldr	r3, [pc, #68]	; (8005240 <_sbrk+0x50>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <_sbrk+0x16>
		heap_end = &end;
 8005200:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <_sbrk+0x50>)
 8005202:	4a10      	ldr	r2, [pc, #64]	; (8005244 <_sbrk+0x54>)
 8005204:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005206:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <_sbrk+0x50>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800520c:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <_sbrk+0x50>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4413      	add	r3, r2
 8005214:	466a      	mov	r2, sp
 8005216:	4293      	cmp	r3, r2
 8005218:	d907      	bls.n	800522a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800521a:	f001 fbf1 	bl	8006a00 <__errno>
 800521e:	4602      	mov	r2, r0
 8005220:	230c      	movs	r3, #12
 8005222:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005228:	e006      	b.n	8005238 <_sbrk+0x48>
	}

	heap_end += incr;
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <_sbrk+0x50>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4413      	add	r3, r2
 8005232:	4a03      	ldr	r2, [pc, #12]	; (8005240 <_sbrk+0x50>)
 8005234:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000094 	.word	0x20000094
 8005244:	20000120 	.word	0x20000120

08005248 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800524c:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <SystemInit+0x84>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005252:	4a1e      	ldr	r2, [pc, #120]	; (80052cc <SystemInit+0x84>)
 8005254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800525c:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <SystemInit+0x88>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1b      	ldr	r2, [pc, #108]	; (80052d0 <SystemInit+0x88>)
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <SystemInit+0x88>)
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	4918      	ldr	r1, [pc, #96]	; (80052d0 <SystemInit+0x88>)
 800526e:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <SystemInit+0x8c>)
 8005270:	4013      	ands	r3, r2
 8005272:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005274:	4b16      	ldr	r3, [pc, #88]	; (80052d0 <SystemInit+0x88>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <SystemInit+0x88>)
 800527a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800527e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005282:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005284:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <SystemInit+0x88>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a11      	ldr	r2, [pc, #68]	; (80052d0 <SystemInit+0x88>)
 800528a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800528e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <SystemInit+0x88>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	4a0e      	ldr	r2, [pc, #56]	; (80052d0 <SystemInit+0x88>)
 8005296:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800529a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <SystemInit+0x88>)
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	4a0b      	ldr	r2, [pc, #44]	; (80052d0 <SystemInit+0x88>)
 80052a2:	f023 030f 	bic.w	r3, r3, #15
 80052a6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80052a8:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <SystemInit+0x88>)
 80052aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ac:	4908      	ldr	r1, [pc, #32]	; (80052d0 <SystemInit+0x88>)
 80052ae:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <SystemInit+0x90>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <SystemInit+0x88>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80052ba:	4b04      	ldr	r3, [pc, #16]	; (80052cc <SystemInit+0x84>)
 80052bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052c0:	609a      	str	r2, [r3, #8]
#endif
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	e000ed00 	.word	0xe000ed00
 80052d0:	40021000 	.word	0x40021000
 80052d4:	f87fc00c 	.word	0xf87fc00c
 80052d8:	ff00fccc 	.word	0xff00fccc

080052dc <NVIC_GetPriorityGrouping>:
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052e0:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <NVIC_GetPriorityGrouping+0x18>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	0a1b      	lsrs	r3, r3, #8
 80052e6:	f003 0307 	and.w	r3, r3, #7
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	e000ed00 	.word	0xe000ed00

080052f8 <NVIC_EnableIRQ>:
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	f003 021f 	and.w	r2, r3, #31
 8005308:	4907      	ldr	r1, [pc, #28]	; (8005328 <NVIC_EnableIRQ+0x30>)
 800530a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	2001      	movs	r0, #1
 8005312:	fa00 f202 	lsl.w	r2, r0, r2
 8005316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	e000e100 	.word	0xe000e100

0800532c <NVIC_SetPriority>:
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	6039      	str	r1, [r7, #0]
 8005336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533c:	2b00      	cmp	r3, #0
 800533e:	da0b      	bge.n	8005358 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	490c      	ldr	r1, [pc, #48]	; (8005378 <NVIC_SetPriority+0x4c>)
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	3b04      	subs	r3, #4
 800534e:	0112      	lsls	r2, r2, #4
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	440b      	add	r3, r1
 8005354:	761a      	strb	r2, [r3, #24]
}
 8005356:	e009      	b.n	800536c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	b2da      	uxtb	r2, r3
 800535c:	4907      	ldr	r1, [pc, #28]	; (800537c <NVIC_SetPriority+0x50>)
 800535e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005362:	0112      	lsls	r2, r2, #4
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	440b      	add	r3, r1
 8005368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	e000ed00 	.word	0xe000ed00
 800537c:	e000e100 	.word	0xe000e100

08005380 <NVIC_EncodePriority>:
{
 8005380:	b480      	push	{r7}
 8005382:	b089      	sub	sp, #36	; 0x24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f1c3 0307 	rsb	r3, r3, #7
 800539a:	2b04      	cmp	r3, #4
 800539c:	bf28      	it	cs
 800539e:	2304      	movcs	r3, #4
 80053a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	3304      	adds	r3, #4
 80053a6:	2b06      	cmp	r3, #6
 80053a8:	d902      	bls.n	80053b0 <NVIC_EncodePriority+0x30>
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3b03      	subs	r3, #3
 80053ae:	e000      	b.n	80053b2 <NVIC_EncodePriority+0x32>
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	43da      	mvns	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	401a      	ands	r2, r3
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	fa01 f303 	lsl.w	r3, r1, r3
 80053d2:	43d9      	mvns	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d8:	4313      	orrs	r3, r2
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3724      	adds	r7, #36	; 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <LL_TIM_DisableARRPreload>:
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	601a      	str	r2, [r3, #0]
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <LL_TIM_OC_DisableFast>:
{
 8005408:	b4b0      	push	{r4, r5, r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d028      	beq.n	800546a <LL_TIM_OC_DisableFast+0x62>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b04      	cmp	r3, #4
 800541c:	d023      	beq.n	8005466 <LL_TIM_OC_DisableFast+0x5e>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b10      	cmp	r3, #16
 8005422:	d01e      	beq.n	8005462 <LL_TIM_OC_DisableFast+0x5a>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b40      	cmp	r3, #64	; 0x40
 8005428:	d019      	beq.n	800545e <LL_TIM_OC_DisableFast+0x56>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005430:	d013      	beq.n	800545a <LL_TIM_OC_DisableFast+0x52>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005438:	d00d      	beq.n	8005456 <LL_TIM_OC_DisableFast+0x4e>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005440:	d007      	beq.n	8005452 <LL_TIM_OC_DisableFast+0x4a>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005448:	d101      	bne.n	800544e <LL_TIM_OC_DisableFast+0x46>
 800544a:	2307      	movs	r3, #7
 800544c:	e00e      	b.n	800546c <LL_TIM_OC_DisableFast+0x64>
 800544e:	2308      	movs	r3, #8
 8005450:	e00c      	b.n	800546c <LL_TIM_OC_DisableFast+0x64>
 8005452:	2306      	movs	r3, #6
 8005454:	e00a      	b.n	800546c <LL_TIM_OC_DisableFast+0x64>
 8005456:	2305      	movs	r3, #5
 8005458:	e008      	b.n	800546c <LL_TIM_OC_DisableFast+0x64>
 800545a:	2304      	movs	r3, #4
 800545c:	e006      	b.n	800546c <LL_TIM_OC_DisableFast+0x64>
 800545e:	2303      	movs	r3, #3
 8005460:	e004      	b.n	800546c <LL_TIM_OC_DisableFast+0x64>
 8005462:	2302      	movs	r3, #2
 8005464:	e002      	b.n	800546c <LL_TIM_OC_DisableFast+0x64>
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <LL_TIM_OC_DisableFast+0x64>
 800546a:	2300      	movs	r3, #0
 800546c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3318      	adds	r3, #24
 8005472:	461a      	mov	r2, r3
 8005474:	4629      	mov	r1, r5
 8005476:	4b09      	ldr	r3, [pc, #36]	; (800549c <LL_TIM_OC_DisableFast+0x94>)
 8005478:	5c5b      	ldrb	r3, [r3, r1]
 800547a:	4413      	add	r3, r2
 800547c:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800547e:	6822      	ldr	r2, [r4, #0]
 8005480:	4629      	mov	r1, r5
 8005482:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <LL_TIM_OC_DisableFast+0x98>)
 8005484:	5c5b      	ldrb	r3, [r3, r1]
 8005486:	4619      	mov	r1, r3
 8005488:	2304      	movs	r3, #4
 800548a:	408b      	lsls	r3, r1
 800548c:	43db      	mvns	r3, r3
 800548e:	4013      	ands	r3, r2
 8005490:	6023      	str	r3, [r4, #0]
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	bcb0      	pop	{r4, r5, r7}
 800549a:	4770      	bx	lr
 800549c:	08006d24 	.word	0x08006d24
 80054a0:	08006d30 	.word	0x08006d30

080054a4 <LL_TIM_OC_EnablePreload>:
{
 80054a4:	b4b0      	push	{r4, r5, r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d028      	beq.n	8005506 <LL_TIM_OC_EnablePreload+0x62>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d023      	beq.n	8005502 <LL_TIM_OC_EnablePreload+0x5e>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d01e      	beq.n	80054fe <LL_TIM_OC_EnablePreload+0x5a>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d019      	beq.n	80054fa <LL_TIM_OC_EnablePreload+0x56>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054cc:	d013      	beq.n	80054f6 <LL_TIM_OC_EnablePreload+0x52>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d4:	d00d      	beq.n	80054f2 <LL_TIM_OC_EnablePreload+0x4e>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054dc:	d007      	beq.n	80054ee <LL_TIM_OC_EnablePreload+0x4a>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e4:	d101      	bne.n	80054ea <LL_TIM_OC_EnablePreload+0x46>
 80054e6:	2307      	movs	r3, #7
 80054e8:	e00e      	b.n	8005508 <LL_TIM_OC_EnablePreload+0x64>
 80054ea:	2308      	movs	r3, #8
 80054ec:	e00c      	b.n	8005508 <LL_TIM_OC_EnablePreload+0x64>
 80054ee:	2306      	movs	r3, #6
 80054f0:	e00a      	b.n	8005508 <LL_TIM_OC_EnablePreload+0x64>
 80054f2:	2305      	movs	r3, #5
 80054f4:	e008      	b.n	8005508 <LL_TIM_OC_EnablePreload+0x64>
 80054f6:	2304      	movs	r3, #4
 80054f8:	e006      	b.n	8005508 <LL_TIM_OC_EnablePreload+0x64>
 80054fa:	2303      	movs	r3, #3
 80054fc:	e004      	b.n	8005508 <LL_TIM_OC_EnablePreload+0x64>
 80054fe:	2302      	movs	r3, #2
 8005500:	e002      	b.n	8005508 <LL_TIM_OC_EnablePreload+0x64>
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <LL_TIM_OC_EnablePreload+0x64>
 8005506:	2300      	movs	r3, #0
 8005508:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3318      	adds	r3, #24
 800550e:	461a      	mov	r2, r3
 8005510:	4629      	mov	r1, r5
 8005512:	4b09      	ldr	r3, [pc, #36]	; (8005538 <LL_TIM_OC_EnablePreload+0x94>)
 8005514:	5c5b      	ldrb	r3, [r3, r1]
 8005516:	4413      	add	r3, r2
 8005518:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	4629      	mov	r1, r5
 800551e:	4b07      	ldr	r3, [pc, #28]	; (800553c <LL_TIM_OC_EnablePreload+0x98>)
 8005520:	5c5b      	ldrb	r3, [r3, r1]
 8005522:	4619      	mov	r1, r3
 8005524:	2308      	movs	r3, #8
 8005526:	408b      	lsls	r3, r1
 8005528:	4313      	orrs	r3, r2
 800552a:	6023      	str	r3, [r4, #0]
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bcb0      	pop	{r4, r5, r7}
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	08006d24 	.word	0x08006d24
 800553c:	08006d30 	.word	0x08006d30

08005540 <LL_TIM_SetClockSource>:
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005552:	f023 0307 	bic.w	r3, r3, #7
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	609a      	str	r2, [r3, #8]
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <LL_TIM_SetTriggerOutput>:
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	605a      	str	r2, [r3, #4]
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <LL_TIM_SetTriggerOutput2>:
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	605a      	str	r2, [r3, #4]
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <LL_TIM_DisableMasterSlaveMode>:
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	609a      	str	r2, [r3, #8]
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <LL_AHB1_GRP1_EnableClock>:
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80055e0:	4b08      	ldr	r3, [pc, #32]	; (8005604 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80055e2:	695a      	ldr	r2, [r3, #20]
 80055e4:	4907      	ldr	r1, [pc, #28]	; (8005604 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4013      	ands	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055f6:	68fb      	ldr	r3, [r7, #12]
}
 80055f8:	bf00      	nop
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	40021000 	.word	0x40021000

08005608 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005610:	4b08      	ldr	r3, [pc, #32]	; (8005634 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005612:	699a      	ldr	r2, [r3, #24]
 8005614:	4907      	ldr	r1, [pc, #28]	; (8005634 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4313      	orrs	r3, r2
 800561a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <LL_APB2_GRP1_EnableClock+0x2c>)
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4013      	ands	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40021000 	.word	0x40021000

08005638 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b09e      	sub	sp, #120	; 0x78
 800563c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800563e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	60da      	str	r2, [r3, #12]
 800564c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800564e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005652:	2220      	movs	r2, #32
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f001 fa25 	bl	8006aa6 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800565c:	f107 031c 	add.w	r3, r7, #28
 8005660:	2228      	movs	r2, #40	; 0x28
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f001 fa1e 	bl	8006aa6 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800566a:	1d3b      	adds	r3, r7, #4
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	605a      	str	r2, [r3, #4]
 8005672:	609a      	str	r2, [r3, #8]
 8005674:	60da      	str	r2, [r3, #12]
 8005676:	611a      	str	r2, [r3, #16]
 8005678:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800567a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800567e:	f7ff ffc3 	bl	8005608 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005682:	f7ff fe2b 	bl	80052dc <NVIC_GetPriorityGrouping>
 8005686:	4603      	mov	r3, r0
 8005688:	2200      	movs	r2, #0
 800568a:	2100      	movs	r1, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff fe77 	bl	8005380 <NVIC_EncodePriority>
 8005692:	4603      	mov	r3, r0
 8005694:	4619      	mov	r1, r3
 8005696:	2019      	movs	r0, #25
 8005698:	f7ff fe48 	bl	800532c <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800569c:	2019      	movs	r0, #25
 800569e:	f7ff fe2b 	bl	80052f8 <NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80056a8:	2300      	movs	r3, #0
 80056aa:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 65535;
 80056ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80056b2:	2300      	movs	r3, #0
 80056b4:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80056bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80056c0:	4619      	mov	r1, r3
 80056c2:	4863      	ldr	r0, [pc, #396]	; (8005850 <MX_TIM1_Init+0x218>)
 80056c4:	f7fd fd7e 	bl	80031c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80056c8:	4861      	ldr	r0, [pc, #388]	; (8005850 <MX_TIM1_Init+0x218>)
 80056ca:	f7ff fe8c 	bl	80053e6 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80056ce:	2100      	movs	r1, #0
 80056d0:	485f      	ldr	r0, [pc, #380]	; (8005850 <MX_TIM1_Init+0x218>)
 80056d2:	f7ff ff35 	bl	8005540 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80056d6:	2101      	movs	r1, #1
 80056d8:	485d      	ldr	r0, [pc, #372]	; (8005850 <MX_TIM1_Init+0x218>)
 80056da:	f7ff fee3 	bl	80054a4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80056de:	2360      	movs	r3, #96	; 0x60
 80056e0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 10000;
 80056ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80056ee:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80056f0:	2300      	movs	r3, #0
 80056f2:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80056f4:	2300      	movs	r3, #0
 80056f6:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80056f8:	2300      	movs	r3, #0
 80056fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80056fc:	2300      	movs	r3, #0
 80056fe:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005700:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005704:	461a      	mov	r2, r3
 8005706:	2101      	movs	r1, #1
 8005708:	4851      	ldr	r0, [pc, #324]	; (8005850 <MX_TIM1_Init+0x218>)
 800570a:	f7fd fdcf 	bl	80032ac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 800570e:	2101      	movs	r1, #1
 8005710:	484f      	ldr	r0, [pc, #316]	; (8005850 <MX_TIM1_Init+0x218>)
 8005712:	f7ff fe79 	bl	8005408 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8005716:	2110      	movs	r1, #16
 8005718:	484d      	ldr	r0, [pc, #308]	; (8005850 <MX_TIM1_Init+0x218>)
 800571a:	f7ff fec3 	bl	80054a4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800571e:	2300      	movs	r3, #0
 8005720:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005722:	2300      	movs	r3, #0
 8005724:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800572a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800572e:	461a      	mov	r2, r3
 8005730:	2110      	movs	r1, #16
 8005732:	4847      	ldr	r0, [pc, #284]	; (8005850 <MX_TIM1_Init+0x218>)
 8005734:	f7fd fdba 	bl	80032ac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8005738:	2110      	movs	r1, #16
 800573a:	4845      	ldr	r0, [pc, #276]	; (8005850 <MX_TIM1_Init+0x218>)
 800573c:	f7ff fe64 	bl	8005408 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8005740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005744:	4842      	ldr	r0, [pc, #264]	; (8005850 <MX_TIM1_Init+0x218>)
 8005746:	f7ff fead 	bl	80054a4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800574a:	2300      	movs	r3, #0
 800574c:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800574e:	2300      	movs	r3, #0
 8005750:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8005752:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005756:	461a      	mov	r2, r3
 8005758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800575c:	483c      	ldr	r0, [pc, #240]	; (8005850 <MX_TIM1_Init+0x218>)
 800575e:	f7fd fda5 	bl	80032ac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8005762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005766:	483a      	ldr	r0, [pc, #232]	; (8005850 <MX_TIM1_Init+0x218>)
 8005768:	f7ff fe4e 	bl	8005408 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 800576c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005770:	4837      	ldr	r0, [pc, #220]	; (8005850 <MX_TIM1_Init+0x218>)
 8005772:	f7ff fe97 	bl	80054a4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005776:	2300      	movs	r3, #0
 8005778:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800577a:	2300      	movs	r3, #0
 800577c:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 65530;
 800577e:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8005782:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005784:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005788:	461a      	mov	r2, r3
 800578a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800578e:	4830      	ldr	r0, [pc, #192]	; (8005850 <MX_TIM1_Init+0x218>)
 8005790:	f7fd fd8c 	bl	80032ac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8005794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005798:	482d      	ldr	r0, [pc, #180]	; (8005850 <MX_TIM1_Init+0x218>)
 800579a:	f7ff fe35 	bl	8005408 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_UPDATE);
 800579e:	2120      	movs	r1, #32
 80057a0:	482b      	ldr	r0, [pc, #172]	; (8005850 <MX_TIM1_Init+0x218>)
 80057a2:	f7ff fee2 	bl	800556a <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_OC4);
 80057a6:	f44f 01e0 	mov.w	r1, #7340032	; 0x700000
 80057aa:	4829      	ldr	r0, [pc, #164]	; (8005850 <MX_TIM1_Init+0x218>)
 80057ac:	f7ff fef0 	bl	8005590 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80057b0:	4827      	ldr	r0, [pc, #156]	; (8005850 <MX_TIM1_Init+0x218>)
 80057b2:	f7ff ff00 	bl	80055b6 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80057be:	2300      	movs	r3, #0
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80057cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 80057d2:	2300      	movs	r3, #0
 80057d4:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 80057da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057de:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 80057e0:	2300      	movs	r3, #0
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80057e4:	2300      	movs	r3, #0
 80057e6:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80057e8:	f107 031c 	add.w	r3, r7, #28
 80057ec:	4619      	mov	r1, r3
 80057ee:	4818      	ldr	r0, [pc, #96]	; (8005850 <MX_TIM1_Init+0x218>)
 80057f0:	f7fd fdaa 	bl	8003348 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80057f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80057f8:	f7ff feee 	bl	80055d8 <LL_AHB1_GRP1_EnableClock>
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80057fc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005800:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005802:	2302      	movs	r3, #2
 8005804:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800580e:	2300      	movs	r3, #0
 8005810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8005812:	2306      	movs	r3, #6
 8005814:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005816:	1d3b      	adds	r3, r7, #4
 8005818:	4619      	mov	r1, r3
 800581a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800581e:	f7fd fbc9 	bl	8002fb4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8005822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005826:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005828:	2302      	movs	r3, #2
 800582a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8005838:	230b      	movs	r3, #11
 800583a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800583c:	1d3b      	adds	r3, r7, #4
 800583e:	4619      	mov	r1, r3
 8005840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005844:	f7fd fbb6 	bl	8002fb4 <LL_GPIO_Init>

}
 8005848:	bf00      	nop
 800584a:	3778      	adds	r7, #120	; 0x78
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40012c00 	.word	0x40012c00

08005854 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005858:	4b14      	ldr	r3, [pc, #80]	; (80058ac <MX_USART2_UART_Init+0x58>)
 800585a:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <MX_USART2_UART_Init+0x5c>)
 800585c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <MX_USART2_UART_Init+0x58>)
 8005860:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005866:	4b11      	ldr	r3, [pc, #68]	; (80058ac <MX_USART2_UART_Init+0x58>)
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <MX_USART2_UART_Init+0x58>)
 800586e:	2200      	movs	r2, #0
 8005870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005872:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <MX_USART2_UART_Init+0x58>)
 8005874:	2200      	movs	r2, #0
 8005876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005878:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <MX_USART2_UART_Init+0x58>)
 800587a:	220c      	movs	r2, #12
 800587c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800587e:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <MX_USART2_UART_Init+0x58>)
 8005880:	2200      	movs	r2, #0
 8005882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005884:	4b09      	ldr	r3, [pc, #36]	; (80058ac <MX_USART2_UART_Init+0x58>)
 8005886:	2200      	movs	r2, #0
 8005888:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800588a:	4b08      	ldr	r3, [pc, #32]	; (80058ac <MX_USART2_UART_Init+0x58>)
 800588c:	2200      	movs	r2, #0
 800588e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <MX_USART2_UART_Init+0x58>)
 8005892:	2200      	movs	r2, #0
 8005894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005896:	4805      	ldr	r0, [pc, #20]	; (80058ac <MX_USART2_UART_Init+0x58>)
 8005898:	f7fc fe92 	bl	80025c0 <HAL_UART_Init>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80058a2:	f7ff fb97 	bl	8004fd4 <Error_Handler>
  }

}
 80058a6:	bf00      	nop
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	200000a8 	.word	0x200000a8
 80058b0:	40004400 	.word	0x40004400

080058b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	; 0x28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058bc:	f107 0314 	add.w	r3, r7, #20
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	605a      	str	r2, [r3, #4]
 80058c6:	609a      	str	r2, [r3, #8]
 80058c8:	60da      	str	r2, [r3, #12]
 80058ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a18      	ldr	r2, [pc, #96]	; (8005934 <HAL_UART_MspInit+0x80>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d129      	bne.n	800592a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80058d6:	4b18      	ldr	r3, [pc, #96]	; (8005938 <HAL_UART_MspInit+0x84>)
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	4a17      	ldr	r2, [pc, #92]	; (8005938 <HAL_UART_MspInit+0x84>)
 80058dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e0:	61d3      	str	r3, [r2, #28]
 80058e2:	4b15      	ldr	r3, [pc, #84]	; (8005938 <HAL_UART_MspInit+0x84>)
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	613b      	str	r3, [r7, #16]
 80058ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ee:	4b12      	ldr	r3, [pc, #72]	; (8005938 <HAL_UART_MspInit+0x84>)
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	4a11      	ldr	r2, [pc, #68]	; (8005938 <HAL_UART_MspInit+0x84>)
 80058f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f8:	6153      	str	r3, [r2, #20]
 80058fa:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <HAL_UART_MspInit+0x84>)
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8005906:	f248 0304 	movw	r3, #32772	; 0x8004
 800590a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800590c:	2302      	movs	r3, #2
 800590e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005914:	2303      	movs	r3, #3
 8005916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005918:	2307      	movs	r3, #7
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800591c:	f107 0314 	add.w	r3, r7, #20
 8005920:	4619      	mov	r1, r3
 8005922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005926:	f7fb fa8b 	bl	8000e40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800592a:	bf00      	nop
 800592c:	3728      	adds	r7, #40	; 0x28
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40004400 	.word	0x40004400
 8005938:	40021000 	.word	0x40021000

0800593c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800593c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005974 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005940:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005942:	e003      	b.n	800594c <LoopCopyDataInit>

08005944 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005946:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005948:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800594a:	3104      	adds	r1, #4

0800594c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800594c:	480b      	ldr	r0, [pc, #44]	; (800597c <LoopForever+0xa>)
	ldr	r3, =_edata
 800594e:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005950:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005952:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005954:	d3f6      	bcc.n	8005944 <CopyDataInit>
	ldr	r2, =_sbss
 8005956:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005958:	e002      	b.n	8005960 <LoopFillZerobss>

0800595a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800595a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800595c:	f842 3b04 	str.w	r3, [r2], #4

08005960 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005960:	4b09      	ldr	r3, [pc, #36]	; (8005988 <LoopForever+0x16>)
	cmp	r2, r3
 8005962:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005964:	d3f9      	bcc.n	800595a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005966:	f7ff fc6f 	bl	8005248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800596a:	f001 f84f 	bl	8006a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800596e:	f7ff fac3 	bl	8004ef8 <main>

08005972 <LoopForever>:

LoopForever:
    b LoopForever
 8005972:	e7fe      	b.n	8005972 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005974:	20002fff 	.word	0x20002fff
	ldr	r3, =_sidata
 8005978:	08006f20 	.word	0x08006f20
	ldr	r0, =_sdata
 800597c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005980:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8005984:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8005988:	2000011c 	.word	0x2000011c

0800598c <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800598c:	e7fe      	b.n	800598c <CAN_RX0_IRQHandler>

0800598e <_ZdlPv>:
 800598e:	f001 b869 	b.w	8006a64 <free>

08005992 <_Znwj>:
 8005992:	b510      	push	{r4, lr}
 8005994:	2800      	cmp	r0, #0
 8005996:	bf14      	ite	ne
 8005998:	4604      	movne	r4, r0
 800599a:	2401      	moveq	r4, #1
 800599c:	4620      	mov	r0, r4
 800599e:	f001 f859 	bl	8006a54 <malloc>
 80059a2:	b930      	cbnz	r0, 80059b2 <_Znwj+0x20>
 80059a4:	f000 f80c 	bl	80059c0 <_ZSt15get_new_handlerv>
 80059a8:	b908      	cbnz	r0, 80059ae <_Znwj+0x1c>
 80059aa:	f001 f822 	bl	80069f2 <abort>
 80059ae:	4780      	blx	r0
 80059b0:	e7f4      	b.n	800599c <_Znwj+0xa>
 80059b2:	bd10      	pop	{r4, pc}

080059b4 <_ZSt17__throw_bad_allocv>:
 80059b4:	b508      	push	{r3, lr}
 80059b6:	f001 f81c 	bl	80069f2 <abort>

080059ba <_ZSt20__throw_length_errorPKc>:
 80059ba:	b508      	push	{r3, lr}
 80059bc:	f001 f819 	bl	80069f2 <abort>

080059c0 <_ZSt15get_new_handlerv>:
 80059c0:	4b02      	ldr	r3, [pc, #8]	; (80059cc <_ZSt15get_new_handlerv+0xc>)
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	f3bf 8f5b 	dmb	ish
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	20000098 	.word	0x20000098

080059d0 <sin>:
 80059d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059d2:	ec51 0b10 	vmov	r0, r1, d0
 80059d6:	4a20      	ldr	r2, [pc, #128]	; (8005a58 <sin+0x88>)
 80059d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059dc:	4293      	cmp	r3, r2
 80059de:	dc07      	bgt.n	80059f0 <sin+0x20>
 80059e0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005a50 <sin+0x80>
 80059e4:	2000      	movs	r0, #0
 80059e6:	f000 fe37 	bl	8006658 <__kernel_sin>
 80059ea:	ec51 0b10 	vmov	r0, r1, d0
 80059ee:	e007      	b.n	8005a00 <sin+0x30>
 80059f0:	4a1a      	ldr	r2, [pc, #104]	; (8005a5c <sin+0x8c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	dd09      	ble.n	8005a0a <sin+0x3a>
 80059f6:	ee10 2a10 	vmov	r2, s0
 80059fa:	460b      	mov	r3, r1
 80059fc:	f7fa fbe8 	bl	80001d0 <__aeabi_dsub>
 8005a00:	ec41 0b10 	vmov	d0, r0, r1
 8005a04:	b005      	add	sp, #20
 8005a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a0a:	4668      	mov	r0, sp
 8005a0c:	f000 f828 	bl	8005a60 <__ieee754_rem_pio2>
 8005a10:	f000 0003 	and.w	r0, r0, #3
 8005a14:	2801      	cmp	r0, #1
 8005a16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a1a:	ed9d 0b00 	vldr	d0, [sp]
 8005a1e:	d004      	beq.n	8005a2a <sin+0x5a>
 8005a20:	2802      	cmp	r0, #2
 8005a22:	d005      	beq.n	8005a30 <sin+0x60>
 8005a24:	b970      	cbnz	r0, 8005a44 <sin+0x74>
 8005a26:	2001      	movs	r0, #1
 8005a28:	e7dd      	b.n	80059e6 <sin+0x16>
 8005a2a:	f000 fa0d 	bl	8005e48 <__kernel_cos>
 8005a2e:	e7dc      	b.n	80059ea <sin+0x1a>
 8005a30:	2001      	movs	r0, #1
 8005a32:	f000 fe11 	bl	8006658 <__kernel_sin>
 8005a36:	ec53 2b10 	vmov	r2, r3, d0
 8005a3a:	ee10 0a10 	vmov	r0, s0
 8005a3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005a42:	e7dd      	b.n	8005a00 <sin+0x30>
 8005a44:	f000 fa00 	bl	8005e48 <__kernel_cos>
 8005a48:	e7f5      	b.n	8005a36 <sin+0x66>
 8005a4a:	bf00      	nop
 8005a4c:	f3af 8000 	nop.w
	...
 8005a58:	3fe921fb 	.word	0x3fe921fb
 8005a5c:	7fefffff 	.word	0x7fefffff

08005a60 <__ieee754_rem_pio2>:
 8005a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a64:	ec57 6b10 	vmov	r6, r7, d0
 8005a68:	4bc3      	ldr	r3, [pc, #780]	; (8005d78 <__ieee754_rem_pio2+0x318>)
 8005a6a:	b08d      	sub	sp, #52	; 0x34
 8005a6c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005a70:	4598      	cmp	r8, r3
 8005a72:	4604      	mov	r4, r0
 8005a74:	9704      	str	r7, [sp, #16]
 8005a76:	dc07      	bgt.n	8005a88 <__ieee754_rem_pio2+0x28>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	ed84 0b00 	vstr	d0, [r4]
 8005a80:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005a84:	2500      	movs	r5, #0
 8005a86:	e027      	b.n	8005ad8 <__ieee754_rem_pio2+0x78>
 8005a88:	4bbc      	ldr	r3, [pc, #752]	; (8005d7c <__ieee754_rem_pio2+0x31c>)
 8005a8a:	4598      	cmp	r8, r3
 8005a8c:	dc75      	bgt.n	8005b7a <__ieee754_rem_pio2+0x11a>
 8005a8e:	9b04      	ldr	r3, [sp, #16]
 8005a90:	4dbb      	ldr	r5, [pc, #748]	; (8005d80 <__ieee754_rem_pio2+0x320>)
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	ee10 0a10 	vmov	r0, s0
 8005a98:	a3a9      	add	r3, pc, #676	; (adr r3, 8005d40 <__ieee754_rem_pio2+0x2e0>)
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	4639      	mov	r1, r7
 8005aa0:	dd36      	ble.n	8005b10 <__ieee754_rem_pio2+0xb0>
 8005aa2:	f7fa fb95 	bl	80001d0 <__aeabi_dsub>
 8005aa6:	45a8      	cmp	r8, r5
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	460f      	mov	r7, r1
 8005aac:	d018      	beq.n	8005ae0 <__ieee754_rem_pio2+0x80>
 8005aae:	a3a6      	add	r3, pc, #664	; (adr r3, 8005d48 <__ieee754_rem_pio2+0x2e8>)
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f7fa fb8c 	bl	80001d0 <__aeabi_dsub>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	e9c4 2300 	strd	r2, r3, [r4]
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	f7fa fb84 	bl	80001d0 <__aeabi_dsub>
 8005ac8:	a39f      	add	r3, pc, #636	; (adr r3, 8005d48 <__ieee754_rem_pio2+0x2e8>)
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f7fa fb7f 	bl	80001d0 <__aeabi_dsub>
 8005ad2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ad6:	2501      	movs	r5, #1
 8005ad8:	4628      	mov	r0, r5
 8005ada:	b00d      	add	sp, #52	; 0x34
 8005adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae0:	a39b      	add	r3, pc, #620	; (adr r3, 8005d50 <__ieee754_rem_pio2+0x2f0>)
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	f7fa fb73 	bl	80001d0 <__aeabi_dsub>
 8005aea:	a39b      	add	r3, pc, #620	; (adr r3, 8005d58 <__ieee754_rem_pio2+0x2f8>)
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	4606      	mov	r6, r0
 8005af2:	460f      	mov	r7, r1
 8005af4:	f7fa fb6c 	bl	80001d0 <__aeabi_dsub>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	e9c4 2300 	strd	r2, r3, [r4]
 8005b00:	4630      	mov	r0, r6
 8005b02:	4639      	mov	r1, r7
 8005b04:	f7fa fb64 	bl	80001d0 <__aeabi_dsub>
 8005b08:	a393      	add	r3, pc, #588	; (adr r3, 8005d58 <__ieee754_rem_pio2+0x2f8>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	e7de      	b.n	8005ace <__ieee754_rem_pio2+0x6e>
 8005b10:	f7fa fb60 	bl	80001d4 <__adddf3>
 8005b14:	45a8      	cmp	r8, r5
 8005b16:	4606      	mov	r6, r0
 8005b18:	460f      	mov	r7, r1
 8005b1a:	d016      	beq.n	8005b4a <__ieee754_rem_pio2+0xea>
 8005b1c:	a38a      	add	r3, pc, #552	; (adr r3, 8005d48 <__ieee754_rem_pio2+0x2e8>)
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f7fa fb57 	bl	80001d4 <__adddf3>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	e9c4 2300 	strd	r2, r3, [r4]
 8005b2e:	4630      	mov	r0, r6
 8005b30:	4639      	mov	r1, r7
 8005b32:	f7fa fb4d 	bl	80001d0 <__aeabi_dsub>
 8005b36:	a384      	add	r3, pc, #528	; (adr r3, 8005d48 <__ieee754_rem_pio2+0x2e8>)
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f7fa fb4a 	bl	80001d4 <__adddf3>
 8005b40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005b48:	e7c6      	b.n	8005ad8 <__ieee754_rem_pio2+0x78>
 8005b4a:	a381      	add	r3, pc, #516	; (adr r3, 8005d50 <__ieee754_rem_pio2+0x2f0>)
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f7fa fb40 	bl	80001d4 <__adddf3>
 8005b54:	a380      	add	r3, pc, #512	; (adr r3, 8005d58 <__ieee754_rem_pio2+0x2f8>)
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	460f      	mov	r7, r1
 8005b5e:	f7fa fb39 	bl	80001d4 <__adddf3>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	e9c4 2300 	strd	r2, r3, [r4]
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	4639      	mov	r1, r7
 8005b6e:	f7fa fb2f 	bl	80001d0 <__aeabi_dsub>
 8005b72:	a379      	add	r3, pc, #484	; (adr r3, 8005d58 <__ieee754_rem_pio2+0x2f8>)
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	e7e0      	b.n	8005b3c <__ieee754_rem_pio2+0xdc>
 8005b7a:	4b82      	ldr	r3, [pc, #520]	; (8005d84 <__ieee754_rem_pio2+0x324>)
 8005b7c:	4598      	cmp	r8, r3
 8005b7e:	f300 80d0 	bgt.w	8005d22 <__ieee754_rem_pio2+0x2c2>
 8005b82:	f000 fe23 	bl	80067cc <fabs>
 8005b86:	ec57 6b10 	vmov	r6, r7, d0
 8005b8a:	ee10 0a10 	vmov	r0, s0
 8005b8e:	a374      	add	r3, pc, #464	; (adr r3, 8005d60 <__ieee754_rem_pio2+0x300>)
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	4639      	mov	r1, r7
 8005b96:	f7fa fcd3 	bl	8000540 <__aeabi_dmul>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4b7a      	ldr	r3, [pc, #488]	; (8005d88 <__ieee754_rem_pio2+0x328>)
 8005b9e:	f7fa fb19 	bl	80001d4 <__adddf3>
 8005ba2:	f7fa ff67 	bl	8000a74 <__aeabi_d2iz>
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	f7fa fc60 	bl	800046c <__aeabi_i2d>
 8005bac:	a364      	add	r3, pc, #400	; (adr r3, 8005d40 <__ieee754_rem_pio2+0x2e0>)
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bb6:	f7fa fcc3 	bl	8000540 <__aeabi_dmul>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa fb05 	bl	80001d0 <__aeabi_dsub>
 8005bc6:	a360      	add	r3, pc, #384	; (adr r3, 8005d48 <__ieee754_rem_pio2+0x2e8>)
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	4682      	mov	sl, r0
 8005bce:	468b      	mov	fp, r1
 8005bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bd4:	f7fa fcb4 	bl	8000540 <__aeabi_dmul>
 8005bd8:	2d1f      	cmp	r5, #31
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460f      	mov	r7, r1
 8005bde:	dc0c      	bgt.n	8005bfa <__ieee754_rem_pio2+0x19a>
 8005be0:	1e6a      	subs	r2, r5, #1
 8005be2:	4b6a      	ldr	r3, [pc, #424]	; (8005d8c <__ieee754_rem_pio2+0x32c>)
 8005be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be8:	4543      	cmp	r3, r8
 8005bea:	d006      	beq.n	8005bfa <__ieee754_rem_pio2+0x19a>
 8005bec:	4632      	mov	r2, r6
 8005bee:	463b      	mov	r3, r7
 8005bf0:	4650      	mov	r0, sl
 8005bf2:	4659      	mov	r1, fp
 8005bf4:	f7fa faec 	bl	80001d0 <__aeabi_dsub>
 8005bf8:	e00e      	b.n	8005c18 <__ieee754_rem_pio2+0x1b8>
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	4650      	mov	r0, sl
 8005c00:	4659      	mov	r1, fp
 8005c02:	f7fa fae5 	bl	80001d0 <__aeabi_dsub>
 8005c06:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005c0a:	9305      	str	r3, [sp, #20]
 8005c0c:	9a05      	ldr	r2, [sp, #20]
 8005c0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	dc02      	bgt.n	8005c1e <__ieee754_rem_pio2+0x1be>
 8005c18:	e9c4 0100 	strd	r0, r1, [r4]
 8005c1c:	e039      	b.n	8005c92 <__ieee754_rem_pio2+0x232>
 8005c1e:	a34c      	add	r3, pc, #304	; (adr r3, 8005d50 <__ieee754_rem_pio2+0x2f0>)
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c28:	f7fa fc8a 	bl	8000540 <__aeabi_dmul>
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	460f      	mov	r7, r1
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4650      	mov	r0, sl
 8005c36:	4659      	mov	r1, fp
 8005c38:	f7fa faca 	bl	80001d0 <__aeabi_dsub>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4680      	mov	r8, r0
 8005c42:	4689      	mov	r9, r1
 8005c44:	4650      	mov	r0, sl
 8005c46:	4659      	mov	r1, fp
 8005c48:	f7fa fac2 	bl	80001d0 <__aeabi_dsub>
 8005c4c:	4632      	mov	r2, r6
 8005c4e:	463b      	mov	r3, r7
 8005c50:	f7fa fabe 	bl	80001d0 <__aeabi_dsub>
 8005c54:	a340      	add	r3, pc, #256	; (adr r3, 8005d58 <__ieee754_rem_pio2+0x2f8>)
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	460f      	mov	r7, r1
 8005c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c62:	f7fa fc6d 	bl	8000540 <__aeabi_dmul>
 8005c66:	4632      	mov	r2, r6
 8005c68:	463b      	mov	r3, r7
 8005c6a:	f7fa fab1 	bl	80001d0 <__aeabi_dsub>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4606      	mov	r6, r0
 8005c74:	460f      	mov	r7, r1
 8005c76:	4640      	mov	r0, r8
 8005c78:	4649      	mov	r1, r9
 8005c7a:	f7fa faa9 	bl	80001d0 <__aeabi_dsub>
 8005c7e:	9a05      	ldr	r2, [sp, #20]
 8005c80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b31      	cmp	r3, #49	; 0x31
 8005c88:	dc20      	bgt.n	8005ccc <__ieee754_rem_pio2+0x26c>
 8005c8a:	e9c4 0100 	strd	r0, r1, [r4]
 8005c8e:	46c2      	mov	sl, r8
 8005c90:	46cb      	mov	fp, r9
 8005c92:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005c96:	4650      	mov	r0, sl
 8005c98:	4642      	mov	r2, r8
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	f7fa fa97 	bl	80001d0 <__aeabi_dsub>
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	4632      	mov	r2, r6
 8005ca6:	f7fa fa93 	bl	80001d0 <__aeabi_dsub>
 8005caa:	9b04      	ldr	r3, [sp, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005cb2:	f6bf af11 	bge.w	8005ad8 <__ieee754_rem_pio2+0x78>
 8005cb6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005cba:	6063      	str	r3, [r4, #4]
 8005cbc:	f8c4 8000 	str.w	r8, [r4]
 8005cc0:	60a0      	str	r0, [r4, #8]
 8005cc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cc6:	60e3      	str	r3, [r4, #12]
 8005cc8:	426d      	negs	r5, r5
 8005cca:	e705      	b.n	8005ad8 <__ieee754_rem_pio2+0x78>
 8005ccc:	a326      	add	r3, pc, #152	; (adr r3, 8005d68 <__ieee754_rem_pio2+0x308>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cd6:	f7fa fc33 	bl	8000540 <__aeabi_dmul>
 8005cda:	4606      	mov	r6, r0
 8005cdc:	460f      	mov	r7, r1
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	f7fa fa73 	bl	80001d0 <__aeabi_dsub>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4682      	mov	sl, r0
 8005cf0:	468b      	mov	fp, r1
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	f7fa fa6b 	bl	80001d0 <__aeabi_dsub>
 8005cfa:	4632      	mov	r2, r6
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	f7fa fa67 	bl	80001d0 <__aeabi_dsub>
 8005d02:	a31b      	add	r3, pc, #108	; (adr r3, 8005d70 <__ieee754_rem_pio2+0x310>)
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	4606      	mov	r6, r0
 8005d0a:	460f      	mov	r7, r1
 8005d0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d10:	f7fa fc16 	bl	8000540 <__aeabi_dmul>
 8005d14:	4632      	mov	r2, r6
 8005d16:	463b      	mov	r3, r7
 8005d18:	f7fa fa5a 	bl	80001d0 <__aeabi_dsub>
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	460f      	mov	r7, r1
 8005d20:	e764      	b.n	8005bec <__ieee754_rem_pio2+0x18c>
 8005d22:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <__ieee754_rem_pio2+0x330>)
 8005d24:	4598      	cmp	r8, r3
 8005d26:	dd35      	ble.n	8005d94 <__ieee754_rem_pio2+0x334>
 8005d28:	ee10 2a10 	vmov	r2, s0
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	4630      	mov	r0, r6
 8005d30:	4639      	mov	r1, r7
 8005d32:	f7fa fa4d 	bl	80001d0 <__aeabi_dsub>
 8005d36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d3a:	e9c4 0100 	strd	r0, r1, [r4]
 8005d3e:	e6a1      	b.n	8005a84 <__ieee754_rem_pio2+0x24>
 8005d40:	54400000 	.word	0x54400000
 8005d44:	3ff921fb 	.word	0x3ff921fb
 8005d48:	1a626331 	.word	0x1a626331
 8005d4c:	3dd0b461 	.word	0x3dd0b461
 8005d50:	1a600000 	.word	0x1a600000
 8005d54:	3dd0b461 	.word	0x3dd0b461
 8005d58:	2e037073 	.word	0x2e037073
 8005d5c:	3ba3198a 	.word	0x3ba3198a
 8005d60:	6dc9c883 	.word	0x6dc9c883
 8005d64:	3fe45f30 	.word	0x3fe45f30
 8005d68:	2e000000 	.word	0x2e000000
 8005d6c:	3ba3198a 	.word	0x3ba3198a
 8005d70:	252049c1 	.word	0x252049c1
 8005d74:	397b839a 	.word	0x397b839a
 8005d78:	3fe921fb 	.word	0x3fe921fb
 8005d7c:	4002d97b 	.word	0x4002d97b
 8005d80:	3ff921fb 	.word	0x3ff921fb
 8005d84:	413921fb 	.word	0x413921fb
 8005d88:	3fe00000 	.word	0x3fe00000
 8005d8c:	08006d3c 	.word	0x08006d3c
 8005d90:	7fefffff 	.word	0x7fefffff
 8005d94:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005d98:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005d9c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005da0:	4630      	mov	r0, r6
 8005da2:	460f      	mov	r7, r1
 8005da4:	f7fa fe66 	bl	8000a74 <__aeabi_d2iz>
 8005da8:	f7fa fb60 	bl	800046c <__aeabi_i2d>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4630      	mov	r0, r6
 8005db2:	4639      	mov	r1, r7
 8005db4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005db8:	f7fa fa0a 	bl	80001d0 <__aeabi_dsub>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	4b1f      	ldr	r3, [pc, #124]	; (8005e3c <__ieee754_rem_pio2+0x3dc>)
 8005dc0:	f7fa fbbe 	bl	8000540 <__aeabi_dmul>
 8005dc4:	460f      	mov	r7, r1
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	f7fa fe54 	bl	8000a74 <__aeabi_d2iz>
 8005dcc:	f7fa fb4e 	bl	800046c <__aeabi_i2d>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005ddc:	f7fa f9f8 	bl	80001d0 <__aeabi_dsub>
 8005de0:	2200      	movs	r2, #0
 8005de2:	4b16      	ldr	r3, [pc, #88]	; (8005e3c <__ieee754_rem_pio2+0x3dc>)
 8005de4:	f7fa fbac 	bl	8000540 <__aeabi_dmul>
 8005de8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005dec:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005df0:	f04f 0803 	mov.w	r8, #3
 8005df4:	2600      	movs	r6, #0
 8005df6:	2700      	movs	r7, #0
 8005df8:	4632      	mov	r2, r6
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005e00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8005e04:	f7fa fe04 	bl	8000a10 <__aeabi_dcmpeq>
 8005e08:	b9b0      	cbnz	r0, 8005e38 <__ieee754_rem_pio2+0x3d8>
 8005e0a:	4b0d      	ldr	r3, [pc, #52]	; (8005e40 <__ieee754_rem_pio2+0x3e0>)
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	2302      	movs	r3, #2
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	462a      	mov	r2, r5
 8005e14:	4643      	mov	r3, r8
 8005e16:	4621      	mov	r1, r4
 8005e18:	a806      	add	r0, sp, #24
 8005e1a:	f000 f8dd 	bl	8005fd8 <__kernel_rem_pio2>
 8005e1e:	9b04      	ldr	r3, [sp, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	4605      	mov	r5, r0
 8005e24:	f6bf ae58 	bge.w	8005ad8 <__ieee754_rem_pio2+0x78>
 8005e28:	6863      	ldr	r3, [r4, #4]
 8005e2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e2e:	6063      	str	r3, [r4, #4]
 8005e30:	68e3      	ldr	r3, [r4, #12]
 8005e32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e36:	e746      	b.n	8005cc6 <__ieee754_rem_pio2+0x266>
 8005e38:	46d0      	mov	r8, sl
 8005e3a:	e7dd      	b.n	8005df8 <__ieee754_rem_pio2+0x398>
 8005e3c:	41700000 	.word	0x41700000
 8005e40:	08006dbc 	.word	0x08006dbc
 8005e44:	00000000 	.word	0x00000000

08005e48 <__kernel_cos>:
 8005e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	ec59 8b10 	vmov	r8, r9, d0
 8005e50:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8005e54:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005e58:	ed2d 8b02 	vpush	{d8}
 8005e5c:	eeb0 8a41 	vmov.f32	s16, s2
 8005e60:	eef0 8a61 	vmov.f32	s17, s3
 8005e64:	da07      	bge.n	8005e76 <__kernel_cos+0x2e>
 8005e66:	ee10 0a10 	vmov	r0, s0
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	f7fa fe02 	bl	8000a74 <__aeabi_d2iz>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	f000 8089 	beq.w	8005f88 <__kernel_cos+0x140>
 8005e76:	4642      	mov	r2, r8
 8005e78:	464b      	mov	r3, r9
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	f7fa fb5f 	bl	8000540 <__aeabi_dmul>
 8005e82:	2200      	movs	r2, #0
 8005e84:	4b4e      	ldr	r3, [pc, #312]	; (8005fc0 <__kernel_cos+0x178>)
 8005e86:	4604      	mov	r4, r0
 8005e88:	460d      	mov	r5, r1
 8005e8a:	f7fa fb59 	bl	8000540 <__aeabi_dmul>
 8005e8e:	a340      	add	r3, pc, #256	; (adr r3, 8005f90 <__kernel_cos+0x148>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	4682      	mov	sl, r0
 8005e96:	468b      	mov	fp, r1
 8005e98:	4620      	mov	r0, r4
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	f7fa fb50 	bl	8000540 <__aeabi_dmul>
 8005ea0:	a33d      	add	r3, pc, #244	; (adr r3, 8005f98 <__kernel_cos+0x150>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa f995 	bl	80001d4 <__adddf3>
 8005eaa:	4622      	mov	r2, r4
 8005eac:	462b      	mov	r3, r5
 8005eae:	f7fa fb47 	bl	8000540 <__aeabi_dmul>
 8005eb2:	a33b      	add	r3, pc, #236	; (adr r3, 8005fa0 <__kernel_cos+0x158>)
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f7fa f98a 	bl	80001d0 <__aeabi_dsub>
 8005ebc:	4622      	mov	r2, r4
 8005ebe:	462b      	mov	r3, r5
 8005ec0:	f7fa fb3e 	bl	8000540 <__aeabi_dmul>
 8005ec4:	a338      	add	r3, pc, #224	; (adr r3, 8005fa8 <__kernel_cos+0x160>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa f983 	bl	80001d4 <__adddf3>
 8005ece:	4622      	mov	r2, r4
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	f7fa fb35 	bl	8000540 <__aeabi_dmul>
 8005ed6:	a336      	add	r3, pc, #216	; (adr r3, 8005fb0 <__kernel_cos+0x168>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f7fa f978 	bl	80001d0 <__aeabi_dsub>
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	462b      	mov	r3, r5
 8005ee4:	f7fa fb2c 	bl	8000540 <__aeabi_dmul>
 8005ee8:	a333      	add	r3, pc, #204	; (adr r3, 8005fb8 <__kernel_cos+0x170>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa f971 	bl	80001d4 <__adddf3>
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	462b      	mov	r3, r5
 8005ef6:	f7fa fb23 	bl	8000540 <__aeabi_dmul>
 8005efa:	4622      	mov	r2, r4
 8005efc:	462b      	mov	r3, r5
 8005efe:	f7fa fb1f 	bl	8000540 <__aeabi_dmul>
 8005f02:	ec53 2b18 	vmov	r2, r3, d8
 8005f06:	4604      	mov	r4, r0
 8005f08:	460d      	mov	r5, r1
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	f7fa fb17 	bl	8000540 <__aeabi_dmul>
 8005f12:	460b      	mov	r3, r1
 8005f14:	4602      	mov	r2, r0
 8005f16:	4629      	mov	r1, r5
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f7fa f959 	bl	80001d0 <__aeabi_dsub>
 8005f1e:	4b29      	ldr	r3, [pc, #164]	; (8005fc4 <__kernel_cos+0x17c>)
 8005f20:	429e      	cmp	r6, r3
 8005f22:	4680      	mov	r8, r0
 8005f24:	4689      	mov	r9, r1
 8005f26:	dc11      	bgt.n	8005f4c <__kernel_cos+0x104>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4650      	mov	r0, sl
 8005f2e:	4659      	mov	r1, fp
 8005f30:	f7fa f94e 	bl	80001d0 <__aeabi_dsub>
 8005f34:	460b      	mov	r3, r1
 8005f36:	4924      	ldr	r1, [pc, #144]	; (8005fc8 <__kernel_cos+0x180>)
 8005f38:	4602      	mov	r2, r0
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	f7fa f948 	bl	80001d0 <__aeabi_dsub>
 8005f40:	ecbd 8b02 	vpop	{d8}
 8005f44:	ec41 0b10 	vmov	d0, r0, r1
 8005f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4c:	4b1f      	ldr	r3, [pc, #124]	; (8005fcc <__kernel_cos+0x184>)
 8005f4e:	491e      	ldr	r1, [pc, #120]	; (8005fc8 <__kernel_cos+0x180>)
 8005f50:	429e      	cmp	r6, r3
 8005f52:	bfcc      	ite	gt
 8005f54:	4d1e      	ldrgt	r5, [pc, #120]	; (8005fd0 <__kernel_cos+0x188>)
 8005f56:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005f5a:	2400      	movs	r4, #0
 8005f5c:	4622      	mov	r2, r4
 8005f5e:	462b      	mov	r3, r5
 8005f60:	2000      	movs	r0, #0
 8005f62:	f7fa f935 	bl	80001d0 <__aeabi_dsub>
 8005f66:	4622      	mov	r2, r4
 8005f68:	4606      	mov	r6, r0
 8005f6a:	460f      	mov	r7, r1
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	4650      	mov	r0, sl
 8005f70:	4659      	mov	r1, fp
 8005f72:	f7fa f92d 	bl	80001d0 <__aeabi_dsub>
 8005f76:	4642      	mov	r2, r8
 8005f78:	464b      	mov	r3, r9
 8005f7a:	f7fa f929 	bl	80001d0 <__aeabi_dsub>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4630      	mov	r0, r6
 8005f84:	4639      	mov	r1, r7
 8005f86:	e7d9      	b.n	8005f3c <__kernel_cos+0xf4>
 8005f88:	2000      	movs	r0, #0
 8005f8a:	490f      	ldr	r1, [pc, #60]	; (8005fc8 <__kernel_cos+0x180>)
 8005f8c:	e7d8      	b.n	8005f40 <__kernel_cos+0xf8>
 8005f8e:	bf00      	nop
 8005f90:	be8838d4 	.word	0xbe8838d4
 8005f94:	bda8fae9 	.word	0xbda8fae9
 8005f98:	bdb4b1c4 	.word	0xbdb4b1c4
 8005f9c:	3e21ee9e 	.word	0x3e21ee9e
 8005fa0:	809c52ad 	.word	0x809c52ad
 8005fa4:	3e927e4f 	.word	0x3e927e4f
 8005fa8:	19cb1590 	.word	0x19cb1590
 8005fac:	3efa01a0 	.word	0x3efa01a0
 8005fb0:	16c15177 	.word	0x16c15177
 8005fb4:	3f56c16c 	.word	0x3f56c16c
 8005fb8:	5555554c 	.word	0x5555554c
 8005fbc:	3fa55555 	.word	0x3fa55555
 8005fc0:	3fe00000 	.word	0x3fe00000
 8005fc4:	3fd33332 	.word	0x3fd33332
 8005fc8:	3ff00000 	.word	0x3ff00000
 8005fcc:	3fe90000 	.word	0x3fe90000
 8005fd0:	3fd20000 	.word	0x3fd20000
 8005fd4:	00000000 	.word	0x00000000

08005fd8 <__kernel_rem_pio2>:
 8005fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	ed2d 8b02 	vpush	{d8}
 8005fe0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005fe4:	1ed4      	subs	r4, r2, #3
 8005fe6:	9308      	str	r3, [sp, #32]
 8005fe8:	9101      	str	r1, [sp, #4]
 8005fea:	4bc5      	ldr	r3, [pc, #788]	; (8006300 <__kernel_rem_pio2+0x328>)
 8005fec:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005fee:	9009      	str	r0, [sp, #36]	; 0x24
 8005ff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005ff4:	9304      	str	r3, [sp, #16]
 8005ff6:	9b08      	ldr	r3, [sp, #32]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	9307      	str	r3, [sp, #28]
 8005ffc:	2318      	movs	r3, #24
 8005ffe:	fb94 f4f3 	sdiv	r4, r4, r3
 8006002:	f06f 0317 	mvn.w	r3, #23
 8006006:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800600a:	fb04 3303 	mla	r3, r4, r3, r3
 800600e:	eb03 0a02 	add.w	sl, r3, r2
 8006012:	9b04      	ldr	r3, [sp, #16]
 8006014:	9a07      	ldr	r2, [sp, #28]
 8006016:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80062f0 <__kernel_rem_pio2+0x318>
 800601a:	eb03 0802 	add.w	r8, r3, r2
 800601e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006020:	1aa7      	subs	r7, r4, r2
 8006022:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006026:	ae22      	add	r6, sp, #136	; 0x88
 8006028:	2500      	movs	r5, #0
 800602a:	4545      	cmp	r5, r8
 800602c:	dd13      	ble.n	8006056 <__kernel_rem_pio2+0x7e>
 800602e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80062f0 <__kernel_rem_pio2+0x318>
 8006032:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006036:	2600      	movs	r6, #0
 8006038:	9b04      	ldr	r3, [sp, #16]
 800603a:	429e      	cmp	r6, r3
 800603c:	dc32      	bgt.n	80060a4 <__kernel_rem_pio2+0xcc>
 800603e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006040:	9302      	str	r3, [sp, #8]
 8006042:	9b08      	ldr	r3, [sp, #32]
 8006044:	199d      	adds	r5, r3, r6
 8006046:	ab22      	add	r3, sp, #136	; 0x88
 8006048:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800604c:	9306      	str	r3, [sp, #24]
 800604e:	ec59 8b18 	vmov	r8, r9, d8
 8006052:	2700      	movs	r7, #0
 8006054:	e01f      	b.n	8006096 <__kernel_rem_pio2+0xbe>
 8006056:	42ef      	cmn	r7, r5
 8006058:	d407      	bmi.n	800606a <__kernel_rem_pio2+0x92>
 800605a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800605e:	f7fa fa05 	bl	800046c <__aeabi_i2d>
 8006062:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006066:	3501      	adds	r5, #1
 8006068:	e7df      	b.n	800602a <__kernel_rem_pio2+0x52>
 800606a:	ec51 0b18 	vmov	r0, r1, d8
 800606e:	e7f8      	b.n	8006062 <__kernel_rem_pio2+0x8a>
 8006070:	9906      	ldr	r1, [sp, #24]
 8006072:	9d02      	ldr	r5, [sp, #8]
 8006074:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006078:	9106      	str	r1, [sp, #24]
 800607a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800607e:	9502      	str	r5, [sp, #8]
 8006080:	f7fa fa5e 	bl	8000540 <__aeabi_dmul>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4640      	mov	r0, r8
 800608a:	4649      	mov	r1, r9
 800608c:	f7fa f8a2 	bl	80001d4 <__adddf3>
 8006090:	3701      	adds	r7, #1
 8006092:	4680      	mov	r8, r0
 8006094:	4689      	mov	r9, r1
 8006096:	9b07      	ldr	r3, [sp, #28]
 8006098:	429f      	cmp	r7, r3
 800609a:	dde9      	ble.n	8006070 <__kernel_rem_pio2+0x98>
 800609c:	e8eb 8902 	strd	r8, r9, [fp], #8
 80060a0:	3601      	adds	r6, #1
 80060a2:	e7c9      	b.n	8006038 <__kernel_rem_pio2+0x60>
 80060a4:	9b04      	ldr	r3, [sp, #16]
 80060a6:	aa0e      	add	r2, sp, #56	; 0x38
 80060a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80060ac:	930c      	str	r3, [sp, #48]	; 0x30
 80060ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80060b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80060b4:	9c04      	ldr	r4, [sp, #16]
 80060b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80060b8:	ab9a      	add	r3, sp, #616	; 0x268
 80060ba:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80060be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80060c6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80060ca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80060ce:	ab9a      	add	r3, sp, #616	; 0x268
 80060d0:	445b      	add	r3, fp
 80060d2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80060d6:	2500      	movs	r5, #0
 80060d8:	1b63      	subs	r3, r4, r5
 80060da:	2b00      	cmp	r3, #0
 80060dc:	dc78      	bgt.n	80061d0 <__kernel_rem_pio2+0x1f8>
 80060de:	4650      	mov	r0, sl
 80060e0:	ec49 8b10 	vmov	d0, r8, r9
 80060e4:	f000 fc00 	bl	80068e8 <scalbn>
 80060e8:	ec57 6b10 	vmov	r6, r7, d0
 80060ec:	2200      	movs	r2, #0
 80060ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80060f2:	ee10 0a10 	vmov	r0, s0
 80060f6:	4639      	mov	r1, r7
 80060f8:	f7fa fa22 	bl	8000540 <__aeabi_dmul>
 80060fc:	ec41 0b10 	vmov	d0, r0, r1
 8006100:	f000 fb6e 	bl	80067e0 <floor>
 8006104:	2200      	movs	r2, #0
 8006106:	ec51 0b10 	vmov	r0, r1, d0
 800610a:	4b7e      	ldr	r3, [pc, #504]	; (8006304 <__kernel_rem_pio2+0x32c>)
 800610c:	f7fa fa18 	bl	8000540 <__aeabi_dmul>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4630      	mov	r0, r6
 8006116:	4639      	mov	r1, r7
 8006118:	f7fa f85a 	bl	80001d0 <__aeabi_dsub>
 800611c:	460f      	mov	r7, r1
 800611e:	4606      	mov	r6, r0
 8006120:	f7fa fca8 	bl	8000a74 <__aeabi_d2iz>
 8006124:	9006      	str	r0, [sp, #24]
 8006126:	f7fa f9a1 	bl	800046c <__aeabi_i2d>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4630      	mov	r0, r6
 8006130:	4639      	mov	r1, r7
 8006132:	f7fa f84d 	bl	80001d0 <__aeabi_dsub>
 8006136:	f1ba 0f00 	cmp.w	sl, #0
 800613a:	4606      	mov	r6, r0
 800613c:	460f      	mov	r7, r1
 800613e:	dd6c      	ble.n	800621a <__kernel_rem_pio2+0x242>
 8006140:	1e62      	subs	r2, r4, #1
 8006142:	ab0e      	add	r3, sp, #56	; 0x38
 8006144:	f1ca 0118 	rsb	r1, sl, #24
 8006148:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800614c:	9d06      	ldr	r5, [sp, #24]
 800614e:	fa40 f301 	asr.w	r3, r0, r1
 8006152:	441d      	add	r5, r3
 8006154:	408b      	lsls	r3, r1
 8006156:	1ac0      	subs	r0, r0, r3
 8006158:	ab0e      	add	r3, sp, #56	; 0x38
 800615a:	9506      	str	r5, [sp, #24]
 800615c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006160:	f1ca 0317 	rsb	r3, sl, #23
 8006164:	fa40 f303 	asr.w	r3, r0, r3
 8006168:	9302      	str	r3, [sp, #8]
 800616a:	9b02      	ldr	r3, [sp, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	dd62      	ble.n	8006236 <__kernel_rem_pio2+0x25e>
 8006170:	9b06      	ldr	r3, [sp, #24]
 8006172:	2200      	movs	r2, #0
 8006174:	3301      	adds	r3, #1
 8006176:	9306      	str	r3, [sp, #24]
 8006178:	4615      	mov	r5, r2
 800617a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800617e:	4294      	cmp	r4, r2
 8006180:	f300 8095 	bgt.w	80062ae <__kernel_rem_pio2+0x2d6>
 8006184:	f1ba 0f00 	cmp.w	sl, #0
 8006188:	dd07      	ble.n	800619a <__kernel_rem_pio2+0x1c2>
 800618a:	f1ba 0f01 	cmp.w	sl, #1
 800618e:	f000 80a2 	beq.w	80062d6 <__kernel_rem_pio2+0x2fe>
 8006192:	f1ba 0f02 	cmp.w	sl, #2
 8006196:	f000 80c1 	beq.w	800631c <__kernel_rem_pio2+0x344>
 800619a:	9b02      	ldr	r3, [sp, #8]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d14a      	bne.n	8006236 <__kernel_rem_pio2+0x25e>
 80061a0:	4632      	mov	r2, r6
 80061a2:	463b      	mov	r3, r7
 80061a4:	2000      	movs	r0, #0
 80061a6:	4958      	ldr	r1, [pc, #352]	; (8006308 <__kernel_rem_pio2+0x330>)
 80061a8:	f7fa f812 	bl	80001d0 <__aeabi_dsub>
 80061ac:	4606      	mov	r6, r0
 80061ae:	460f      	mov	r7, r1
 80061b0:	2d00      	cmp	r5, #0
 80061b2:	d040      	beq.n	8006236 <__kernel_rem_pio2+0x25e>
 80061b4:	4650      	mov	r0, sl
 80061b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80062f8 <__kernel_rem_pio2+0x320>
 80061ba:	f000 fb95 	bl	80068e8 <scalbn>
 80061be:	4630      	mov	r0, r6
 80061c0:	4639      	mov	r1, r7
 80061c2:	ec53 2b10 	vmov	r2, r3, d0
 80061c6:	f7fa f803 	bl	80001d0 <__aeabi_dsub>
 80061ca:	4606      	mov	r6, r0
 80061cc:	460f      	mov	r7, r1
 80061ce:	e032      	b.n	8006236 <__kernel_rem_pio2+0x25e>
 80061d0:	2200      	movs	r2, #0
 80061d2:	4b4e      	ldr	r3, [pc, #312]	; (800630c <__kernel_rem_pio2+0x334>)
 80061d4:	4640      	mov	r0, r8
 80061d6:	4649      	mov	r1, r9
 80061d8:	f7fa f9b2 	bl	8000540 <__aeabi_dmul>
 80061dc:	f7fa fc4a 	bl	8000a74 <__aeabi_d2iz>
 80061e0:	f7fa f944 	bl	800046c <__aeabi_i2d>
 80061e4:	2200      	movs	r2, #0
 80061e6:	4b4a      	ldr	r3, [pc, #296]	; (8006310 <__kernel_rem_pio2+0x338>)
 80061e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ec:	f7fa f9a8 	bl	8000540 <__aeabi_dmul>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4640      	mov	r0, r8
 80061f6:	4649      	mov	r1, r9
 80061f8:	f7f9 ffea 	bl	80001d0 <__aeabi_dsub>
 80061fc:	f7fa fc3a 	bl	8000a74 <__aeabi_d2iz>
 8006200:	ab0e      	add	r3, sp, #56	; 0x38
 8006202:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006206:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800620a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800620e:	f7f9 ffe1 	bl	80001d4 <__adddf3>
 8006212:	3501      	adds	r5, #1
 8006214:	4680      	mov	r8, r0
 8006216:	4689      	mov	r9, r1
 8006218:	e75e      	b.n	80060d8 <__kernel_rem_pio2+0x100>
 800621a:	d105      	bne.n	8006228 <__kernel_rem_pio2+0x250>
 800621c:	1e63      	subs	r3, r4, #1
 800621e:	aa0e      	add	r2, sp, #56	; 0x38
 8006220:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006224:	15c3      	asrs	r3, r0, #23
 8006226:	e79f      	b.n	8006168 <__kernel_rem_pio2+0x190>
 8006228:	2200      	movs	r2, #0
 800622a:	4b3a      	ldr	r3, [pc, #232]	; (8006314 <__kernel_rem_pio2+0x33c>)
 800622c:	f7fa fc0e 	bl	8000a4c <__aeabi_dcmpge>
 8006230:	2800      	cmp	r0, #0
 8006232:	d139      	bne.n	80062a8 <__kernel_rem_pio2+0x2d0>
 8006234:	9002      	str	r0, [sp, #8]
 8006236:	2200      	movs	r2, #0
 8006238:	2300      	movs	r3, #0
 800623a:	4630      	mov	r0, r6
 800623c:	4639      	mov	r1, r7
 800623e:	f7fa fbe7 	bl	8000a10 <__aeabi_dcmpeq>
 8006242:	2800      	cmp	r0, #0
 8006244:	f000 80c7 	beq.w	80063d6 <__kernel_rem_pio2+0x3fe>
 8006248:	1e65      	subs	r5, r4, #1
 800624a:	462b      	mov	r3, r5
 800624c:	2200      	movs	r2, #0
 800624e:	9904      	ldr	r1, [sp, #16]
 8006250:	428b      	cmp	r3, r1
 8006252:	da6a      	bge.n	800632a <__kernel_rem_pio2+0x352>
 8006254:	2a00      	cmp	r2, #0
 8006256:	f000 8088 	beq.w	800636a <__kernel_rem_pio2+0x392>
 800625a:	ab0e      	add	r3, sp, #56	; 0x38
 800625c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006260:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80b4 	beq.w	80063d2 <__kernel_rem_pio2+0x3fa>
 800626a:	4650      	mov	r0, sl
 800626c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80062f8 <__kernel_rem_pio2+0x320>
 8006270:	f000 fb3a 	bl	80068e8 <scalbn>
 8006274:	00ec      	lsls	r4, r5, #3
 8006276:	ab72      	add	r3, sp, #456	; 0x1c8
 8006278:	191e      	adds	r6, r3, r4
 800627a:	ec59 8b10 	vmov	r8, r9, d0
 800627e:	f106 0a08 	add.w	sl, r6, #8
 8006282:	462f      	mov	r7, r5
 8006284:	2f00      	cmp	r7, #0
 8006286:	f280 80df 	bge.w	8006448 <__kernel_rem_pio2+0x470>
 800628a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80062f0 <__kernel_rem_pio2+0x318>
 800628e:	f04f 0a00 	mov.w	sl, #0
 8006292:	eba5 030a 	sub.w	r3, r5, sl
 8006296:	2b00      	cmp	r3, #0
 8006298:	f2c0 810a 	blt.w	80064b0 <__kernel_rem_pio2+0x4d8>
 800629c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006318 <__kernel_rem_pio2+0x340>
 80062a0:	ec59 8b18 	vmov	r8, r9, d8
 80062a4:	2700      	movs	r7, #0
 80062a6:	e0f5      	b.n	8006494 <__kernel_rem_pio2+0x4bc>
 80062a8:	2302      	movs	r3, #2
 80062aa:	9302      	str	r3, [sp, #8]
 80062ac:	e760      	b.n	8006170 <__kernel_rem_pio2+0x198>
 80062ae:	ab0e      	add	r3, sp, #56	; 0x38
 80062b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b4:	b94d      	cbnz	r5, 80062ca <__kernel_rem_pio2+0x2f2>
 80062b6:	b12b      	cbz	r3, 80062c4 <__kernel_rem_pio2+0x2ec>
 80062b8:	a80e      	add	r0, sp, #56	; 0x38
 80062ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80062be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80062c2:	2301      	movs	r3, #1
 80062c4:	3201      	adds	r2, #1
 80062c6:	461d      	mov	r5, r3
 80062c8:	e759      	b.n	800617e <__kernel_rem_pio2+0x1a6>
 80062ca:	a80e      	add	r0, sp, #56	; 0x38
 80062cc:	1acb      	subs	r3, r1, r3
 80062ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80062d2:	462b      	mov	r3, r5
 80062d4:	e7f6      	b.n	80062c4 <__kernel_rem_pio2+0x2ec>
 80062d6:	1e62      	subs	r2, r4, #1
 80062d8:	ab0e      	add	r3, sp, #56	; 0x38
 80062da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80062e2:	a90e      	add	r1, sp, #56	; 0x38
 80062e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80062e8:	e757      	b.n	800619a <__kernel_rem_pio2+0x1c2>
 80062ea:	bf00      	nop
 80062ec:	f3af 8000 	nop.w
	...
 80062fc:	3ff00000 	.word	0x3ff00000
 8006300:	08006f08 	.word	0x08006f08
 8006304:	40200000 	.word	0x40200000
 8006308:	3ff00000 	.word	0x3ff00000
 800630c:	3e700000 	.word	0x3e700000
 8006310:	41700000 	.word	0x41700000
 8006314:	3fe00000 	.word	0x3fe00000
 8006318:	08006ec8 	.word	0x08006ec8
 800631c:	1e62      	subs	r2, r4, #1
 800631e:	ab0e      	add	r3, sp, #56	; 0x38
 8006320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006324:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006328:	e7db      	b.n	80062e2 <__kernel_rem_pio2+0x30a>
 800632a:	a90e      	add	r1, sp, #56	; 0x38
 800632c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006330:	3b01      	subs	r3, #1
 8006332:	430a      	orrs	r2, r1
 8006334:	e78b      	b.n	800624e <__kernel_rem_pio2+0x276>
 8006336:	3301      	adds	r3, #1
 8006338:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800633c:	2900      	cmp	r1, #0
 800633e:	d0fa      	beq.n	8006336 <__kernel_rem_pio2+0x35e>
 8006340:	9a08      	ldr	r2, [sp, #32]
 8006342:	4422      	add	r2, r4
 8006344:	00d2      	lsls	r2, r2, #3
 8006346:	a922      	add	r1, sp, #136	; 0x88
 8006348:	18e3      	adds	r3, r4, r3
 800634a:	9206      	str	r2, [sp, #24]
 800634c:	440a      	add	r2, r1
 800634e:	9302      	str	r3, [sp, #8]
 8006350:	f10b 0108 	add.w	r1, fp, #8
 8006354:	f102 0308 	add.w	r3, r2, #8
 8006358:	1c66      	adds	r6, r4, #1
 800635a:	910a      	str	r1, [sp, #40]	; 0x28
 800635c:	2500      	movs	r5, #0
 800635e:	930d      	str	r3, [sp, #52]	; 0x34
 8006360:	9b02      	ldr	r3, [sp, #8]
 8006362:	42b3      	cmp	r3, r6
 8006364:	da04      	bge.n	8006370 <__kernel_rem_pio2+0x398>
 8006366:	461c      	mov	r4, r3
 8006368:	e6a6      	b.n	80060b8 <__kernel_rem_pio2+0xe0>
 800636a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800636c:	2301      	movs	r3, #1
 800636e:	e7e3      	b.n	8006338 <__kernel_rem_pio2+0x360>
 8006370:	9b06      	ldr	r3, [sp, #24]
 8006372:	18ef      	adds	r7, r5, r3
 8006374:	ab22      	add	r3, sp, #136	; 0x88
 8006376:	441f      	add	r7, r3
 8006378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800637a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800637e:	f7fa f875 	bl	800046c <__aeabi_i2d>
 8006382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006384:	461c      	mov	r4, r3
 8006386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006388:	e9c7 0100 	strd	r0, r1, [r7]
 800638c:	eb03 0b05 	add.w	fp, r3, r5
 8006390:	2700      	movs	r7, #0
 8006392:	f04f 0800 	mov.w	r8, #0
 8006396:	f04f 0900 	mov.w	r9, #0
 800639a:	9b07      	ldr	r3, [sp, #28]
 800639c:	429f      	cmp	r7, r3
 800639e:	dd08      	ble.n	80063b2 <__kernel_rem_pio2+0x3da>
 80063a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a2:	aa72      	add	r2, sp, #456	; 0x1c8
 80063a4:	18eb      	adds	r3, r5, r3
 80063a6:	4413      	add	r3, r2
 80063a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80063ac:	3601      	adds	r6, #1
 80063ae:	3508      	adds	r5, #8
 80063b0:	e7d6      	b.n	8006360 <__kernel_rem_pio2+0x388>
 80063b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80063b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80063ba:	f7fa f8c1 	bl	8000540 <__aeabi_dmul>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4640      	mov	r0, r8
 80063c4:	4649      	mov	r1, r9
 80063c6:	f7f9 ff05 	bl	80001d4 <__adddf3>
 80063ca:	3701      	adds	r7, #1
 80063cc:	4680      	mov	r8, r0
 80063ce:	4689      	mov	r9, r1
 80063d0:	e7e3      	b.n	800639a <__kernel_rem_pio2+0x3c2>
 80063d2:	3d01      	subs	r5, #1
 80063d4:	e741      	b.n	800625a <__kernel_rem_pio2+0x282>
 80063d6:	f1ca 0000 	rsb	r0, sl, #0
 80063da:	ec47 6b10 	vmov	d0, r6, r7
 80063de:	f000 fa83 	bl	80068e8 <scalbn>
 80063e2:	ec57 6b10 	vmov	r6, r7, d0
 80063e6:	2200      	movs	r2, #0
 80063e8:	4b99      	ldr	r3, [pc, #612]	; (8006650 <__kernel_rem_pio2+0x678>)
 80063ea:	ee10 0a10 	vmov	r0, s0
 80063ee:	4639      	mov	r1, r7
 80063f0:	f7fa fb2c 	bl	8000a4c <__aeabi_dcmpge>
 80063f4:	b1f8      	cbz	r0, 8006436 <__kernel_rem_pio2+0x45e>
 80063f6:	2200      	movs	r2, #0
 80063f8:	4b96      	ldr	r3, [pc, #600]	; (8006654 <__kernel_rem_pio2+0x67c>)
 80063fa:	4630      	mov	r0, r6
 80063fc:	4639      	mov	r1, r7
 80063fe:	f7fa f89f 	bl	8000540 <__aeabi_dmul>
 8006402:	f7fa fb37 	bl	8000a74 <__aeabi_d2iz>
 8006406:	4680      	mov	r8, r0
 8006408:	f7fa f830 	bl	800046c <__aeabi_i2d>
 800640c:	2200      	movs	r2, #0
 800640e:	4b90      	ldr	r3, [pc, #576]	; (8006650 <__kernel_rem_pio2+0x678>)
 8006410:	f7fa f896 	bl	8000540 <__aeabi_dmul>
 8006414:	460b      	mov	r3, r1
 8006416:	4602      	mov	r2, r0
 8006418:	4639      	mov	r1, r7
 800641a:	4630      	mov	r0, r6
 800641c:	f7f9 fed8 	bl	80001d0 <__aeabi_dsub>
 8006420:	f7fa fb28 	bl	8000a74 <__aeabi_d2iz>
 8006424:	1c65      	adds	r5, r4, #1
 8006426:	ab0e      	add	r3, sp, #56	; 0x38
 8006428:	f10a 0a18 	add.w	sl, sl, #24
 800642c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006430:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006434:	e719      	b.n	800626a <__kernel_rem_pio2+0x292>
 8006436:	4630      	mov	r0, r6
 8006438:	4639      	mov	r1, r7
 800643a:	f7fa fb1b 	bl	8000a74 <__aeabi_d2iz>
 800643e:	ab0e      	add	r3, sp, #56	; 0x38
 8006440:	4625      	mov	r5, r4
 8006442:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006446:	e710      	b.n	800626a <__kernel_rem_pio2+0x292>
 8006448:	ab0e      	add	r3, sp, #56	; 0x38
 800644a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800644e:	f7fa f80d 	bl	800046c <__aeabi_i2d>
 8006452:	4642      	mov	r2, r8
 8006454:	464b      	mov	r3, r9
 8006456:	f7fa f873 	bl	8000540 <__aeabi_dmul>
 800645a:	2200      	movs	r2, #0
 800645c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006460:	4b7c      	ldr	r3, [pc, #496]	; (8006654 <__kernel_rem_pio2+0x67c>)
 8006462:	4640      	mov	r0, r8
 8006464:	4649      	mov	r1, r9
 8006466:	f7fa f86b 	bl	8000540 <__aeabi_dmul>
 800646a:	3f01      	subs	r7, #1
 800646c:	4680      	mov	r8, r0
 800646e:	4689      	mov	r9, r1
 8006470:	e708      	b.n	8006284 <__kernel_rem_pio2+0x2ac>
 8006472:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800647e:	f7fa f85f 	bl	8000540 <__aeabi_dmul>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4640      	mov	r0, r8
 8006488:	4649      	mov	r1, r9
 800648a:	f7f9 fea3 	bl	80001d4 <__adddf3>
 800648e:	3701      	adds	r7, #1
 8006490:	4680      	mov	r8, r0
 8006492:	4689      	mov	r9, r1
 8006494:	9b04      	ldr	r3, [sp, #16]
 8006496:	429f      	cmp	r7, r3
 8006498:	dc01      	bgt.n	800649e <__kernel_rem_pio2+0x4c6>
 800649a:	45ba      	cmp	sl, r7
 800649c:	dae9      	bge.n	8006472 <__kernel_rem_pio2+0x49a>
 800649e:	ab4a      	add	r3, sp, #296	; 0x128
 80064a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064a4:	e9c3 8900 	strd	r8, r9, [r3]
 80064a8:	f10a 0a01 	add.w	sl, sl, #1
 80064ac:	3e08      	subs	r6, #8
 80064ae:	e6f0      	b.n	8006292 <__kernel_rem_pio2+0x2ba>
 80064b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d85b      	bhi.n	800656e <__kernel_rem_pio2+0x596>
 80064b6:	e8df f003 	tbb	[pc, r3]
 80064ba:	264a      	.short	0x264a
 80064bc:	0226      	.short	0x0226
 80064be:	ab9a      	add	r3, sp, #616	; 0x268
 80064c0:	441c      	add	r4, r3
 80064c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80064c6:	46a2      	mov	sl, r4
 80064c8:	46ab      	mov	fp, r5
 80064ca:	f1bb 0f00 	cmp.w	fp, #0
 80064ce:	dc6c      	bgt.n	80065aa <__kernel_rem_pio2+0x5d2>
 80064d0:	46a2      	mov	sl, r4
 80064d2:	46ab      	mov	fp, r5
 80064d4:	f1bb 0f01 	cmp.w	fp, #1
 80064d8:	f300 8086 	bgt.w	80065e8 <__kernel_rem_pio2+0x610>
 80064dc:	2000      	movs	r0, #0
 80064de:	2100      	movs	r1, #0
 80064e0:	2d01      	cmp	r5, #1
 80064e2:	f300 80a0 	bgt.w	8006626 <__kernel_rem_pio2+0x64e>
 80064e6:	9b02      	ldr	r3, [sp, #8]
 80064e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80064ec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f040 809e 	bne.w	8006632 <__kernel_rem_pio2+0x65a>
 80064f6:	9b01      	ldr	r3, [sp, #4]
 80064f8:	e9c3 7800 	strd	r7, r8, [r3]
 80064fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006500:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006504:	e033      	b.n	800656e <__kernel_rem_pio2+0x596>
 8006506:	3408      	adds	r4, #8
 8006508:	ab4a      	add	r3, sp, #296	; 0x128
 800650a:	441c      	add	r4, r3
 800650c:	462e      	mov	r6, r5
 800650e:	2000      	movs	r0, #0
 8006510:	2100      	movs	r1, #0
 8006512:	2e00      	cmp	r6, #0
 8006514:	da3a      	bge.n	800658c <__kernel_rem_pio2+0x5b4>
 8006516:	9b02      	ldr	r3, [sp, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d03d      	beq.n	8006598 <__kernel_rem_pio2+0x5c0>
 800651c:	4602      	mov	r2, r0
 800651e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006522:	9c01      	ldr	r4, [sp, #4]
 8006524:	e9c4 2300 	strd	r2, r3, [r4]
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006530:	f7f9 fe4e 	bl	80001d0 <__aeabi_dsub>
 8006534:	ae4c      	add	r6, sp, #304	; 0x130
 8006536:	2401      	movs	r4, #1
 8006538:	42a5      	cmp	r5, r4
 800653a:	da30      	bge.n	800659e <__kernel_rem_pio2+0x5c6>
 800653c:	9b02      	ldr	r3, [sp, #8]
 800653e:	b113      	cbz	r3, 8006546 <__kernel_rem_pio2+0x56e>
 8006540:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006544:	4619      	mov	r1, r3
 8006546:	9b01      	ldr	r3, [sp, #4]
 8006548:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800654c:	e00f      	b.n	800656e <__kernel_rem_pio2+0x596>
 800654e:	ab9a      	add	r3, sp, #616	; 0x268
 8006550:	441c      	add	r4, r3
 8006552:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006556:	2000      	movs	r0, #0
 8006558:	2100      	movs	r1, #0
 800655a:	2d00      	cmp	r5, #0
 800655c:	da10      	bge.n	8006580 <__kernel_rem_pio2+0x5a8>
 800655e:	9b02      	ldr	r3, [sp, #8]
 8006560:	b113      	cbz	r3, 8006568 <__kernel_rem_pio2+0x590>
 8006562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006566:	4619      	mov	r1, r3
 8006568:	9b01      	ldr	r3, [sp, #4]
 800656a:	e9c3 0100 	strd	r0, r1, [r3]
 800656e:	9b06      	ldr	r3, [sp, #24]
 8006570:	f003 0007 	and.w	r0, r3, #7
 8006574:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006578:	ecbd 8b02 	vpop	{d8}
 800657c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006580:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006584:	f7f9 fe26 	bl	80001d4 <__adddf3>
 8006588:	3d01      	subs	r5, #1
 800658a:	e7e6      	b.n	800655a <__kernel_rem_pio2+0x582>
 800658c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006590:	f7f9 fe20 	bl	80001d4 <__adddf3>
 8006594:	3e01      	subs	r6, #1
 8006596:	e7bc      	b.n	8006512 <__kernel_rem_pio2+0x53a>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	e7c1      	b.n	8006522 <__kernel_rem_pio2+0x54a>
 800659e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80065a2:	f7f9 fe17 	bl	80001d4 <__adddf3>
 80065a6:	3401      	adds	r4, #1
 80065a8:	e7c6      	b.n	8006538 <__kernel_rem_pio2+0x560>
 80065aa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80065ae:	ed3a 7b02 	vldmdb	sl!, {d7}
 80065b2:	4640      	mov	r0, r8
 80065b4:	ec53 2b17 	vmov	r2, r3, d7
 80065b8:	4649      	mov	r1, r9
 80065ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 80065be:	f7f9 fe09 	bl	80001d4 <__adddf3>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4606      	mov	r6, r0
 80065c8:	460f      	mov	r7, r1
 80065ca:	4640      	mov	r0, r8
 80065cc:	4649      	mov	r1, r9
 80065ce:	f7f9 fdff 	bl	80001d0 <__aeabi_dsub>
 80065d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065d6:	f7f9 fdfd 	bl	80001d4 <__adddf3>
 80065da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80065de:	e9ca 0100 	strd	r0, r1, [sl]
 80065e2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80065e6:	e770      	b.n	80064ca <__kernel_rem_pio2+0x4f2>
 80065e8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80065ec:	ed3a 7b02 	vldmdb	sl!, {d7}
 80065f0:	4630      	mov	r0, r6
 80065f2:	ec53 2b17 	vmov	r2, r3, d7
 80065f6:	4639      	mov	r1, r7
 80065f8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80065fc:	f7f9 fdea 	bl	80001d4 <__adddf3>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4680      	mov	r8, r0
 8006606:	4689      	mov	r9, r1
 8006608:	4630      	mov	r0, r6
 800660a:	4639      	mov	r1, r7
 800660c:	f7f9 fde0 	bl	80001d0 <__aeabi_dsub>
 8006610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006614:	f7f9 fdde 	bl	80001d4 <__adddf3>
 8006618:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800661c:	e9ca 0100 	strd	r0, r1, [sl]
 8006620:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006624:	e756      	b.n	80064d4 <__kernel_rem_pio2+0x4fc>
 8006626:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800662a:	f7f9 fdd3 	bl	80001d4 <__adddf3>
 800662e:	3d01      	subs	r5, #1
 8006630:	e756      	b.n	80064e0 <__kernel_rem_pio2+0x508>
 8006632:	9b01      	ldr	r3, [sp, #4]
 8006634:	9a01      	ldr	r2, [sp, #4]
 8006636:	601f      	str	r7, [r3, #0]
 8006638:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800663c:	605c      	str	r4, [r3, #4]
 800663e:	609d      	str	r5, [r3, #8]
 8006640:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006644:	60d3      	str	r3, [r2, #12]
 8006646:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800664a:	6110      	str	r0, [r2, #16]
 800664c:	6153      	str	r3, [r2, #20]
 800664e:	e78e      	b.n	800656e <__kernel_rem_pio2+0x596>
 8006650:	41700000 	.word	0x41700000
 8006654:	3e700000 	.word	0x3e700000

08006658 <__kernel_sin>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	ec55 4b10 	vmov	r4, r5, d0
 8006660:	b085      	sub	sp, #20
 8006662:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006666:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800666a:	ed8d 1b00 	vstr	d1, [sp]
 800666e:	9002      	str	r0, [sp, #8]
 8006670:	da06      	bge.n	8006680 <__kernel_sin+0x28>
 8006672:	ee10 0a10 	vmov	r0, s0
 8006676:	4629      	mov	r1, r5
 8006678:	f7fa f9fc 	bl	8000a74 <__aeabi_d2iz>
 800667c:	2800      	cmp	r0, #0
 800667e:	d051      	beq.n	8006724 <__kernel_sin+0xcc>
 8006680:	4622      	mov	r2, r4
 8006682:	462b      	mov	r3, r5
 8006684:	4620      	mov	r0, r4
 8006686:	4629      	mov	r1, r5
 8006688:	f7f9 ff5a 	bl	8000540 <__aeabi_dmul>
 800668c:	4682      	mov	sl, r0
 800668e:	468b      	mov	fp, r1
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4620      	mov	r0, r4
 8006696:	4629      	mov	r1, r5
 8006698:	f7f9 ff52 	bl	8000540 <__aeabi_dmul>
 800669c:	a341      	add	r3, pc, #260	; (adr r3, 80067a4 <__kernel_sin+0x14c>)
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	4680      	mov	r8, r0
 80066a4:	4689      	mov	r9, r1
 80066a6:	4650      	mov	r0, sl
 80066a8:	4659      	mov	r1, fp
 80066aa:	f7f9 ff49 	bl	8000540 <__aeabi_dmul>
 80066ae:	a33f      	add	r3, pc, #252	; (adr r3, 80067ac <__kernel_sin+0x154>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f7f9 fd8c 	bl	80001d0 <__aeabi_dsub>
 80066b8:	4652      	mov	r2, sl
 80066ba:	465b      	mov	r3, fp
 80066bc:	f7f9 ff40 	bl	8000540 <__aeabi_dmul>
 80066c0:	a33c      	add	r3, pc, #240	; (adr r3, 80067b4 <__kernel_sin+0x15c>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 fd85 	bl	80001d4 <__adddf3>
 80066ca:	4652      	mov	r2, sl
 80066cc:	465b      	mov	r3, fp
 80066ce:	f7f9 ff37 	bl	8000540 <__aeabi_dmul>
 80066d2:	a33a      	add	r3, pc, #232	; (adr r3, 80067bc <__kernel_sin+0x164>)
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f7f9 fd7a 	bl	80001d0 <__aeabi_dsub>
 80066dc:	4652      	mov	r2, sl
 80066de:	465b      	mov	r3, fp
 80066e0:	f7f9 ff2e 	bl	8000540 <__aeabi_dmul>
 80066e4:	a337      	add	r3, pc, #220	; (adr r3, 80067c4 <__kernel_sin+0x16c>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f7f9 fd73 	bl	80001d4 <__adddf3>
 80066ee:	9b02      	ldr	r3, [sp, #8]
 80066f0:	4606      	mov	r6, r0
 80066f2:	460f      	mov	r7, r1
 80066f4:	b9db      	cbnz	r3, 800672e <__kernel_sin+0xd6>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4650      	mov	r0, sl
 80066fc:	4659      	mov	r1, fp
 80066fe:	f7f9 ff1f 	bl	8000540 <__aeabi_dmul>
 8006702:	a325      	add	r3, pc, #148	; (adr r3, 8006798 <__kernel_sin+0x140>)
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f7f9 fd62 	bl	80001d0 <__aeabi_dsub>
 800670c:	4642      	mov	r2, r8
 800670e:	464b      	mov	r3, r9
 8006710:	f7f9 ff16 	bl	8000540 <__aeabi_dmul>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4620      	mov	r0, r4
 800671a:	4629      	mov	r1, r5
 800671c:	f7f9 fd5a 	bl	80001d4 <__adddf3>
 8006720:	4604      	mov	r4, r0
 8006722:	460d      	mov	r5, r1
 8006724:	ec45 4b10 	vmov	d0, r4, r5
 8006728:	b005      	add	sp, #20
 800672a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672e:	2200      	movs	r2, #0
 8006730:	4b1b      	ldr	r3, [pc, #108]	; (80067a0 <__kernel_sin+0x148>)
 8006732:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006736:	f7f9 ff03 	bl	8000540 <__aeabi_dmul>
 800673a:	4632      	mov	r2, r6
 800673c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006740:	463b      	mov	r3, r7
 8006742:	4640      	mov	r0, r8
 8006744:	4649      	mov	r1, r9
 8006746:	f7f9 fefb 	bl	8000540 <__aeabi_dmul>
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006752:	f7f9 fd3d 	bl	80001d0 <__aeabi_dsub>
 8006756:	4652      	mov	r2, sl
 8006758:	465b      	mov	r3, fp
 800675a:	f7f9 fef1 	bl	8000540 <__aeabi_dmul>
 800675e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006762:	f7f9 fd35 	bl	80001d0 <__aeabi_dsub>
 8006766:	a30c      	add	r3, pc, #48	; (adr r3, 8006798 <__kernel_sin+0x140>)
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	4606      	mov	r6, r0
 800676e:	460f      	mov	r7, r1
 8006770:	4640      	mov	r0, r8
 8006772:	4649      	mov	r1, r9
 8006774:	f7f9 fee4 	bl	8000540 <__aeabi_dmul>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4630      	mov	r0, r6
 800677e:	4639      	mov	r1, r7
 8006780:	f7f9 fd28 	bl	80001d4 <__adddf3>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4620      	mov	r0, r4
 800678a:	4629      	mov	r1, r5
 800678c:	f7f9 fd20 	bl	80001d0 <__aeabi_dsub>
 8006790:	e7c6      	b.n	8006720 <__kernel_sin+0xc8>
 8006792:	bf00      	nop
 8006794:	f3af 8000 	nop.w
 8006798:	55555549 	.word	0x55555549
 800679c:	3fc55555 	.word	0x3fc55555
 80067a0:	3fe00000 	.word	0x3fe00000
 80067a4:	5acfd57c 	.word	0x5acfd57c
 80067a8:	3de5d93a 	.word	0x3de5d93a
 80067ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80067b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80067b4:	57b1fe7d 	.word	0x57b1fe7d
 80067b8:	3ec71de3 	.word	0x3ec71de3
 80067bc:	19c161d5 	.word	0x19c161d5
 80067c0:	3f2a01a0 	.word	0x3f2a01a0
 80067c4:	1110f8a6 	.word	0x1110f8a6
 80067c8:	3f811111 	.word	0x3f811111

080067cc <fabs>:
 80067cc:	ec51 0b10 	vmov	r0, r1, d0
 80067d0:	ee10 2a10 	vmov	r2, s0
 80067d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80067d8:	ec43 2b10 	vmov	d0, r2, r3
 80067dc:	4770      	bx	lr
	...

080067e0 <floor>:
 80067e0:	ec51 0b10 	vmov	r0, r1, d0
 80067e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80067ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80067f0:	2e13      	cmp	r6, #19
 80067f2:	460c      	mov	r4, r1
 80067f4:	ee10 5a10 	vmov	r5, s0
 80067f8:	4680      	mov	r8, r0
 80067fa:	dc34      	bgt.n	8006866 <floor+0x86>
 80067fc:	2e00      	cmp	r6, #0
 80067fe:	da16      	bge.n	800682e <floor+0x4e>
 8006800:	a335      	add	r3, pc, #212	; (adr r3, 80068d8 <floor+0xf8>)
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	f7f9 fce5 	bl	80001d4 <__adddf3>
 800680a:	2200      	movs	r2, #0
 800680c:	2300      	movs	r3, #0
 800680e:	f7fa f927 	bl	8000a60 <__aeabi_dcmpgt>
 8006812:	b148      	cbz	r0, 8006828 <floor+0x48>
 8006814:	2c00      	cmp	r4, #0
 8006816:	da59      	bge.n	80068cc <floor+0xec>
 8006818:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800681c:	4a30      	ldr	r2, [pc, #192]	; (80068e0 <floor+0x100>)
 800681e:	432b      	orrs	r3, r5
 8006820:	2500      	movs	r5, #0
 8006822:	42ab      	cmp	r3, r5
 8006824:	bf18      	it	ne
 8006826:	4614      	movne	r4, r2
 8006828:	4621      	mov	r1, r4
 800682a:	4628      	mov	r0, r5
 800682c:	e025      	b.n	800687a <floor+0x9a>
 800682e:	4f2d      	ldr	r7, [pc, #180]	; (80068e4 <floor+0x104>)
 8006830:	4137      	asrs	r7, r6
 8006832:	ea01 0307 	and.w	r3, r1, r7
 8006836:	4303      	orrs	r3, r0
 8006838:	d01f      	beq.n	800687a <floor+0x9a>
 800683a:	a327      	add	r3, pc, #156	; (adr r3, 80068d8 <floor+0xf8>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f7f9 fcc8 	bl	80001d4 <__adddf3>
 8006844:	2200      	movs	r2, #0
 8006846:	2300      	movs	r3, #0
 8006848:	f7fa f90a 	bl	8000a60 <__aeabi_dcmpgt>
 800684c:	2800      	cmp	r0, #0
 800684e:	d0eb      	beq.n	8006828 <floor+0x48>
 8006850:	2c00      	cmp	r4, #0
 8006852:	bfbe      	ittt	lt
 8006854:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006858:	fa43 f606 	asrlt.w	r6, r3, r6
 800685c:	19a4      	addlt	r4, r4, r6
 800685e:	ea24 0407 	bic.w	r4, r4, r7
 8006862:	2500      	movs	r5, #0
 8006864:	e7e0      	b.n	8006828 <floor+0x48>
 8006866:	2e33      	cmp	r6, #51	; 0x33
 8006868:	dd0b      	ble.n	8006882 <floor+0xa2>
 800686a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800686e:	d104      	bne.n	800687a <floor+0x9a>
 8006870:	ee10 2a10 	vmov	r2, s0
 8006874:	460b      	mov	r3, r1
 8006876:	f7f9 fcad 	bl	80001d4 <__adddf3>
 800687a:	ec41 0b10 	vmov	d0, r0, r1
 800687e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006882:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800688a:	fa23 f707 	lsr.w	r7, r3, r7
 800688e:	4207      	tst	r7, r0
 8006890:	d0f3      	beq.n	800687a <floor+0x9a>
 8006892:	a311      	add	r3, pc, #68	; (adr r3, 80068d8 <floor+0xf8>)
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f7f9 fc9c 	bl	80001d4 <__adddf3>
 800689c:	2200      	movs	r2, #0
 800689e:	2300      	movs	r3, #0
 80068a0:	f7fa f8de 	bl	8000a60 <__aeabi_dcmpgt>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d0bf      	beq.n	8006828 <floor+0x48>
 80068a8:	2c00      	cmp	r4, #0
 80068aa:	da02      	bge.n	80068b2 <floor+0xd2>
 80068ac:	2e14      	cmp	r6, #20
 80068ae:	d103      	bne.n	80068b8 <floor+0xd8>
 80068b0:	3401      	adds	r4, #1
 80068b2:	ea25 0507 	bic.w	r5, r5, r7
 80068b6:	e7b7      	b.n	8006828 <floor+0x48>
 80068b8:	2301      	movs	r3, #1
 80068ba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80068be:	fa03 f606 	lsl.w	r6, r3, r6
 80068c2:	4435      	add	r5, r6
 80068c4:	4545      	cmp	r5, r8
 80068c6:	bf38      	it	cc
 80068c8:	18e4      	addcc	r4, r4, r3
 80068ca:	e7f2      	b.n	80068b2 <floor+0xd2>
 80068cc:	2500      	movs	r5, #0
 80068ce:	462c      	mov	r4, r5
 80068d0:	e7aa      	b.n	8006828 <floor+0x48>
 80068d2:	bf00      	nop
 80068d4:	f3af 8000 	nop.w
 80068d8:	8800759c 	.word	0x8800759c
 80068dc:	7e37e43c 	.word	0x7e37e43c
 80068e0:	bff00000 	.word	0xbff00000
 80068e4:	000fffff 	.word	0x000fffff

080068e8 <scalbn>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	ec55 4b10 	vmov	r4, r5, d0
 80068ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80068f2:	4606      	mov	r6, r0
 80068f4:	462b      	mov	r3, r5
 80068f6:	b9aa      	cbnz	r2, 8006924 <scalbn+0x3c>
 80068f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80068fc:	4323      	orrs	r3, r4
 80068fe:	d03b      	beq.n	8006978 <scalbn+0x90>
 8006900:	4b31      	ldr	r3, [pc, #196]	; (80069c8 <scalbn+0xe0>)
 8006902:	4629      	mov	r1, r5
 8006904:	2200      	movs	r2, #0
 8006906:	ee10 0a10 	vmov	r0, s0
 800690a:	f7f9 fe19 	bl	8000540 <__aeabi_dmul>
 800690e:	4b2f      	ldr	r3, [pc, #188]	; (80069cc <scalbn+0xe4>)
 8006910:	429e      	cmp	r6, r3
 8006912:	4604      	mov	r4, r0
 8006914:	460d      	mov	r5, r1
 8006916:	da12      	bge.n	800693e <scalbn+0x56>
 8006918:	a327      	add	r3, pc, #156	; (adr r3, 80069b8 <scalbn+0xd0>)
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f7f9 fe0f 	bl	8000540 <__aeabi_dmul>
 8006922:	e009      	b.n	8006938 <scalbn+0x50>
 8006924:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006928:	428a      	cmp	r2, r1
 800692a:	d10c      	bne.n	8006946 <scalbn+0x5e>
 800692c:	ee10 2a10 	vmov	r2, s0
 8006930:	4620      	mov	r0, r4
 8006932:	4629      	mov	r1, r5
 8006934:	f7f9 fc4e 	bl	80001d4 <__adddf3>
 8006938:	4604      	mov	r4, r0
 800693a:	460d      	mov	r5, r1
 800693c:	e01c      	b.n	8006978 <scalbn+0x90>
 800693e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006942:	460b      	mov	r3, r1
 8006944:	3a36      	subs	r2, #54	; 0x36
 8006946:	4432      	add	r2, r6
 8006948:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800694c:	428a      	cmp	r2, r1
 800694e:	dd0b      	ble.n	8006968 <scalbn+0x80>
 8006950:	ec45 4b11 	vmov	d1, r4, r5
 8006954:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80069c0 <scalbn+0xd8>
 8006958:	f000 f83c 	bl	80069d4 <copysign>
 800695c:	a318      	add	r3, pc, #96	; (adr r3, 80069c0 <scalbn+0xd8>)
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	ec51 0b10 	vmov	r0, r1, d0
 8006966:	e7da      	b.n	800691e <scalbn+0x36>
 8006968:	2a00      	cmp	r2, #0
 800696a:	dd08      	ble.n	800697e <scalbn+0x96>
 800696c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006970:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006974:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006978:	ec45 4b10 	vmov	d0, r4, r5
 800697c:	bd70      	pop	{r4, r5, r6, pc}
 800697e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006982:	da0d      	bge.n	80069a0 <scalbn+0xb8>
 8006984:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006988:	429e      	cmp	r6, r3
 800698a:	ec45 4b11 	vmov	d1, r4, r5
 800698e:	dce1      	bgt.n	8006954 <scalbn+0x6c>
 8006990:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80069b8 <scalbn+0xd0>
 8006994:	f000 f81e 	bl	80069d4 <copysign>
 8006998:	a307      	add	r3, pc, #28	; (adr r3, 80069b8 <scalbn+0xd0>)
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	e7e0      	b.n	8006962 <scalbn+0x7a>
 80069a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80069a4:	3236      	adds	r2, #54	; 0x36
 80069a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80069ae:	4620      	mov	r0, r4
 80069b0:	4629      	mov	r1, r5
 80069b2:	2200      	movs	r2, #0
 80069b4:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <scalbn+0xe8>)
 80069b6:	e7b2      	b.n	800691e <scalbn+0x36>
 80069b8:	c2f8f359 	.word	0xc2f8f359
 80069bc:	01a56e1f 	.word	0x01a56e1f
 80069c0:	8800759c 	.word	0x8800759c
 80069c4:	7e37e43c 	.word	0x7e37e43c
 80069c8:	43500000 	.word	0x43500000
 80069cc:	ffff3cb0 	.word	0xffff3cb0
 80069d0:	3c900000 	.word	0x3c900000

080069d4 <copysign>:
 80069d4:	ec51 0b10 	vmov	r0, r1, d0
 80069d8:	ee11 0a90 	vmov	r0, s3
 80069dc:	ee10 2a10 	vmov	r2, s0
 80069e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80069e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80069e8:	ea41 0300 	orr.w	r3, r1, r0
 80069ec:	ec43 2b10 	vmov	d0, r2, r3
 80069f0:	4770      	bx	lr

080069f2 <abort>:
 80069f2:	b508      	push	{r3, lr}
 80069f4:	2006      	movs	r0, #6
 80069f6:	f000 f93f 	bl	8006c78 <raise>
 80069fa:	2001      	movs	r0, #1
 80069fc:	f7fe fbee 	bl	80051dc <_exit>

08006a00 <__errno>:
 8006a00:	4b01      	ldr	r3, [pc, #4]	; (8006a08 <__errno+0x8>)
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	2000000c 	.word	0x2000000c

08006a0c <__libc_init_array>:
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	4e0d      	ldr	r6, [pc, #52]	; (8006a44 <__libc_init_array+0x38>)
 8006a10:	4c0d      	ldr	r4, [pc, #52]	; (8006a48 <__libc_init_array+0x3c>)
 8006a12:	1ba4      	subs	r4, r4, r6
 8006a14:	10a4      	asrs	r4, r4, #2
 8006a16:	2500      	movs	r5, #0
 8006a18:	42a5      	cmp	r5, r4
 8006a1a:	d109      	bne.n	8006a30 <__libc_init_array+0x24>
 8006a1c:	4e0b      	ldr	r6, [pc, #44]	; (8006a4c <__libc_init_array+0x40>)
 8006a1e:	4c0c      	ldr	r4, [pc, #48]	; (8006a50 <__libc_init_array+0x44>)
 8006a20:	f000 f948 	bl	8006cb4 <_init>
 8006a24:	1ba4      	subs	r4, r4, r6
 8006a26:	10a4      	asrs	r4, r4, #2
 8006a28:	2500      	movs	r5, #0
 8006a2a:	42a5      	cmp	r5, r4
 8006a2c:	d105      	bne.n	8006a3a <__libc_init_array+0x2e>
 8006a2e:	bd70      	pop	{r4, r5, r6, pc}
 8006a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a34:	4798      	blx	r3
 8006a36:	3501      	adds	r5, #1
 8006a38:	e7ee      	b.n	8006a18 <__libc_init_array+0xc>
 8006a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a3e:	4798      	blx	r3
 8006a40:	3501      	adds	r5, #1
 8006a42:	e7f2      	b.n	8006a2a <__libc_init_array+0x1e>
 8006a44:	08006f18 	.word	0x08006f18
 8006a48:	08006f18 	.word	0x08006f18
 8006a4c:	08006f18 	.word	0x08006f18
 8006a50:	08006f1c 	.word	0x08006f1c

08006a54 <malloc>:
 8006a54:	4b02      	ldr	r3, [pc, #8]	; (8006a60 <malloc+0xc>)
 8006a56:	4601      	mov	r1, r0
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	f000 b87b 	b.w	8006b54 <_malloc_r>
 8006a5e:	bf00      	nop
 8006a60:	2000000c 	.word	0x2000000c

08006a64 <free>:
 8006a64:	4b02      	ldr	r3, [pc, #8]	; (8006a70 <free+0xc>)
 8006a66:	4601      	mov	r1, r0
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	f000 b825 	b.w	8006ab8 <_free_r>
 8006a6e:	bf00      	nop
 8006a70:	2000000c 	.word	0x2000000c

08006a74 <memmove>:
 8006a74:	4288      	cmp	r0, r1
 8006a76:	b510      	push	{r4, lr}
 8006a78:	eb01 0302 	add.w	r3, r1, r2
 8006a7c:	d807      	bhi.n	8006a8e <memmove+0x1a>
 8006a7e:	1e42      	subs	r2, r0, #1
 8006a80:	4299      	cmp	r1, r3
 8006a82:	d00a      	beq.n	8006a9a <memmove+0x26>
 8006a84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a88:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a8c:	e7f8      	b.n	8006a80 <memmove+0xc>
 8006a8e:	4283      	cmp	r3, r0
 8006a90:	d9f5      	bls.n	8006a7e <memmove+0xa>
 8006a92:	1881      	adds	r1, r0, r2
 8006a94:	1ad2      	subs	r2, r2, r3
 8006a96:	42d3      	cmn	r3, r2
 8006a98:	d100      	bne.n	8006a9c <memmove+0x28>
 8006a9a:	bd10      	pop	{r4, pc}
 8006a9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aa0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006aa4:	e7f7      	b.n	8006a96 <memmove+0x22>

08006aa6 <memset>:
 8006aa6:	4402      	add	r2, r0
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d100      	bne.n	8006ab0 <memset+0xa>
 8006aae:	4770      	bx	lr
 8006ab0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab4:	e7f9      	b.n	8006aaa <memset+0x4>
	...

08006ab8 <_free_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4605      	mov	r5, r0
 8006abc:	2900      	cmp	r1, #0
 8006abe:	d045      	beq.n	8006b4c <_free_r+0x94>
 8006ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac4:	1f0c      	subs	r4, r1, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bfb8      	it	lt
 8006aca:	18e4      	addlt	r4, r4, r3
 8006acc:	f000 f8f0 	bl	8006cb0 <__malloc_lock>
 8006ad0:	4a1f      	ldr	r2, [pc, #124]	; (8006b50 <_free_r+0x98>)
 8006ad2:	6813      	ldr	r3, [r2, #0]
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	b933      	cbnz	r3, 8006ae6 <_free_r+0x2e>
 8006ad8:	6063      	str	r3, [r4, #4]
 8006ada:	6014      	str	r4, [r2, #0]
 8006adc:	4628      	mov	r0, r5
 8006ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ae2:	f000 b8e6 	b.w	8006cb2 <__malloc_unlock>
 8006ae6:	42a3      	cmp	r3, r4
 8006ae8:	d90c      	bls.n	8006b04 <_free_r+0x4c>
 8006aea:	6821      	ldr	r1, [r4, #0]
 8006aec:	1862      	adds	r2, r4, r1
 8006aee:	4293      	cmp	r3, r2
 8006af0:	bf04      	itt	eq
 8006af2:	681a      	ldreq	r2, [r3, #0]
 8006af4:	685b      	ldreq	r3, [r3, #4]
 8006af6:	6063      	str	r3, [r4, #4]
 8006af8:	bf04      	itt	eq
 8006afa:	1852      	addeq	r2, r2, r1
 8006afc:	6022      	streq	r2, [r4, #0]
 8006afe:	6004      	str	r4, [r0, #0]
 8006b00:	e7ec      	b.n	8006adc <_free_r+0x24>
 8006b02:	4613      	mov	r3, r2
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	b10a      	cbz	r2, 8006b0c <_free_r+0x54>
 8006b08:	42a2      	cmp	r2, r4
 8006b0a:	d9fa      	bls.n	8006b02 <_free_r+0x4a>
 8006b0c:	6819      	ldr	r1, [r3, #0]
 8006b0e:	1858      	adds	r0, r3, r1
 8006b10:	42a0      	cmp	r0, r4
 8006b12:	d10b      	bne.n	8006b2c <_free_r+0x74>
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	4401      	add	r1, r0
 8006b18:	1858      	adds	r0, r3, r1
 8006b1a:	4282      	cmp	r2, r0
 8006b1c:	6019      	str	r1, [r3, #0]
 8006b1e:	d1dd      	bne.n	8006adc <_free_r+0x24>
 8006b20:	6810      	ldr	r0, [r2, #0]
 8006b22:	6852      	ldr	r2, [r2, #4]
 8006b24:	605a      	str	r2, [r3, #4]
 8006b26:	4401      	add	r1, r0
 8006b28:	6019      	str	r1, [r3, #0]
 8006b2a:	e7d7      	b.n	8006adc <_free_r+0x24>
 8006b2c:	d902      	bls.n	8006b34 <_free_r+0x7c>
 8006b2e:	230c      	movs	r3, #12
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	e7d3      	b.n	8006adc <_free_r+0x24>
 8006b34:	6820      	ldr	r0, [r4, #0]
 8006b36:	1821      	adds	r1, r4, r0
 8006b38:	428a      	cmp	r2, r1
 8006b3a:	bf04      	itt	eq
 8006b3c:	6811      	ldreq	r1, [r2, #0]
 8006b3e:	6852      	ldreq	r2, [r2, #4]
 8006b40:	6062      	str	r2, [r4, #4]
 8006b42:	bf04      	itt	eq
 8006b44:	1809      	addeq	r1, r1, r0
 8006b46:	6021      	streq	r1, [r4, #0]
 8006b48:	605c      	str	r4, [r3, #4]
 8006b4a:	e7c7      	b.n	8006adc <_free_r+0x24>
 8006b4c:	bd38      	pop	{r3, r4, r5, pc}
 8006b4e:	bf00      	nop
 8006b50:	2000009c 	.word	0x2000009c

08006b54 <_malloc_r>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	1ccd      	adds	r5, r1, #3
 8006b58:	f025 0503 	bic.w	r5, r5, #3
 8006b5c:	3508      	adds	r5, #8
 8006b5e:	2d0c      	cmp	r5, #12
 8006b60:	bf38      	it	cc
 8006b62:	250c      	movcc	r5, #12
 8006b64:	2d00      	cmp	r5, #0
 8006b66:	4606      	mov	r6, r0
 8006b68:	db01      	blt.n	8006b6e <_malloc_r+0x1a>
 8006b6a:	42a9      	cmp	r1, r5
 8006b6c:	d903      	bls.n	8006b76 <_malloc_r+0x22>
 8006b6e:	230c      	movs	r3, #12
 8006b70:	6033      	str	r3, [r6, #0]
 8006b72:	2000      	movs	r0, #0
 8006b74:	bd70      	pop	{r4, r5, r6, pc}
 8006b76:	f000 f89b 	bl	8006cb0 <__malloc_lock>
 8006b7a:	4a21      	ldr	r2, [pc, #132]	; (8006c00 <_malloc_r+0xac>)
 8006b7c:	6814      	ldr	r4, [r2, #0]
 8006b7e:	4621      	mov	r1, r4
 8006b80:	b991      	cbnz	r1, 8006ba8 <_malloc_r+0x54>
 8006b82:	4c20      	ldr	r4, [pc, #128]	; (8006c04 <_malloc_r+0xb0>)
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	b91b      	cbnz	r3, 8006b90 <_malloc_r+0x3c>
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f000 f83d 	bl	8006c08 <_sbrk_r>
 8006b8e:	6020      	str	r0, [r4, #0]
 8006b90:	4629      	mov	r1, r5
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 f838 	bl	8006c08 <_sbrk_r>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d124      	bne.n	8006be6 <_malloc_r+0x92>
 8006b9c:	230c      	movs	r3, #12
 8006b9e:	6033      	str	r3, [r6, #0]
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f000 f886 	bl	8006cb2 <__malloc_unlock>
 8006ba6:	e7e4      	b.n	8006b72 <_malloc_r+0x1e>
 8006ba8:	680b      	ldr	r3, [r1, #0]
 8006baa:	1b5b      	subs	r3, r3, r5
 8006bac:	d418      	bmi.n	8006be0 <_malloc_r+0x8c>
 8006bae:	2b0b      	cmp	r3, #11
 8006bb0:	d90f      	bls.n	8006bd2 <_malloc_r+0x7e>
 8006bb2:	600b      	str	r3, [r1, #0]
 8006bb4:	50cd      	str	r5, [r1, r3]
 8006bb6:	18cc      	adds	r4, r1, r3
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f000 f87a 	bl	8006cb2 <__malloc_unlock>
 8006bbe:	f104 000b 	add.w	r0, r4, #11
 8006bc2:	1d23      	adds	r3, r4, #4
 8006bc4:	f020 0007 	bic.w	r0, r0, #7
 8006bc8:	1ac3      	subs	r3, r0, r3
 8006bca:	d0d3      	beq.n	8006b74 <_malloc_r+0x20>
 8006bcc:	425a      	negs	r2, r3
 8006bce:	50e2      	str	r2, [r4, r3]
 8006bd0:	e7d0      	b.n	8006b74 <_malloc_r+0x20>
 8006bd2:	428c      	cmp	r4, r1
 8006bd4:	684b      	ldr	r3, [r1, #4]
 8006bd6:	bf16      	itet	ne
 8006bd8:	6063      	strne	r3, [r4, #4]
 8006bda:	6013      	streq	r3, [r2, #0]
 8006bdc:	460c      	movne	r4, r1
 8006bde:	e7eb      	b.n	8006bb8 <_malloc_r+0x64>
 8006be0:	460c      	mov	r4, r1
 8006be2:	6849      	ldr	r1, [r1, #4]
 8006be4:	e7cc      	b.n	8006b80 <_malloc_r+0x2c>
 8006be6:	1cc4      	adds	r4, r0, #3
 8006be8:	f024 0403 	bic.w	r4, r4, #3
 8006bec:	42a0      	cmp	r0, r4
 8006bee:	d005      	beq.n	8006bfc <_malloc_r+0xa8>
 8006bf0:	1a21      	subs	r1, r4, r0
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f000 f808 	bl	8006c08 <_sbrk_r>
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d0cf      	beq.n	8006b9c <_malloc_r+0x48>
 8006bfc:	6025      	str	r5, [r4, #0]
 8006bfe:	e7db      	b.n	8006bb8 <_malloc_r+0x64>
 8006c00:	2000009c 	.word	0x2000009c
 8006c04:	200000a0 	.word	0x200000a0

08006c08 <_sbrk_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4c06      	ldr	r4, [pc, #24]	; (8006c24 <_sbrk_r+0x1c>)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4605      	mov	r5, r0
 8006c10:	4608      	mov	r0, r1
 8006c12:	6023      	str	r3, [r4, #0]
 8006c14:	f7fe faec 	bl	80051f0 <_sbrk>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_sbrk_r+0x1a>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_sbrk_r+0x1a>
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	20000118 	.word	0x20000118

08006c28 <_raise_r>:
 8006c28:	291f      	cmp	r1, #31
 8006c2a:	b538      	push	{r3, r4, r5, lr}
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	460d      	mov	r5, r1
 8006c30:	d904      	bls.n	8006c3c <_raise_r+0x14>
 8006c32:	2316      	movs	r3, #22
 8006c34:	6003      	str	r3, [r0, #0]
 8006c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c3e:	b112      	cbz	r2, 8006c46 <_raise_r+0x1e>
 8006c40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c44:	b94b      	cbnz	r3, 8006c5a <_raise_r+0x32>
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 f830 	bl	8006cac <_getpid_r>
 8006c4c:	462a      	mov	r2, r5
 8006c4e:	4601      	mov	r1, r0
 8006c50:	4620      	mov	r0, r4
 8006c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c56:	f000 b817 	b.w	8006c88 <_kill_r>
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d00a      	beq.n	8006c74 <_raise_r+0x4c>
 8006c5e:	1c59      	adds	r1, r3, #1
 8006c60:	d103      	bne.n	8006c6a <_raise_r+0x42>
 8006c62:	2316      	movs	r3, #22
 8006c64:	6003      	str	r3, [r0, #0]
 8006c66:	2001      	movs	r0, #1
 8006c68:	e7e7      	b.n	8006c3a <_raise_r+0x12>
 8006c6a:	2400      	movs	r4, #0
 8006c6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c70:	4628      	mov	r0, r5
 8006c72:	4798      	blx	r3
 8006c74:	2000      	movs	r0, #0
 8006c76:	e7e0      	b.n	8006c3a <_raise_r+0x12>

08006c78 <raise>:
 8006c78:	4b02      	ldr	r3, [pc, #8]	; (8006c84 <raise+0xc>)
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	f7ff bfd3 	b.w	8006c28 <_raise_r>
 8006c82:	bf00      	nop
 8006c84:	2000000c 	.word	0x2000000c

08006c88 <_kill_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4c07      	ldr	r4, [pc, #28]	; (8006ca8 <_kill_r+0x20>)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4605      	mov	r5, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	4611      	mov	r1, r2
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	f7fe fa91 	bl	80051bc <_kill>
 8006c9a:	1c43      	adds	r3, r0, #1
 8006c9c:	d102      	bne.n	8006ca4 <_kill_r+0x1c>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	b103      	cbz	r3, 8006ca4 <_kill_r+0x1c>
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	bd38      	pop	{r3, r4, r5, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000118 	.word	0x20000118

08006cac <_getpid_r>:
 8006cac:	f7fe ba7e 	b.w	80051ac <_getpid>

08006cb0 <__malloc_lock>:
 8006cb0:	4770      	bx	lr

08006cb2 <__malloc_unlock>:
 8006cb2:	4770      	bx	lr

08006cb4 <_init>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	bf00      	nop
 8006cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cba:	bc08      	pop	{r3}
 8006cbc:	469e      	mov	lr, r3
 8006cbe:	4770      	bx	lr

08006cc0 <_fini>:
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc2:	bf00      	nop
 8006cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc6:	bc08      	pop	{r3}
 8006cc8:	469e      	mov	lr, r3
 8006cca:	4770      	bx	lr
