
STM32H743ZI_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008540  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080087d8  080087d8  000187d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087f8  080087f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080087f8  080087f8  000187f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008800  08008800  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008800  08008800  00018800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008804  08008804  00018804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08008808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  24000010  08008818  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240001c4  08008818  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204c9  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000331e  00000000  00000000  00040507  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001350  00000000  00000000  00043828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001208  00000000  00000000  00044b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037a20  00000000  00000000  00045d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b49  00000000  00000000  0007d7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016a812  00000000  00000000  0008f2e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f9afb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000521c  00000000  00000000  001f9b78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080087c0 	.word	0x080087c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080087c0 	.word	0x080087c0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f001 f95d 	bl	800189c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e2:	f002 f8e7 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 80005e6:	4601      	mov	r1, r0
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_Init+0x60>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <HAL_Init+0x64>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	f003 031f 	and.w	r3, r3, #31
 80005fa:	fa21 f303 	lsr.w	r3, r1, r3
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <HAL_Init+0x68>)
 8000600:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */  
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_Init+0x60>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <HAL_Init+0x64>)
 8000610:	5ccb      	ldrb	r3, [r1, r3]
 8000612:	f003 031f 	and.w	r3, r3, #31
 8000616:	fa22 f303 	lsr.w	r3, r2, r3
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_Init+0x6c>)
 800061c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f812 	bl	8000648 <HAL_InitTick>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e002      	b.n	8000634 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f007 fe2d 	bl	800828c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58024400 	.word	0x58024400
 800063c:	080087e8 	.word	0x080087e8
 8000640:	24000008 	.word	0x24000008
 8000644:	2400000c 	.word	0x2400000c

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_InitTick+0x60>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	e021      	b.n	80006a0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <HAL_InitTick+0x64>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_InitTick+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f937 	bl	80018e6 <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000690:	f001 f90f 	bl	80018b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_InitTick+0x68>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000004 	.word	0x24000004
 80006ac:	24000008 	.word	0x24000008
 80006b0:	24000000 	.word	0x24000000

080006b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x20>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x24>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_IncTick+0x24>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	24000004 	.word	0x24000004
 80006d8:	2400002c 	.word	0x2400002c

080006dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_GetTick+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	2400002c 	.word	0x2400002c

080006f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <HAL_GetREVID+0x14>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	0c1b      	lsrs	r3, r3, #16
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	5c001000 	.word	0x5c001000

0800070c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	43db      	mvns	r3, r3
 800071e:	401a      	ands	r2, r3
 8000720:	4904      	ldr	r1, [pc, #16]	; (8000734 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	4313      	orrs	r3, r2
 8000726:	604b      	str	r3, [r1, #4]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	58000400 	.word	0x58000400

08000738 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	431a      	orrs	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	609a      	str	r2, [r3, #8]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	431a      	orrs	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	609a      	str	r2, [r3, #8]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007a0:	b490      	push	{r4, r7}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3360      	adds	r3, #96	; 0x60
 80007b2:	461a      	mov	r2, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	430b      	orrs	r3, r1
 80007cc:	4313      	orrs	r3, r2
 80007ce:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc90      	pop	{r4, r7}
 80007d8:	4770      	bx	lr

080007da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80007da:	b490      	push	{r4, r7}
 80007dc:	b084      	sub	sp, #16
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	3360      	adds	r3, #96	; 0x60
 80007ea:	461a      	mov	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	6023      	str	r3, [r4, #0]
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bc90      	pop	{r4, r7}
 8000808:	4770      	bx	lr

0800080a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800080a:	b490      	push	{r4, r7}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	60f8      	str	r0, [r7, #12]
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3330      	adds	r3, #48	; 0x30
 800081a:	461a      	mov	r2, r3
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	f003 030c 	and.w	r3, r3, #12
 8000826:	4413      	add	r3, r2
 8000828:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800082a:	6822      	ldr	r2, [r4, #0]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	211f      	movs	r1, #31
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	43db      	mvns	r3, r3
 800083a:	401a      	ands	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	0e9b      	lsrs	r3, r3, #26
 8000840:	f003 011f 	and.w	r1, r3, #31
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	f003 031f 	and.w	r3, r3, #31
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bc90      	pop	{r4, r7}
 800085a:	4770      	bx	lr

0800085c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800085c:	b490      	push	{r4, r7}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3314      	adds	r3, #20
 800086c:	461a      	mov	r2, r3
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	0e5b      	lsrs	r3, r3, #25
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	4413      	add	r3, r2
 800087a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800087c:	6822      	ldr	r2, [r4, #0]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	0d1b      	lsrs	r3, r3, #20
 8000882:	f003 031f 	and.w	r3, r3, #31
 8000886:	2107      	movs	r1, #7
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	401a      	ands	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	0d1b      	lsrs	r3, r3, #20
 8000894:	f003 031f 	and.w	r3, r3, #31
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc90      	pop	{r4, r7}
 80008aa:	4770      	bx	lr

080008ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80008c4:	43db      	mvns	r3, r3
 80008c6:	401a      	ands	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0318 	and.w	r3, r3, #24
 80008ce:	4908      	ldr	r1, [pc, #32]	; (80008f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80008d0:	40d9      	lsrs	r1, r3
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	400b      	ands	r3, r1
 80008d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80008da:	431a      	orrs	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	000fffff 	.word	0x000fffff

080008f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000902:	4013      	ands	r3, r2
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	6093      	str	r3, [r2, #8]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	5fffffc0 	.word	0x5fffffc0

08000918 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800092c:	d101      	bne.n	8000932 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800092e:	2301      	movs	r3, #1
 8000930:	e000      	b.n	8000934 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689a      	ldr	r2, [r3, #8]
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <LL_ADC_EnableInternalRegulator+0x24>)
 800094e:	4013      	ands	r3, r2
 8000950:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	6fffffc0 	.word	0x6fffffc0

08000968 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800097c:	d101      	bne.n	8000982 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800097e:	2301      	movs	r3, #1
 8000980:	e000      	b.n	8000984 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d101      	bne.n	80009a8 <LL_ADC_IsEnabled+0x18>
 80009a4:	2301      	movs	r3, #1
 80009a6:	e000      	b.n	80009aa <LL_ADC_IsEnabled+0x1a>
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d101      	bne.n	80009ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f003 0308 	and.w	r3, r3, #8
 80009ec:	2b08      	cmp	r3, #8
 80009ee:	d101      	bne.n	80009f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80009f0:	2301      	movs	r3, #1
 80009f2:	e000      	b.n	80009f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e18c      	b.n	8000d38 <HAL_ADC_Init+0x334>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d109      	bne.n	8000a40 <HAL_ADC_Init+0x3c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f007 f975 	bl	8007d1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff67 	bl	8000918 <LL_ADC_IsDeepPowerDownEnabled>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d004      	beq.n	8000a5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */ 
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff4d 	bl	80008f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff82 	bl	8000968 <LL_ADC_IsInternalRegulatorEnabled>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d113      	bne.n	8000a92 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff66 	bl	8000940 <LL_ADC_EnableInternalRegulator>
    
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000a74:	4b99      	ldr	r3, [pc, #612]	; (8000cdc <HAL_ADC_Init+0x2d8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	099b      	lsrs	r3, r3, #6
 8000a7a:	4a99      	ldr	r2, [pc, #612]	; (8000ce0 <HAL_ADC_Init+0x2dc>)
 8000a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a80:	099b      	lsrs	r3, r3, #6
 8000a82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000a84:	e002      	b.n	8000a8c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1f9      	bne.n	8000a86 <HAL_ADC_Init+0x82>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff66 	bl	8000968 <LL_ADC_IsInternalRegulatorEnabled>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10d      	bne.n	8000abe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aa6:	f043 0210 	orr.w	r2, r3, #16
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	f043 0201 	orr.w	r2, r3, #1
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	77fb      	strb	r3, [r7, #31]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff77 	bl	80009b6 <LL_ADC_REG_IsConversionOngoing>
 8000ac8:	6178      	str	r0, [r7, #20]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ace:	f003 0310 	and.w	r3, r3, #16
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f040 8127 	bne.w	8000d26 <HAL_ADC_Init+0x322>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f040 8123 	bne.w	8000d26 <HAL_ADC_Init+0x322>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ae4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ae8:	f043 0202 	orr.w	r2, r3, #2
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff4b 	bl	8000990 <LL_ADC_IsEnabled>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d136      	bne.n	8000b6e <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a77      	ldr	r2, [pc, #476]	; (8000ce4 <HAL_ADC_Init+0x2e0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d004      	beq.n	8000b14 <HAL_ADC_Init+0x110>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a76      	ldr	r2, [pc, #472]	; (8000ce8 <HAL_ADC_Init+0x2e4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d10e      	bne.n	8000b32 <HAL_ADC_Init+0x12e>
 8000b14:	4873      	ldr	r0, [pc, #460]	; (8000ce4 <HAL_ADC_Init+0x2e0>)
 8000b16:	f7ff ff3b 	bl	8000990 <LL_ADC_IsEnabled>
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	4872      	ldr	r0, [pc, #456]	; (8000ce8 <HAL_ADC_Init+0x2e4>)
 8000b1e:	f7ff ff37 	bl	8000990 <LL_ADC_IsEnabled>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4323      	orrs	r3, r4
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bf0c      	ite	eq
 8000b2a:	2301      	moveq	r3, #1
 8000b2c:	2300      	movne	r3, #0
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	e008      	b.n	8000b44 <HAL_ADC_Init+0x140>
 8000b32:	486e      	ldr	r0, [pc, #440]	; (8000cec <HAL_ADC_Init+0x2e8>)
 8000b34:	f7ff ff2c 	bl	8000990 <LL_ADC_IsEnabled>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf0c      	ite	eq
 8000b3e:	2301      	moveq	r3, #1
 8000b40:	2300      	movne	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d012      	beq.n	8000b6e <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a65      	ldr	r2, [pc, #404]	; (8000ce4 <HAL_ADC_Init+0x2e0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d004      	beq.n	8000b5c <HAL_ADC_Init+0x158>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a64      	ldr	r2, [pc, #400]	; (8000ce8 <HAL_ADC_Init+0x2e4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d101      	bne.n	8000b60 <HAL_ADC_Init+0x15c>
 8000b5c:	4a64      	ldr	r2, [pc, #400]	; (8000cf0 <HAL_ADC_Init+0x2ec>)
 8000b5e:	e000      	b.n	8000b62 <HAL_ADC_Init+0x15e>
 8000b60:	4a64      	ldr	r2, [pc, #400]	; (8000cf4 <HAL_ADC_Init+0x2f0>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	4619      	mov	r1, r3
 8000b68:	4610      	mov	r0, r2
 8000b6a:	f7ff fde5 	bl	8000738 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000b6e:	f7ff fdc1 	bl	80006f4 <HAL_GetREVID>
 8000b72:	4602      	mov	r2, r0
 8000b74:	f241 0303 	movw	r3, #4099	; 0x1003
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d914      	bls.n	8000ba6 <HAL_ADC_Init+0x1a2>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	2b10      	cmp	r3, #16
 8000b82:	d110      	bne.n	8000ba6 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7d5b      	ldrb	r3, [r3, #21]
 8000b88:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b8e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000b94:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7f1b      	ldrb	r3, [r3, #28]
 8000b9a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000b9c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b9e:	f043 030c 	orr.w	r3, r3, #12
 8000ba2:	61bb      	str	r3, [r7, #24]
 8000ba4:	e00d      	b.n	8000bc2 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7d5b      	ldrb	r3, [r3, #21]
 8000baa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000bb0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000bb6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	7f1b      	ldrb	r3, [r3, #28]
 8000bbc:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
    }
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7f1b      	ldrb	r3, [r3, #28]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d106      	bne.n	8000bd8 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a1b      	ldr	r3, [r3, #32]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	045b      	lsls	r3, r3, #17
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d009      	beq.n	8000bf4 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	4313      	orrs	r3, r2
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68da      	ldr	r2, [r3, #12]
 8000bfa:	4b3f      	ldr	r3, [pc, #252]	; (8000cf8 <HAL_ADC_Init+0x2f4>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	6812      	ldr	r2, [r2, #0]
 8000c02:	69b9      	ldr	r1, [r7, #24]
 8000c04:	430b      	orrs	r3, r1
 8000c06:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fed2 	bl	80009b6 <LL_ADC_REG_IsConversionOngoing>
 8000c12:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fedf 	bl	80009dc <LL_ADC_INJ_IsConversionOngoing>
 8000c1e:	60f8      	str	r0, [r7, #12]
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d149      	bne.n	8000cba <HAL_ADC_Init+0x2b6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d146      	bne.n	8000cba <HAL_ADC_Init+0x2b6>
       )
    {
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7d1b      	ldrb	r3, [r3, #20]
 8000c30:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement)  );
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <HAL_ADC_Init+0x2f8>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	6812      	ldr	r2, [r2, #0]
 8000c48:	69b9      	ldr	r1, [r7, #24]
 8000c4a:	430b      	orrs	r3, r1
 8000c4c:	60d3      	str	r3, [r2, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d11a      	bne.n	8000c8e <HAL_ADC_Init+0x28a>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
        
      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	691a      	ldr	r2, [r3, #16]
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <HAL_ADC_Init+0x2fc>)
 8000c66:	4013      	ands	r3, r2
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000c6c:	0411      	lsls	r1, r2, #16
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000c72:	4311      	orrs	r1, r2
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000c78:	4311      	orrs	r1, r2
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	431a      	orrs	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0201 	orr.w	r2, r2, #1
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	e007      	b.n	8000c9e <HAL_ADC_Init+0x29a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	691a      	ldr	r2, [r3, #16]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0201 	bic.w	r2, r2, #1
 8000c9c:	611a      	str	r2, [r3, #16]
      }
      
      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 fb41 	bl	800133c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d120      	bne.n	8000d04 <HAL_ADC_Init+0x300>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f023 010f 	bic.w	r1, r3, #15
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	1e5a      	subs	r2, r3, #1
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8000cda:	e01b      	b.n	8000d14 <HAL_ADC_Init+0x310>
 8000cdc:	24000008 	.word	0x24000008
 8000ce0:	053e2d63 	.word	0x053e2d63
 8000ce4:	40022000 	.word	0x40022000
 8000ce8:	40022100 	.word	0x40022100
 8000cec:	58026000 	.word	0x58026000
 8000cf0:	40022300 	.word	0x40022300
 8000cf4:	58026300 	.word	0x58026300
 8000cf8:	fff0c003 	.word	0xfff0c003
 8000cfc:	ffffbffc 	.word	0xffffbffc
 8000d00:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 020f 	bic.w	r2, r2, #15
 8000d12:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d18:	f023 0303 	bic.w	r3, r3, #3
 8000d1c:	f043 0201 	orr.w	r2, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	655a      	str	r2, [r3, #84]	; 0x54
 8000d24:	e007      	b.n	8000d36 <HAL_ADC_Init+0x332>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2a:	f043 0210 	orr.w	r2, r3, #16
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d36:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3724      	adds	r7, #36	; 0x24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd90      	pop	{r4, r7, pc}

08000d40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b099      	sub	sp, #100	; 0x64
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is  
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));  
  
  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	4aa2      	ldr	r2, [pc, #648]	; (8000fe4 <HAL_ADC_ConfigChannel+0x2a4>)
 8000d5a:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
    }
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d101      	bne.n	8000d6a <HAL_ADC_ConfigChannel+0x2a>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e2cf      	b.n	800130a <HAL_ADC_ConfigChannel+0x5ca>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fe1d 	bl	80009b6 <LL_ADC_REG_IsConversionOngoing>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 82b4 	bne.w	80012ec <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d108      	bne.n	8000da2 <HAL_ADC_ConfigChannel+0x62>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	0e9b      	lsrs	r3, r3, #26
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	e00e      	b.n	8000dc0 <HAL_ADC_ConfigChannel+0x80>
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000daa:	fa93 f3a3 	rbit	r3, r3
 8000dae:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000db2:	fab3 f383 	clz	r3, r3
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	2201      	movs	r2, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6812      	ldr	r2, [r2, #0]
 8000dc4:	69d1      	ldr	r1, [r2, #28]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6812      	ldr	r2, [r2, #0]
 8000dca:	430b      	orrs	r3, r1
 8000dcc:	61d3      	str	r3, [r2, #28]
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	6859      	ldr	r1, [r3, #4]
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f7ff fd15 	bl	800080a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fde6 	bl	80009b6 <LL_ADC_REG_IsConversionOngoing>
 8000dea:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fdf3 	bl	80009dc <LL_ADC_INJ_IsConversionOngoing>
 8000df6:	6578      	str	r0, [r7, #84]	; 0x54
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 80a4 	bne.w	8000f48 <HAL_ADC_ConfigChannel+0x208>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 80a0 	bne.w	8000f48 <HAL_ADC_ConfigChannel+0x208>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	6819      	ldr	r1, [r3, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	461a      	mov	r2, r3
 8000e16:	f7ff fd21 	bl	800085c <LL_ADC_SetChannelSamplingTime>
      
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000e1a:	4b73      	ldr	r3, [pc, #460]	; (8000fe8 <HAL_ADC_ConfigChannel+0x2a8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e26:	d10b      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x100>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	695a      	ldr	r2, [r3, #20]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	e01d      	b.n	8000e7c <HAL_ADC_ConfigChannel+0x13c>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10b      	bne.n	8000e66 <HAL_ADC_ConfigChannel+0x126>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	695a      	ldr	r2, [r3, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	e00a      	b.n	8000e7c <HAL_ADC_ConfigChannel+0x13c>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	653b      	str	r3, [r7, #80]	; 0x50
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d018      	beq.n	8000eb8 <HAL_ADC_ConfigChannel+0x178>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	6919      	ldr	r1, [r3, #16]
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e94:	f7ff fc84 	bl	80007a0 <LL_ADC_SetOffset>
         
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	6919      	ldr	r1, [r3, #16]
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	7e5b      	ldrb	r3, [r3, #25]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d102      	bne.n	8000eae <HAL_ADC_ConfigChannel+0x16e>
 8000ea8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000eac:	e000      	b.n	8000eb0 <HAL_ADC_ConfigChannel+0x170>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	f7ff fc92 	bl	80007da <LL_ADC_SetOffsetSignedSaturation>
 8000eb6:	e047      	b.n	8000f48 <HAL_ADC_ConfigChannel+0x208>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	069b      	lsls	r3, r3, #26
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d107      	bne.n	8000edc <HAL_ADC_ConfigChannel+0x19c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000eda:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	069b      	lsls	r3, r3, #26
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d107      	bne.n	8000f00 <HAL_ADC_ConfigChannel+0x1c0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000efe:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	069b      	lsls	r3, r3, #26
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d107      	bne.n	8000f24 <HAL_ADC_ConfigChannel+0x1e4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f22:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	069b      	lsls	r3, r3, #26
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d107      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x208>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f46:	66da      	str	r2, [r3, #108]	; 0x6c
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fd1f 	bl	8000990 <LL_ADC_IsEnabled>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f040 81d2 	bne.w	80012fe <HAL_ADC_ConfigChannel+0x5be>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	461a      	mov	r2, r3
 8000f68:	f7ff fca0 	bl	80008ac <LL_ADC_SetChannelSingleDiff>
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <HAL_ADC_ConfigChannel+0x2a4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	f040 80fa 	bne.w	800116c <HAL_ADC_ConfigChannel+0x42c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)), sConfig->SamplingTime);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10b      	bne.n	8000fa0 <HAL_ADC_ConfigChannel+0x260>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	0e9b      	lsrs	r3, r3, #26
 8000f8e:	3301      	adds	r3, #1
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	2b09      	cmp	r3, #9
 8000f96:	bf94      	ite	ls
 8000f98:	2301      	movls	r3, #1
 8000f9a:	2300      	movhi	r3, #0
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	e011      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x284>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fa8:	fa93 f3a3 	rbit	r3, r3
 8000fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8000fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb0:	fab3 f383 	clz	r3, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	f003 031f 	and.w	r3, r3, #31
 8000fba:	2b09      	cmp	r3, #9
 8000fbc:	bf94      	ite	ls
 8000fbe:	2301      	movls	r3, #1
 8000fc0:	2300      	movhi	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d065      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x354>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10b      	bne.n	8000fec <HAL_ADC_ConfigChannel+0x2ac>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0e9b      	lsrs	r3, r3, #26
 8000fda:	3301      	adds	r3, #1
 8000fdc:	069b      	lsls	r3, r3, #26
 8000fde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fe2:	e011      	b.n	8001008 <HAL_ADC_ConfigChannel+0x2c8>
 8000fe4:	47ff0000 	.word	0x47ff0000
 8000fe8:	5c001000 	.word	0x5c001000
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ff4:	fa93 f3a3 	rbit	r3, r3
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8000ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ffc:	fab3 f383 	clz	r3, r3
 8001000:	3301      	adds	r3, #1
 8001002:	069b      	lsls	r3, r3, #26
 8001004:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001010:	2b00      	cmp	r3, #0
 8001012:	d109      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x2e8>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0e9b      	lsrs	r3, r3, #26
 800101a:	3301      	adds	r3, #1
 800101c:	f003 031f 	and.w	r3, r3, #31
 8001020:	2101      	movs	r1, #1
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	e00f      	b.n	8001048 <HAL_ADC_ConfigChannel+0x308>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	3301      	adds	r3, #1
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	2101      	movs	r1, #1
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	ea42 0103 	orr.w	r1, r2, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10a      	bne.n	800106e <HAL_ADC_ConfigChannel+0x32e>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	0e9b      	lsrs	r3, r3, #26
 800105e:	3301      	adds	r3, #1
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	051b      	lsls	r3, r3, #20
 800106c:	e010      	b.n	8001090 <HAL_ADC_ConfigChannel+0x350>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	fa93 f3a3 	rbit	r3, r3
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	fab3 f383 	clz	r3, r3
 8001082:	3301      	adds	r3, #1
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	051b      	lsls	r3, r3, #20
 8001090:	430b      	orrs	r3, r1
 8001092:	e066      	b.n	8001162 <HAL_ADC_ConfigChannel+0x422>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800109c:	2b00      	cmp	r3, #0
 800109e:	d107      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x370>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	0e9b      	lsrs	r3, r3, #26
 80010a6:	3301      	adds	r3, #1
 80010a8:	069b      	lsls	r3, r3, #26
 80010aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010ae:	e00d      	b.n	80010cc <HAL_ADC_ConfigChannel+0x38c>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	fa93 f3a3 	rbit	r3, r3
 80010bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fab3 f383 	clz	r3, r3
 80010c4:	3301      	adds	r3, #1
 80010c6:	069b      	lsls	r3, r3, #26
 80010c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d109      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x3ac>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	0e9b      	lsrs	r3, r3, #26
 80010de:	3301      	adds	r3, #1
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	2101      	movs	r1, #1
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	e00f      	b.n	800110c <HAL_ADC_ConfigChannel+0x3cc>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	fa93 f3a3 	rbit	r3, r3
 80010f8:	617b      	str	r3, [r7, #20]
  return(result);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	fab3 f383 	clz	r3, r3
 8001100:	3301      	adds	r3, #1
 8001102:	f003 031f 	and.w	r3, r3, #31
 8001106:	2101      	movs	r1, #1
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	ea42 0103 	orr.w	r1, r2, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10d      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x3f8>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0e9b      	lsrs	r3, r3, #26
 8001122:	3301      	adds	r3, #1
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	3b1e      	subs	r3, #30
 8001130:	051b      	lsls	r3, r3, #20
 8001132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001136:	e013      	b.n	8001160 <HAL_ADC_ConfigChannel+0x420>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	60fb      	str	r3, [r7, #12]
  return(result);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	fab3 f383 	clz	r3, r3
 800114c:	3301      	adds	r3, #1
 800114e:	f003 021f 	and.w	r2, r3, #31
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	3b1e      	subs	r3, #30
 800115a:	051b      	lsls	r3, r3, #20
 800115c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001160:	430b      	orrs	r3, r1
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	6892      	ldr	r2, [r2, #8]
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fb78 	bl	800085c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */
      
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	f280 80c4 	bge.w	80012fe <HAL_ADC_ConfigChannel+0x5be>
      {
        /* Configuration of common ADC parameters                                 */
        
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a66      	ldr	r2, [pc, #408]	; (8001314 <HAL_ADC_ConfigChannel+0x5d4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d004      	beq.n	800118a <HAL_ADC_ConfigChannel+0x44a>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a64      	ldr	r2, [pc, #400]	; (8001318 <HAL_ADC_ConfigChannel+0x5d8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_ADC_ConfigChannel+0x44e>
 800118a:	4b64      	ldr	r3, [pc, #400]	; (800131c <HAL_ADC_ConfigChannel+0x5dc>)
 800118c:	e000      	b.n	8001190 <HAL_ADC_ConfigChannel+0x450>
 800118e:	4b64      	ldr	r3, [pc, #400]	; (8001320 <HAL_ADC_ConfigChannel+0x5e0>)
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff faf7 	bl	8000784 <LL_ADC_GetCommonPathInternalCh>
 8001196:	64f8      	str	r0, [r7, #76]	; 0x4c
        
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a5d      	ldr	r2, [pc, #372]	; (8001314 <HAL_ADC_ConfigChannel+0x5d4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d004      	beq.n	80011ac <HAL_ADC_ConfigChannel+0x46c>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a5c      	ldr	r2, [pc, #368]	; (8001318 <HAL_ADC_ConfigChannel+0x5d8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d10e      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x48a>
 80011ac:	4859      	ldr	r0, [pc, #356]	; (8001314 <HAL_ADC_ConfigChannel+0x5d4>)
 80011ae:	f7ff fbef 	bl	8000990 <LL_ADC_IsEnabled>
 80011b2:	4604      	mov	r4, r0
 80011b4:	4858      	ldr	r0, [pc, #352]	; (8001318 <HAL_ADC_ConfigChannel+0x5d8>)
 80011b6:	f7ff fbeb 	bl	8000990 <LL_ADC_IsEnabled>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4323      	orrs	r3, r4
 80011be:	2b00      	cmp	r3, #0
 80011c0:	bf0c      	ite	eq
 80011c2:	2301      	moveq	r3, #1
 80011c4:	2300      	movne	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	e008      	b.n	80011dc <HAL_ADC_ConfigChannel+0x49c>
 80011ca:	4856      	ldr	r0, [pc, #344]	; (8001324 <HAL_ADC_ConfigChannel+0x5e4>)
 80011cc:	f7ff fbe0 	bl	8000990 <LL_ADC_IsEnabled>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d07b      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x598>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a50      	ldr	r2, [pc, #320]	; (8001328 <HAL_ADC_ConfigChannel+0x5e8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d12e      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x508>
 80011ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d129      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x508>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a4a      	ldr	r2, [pc, #296]	; (8001324 <HAL_ADC_ConfigChannel+0x5e4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d17f      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x5be>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a44      	ldr	r2, [pc, #272]	; (8001314 <HAL_ADC_ConfigChannel+0x5d4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d004      	beq.n	8001212 <HAL_ADC_ConfigChannel+0x4d2>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a42      	ldr	r2, [pc, #264]	; (8001318 <HAL_ADC_ConfigChannel+0x5d8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_ADC_ConfigChannel+0x4d6>
 8001212:	4a42      	ldr	r2, [pc, #264]	; (800131c <HAL_ADC_ConfigChannel+0x5dc>)
 8001214:	e000      	b.n	8001218 <HAL_ADC_ConfigChannel+0x4d8>
 8001216:	4a42      	ldr	r2, [pc, #264]	; (8001320 <HAL_ADC_ConfigChannel+0x5e0>)
 8001218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800121a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800121e:	4619      	mov	r1, r3
 8001220:	4610      	mov	r0, r2
 8001222:	f7ff fa9c 	bl	800075e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <HAL_ADC_ConfigChannel+0x5ec>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	099b      	lsrs	r3, r3, #6
 800122c:	4a40      	ldr	r2, [pc, #256]	; (8001330 <HAL_ADC_ConfigChannel+0x5f0>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	099b      	lsrs	r3, r3, #6
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001238:	e002      	b.n	8001240 <HAL_ADC_ConfigChannel+0x500>
              {
                wait_loop_index--;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	3b01      	subs	r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f9      	bne.n	800123a <HAL_ADC_ConfigChannel+0x4fa>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001246:	e05a      	b.n	80012fe <HAL_ADC_ConfigChannel+0x5be>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a39      	ldr	r2, [pc, #228]	; (8001334 <HAL_ADC_ConfigChannel+0x5f4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d11e      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x550>
 8001252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d119      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x550>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a30      	ldr	r2, [pc, #192]	; (8001324 <HAL_ADC_ConfigChannel+0x5e4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d14b      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x5be>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a2a      	ldr	r2, [pc, #168]	; (8001314 <HAL_ADC_ConfigChannel+0x5d4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d004      	beq.n	800127a <HAL_ADC_ConfigChannel+0x53a>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a28      	ldr	r2, [pc, #160]	; (8001318 <HAL_ADC_ConfigChannel+0x5d8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_ADC_ConfigChannel+0x53e>
 800127a:	4a28      	ldr	r2, [pc, #160]	; (800131c <HAL_ADC_ConfigChannel+0x5dc>)
 800127c:	e000      	b.n	8001280 <HAL_ADC_ConfigChannel+0x540>
 800127e:	4a28      	ldr	r2, [pc, #160]	; (8001320 <HAL_ADC_ConfigChannel+0x5e0>)
 8001280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001286:	4619      	mov	r1, r3
 8001288:	4610      	mov	r0, r2
 800128a:	f7ff fa68 	bl	800075e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800128e:	e036      	b.n	80012fe <HAL_ADC_ConfigChannel+0x5be>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a28      	ldr	r2, [pc, #160]	; (8001338 <HAL_ADC_ConfigChannel+0x5f8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d131      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x5be>
 800129a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800129c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d12c      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x5be>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <HAL_ADC_ConfigChannel+0x5e4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d127      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x5be>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a18      	ldr	r2, [pc, #96]	; (8001314 <HAL_ADC_ConfigChannel+0x5d4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d004      	beq.n	80012c2 <HAL_ADC_ConfigChannel+0x582>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a16      	ldr	r2, [pc, #88]	; (8001318 <HAL_ADC_ConfigChannel+0x5d8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x586>
 80012c2:	4a16      	ldr	r2, [pc, #88]	; (800131c <HAL_ADC_ConfigChannel+0x5dc>)
 80012c4:	e000      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x588>
 80012c6:	4a16      	ldr	r2, [pc, #88]	; (8001320 <HAL_ADC_ConfigChannel+0x5e0>)
 80012c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ce:	4619      	mov	r1, r3
 80012d0:	4610      	mov	r0, r2
 80012d2:	f7ff fa44 	bl	800075e <LL_ADC_SetCommonPathInternalCh>
 80012d6:	e012      	b.n	80012fe <HAL_ADC_ConfigChannel+0x5be>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else  
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012dc:	f043 0220 	orr.w	r2, r3, #32
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	655a      	str	r2, [r3, #84]	; 0x54
          
          tmp_hal_status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80012ea:	e008      	b.n	80012fe <HAL_ADC_ConfigChannel+0x5be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f0:	f043 0220 	orr.w	r2, r3, #32
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 8001306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800130a:	4618      	mov	r0, r3
 800130c:	3764      	adds	r7, #100	; 0x64
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}
 8001312:	bf00      	nop
 8001314:	40022000 	.word	0x40022000
 8001318:	40022100 	.word	0x40022100
 800131c:	40022300 	.word	0x40022300
 8001320:	58026300 	.word	0x58026300
 8001324:	58026000 	.word	0x58026000
 8001328:	cb840000 	.word	0xcb840000
 800132c:	24000008 	.word	0x24000008
 8001330:	053e2d63 	.word	0x053e2d63
 8001334:	c7520000 	.word	0xc7520000
 8001338:	cfb80000 	.word	0xcfb80000

0800133c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a73      	ldr	r2, [pc, #460]	; (8001518 <ADC_ConfigureBoostMode+0x1dc>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d004      	beq.n	8001358 <ADC_ConfigureBoostMode+0x1c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a72      	ldr	r2, [pc, #456]	; (800151c <ADC_ConfigureBoostMode+0x1e0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d109      	bne.n	800136c <ADC_ConfigureBoostMode+0x30>
 8001358:	4b71      	ldr	r3, [pc, #452]	; (8001520 <ADC_ConfigureBoostMode+0x1e4>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf14      	ite	ne
 8001364:	2301      	movne	r3, #1
 8001366:	2300      	moveq	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	e008      	b.n	800137e <ADC_ConfigureBoostMode+0x42>
 800136c:	4b6d      	ldr	r3, [pc, #436]	; (8001524 <ADC_ConfigureBoostMode+0x1e8>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf14      	ite	ne
 8001378:	2301      	movne	r3, #1
 800137a:	2300      	moveq	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01a      	beq.n	80013b8 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001382:	f001 fb89 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8001386:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001390:	d006      	beq.n	80013a0 <ADC_ConfigureBoostMode+0x64>
 8001392:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001396:	d00b      	beq.n	80013b0 <ADC_ConfigureBoostMode+0x74>
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139c:	d000      	beq.n	80013a0 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800139e:	e05d      	b.n	800145c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	0c1b      	lsrs	r3, r3, #16
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	60fb      	str	r3, [r7, #12]
        break;
 80013ae:	e055      	b.n	800145c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	60fb      	str	r3, [r7, #12]
        break;
 80013b6:	e051      	b.n	800145c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80013b8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80013bc:	f002 faa4 	bl	8003908 <HAL_RCCEx_GetPeriphCLKFreq>
 80013c0:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80013ca:	d02a      	beq.n	8001422 <ADC_ConfigureBoostMode+0xe6>
 80013cc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80013d0:	d813      	bhi.n	80013fa <ADC_ConfigureBoostMode+0xbe>
 80013d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80013d6:	d024      	beq.n	8001422 <ADC_ConfigureBoostMode+0xe6>
 80013d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80013dc:	d806      	bhi.n	80013ec <ADC_ConfigureBoostMode+0xb0>
 80013de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013e2:	d01e      	beq.n	8001422 <ADC_ConfigureBoostMode+0xe6>
 80013e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013e8:	d01b      	beq.n	8001422 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80013ea:	e037      	b.n	800145c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80013ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013f0:	d017      	beq.n	8001422 <ADC_ConfigureBoostMode+0xe6>
 80013f2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80013f6:	d014      	beq.n	8001422 <ADC_ConfigureBoostMode+0xe6>
        break;
 80013f8:	e030      	b.n	800145c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80013fa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80013fe:	d021      	beq.n	8001444 <ADC_ConfigureBoostMode+0x108>
 8001400:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001404:	d806      	bhi.n	8001414 <ADC_ConfigureBoostMode+0xd8>
 8001406:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800140a:	d013      	beq.n	8001434 <ADC_ConfigureBoostMode+0xf8>
 800140c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001410:	d014      	beq.n	800143c <ADC_ConfigureBoostMode+0x100>
        break;
 8001412:	e023      	b.n	800145c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001414:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001418:	d018      	beq.n	800144c <ADC_ConfigureBoostMode+0x110>
 800141a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800141e:	d019      	beq.n	8001454 <ADC_ConfigureBoostMode+0x118>
        break;
 8001420:	e01c      	b.n	800145c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	0c9b      	lsrs	r3, r3, #18
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	60fb      	str	r3, [r7, #12]
        break;
 8001432:	e013      	b.n	800145c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	60fb      	str	r3, [r7, #12]
      break;
 800143a:	e00f      	b.n	800145c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	60fb      	str	r3, [r7, #12]
        break;
 8001442:	e00b      	b.n	800145c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	099b      	lsrs	r3, r3, #6
 8001448:	60fb      	str	r3, [r7, #12]
        break;
 800144a:	e007      	b.n	800145c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	09db      	lsrs	r3, r3, #7
 8001450:	60fb      	str	r3, [r7, #12]
        break;
 8001452:	e003      	b.n	800145c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	60fb      	str	r3, [r7, #12]
        break;
 800145a:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800145c:	f7ff f94a 	bl	80006f4 <HAL_GetREVID>
 8001460:	4602      	mov	r2, r0
 8001462:	f241 0303 	movw	r3, #4099	; 0x1003
 8001466:	429a      	cmp	r2, r3
 8001468:	d815      	bhi.n	8001496 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a2e      	ldr	r2, [pc, #184]	; (8001528 <ADC_ConfigureBoostMode+0x1ec>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d908      	bls.n	8001484 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001480:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */ 
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 8001482:	e044      	b.n	800150e <ADC_ConfigureBoostMode+0x1d2>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001492:	609a      	str	r2, [r3, #8]
}
 8001494:	e03b      	b.n	800150e <ADC_ConfigureBoostMode+0x1d2>
    if (freq <= 6250000UL)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4a24      	ldr	r2, [pc, #144]	; (800152c <ADC_ConfigureBoostMode+0x1f0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d808      	bhi.n	80014b0 <ADC_ConfigureBoostMode+0x174>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80014ac:	609a      	str	r2, [r3, #8]
}
 80014ae:	e02e      	b.n	800150e <ADC_ConfigureBoostMode+0x1d2>
    else if((freq > 6250000UL) && (freq <= 12500000UL)) 
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <ADC_ConfigureBoostMode+0x1f0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d90e      	bls.n	80014d6 <ADC_ConfigureBoostMode+0x19a>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <ADC_ConfigureBoostMode+0x1f4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d80a      	bhi.n	80014d6 <ADC_ConfigureBoostMode+0x19a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	e01b      	b.n	800150e <ADC_ConfigureBoostMode+0x1d2>
    else if((freq > 12500000UL) && (freq <= 25000000UL)) 
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4a15      	ldr	r2, [pc, #84]	; (8001530 <ADC_ConfigureBoostMode+0x1f4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d90e      	bls.n	80014fc <ADC_ConfigureBoostMode+0x1c0>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <ADC_ConfigureBoostMode+0x1f8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d80a      	bhi.n	80014fc <ADC_ConfigureBoostMode+0x1c0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	e008      	b.n	800150e <ADC_ConfigureBoostMode+0x1d2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	e7ff      	b.n	800150e <ADC_ConfigureBoostMode+0x1d2>
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40022000 	.word	0x40022000
 800151c:	40022100 	.word	0x40022100
 8001520:	40022300 	.word	0x40022300
 8001524:	58026300 	.word	0x58026300
 8001528:	01312d00 	.word	0x01312d00
 800152c:	005f5e10 	.word	0x005f5e10
 8001530:	00bebc20 	.word	0x00bebc20
 8001534:	017d7840 	.word	0x017d7840

08001538 <LL_ADC_IsEnabled>:
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <LL_ADC_IsEnabled+0x18>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <LL_ADC_IsEnabled+0x1a>
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_ADC_REG_IsConversionOngoing>:
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b04      	cmp	r3, #4
 8001570:	d101      	bne.n	8001576 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b09f      	sub	sp, #124	; 0x7c
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800159e:	2302      	movs	r3, #2
 80015a0:	e0ba      	b.n	8001718 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a5c      	ldr	r2, [pc, #368]	; (8001720 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d102      	bne.n	80015ba <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80015b4:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	e001      	b.n	80015be <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  
  if (tmphadcSlave.Instance == NULL)
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10b      	bne.n	80015dc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c8:	f043 0220 	orr.w	r2, r3, #32
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e09d      	b.n	8001718 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ffbd 	bl	800155e <LL_ADC_REG_IsConversionOngoing>
 80015e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ( (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) 
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ffb7 	bl	800155e <LL_ADC_REG_IsConversionOngoing>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d17f      	bne.n	80016f6 <HAL_ADCEx_MultiModeConfigChannel+0x172>
    && (tmphadcSlave_conversion_on_going == 0UL) )
 80015f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d17c      	bne.n	80016f6 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a47      	ldr	r2, [pc, #284]	; (8001720 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d004      	beq.n	8001610 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a46      	ldr	r2, [pc, #280]	; (8001724 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d101      	bne.n	8001614 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8001610:	4b45      	ldr	r3, [pc, #276]	; (8001728 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001612:	e000      	b.n	8001616 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8001614:	4b45      	ldr	r3, [pc, #276]	; (800172c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001616:	66fb      	str	r3, [r7, #108]	; 0x6c
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d039      	beq.n	8001694 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	431a      	orrs	r2, r3
 800162e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001630:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */
      
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a3a      	ldr	r2, [pc, #232]	; (8001720 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d004      	beq.n	8001646 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a38      	ldr	r2, [pc, #224]	; (8001724 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10e      	bne.n	8001664 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8001646:	4836      	ldr	r0, [pc, #216]	; (8001720 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8001648:	f7ff ff76 	bl	8001538 <LL_ADC_IsEnabled>
 800164c:	4604      	mov	r4, r0
 800164e:	4835      	ldr	r0, [pc, #212]	; (8001724 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8001650:	f7ff ff72 	bl	8001538 <LL_ADC_IsEnabled>
 8001654:	4603      	mov	r3, r0
 8001656:	4323      	orrs	r3, r4
 8001658:	2b00      	cmp	r3, #0
 800165a:	bf0c      	ite	eq
 800165c:	2301      	moveq	r3, #1
 800165e:	2300      	movne	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	e008      	b.n	8001676 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8001664:	4832      	ldr	r0, [pc, #200]	; (8001730 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001666:	f7ff ff67 	bl	8001538 <LL_ADC_IsEnabled>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d047      	beq.n	800170a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
          MODIFY_REG(tmpADC_Common->CCR,
 800167a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001680:	4013      	ands	r3, r2
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	6811      	ldr	r1, [r2, #0]
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	6892      	ldr	r2, [r2, #8]
 800168a:	430a      	orrs	r2, r1
 800168c:	431a      	orrs	r2, r3
 800168e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001690:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001692:	e03a      	b.n	800170a <HAL_ADCEx_MultiModeConfigChannel+0x186>
                    );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800169c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800169e:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a1e      	ldr	r2, [pc, #120]	; (8001720 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d004      	beq.n	80016b4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a1d      	ldr	r2, [pc, #116]	; (8001724 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d10e      	bne.n	80016d2 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 80016b4:	481a      	ldr	r0, [pc, #104]	; (8001720 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80016b6:	f7ff ff3f 	bl	8001538 <LL_ADC_IsEnabled>
 80016ba:	4604      	mov	r4, r0
 80016bc:	4819      	ldr	r0, [pc, #100]	; (8001724 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80016be:	f7ff ff3b 	bl	8001538 <LL_ADC_IsEnabled>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4323      	orrs	r3, r4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bf0c      	ite	eq
 80016ca:	2301      	moveq	r3, #1
 80016cc:	2300      	movne	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	e008      	b.n	80016e4 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80016d2:	4817      	ldr	r0, [pc, #92]	; (8001730 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80016d4:	f7ff ff30 	bl	8001538 <LL_ADC_IsEnabled>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bf0c      	ite	eq
 80016de:	2301      	moveq	r3, #1
 80016e0:	2300      	movne	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d010      	beq.n	800170a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80016e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80016f2:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016f4:	e009      	b.n	800170a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	f043 0220 	orr.w	r2, r3, #32
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001708:	e000      	b.n	800170c <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800170a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 8001714:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
} 
 8001718:	4618      	mov	r0, r3
 800171a:	377c      	adds	r7, #124	; 0x7c
 800171c:	46bd      	mov	sp, r7
 800171e:	bd90      	pop	{r4, r7, pc}
 8001720:	40022000 	.word	0x40022000
 8001724:	40022100 	.word	0x40022100
 8001728:	40022300 	.word	0x40022300
 800172c:	58026300 	.word	0x58026300
 8001730:	58026000 	.word	0x58026000
 8001734:	fffff0e0 	.word	0xfffff0e0

08001738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <__NVIC_SetPriorityGrouping+0x40>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001754:	4013      	ands	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	4313      	orrs	r3, r2
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x40>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00
 800177c:	05fa0000 	.word	0x05fa0000

08001780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <__NVIC_GetPriorityGrouping+0x18>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	f003 0307 	and.w	r3, r3, #7
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	; (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	; (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001868:	d301      	bcc.n	800186e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <SysTick_Config+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001876:	210f      	movs	r1, #15
 8001878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800187c:	f7ff ff8e 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <SysTick_Config+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <SysTick_Config+0x40>)
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff47 	bl	8001738 <__NVIC_SetPriorityGrouping>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff5e 	bl	8001780 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff90 	bl	80017f0 <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5f 	bl	800179c <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffb2 	bl	8001858 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800190e:	4b89      	ldr	r3, [pc, #548]	; (8001b34 <HAL_GPIO_Init+0x234>)
 8001910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001912:	e194      	b.n	8001c3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8186 	beq.w	8001c38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x3c>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b12      	cmp	r3, #18
 800193a:	d123      	bne.n	8001984 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	08da      	lsrs	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	08da      	lsrs	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3208      	adds	r2, #8
 800197e:	69b9      	ldr	r1, [r7, #24]
 8001980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0203 	and.w	r2, r3, #3
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d00b      	beq.n	80019d8 <HAL_GPIO_Init+0xd8>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d007      	beq.n	80019d8 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019cc:	2b11      	cmp	r3, #17
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b12      	cmp	r3, #18
 80019d6:	d130      	bne.n	8001a3a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a0e:	2201      	movs	r2, #1
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 0201 	and.w	r2, r3, #1
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	2203      	movs	r2, #3
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 80e0 	beq.w	8001c38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a78:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_GPIO_Init+0x238>)
 8001a7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a7e:	4a2e      	ldr	r2, [pc, #184]	; (8001b38 <HAL_GPIO_Init+0x238>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_GPIO_Init+0x238>)
 8001a8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a96:	4a29      	ldr	r2, [pc, #164]	; (8001b3c <HAL_GPIO_Init+0x23c>)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <HAL_GPIO_Init+0x240>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d052      	beq.n	8001b68 <HAL_GPIO_Init+0x268>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <HAL_GPIO_Init+0x244>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d031      	beq.n	8001b2e <HAL_GPIO_Init+0x22e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <HAL_GPIO_Init+0x248>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d02b      	beq.n	8001b2a <HAL_GPIO_Init+0x22a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_GPIO_Init+0x24c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d025      	beq.n	8001b26 <HAL_GPIO_Init+0x226>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_GPIO_Init+0x250>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d01f      	beq.n	8001b22 <HAL_GPIO_Init+0x222>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <HAL_GPIO_Init+0x254>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d019      	beq.n	8001b1e <HAL_GPIO_Init+0x21e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a1a      	ldr	r2, [pc, #104]	; (8001b58 <HAL_GPIO_Init+0x258>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0x21a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <HAL_GPIO_Init+0x25c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00d      	beq.n	8001b16 <HAL_GPIO_Init+0x216>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <HAL_GPIO_Init+0x260>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d007      	beq.n	8001b12 <HAL_GPIO_Init+0x212>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_GPIO_Init+0x264>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_GPIO_Init+0x20e>
 8001b0a:	2309      	movs	r3, #9
 8001b0c:	e02d      	b.n	8001b6a <HAL_GPIO_Init+0x26a>
 8001b0e:	230a      	movs	r3, #10
 8001b10:	e02b      	b.n	8001b6a <HAL_GPIO_Init+0x26a>
 8001b12:	2308      	movs	r3, #8
 8001b14:	e029      	b.n	8001b6a <HAL_GPIO_Init+0x26a>
 8001b16:	2307      	movs	r3, #7
 8001b18:	e027      	b.n	8001b6a <HAL_GPIO_Init+0x26a>
 8001b1a:	2306      	movs	r3, #6
 8001b1c:	e025      	b.n	8001b6a <HAL_GPIO_Init+0x26a>
 8001b1e:	2305      	movs	r3, #5
 8001b20:	e023      	b.n	8001b6a <HAL_GPIO_Init+0x26a>
 8001b22:	2304      	movs	r3, #4
 8001b24:	e021      	b.n	8001b6a <HAL_GPIO_Init+0x26a>
 8001b26:	2303      	movs	r3, #3
 8001b28:	e01f      	b.n	8001b6a <HAL_GPIO_Init+0x26a>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e01d      	b.n	8001b6a <HAL_GPIO_Init+0x26a>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e01b      	b.n	8001b6a <HAL_GPIO_Init+0x26a>
 8001b32:	bf00      	nop
 8001b34:	58000080 	.word	0x58000080
 8001b38:	58024400 	.word	0x58024400
 8001b3c:	58000400 	.word	0x58000400
 8001b40:	58020000 	.word	0x58020000
 8001b44:	58020400 	.word	0x58020400
 8001b48:	58020800 	.word	0x58020800
 8001b4c:	58020c00 	.word	0x58020c00
 8001b50:	58021000 	.word	0x58021000
 8001b54:	58021400 	.word	0x58021400
 8001b58:	58021800 	.word	0x58021800
 8001b5c:	58021c00 	.word	0x58021c00
 8001b60:	58022000 	.word	0x58022000
 8001b64:	58022400 	.word	0x58022400
 8001b68:	2300      	movs	r3, #0
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	f002 0203 	and.w	r2, r2, #3
 8001b70:	0092      	lsls	r2, r2, #2
 8001b72:	4093      	lsls	r3, r2
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b7a:	4938      	ldr	r1, [pc, #224]	; (8001c5c <HAL_GPIO_Init+0x35c>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f47f ae63 	bne.w	8001914 <HAL_GPIO_Init+0x14>
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	58000400 	.word	0x58000400

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c7c:	e003      	b.n	8001c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	041a      	lsls	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	619a      	str	r2, [r3, #24]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_PWREx_ConfigSupply+0x6c>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d008      	beq.n	8001cba <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_PWREx_ConfigSupply+0x6c>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d001      	beq.n	8001cba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e01d      	b.n	8001cf6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_PWREx_ConfigSupply+0x6c>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f023 0207 	bic.w	r2, r3, #7
 8001cc2:	490f      	ldr	r1, [pc, #60]	; (8001d00 <HAL_PWREx_ConfigSupply+0x6c>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cca:	f7fe fd07 	bl	80006dc <HAL_GetTick>
 8001cce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8001cd0:	e009      	b.n	8001ce6 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8001cd2:	f7fe fd03 	bl	80006dc <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ce0:	d901      	bls.n	8001ce6 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e007      	b.n	8001cf6 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_PWREx_ConfigSupply+0x6c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	58024800 	.word	0x58024800

08001d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e3a4      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8087 	beq.w	8001e32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d24:	4b9a      	ldr	r3, [pc, #616]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d2e:	4b98      	ldr	r3, [pc, #608]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	2b10      	cmp	r3, #16
 8001d38:	d007      	beq.n	8001d4a <HAL_RCC_OscConfig+0x46>
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	2b18      	cmp	r3, #24
 8001d3e:	d110      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5e>
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d10b      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	4b91      	ldr	r3, [pc, #580]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d06c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x12c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d168      	bne.n	8001e30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e37e      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x76>
 8001d6c:	4b88      	ldr	r3, [pc, #544]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a87      	ldr	r2, [pc, #540]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e02e      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x98>
 8001d82:	4b83      	ldr	r3, [pc, #524]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a82      	ldr	r2, [pc, #520]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b80      	ldr	r3, [pc, #512]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a7f      	ldr	r2, [pc, #508]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e01d      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xbc>
 8001da6:	4b7a      	ldr	r3, [pc, #488]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a79      	ldr	r2, [pc, #484]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b77      	ldr	r3, [pc, #476]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a76      	ldr	r2, [pc, #472]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001dc0:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a72      	ldr	r2, [pc, #456]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b70      	ldr	r3, [pc, #448]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6f      	ldr	r2, [pc, #444]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7fe fc7c 	bl	80006dc <HAL_GetTick>
 8001de4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de8:	f7fe fc78 	bl	80006dc <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e332      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dfa:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0xe4>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe fc68 	bl	80006dc <HAL_GetTick>
 8001e0c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e10:	f7fe fc64 	bl	80006dc <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e31e      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e22:	4b5b      	ldr	r3, [pc, #364]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x10c>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80b0 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e40:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e4a:	4b51      	ldr	r3, [pc, #324]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_RCC_OscConfig+0x162>
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b18      	cmp	r3, #24
 8001e5a:	d149      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x1ec>
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d144      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e66:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_RCC_OscConfig+0x17a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e2f0      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0219 	bic.w	r2, r3, #25
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	4941      	ldr	r1, [pc, #260]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7fe fc24 	bl	80006dc <HAL_GetTick>
 8001e94:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e98:	f7fe fc20 	bl	80006dc <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e2da      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eaa:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb6:	f7fe fc1d 	bl	80006f4 <HAL_GetREVID>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d80a      	bhi.n	8001eda <HAL_RCC_OscConfig+0x1d6>
 8001ec4:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	031b      	lsls	r3, r3, #12
 8001ed2:	492f      	ldr	r1, [pc, #188]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed8:	e062      	b.n	8001fa0 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	061b      	lsls	r3, r3, #24
 8001ee8:	4929      	ldr	r1, [pc, #164]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eee:	e057      	b.n	8001fa0 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d038      	beq.n	8001f6a <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 0219 	bic.w	r2, r3, #25
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4922      	ldr	r1, [pc, #136]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7fe fbe7 	bl	80006dc <HAL_GetTick>
 8001f0e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f12:	f7fe fbe3 	bl	80006dc <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e29d      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f30:	f7fe fbe0 	bl	80006f4 <HAL_GetREVID>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f241 0303 	movw	r3, #4099	; 0x1003
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d80a      	bhi.n	8001f54 <HAL_RCC_OscConfig+0x250>
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	031b      	lsls	r3, r3, #12
 8001f4c:	4910      	ldr	r1, [pc, #64]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
 8001f52:	e025      	b.n	8001fa0 <HAL_RCC_OscConfig+0x29c>
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	490b      	ldr	r1, [pc, #44]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e01a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <HAL_RCC_OscConfig+0x28c>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7fe fbb1 	bl	80006dc <HAL_GetTick>
 8001f7a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7fe fbad 	bl	80006dc <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d903      	bls.n	8001f94 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e267      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
 8001f90:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f94:	4ba0      	ldr	r3, [pc, #640]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 808f 	beq.w	80020cc <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fae:	4b9a      	ldr	r3, [pc, #616]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fb6:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fb8:	4b97      	ldr	r3, [pc, #604]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d007      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x2d0>
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2b18      	cmp	r3, #24
 8001fc8:	d12d      	bne.n	8002026 <HAL_RCC_OscConfig+0x322>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d128      	bne.n	8002026 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fd4:	4b90      	ldr	r3, [pc, #576]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_OscConfig+0x2e8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	2b80      	cmp	r3, #128	; 0x80
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e239      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fec:	f7fe fb82 	bl	80006f4 <HAL_GetREVID>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d80a      	bhi.n	8002010 <HAL_RCC_OscConfig+0x30c>
 8001ffa:	4b87      	ldr	r3, [pc, #540]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	069b      	lsls	r3, r3, #26
 8002008:	4983      	ldr	r1, [pc, #524]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800200e:	e05d      	b.n	80020cc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002010:	4b81      	ldr	r3, [pc, #516]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	497e      	ldr	r1, [pc, #504]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002020:	4313      	orrs	r3, r2
 8002022:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002024:	e052      	b.n	80020cc <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d035      	beq.n	800209a <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800202e:	4b7a      	ldr	r3, [pc, #488]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a79      	ldr	r2, [pc, #484]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7fe fb4f 	bl	80006dc <HAL_GetTick>
 800203e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002042:	f7fe fb4b 	bl	80006dc <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e205      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002054:	4b70      	ldr	r3, [pc, #448]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002060:	f7fe fb48 	bl	80006f4 <HAL_GetREVID>
 8002064:	4602      	mov	r2, r0
 8002066:	f241 0303 	movw	r3, #4099	; 0x1003
 800206a:	429a      	cmp	r2, r3
 800206c:	d80a      	bhi.n	8002084 <HAL_RCC_OscConfig+0x380>
 800206e:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	069b      	lsls	r3, r3, #26
 800207c:	4966      	ldr	r1, [pc, #408]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
 8002082:	e023      	b.n	80020cc <HAL_RCC_OscConfig+0x3c8>
 8002084:	4b64      	ldr	r3, [pc, #400]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	061b      	lsls	r3, r3, #24
 8002092:	4961      	ldr	r1, [pc, #388]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002094:	4313      	orrs	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
 8002098:	e018      	b.n	80020cc <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800209a:	4b5f      	ldr	r3, [pc, #380]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a5e      	ldr	r2, [pc, #376]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 80020a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe fb19 	bl	80006dc <HAL_GetTick>
 80020aa:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80020ae:	f7fe fb15 	bl	80006dc <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1cf      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020c0:	4b55      	ldr	r3, [pc, #340]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f0      	bne.n	80020ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d036      	beq.n	8002146 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d019      	beq.n	8002114 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e0:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 80020e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e4:	4a4c      	ldr	r2, [pc, #304]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ec:	f7fe faf6 	bl	80006dc <HAL_GetTick>
 80020f0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f4:	f7fe faf2 	bl	80006dc <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1ac      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002106:	4b44      	ldr	r3, [pc, #272]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x3f0>
 8002112:	e018      	b.n	8002146 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002114:	4b40      	ldr	r3, [pc, #256]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002118:	4a3f      	ldr	r2, [pc, #252]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7fe fadc 	bl	80006dc <HAL_GetTick>
 8002124:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002128:	f7fe fad8 	bl	80006dc <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e192      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800213a:	4b37      	ldr	r3, [pc, #220]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 800213c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d036      	beq.n	80021c0 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d019      	beq.n	800218e <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800215a:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002160:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002164:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002166:	f7fe fab9 	bl	80006dc <HAL_GetTick>
 800216a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800216e:	f7fe fab5 	bl	80006dc <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e16f      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x46a>
 800218c:	e018      	b.n	80021c0 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a21      	ldr	r2, [pc, #132]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 8002194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002198:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800219a:	f7fe fa9f 	bl	80006dc <HAL_GetTick>
 800219e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80021a2:	f7fe fa9b 	bl	80006dc <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e155      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8086 	beq.w	80022da <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_RCC_OscConfig+0x518>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <HAL_RCC_OscConfig+0x518>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021da:	f7fe fa7f 	bl	80006dc <HAL_GetTick>
 80021de:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7fe fa7b 	bl	80006dc <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b64      	cmp	r3, #100	; 0x64
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e135      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_RCC_OscConfig+0x518>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10b      	bne.n	8002220 <HAL_RCC_OscConfig+0x51c>
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	4a02      	ldr	r2, [pc, #8]	; (8002218 <HAL_RCC_OscConfig+0x514>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6713      	str	r3, [r2, #112]	; 0x70
 8002214:	e032      	b.n	800227c <HAL_RCC_OscConfig+0x578>
 8002216:	bf00      	nop
 8002218:	58024400 	.word	0x58024400
 800221c:	58024800 	.word	0x58024800
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10c      	bne.n	8002242 <HAL_RCC_OscConfig+0x53e>
 8002228:	4b8f      	ldr	r3, [pc, #572]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4a8e      	ldr	r2, [pc, #568]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
 8002234:	4b8c      	ldr	r3, [pc, #560]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	4a8b      	ldr	r2, [pc, #556]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 800223a:	f023 0304 	bic.w	r3, r3, #4
 800223e:	6713      	str	r3, [r2, #112]	; 0x70
 8002240:	e01c      	b.n	800227c <HAL_RCC_OscConfig+0x578>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x560>
 800224a:	4b87      	ldr	r3, [pc, #540]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a86      	ldr	r2, [pc, #536]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
 8002256:	4b84      	ldr	r3, [pc, #528]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a83      	ldr	r2, [pc, #524]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0x578>
 8002264:	4b80      	ldr	r3, [pc, #512]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	4a7f      	ldr	r2, [pc, #508]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	6713      	str	r3, [r2, #112]	; 0x70
 8002270:	4b7d      	ldr	r3, [pc, #500]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	4a7c      	ldr	r2, [pc, #496]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002276:	f023 0304 	bic.w	r3, r3, #4
 800227a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d015      	beq.n	80022b0 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7fe fa2a 	bl	80006dc <HAL_GetTick>
 8002288:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7fe fa26 	bl	80006dc <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e0de      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022a2:	4b71      	ldr	r3, [pc, #452]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0ee      	beq.n	800228c <HAL_RCC_OscConfig+0x588>
 80022ae:	e014      	b.n	80022da <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7fe fa14 	bl	80006dc <HAL_GetTick>
 80022b4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7fe fa10 	bl	80006dc <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0c8      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022ce:	4b66      	ldr	r3, [pc, #408]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1ee      	bne.n	80022b8 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 80bd 	beq.w	800245e <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80022e4:	4b60      	ldr	r3, [pc, #384]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ec:	2b18      	cmp	r3, #24
 80022ee:	f000 80b4 	beq.w	800245a <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	f040 8095 	bne.w	8002426 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fc:	4b5a      	ldr	r3, [pc, #360]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a59      	ldr	r2, [pc, #356]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe f9e8 	bl	80006dc <HAL_GetTick>
 800230c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002310:	f7fe f9e4 	bl	80006dc <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e09e      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002322:	4b51      	ldr	r3, [pc, #324]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800232e:	4b4e      	ldr	r3, [pc, #312]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002332:	4b4e      	ldr	r3, [pc, #312]	; (800246c <HAL_RCC_OscConfig+0x768>)
 8002334:	4013      	ands	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	430a      	orrs	r2, r1
 8002342:	4949      	ldr	r1, [pc, #292]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002344:	4313      	orrs	r3, r2
 8002346:	628b      	str	r3, [r1, #40]	; 0x28
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	3b01      	subs	r3, #1
 800234e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002356:	3b01      	subs	r3, #1
 8002358:	025b      	lsls	r3, r3, #9
 800235a:	b29b      	uxth	r3, r3
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	3b01      	subs	r3, #1
 8002364:	041b      	lsls	r3, r3, #16
 8002366:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	3b01      	subs	r3, #1
 8002372:	061b      	lsls	r3, r3, #24
 8002374:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002378:	493b      	ldr	r1, [pc, #236]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 800237a:	4313      	orrs	r3, r2
 800237c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800237e:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	4a39      	ldr	r2, [pc, #228]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800238a:	4b37      	ldr	r3, [pc, #220]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 800238c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_RCC_OscConfig+0x76c>)
 8002390:	4013      	ands	r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002396:	00d2      	lsls	r2, r2, #3
 8002398:	4933      	ldr	r1, [pc, #204]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 800239a:	4313      	orrs	r3, r2
 800239c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800239e:	4b32      	ldr	r3, [pc, #200]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	f023 020c 	bic.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	492f      	ldr	r1, [pc, #188]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023b0:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	f023 0202 	bic.w	r2, r3, #2
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023bc:	492a      	ldr	r1, [pc, #168]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	4a28      	ldr	r2, [pc, #160]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	4a25      	ldr	r2, [pc, #148]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023da:	4b23      	ldr	r3, [pc, #140]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	4a22      	ldr	r2, [pc, #136]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	4a1f      	ldr	r2, [pc, #124]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 80023f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7fe f96d 	bl	80006dc <HAL_GetTick>
 8002402:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002406:	f7fe f969 	bl	80006dc <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e023      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x702>
 8002424:	e01b      	b.n	800245e <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 800242c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7fe f953 	bl	80006dc <HAL_GetTick>
 8002436:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe f94f 	bl	80006dc <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e009      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_RCC_OscConfig+0x764>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x736>
 8002458:	e001      	b.n	800245e <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	58024400 	.word	0x58024400
 800246c:	fffffc0c 	.word	0xfffffc0c
 8002470:	ffff0007 	.word	0xffff0007

08002474 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e18b      	b.n	80027a0 <HAL_RCC_ClockConfig+0x32c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b8a      	ldr	r3, [pc, #552]	; (80026b4 <HAL_RCC_ClockConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d910      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b87      	ldr	r3, [pc, #540]	; (80026b4 <HAL_RCC_ClockConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 020f 	bic.w	r2, r3, #15
 800249e:	4985      	ldr	r1, [pc, #532]	; (80026b4 <HAL_RCC_ClockConfig+0x240>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b83      	ldr	r3, [pc, #524]	; (80026b4 <HAL_RCC_ClockConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e173      	b.n	80027a0 <HAL_RCC_ClockConfig+0x32c>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	4b7b      	ldr	r3, [pc, #492]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d908      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024d4:	4b78      	ldr	r3, [pc, #480]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	4975      	ldr	r1, [pc, #468]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d010      	beq.n	8002514 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	4b70      	ldr	r3, [pc, #448]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024fe:	429a      	cmp	r2, r3
 8002500:	d908      	bls.n	8002514 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002502:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	496a      	ldr	r1, [pc, #424]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002510:	4313      	orrs	r3, r2
 8002512:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800252c:	429a      	cmp	r2, r3
 800252e:	d908      	bls.n	8002542 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002530:	4b61      	ldr	r3, [pc, #388]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	495e      	ldr	r1, [pc, #376]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 800253e:	4313      	orrs	r3, r2
 8002540:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d010      	beq.n	8002570 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	4b59      	ldr	r3, [pc, #356]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800255a:	429a      	cmp	r2, r3
 800255c:	d908      	bls.n	8002570 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800255e:	4b56      	ldr	r3, [pc, #344]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4953      	ldr	r1, [pc, #332]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 800256c:	4313      	orrs	r3, r2
 800256e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d010      	beq.n	800259e <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	4b4d      	ldr	r3, [pc, #308]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	429a      	cmp	r2, r3
 800258a:	d908      	bls.n	800259e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258c:	4b4a      	ldr	r3, [pc, #296]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f023 020f 	bic.w	r2, r3, #15
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4947      	ldr	r1, [pc, #284]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 800259a:	4313      	orrs	r3, r2
 800259c:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d055      	beq.n	8002656 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025aa:	4b43      	ldr	r3, [pc, #268]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	4940      	ldr	r1, [pc, #256]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c4:	4b3c      	ldr	r3, [pc, #240]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d121      	bne.n	8002614 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0e5      	b.n	80027a0 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d107      	bne.n	80025ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025dc:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d115      	bne.n	8002614 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0d9      	b.n	80027a0 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025f4:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cd      	b.n	80027a0 <HAL_RCC_ClockConfig+0x32c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002604:	4b2c      	ldr	r3, [pc, #176]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0c5      	b.n	80027a0 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002614:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f023 0207 	bic.w	r2, r3, #7
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4925      	ldr	r1, [pc, #148]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002622:	4313      	orrs	r3, r2
 8002624:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7fe f859 	bl	80006dc <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262c:	e00a      	b.n	8002644 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262e:	f7fe f855 	bl	80006dc <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e0ad      	b.n	80027a0 <HAL_RCC_ClockConfig+0x32c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002644:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	429a      	cmp	r2, r3
 8002654:	d1eb      	bne.n	800262e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d010      	beq.n	8002684 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	429a      	cmp	r2, r3
 8002670:	d208      	bcs.n	8002684 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f023 020f 	bic.w	r2, r3, #15
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	490e      	ldr	r1, [pc, #56]	; (80026b8 <HAL_RCC_ClockConfig+0x244>)
 8002680:	4313      	orrs	r3, r2
 8002682:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_ClockConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d214      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_RCC_ClockConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 020f 	bic.w	r2, r3, #15
 800269a:	4906      	ldr	r1, [pc, #24]	; (80026b4 <HAL_RCC_ClockConfig+0x240>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <HAL_RCC_ClockConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e075      	b.n	80027a0 <HAL_RCC_ClockConfig+0x32c>
 80026b4:	52002000 	.word	0x52002000
 80026b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d010      	beq.n	80026ea <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d208      	bcs.n	80026ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026d8:	4b33      	ldr	r3, [pc, #204]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	4930      	ldr	r1, [pc, #192]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d010      	beq.n	8002718 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002702:	429a      	cmp	r2, r3
 8002704:	d208      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002706:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4925      	ldr	r1, [pc, #148]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 8002714:	4313      	orrs	r3, r2
 8002716:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d010      	beq.n	8002746 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002730:	429a      	cmp	r2, r3
 8002732:	d208      	bcs.n	8002746 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002734:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4919      	ldr	r1, [pc, #100]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 8002742:	4313      	orrs	r3, r2
 8002744:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b00      	cmp	r3, #0
 8002750:	d010      	beq.n	8002774 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800275e:	429a      	cmp	r2, r3
 8002760:	d208      	bcs.n	8002774 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	490e      	ldr	r1, [pc, #56]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 8002770:	4313      	orrs	r3, r2
 8002772:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002774:	f000 f81e 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 8002778:	4601      	mov	r1, r0
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_ClockConfig+0x334>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	4a09      	ldr	r2, [pc, #36]	; (80027ac <HAL_RCC_ClockConfig+0x338>)
 8002786:	5cd3      	ldrb	r3, [r2, r3]
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	fa21 f303 	lsr.w	r3, r1, r3
 8002790:	4a07      	ldr	r2, [pc, #28]	; (80027b0 <HAL_RCC_ClockConfig+0x33c>)
 8002792:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 8002794:	2000      	movs	r0, #0
 8002796:	f7fd ff57 	bl	8000648 <HAL_InitTick>
 800279a:	4603      	mov	r3, r0
 800279c:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800279e:	7afb      	ldrb	r3, [r7, #11]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	58024400 	.word	0x58024400
 80027ac:	080087e8 	.word	0x080087e8
 80027b0:	24000008 	.word	0x24000008

080027b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	; 0x24
 80027b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ba:	4baf      	ldr	r3, [pc, #700]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027c2:	2b18      	cmp	r3, #24
 80027c4:	f200 814e 	bhi.w	8002a64 <HAL_RCC_GetSysClockFreq+0x2b0>
 80027c8:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ce:	bf00      	nop
 80027d0:	08002835 	.word	0x08002835
 80027d4:	08002a65 	.word	0x08002a65
 80027d8:	08002a65 	.word	0x08002a65
 80027dc:	08002a65 	.word	0x08002a65
 80027e0:	08002a65 	.word	0x08002a65
 80027e4:	08002a65 	.word	0x08002a65
 80027e8:	08002a65 	.word	0x08002a65
 80027ec:	08002a65 	.word	0x08002a65
 80027f0:	0800285b 	.word	0x0800285b
 80027f4:	08002a65 	.word	0x08002a65
 80027f8:	08002a65 	.word	0x08002a65
 80027fc:	08002a65 	.word	0x08002a65
 8002800:	08002a65 	.word	0x08002a65
 8002804:	08002a65 	.word	0x08002a65
 8002808:	08002a65 	.word	0x08002a65
 800280c:	08002a65 	.word	0x08002a65
 8002810:	08002861 	.word	0x08002861
 8002814:	08002a65 	.word	0x08002a65
 8002818:	08002a65 	.word	0x08002a65
 800281c:	08002a65 	.word	0x08002a65
 8002820:	08002a65 	.word	0x08002a65
 8002824:	08002a65 	.word	0x08002a65
 8002828:	08002a65 	.word	0x08002a65
 800282c:	08002a65 	.word	0x08002a65
 8002830:	08002867 	.word	0x08002867
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002834:	4b90      	ldr	r3, [pc, #576]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002840:	4b8d      	ldr	r3, [pc, #564]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	08db      	lsrs	r3, r3, #3
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	4a8c      	ldr	r2, [pc, #560]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002852:	e10a      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002854:	4b89      	ldr	r3, [pc, #548]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002856:	61bb      	str	r3, [r7, #24]
    break;
 8002858:	e107      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800285a:	4b89      	ldr	r3, [pc, #548]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800285c:	61bb      	str	r3, [r7, #24]
    break;
 800285e:	e104      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002860:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002862:	61bb      	str	r3, [r7, #24]
    break;
 8002864:	e101      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002866:	4b84      	ldr	r3, [pc, #528]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002870:	4b81      	ldr	r3, [pc, #516]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800287a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800287c:	4b7e      	ldr	r3, [pc, #504]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002886:	4b7c      	ldr	r3, [pc, #496]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288a:	08db      	lsrs	r3, r3, #3
 800288c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80da 	beq.w	8002a5e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d05a      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x1b2>
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d302      	bcc.n	80028ba <HAL_RCC_GetSysClockFreq+0x106>
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d078      	beq.n	80029aa <HAL_RCC_GetSysClockFreq+0x1f6>
 80028b8:	e099      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028ba:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d02d      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028c6:	4b6c      	ldr	r3, [pc, #432]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	08db      	lsrs	r3, r3, #3
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	4a6a      	ldr	r2, [pc, #424]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80028d2:	fa22 f303 	lsr.w	r3, r2, r3
 80028d6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	ee07 3a90 	vmov	s15, r3
 80028e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028f0:	4b61      	ldr	r3, [pc, #388]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002900:	ed97 6a02 	vldr	s12, [r7, #8]
 8002904:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002a88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800290c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002910:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002920:	e087      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800292c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002a8c <HAL_RCC_GetSysClockFreq+0x2d8>
 8002930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002934:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800293c:	ee07 3a90 	vmov	s15, r3
 8002940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002944:	ed97 6a02 	vldr	s12, [r7, #8]
 8002948:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002a88 <HAL_RCC_GetSysClockFreq+0x2d4>
 800294c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800295c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002960:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002964:	e065      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002970:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002a90 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002978:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002980:	ee07 3a90 	vmov	s15, r3
 8002984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002988:	ed97 6a02 	vldr	s12, [r7, #8]
 800298c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002a88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800299c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029a8:	e043      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	ee07 3a90 	vmov	s15, r3
 80029b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002a94 <HAL_RCC_GetSysClockFreq+0x2e0>
 80029b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029bc:	4b2e      	ldr	r3, [pc, #184]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80029d0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002a88 <HAL_RCC_GetSysClockFreq+0x2d4>
 80029d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029ec:	e021      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	ee07 3a90 	vmov	s15, r3
 80029f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002a90 <HAL_RCC_GetSysClockFreq+0x2dc>
 80029fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a10:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a14:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002a88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002a18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a30:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	0a5b      	lsrs	r3, r3, #9
 8002a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a56:	ee17 3a90 	vmov	r3, s15
 8002a5a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002a5c:	e005      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
    break;
 8002a62:	e002      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002a66:	61bb      	str	r3, [r7, #24]
    break;
 8002a68:	bf00      	nop
  }

  return sysclockfreq;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3724      	adds	r7, #36	; 0x24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	58024400 	.word	0x58024400
 8002a7c:	03d09000 	.word	0x03d09000
 8002a80:	003d0900 	.word	0x003d0900
 8002a84:	007a1200 	.word	0x007a1200
 8002a88:	46000000 	.word	0x46000000
 8002a8c:	4c742400 	.word	0x4c742400
 8002a90:	4a742400 	.word	0x4a742400
 8002a94:	4af42400 	.word	0x4af42400

08002a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a9c:	f001 fd40 	bl	8004520 <HAL_RCCEx_GetD1SysClockFreq>
 8002aa0:	4601      	mov	r1, r0
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002aac:	5cd3      	ldrb	r3, [r2, r3]
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <HAL_RCC_GetHCLKFreq+0x34>)
 8002ab8:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8002aba:	4b04      	ldr	r3, [pc, #16]	; (8002acc <HAL_RCC_GetHCLKFreq+0x34>)
 8002abc:	681b      	ldr	r3, [r3, #0]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	58024400 	.word	0x58024400
 8002ac8:	080087e8 	.word	0x080087e8
 8002acc:	2400000c 	.word	0x2400000c

08002ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ad4:	f7ff ffe0 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4601      	mov	r1, r0
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ae6:	5cd3      	ldrb	r3, [r2, r3]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	58024400 	.word	0x58024400
 8002af8:	080087e8 	.word	0x080087e8

08002afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b00:	f7ff ffca 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	58024400 	.word	0x58024400
 8002b24:	080087e8 	.word	0x080087e8

08002b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b30:	2300      	movs	r3, #0
 8002b32:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b34:	2300      	movs	r3, #0
 8002b36:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d03d      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b4c:	d013      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b52:	d802      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002b58:	e01f      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002b5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b5e:	d013      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002b60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b64:	d01c      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002b66:	e018      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b68:	4baf      	ldr	r3, [pc, #700]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	4aae      	ldr	r2, [pc, #696]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b74:	e015      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 fceb 	bl	8004558 <RCCEx_PLL2_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b86:	e00c      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3324      	adds	r3, #36	; 0x24
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 fd94 	bl	80046bc <RCCEx_PLL3_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b98:	e003      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002ba8:	4b9f      	ldr	r3, [pc, #636]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bb4:	499c      	ldr	r1, [pc, #624]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	650b      	str	r3, [r1, #80]	; 0x50
 8002bba:	e001      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d03d      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d826      	bhi.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002bd4:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002bf1 	.word	0x08002bf1
 8002be0:	08002bff 	.word	0x08002bff
 8002be4:	08002c11 	.word	0x08002c11
 8002be8:	08002c29 	.word	0x08002c29
 8002bec:	08002c29 	.word	0x08002c29
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf0:	4b8d      	ldr	r3, [pc, #564]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	4a8c      	ldr	r2, [pc, #560]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bfc:	e015      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 fca7 	bl	8004558 <RCCEx_PLL2_Config>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c0e:	e00c      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3324      	adds	r3, #36	; 0x24
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 fd50 	bl	80046bc <RCCEx_PLL3_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c20:	e003      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
      break;
 8002c26:	e000      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c30:	4b7d      	ldr	r3, [pc, #500]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c34:	f023 0207 	bic.w	r2, r3, #7
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	497a      	ldr	r1, [pc, #488]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	650b      	str	r3, [r1, #80]	; 0x50
 8002c42:	e001      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d03e      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d01c      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002c5c:	2b80      	cmp	r3, #128	; 0x80
 8002c5e:	d804      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	d00d      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002c68:	e01e      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002c6a:	2bc0      	cmp	r3, #192	; 0xc0
 8002c6c:	d01f      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c72:	d01e      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002c74:	e018      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c76:	4b6c      	ldr	r3, [pc, #432]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	4a6b      	ldr	r2, [pc, #428]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c82:	e017      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 fc64 	bl	8004558 <RCCEx_PLL2_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c94:	e00e      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3324      	adds	r3, #36	; 0x24
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 fd0d 	bl	80046bc <RCCEx_PLL3_Config>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ca6:	e005      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	75fb      	strb	r3, [r7, #23]
      break;
 8002cac:	e002      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002cba:	4b5b      	ldr	r3, [pc, #364]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cbe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	4958      	ldr	r1, [pc, #352]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	650b      	str	r3, [r1, #80]	; 0x50
 8002ccc:	e001      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d044      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce8:	d01f      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cee:	d805      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002cf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cf8:	d00e      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002cfa:	e01f      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002cfc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d00:	d01f      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002d02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d06:	d01e      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d08:	e018      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	4a46      	ldr	r2, [pc, #280]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d16:	e017      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 fc1a 	bl	8004558 <RCCEx_PLL2_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002d28:	e00e      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3324      	adds	r3, #36	; 0x24
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 fcc3 	bl	80046bc <RCCEx_PLL3_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d3a:	e005      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d40:	e002      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002d42:	bf00      	nop
 8002d44:	e000      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d4e:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d5c:	4932      	ldr	r1, [pc, #200]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	658b      	str	r3, [r1, #88]	; 0x58
 8002d62:	e001      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d044      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d7e:	d01f      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d84:	d805      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002d8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d8e:	d00e      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002d90:	e01f      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002d92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d96:	d01f      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002d98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d9c:	d01e      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d9e:	e018      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	4a20      	ldr	r2, [pc, #128]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dac:	e017      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3304      	adds	r3, #4
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 fbcf 	bl	8004558 <RCCEx_PLL2_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002dbe:	e00e      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3324      	adds	r3, #36	; 0x24
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 fc78 	bl	80046bc <RCCEx_PLL3_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dd0:	e005      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8002dd6:	e002      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002dd8:	bf00      	nop
 8002dda:	e000      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002df2:	490d      	ldr	r1, [pc, #52]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	658b      	str	r3, [r1, #88]	; 0x58
 8002df8:	e001      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d035      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d00c      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d802      	bhi.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01b      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002e1a:	e017      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d00c      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002e20:	2b30      	cmp	r3, #48	; 0x30
 8002e22:	d018      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002e24:	e012      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002e26:	bf00      	nop
 8002e28:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e2c:	4baf      	ldr	r3, [pc, #700]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	4aae      	ldr	r2, [pc, #696]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e38:	e00e      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	2102      	movs	r1, #2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 fb89 	bl	8004558 <RCCEx_PLL2_Config>
 8002e46:	4603      	mov	r3, r0
 8002e48:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e4a:	e005      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e50:	e002      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002e52:	bf00      	nop
 8002e54:	e000      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e5e:	4ba3      	ldr	r3, [pc, #652]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6a:	49a0      	ldr	r1, [pc, #640]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e70:	e001      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
 8002e74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d042      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8a:	d01f      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e90:	d805      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9a:	d00e      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002e9c:	e01f      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002e9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ea2:	d01f      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea8:	d01e      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002eaa:	e018      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eac:	4b8f      	ldr	r3, [pc, #572]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	4a8e      	ldr	r2, [pc, #568]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002eb8:	e017      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f001 fb49 	bl	8004558 <RCCEx_PLL2_Config>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002eca:	e00e      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3324      	adds	r3, #36	; 0x24
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 fbf2 	bl	80046bc <RCCEx_PLL3_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002edc:	e005      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee2:	e002      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ef0:	4b7e      	ldr	r3, [pc, #504]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	497b      	ldr	r1, [pc, #492]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	650b      	str	r3, [r1, #80]	; 0x50
 8002f02:	e001      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d042      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f1c:	d01b      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002f1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f22:	d805      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d022      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002f2e:	e01b      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002f30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f34:	d01d      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002f36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f3a:	d01c      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002f3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f40:	d01b      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002f42:	e011      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 fb04 	bl	8004558 <RCCEx_PLL2_Config>
 8002f50:	4603      	mov	r3, r0
 8002f52:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f54:	e012      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3324      	adds	r3, #36	; 0x24
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 fbad 	bl	80046bc <RCCEx_PLL3_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f66:	e009      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f6c:	e006      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e004      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002f72:	bf00      	nop
 8002f74:	e002      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002f76:	bf00      	nop
 8002f78:	e000      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f82:	4b5a      	ldr	r3, [pc, #360]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f86:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8e:	4957      	ldr	r1, [pc, #348]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	650b      	str	r3, [r1, #80]	; 0x50
 8002f94:	e001      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d044      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb0:	d01b      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb6:	d805      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d022      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002fbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002fc2:	e01b      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d01d      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fce:	d01c      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002fd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fd4:	d01b      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002fd6:	e011      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 faba 	bl	8004558 <RCCEx_PLL2_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002fe8:	e012      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3324      	adds	r3, #36	; 0x24
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f001 fb63 	bl	80046bc <RCCEx_PLL3_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ffa:	e009      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8003000:	e006      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003002:	bf00      	nop
 8003004:	e004      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003006:	bf00      	nop
 8003008:	e002      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800300e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003016:	4b35      	ldr	r3, [pc, #212]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003024:	4931      	ldr	r1, [pc, #196]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003026:	4313      	orrs	r3, r2
 8003028:	658b      	str	r3, [r1, #88]	; 0x58
 800302a:	e001      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d02d      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003044:	d005      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800304a:	d009      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003050:	e00f      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003052:	4b26      	ldr	r3, [pc, #152]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	4a25      	ldr	r2, [pc, #148]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800305e:	e00c      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3304      	adds	r3, #4
 8003064:	2101      	movs	r1, #1
 8003066:	4618      	mov	r0, r3
 8003068:	f001 fa76 	bl	8004558 <RCCEx_PLL2_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003070:	e003      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
      break;
 8003076:	e000      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800307a:	7dfb      	ldrb	r3, [r7, #23]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003080:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003084:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800308c:	4917      	ldr	r1, [pc, #92]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	650b      	str	r3, [r1, #80]	; 0x50
 8003092:	e001      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d035      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d81b      	bhi.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80030ac:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080030f1 	.word	0x080030f1
 80030b8:	080030c5 	.word	0x080030c5
 80030bc:	080030d3 	.word	0x080030d3
 80030c0:	080030f1 	.word	0x080030f1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	4a08      	ldr	r2, [pc, #32]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80030ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80030d0:	e00f      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2102      	movs	r1, #2
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 fa3d 	bl	8004558 <RCCEx_PLL2_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80030e2:	e006      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	75fb      	strb	r3, [r7, #23]
      break;
 80030e8:	e003      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80030ea:	bf00      	nop
 80030ec:	58024400 	.word	0x58024400
      break;
 80030f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80030f8:	4bba      	ldr	r3, [pc, #744]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80030fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fc:	f023 0203 	bic.w	r2, r3, #3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	49b7      	ldr	r1, [pc, #732]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	64cb      	str	r3, [r1, #76]	; 0x4c
 800310a:	e001      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8086 	beq.w	800322a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311e:	4bb2      	ldr	r3, [pc, #712]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4ab1      	ldr	r2, [pc, #708]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003128:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800312a:	f7fd fad7 	bl	80006dc <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003130:	e009      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fd fad3 	bl	80006dc <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b64      	cmp	r3, #100	; 0x64
 800313e:	d902      	bls.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	75fb      	strb	r3, [r7, #23]
        break;
 8003144:	e005      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003146:	4ba8      	ldr	r3, [pc, #672]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ef      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d166      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003158:	4ba2      	ldr	r3, [pc, #648]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800315a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003162:	4053      	eors	r3, r2
 8003164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800316c:	4b9d      	ldr	r3, [pc, #628]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003174:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003176:	4b9b      	ldr	r3, [pc, #620]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	4a9a      	ldr	r2, [pc, #616]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800317c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003180:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003182:	4b98      	ldr	r3, [pc, #608]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	4a97      	ldr	r2, [pc, #604]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800318e:	4a95      	ldr	r2, [pc, #596]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d115      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fd fa9c 	bl	80006dc <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a6:	e00b      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7fd fa98 	bl	80006dc <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d902      	bls.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	75fb      	strb	r3, [r7, #23]
            break;
 80031be:	e005      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c0:	4b88      	ldr	r3, [pc, #544]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0ed      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d126      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031e0:	d10d      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80031e2:	4b80      	ldr	r3, [pc, #512]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031f0:	0919      	lsrs	r1, r3, #4
 80031f2:	4b7e      	ldr	r3, [pc, #504]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80031f4:	400b      	ands	r3, r1
 80031f6:	497b      	ldr	r1, [pc, #492]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	610b      	str	r3, [r1, #16]
 80031fc:	e005      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80031fe:	4b79      	ldr	r3, [pc, #484]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	4a78      	ldr	r2, [pc, #480]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003204:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003208:	6113      	str	r3, [r2, #16]
 800320a:	4b76      	ldr	r3, [pc, #472]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800320c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003218:	4972      	ldr	r1, [pc, #456]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	670b      	str	r3, [r1, #112]	; 0x70
 800321e:	e004      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	75bb      	strb	r3, [r7, #22]
 8003224:	e001      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003226:	7dfb      	ldrb	r3, [r7, #23]
 8003228:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d07d      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800323a:	2b28      	cmp	r3, #40	; 0x28
 800323c:	d866      	bhi.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800323e:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003244:	08003313 	.word	0x08003313
 8003248:	0800330d 	.word	0x0800330d
 800324c:	0800330d 	.word	0x0800330d
 8003250:	0800330d 	.word	0x0800330d
 8003254:	0800330d 	.word	0x0800330d
 8003258:	0800330d 	.word	0x0800330d
 800325c:	0800330d 	.word	0x0800330d
 8003260:	0800330d 	.word	0x0800330d
 8003264:	080032e9 	.word	0x080032e9
 8003268:	0800330d 	.word	0x0800330d
 800326c:	0800330d 	.word	0x0800330d
 8003270:	0800330d 	.word	0x0800330d
 8003274:	0800330d 	.word	0x0800330d
 8003278:	0800330d 	.word	0x0800330d
 800327c:	0800330d 	.word	0x0800330d
 8003280:	0800330d 	.word	0x0800330d
 8003284:	080032fb 	.word	0x080032fb
 8003288:	0800330d 	.word	0x0800330d
 800328c:	0800330d 	.word	0x0800330d
 8003290:	0800330d 	.word	0x0800330d
 8003294:	0800330d 	.word	0x0800330d
 8003298:	0800330d 	.word	0x0800330d
 800329c:	0800330d 	.word	0x0800330d
 80032a0:	0800330d 	.word	0x0800330d
 80032a4:	08003313 	.word	0x08003313
 80032a8:	0800330d 	.word	0x0800330d
 80032ac:	0800330d 	.word	0x0800330d
 80032b0:	0800330d 	.word	0x0800330d
 80032b4:	0800330d 	.word	0x0800330d
 80032b8:	0800330d 	.word	0x0800330d
 80032bc:	0800330d 	.word	0x0800330d
 80032c0:	0800330d 	.word	0x0800330d
 80032c4:	08003313 	.word	0x08003313
 80032c8:	0800330d 	.word	0x0800330d
 80032cc:	0800330d 	.word	0x0800330d
 80032d0:	0800330d 	.word	0x0800330d
 80032d4:	0800330d 	.word	0x0800330d
 80032d8:	0800330d 	.word	0x0800330d
 80032dc:	0800330d 	.word	0x0800330d
 80032e0:	0800330d 	.word	0x0800330d
 80032e4:	08003313 	.word	0x08003313
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	2101      	movs	r1, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f001 f932 	bl	8004558 <RCCEx_PLL2_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80032f8:	e00c      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3324      	adds	r3, #36	; 0x24
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f001 f9db 	bl	80046bc <RCCEx_PLL3_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800330a:	e003      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75fb      	strb	r3, [r7, #23]
      break;
 8003310:	e000      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800331a:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003326:	492f      	ldr	r1, [pc, #188]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	654b      	str	r3, [r1, #84]	; 0x54
 800332c:	e001      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332e:	7dfb      	ldrb	r3, [r7, #23]
 8003330:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d037      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	2b05      	cmp	r3, #5
 8003344:	d820      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	0800338f 	.word	0x0800338f
 8003350:	08003365 	.word	0x08003365
 8003354:	08003377 	.word	0x08003377
 8003358:	0800338f 	.word	0x0800338f
 800335c:	0800338f 	.word	0x0800338f
 8003360:	0800338f 	.word	0x0800338f
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	2101      	movs	r1, #1
 800336a:	4618      	mov	r0, r3
 800336c:	f001 f8f4 	bl	8004558 <RCCEx_PLL2_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003374:	e00c      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3324      	adds	r3, #36	; 0x24
 800337a:	2101      	movs	r1, #1
 800337c:	4618      	mov	r0, r3
 800337e:	f001 f99d 	bl	80046bc <RCCEx_PLL3_Config>
 8003382:	4603      	mov	r3, r0
 8003384:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003386:	e003      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	75fb      	strb	r3, [r7, #23]
      break;
 800338c:	e000      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800338e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003396:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	f023 0207 	bic.w	r2, r3, #7
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	4910      	ldr	r1, [pc, #64]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	654b      	str	r3, [r1, #84]	; 0x54
 80033a8:	e001      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d040      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d827      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	0800341b 	.word	0x0800341b
 80033d0:	080033f1 	.word	0x080033f1
 80033d4:	08003403 	.word	0x08003403
 80033d8:	0800341b 	.word	0x0800341b
 80033dc:	0800341b 	.word	0x0800341b
 80033e0:	0800341b 	.word	0x0800341b
 80033e4:	58024400 	.word	0x58024400
 80033e8:	58024800 	.word	0x58024800
 80033ec:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	2101      	movs	r1, #1
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 f8ae 	bl	8004558 <RCCEx_PLL2_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003400:	e00c      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3324      	adds	r3, #36	; 0x24
 8003406:	2101      	movs	r1, #1
 8003408:	4618      	mov	r0, r3
 800340a:	f001 f957 	bl	80046bc <RCCEx_PLL3_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003412:	e003      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
      break;
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800341a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003422:	4bb3      	ldr	r3, [pc, #716]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	f023 0207 	bic.w	r2, r3, #7
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	49af      	ldr	r1, [pc, #700]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003432:	4313      	orrs	r3, r2
 8003434:	658b      	str	r3, [r1, #88]	; 0x58
 8003436:	e001      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d044      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800344e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003452:	d01b      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003458:	d805      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d022      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800345e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003464:	e01b      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346a:	d01d      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800346c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003470:	d01c      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003472:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003476:	d01b      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003478:	e011      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f001 f869 	bl	8004558 <RCCEx_PLL2_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800348a:	e012      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3324      	adds	r3, #36	; 0x24
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f001 f912 	bl	80046bc <RCCEx_PLL3_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800349c:	e009      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
      break;
 80034a2:	e006      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80034a4:	bf00      	nop
 80034a6:	e004      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80034a8:	bf00      	nop
 80034aa:	e002      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80034ac:	bf00      	nop
 80034ae:	e000      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80034b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034b8:	4b8d      	ldr	r3, [pc, #564]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c6:	498a      	ldr	r1, [pc, #552]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	654b      	str	r3, [r1, #84]	; 0x54
 80034cc:	e001      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d044      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e8:	d01b      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80034ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ee:	d805      	bhi.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d022      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80034fa:	e01b      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80034fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003500:	d01d      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003502:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003506:	d01c      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003508:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800350c:	d01b      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800350e:	e011      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3304      	adds	r3, #4
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f001 f81e 	bl	8004558 <RCCEx_PLL2_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003520:	e012      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3324      	adds	r3, #36	; 0x24
 8003526:	2102      	movs	r1, #2
 8003528:	4618      	mov	r0, r3
 800352a:	f001 f8c7 	bl	80046bc <RCCEx_PLL3_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003532:	e009      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	75fb      	strb	r3, [r7, #23]
      break;
 8003538:	e006      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800353a:	bf00      	nop
 800353c:	e004      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800353e:	bf00      	nop
 8003540:	e002      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800354e:	4b68      	ldr	r3, [pc, #416]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800355c:	4964      	ldr	r1, [pc, #400]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800355e:	4313      	orrs	r3, r2
 8003560:	658b      	str	r3, [r1, #88]	; 0x58
 8003562:	e001      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	d044      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800357a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800357e:	d01b      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003584:	d805      	bhi.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d022      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003590:	e01b      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003596:	d01d      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003598:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800359c:	d01c      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800359e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035a2:	d01b      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80035a4:	e011      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 ffd3 	bl	8004558 <RCCEx_PLL2_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80035b6:	e012      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3324      	adds	r3, #36	; 0x24
 80035bc:	2102      	movs	r1, #2
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 f87c 	bl	80046bc <RCCEx_PLL3_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80035c8:	e009      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
      break;
 80035ce:	e006      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80035d0:	bf00      	nop
 80035d2:	e004      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80035d4:	bf00      	nop
 80035d6:	e002      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80035dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80035e4:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035f2:	493f      	ldr	r1, [pc, #252]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	658b      	str	r3, [r1, #88]	; 0x58
 80035f8:	e001      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01b      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003614:	d10b      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3324      	adds	r3, #36	; 0x24
 800361a:	2102      	movs	r1, #2
 800361c:	4618      	mov	r0, r3
 800361e:	f001 f84d 	bl	80046bc <RCCEx_PLL3_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00c      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	75bb      	strb	r3, [r7, #22]
 800362c:	e009      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800362e:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363c:	492c      	ldr	r1, [pc, #176]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800363e:	4313      	orrs	r3, r2
 8003640:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01b      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003658:	d10b      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3324      	adds	r3, #36	; 0x24
 800365e:	2102      	movs	r1, #2
 8003660:	4618      	mov	r0, r3
 8003662:	f001 f82b 	bl	80046bc <RCCEx_PLL3_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00c      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	75bb      	strb	r3, [r7, #22]
 8003670:	e009      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003672:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003680:	491b      	ldr	r1, [pc, #108]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d032      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369c:	d00d      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xb92>
 800369e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036a2:	d016      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	2100      	movs	r1, #0
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 ff52 	bl	8004558 <RCCEx_PLL2_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80036b8:	e00c      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3324      	adds	r3, #36	; 0x24
 80036be:	2102      	movs	r1, #2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fffb 	bl	80046bc <RCCEx_PLL3_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80036ca:	e003      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
      break;
 80036d0:	e000      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 80036d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036e8:	4901      	ldr	r1, [pc, #4]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	658b      	str	r3, [r1, #88]	; 0x58
 80036ee:	e003      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80036f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d02f      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800370e:	d00c      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003710:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003714:	d015      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371a:	d10f      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371c:	4b79      	ldr	r3, [pc, #484]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	4a78      	ldr	r2, [pc, #480]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003726:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003728:	e00c      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3324      	adds	r3, #36	; 0x24
 800372e:	2101      	movs	r1, #1
 8003730:	4618      	mov	r0, r3
 8003732:	f000 ffc3 	bl	80046bc <RCCEx_PLL3_Config>
 8003736:	4603      	mov	r3, r0
 8003738:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800373a:	e003      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	75fb      	strb	r3, [r7, #23]
      break;
 8003740:	e000      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8003742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800374a:	4b6e      	ldr	r3, [pc, #440]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800374c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003758:	496a      	ldr	r1, [pc, #424]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800375a:	4313      	orrs	r3, r2
 800375c:	654b      	str	r3, [r1, #84]	; 0x54
 800375e:	e001      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d029      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377c:	d007      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800377e:	e00f      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003780:	4b60      	ldr	r3, [pc, #384]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	4a5f      	ldr	r2, [pc, #380]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800378c:	e00b      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	2102      	movs	r1, #2
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fedf 	bl	8004558 <RCCEx_PLL2_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800379e:	e002      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	75fb      	strb	r3, [r7, #23]
      break;
 80037a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037ac:	4b55      	ldr	r3, [pc, #340]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80037ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b8:	4952      	ldr	r1, [pc, #328]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037be:	e001      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3324      	adds	r3, #36	; 0x24
 80037d4:	2102      	movs	r1, #2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 ff70 	bl	80046bc <RCCEx_PLL3_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02f      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fa:	d00c      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 80037fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003800:	d802      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d011      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8003806:	e00d      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8003808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380c:	d00f      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800380e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003812:	d00e      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8003814:	e006      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	4a3a      	ldr	r2, [pc, #232]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800381c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003820:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003822:	e007      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	75fb      	strb	r3, [r7, #23]
      break;
 8003828:	e004      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800382a:	bf00      	nop
 800382c:	e002      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8003832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800383a:	4b32      	ldr	r3, [pc, #200]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003846:	492f      	ldr	r1, [pc, #188]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	654b      	str	r3, [r1, #84]	; 0x54
 800384c:	e001      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800385e:	4b29      	ldr	r3, [pc, #164]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003862:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4926      	ldr	r1, [pc, #152]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800386c:	4313      	orrs	r3, r2
 800386e:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800387c:	4b21      	ldr	r3, [pc, #132]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800388a:	491e      	ldr	r1, [pc, #120]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800388c:	4313      	orrs	r3, r2
 800388e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038a8:	4916      	ldr	r1, [pc, #88]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	4a11      	ldr	r2, [pc, #68]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038c4:	6113      	str	r3, [r2, #16]
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80038d0:	490c      	ldr	r1, [pc, #48]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	da08      	bge.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ea:	4906      	ldr	r1, [pc, #24]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80038f0:	7dbb      	ldrb	r3, [r7, #22]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e000      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	58024400 	.word	0x58024400

08003908 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b090      	sub	sp, #64	; 0x40
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003916:	d150      	bne.n	80039ba <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8003918:	4ba1      	ldr	r3, [pc, #644]	; (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	2b04      	cmp	r3, #4
 8003926:	d844      	bhi.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8003928:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003945 	.word	0x08003945
 8003934:	08003955 	.word	0x08003955
 8003938:	08003965 	.word	0x08003965
 800393c:	080039ad 	.word	0x080039ad
 8003940:	08003975 	.word	0x08003975
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fc9d 	bl	8004288 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003952:	e1dc      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003954:	f107 0318 	add.w	r3, r7, #24
 8003958:	4618      	mov	r0, r3
 800395a:	f000 f9fd 	bl	8003d58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003962:	e1d4      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003964:	f107 030c 	add.w	r3, r7, #12
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fb41 	bl	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003972:	e1cc      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003974:	4b8a      	ldr	r3, [pc, #552]	; (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003978:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800397c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800397e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003984:	4b87      	ldr	r3, [pc, #540]	; (8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003986:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003988:	e1c1      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 800398a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003990:	d102      	bne.n	8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8003992:	4b85      	ldr	r3, [pc, #532]	; (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003994:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003996:	e1ba      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8003998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800399e:	d102      	bne.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80039a0:	4b82      	ldr	r3, [pc, #520]	; (8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039a4:	e1b3      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039aa:	e1b0      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80039ac:	4b80      	ldr	r3, [pc, #512]	; (8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039b0:	e1ad      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039b6:	bf00      	nop
 80039b8:	e1a9      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c0:	d14f      	bne.n	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80039c2:	4b77      	ldr	r3, [pc, #476]	; (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80039c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80039ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	2b80      	cmp	r3, #128	; 0x80
 80039d0:	d01c      	beq.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80039d2:	2b80      	cmp	r3, #128	; 0x80
 80039d4:	d804      	bhi.n	80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80039da:	2b40      	cmp	r3, #64	; 0x40
 80039dc:	d00e      	beq.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80039de:	e03c      	b.n	8003a5a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80039e0:	2bc0      	cmp	r3, #192	; 0xc0
 80039e2:	d037      	beq.n	8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e8:	d018      	beq.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80039ea:	e036      	b.n	8003a5a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80039ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fc49 	bl	8004288 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039fa:	e188      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039fc:	f107 0318 	add.w	r3, r7, #24
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f9a9 	bl	8003d58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a0a:	e180      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a0c:	f107 030c 	add.w	r3, r7, #12
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 faed 	bl	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a1a:	e178      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003a1c:	4b60      	ldr	r3, [pc, #384]	; (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003a2c:	4b5d      	ldr	r3, [pc, #372]	; (8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003a30:	e16d      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8003a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a38:	d102      	bne.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8003a3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a3e:	e166      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8003a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a46:	d102      	bne.n	8003a4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8003a48:	4b58      	ldr	r3, [pc, #352]	; (8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a4c:	e15f      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a52:	e15c      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a54:	4b56      	ldr	r3, [pc, #344]	; (8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8003a56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a58:	e159      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a5e:	bf00      	nop
 8003a60:	e155      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a68:	d153      	bne.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003a6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003a72:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7a:	d01f      	beq.n	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8003a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a80:	d805      	bhi.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8003a86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a8a:	d00f      	beq.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003a8c:	e03d      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8003a8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a92:	d037      	beq.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8003a94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a98:	d018      	beq.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8003a9a:	e036      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fbf1 	bl	8004288 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003aaa:	e130      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003aac:	f107 0318 	add.w	r3, r7, #24
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f951 	bl	8003d58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003aba:	e128      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003abc:	f107 030c 	add.w	r3, r7, #12
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fa95 	bl	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003aca:	e120      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003acc:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ad4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003adc:	4b31      	ldr	r3, [pc, #196]	; (8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003ae0:	e115      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ae8:	d102      	bne.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8003aea:	4b2f      	ldr	r3, [pc, #188]	; (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003aec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003aee:	e10e      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8003af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af6:	d102      	bne.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8003af8:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003afc:	e107      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b02:	e104      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b04:	4b2a      	ldr	r3, [pc, #168]	; (8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b08:	e101      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b0e:	bf00      	nop
 8003b10:	e0fd      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b18:	d15d      	bne.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003b22:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b2a:	d01f      	beq.n	8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8003b2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b30:	d805      	bhi.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8003b36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b3a:	d00f      	beq.n	8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8003b3c:	e047      	b.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8003b3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b42:	d041      	beq.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8003b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b48:	d018      	beq.n	8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003b4a:	e040      	b.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fb99 	bl	8004288 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b5a:	e0d8      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b5c:	f107 0318 	add.w	r3, r7, #24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f8f9 	bl	8003d58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b6a:	e0d0      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fa3d 	bl	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b7a:	e0c8      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8003b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003b90:	e0bd      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8003b9a:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b9e:	e0b6      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8003ba0:	58024400 	.word	0x58024400
 8003ba4:	03d09000 	.word	0x03d09000
 8003ba8:	003d0900 	.word	0x003d0900
 8003bac:	007a1200 	.word	0x007a1200
 8003bb0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bba:	d102      	bne.n	8003bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8003bbc:	4b56      	ldr	r3, [pc, #344]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bc0:	e0a5      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bc6:	e0a2      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003bc8:	4b54      	ldr	r3, [pc, #336]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 8003bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bcc:	e09f      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bd2:	bf00      	nop
 8003bd4:	e09b      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bdc:	d153      	bne.n	8003c86 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003bde:	4b50      	ldr	r3, [pc, #320]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003be6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bee:	d01f      	beq.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8003bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf4:	d805      	bhi.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfe:	d00f      	beq.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8003c00:	e03d      	b.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8003c02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c06:	d037      	beq.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8003c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0c:	d018      	beq.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8003c0e:	e036      	b.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fb37 	bl	8004288 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c1e:	e076      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c20:	f107 0318 	add.w	r3, r7, #24
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f897 	bl	8003d58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c2e:	e06e      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c30:	f107 030c 	add.w	r3, r7, #12
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 f9db 	bl	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c3e:	e066      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003c40:	4b37      	ldr	r3, [pc, #220]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8003c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c48:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003c50:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003c54:	e05b      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c5c:	d102      	bne.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8003c5e:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x420>)
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c62:	e054      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c6a:	d102      	bne.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8003c6c:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 8003c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c70:	e04d      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c76:	e04a      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c78:	4b28      	ldr	r3, [pc, #160]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c7c:	e047      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c82:	bf00      	nop
 8003c84:	e043      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c8c:	d13d      	bne.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003c8e:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8003c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c96:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9e:	d00c      	beq.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8003ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ca4:	d011      	beq.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d12b      	bne.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003caa:	f107 0318 	add.w	r3, r7, #24
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f852 	bl	8003d58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cb8:	e029      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 f996 	bl	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cc8:	e021      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003cda:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003cde:	e016      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ce6:	d102      	bne.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x420>)
 8003cea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cec:	e00f      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf4:	d102      	bne.n	8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 8003cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cfa:	e008      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d00:	e005      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d06:	bf00      	nop
 8003d08:	e001      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }
  else
    {
      frequency = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3740      	adds	r7, #64	; 0x40
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	007a1200 	.word	0x007a1200
 8003d1c:	00bb8000 	.word	0x00bb8000
 8003d20:	58024400 	.word	0x58024400
 8003d24:	03d09000 	.word	0x03d09000
 8003d28:	003d0900 	.word	0x003d0900

08003d2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003d30:	f7fe feb2 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8003d34:	4601      	mov	r1, r0
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	091b      	lsrs	r3, r3, #4
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003d42:	5cd3      	ldrb	r3, [r2, r3]
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	58024400 	.word	0x58024400
 8003d54:	080087e8 	.word	0x080087e8

08003d58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b089      	sub	sp, #36	; 0x24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d60:	4b9d      	ldr	r3, [pc, #628]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8003d6a:	4b9b      	ldr	r3, [pc, #620]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	0b1b      	lsrs	r3, r3, #12
 8003d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d74:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8003d76:	4b98      	ldr	r3, [pc, #608]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003d80:	4b95      	ldr	r3, [pc, #596]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	08db      	lsrs	r3, r3, #3
 8003d86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d98:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 810a 	beq.w	8003fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d05a      	beq.n	8003e60 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d302      	bcc.n	8003db4 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d078      	beq.n	8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8003db2:	e099      	b.n	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003db4:	4b88      	ldr	r3, [pc, #544]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d02d      	beq.n	8003e1c <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003dc0:	4b85      	ldr	r3, [pc, #532]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	08db      	lsrs	r3, r3, #3
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	4a84      	ldr	r2, [pc, #528]	; (8003fdc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dea:	4b7b      	ldr	r3, [pc, #492]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003e1a:	e087      	b.n	8003f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2e:	4b6a      	ldr	r3, [pc, #424]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e5e:	e065      	b.n	8003f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e72:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ea2:	e043      	b.n	8003f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003fec <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb6:	4b48      	ldr	r3, [pc, #288]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ee6:	e021      	b.n	8003f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efa:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003f2c:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	0a5b      	lsrs	r3, r3, #9
 8003f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f52:	ee17 2a90 	vmov	r2, s15
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003f5a:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f80:	ee17 2a90 	vmov	r2, s15
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003f88:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	0e1b      	lsrs	r3, r3, #24
 8003f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fae:	ee17 2a90 	vmov	r2, s15
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003fb6:	e008      	b.n	8003fca <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	609a      	str	r2, [r3, #8]
}
 8003fca:	bf00      	nop
 8003fcc:	3724      	adds	r7, #36	; 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	03d09000 	.word	0x03d09000
 8003fe0:	46000000 	.word	0x46000000
 8003fe4:	4c742400 	.word	0x4c742400
 8003fe8:	4a742400 	.word	0x4a742400
 8003fec:	4af42400 	.word	0x4af42400

08003ff0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b089      	sub	sp, #36	; 0x24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ff8:	4b9d      	ldr	r3, [pc, #628]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004002:	4b9b      	ldr	r3, [pc, #620]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	0d1b      	lsrs	r3, r3, #20
 8004008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800400c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800400e:	4b98      	ldr	r3, [pc, #608]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004018:	4b95      	ldr	r3, [pc, #596]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	08db      	lsrs	r3, r3, #3
 800401e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	fb02 f303 	mul.w	r3, r2, r3
 8004028:	ee07 3a90 	vmov	s15, r3
 800402c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004030:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 810a 	beq.w	8004250 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d05a      	beq.n	80040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8004042:	2b01      	cmp	r3, #1
 8004044:	d302      	bcc.n	800404c <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8004046:	2b02      	cmp	r3, #2
 8004048:	d078      	beq.n	800413c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800404a:	e099      	b.n	8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800404c:	4b88      	ldr	r3, [pc, #544]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d02d      	beq.n	80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004058:	4b85      	ldr	r3, [pc, #532]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	08db      	lsrs	r3, r3, #3
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	4a84      	ldr	r2, [pc, #528]	; (8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	ee07 3a90 	vmov	s15, r3
 8004070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004082:	4b7b      	ldr	r3, [pc, #492]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004092:	ed97 6a03 	vldr	s12, [r7, #12]
 8004096:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800409a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80040b2:	e087      	b.n	80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800427c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80040c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c6:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80040de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040f6:	e065      	b.n	80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004102:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800410a:	4b59      	ldr	r3, [pc, #356]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800411a:	ed97 6a03 	vldr	s12, [r7, #12]
 800411e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800412a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800412e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800413a:	e043      	b.n	80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	ee07 3a90 	vmov	s15, r3
 8004142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004146:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800414a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800414e:	4b48      	ldr	r3, [pc, #288]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800415e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004162:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800416a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800416e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800417a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800417e:	e021      	b.n	80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800418e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004192:	4b37      	ldr	r3, [pc, #220]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80041aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80041c4:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	0a5b      	lsrs	r3, r3, #9
 80041ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041de:	edd7 6a07 	vldr	s13, [r7, #28]
 80041e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ea:	ee17 2a90 	vmov	r2, s15
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80041f2:	4b1f      	ldr	r3, [pc, #124]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	0c1b      	lsrs	r3, r3, #16
 80041f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041fc:	ee07 3a90 	vmov	s15, r3
 8004200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800420c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004218:	ee17 2a90 	vmov	r2, s15
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004220:	4b13      	ldr	r3, [pc, #76]	; (8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	0e1b      	lsrs	r3, r3, #24
 8004226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800423a:	edd7 6a07 	vldr	s13, [r7, #28]
 800423e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004246:	ee17 2a90 	vmov	r2, s15
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800424e:	e008      	b.n	8004262 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
}
 8004262:	bf00      	nop
 8004264:	3724      	adds	r7, #36	; 0x24
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	58024400 	.word	0x58024400
 8004274:	03d09000 	.word	0x03d09000
 8004278:	46000000 	.word	0x46000000
 800427c:	4c742400 	.word	0x4c742400
 8004280:	4a742400 	.word	0x4a742400
 8004284:	4af42400 	.word	0x4af42400

08004288 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8004288:	b480      	push	{r7}
 800428a:	b089      	sub	sp, #36	; 0x24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004290:	4b9d      	ldr	r3, [pc, #628]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800429a:	4b9b      	ldr	r3, [pc, #620]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	091b      	lsrs	r3, r3, #4
 80042a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042a4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80042a6:	4b98      	ldr	r3, [pc, #608]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80042b0:	4b95      	ldr	r3, [pc, #596]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80042b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b4:	08db      	lsrs	r3, r3, #3
 80042b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	ee07 3a90 	vmov	s15, r3
 80042c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 810a 	beq.w	80044e8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d05a      	beq.n	8004390 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d302      	bcc.n	80042e4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d078      	beq.n	80043d4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80042e2:	e099      	b.n	8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042e4:	4b88      	ldr	r3, [pc, #544]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02d      	beq.n	800434c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042f0:	4b85      	ldr	r3, [pc, #532]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	08db      	lsrs	r3, r3, #3
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	4a84      	ldr	r2, [pc, #528]	; (800450c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004300:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	ee07 3a90 	vmov	s15, r3
 8004308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431a:	4b7b      	ldr	r3, [pc, #492]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432a:	ed97 6a03 	vldr	s12, [r7, #12]
 800432e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004510 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800434a:	e087      	b.n	800445c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004514 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800435a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435e:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004372:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004510 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800438e:	e065      	b.n	800445c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004518 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800439e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a2:	4b59      	ldr	r3, [pc, #356]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004510 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80043ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043d2:	e043      	b.n	800445c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800451c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	4b48      	ldr	r3, [pc, #288]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004510 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80043fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004416:	e021      	b.n	800445c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004422:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004518 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8004426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442a:	4b37      	ldr	r3, [pc, #220]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443a:	ed97 6a03 	vldr	s12, [r7, #12]
 800443e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004510 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800445a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800445c:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	0a5b      	lsrs	r3, r3, #9
 8004462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004472:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004476:	edd7 6a07 	vldr	s13, [r7, #28]
 800447a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800447e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004482:	ee17 2a90 	vmov	r2, s15
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800448a:	4b1f      	ldr	r3, [pc, #124]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	0c1b      	lsrs	r3, r3, #16
 8004490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80044a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b0:	ee17 2a90 	vmov	r2, s15
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80044b8:	4b13      	ldr	r3, [pc, #76]	; (8004508 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	0e1b      	lsrs	r3, r3, #24
 80044be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80044d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044de:	ee17 2a90 	vmov	r2, s15
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80044e6:	e008      	b.n	80044fa <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
}
 80044fa:	bf00      	nop
 80044fc:	3724      	adds	r7, #36	; 0x24
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	58024400 	.word	0x58024400
 800450c:	03d09000 	.word	0x03d09000
 8004510:	46000000 	.word	0x46000000
 8004514:	4c742400 	.word	0x4c742400
 8004518:	4a742400 	.word	0x4a742400
 800451c:	4af42400 	.word	0x4af42400

08004520 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004524:	f7fe f946 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 8004528:	4601      	mov	r1, r0
 800452a:	4b08      	ldr	r3, [pc, #32]	; (800454c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	4a06      	ldr	r2, [pc, #24]	; (8004550 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8004536:	5cd3      	ldrb	r3, [r2, r3]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	fa21 f303 	lsr.w	r3, r1, r3
 8004540:	4a04      	ldr	r2, [pc, #16]	; (8004554 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8004542:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004544:	4b03      	ldr	r3, [pc, #12]	; (8004554 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8004546:	681b      	ldr	r3, [r3, #0]
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	58024400 	.word	0x58024400
 8004550:	080087e8 	.word	0x080087e8
 8004554:	24000008 	.word	0x24000008

08004558 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004566:	4b53      	ldr	r3, [pc, #332]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b03      	cmp	r3, #3
 8004570:	d101      	bne.n	8004576 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e099      	b.n	80046aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004576:	4b4f      	ldr	r3, [pc, #316]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a4e      	ldr	r2, [pc, #312]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800457c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004582:	f7fc f8ab 	bl	80006dc <HAL_GetTick>
 8004586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004588:	e008      	b.n	800459c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800458a:	f7fc f8a7 	bl	80006dc <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e086      	b.n	80046aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800459c:	4b45      	ldr	r3, [pc, #276]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f0      	bne.n	800458a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80045a8:	4b42      	ldr	r3, [pc, #264]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	493f      	ldr	r1, [pc, #252]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	628b      	str	r3, [r1, #40]	; 0x28
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	025b      	lsls	r3, r3, #9
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	041b      	lsls	r3, r3, #16
 80045da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	061b      	lsls	r3, r3, #24
 80045e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045ec:	4931      	ldr	r1, [pc, #196]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045f2:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	492d      	ldr	r1, [pc, #180]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004604:	4b2b      	ldr	r3, [pc, #172]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	f023 0220 	bic.w	r2, r3, #32
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	4928      	ldr	r1, [pc, #160]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004616:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	4a26      	ldr	r2, [pc, #152]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800461c:	f023 0310 	bic.w	r3, r3, #16
 8004620:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004622:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004626:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <RCCEx_PLL2_Config+0x160>)
 8004628:	4013      	ands	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	69d2      	ldr	r2, [r2, #28]
 800462e:	00d2      	lsls	r2, r2, #3
 8004630:	4920      	ldr	r1, [pc, #128]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004632:	4313      	orrs	r3, r2
 8004634:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004636:	4b1f      	ldr	r3, [pc, #124]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800463c:	f043 0310 	orr.w	r3, r3, #16
 8004640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004648:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	4a19      	ldr	r2, [pc, #100]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800464e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004652:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004654:	e00f      	b.n	8004676 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d106      	bne.n	800466a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800465c:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	4a14      	ldr	r2, [pc, #80]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004666:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004668:	e005      	b.n	8004676 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800466a:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	4a11      	ldr	r2, [pc, #68]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004674:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004676:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a0e      	ldr	r2, [pc, #56]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800467c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004682:	f7fc f82b 	bl	80006dc <HAL_GetTick>
 8004686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004688:	e008      	b.n	800469c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800468a:	f7fc f827 	bl	80006dc <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e006      	b.n	80046aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	58024400 	.word	0x58024400
 80046b8:	ffff0007 	.word	0xffff0007

080046bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046ca:	4b53      	ldr	r3, [pc, #332]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d101      	bne.n	80046da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e099      	b.n	800480e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046da:	4b4f      	ldr	r3, [pc, #316]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a4e      	ldr	r2, [pc, #312]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 80046e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e6:	f7fb fff9 	bl	80006dc <HAL_GetTick>
 80046ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046ec:	e008      	b.n	8004700 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046ee:	f7fb fff5 	bl	80006dc <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e086      	b.n	800480e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004700:	4b45      	ldr	r3, [pc, #276]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800470c:	4b42      	ldr	r3, [pc, #264]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	051b      	lsls	r3, r3, #20
 800471a:	493f      	ldr	r1, [pc, #252]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 800471c:	4313      	orrs	r3, r2
 800471e:	628b      	str	r3, [r1, #40]	; 0x28
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	3b01      	subs	r3, #1
 8004726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	3b01      	subs	r3, #1
 8004730:	025b      	lsls	r3, r3, #9
 8004732:	b29b      	uxth	r3, r3
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	3b01      	subs	r3, #1
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	3b01      	subs	r3, #1
 800474a:	061b      	lsls	r3, r3, #24
 800474c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004750:	4931      	ldr	r1, [pc, #196]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004756:	4b30      	ldr	r3, [pc, #192]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	492d      	ldr	r1, [pc, #180]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004764:	4313      	orrs	r3, r2
 8004766:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004768:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	4928      	ldr	r1, [pc, #160]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800477a:	4b27      	ldr	r3, [pc, #156]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	4a26      	ldr	r2, [pc, #152]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004784:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800478a:	4b24      	ldr	r3, [pc, #144]	; (800481c <RCCEx_PLL3_Config+0x160>)
 800478c:	4013      	ands	r3, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	69d2      	ldr	r2, [r2, #28]
 8004792:	00d2      	lsls	r2, r2, #3
 8004794:	4920      	ldr	r1, [pc, #128]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800479a:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80047ac:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	4a19      	ldr	r2, [pc, #100]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047b8:	e00f      	b.n	80047da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d106      	bne.n	80047ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047c0:	4b15      	ldr	r3, [pc, #84]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	4a14      	ldr	r2, [pc, #80]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047cc:	e005      	b.n	80047da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	4a11      	ldr	r2, [pc, #68]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047da:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e6:	f7fb ff79 	bl	80006dc <HAL_GetTick>
 80047ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047ec:	e008      	b.n	8004800 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80047ee:	f7fb ff75 	bl	80006dc <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e006      	b.n	800480e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	58024400 	.word	0x58024400
 800481c:	ffff0007 	.word	0xffff0007

08004820 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e01d      	b.n	800486e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f003 fe70 	bl	800852c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f000 f922 	bl	8004aa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800488e:	2302      	movs	r3, #2
 8004890:	e105      	b.n	8004a9e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2202      	movs	r2, #2
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b14      	cmp	r3, #20
 80048a6:	f200 80f0 	bhi.w	8004a8a <HAL_TIM_PWM_ConfigChannel+0x212>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004a8b 	.word	0x08004a8b
 80048b8:	08004a8b 	.word	0x08004a8b
 80048bc:	08004a8b 	.word	0x08004a8b
 80048c0:	08004945 	.word	0x08004945
 80048c4:	08004a8b 	.word	0x08004a8b
 80048c8:	08004a8b 	.word	0x08004a8b
 80048cc:	08004a8b 	.word	0x08004a8b
 80048d0:	08004987 	.word	0x08004987
 80048d4:	08004a8b 	.word	0x08004a8b
 80048d8:	08004a8b 	.word	0x08004a8b
 80048dc:	08004a8b 	.word	0x08004a8b
 80048e0:	080049c7 	.word	0x080049c7
 80048e4:	08004a8b 	.word	0x08004a8b
 80048e8:	08004a8b 	.word	0x08004a8b
 80048ec:	08004a8b 	.word	0x08004a8b
 80048f0:	08004a09 	.word	0x08004a09
 80048f4:	08004a8b 	.word	0x08004a8b
 80048f8:	08004a8b 	.word	0x08004a8b
 80048fc:	08004a8b 	.word	0x08004a8b
 8004900:	08004a49 	.word	0x08004a49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 f966 	bl	8004bdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0208 	orr.w	r2, r2, #8
 800491e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0204 	bic.w	r2, r2, #4
 800492e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6999      	ldr	r1, [r3, #24]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	619a      	str	r2, [r3, #24]
      break;
 8004942:	e0a3      	b.n	8004a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f9d6 	bl	8004cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800495e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6999      	ldr	r1, [r3, #24]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	021a      	lsls	r2, r3, #8
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	619a      	str	r2, [r3, #24]
      break;
 8004984:	e082      	b.n	8004a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fa3f 	bl	8004e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0208 	orr.w	r2, r2, #8
 80049a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0204 	bic.w	r2, r2, #4
 80049b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69d9      	ldr	r1, [r3, #28]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	61da      	str	r2, [r3, #28]
      break;
 80049c4:	e062      	b.n	8004a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 faa5 	bl	8004f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69d9      	ldr	r1, [r3, #28]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	021a      	lsls	r2, r3, #8
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	61da      	str	r2, [r3, #28]
      break;
 8004a06:	e041      	b.n	8004a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 faec 	bl	8004fec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0208 	orr.w	r2, r2, #8
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0204 	bic.w	r2, r2, #4
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a46:	e021      	b.n	8004a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fb2e 	bl	80050b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	021a      	lsls	r2, r3, #8
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a88:	e000      	b.n	8004a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004a8a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop

08004aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a40      	ldr	r2, [pc, #256]	; (8004bbc <TIM_Base_SetConfig+0x114>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d013      	beq.n	8004ae8 <TIM_Base_SetConfig+0x40>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac6:	d00f      	beq.n	8004ae8 <TIM_Base_SetConfig+0x40>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a3d      	ldr	r2, [pc, #244]	; (8004bc0 <TIM_Base_SetConfig+0x118>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00b      	beq.n	8004ae8 <TIM_Base_SetConfig+0x40>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a3c      	ldr	r2, [pc, #240]	; (8004bc4 <TIM_Base_SetConfig+0x11c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d007      	beq.n	8004ae8 <TIM_Base_SetConfig+0x40>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a3b      	ldr	r2, [pc, #236]	; (8004bc8 <TIM_Base_SetConfig+0x120>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <TIM_Base_SetConfig+0x40>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a3a      	ldr	r2, [pc, #232]	; (8004bcc <TIM_Base_SetConfig+0x124>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d108      	bne.n	8004afa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a2f      	ldr	r2, [pc, #188]	; (8004bbc <TIM_Base_SetConfig+0x114>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01f      	beq.n	8004b42 <TIM_Base_SetConfig+0x9a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b08:	d01b      	beq.n	8004b42 <TIM_Base_SetConfig+0x9a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2c      	ldr	r2, [pc, #176]	; (8004bc0 <TIM_Base_SetConfig+0x118>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d017      	beq.n	8004b42 <TIM_Base_SetConfig+0x9a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2b      	ldr	r2, [pc, #172]	; (8004bc4 <TIM_Base_SetConfig+0x11c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <TIM_Base_SetConfig+0x9a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a2a      	ldr	r2, [pc, #168]	; (8004bc8 <TIM_Base_SetConfig+0x120>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00f      	beq.n	8004b42 <TIM_Base_SetConfig+0x9a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a29      	ldr	r2, [pc, #164]	; (8004bcc <TIM_Base_SetConfig+0x124>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00b      	beq.n	8004b42 <TIM_Base_SetConfig+0x9a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a28      	ldr	r2, [pc, #160]	; (8004bd0 <TIM_Base_SetConfig+0x128>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <TIM_Base_SetConfig+0x9a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <TIM_Base_SetConfig+0x12c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_Base_SetConfig+0x9a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a26      	ldr	r2, [pc, #152]	; (8004bd8 <TIM_Base_SetConfig+0x130>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d108      	bne.n	8004b54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a10      	ldr	r2, [pc, #64]	; (8004bbc <TIM_Base_SetConfig+0x114>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00f      	beq.n	8004ba0 <TIM_Base_SetConfig+0xf8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a12      	ldr	r2, [pc, #72]	; (8004bcc <TIM_Base_SetConfig+0x124>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00b      	beq.n	8004ba0 <TIM_Base_SetConfig+0xf8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a11      	ldr	r2, [pc, #68]	; (8004bd0 <TIM_Base_SetConfig+0x128>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_Base_SetConfig+0xf8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a10      	ldr	r2, [pc, #64]	; (8004bd4 <TIM_Base_SetConfig+0x12c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_Base_SetConfig+0xf8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a0f      	ldr	r2, [pc, #60]	; (8004bd8 <TIM_Base_SetConfig+0x130>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d103      	bne.n	8004ba8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	615a      	str	r2, [r3, #20]
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800
 8004bc8:	40000c00 	.word	0x40000c00
 8004bcc:	40010400 	.word	0x40010400
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40014400 	.word	0x40014400
 8004bd8:	40014800 	.word	0x40014800

08004bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f023 0201 	bic.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <TIM_OC1_SetConfig+0x108>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 0302 	bic.w	r3, r3, #2
 8004c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a2d      	ldr	r2, [pc, #180]	; (8004ce8 <TIM_OC1_SetConfig+0x10c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00f      	beq.n	8004c58 <TIM_OC1_SetConfig+0x7c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <TIM_OC1_SetConfig+0x110>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <TIM_OC1_SetConfig+0x7c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a2b      	ldr	r2, [pc, #172]	; (8004cf0 <TIM_OC1_SetConfig+0x114>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d007      	beq.n	8004c58 <TIM_OC1_SetConfig+0x7c>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a2a      	ldr	r2, [pc, #168]	; (8004cf4 <TIM_OC1_SetConfig+0x118>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_OC1_SetConfig+0x7c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a29      	ldr	r2, [pc, #164]	; (8004cf8 <TIM_OC1_SetConfig+0x11c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d10c      	bne.n	8004c72 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 0308 	bic.w	r3, r3, #8
 8004c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f023 0304 	bic.w	r3, r3, #4
 8004c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a1c      	ldr	r2, [pc, #112]	; (8004ce8 <TIM_OC1_SetConfig+0x10c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00f      	beq.n	8004c9a <TIM_OC1_SetConfig+0xbe>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <TIM_OC1_SetConfig+0x110>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <TIM_OC1_SetConfig+0xbe>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a1a      	ldr	r2, [pc, #104]	; (8004cf0 <TIM_OC1_SetConfig+0x114>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_OC1_SetConfig+0xbe>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <TIM_OC1_SetConfig+0x118>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_OC1_SetConfig+0xbe>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <TIM_OC1_SetConfig+0x11c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d111      	bne.n	8004cbe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	621a      	str	r2, [r3, #32]
}
 8004cd8:	bf00      	nop
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	fffeff8f 	.word	0xfffeff8f
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40010400 	.word	0x40010400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800

08004cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f023 0210 	bic.w	r2, r3, #16
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4b34      	ldr	r3, [pc, #208]	; (8004df8 <TIM_OC2_SetConfig+0xfc>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0320 	bic.w	r3, r3, #32
 8004d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <TIM_OC2_SetConfig+0x100>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_OC2_SetConfig+0x68>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a28      	ldr	r2, [pc, #160]	; (8004e00 <TIM_OC2_SetConfig+0x104>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d10d      	bne.n	8004d80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a1e      	ldr	r2, [pc, #120]	; (8004dfc <TIM_OC2_SetConfig+0x100>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00f      	beq.n	8004da8 <TIM_OC2_SetConfig+0xac>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a1d      	ldr	r2, [pc, #116]	; (8004e00 <TIM_OC2_SetConfig+0x104>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <TIM_OC2_SetConfig+0xac>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a1c      	ldr	r2, [pc, #112]	; (8004e04 <TIM_OC2_SetConfig+0x108>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <TIM_OC2_SetConfig+0xac>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a1b      	ldr	r2, [pc, #108]	; (8004e08 <TIM_OC2_SetConfig+0x10c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_OC2_SetConfig+0xac>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a1a      	ldr	r2, [pc, #104]	; (8004e0c <TIM_OC2_SetConfig+0x110>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d113      	bne.n	8004dd0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	feff8fff 	.word	0xfeff8fff
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40010400 	.word	0x40010400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800

08004e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a27      	ldr	r2, [pc, #156]	; (8004f08 <TIM_OC3_SetConfig+0xf8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_OC3_SetConfig+0x66>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a26      	ldr	r2, [pc, #152]	; (8004f0c <TIM_OC3_SetConfig+0xfc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d10d      	bne.n	8004e92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <TIM_OC3_SetConfig+0xf8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00f      	beq.n	8004eba <TIM_OC3_SetConfig+0xaa>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <TIM_OC3_SetConfig+0xfc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <TIM_OC3_SetConfig+0xaa>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <TIM_OC3_SetConfig+0x100>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <TIM_OC3_SetConfig+0xaa>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <TIM_OC3_SetConfig+0x104>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_OC3_SetConfig+0xaa>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a18      	ldr	r2, [pc, #96]	; (8004f18 <TIM_OC3_SetConfig+0x108>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d113      	bne.n	8004ee2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	621a      	str	r2, [r3, #32]
}
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40010400 	.word	0x40010400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40014400 	.word	0x40014400
 8004f18:	40014800 	.word	0x40014800

08004f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	031b      	lsls	r3, r3, #12
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a18      	ldr	r2, [pc, #96]	; (8004fd8 <TIM_OC4_SetConfig+0xbc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00f      	beq.n	8004f9c <TIM_OC4_SetConfig+0x80>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a17      	ldr	r2, [pc, #92]	; (8004fdc <TIM_OC4_SetConfig+0xc0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00b      	beq.n	8004f9c <TIM_OC4_SetConfig+0x80>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a16      	ldr	r2, [pc, #88]	; (8004fe0 <TIM_OC4_SetConfig+0xc4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d007      	beq.n	8004f9c <TIM_OC4_SetConfig+0x80>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a15      	ldr	r2, [pc, #84]	; (8004fe4 <TIM_OC4_SetConfig+0xc8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <TIM_OC4_SetConfig+0x80>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a14      	ldr	r2, [pc, #80]	; (8004fe8 <TIM_OC4_SetConfig+0xcc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d109      	bne.n	8004fb0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	019b      	lsls	r3, r3, #6
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40010400 	.word	0x40010400
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40014400 	.word	0x40014400
 8004fe8:	40014800 	.word	0x40014800

08004fec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800502c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a17      	ldr	r2, [pc, #92]	; (800509c <TIM_OC5_SetConfig+0xb0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00f      	beq.n	8005062 <TIM_OC5_SetConfig+0x76>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a16      	ldr	r2, [pc, #88]	; (80050a0 <TIM_OC5_SetConfig+0xb4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00b      	beq.n	8005062 <TIM_OC5_SetConfig+0x76>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <TIM_OC5_SetConfig+0xb8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <TIM_OC5_SetConfig+0x76>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a14      	ldr	r2, [pc, #80]	; (80050a8 <TIM_OC5_SetConfig+0xbc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_OC5_SetConfig+0x76>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a13      	ldr	r2, [pc, #76]	; (80050ac <TIM_OC5_SetConfig+0xc0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d109      	bne.n	8005076 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005068:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40010000 	.word	0x40010000
 80050a0:	40010400 	.word	0x40010400
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40014400 	.word	0x40014400
 80050ac:	40014800 	.word	0x40014800

080050b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	051b      	lsls	r3, r3, #20
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a18      	ldr	r2, [pc, #96]	; (8005164 <TIM_OC6_SetConfig+0xb4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00f      	beq.n	8005128 <TIM_OC6_SetConfig+0x78>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a17      	ldr	r2, [pc, #92]	; (8005168 <TIM_OC6_SetConfig+0xb8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00b      	beq.n	8005128 <TIM_OC6_SetConfig+0x78>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a16      	ldr	r2, [pc, #88]	; (800516c <TIM_OC6_SetConfig+0xbc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d007      	beq.n	8005128 <TIM_OC6_SetConfig+0x78>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a15      	ldr	r2, [pc, #84]	; (8005170 <TIM_OC6_SetConfig+0xc0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_OC6_SetConfig+0x78>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a14      	ldr	r2, [pc, #80]	; (8005174 <TIM_OC6_SetConfig+0xc4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d109      	bne.n	800513c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800512e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	029b      	lsls	r3, r3, #10
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	621a      	str	r2, [r3, #32]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40010000 	.word	0x40010000
 8005168:	40010400 	.word	0x40010400
 800516c:	40014000 	.word	0x40014000
 8005170:	40014400 	.word	0x40014400
 8005174:	40014800 	.word	0x40014800

08005178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800518c:	2302      	movs	r3, #2
 800518e:	e045      	b.n	800521c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1c      	ldr	r2, [pc, #112]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1b      	ldr	r2, [pc, #108]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d108      	bne.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ee:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	40010000 	.word	0x40010000
 800522c:	40010400 	.word	0x40010400

08005230 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005248:	2302      	movs	r3, #2
 800524a:	e065      	b.n	8005318 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	041b      	lsls	r3, r3, #16
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a16      	ldr	r2, [pc, #88]	; (8005324 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d004      	beq.n	80052da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a14      	ldr	r2, [pc, #80]	; (8005328 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d115      	bne.n	8005306 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	051b      	lsls	r3, r3, #20
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40010000 	.word	0x40010000
 8005328:	40010400 	.word	0x40010400

0800532c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e042      	b.n	80053c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005344:	2b00      	cmp	r3, #0
 8005346:	d106      	bne.n	8005356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f003 f995 	bl	8008680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2224      	movs	r2, #36	; 0x24
 800535a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f82e 	bl	80053d0 <UART_SetConfig>
 8005374:	4603      	mov	r3, r0
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e022      	b.n	80053c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f002 f99c 	bl	80076c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800539a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053aa:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f002 fa23 	bl	8007808 <UART_CheckIdleState>
 80053c2:	4603      	mov	r3, r0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	0000      	movs	r0, r0
	...

080053d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80053d4:	b08e      	sub	sp, #56	; 0x38
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80053da:	2300      	movs	r3, #0
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005406:	4313      	orrs	r3, r2
 8005408:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4bc1      	ldr	r3, [pc, #772]	; (8005718 <UART_SetConfig+0x348>)
 8005412:	4013      	ands	r3, r2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800541a:	430b      	orrs	r3, r1
 800541c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4ab7      	ldr	r2, [pc, #732]	; (800571c <UART_SetConfig+0x34c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800544a:	4313      	orrs	r3, r2
 800544c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	4bb2      	ldr	r3, [pc, #712]	; (8005720 <UART_SetConfig+0x350>)
 8005456:	4013      	ands	r3, r2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800545e:	430b      	orrs	r3, r1
 8005460:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	f023 010f 	bic.w	r1, r3, #15
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4aa9      	ldr	r2, [pc, #676]	; (8005724 <UART_SetConfig+0x354>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d177      	bne.n	8005572 <UART_SetConfig+0x1a2>
 8005482:	4ba9      	ldr	r3, [pc, #676]	; (8005728 <UART_SetConfig+0x358>)
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800548a:	2b28      	cmp	r3, #40	; 0x28
 800548c:	d86c      	bhi.n	8005568 <UART_SetConfig+0x198>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0xc4>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	08005539 	.word	0x08005539
 8005498:	08005569 	.word	0x08005569
 800549c:	08005569 	.word	0x08005569
 80054a0:	08005569 	.word	0x08005569
 80054a4:	08005569 	.word	0x08005569
 80054a8:	08005569 	.word	0x08005569
 80054ac:	08005569 	.word	0x08005569
 80054b0:	08005569 	.word	0x08005569
 80054b4:	08005541 	.word	0x08005541
 80054b8:	08005569 	.word	0x08005569
 80054bc:	08005569 	.word	0x08005569
 80054c0:	08005569 	.word	0x08005569
 80054c4:	08005569 	.word	0x08005569
 80054c8:	08005569 	.word	0x08005569
 80054cc:	08005569 	.word	0x08005569
 80054d0:	08005569 	.word	0x08005569
 80054d4:	08005549 	.word	0x08005549
 80054d8:	08005569 	.word	0x08005569
 80054dc:	08005569 	.word	0x08005569
 80054e0:	08005569 	.word	0x08005569
 80054e4:	08005569 	.word	0x08005569
 80054e8:	08005569 	.word	0x08005569
 80054ec:	08005569 	.word	0x08005569
 80054f0:	08005569 	.word	0x08005569
 80054f4:	08005551 	.word	0x08005551
 80054f8:	08005569 	.word	0x08005569
 80054fc:	08005569 	.word	0x08005569
 8005500:	08005569 	.word	0x08005569
 8005504:	08005569 	.word	0x08005569
 8005508:	08005569 	.word	0x08005569
 800550c:	08005569 	.word	0x08005569
 8005510:	08005569 	.word	0x08005569
 8005514:	08005559 	.word	0x08005559
 8005518:	08005569 	.word	0x08005569
 800551c:	08005569 	.word	0x08005569
 8005520:	08005569 	.word	0x08005569
 8005524:	08005569 	.word	0x08005569
 8005528:	08005569 	.word	0x08005569
 800552c:	08005569 	.word	0x08005569
 8005530:	08005569 	.word	0x08005569
 8005534:	08005561 	.word	0x08005561
 8005538:	2301      	movs	r3, #1
 800553a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800553e:	e233      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005540:	2304      	movs	r3, #4
 8005542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005546:	e22f      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005548:	2308      	movs	r3, #8
 800554a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554e:	e22b      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005550:	2310      	movs	r3, #16
 8005552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005556:	e227      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005558:	2320      	movs	r3, #32
 800555a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555e:	e223      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005560:	2340      	movs	r3, #64	; 0x40
 8005562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005566:	e21f      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800556e:	bf00      	nop
 8005570:	e21a      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a6d      	ldr	r2, [pc, #436]	; (800572c <UART_SetConfig+0x35c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d132      	bne.n	80055e2 <UART_SetConfig+0x212>
 800557c:	4b6a      	ldr	r3, [pc, #424]	; (8005728 <UART_SetConfig+0x358>)
 800557e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	2b05      	cmp	r3, #5
 8005586:	d827      	bhi.n	80055d8 <UART_SetConfig+0x208>
 8005588:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <UART_SetConfig+0x1c0>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055a9 	.word	0x080055a9
 8005594:	080055b1 	.word	0x080055b1
 8005598:	080055b9 	.word	0x080055b9
 800559c:	080055c1 	.word	0x080055c1
 80055a0:	080055c9 	.word	0x080055c9
 80055a4:	080055d1 	.word	0x080055d1
 80055a8:	2300      	movs	r3, #0
 80055aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ae:	e1fb      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80055b0:	2304      	movs	r3, #4
 80055b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b6:	e1f7      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80055b8:	2308      	movs	r3, #8
 80055ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055be:	e1f3      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80055c0:	2310      	movs	r3, #16
 80055c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055c6:	e1ef      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80055c8:	2320      	movs	r3, #32
 80055ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ce:	e1eb      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80055d0:	2340      	movs	r3, #64	; 0x40
 80055d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055d6:	e1e7      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055de:	bf00      	nop
 80055e0:	e1e2      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a52      	ldr	r2, [pc, #328]	; (8005730 <UART_SetConfig+0x360>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d132      	bne.n	8005652 <UART_SetConfig+0x282>
 80055ec:	4b4e      	ldr	r3, [pc, #312]	; (8005728 <UART_SetConfig+0x358>)
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	2b05      	cmp	r3, #5
 80055f6:	d827      	bhi.n	8005648 <UART_SetConfig+0x278>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <UART_SetConfig+0x230>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005619 	.word	0x08005619
 8005604:	08005621 	.word	0x08005621
 8005608:	08005629 	.word	0x08005629
 800560c:	08005631 	.word	0x08005631
 8005610:	08005639 	.word	0x08005639
 8005614:	08005641 	.word	0x08005641
 8005618:	2300      	movs	r3, #0
 800561a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561e:	e1c3      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005620:	2304      	movs	r3, #4
 8005622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005626:	e1bf      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005628:	2308      	movs	r3, #8
 800562a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562e:	e1bb      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005630:	2310      	movs	r3, #16
 8005632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005636:	e1b7      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005638:	2320      	movs	r3, #32
 800563a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800563e:	e1b3      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005640:	2340      	movs	r3, #64	; 0x40
 8005642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005646:	e1af      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005648:	2380      	movs	r3, #128	; 0x80
 800564a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800564e:	bf00      	nop
 8005650:	e1aa      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a37      	ldr	r2, [pc, #220]	; (8005734 <UART_SetConfig+0x364>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d132      	bne.n	80056c2 <UART_SetConfig+0x2f2>
 800565c:	4b32      	ldr	r3, [pc, #200]	; (8005728 <UART_SetConfig+0x358>)
 800565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	2b05      	cmp	r3, #5
 8005666:	d827      	bhi.n	80056b8 <UART_SetConfig+0x2e8>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0x2a0>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005689 	.word	0x08005689
 8005674:	08005691 	.word	0x08005691
 8005678:	08005699 	.word	0x08005699
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056b1 	.word	0x080056b1
 8005688:	2300      	movs	r3, #0
 800568a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568e:	e18b      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005690:	2304      	movs	r3, #4
 8005692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005696:	e187      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005698:	2308      	movs	r3, #8
 800569a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800569e:	e183      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056a6:	e17f      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80056a8:	2320      	movs	r3, #32
 80056aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ae:	e17b      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80056b0:	2340      	movs	r3, #64	; 0x40
 80056b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056b6:	e177      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80056b8:	2380      	movs	r3, #128	; 0x80
 80056ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056be:	bf00      	nop
 80056c0:	e172      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <UART_SetConfig+0x368>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d144      	bne.n	8005756 <UART_SetConfig+0x386>
 80056cc:	4b16      	ldr	r3, [pc, #88]	; (8005728 <UART_SetConfig+0x358>)
 80056ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	2b05      	cmp	r3, #5
 80056d6:	d839      	bhi.n	800574c <UART_SetConfig+0x37c>
 80056d8:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <UART_SetConfig+0x310>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	080056f9 	.word	0x080056f9
 80056e4:	08005701 	.word	0x08005701
 80056e8:	08005709 	.word	0x08005709
 80056ec:	08005711 	.word	0x08005711
 80056f0:	0800573d 	.word	0x0800573d
 80056f4:	08005745 	.word	0x08005745
 80056f8:	2300      	movs	r3, #0
 80056fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056fe:	e153      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005700:	2304      	movs	r3, #4
 8005702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005706:	e14f      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005708:	2308      	movs	r3, #8
 800570a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800570e:	e14b      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005710:	2310      	movs	r3, #16
 8005712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005716:	e147      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005718:	cfff69f3 	.word	0xcfff69f3
 800571c:	58000c00 	.word	0x58000c00
 8005720:	11fff4ff 	.word	0x11fff4ff
 8005724:	40011000 	.word	0x40011000
 8005728:	58024400 	.word	0x58024400
 800572c:	40004400 	.word	0x40004400
 8005730:	40004800 	.word	0x40004800
 8005734:	40004c00 	.word	0x40004c00
 8005738:	40005000 	.word	0x40005000
 800573c:	2320      	movs	r3, #32
 800573e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005742:	e131      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005744:	2340      	movs	r3, #64	; 0x40
 8005746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800574a:	e12d      	b.n	80059a8 <UART_SetConfig+0x5d8>
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005752:	bf00      	nop
 8005754:	e128      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4ac3      	ldr	r2, [pc, #780]	; (8005a68 <UART_SetConfig+0x698>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d178      	bne.n	8005852 <UART_SetConfig+0x482>
 8005760:	4bc2      	ldr	r3, [pc, #776]	; (8005a6c <UART_SetConfig+0x69c>)
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005768:	2b28      	cmp	r3, #40	; 0x28
 800576a:	d86d      	bhi.n	8005848 <UART_SetConfig+0x478>
 800576c:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <UART_SetConfig+0x3a4>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	08005819 	.word	0x08005819
 8005778:	08005849 	.word	0x08005849
 800577c:	08005849 	.word	0x08005849
 8005780:	08005849 	.word	0x08005849
 8005784:	08005849 	.word	0x08005849
 8005788:	08005849 	.word	0x08005849
 800578c:	08005849 	.word	0x08005849
 8005790:	08005849 	.word	0x08005849
 8005794:	08005821 	.word	0x08005821
 8005798:	08005849 	.word	0x08005849
 800579c:	08005849 	.word	0x08005849
 80057a0:	08005849 	.word	0x08005849
 80057a4:	08005849 	.word	0x08005849
 80057a8:	08005849 	.word	0x08005849
 80057ac:	08005849 	.word	0x08005849
 80057b0:	08005849 	.word	0x08005849
 80057b4:	08005829 	.word	0x08005829
 80057b8:	08005849 	.word	0x08005849
 80057bc:	08005849 	.word	0x08005849
 80057c0:	08005849 	.word	0x08005849
 80057c4:	08005849 	.word	0x08005849
 80057c8:	08005849 	.word	0x08005849
 80057cc:	08005849 	.word	0x08005849
 80057d0:	08005849 	.word	0x08005849
 80057d4:	08005831 	.word	0x08005831
 80057d8:	08005849 	.word	0x08005849
 80057dc:	08005849 	.word	0x08005849
 80057e0:	08005849 	.word	0x08005849
 80057e4:	08005849 	.word	0x08005849
 80057e8:	08005849 	.word	0x08005849
 80057ec:	08005849 	.word	0x08005849
 80057f0:	08005849 	.word	0x08005849
 80057f4:	08005839 	.word	0x08005839
 80057f8:	08005849 	.word	0x08005849
 80057fc:	08005849 	.word	0x08005849
 8005800:	08005849 	.word	0x08005849
 8005804:	08005849 	.word	0x08005849
 8005808:	08005849 	.word	0x08005849
 800580c:	08005849 	.word	0x08005849
 8005810:	08005849 	.word	0x08005849
 8005814:	08005841 	.word	0x08005841
 8005818:	2301      	movs	r3, #1
 800581a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581e:	e0c3      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005820:	2304      	movs	r3, #4
 8005822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005826:	e0bf      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005828:	2308      	movs	r3, #8
 800582a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800582e:	e0bb      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005830:	2310      	movs	r3, #16
 8005832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005836:	e0b7      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005838:	2320      	movs	r3, #32
 800583a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800583e:	e0b3      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005840:	2340      	movs	r3, #64	; 0x40
 8005842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005846:	e0af      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005848:	2380      	movs	r3, #128	; 0x80
 800584a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800584e:	bf00      	nop
 8005850:	e0aa      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a86      	ldr	r2, [pc, #536]	; (8005a70 <UART_SetConfig+0x6a0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d132      	bne.n	80058c2 <UART_SetConfig+0x4f2>
 800585c:	4b83      	ldr	r3, [pc, #524]	; (8005a6c <UART_SetConfig+0x69c>)
 800585e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	2b05      	cmp	r3, #5
 8005866:	d827      	bhi.n	80058b8 <UART_SetConfig+0x4e8>
 8005868:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <UART_SetConfig+0x4a0>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	08005889 	.word	0x08005889
 8005874:	08005891 	.word	0x08005891
 8005878:	08005899 	.word	0x08005899
 800587c:	080058a1 	.word	0x080058a1
 8005880:	080058a9 	.word	0x080058a9
 8005884:	080058b1 	.word	0x080058b1
 8005888:	2300      	movs	r3, #0
 800588a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588e:	e08b      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005890:	2304      	movs	r3, #4
 8005892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005896:	e087      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005898:	2308      	movs	r3, #8
 800589a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800589e:	e083      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80058a0:	2310      	movs	r3, #16
 80058a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a6:	e07f      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80058a8:	2320      	movs	r3, #32
 80058aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ae:	e07b      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80058b0:	2340      	movs	r3, #64	; 0x40
 80058b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058b6:	e077      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80058b8:	2380      	movs	r3, #128	; 0x80
 80058ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058be:	bf00      	nop
 80058c0:	e072      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a6b      	ldr	r2, [pc, #428]	; (8005a74 <UART_SetConfig+0x6a4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d132      	bne.n	8005932 <UART_SetConfig+0x562>
 80058cc:	4b67      	ldr	r3, [pc, #412]	; (8005a6c <UART_SetConfig+0x69c>)
 80058ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	2b05      	cmp	r3, #5
 80058d6:	d827      	bhi.n	8005928 <UART_SetConfig+0x558>
 80058d8:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <UART_SetConfig+0x510>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	080058f9 	.word	0x080058f9
 80058e4:	08005901 	.word	0x08005901
 80058e8:	08005909 	.word	0x08005909
 80058ec:	08005911 	.word	0x08005911
 80058f0:	08005919 	.word	0x08005919
 80058f4:	08005921 	.word	0x08005921
 80058f8:	2300      	movs	r3, #0
 80058fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fe:	e053      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005900:	2304      	movs	r3, #4
 8005902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005906:	e04f      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005908:	2308      	movs	r3, #8
 800590a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800590e:	e04b      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005910:	2310      	movs	r3, #16
 8005912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005916:	e047      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005918:	2320      	movs	r3, #32
 800591a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800591e:	e043      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005920:	2340      	movs	r3, #64	; 0x40
 8005922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005926:	e03f      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005928:	2380      	movs	r3, #128	; 0x80
 800592a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800592e:	bf00      	nop
 8005930:	e03a      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a50      	ldr	r2, [pc, #320]	; (8005a78 <UART_SetConfig+0x6a8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d132      	bne.n	80059a2 <UART_SetConfig+0x5d2>
 800593c:	4b4b      	ldr	r3, [pc, #300]	; (8005a6c <UART_SetConfig+0x69c>)
 800593e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	2b05      	cmp	r3, #5
 8005946:	d827      	bhi.n	8005998 <UART_SetConfig+0x5c8>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <UART_SetConfig+0x580>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005969 	.word	0x08005969
 8005954:	08005971 	.word	0x08005971
 8005958:	08005979 	.word	0x08005979
 800595c:	08005981 	.word	0x08005981
 8005960:	08005989 	.word	0x08005989
 8005964:	08005991 	.word	0x08005991
 8005968:	2302      	movs	r3, #2
 800596a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596e:	e01b      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005970:	2304      	movs	r3, #4
 8005972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005976:	e017      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005978:	2308      	movs	r3, #8
 800597a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800597e:	e013      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005980:	2310      	movs	r3, #16
 8005982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005986:	e00f      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005988:	2320      	movs	r3, #32
 800598a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800598e:	e00b      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005990:	2340      	movs	r3, #64	; 0x40
 8005992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005996:	e007      	b.n	80059a8 <UART_SetConfig+0x5d8>
 8005998:	2380      	movs	r3, #128	; 0x80
 800599a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800599e:	bf00      	nop
 80059a0:	e002      	b.n	80059a8 <UART_SetConfig+0x5d8>
 80059a2:	2380      	movs	r3, #128	; 0x80
 80059a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a32      	ldr	r2, [pc, #200]	; (8005a78 <UART_SetConfig+0x6a8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	f040 86f7 	bne.w	80067a2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	f000 80c0 	beq.w	8005b3e <UART_SetConfig+0x76e>
 80059be:	2b08      	cmp	r3, #8
 80059c0:	dc04      	bgt.n	80059cc <UART_SetConfig+0x5fc>
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d00c      	beq.n	80059e0 <UART_SetConfig+0x610>
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d065      	beq.n	8005a96 <UART_SetConfig+0x6c6>
 80059ca:	e27a      	b.n	8005ec2 <UART_SetConfig+0xaf2>
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	f000 81b0 	beq.w	8005d32 <UART_SetConfig+0x962>
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	f000 821e 	beq.w	8005e14 <UART_SetConfig+0xa44>
 80059d8:	2b10      	cmp	r3, #16
 80059da:	f000 8104 	beq.w	8005be6 <UART_SetConfig+0x816>
 80059de:	e270      	b.n	8005ec2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80059e0:	f7fe f9a4 	bl	8003d2c <HAL_RCCEx_GetD3PCLK1Freq>
 80059e4:	4602      	mov	r2, r0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d04e      	beq.n	8005a8c <UART_SetConfig+0x6bc>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d048      	beq.n	8005a88 <UART_SetConfig+0x6b8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d042      	beq.n	8005a84 <UART_SetConfig+0x6b4>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d03c      	beq.n	8005a80 <UART_SetConfig+0x6b0>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d036      	beq.n	8005a7c <UART_SetConfig+0x6ac>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d026      	beq.n	8005a64 <UART_SetConfig+0x694>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b06      	cmp	r3, #6
 8005a1c:	d020      	beq.n	8005a60 <UART_SetConfig+0x690>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2b07      	cmp	r3, #7
 8005a24:	d01a      	beq.n	8005a5c <UART_SetConfig+0x68c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d014      	beq.n	8005a58 <UART_SetConfig+0x688>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	2b09      	cmp	r3, #9
 8005a34:	d00e      	beq.n	8005a54 <UART_SetConfig+0x684>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	2b0a      	cmp	r3, #10
 8005a3c:	d008      	beq.n	8005a50 <UART_SetConfig+0x680>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	2b0b      	cmp	r3, #11
 8005a44:	d102      	bne.n	8005a4c <UART_SetConfig+0x67c>
 8005a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a4a:	e020      	b.n	8005a8e <UART_SetConfig+0x6be>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e01e      	b.n	8005a8e <UART_SetConfig+0x6be>
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	e01c      	b.n	8005a8e <UART_SetConfig+0x6be>
 8005a54:	2340      	movs	r3, #64	; 0x40
 8005a56:	e01a      	b.n	8005a8e <UART_SetConfig+0x6be>
 8005a58:	2320      	movs	r3, #32
 8005a5a:	e018      	b.n	8005a8e <UART_SetConfig+0x6be>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	e016      	b.n	8005a8e <UART_SetConfig+0x6be>
 8005a60:	230c      	movs	r3, #12
 8005a62:	e014      	b.n	8005a8e <UART_SetConfig+0x6be>
 8005a64:	230a      	movs	r3, #10
 8005a66:	e012      	b.n	8005a8e <UART_SetConfig+0x6be>
 8005a68:	40011400 	.word	0x40011400
 8005a6c:	58024400 	.word	0x58024400
 8005a70:	40007800 	.word	0x40007800
 8005a74:	40007c00 	.word	0x40007c00
 8005a78:	58000c00 	.word	0x58000c00
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	e006      	b.n	8005a8e <UART_SetConfig+0x6be>
 8005a80:	2306      	movs	r3, #6
 8005a82:	e004      	b.n	8005a8e <UART_SetConfig+0x6be>
 8005a84:	2304      	movs	r3, #4
 8005a86:	e002      	b.n	8005a8e <UART_SetConfig+0x6be>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e000      	b.n	8005a8e <UART_SetConfig+0x6be>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a94:	e219      	b.n	8005eca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a96:	f107 0314 	add.w	r3, r7, #20
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe f95c 	bl	8003d58 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d044      	beq.n	8005b34 <UART_SetConfig+0x764>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d03e      	beq.n	8005b30 <UART_SetConfig+0x760>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d038      	beq.n	8005b2c <UART_SetConfig+0x75c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d032      	beq.n	8005b28 <UART_SetConfig+0x758>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d02c      	beq.n	8005b24 <UART_SetConfig+0x754>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	d026      	beq.n	8005b20 <UART_SetConfig+0x750>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	2b06      	cmp	r3, #6
 8005ad8:	d020      	beq.n	8005b1c <UART_SetConfig+0x74c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2b07      	cmp	r3, #7
 8005ae0:	d01a      	beq.n	8005b18 <UART_SetConfig+0x748>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d014      	beq.n	8005b14 <UART_SetConfig+0x744>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	2b09      	cmp	r3, #9
 8005af0:	d00e      	beq.n	8005b10 <UART_SetConfig+0x740>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b0a      	cmp	r3, #10
 8005af8:	d008      	beq.n	8005b0c <UART_SetConfig+0x73c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	2b0b      	cmp	r3, #11
 8005b00:	d102      	bne.n	8005b08 <UART_SetConfig+0x738>
 8005b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b06:	e016      	b.n	8005b36 <UART_SetConfig+0x766>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e014      	b.n	8005b36 <UART_SetConfig+0x766>
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	e012      	b.n	8005b36 <UART_SetConfig+0x766>
 8005b10:	2340      	movs	r3, #64	; 0x40
 8005b12:	e010      	b.n	8005b36 <UART_SetConfig+0x766>
 8005b14:	2320      	movs	r3, #32
 8005b16:	e00e      	b.n	8005b36 <UART_SetConfig+0x766>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	e00c      	b.n	8005b36 <UART_SetConfig+0x766>
 8005b1c:	230c      	movs	r3, #12
 8005b1e:	e00a      	b.n	8005b36 <UART_SetConfig+0x766>
 8005b20:	230a      	movs	r3, #10
 8005b22:	e008      	b.n	8005b36 <UART_SetConfig+0x766>
 8005b24:	2308      	movs	r3, #8
 8005b26:	e006      	b.n	8005b36 <UART_SetConfig+0x766>
 8005b28:	2306      	movs	r3, #6
 8005b2a:	e004      	b.n	8005b36 <UART_SetConfig+0x766>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	e002      	b.n	8005b36 <UART_SetConfig+0x766>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e000      	b.n	8005b36 <UART_SetConfig+0x766>
 8005b34:	2301      	movs	r3, #1
 8005b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b3c:	e1c5      	b.n	8005eca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b3e:	f107 0308 	add.w	r3, r7, #8
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fa54 	bl	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d044      	beq.n	8005bdc <UART_SetConfig+0x80c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d03e      	beq.n	8005bd8 <UART_SetConfig+0x808>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d038      	beq.n	8005bd4 <UART_SetConfig+0x804>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d032      	beq.n	8005bd0 <UART_SetConfig+0x800>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d02c      	beq.n	8005bcc <UART_SetConfig+0x7fc>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d026      	beq.n	8005bc8 <UART_SetConfig+0x7f8>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	2b06      	cmp	r3, #6
 8005b80:	d020      	beq.n	8005bc4 <UART_SetConfig+0x7f4>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	2b07      	cmp	r3, #7
 8005b88:	d01a      	beq.n	8005bc0 <UART_SetConfig+0x7f0>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d014      	beq.n	8005bbc <UART_SetConfig+0x7ec>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	2b09      	cmp	r3, #9
 8005b98:	d00e      	beq.n	8005bb8 <UART_SetConfig+0x7e8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	2b0a      	cmp	r3, #10
 8005ba0:	d008      	beq.n	8005bb4 <UART_SetConfig+0x7e4>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	2b0b      	cmp	r3, #11
 8005ba8:	d102      	bne.n	8005bb0 <UART_SetConfig+0x7e0>
 8005baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bae:	e016      	b.n	8005bde <UART_SetConfig+0x80e>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e014      	b.n	8005bde <UART_SetConfig+0x80e>
 8005bb4:	2380      	movs	r3, #128	; 0x80
 8005bb6:	e012      	b.n	8005bde <UART_SetConfig+0x80e>
 8005bb8:	2340      	movs	r3, #64	; 0x40
 8005bba:	e010      	b.n	8005bde <UART_SetConfig+0x80e>
 8005bbc:	2320      	movs	r3, #32
 8005bbe:	e00e      	b.n	8005bde <UART_SetConfig+0x80e>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	e00c      	b.n	8005bde <UART_SetConfig+0x80e>
 8005bc4:	230c      	movs	r3, #12
 8005bc6:	e00a      	b.n	8005bde <UART_SetConfig+0x80e>
 8005bc8:	230a      	movs	r3, #10
 8005bca:	e008      	b.n	8005bde <UART_SetConfig+0x80e>
 8005bcc:	2308      	movs	r3, #8
 8005bce:	e006      	b.n	8005bde <UART_SetConfig+0x80e>
 8005bd0:	2306      	movs	r3, #6
 8005bd2:	e004      	b.n	8005bde <UART_SetConfig+0x80e>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	e002      	b.n	8005bde <UART_SetConfig+0x80e>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e000      	b.n	8005bde <UART_SetConfig+0x80e>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005be4:	e171      	b.n	8005eca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005be6:	4b7a      	ldr	r3, [pc, #488]	; (8005dd0 <UART_SetConfig+0xa00>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d054      	beq.n	8005c9c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005bf2:	4b77      	ldr	r3, [pc, #476]	; (8005dd0 <UART_SetConfig+0xa00>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	08db      	lsrs	r3, r3, #3
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	4a75      	ldr	r2, [pc, #468]	; (8005dd4 <UART_SetConfig+0xa04>)
 8005bfe:	40da      	lsrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d044      	beq.n	8005c92 <UART_SetConfig+0x8c2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d03e      	beq.n	8005c8e <UART_SetConfig+0x8be>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d038      	beq.n	8005c8a <UART_SetConfig+0x8ba>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d032      	beq.n	8005c86 <UART_SetConfig+0x8b6>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d02c      	beq.n	8005c82 <UART_SetConfig+0x8b2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	2b05      	cmp	r3, #5
 8005c2e:	d026      	beq.n	8005c7e <UART_SetConfig+0x8ae>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2b06      	cmp	r3, #6
 8005c36:	d020      	beq.n	8005c7a <UART_SetConfig+0x8aa>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	2b07      	cmp	r3, #7
 8005c3e:	d01a      	beq.n	8005c76 <UART_SetConfig+0x8a6>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d014      	beq.n	8005c72 <UART_SetConfig+0x8a2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	2b09      	cmp	r3, #9
 8005c4e:	d00e      	beq.n	8005c6e <UART_SetConfig+0x89e>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	2b0a      	cmp	r3, #10
 8005c56:	d008      	beq.n	8005c6a <UART_SetConfig+0x89a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b0b      	cmp	r3, #11
 8005c5e:	d102      	bne.n	8005c66 <UART_SetConfig+0x896>
 8005c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c64:	e016      	b.n	8005c94 <UART_SetConfig+0x8c4>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e014      	b.n	8005c94 <UART_SetConfig+0x8c4>
 8005c6a:	2380      	movs	r3, #128	; 0x80
 8005c6c:	e012      	b.n	8005c94 <UART_SetConfig+0x8c4>
 8005c6e:	2340      	movs	r3, #64	; 0x40
 8005c70:	e010      	b.n	8005c94 <UART_SetConfig+0x8c4>
 8005c72:	2320      	movs	r3, #32
 8005c74:	e00e      	b.n	8005c94 <UART_SetConfig+0x8c4>
 8005c76:	2310      	movs	r3, #16
 8005c78:	e00c      	b.n	8005c94 <UART_SetConfig+0x8c4>
 8005c7a:	230c      	movs	r3, #12
 8005c7c:	e00a      	b.n	8005c94 <UART_SetConfig+0x8c4>
 8005c7e:	230a      	movs	r3, #10
 8005c80:	e008      	b.n	8005c94 <UART_SetConfig+0x8c4>
 8005c82:	2308      	movs	r3, #8
 8005c84:	e006      	b.n	8005c94 <UART_SetConfig+0x8c4>
 8005c86:	2306      	movs	r3, #6
 8005c88:	e004      	b.n	8005c94 <UART_SetConfig+0x8c4>
 8005c8a:	2304      	movs	r3, #4
 8005c8c:	e002      	b.n	8005c94 <UART_SetConfig+0x8c4>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e000      	b.n	8005c94 <UART_SetConfig+0x8c4>
 8005c92:	2301      	movs	r3, #1
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8005c9a:	e116      	b.n	8005eca <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d043      	beq.n	8005d2c <UART_SetConfig+0x95c>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d03d      	beq.n	8005d28 <UART_SetConfig+0x958>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d037      	beq.n	8005d24 <UART_SetConfig+0x954>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d031      	beq.n	8005d20 <UART_SetConfig+0x950>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d02b      	beq.n	8005d1c <UART_SetConfig+0x94c>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b05      	cmp	r3, #5
 8005cca:	d025      	beq.n	8005d18 <UART_SetConfig+0x948>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	2b06      	cmp	r3, #6
 8005cd2:	d01f      	beq.n	8005d14 <UART_SetConfig+0x944>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	2b07      	cmp	r3, #7
 8005cda:	d019      	beq.n	8005d10 <UART_SetConfig+0x940>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d013      	beq.n	8005d0c <UART_SetConfig+0x93c>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b09      	cmp	r3, #9
 8005cea:	d00d      	beq.n	8005d08 <UART_SetConfig+0x938>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b0a      	cmp	r3, #10
 8005cf2:	d007      	beq.n	8005d04 <UART_SetConfig+0x934>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b0b      	cmp	r3, #11
 8005cfa:	d101      	bne.n	8005d00 <UART_SetConfig+0x930>
 8005cfc:	4b36      	ldr	r3, [pc, #216]	; (8005dd8 <UART_SetConfig+0xa08>)
 8005cfe:	e016      	b.n	8005d2e <UART_SetConfig+0x95e>
 8005d00:	4b34      	ldr	r3, [pc, #208]	; (8005dd4 <UART_SetConfig+0xa04>)
 8005d02:	e014      	b.n	8005d2e <UART_SetConfig+0x95e>
 8005d04:	4b35      	ldr	r3, [pc, #212]	; (8005ddc <UART_SetConfig+0xa0c>)
 8005d06:	e012      	b.n	8005d2e <UART_SetConfig+0x95e>
 8005d08:	4b35      	ldr	r3, [pc, #212]	; (8005de0 <UART_SetConfig+0xa10>)
 8005d0a:	e010      	b.n	8005d2e <UART_SetConfig+0x95e>
 8005d0c:	4b35      	ldr	r3, [pc, #212]	; (8005de4 <UART_SetConfig+0xa14>)
 8005d0e:	e00e      	b.n	8005d2e <UART_SetConfig+0x95e>
 8005d10:	4b35      	ldr	r3, [pc, #212]	; (8005de8 <UART_SetConfig+0xa18>)
 8005d12:	e00c      	b.n	8005d2e <UART_SetConfig+0x95e>
 8005d14:	4b35      	ldr	r3, [pc, #212]	; (8005dec <UART_SetConfig+0xa1c>)
 8005d16:	e00a      	b.n	8005d2e <UART_SetConfig+0x95e>
 8005d18:	4b35      	ldr	r3, [pc, #212]	; (8005df0 <UART_SetConfig+0xa20>)
 8005d1a:	e008      	b.n	8005d2e <UART_SetConfig+0x95e>
 8005d1c:	4b35      	ldr	r3, [pc, #212]	; (8005df4 <UART_SetConfig+0xa24>)
 8005d1e:	e006      	b.n	8005d2e <UART_SetConfig+0x95e>
 8005d20:	4b35      	ldr	r3, [pc, #212]	; (8005df8 <UART_SetConfig+0xa28>)
 8005d22:	e004      	b.n	8005d2e <UART_SetConfig+0x95e>
 8005d24:	4b35      	ldr	r3, [pc, #212]	; (8005dfc <UART_SetConfig+0xa2c>)
 8005d26:	e002      	b.n	8005d2e <UART_SetConfig+0x95e>
 8005d28:	4b35      	ldr	r3, [pc, #212]	; (8005e00 <UART_SetConfig+0xa30>)
 8005d2a:	e000      	b.n	8005d2e <UART_SetConfig+0x95e>
 8005d2c:	4b29      	ldr	r3, [pc, #164]	; (8005dd4 <UART_SetConfig+0xa04>)
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d30:	e0cb      	b.n	8005eca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d046      	beq.n	8005dc8 <UART_SetConfig+0x9f8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d040      	beq.n	8005dc4 <UART_SetConfig+0x9f4>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d03a      	beq.n	8005dc0 <UART_SetConfig+0x9f0>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d034      	beq.n	8005dbc <UART_SetConfig+0x9ec>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d02e      	beq.n	8005db8 <UART_SetConfig+0x9e8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2b05      	cmp	r3, #5
 8005d60:	d028      	beq.n	8005db4 <UART_SetConfig+0x9e4>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	2b06      	cmp	r3, #6
 8005d68:	d022      	beq.n	8005db0 <UART_SetConfig+0x9e0>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b07      	cmp	r3, #7
 8005d70:	d01c      	beq.n	8005dac <UART_SetConfig+0x9dc>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d016      	beq.n	8005da8 <UART_SetConfig+0x9d8>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	2b09      	cmp	r3, #9
 8005d80:	d00f      	beq.n	8005da2 <UART_SetConfig+0x9d2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	2b0a      	cmp	r3, #10
 8005d88:	d008      	beq.n	8005d9c <UART_SetConfig+0x9cc>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2b0b      	cmp	r3, #11
 8005d90:	d102      	bne.n	8005d98 <UART_SetConfig+0x9c8>
 8005d92:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005d96:	e018      	b.n	8005dca <UART_SetConfig+0x9fa>
 8005d98:	4b13      	ldr	r3, [pc, #76]	; (8005de8 <UART_SetConfig+0xa18>)
 8005d9a:	e016      	b.n	8005dca <UART_SetConfig+0x9fa>
 8005d9c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005da0:	e013      	b.n	8005dca <UART_SetConfig+0x9fa>
 8005da2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005da6:	e010      	b.n	8005dca <UART_SetConfig+0x9fa>
 8005da8:	4b16      	ldr	r3, [pc, #88]	; (8005e04 <UART_SetConfig+0xa34>)
 8005daa:	e00e      	b.n	8005dca <UART_SetConfig+0x9fa>
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <UART_SetConfig+0xa08>)
 8005dae:	e00c      	b.n	8005dca <UART_SetConfig+0x9fa>
 8005db0:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <UART_SetConfig+0xa38>)
 8005db2:	e00a      	b.n	8005dca <UART_SetConfig+0x9fa>
 8005db4:	4b15      	ldr	r3, [pc, #84]	; (8005e0c <UART_SetConfig+0xa3c>)
 8005db6:	e008      	b.n	8005dca <UART_SetConfig+0x9fa>
 8005db8:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <UART_SetConfig+0xa0c>)
 8005dba:	e006      	b.n	8005dca <UART_SetConfig+0x9fa>
 8005dbc:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <UART_SetConfig+0xa40>)
 8005dbe:	e004      	b.n	8005dca <UART_SetConfig+0x9fa>
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <UART_SetConfig+0xa10>)
 8005dc2:	e002      	b.n	8005dca <UART_SetConfig+0x9fa>
 8005dc4:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <UART_SetConfig+0xa14>)
 8005dc6:	e000      	b.n	8005dca <UART_SetConfig+0x9fa>
 8005dc8:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <UART_SetConfig+0xa18>)
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dcc:	e07d      	b.n	8005eca <UART_SetConfig+0xafa>
 8005dce:	bf00      	nop
 8005dd0:	58024400 	.word	0x58024400
 8005dd4:	03d09000 	.word	0x03d09000
 8005dd8:	0003d090 	.word	0x0003d090
 8005ddc:	0007a120 	.word	0x0007a120
 8005de0:	000f4240 	.word	0x000f4240
 8005de4:	001e8480 	.word	0x001e8480
 8005de8:	003d0900 	.word	0x003d0900
 8005dec:	00516155 	.word	0x00516155
 8005df0:	0061a800 	.word	0x0061a800
 8005df4:	007a1200 	.word	0x007a1200
 8005df8:	00a2c2aa 	.word	0x00a2c2aa
 8005dfc:	00f42400 	.word	0x00f42400
 8005e00:	01e84800 	.word	0x01e84800
 8005e04:	0001e848 	.word	0x0001e848
 8005e08:	00051615 	.word	0x00051615
 8005e0c:	00061a80 	.word	0x00061a80
 8005e10:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d04e      	beq.n	8005eba <UART_SetConfig+0xaea>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d047      	beq.n	8005eb4 <UART_SetConfig+0xae4>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d040      	beq.n	8005eae <UART_SetConfig+0xade>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d039      	beq.n	8005ea8 <UART_SetConfig+0xad8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d032      	beq.n	8005ea2 <UART_SetConfig+0xad2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b05      	cmp	r3, #5
 8005e42:	d02b      	beq.n	8005e9c <UART_SetConfig+0xacc>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	2b06      	cmp	r3, #6
 8005e4a:	d024      	beq.n	8005e96 <UART_SetConfig+0xac6>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b07      	cmp	r3, #7
 8005e52:	d01d      	beq.n	8005e90 <UART_SetConfig+0xac0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d016      	beq.n	8005e8a <UART_SetConfig+0xaba>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b09      	cmp	r3, #9
 8005e62:	d00f      	beq.n	8005e84 <UART_SetConfig+0xab4>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b0a      	cmp	r3, #10
 8005e6a:	d008      	beq.n	8005e7e <UART_SetConfig+0xaae>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b0b      	cmp	r3, #11
 8005e72:	d101      	bne.n	8005e78 <UART_SetConfig+0xaa8>
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	e022      	b.n	8005ebe <UART_SetConfig+0xaee>
 8005e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e7c:	e01f      	b.n	8005ebe <UART_SetConfig+0xaee>
 8005e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e82:	e01c      	b.n	8005ebe <UART_SetConfig+0xaee>
 8005e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e88:	e019      	b.n	8005ebe <UART_SetConfig+0xaee>
 8005e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e8e:	e016      	b.n	8005ebe <UART_SetConfig+0xaee>
 8005e90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e94:	e013      	b.n	8005ebe <UART_SetConfig+0xaee>
 8005e96:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005e9a:	e010      	b.n	8005ebe <UART_SetConfig+0xaee>
 8005e9c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005ea0:	e00d      	b.n	8005ebe <UART_SetConfig+0xaee>
 8005ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ea6:	e00a      	b.n	8005ebe <UART_SetConfig+0xaee>
 8005ea8:	f241 5355 	movw	r3, #5461	; 0x1555
 8005eac:	e007      	b.n	8005ebe <UART_SetConfig+0xaee>
 8005eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005eb2:	e004      	b.n	8005ebe <UART_SetConfig+0xaee>
 8005eb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005eb8:	e001      	b.n	8005ebe <UART_SetConfig+0xaee>
 8005eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ec0:	e003      	b.n	8005eca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8005ec8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f001 83e4 	beq.w	800769a <UART_SetConfig+0x22ca>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	4413      	add	r3, r2
 8005edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d305      	bcc.n	8005eee <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d904      	bls.n	8005ef8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ef4:	f001 bbd1 	b.w	800769a <UART_SetConfig+0x22ca>
      }
      else
      {
        switch (clocksource)
 8005ef8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	f000 8153 	beq.w	80061a8 <UART_SetConfig+0xdd8>
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	dc06      	bgt.n	8005f14 <UART_SetConfig+0xb44>
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d00f      	beq.n	8005f2a <UART_SetConfig+0xb5a>
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	f000 80ab 	beq.w	8006066 <UART_SetConfig+0xc96>
 8005f10:	f000 bc30 	b.w	8006774 <UART_SetConfig+0x13a4>
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	f000 832d 	beq.w	8006574 <UART_SetConfig+0x11a4>
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	f000 83a5 	beq.w	800666a <UART_SetConfig+0x129a>
 8005f20:	2b10      	cmp	r3, #16
 8005f22:	f000 81e2 	beq.w	80062ea <UART_SetConfig+0xf1a>
 8005f26:	f000 bc25 	b.w	8006774 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f2a:	f7fd feff 	bl	8003d2c <HAL_RCCEx_GetD3PCLK1Freq>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f04f 0100 	mov.w	r1, #0
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d067      	beq.n	800600e <UART_SetConfig+0xc3e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d05e      	beq.n	8006004 <UART_SetConfig+0xc34>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d055      	beq.n	8005ffa <UART_SetConfig+0xc2a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d04c      	beq.n	8005ff0 <UART_SetConfig+0xc20>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d043      	beq.n	8005fe6 <UART_SetConfig+0xc16>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	2b05      	cmp	r3, #5
 8005f64:	d03a      	beq.n	8005fdc <UART_SetConfig+0xc0c>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	2b06      	cmp	r3, #6
 8005f6c:	d031      	beq.n	8005fd2 <UART_SetConfig+0xc02>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	2b07      	cmp	r3, #7
 8005f74:	d028      	beq.n	8005fc8 <UART_SetConfig+0xbf8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b08      	cmp	r3, #8
 8005f7c:	d01f      	beq.n	8005fbe <UART_SetConfig+0xbee>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b09      	cmp	r3, #9
 8005f84:	d016      	beq.n	8005fb4 <UART_SetConfig+0xbe4>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b0a      	cmp	r3, #10
 8005f8c:	d00d      	beq.n	8005faa <UART_SetConfig+0xbda>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	2b0b      	cmp	r3, #11
 8005f94:	d104      	bne.n	8005fa0 <UART_SetConfig+0xbd0>
 8005f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f9a:	f04f 0400 	mov.w	r4, #0
 8005f9e:	e03a      	b.n	8006016 <UART_SetConfig+0xc46>
 8005fa0:	f04f 0301 	mov.w	r3, #1
 8005fa4:	f04f 0400 	mov.w	r4, #0
 8005fa8:	e035      	b.n	8006016 <UART_SetConfig+0xc46>
 8005faa:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005fae:	f04f 0400 	mov.w	r4, #0
 8005fb2:	e030      	b.n	8006016 <UART_SetConfig+0xc46>
 8005fb4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005fb8:	f04f 0400 	mov.w	r4, #0
 8005fbc:	e02b      	b.n	8006016 <UART_SetConfig+0xc46>
 8005fbe:	f04f 0320 	mov.w	r3, #32
 8005fc2:	f04f 0400 	mov.w	r4, #0
 8005fc6:	e026      	b.n	8006016 <UART_SetConfig+0xc46>
 8005fc8:	f04f 0310 	mov.w	r3, #16
 8005fcc:	f04f 0400 	mov.w	r4, #0
 8005fd0:	e021      	b.n	8006016 <UART_SetConfig+0xc46>
 8005fd2:	f04f 030c 	mov.w	r3, #12
 8005fd6:	f04f 0400 	mov.w	r4, #0
 8005fda:	e01c      	b.n	8006016 <UART_SetConfig+0xc46>
 8005fdc:	f04f 030a 	mov.w	r3, #10
 8005fe0:	f04f 0400 	mov.w	r4, #0
 8005fe4:	e017      	b.n	8006016 <UART_SetConfig+0xc46>
 8005fe6:	f04f 0308 	mov.w	r3, #8
 8005fea:	f04f 0400 	mov.w	r4, #0
 8005fee:	e012      	b.n	8006016 <UART_SetConfig+0xc46>
 8005ff0:	f04f 0306 	mov.w	r3, #6
 8005ff4:	f04f 0400 	mov.w	r4, #0
 8005ff8:	e00d      	b.n	8006016 <UART_SetConfig+0xc46>
 8005ffa:	f04f 0304 	mov.w	r3, #4
 8005ffe:	f04f 0400 	mov.w	r4, #0
 8006002:	e008      	b.n	8006016 <UART_SetConfig+0xc46>
 8006004:	f04f 0302 	mov.w	r3, #2
 8006008:	f04f 0400 	mov.w	r4, #0
 800600c:	e003      	b.n	8006016 <UART_SetConfig+0xc46>
 800600e:	f04f 0301 	mov.w	r3, #1
 8006012:	f04f 0400 	mov.w	r4, #0
 8006016:	461a      	mov	r2, r3
 8006018:	4623      	mov	r3, r4
 800601a:	f7fa f95d 	bl	80002d8 <__aeabi_uldivmod>
 800601e:	4603      	mov	r3, r0
 8006020:	460c      	mov	r4, r1
 8006022:	4619      	mov	r1, r3
 8006024:	4622      	mov	r2, r4
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	f04f 0400 	mov.w	r4, #0
 800602e:	0214      	lsls	r4, r2, #8
 8006030:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006034:	020b      	lsls	r3, r1, #8
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6852      	ldr	r2, [r2, #4]
 800603a:	0852      	lsrs	r2, r2, #1
 800603c:	4611      	mov	r1, r2
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	eb13 0b01 	adds.w	fp, r3, r1
 8006046:	eb44 0c02 	adc.w	ip, r4, r2
 800604a:	4658      	mov	r0, fp
 800604c:	4661      	mov	r1, ip
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f04f 0400 	mov.w	r4, #0
 8006056:	461a      	mov	r2, r3
 8006058:	4623      	mov	r3, r4
 800605a:	f7fa f93d 	bl	80002d8 <__aeabi_uldivmod>
 800605e:	4603      	mov	r3, r0
 8006060:	460c      	mov	r4, r1
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8006064:	e38a      	b.n	800677c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006066:	f107 0314 	add.w	r3, r7, #20
 800606a:	4618      	mov	r0, r3
 800606c:	f7fd fe74 	bl	8003d58 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	4618      	mov	r0, r3
 8006074:	f04f 0100 	mov.w	r1, #0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	2b00      	cmp	r3, #0
 800607e:	d067      	beq.n	8006150 <UART_SetConfig+0xd80>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	2b01      	cmp	r3, #1
 8006086:	d05e      	beq.n	8006146 <UART_SetConfig+0xd76>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	2b02      	cmp	r3, #2
 800608e:	d055      	beq.n	800613c <UART_SetConfig+0xd6c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	2b03      	cmp	r3, #3
 8006096:	d04c      	beq.n	8006132 <UART_SetConfig+0xd62>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	2b04      	cmp	r3, #4
 800609e:	d043      	beq.n	8006128 <UART_SetConfig+0xd58>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	2b05      	cmp	r3, #5
 80060a6:	d03a      	beq.n	800611e <UART_SetConfig+0xd4e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	2b06      	cmp	r3, #6
 80060ae:	d031      	beq.n	8006114 <UART_SetConfig+0xd44>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	2b07      	cmp	r3, #7
 80060b6:	d028      	beq.n	800610a <UART_SetConfig+0xd3a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d01f      	beq.n	8006100 <UART_SetConfig+0xd30>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	2b09      	cmp	r3, #9
 80060c6:	d016      	beq.n	80060f6 <UART_SetConfig+0xd26>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	2b0a      	cmp	r3, #10
 80060ce:	d00d      	beq.n	80060ec <UART_SetConfig+0xd1c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	2b0b      	cmp	r3, #11
 80060d6:	d104      	bne.n	80060e2 <UART_SetConfig+0xd12>
 80060d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060dc:	f04f 0400 	mov.w	r4, #0
 80060e0:	e03a      	b.n	8006158 <UART_SetConfig+0xd88>
 80060e2:	f04f 0301 	mov.w	r3, #1
 80060e6:	f04f 0400 	mov.w	r4, #0
 80060ea:	e035      	b.n	8006158 <UART_SetConfig+0xd88>
 80060ec:	f04f 0380 	mov.w	r3, #128	; 0x80
 80060f0:	f04f 0400 	mov.w	r4, #0
 80060f4:	e030      	b.n	8006158 <UART_SetConfig+0xd88>
 80060f6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80060fa:	f04f 0400 	mov.w	r4, #0
 80060fe:	e02b      	b.n	8006158 <UART_SetConfig+0xd88>
 8006100:	f04f 0320 	mov.w	r3, #32
 8006104:	f04f 0400 	mov.w	r4, #0
 8006108:	e026      	b.n	8006158 <UART_SetConfig+0xd88>
 800610a:	f04f 0310 	mov.w	r3, #16
 800610e:	f04f 0400 	mov.w	r4, #0
 8006112:	e021      	b.n	8006158 <UART_SetConfig+0xd88>
 8006114:	f04f 030c 	mov.w	r3, #12
 8006118:	f04f 0400 	mov.w	r4, #0
 800611c:	e01c      	b.n	8006158 <UART_SetConfig+0xd88>
 800611e:	f04f 030a 	mov.w	r3, #10
 8006122:	f04f 0400 	mov.w	r4, #0
 8006126:	e017      	b.n	8006158 <UART_SetConfig+0xd88>
 8006128:	f04f 0308 	mov.w	r3, #8
 800612c:	f04f 0400 	mov.w	r4, #0
 8006130:	e012      	b.n	8006158 <UART_SetConfig+0xd88>
 8006132:	f04f 0306 	mov.w	r3, #6
 8006136:	f04f 0400 	mov.w	r4, #0
 800613a:	e00d      	b.n	8006158 <UART_SetConfig+0xd88>
 800613c:	f04f 0304 	mov.w	r3, #4
 8006140:	f04f 0400 	mov.w	r4, #0
 8006144:	e008      	b.n	8006158 <UART_SetConfig+0xd88>
 8006146:	f04f 0302 	mov.w	r3, #2
 800614a:	f04f 0400 	mov.w	r4, #0
 800614e:	e003      	b.n	8006158 <UART_SetConfig+0xd88>
 8006150:	f04f 0301 	mov.w	r3, #1
 8006154:	f04f 0400 	mov.w	r4, #0
 8006158:	461a      	mov	r2, r3
 800615a:	4623      	mov	r3, r4
 800615c:	f7fa f8bc 	bl	80002d8 <__aeabi_uldivmod>
 8006160:	4603      	mov	r3, r0
 8006162:	460c      	mov	r4, r1
 8006164:	4619      	mov	r1, r3
 8006166:	4622      	mov	r2, r4
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	f04f 0400 	mov.w	r4, #0
 8006170:	0214      	lsls	r4, r2, #8
 8006172:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006176:	020b      	lsls	r3, r1, #8
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6852      	ldr	r2, [r2, #4]
 800617c:	0852      	lsrs	r2, r2, #1
 800617e:	4611      	mov	r1, r2
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	eb13 0b01 	adds.w	fp, r3, r1
 8006188:	eb44 0c02 	adc.w	ip, r4, r2
 800618c:	4658      	mov	r0, fp
 800618e:	4661      	mov	r1, ip
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f04f 0400 	mov.w	r4, #0
 8006198:	461a      	mov	r2, r3
 800619a:	4623      	mov	r3, r4
 800619c:	f7fa f89c 	bl	80002d8 <__aeabi_uldivmod>
 80061a0:	4603      	mov	r3, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80061a6:	e2e9      	b.n	800677c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061a8:	f107 0308 	add.w	r3, r7, #8
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fd ff1f 	bl	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f04f 0100 	mov.w	r1, #0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d067      	beq.n	8006292 <UART_SetConfig+0xec2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d05e      	beq.n	8006288 <UART_SetConfig+0xeb8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d055      	beq.n	800627e <UART_SetConfig+0xeae>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d04c      	beq.n	8006274 <UART_SetConfig+0xea4>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d043      	beq.n	800626a <UART_SetConfig+0xe9a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	d03a      	beq.n	8006260 <UART_SetConfig+0xe90>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	2b06      	cmp	r3, #6
 80061f0:	d031      	beq.n	8006256 <UART_SetConfig+0xe86>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	2b07      	cmp	r3, #7
 80061f8:	d028      	beq.n	800624c <UART_SetConfig+0xe7c>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d01f      	beq.n	8006242 <UART_SetConfig+0xe72>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	2b09      	cmp	r3, #9
 8006208:	d016      	beq.n	8006238 <UART_SetConfig+0xe68>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	2b0a      	cmp	r3, #10
 8006210:	d00d      	beq.n	800622e <UART_SetConfig+0xe5e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	2b0b      	cmp	r3, #11
 8006218:	d104      	bne.n	8006224 <UART_SetConfig+0xe54>
 800621a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800621e:	f04f 0400 	mov.w	r4, #0
 8006222:	e03a      	b.n	800629a <UART_SetConfig+0xeca>
 8006224:	f04f 0301 	mov.w	r3, #1
 8006228:	f04f 0400 	mov.w	r4, #0
 800622c:	e035      	b.n	800629a <UART_SetConfig+0xeca>
 800622e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006232:	f04f 0400 	mov.w	r4, #0
 8006236:	e030      	b.n	800629a <UART_SetConfig+0xeca>
 8006238:	f04f 0340 	mov.w	r3, #64	; 0x40
 800623c:	f04f 0400 	mov.w	r4, #0
 8006240:	e02b      	b.n	800629a <UART_SetConfig+0xeca>
 8006242:	f04f 0320 	mov.w	r3, #32
 8006246:	f04f 0400 	mov.w	r4, #0
 800624a:	e026      	b.n	800629a <UART_SetConfig+0xeca>
 800624c:	f04f 0310 	mov.w	r3, #16
 8006250:	f04f 0400 	mov.w	r4, #0
 8006254:	e021      	b.n	800629a <UART_SetConfig+0xeca>
 8006256:	f04f 030c 	mov.w	r3, #12
 800625a:	f04f 0400 	mov.w	r4, #0
 800625e:	e01c      	b.n	800629a <UART_SetConfig+0xeca>
 8006260:	f04f 030a 	mov.w	r3, #10
 8006264:	f04f 0400 	mov.w	r4, #0
 8006268:	e017      	b.n	800629a <UART_SetConfig+0xeca>
 800626a:	f04f 0308 	mov.w	r3, #8
 800626e:	f04f 0400 	mov.w	r4, #0
 8006272:	e012      	b.n	800629a <UART_SetConfig+0xeca>
 8006274:	f04f 0306 	mov.w	r3, #6
 8006278:	f04f 0400 	mov.w	r4, #0
 800627c:	e00d      	b.n	800629a <UART_SetConfig+0xeca>
 800627e:	f04f 0304 	mov.w	r3, #4
 8006282:	f04f 0400 	mov.w	r4, #0
 8006286:	e008      	b.n	800629a <UART_SetConfig+0xeca>
 8006288:	f04f 0302 	mov.w	r3, #2
 800628c:	f04f 0400 	mov.w	r4, #0
 8006290:	e003      	b.n	800629a <UART_SetConfig+0xeca>
 8006292:	f04f 0301 	mov.w	r3, #1
 8006296:	f04f 0400 	mov.w	r4, #0
 800629a:	461a      	mov	r2, r3
 800629c:	4623      	mov	r3, r4
 800629e:	f7fa f81b 	bl	80002d8 <__aeabi_uldivmod>
 80062a2:	4603      	mov	r3, r0
 80062a4:	460c      	mov	r4, r1
 80062a6:	4619      	mov	r1, r3
 80062a8:	4622      	mov	r2, r4
 80062aa:	f04f 0300 	mov.w	r3, #0
 80062ae:	f04f 0400 	mov.w	r4, #0
 80062b2:	0214      	lsls	r4, r2, #8
 80062b4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80062b8:	020b      	lsls	r3, r1, #8
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6852      	ldr	r2, [r2, #4]
 80062be:	0852      	lsrs	r2, r2, #1
 80062c0:	4611      	mov	r1, r2
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	eb13 0b01 	adds.w	fp, r3, r1
 80062ca:	eb44 0c02 	adc.w	ip, r4, r2
 80062ce:	4658      	mov	r0, fp
 80062d0:	4661      	mov	r1, ip
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f04f 0400 	mov.w	r4, #0
 80062da:	461a      	mov	r2, r3
 80062dc:	4623      	mov	r3, r4
 80062de:	f7f9 fffb 	bl	80002d8 <__aeabi_uldivmod>
 80062e2:	4603      	mov	r3, r0
 80062e4:	460c      	mov	r4, r1
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80062e8:	e248      	b.n	800677c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ea:	4b97      	ldr	r3, [pc, #604]	; (8006548 <UART_SetConfig+0x1178>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 80a3 	beq.w	800643e <UART_SetConfig+0x106e>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f8:	4b93      	ldr	r3, [pc, #588]	; (8006548 <UART_SetConfig+0x1178>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	08db      	lsrs	r3, r3, #3
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	4a92      	ldr	r2, [pc, #584]	; (800654c <UART_SetConfig+0x117c>)
 8006304:	fa22 f303 	lsr.w	r3, r2, r3
 8006308:	4618      	mov	r0, r3
 800630a:	f04f 0100 	mov.w	r1, #0
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	d067      	beq.n	80063e6 <UART_SetConfig+0x1016>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	2b01      	cmp	r3, #1
 800631c:	d05e      	beq.n	80063dc <UART_SetConfig+0x100c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	2b02      	cmp	r3, #2
 8006324:	d055      	beq.n	80063d2 <UART_SetConfig+0x1002>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	2b03      	cmp	r3, #3
 800632c:	d04c      	beq.n	80063c8 <UART_SetConfig+0xff8>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	2b04      	cmp	r3, #4
 8006334:	d043      	beq.n	80063be <UART_SetConfig+0xfee>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	2b05      	cmp	r3, #5
 800633c:	d03a      	beq.n	80063b4 <UART_SetConfig+0xfe4>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	2b06      	cmp	r3, #6
 8006344:	d031      	beq.n	80063aa <UART_SetConfig+0xfda>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b07      	cmp	r3, #7
 800634c:	d028      	beq.n	80063a0 <UART_SetConfig+0xfd0>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	2b08      	cmp	r3, #8
 8006354:	d01f      	beq.n	8006396 <UART_SetConfig+0xfc6>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	2b09      	cmp	r3, #9
 800635c:	d016      	beq.n	800638c <UART_SetConfig+0xfbc>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	2b0a      	cmp	r3, #10
 8006364:	d00d      	beq.n	8006382 <UART_SetConfig+0xfb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	2b0b      	cmp	r3, #11
 800636c:	d104      	bne.n	8006378 <UART_SetConfig+0xfa8>
 800636e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006372:	f04f 0400 	mov.w	r4, #0
 8006376:	e03a      	b.n	80063ee <UART_SetConfig+0x101e>
 8006378:	f04f 0301 	mov.w	r3, #1
 800637c:	f04f 0400 	mov.w	r4, #0
 8006380:	e035      	b.n	80063ee <UART_SetConfig+0x101e>
 8006382:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006386:	f04f 0400 	mov.w	r4, #0
 800638a:	e030      	b.n	80063ee <UART_SetConfig+0x101e>
 800638c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006390:	f04f 0400 	mov.w	r4, #0
 8006394:	e02b      	b.n	80063ee <UART_SetConfig+0x101e>
 8006396:	f04f 0320 	mov.w	r3, #32
 800639a:	f04f 0400 	mov.w	r4, #0
 800639e:	e026      	b.n	80063ee <UART_SetConfig+0x101e>
 80063a0:	f04f 0310 	mov.w	r3, #16
 80063a4:	f04f 0400 	mov.w	r4, #0
 80063a8:	e021      	b.n	80063ee <UART_SetConfig+0x101e>
 80063aa:	f04f 030c 	mov.w	r3, #12
 80063ae:	f04f 0400 	mov.w	r4, #0
 80063b2:	e01c      	b.n	80063ee <UART_SetConfig+0x101e>
 80063b4:	f04f 030a 	mov.w	r3, #10
 80063b8:	f04f 0400 	mov.w	r4, #0
 80063bc:	e017      	b.n	80063ee <UART_SetConfig+0x101e>
 80063be:	f04f 0308 	mov.w	r3, #8
 80063c2:	f04f 0400 	mov.w	r4, #0
 80063c6:	e012      	b.n	80063ee <UART_SetConfig+0x101e>
 80063c8:	f04f 0306 	mov.w	r3, #6
 80063cc:	f04f 0400 	mov.w	r4, #0
 80063d0:	e00d      	b.n	80063ee <UART_SetConfig+0x101e>
 80063d2:	f04f 0304 	mov.w	r3, #4
 80063d6:	f04f 0400 	mov.w	r4, #0
 80063da:	e008      	b.n	80063ee <UART_SetConfig+0x101e>
 80063dc:	f04f 0302 	mov.w	r3, #2
 80063e0:	f04f 0400 	mov.w	r4, #0
 80063e4:	e003      	b.n	80063ee <UART_SetConfig+0x101e>
 80063e6:	f04f 0301 	mov.w	r3, #1
 80063ea:	f04f 0400 	mov.w	r4, #0
 80063ee:	461a      	mov	r2, r3
 80063f0:	4623      	mov	r3, r4
 80063f2:	f7f9 ff71 	bl	80002d8 <__aeabi_uldivmod>
 80063f6:	4603      	mov	r3, r0
 80063f8:	460c      	mov	r4, r1
 80063fa:	4619      	mov	r1, r3
 80063fc:	4622      	mov	r2, r4
 80063fe:	f04f 0300 	mov.w	r3, #0
 8006402:	f04f 0400 	mov.w	r4, #0
 8006406:	0214      	lsls	r4, r2, #8
 8006408:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800640c:	020b      	lsls	r3, r1, #8
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6852      	ldr	r2, [r2, #4]
 8006412:	0852      	lsrs	r2, r2, #1
 8006414:	4611      	mov	r1, r2
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	eb13 0b01 	adds.w	fp, r3, r1
 800641e:	eb44 0c02 	adc.w	ip, r4, r2
 8006422:	4658      	mov	r0, fp
 8006424:	4661      	mov	r1, ip
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f04f 0400 	mov.w	r4, #0
 800642e:	461a      	mov	r2, r3
 8006430:	4623      	mov	r3, r4
 8006432:	f7f9 ff51 	bl	80002d8 <__aeabi_uldivmod>
 8006436:	4603      	mov	r3, r0
 8006438:	460c      	mov	r4, r1
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800643c:	e19e      	b.n	800677c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	d05b      	beq.n	80064fe <UART_SetConfig+0x112e>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	2b01      	cmp	r3, #1
 800644c:	d053      	beq.n	80064f6 <UART_SetConfig+0x1126>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	2b02      	cmp	r3, #2
 8006454:	d04b      	beq.n	80064ee <UART_SetConfig+0x111e>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	2b03      	cmp	r3, #3
 800645c:	d043      	beq.n	80064e6 <UART_SetConfig+0x1116>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	2b04      	cmp	r3, #4
 8006464:	d03b      	beq.n	80064de <UART_SetConfig+0x110e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	2b05      	cmp	r3, #5
 800646c:	d033      	beq.n	80064d6 <UART_SetConfig+0x1106>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2b06      	cmp	r3, #6
 8006474:	d02b      	beq.n	80064ce <UART_SetConfig+0x10fe>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2b07      	cmp	r3, #7
 800647c:	d023      	beq.n	80064c6 <UART_SetConfig+0x10f6>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	2b08      	cmp	r3, #8
 8006484:	d01b      	beq.n	80064be <UART_SetConfig+0x10ee>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	2b09      	cmp	r3, #9
 800648c:	d013      	beq.n	80064b6 <UART_SetConfig+0x10e6>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	2b0a      	cmp	r3, #10
 8006494:	d00b      	beq.n	80064ae <UART_SetConfig+0x10de>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	2b0b      	cmp	r3, #11
 800649c:	d103      	bne.n	80064a6 <UART_SetConfig+0x10d6>
 800649e:	4b2b      	ldr	r3, [pc, #172]	; (800654c <UART_SetConfig+0x117c>)
 80064a0:	f04f 0400 	mov.w	r4, #0
 80064a4:	e02e      	b.n	8006504 <UART_SetConfig+0x1134>
 80064a6:	4b2a      	ldr	r3, [pc, #168]	; (8006550 <UART_SetConfig+0x1180>)
 80064a8:	f04f 0403 	mov.w	r4, #3
 80064ac:	e02a      	b.n	8006504 <UART_SetConfig+0x1134>
 80064ae:	4b29      	ldr	r3, [pc, #164]	; (8006554 <UART_SetConfig+0x1184>)
 80064b0:	f04f 0400 	mov.w	r4, #0
 80064b4:	e026      	b.n	8006504 <UART_SetConfig+0x1134>
 80064b6:	4b28      	ldr	r3, [pc, #160]	; (8006558 <UART_SetConfig+0x1188>)
 80064b8:	f04f 0400 	mov.w	r4, #0
 80064bc:	e022      	b.n	8006504 <UART_SetConfig+0x1134>
 80064be:	4b27      	ldr	r3, [pc, #156]	; (800655c <UART_SetConfig+0x118c>)
 80064c0:	f04f 0400 	mov.w	r4, #0
 80064c4:	e01e      	b.n	8006504 <UART_SetConfig+0x1134>
 80064c6:	4b26      	ldr	r3, [pc, #152]	; (8006560 <UART_SetConfig+0x1190>)
 80064c8:	f04f 0400 	mov.w	r4, #0
 80064cc:	e01a      	b.n	8006504 <UART_SetConfig+0x1134>
 80064ce:	a41a      	add	r4, pc, #104	; (adr r4, 8006538 <UART_SetConfig+0x1168>)
 80064d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80064d4:	e016      	b.n	8006504 <UART_SetConfig+0x1134>
 80064d6:	4b23      	ldr	r3, [pc, #140]	; (8006564 <UART_SetConfig+0x1194>)
 80064d8:	f04f 0400 	mov.w	r4, #0
 80064dc:	e012      	b.n	8006504 <UART_SetConfig+0x1134>
 80064de:	4b22      	ldr	r3, [pc, #136]	; (8006568 <UART_SetConfig+0x1198>)
 80064e0:	f04f 0400 	mov.w	r4, #0
 80064e4:	e00e      	b.n	8006504 <UART_SetConfig+0x1134>
 80064e6:	a416      	add	r4, pc, #88	; (adr r4, 8006540 <UART_SetConfig+0x1170>)
 80064e8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80064ec:	e00a      	b.n	8006504 <UART_SetConfig+0x1134>
 80064ee:	4b1f      	ldr	r3, [pc, #124]	; (800656c <UART_SetConfig+0x119c>)
 80064f0:	f04f 0400 	mov.w	r4, #0
 80064f4:	e006      	b.n	8006504 <UART_SetConfig+0x1134>
 80064f6:	4b1e      	ldr	r3, [pc, #120]	; (8006570 <UART_SetConfig+0x11a0>)
 80064f8:	f04f 0401 	mov.w	r4, #1
 80064fc:	e002      	b.n	8006504 <UART_SetConfig+0x1134>
 80064fe:	4b14      	ldr	r3, [pc, #80]	; (8006550 <UART_SetConfig+0x1180>)
 8006500:	f04f 0403 	mov.w	r4, #3
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6852      	ldr	r2, [r2, #4]
 8006508:	0852      	lsrs	r2, r2, #1
 800650a:	4611      	mov	r1, r2
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	eb13 0b01 	adds.w	fp, r3, r1
 8006514:	eb44 0c02 	adc.w	ip, r4, r2
 8006518:	4658      	mov	r0, fp
 800651a:	4661      	mov	r1, ip
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f04f 0400 	mov.w	r4, #0
 8006524:	461a      	mov	r2, r3
 8006526:	4623      	mov	r3, r4
 8006528:	f7f9 fed6 	bl	80002d8 <__aeabi_uldivmod>
 800652c:	4603      	mov	r3, r0
 800652e:	460c      	mov	r4, r1
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8006532:	e123      	b.n	800677c <UART_SetConfig+0x13ac>
 8006534:	f3af 8000 	nop.w
 8006538:	51615500 	.word	0x51615500
 800653c:	00000000 	.word	0x00000000
 8006540:	a2c2aa00 	.word	0xa2c2aa00
 8006544:	00000000 	.word	0x00000000
 8006548:	58024400 	.word	0x58024400
 800654c:	03d09000 	.word	0x03d09000
 8006550:	d0900000 	.word	0xd0900000
 8006554:	07a12000 	.word	0x07a12000
 8006558:	0f424000 	.word	0x0f424000
 800655c:	1e848000 	.word	0x1e848000
 8006560:	3d090000 	.word	0x3d090000
 8006564:	61a80000 	.word	0x61a80000
 8006568:	7a120000 	.word	0x7a120000
 800656c:	f4240000 	.word	0xf4240000
 8006570:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	2b00      	cmp	r3, #0
 800657a:	d05b      	beq.n	8006634 <UART_SetConfig+0x1264>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	2b01      	cmp	r3, #1
 8006582:	d053      	beq.n	800662c <UART_SetConfig+0x125c>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2b02      	cmp	r3, #2
 800658a:	d04b      	beq.n	8006624 <UART_SetConfig+0x1254>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	2b03      	cmp	r3, #3
 8006592:	d043      	beq.n	800661c <UART_SetConfig+0x124c>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	2b04      	cmp	r3, #4
 800659a:	d03b      	beq.n	8006614 <UART_SetConfig+0x1244>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	2b05      	cmp	r3, #5
 80065a2:	d033      	beq.n	800660c <UART_SetConfig+0x123c>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	2b06      	cmp	r3, #6
 80065aa:	d02b      	beq.n	8006604 <UART_SetConfig+0x1234>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	2b07      	cmp	r3, #7
 80065b2:	d023      	beq.n	80065fc <UART_SetConfig+0x122c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d01b      	beq.n	80065f4 <UART_SetConfig+0x1224>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	2b09      	cmp	r3, #9
 80065c2:	d013      	beq.n	80065ec <UART_SetConfig+0x121c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	2b0a      	cmp	r3, #10
 80065ca:	d00b      	beq.n	80065e4 <UART_SetConfig+0x1214>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	2b0b      	cmp	r3, #11
 80065d2:	d103      	bne.n	80065dc <UART_SetConfig+0x120c>
 80065d4:	4bc0      	ldr	r3, [pc, #768]	; (80068d8 <UART_SetConfig+0x1508>)
 80065d6:	f04f 0400 	mov.w	r4, #0
 80065da:	e02e      	b.n	800663a <UART_SetConfig+0x126a>
 80065dc:	4bbf      	ldr	r3, [pc, #764]	; (80068dc <UART_SetConfig+0x150c>)
 80065de:	f04f 0400 	mov.w	r4, #0
 80065e2:	e02a      	b.n	800663a <UART_SetConfig+0x126a>
 80065e4:	4bbe      	ldr	r3, [pc, #760]	; (80068e0 <UART_SetConfig+0x1510>)
 80065e6:	f04f 0400 	mov.w	r4, #0
 80065ea:	e026      	b.n	800663a <UART_SetConfig+0x126a>
 80065ec:	4bbd      	ldr	r3, [pc, #756]	; (80068e4 <UART_SetConfig+0x1514>)
 80065ee:	f04f 0400 	mov.w	r4, #0
 80065f2:	e022      	b.n	800663a <UART_SetConfig+0x126a>
 80065f4:	4bbc      	ldr	r3, [pc, #752]	; (80068e8 <UART_SetConfig+0x1518>)
 80065f6:	f04f 0400 	mov.w	r4, #0
 80065fa:	e01e      	b.n	800663a <UART_SetConfig+0x126a>
 80065fc:	4bbb      	ldr	r3, [pc, #748]	; (80068ec <UART_SetConfig+0x151c>)
 80065fe:	f04f 0400 	mov.w	r4, #0
 8006602:	e01a      	b.n	800663a <UART_SetConfig+0x126a>
 8006604:	a4b0      	add	r4, pc, #704	; (adr r4, 80068c8 <UART_SetConfig+0x14f8>)
 8006606:	e9d4 3400 	ldrd	r3, r4, [r4]
 800660a:	e016      	b.n	800663a <UART_SetConfig+0x126a>
 800660c:	4bb8      	ldr	r3, [pc, #736]	; (80068f0 <UART_SetConfig+0x1520>)
 800660e:	f04f 0400 	mov.w	r4, #0
 8006612:	e012      	b.n	800663a <UART_SetConfig+0x126a>
 8006614:	4bb7      	ldr	r3, [pc, #732]	; (80068f4 <UART_SetConfig+0x1524>)
 8006616:	f04f 0400 	mov.w	r4, #0
 800661a:	e00e      	b.n	800663a <UART_SetConfig+0x126a>
 800661c:	a4ac      	add	r4, pc, #688	; (adr r4, 80068d0 <UART_SetConfig+0x1500>)
 800661e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006622:	e00a      	b.n	800663a <UART_SetConfig+0x126a>
 8006624:	4bb4      	ldr	r3, [pc, #720]	; (80068f8 <UART_SetConfig+0x1528>)
 8006626:	f04f 0400 	mov.w	r4, #0
 800662a:	e006      	b.n	800663a <UART_SetConfig+0x126a>
 800662c:	4bb3      	ldr	r3, [pc, #716]	; (80068fc <UART_SetConfig+0x152c>)
 800662e:	f04f 0400 	mov.w	r4, #0
 8006632:	e002      	b.n	800663a <UART_SetConfig+0x126a>
 8006634:	4ba9      	ldr	r3, [pc, #676]	; (80068dc <UART_SetConfig+0x150c>)
 8006636:	f04f 0400 	mov.w	r4, #0
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6852      	ldr	r2, [r2, #4]
 800663e:	0852      	lsrs	r2, r2, #1
 8006640:	4611      	mov	r1, r2
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	eb13 0b01 	adds.w	fp, r3, r1
 800664a:	eb44 0c02 	adc.w	ip, r4, r2
 800664e:	4658      	mov	r0, fp
 8006650:	4661      	mov	r1, ip
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f04f 0400 	mov.w	r4, #0
 800665a:	461a      	mov	r2, r3
 800665c:	4623      	mov	r3, r4
 800665e:	f7f9 fe3b 	bl	80002d8 <__aeabi_uldivmod>
 8006662:	4603      	mov	r3, r0
 8006664:	460c      	mov	r4, r1
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8006668:	e088      	b.n	800677c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	2b00      	cmp	r3, #0
 8006670:	d064      	beq.n	800673c <UART_SetConfig+0x136c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	2b01      	cmp	r3, #1
 8006678:	d05b      	beq.n	8006732 <UART_SetConfig+0x1362>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	2b02      	cmp	r3, #2
 8006680:	d052      	beq.n	8006728 <UART_SetConfig+0x1358>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	2b03      	cmp	r3, #3
 8006688:	d04a      	beq.n	8006720 <UART_SetConfig+0x1350>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	2b04      	cmp	r3, #4
 8006690:	d041      	beq.n	8006716 <UART_SetConfig+0x1346>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	2b05      	cmp	r3, #5
 8006698:	d039      	beq.n	800670e <UART_SetConfig+0x133e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	2b06      	cmp	r3, #6
 80066a0:	d031      	beq.n	8006706 <UART_SetConfig+0x1336>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	2b07      	cmp	r3, #7
 80066a8:	d028      	beq.n	80066fc <UART_SetConfig+0x132c>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d01f      	beq.n	80066f2 <UART_SetConfig+0x1322>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	2b09      	cmp	r3, #9
 80066b8:	d016      	beq.n	80066e8 <UART_SetConfig+0x1318>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	2b0a      	cmp	r3, #10
 80066c0:	d00d      	beq.n	80066de <UART_SetConfig+0x130e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	2b0b      	cmp	r3, #11
 80066c8:	d104      	bne.n	80066d4 <UART_SetConfig+0x1304>
 80066ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ce:	f04f 0400 	mov.w	r4, #0
 80066d2:	e037      	b.n	8006744 <UART_SetConfig+0x1374>
 80066d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80066d8:	f04f 0400 	mov.w	r4, #0
 80066dc:	e032      	b.n	8006744 <UART_SetConfig+0x1374>
 80066de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066e2:	f04f 0400 	mov.w	r4, #0
 80066e6:	e02d      	b.n	8006744 <UART_SetConfig+0x1374>
 80066e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066ec:	f04f 0400 	mov.w	r4, #0
 80066f0:	e028      	b.n	8006744 <UART_SetConfig+0x1374>
 80066f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066f6:	f04f 0400 	mov.w	r4, #0
 80066fa:	e023      	b.n	8006744 <UART_SetConfig+0x1374>
 80066fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006700:	f04f 0400 	mov.w	r4, #0
 8006704:	e01e      	b.n	8006744 <UART_SetConfig+0x1374>
 8006706:	4b7e      	ldr	r3, [pc, #504]	; (8006900 <UART_SetConfig+0x1530>)
 8006708:	f04f 0400 	mov.w	r4, #0
 800670c:	e01a      	b.n	8006744 <UART_SetConfig+0x1374>
 800670e:	4b7d      	ldr	r3, [pc, #500]	; (8006904 <UART_SetConfig+0x1534>)
 8006710:	f04f 0400 	mov.w	r4, #0
 8006714:	e016      	b.n	8006744 <UART_SetConfig+0x1374>
 8006716:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800671a:	f04f 0400 	mov.w	r4, #0
 800671e:	e011      	b.n	8006744 <UART_SetConfig+0x1374>
 8006720:	4b79      	ldr	r3, [pc, #484]	; (8006908 <UART_SetConfig+0x1538>)
 8006722:	f04f 0400 	mov.w	r4, #0
 8006726:	e00d      	b.n	8006744 <UART_SetConfig+0x1374>
 8006728:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800672c:	f04f 0400 	mov.w	r4, #0
 8006730:	e008      	b.n	8006744 <UART_SetConfig+0x1374>
 8006732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006736:	f04f 0400 	mov.w	r4, #0
 800673a:	e003      	b.n	8006744 <UART_SetConfig+0x1374>
 800673c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006740:	f04f 0400 	mov.w	r4, #0
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6852      	ldr	r2, [r2, #4]
 8006748:	0852      	lsrs	r2, r2, #1
 800674a:	4611      	mov	r1, r2
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	eb13 0b01 	adds.w	fp, r3, r1
 8006754:	eb44 0c02 	adc.w	ip, r4, r2
 8006758:	4658      	mov	r0, fp
 800675a:	4661      	mov	r1, ip
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f04f 0400 	mov.w	r4, #0
 8006764:	461a      	mov	r2, r3
 8006766:	4623      	mov	r3, r4
 8006768:	f7f9 fdb6 	bl	80002d8 <__aeabi_uldivmod>
 800676c:	4603      	mov	r3, r0
 800676e:	460c      	mov	r4, r1
 8006770:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8006772:	e003      	b.n	800677c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 800677a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006782:	d309      	bcc.n	8006798 <UART_SetConfig+0x13c8>
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800678a:	d205      	bcs.n	8006798 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006792:	60da      	str	r2, [r3, #12]
 8006794:	f000 bf81 	b.w	800769a <UART_SetConfig+0x22ca>
        }
        else
        {
          ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679e:	f000 bf7c 	b.w	800769a <UART_SetConfig+0x22ca>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067aa:	f040 83d8 	bne.w	8006f5e <UART_SetConfig+0x1b8e>
  {
    switch (clocksource)
 80067ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	f200 83b1 	bhi.w	8006f1a <UART_SetConfig+0x1b4a>
 80067b8:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <UART_SetConfig+0x13f0>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	0800690d 	.word	0x0800690d
 80067c4:	080069c3 	.word	0x080069c3
 80067c8:	08006f1b 	.word	0x08006f1b
 80067cc:	08006f1b 	.word	0x08006f1b
 80067d0:	08006a79 	.word	0x08006a79
 80067d4:	08006f1b 	.word	0x08006f1b
 80067d8:	08006f1b 	.word	0x08006f1b
 80067dc:	08006f1b 	.word	0x08006f1b
 80067e0:	08006b35 	.word	0x08006b35
 80067e4:	08006f1b 	.word	0x08006f1b
 80067e8:	08006f1b 	.word	0x08006f1b
 80067ec:	08006f1b 	.word	0x08006f1b
 80067f0:	08006f1b 	.word	0x08006f1b
 80067f4:	08006f1b 	.word	0x08006f1b
 80067f8:	08006f1b 	.word	0x08006f1b
 80067fc:	08006f1b 	.word	0x08006f1b
 8006800:	08006bf1 	.word	0x08006bf1
 8006804:	08006f1b 	.word	0x08006f1b
 8006808:	08006f1b 	.word	0x08006f1b
 800680c:	08006f1b 	.word	0x08006f1b
 8006810:	08006f1b 	.word	0x08006f1b
 8006814:	08006f1b 	.word	0x08006f1b
 8006818:	08006f1b 	.word	0x08006f1b
 800681c:	08006f1b 	.word	0x08006f1b
 8006820:	08006f1b 	.word	0x08006f1b
 8006824:	08006f1b 	.word	0x08006f1b
 8006828:	08006f1b 	.word	0x08006f1b
 800682c:	08006f1b 	.word	0x08006f1b
 8006830:	08006f1b 	.word	0x08006f1b
 8006834:	08006f1b 	.word	0x08006f1b
 8006838:	08006f1b 	.word	0x08006f1b
 800683c:	08006f1b 	.word	0x08006f1b
 8006840:	08006d63 	.word	0x08006d63
 8006844:	08006f1b 	.word	0x08006f1b
 8006848:	08006f1b 	.word	0x08006f1b
 800684c:	08006f1b 	.word	0x08006f1b
 8006850:	08006f1b 	.word	0x08006f1b
 8006854:	08006f1b 	.word	0x08006f1b
 8006858:	08006f1b 	.word	0x08006f1b
 800685c:	08006f1b 	.word	0x08006f1b
 8006860:	08006f1b 	.word	0x08006f1b
 8006864:	08006f1b 	.word	0x08006f1b
 8006868:	08006f1b 	.word	0x08006f1b
 800686c:	08006f1b 	.word	0x08006f1b
 8006870:	08006f1b 	.word	0x08006f1b
 8006874:	08006f1b 	.word	0x08006f1b
 8006878:	08006f1b 	.word	0x08006f1b
 800687c:	08006f1b 	.word	0x08006f1b
 8006880:	08006f1b 	.word	0x08006f1b
 8006884:	08006f1b 	.word	0x08006f1b
 8006888:	08006f1b 	.word	0x08006f1b
 800688c:	08006f1b 	.word	0x08006f1b
 8006890:	08006f1b 	.word	0x08006f1b
 8006894:	08006f1b 	.word	0x08006f1b
 8006898:	08006f1b 	.word	0x08006f1b
 800689c:	08006f1b 	.word	0x08006f1b
 80068a0:	08006f1b 	.word	0x08006f1b
 80068a4:	08006f1b 	.word	0x08006f1b
 80068a8:	08006f1b 	.word	0x08006f1b
 80068ac:	08006f1b 	.word	0x08006f1b
 80068b0:	08006f1b 	.word	0x08006f1b
 80068b4:	08006f1b 	.word	0x08006f1b
 80068b8:	08006f1b 	.word	0x08006f1b
 80068bc:	08006f1b 	.word	0x08006f1b
 80068c0:	08006e59 	.word	0x08006e59
 80068c4:	f3af 8000 	nop.w
 80068c8:	05161500 	.word	0x05161500
 80068cc:	00000000 	.word	0x00000000
 80068d0:	0a2c2a00 	.word	0x0a2c2a00
 80068d4:	00000000 	.word	0x00000000
 80068d8:	003d0900 	.word	0x003d0900
 80068dc:	3d090000 	.word	0x3d090000
 80068e0:	007a1200 	.word	0x007a1200
 80068e4:	00f42400 	.word	0x00f42400
 80068e8:	01e84800 	.word	0x01e84800
 80068ec:	03d09000 	.word	0x03d09000
 80068f0:	061a8000 	.word	0x061a8000
 80068f4:	07a12000 	.word	0x07a12000
 80068f8:	0f424000 	.word	0x0f424000
 80068fc:	1e848000 	.word	0x1e848000
 8006900:	000aaa00 	.word	0x000aaa00
 8006904:	000ccc00 	.word	0x000ccc00
 8006908:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800690c:	f7fc f8e0 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8006910:	4602      	mov	r2, r0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d044      	beq.n	80069a4 <UART_SetConfig+0x15d4>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	2b01      	cmp	r3, #1
 8006920:	d03e      	beq.n	80069a0 <UART_SetConfig+0x15d0>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	2b02      	cmp	r3, #2
 8006928:	d038      	beq.n	800699c <UART_SetConfig+0x15cc>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	2b03      	cmp	r3, #3
 8006930:	d032      	beq.n	8006998 <UART_SetConfig+0x15c8>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	2b04      	cmp	r3, #4
 8006938:	d02c      	beq.n	8006994 <UART_SetConfig+0x15c4>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	2b05      	cmp	r3, #5
 8006940:	d026      	beq.n	8006990 <UART_SetConfig+0x15c0>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	2b06      	cmp	r3, #6
 8006948:	d020      	beq.n	800698c <UART_SetConfig+0x15bc>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	2b07      	cmp	r3, #7
 8006950:	d01a      	beq.n	8006988 <UART_SetConfig+0x15b8>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	2b08      	cmp	r3, #8
 8006958:	d014      	beq.n	8006984 <UART_SetConfig+0x15b4>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	2b09      	cmp	r3, #9
 8006960:	d00e      	beq.n	8006980 <UART_SetConfig+0x15b0>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	2b0a      	cmp	r3, #10
 8006968:	d008      	beq.n	800697c <UART_SetConfig+0x15ac>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	2b0b      	cmp	r3, #11
 8006970:	d102      	bne.n	8006978 <UART_SetConfig+0x15a8>
 8006972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006976:	e016      	b.n	80069a6 <UART_SetConfig+0x15d6>
 8006978:	2301      	movs	r3, #1
 800697a:	e014      	b.n	80069a6 <UART_SetConfig+0x15d6>
 800697c:	2380      	movs	r3, #128	; 0x80
 800697e:	e012      	b.n	80069a6 <UART_SetConfig+0x15d6>
 8006980:	2340      	movs	r3, #64	; 0x40
 8006982:	e010      	b.n	80069a6 <UART_SetConfig+0x15d6>
 8006984:	2320      	movs	r3, #32
 8006986:	e00e      	b.n	80069a6 <UART_SetConfig+0x15d6>
 8006988:	2310      	movs	r3, #16
 800698a:	e00c      	b.n	80069a6 <UART_SetConfig+0x15d6>
 800698c:	230c      	movs	r3, #12
 800698e:	e00a      	b.n	80069a6 <UART_SetConfig+0x15d6>
 8006990:	230a      	movs	r3, #10
 8006992:	e008      	b.n	80069a6 <UART_SetConfig+0x15d6>
 8006994:	2308      	movs	r3, #8
 8006996:	e006      	b.n	80069a6 <UART_SetConfig+0x15d6>
 8006998:	2306      	movs	r3, #6
 800699a:	e004      	b.n	80069a6 <UART_SetConfig+0x15d6>
 800699c:	2304      	movs	r3, #4
 800699e:	e002      	b.n	80069a6 <UART_SetConfig+0x15d6>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e000      	b.n	80069a6 <UART_SetConfig+0x15d6>
 80069a4:	2301      	movs	r3, #1
 80069a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069aa:	005a      	lsls	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	441a      	add	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069bc:	b29b      	uxth	r3, r3
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069c0:	e2af      	b.n	8006f22 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069c2:	f7fc f89b 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 80069c6:	4602      	mov	r2, r0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d044      	beq.n	8006a5a <UART_SetConfig+0x168a>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d03e      	beq.n	8006a56 <UART_SetConfig+0x1686>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d038      	beq.n	8006a52 <UART_SetConfig+0x1682>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	2b03      	cmp	r3, #3
 80069e6:	d032      	beq.n	8006a4e <UART_SetConfig+0x167e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d02c      	beq.n	8006a4a <UART_SetConfig+0x167a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	2b05      	cmp	r3, #5
 80069f6:	d026      	beq.n	8006a46 <UART_SetConfig+0x1676>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	2b06      	cmp	r3, #6
 80069fe:	d020      	beq.n	8006a42 <UART_SetConfig+0x1672>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	2b07      	cmp	r3, #7
 8006a06:	d01a      	beq.n	8006a3e <UART_SetConfig+0x166e>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d014      	beq.n	8006a3a <UART_SetConfig+0x166a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	2b09      	cmp	r3, #9
 8006a16:	d00e      	beq.n	8006a36 <UART_SetConfig+0x1666>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	2b0a      	cmp	r3, #10
 8006a1e:	d008      	beq.n	8006a32 <UART_SetConfig+0x1662>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	2b0b      	cmp	r3, #11
 8006a26:	d102      	bne.n	8006a2e <UART_SetConfig+0x165e>
 8006a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a2c:	e016      	b.n	8006a5c <UART_SetConfig+0x168c>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e014      	b.n	8006a5c <UART_SetConfig+0x168c>
 8006a32:	2380      	movs	r3, #128	; 0x80
 8006a34:	e012      	b.n	8006a5c <UART_SetConfig+0x168c>
 8006a36:	2340      	movs	r3, #64	; 0x40
 8006a38:	e010      	b.n	8006a5c <UART_SetConfig+0x168c>
 8006a3a:	2320      	movs	r3, #32
 8006a3c:	e00e      	b.n	8006a5c <UART_SetConfig+0x168c>
 8006a3e:	2310      	movs	r3, #16
 8006a40:	e00c      	b.n	8006a5c <UART_SetConfig+0x168c>
 8006a42:	230c      	movs	r3, #12
 8006a44:	e00a      	b.n	8006a5c <UART_SetConfig+0x168c>
 8006a46:	230a      	movs	r3, #10
 8006a48:	e008      	b.n	8006a5c <UART_SetConfig+0x168c>
 8006a4a:	2308      	movs	r3, #8
 8006a4c:	e006      	b.n	8006a5c <UART_SetConfig+0x168c>
 8006a4e:	2306      	movs	r3, #6
 8006a50:	e004      	b.n	8006a5c <UART_SetConfig+0x168c>
 8006a52:	2304      	movs	r3, #4
 8006a54:	e002      	b.n	8006a5c <UART_SetConfig+0x168c>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e000      	b.n	8006a5c <UART_SetConfig+0x168c>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a60:	005a      	lsls	r2, r3, #1
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	441a      	add	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a76:	e254      	b.n	8006f22 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a78:	f107 0314 	add.w	r3, r7, #20
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fd f96b 	bl	8003d58 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d044      	beq.n	8006b16 <UART_SetConfig+0x1746>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d03e      	beq.n	8006b12 <UART_SetConfig+0x1742>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d038      	beq.n	8006b0e <UART_SetConfig+0x173e>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d032      	beq.n	8006b0a <UART_SetConfig+0x173a>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d02c      	beq.n	8006b06 <UART_SetConfig+0x1736>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	2b05      	cmp	r3, #5
 8006ab2:	d026      	beq.n	8006b02 <UART_SetConfig+0x1732>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	2b06      	cmp	r3, #6
 8006aba:	d020      	beq.n	8006afe <UART_SetConfig+0x172e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	2b07      	cmp	r3, #7
 8006ac2:	d01a      	beq.n	8006afa <UART_SetConfig+0x172a>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d014      	beq.n	8006af6 <UART_SetConfig+0x1726>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	2b09      	cmp	r3, #9
 8006ad2:	d00e      	beq.n	8006af2 <UART_SetConfig+0x1722>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	2b0a      	cmp	r3, #10
 8006ada:	d008      	beq.n	8006aee <UART_SetConfig+0x171e>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	2b0b      	cmp	r3, #11
 8006ae2:	d102      	bne.n	8006aea <UART_SetConfig+0x171a>
 8006ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ae8:	e016      	b.n	8006b18 <UART_SetConfig+0x1748>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e014      	b.n	8006b18 <UART_SetConfig+0x1748>
 8006aee:	2380      	movs	r3, #128	; 0x80
 8006af0:	e012      	b.n	8006b18 <UART_SetConfig+0x1748>
 8006af2:	2340      	movs	r3, #64	; 0x40
 8006af4:	e010      	b.n	8006b18 <UART_SetConfig+0x1748>
 8006af6:	2320      	movs	r3, #32
 8006af8:	e00e      	b.n	8006b18 <UART_SetConfig+0x1748>
 8006afa:	2310      	movs	r3, #16
 8006afc:	e00c      	b.n	8006b18 <UART_SetConfig+0x1748>
 8006afe:	230c      	movs	r3, #12
 8006b00:	e00a      	b.n	8006b18 <UART_SetConfig+0x1748>
 8006b02:	230a      	movs	r3, #10
 8006b04:	e008      	b.n	8006b18 <UART_SetConfig+0x1748>
 8006b06:	2308      	movs	r3, #8
 8006b08:	e006      	b.n	8006b18 <UART_SetConfig+0x1748>
 8006b0a:	2306      	movs	r3, #6
 8006b0c:	e004      	b.n	8006b18 <UART_SetConfig+0x1748>
 8006b0e:	2304      	movs	r3, #4
 8006b10:	e002      	b.n	8006b18 <UART_SetConfig+0x1748>
 8006b12:	2302      	movs	r3, #2
 8006b14:	e000      	b.n	8006b18 <UART_SetConfig+0x1748>
 8006b16:	2301      	movs	r3, #1
 8006b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1c:	005a      	lsls	r2, r3, #1
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	085b      	lsrs	r3, r3, #1
 8006b24:	441a      	add	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b32:	e1f6      	b.n	8006f22 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b34:	f107 0308 	add.w	r3, r7, #8
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fd fa59 	bl	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d044      	beq.n	8006bd2 <UART_SetConfig+0x1802>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d03e      	beq.n	8006bce <UART_SetConfig+0x17fe>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d038      	beq.n	8006bca <UART_SetConfig+0x17fa>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d032      	beq.n	8006bc6 <UART_SetConfig+0x17f6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d02c      	beq.n	8006bc2 <UART_SetConfig+0x17f2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	2b05      	cmp	r3, #5
 8006b6e:	d026      	beq.n	8006bbe <UART_SetConfig+0x17ee>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b06      	cmp	r3, #6
 8006b76:	d020      	beq.n	8006bba <UART_SetConfig+0x17ea>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	2b07      	cmp	r3, #7
 8006b7e:	d01a      	beq.n	8006bb6 <UART_SetConfig+0x17e6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d014      	beq.n	8006bb2 <UART_SetConfig+0x17e2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	2b09      	cmp	r3, #9
 8006b8e:	d00e      	beq.n	8006bae <UART_SetConfig+0x17de>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	2b0a      	cmp	r3, #10
 8006b96:	d008      	beq.n	8006baa <UART_SetConfig+0x17da>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	2b0b      	cmp	r3, #11
 8006b9e:	d102      	bne.n	8006ba6 <UART_SetConfig+0x17d6>
 8006ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ba4:	e016      	b.n	8006bd4 <UART_SetConfig+0x1804>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e014      	b.n	8006bd4 <UART_SetConfig+0x1804>
 8006baa:	2380      	movs	r3, #128	; 0x80
 8006bac:	e012      	b.n	8006bd4 <UART_SetConfig+0x1804>
 8006bae:	2340      	movs	r3, #64	; 0x40
 8006bb0:	e010      	b.n	8006bd4 <UART_SetConfig+0x1804>
 8006bb2:	2320      	movs	r3, #32
 8006bb4:	e00e      	b.n	8006bd4 <UART_SetConfig+0x1804>
 8006bb6:	2310      	movs	r3, #16
 8006bb8:	e00c      	b.n	8006bd4 <UART_SetConfig+0x1804>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	e00a      	b.n	8006bd4 <UART_SetConfig+0x1804>
 8006bbe:	230a      	movs	r3, #10
 8006bc0:	e008      	b.n	8006bd4 <UART_SetConfig+0x1804>
 8006bc2:	2308      	movs	r3, #8
 8006bc4:	e006      	b.n	8006bd4 <UART_SetConfig+0x1804>
 8006bc6:	2306      	movs	r3, #6
 8006bc8:	e004      	b.n	8006bd4 <UART_SetConfig+0x1804>
 8006bca:	2304      	movs	r3, #4
 8006bcc:	e002      	b.n	8006bd4 <UART_SetConfig+0x1804>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e000      	b.n	8006bd4 <UART_SetConfig+0x1804>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd8:	005a      	lsls	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	085b      	lsrs	r3, r3, #1
 8006be0:	441a      	add	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bee:	e198      	b.n	8006f22 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bf0:	4b87      	ldr	r3, [pc, #540]	; (8006e10 <UART_SetConfig+0x1a40>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d05e      	beq.n	8006cba <UART_SetConfig+0x18ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bfc:	4b84      	ldr	r3, [pc, #528]	; (8006e10 <UART_SetConfig+0x1a40>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	08db      	lsrs	r3, r3, #3
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	4a83      	ldr	r2, [pc, #524]	; (8006e14 <UART_SetConfig+0x1a44>)
 8006c08:	40da      	lsrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d044      	beq.n	8006c9c <UART_SetConfig+0x18cc>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d03e      	beq.n	8006c98 <UART_SetConfig+0x18c8>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d038      	beq.n	8006c94 <UART_SetConfig+0x18c4>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d032      	beq.n	8006c90 <UART_SetConfig+0x18c0>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d02c      	beq.n	8006c8c <UART_SetConfig+0x18bc>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	2b05      	cmp	r3, #5
 8006c38:	d026      	beq.n	8006c88 <UART_SetConfig+0x18b8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	2b06      	cmp	r3, #6
 8006c40:	d020      	beq.n	8006c84 <UART_SetConfig+0x18b4>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	2b07      	cmp	r3, #7
 8006c48:	d01a      	beq.n	8006c80 <UART_SetConfig+0x18b0>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d014      	beq.n	8006c7c <UART_SetConfig+0x18ac>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	2b09      	cmp	r3, #9
 8006c58:	d00e      	beq.n	8006c78 <UART_SetConfig+0x18a8>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	2b0a      	cmp	r3, #10
 8006c60:	d008      	beq.n	8006c74 <UART_SetConfig+0x18a4>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	2b0b      	cmp	r3, #11
 8006c68:	d102      	bne.n	8006c70 <UART_SetConfig+0x18a0>
 8006c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c6e:	e016      	b.n	8006c9e <UART_SetConfig+0x18ce>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e014      	b.n	8006c9e <UART_SetConfig+0x18ce>
 8006c74:	2380      	movs	r3, #128	; 0x80
 8006c76:	e012      	b.n	8006c9e <UART_SetConfig+0x18ce>
 8006c78:	2340      	movs	r3, #64	; 0x40
 8006c7a:	e010      	b.n	8006c9e <UART_SetConfig+0x18ce>
 8006c7c:	2320      	movs	r3, #32
 8006c7e:	e00e      	b.n	8006c9e <UART_SetConfig+0x18ce>
 8006c80:	2310      	movs	r3, #16
 8006c82:	e00c      	b.n	8006c9e <UART_SetConfig+0x18ce>
 8006c84:	230c      	movs	r3, #12
 8006c86:	e00a      	b.n	8006c9e <UART_SetConfig+0x18ce>
 8006c88:	230a      	movs	r3, #10
 8006c8a:	e008      	b.n	8006c9e <UART_SetConfig+0x18ce>
 8006c8c:	2308      	movs	r3, #8
 8006c8e:	e006      	b.n	8006c9e <UART_SetConfig+0x18ce>
 8006c90:	2306      	movs	r3, #6
 8006c92:	e004      	b.n	8006c9e <UART_SetConfig+0x18ce>
 8006c94:	2304      	movs	r3, #4
 8006c96:	e002      	b.n	8006c9e <UART_SetConfig+0x18ce>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e000      	b.n	8006c9e <UART_SetConfig+0x18ce>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca2:	005a      	lsls	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	085b      	lsrs	r3, r3, #1
 8006caa:	441a      	add	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8006cb8:	e133      	b.n	8006f22 <UART_SetConfig+0x1b52>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d043      	beq.n	8006d4a <UART_SetConfig+0x197a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d03d      	beq.n	8006d46 <UART_SetConfig+0x1976>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d037      	beq.n	8006d42 <UART_SetConfig+0x1972>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d031      	beq.n	8006d3e <UART_SetConfig+0x196e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d02b      	beq.n	8006d3a <UART_SetConfig+0x196a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	2b05      	cmp	r3, #5
 8006ce8:	d025      	beq.n	8006d36 <UART_SetConfig+0x1966>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	2b06      	cmp	r3, #6
 8006cf0:	d01f      	beq.n	8006d32 <UART_SetConfig+0x1962>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	2b07      	cmp	r3, #7
 8006cf8:	d019      	beq.n	8006d2e <UART_SetConfig+0x195e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	2b08      	cmp	r3, #8
 8006d00:	d013      	beq.n	8006d2a <UART_SetConfig+0x195a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	2b09      	cmp	r3, #9
 8006d08:	d00d      	beq.n	8006d26 <UART_SetConfig+0x1956>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	2b0a      	cmp	r3, #10
 8006d10:	d007      	beq.n	8006d22 <UART_SetConfig+0x1952>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	2b0b      	cmp	r3, #11
 8006d18:	d101      	bne.n	8006d1e <UART_SetConfig+0x194e>
 8006d1a:	4b3f      	ldr	r3, [pc, #252]	; (8006e18 <UART_SetConfig+0x1a48>)
 8006d1c:	e016      	b.n	8006d4c <UART_SetConfig+0x197c>
 8006d1e:	4b3f      	ldr	r3, [pc, #252]	; (8006e1c <UART_SetConfig+0x1a4c>)
 8006d20:	e014      	b.n	8006d4c <UART_SetConfig+0x197c>
 8006d22:	4b3f      	ldr	r3, [pc, #252]	; (8006e20 <UART_SetConfig+0x1a50>)
 8006d24:	e012      	b.n	8006d4c <UART_SetConfig+0x197c>
 8006d26:	4b3f      	ldr	r3, [pc, #252]	; (8006e24 <UART_SetConfig+0x1a54>)
 8006d28:	e010      	b.n	8006d4c <UART_SetConfig+0x197c>
 8006d2a:	4b3f      	ldr	r3, [pc, #252]	; (8006e28 <UART_SetConfig+0x1a58>)
 8006d2c:	e00e      	b.n	8006d4c <UART_SetConfig+0x197c>
 8006d2e:	4b3f      	ldr	r3, [pc, #252]	; (8006e2c <UART_SetConfig+0x1a5c>)
 8006d30:	e00c      	b.n	8006d4c <UART_SetConfig+0x197c>
 8006d32:	4b3f      	ldr	r3, [pc, #252]	; (8006e30 <UART_SetConfig+0x1a60>)
 8006d34:	e00a      	b.n	8006d4c <UART_SetConfig+0x197c>
 8006d36:	4b3f      	ldr	r3, [pc, #252]	; (8006e34 <UART_SetConfig+0x1a64>)
 8006d38:	e008      	b.n	8006d4c <UART_SetConfig+0x197c>
 8006d3a:	4b3f      	ldr	r3, [pc, #252]	; (8006e38 <UART_SetConfig+0x1a68>)
 8006d3c:	e006      	b.n	8006d4c <UART_SetConfig+0x197c>
 8006d3e:	4b3f      	ldr	r3, [pc, #252]	; (8006e3c <UART_SetConfig+0x1a6c>)
 8006d40:	e004      	b.n	8006d4c <UART_SetConfig+0x197c>
 8006d42:	4b3f      	ldr	r3, [pc, #252]	; (8006e40 <UART_SetConfig+0x1a70>)
 8006d44:	e002      	b.n	8006d4c <UART_SetConfig+0x197c>
 8006d46:	4b33      	ldr	r3, [pc, #204]	; (8006e14 <UART_SetConfig+0x1a44>)
 8006d48:	e000      	b.n	8006d4c <UART_SetConfig+0x197c>
 8006d4a:	4b34      	ldr	r3, [pc, #208]	; (8006e1c <UART_SetConfig+0x1a4c>)
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	6852      	ldr	r2, [r2, #4]
 8006d50:	0852      	lsrs	r2, r2, #1
 8006d52:	441a      	add	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d60:	e0df      	b.n	8006f22 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d045      	beq.n	8006df6 <UART_SetConfig+0x1a26>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d03f      	beq.n	8006df2 <UART_SetConfig+0x1a22>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d039      	beq.n	8006dee <UART_SetConfig+0x1a1e>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d033      	beq.n	8006dea <UART_SetConfig+0x1a1a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d02d      	beq.n	8006de6 <UART_SetConfig+0x1a16>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	2b05      	cmp	r3, #5
 8006d90:	d027      	beq.n	8006de2 <UART_SetConfig+0x1a12>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	2b06      	cmp	r3, #6
 8006d98:	d021      	beq.n	8006dde <UART_SetConfig+0x1a0e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	2b07      	cmp	r3, #7
 8006da0:	d01b      	beq.n	8006dda <UART_SetConfig+0x1a0a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d015      	beq.n	8006dd6 <UART_SetConfig+0x1a06>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	2b09      	cmp	r3, #9
 8006db0:	d00f      	beq.n	8006dd2 <UART_SetConfig+0x1a02>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	2b0a      	cmp	r3, #10
 8006db8:	d008      	beq.n	8006dcc <UART_SetConfig+0x19fc>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	2b0b      	cmp	r3, #11
 8006dc0:	d102      	bne.n	8006dc8 <UART_SetConfig+0x19f8>
 8006dc2:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006dc6:	e017      	b.n	8006df8 <UART_SetConfig+0x1a28>
 8006dc8:	4b18      	ldr	r3, [pc, #96]	; (8006e2c <UART_SetConfig+0x1a5c>)
 8006dca:	e015      	b.n	8006df8 <UART_SetConfig+0x1a28>
 8006dcc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006dd0:	e012      	b.n	8006df8 <UART_SetConfig+0x1a28>
 8006dd2:	4b1c      	ldr	r3, [pc, #112]	; (8006e44 <UART_SetConfig+0x1a74>)
 8006dd4:	e010      	b.n	8006df8 <UART_SetConfig+0x1a28>
 8006dd6:	4b1c      	ldr	r3, [pc, #112]	; (8006e48 <UART_SetConfig+0x1a78>)
 8006dd8:	e00e      	b.n	8006df8 <UART_SetConfig+0x1a28>
 8006dda:	4b0f      	ldr	r3, [pc, #60]	; (8006e18 <UART_SetConfig+0x1a48>)
 8006ddc:	e00c      	b.n	8006df8 <UART_SetConfig+0x1a28>
 8006dde:	4b1b      	ldr	r3, [pc, #108]	; (8006e4c <UART_SetConfig+0x1a7c>)
 8006de0:	e00a      	b.n	8006df8 <UART_SetConfig+0x1a28>
 8006de2:	4b1b      	ldr	r3, [pc, #108]	; (8006e50 <UART_SetConfig+0x1a80>)
 8006de4:	e008      	b.n	8006df8 <UART_SetConfig+0x1a28>
 8006de6:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <UART_SetConfig+0x1a50>)
 8006de8:	e006      	b.n	8006df8 <UART_SetConfig+0x1a28>
 8006dea:	4b1a      	ldr	r3, [pc, #104]	; (8006e54 <UART_SetConfig+0x1a84>)
 8006dec:	e004      	b.n	8006df8 <UART_SetConfig+0x1a28>
 8006dee:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <UART_SetConfig+0x1a54>)
 8006df0:	e002      	b.n	8006df8 <UART_SetConfig+0x1a28>
 8006df2:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <UART_SetConfig+0x1a58>)
 8006df4:	e000      	b.n	8006df8 <UART_SetConfig+0x1a28>
 8006df6:	4b0d      	ldr	r3, [pc, #52]	; (8006e2c <UART_SetConfig+0x1a5c>)
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	6852      	ldr	r2, [r2, #4]
 8006dfc:	0852      	lsrs	r2, r2, #1
 8006dfe:	441a      	add	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e0c:	e089      	b.n	8006f22 <UART_SetConfig+0x1b52>
 8006e0e:	bf00      	nop
 8006e10:	58024400 	.word	0x58024400
 8006e14:	03d09000 	.word	0x03d09000
 8006e18:	0007a120 	.word	0x0007a120
 8006e1c:	07a12000 	.word	0x07a12000
 8006e20:	000f4240 	.word	0x000f4240
 8006e24:	001e8480 	.word	0x001e8480
 8006e28:	003d0900 	.word	0x003d0900
 8006e2c:	007a1200 	.word	0x007a1200
 8006e30:	00a2c2aa 	.word	0x00a2c2aa
 8006e34:	00c35000 	.word	0x00c35000
 8006e38:	00f42400 	.word	0x00f42400
 8006e3c:	01458554 	.word	0x01458554
 8006e40:	01e84800 	.word	0x01e84800
 8006e44:	0001e848 	.word	0x0001e848
 8006e48:	0003d090 	.word	0x0003d090
 8006e4c:	000a2c2a 	.word	0x000a2c2a
 8006e50:	000c3500 	.word	0x000c3500
 8006e54:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d04f      	beq.n	8006f00 <UART_SetConfig+0x1b30>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d048      	beq.n	8006efa <UART_SetConfig+0x1b2a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d041      	beq.n	8006ef4 <UART_SetConfig+0x1b24>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d03a      	beq.n	8006eee <UART_SetConfig+0x1b1e>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d033      	beq.n	8006ee8 <UART_SetConfig+0x1b18>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	2b05      	cmp	r3, #5
 8006e86:	d02c      	beq.n	8006ee2 <UART_SetConfig+0x1b12>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	2b06      	cmp	r3, #6
 8006e8e:	d025      	beq.n	8006edc <UART_SetConfig+0x1b0c>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	2b07      	cmp	r3, #7
 8006e96:	d01e      	beq.n	8006ed6 <UART_SetConfig+0x1b06>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d017      	beq.n	8006ed0 <UART_SetConfig+0x1b00>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	2b09      	cmp	r3, #9
 8006ea6:	d010      	beq.n	8006eca <UART_SetConfig+0x1afa>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	2b0a      	cmp	r3, #10
 8006eae:	d009      	beq.n	8006ec4 <UART_SetConfig+0x1af4>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	2b0b      	cmp	r3, #11
 8006eb6:	d102      	bne.n	8006ebe <UART_SetConfig+0x1aee>
 8006eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ebc:	e022      	b.n	8006f04 <UART_SetConfig+0x1b34>
 8006ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ec2:	e01f      	b.n	8006f04 <UART_SetConfig+0x1b34>
 8006ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ec8:	e01c      	b.n	8006f04 <UART_SetConfig+0x1b34>
 8006eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ece:	e019      	b.n	8006f04 <UART_SetConfig+0x1b34>
 8006ed0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ed4:	e016      	b.n	8006f04 <UART_SetConfig+0x1b34>
 8006ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006eda:	e013      	b.n	8006f04 <UART_SetConfig+0x1b34>
 8006edc:	f241 5354 	movw	r3, #5460	; 0x1554
 8006ee0:	e010      	b.n	8006f04 <UART_SetConfig+0x1b34>
 8006ee2:	f641 1398 	movw	r3, #6552	; 0x1998
 8006ee6:	e00d      	b.n	8006f04 <UART_SetConfig+0x1b34>
 8006ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006eec:	e00a      	b.n	8006f04 <UART_SetConfig+0x1b34>
 8006eee:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006ef2:	e007      	b.n	8006f04 <UART_SetConfig+0x1b34>
 8006ef4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ef8:	e004      	b.n	8006f04 <UART_SetConfig+0x1b34>
 8006efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006efe:	e001      	b.n	8006f04 <UART_SetConfig+0x1b34>
 8006f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6852      	ldr	r2, [r2, #4]
 8006f08:	0852      	lsrs	r2, r2, #1
 8006f0a:	441a      	add	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f18:	e003      	b.n	8006f22 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8006f20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	2b0f      	cmp	r3, #15
 8006f26:	d916      	bls.n	8006f56 <UART_SetConfig+0x1b86>
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f2e:	d212      	bcs.n	8006f56 <UART_SetConfig+0x1b86>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f023 030f 	bic.w	r3, r3, #15
 8006f38:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	085b      	lsrs	r3, r3, #1
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006f52:	60da      	str	r2, [r3, #12]
 8006f54:	e3a1      	b.n	800769a <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f5c:	e39d      	b.n	800769a <UART_SetConfig+0x22ca>
    }
  }
  else
  {
    switch (clocksource)
 8006f5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	f200 8386 	bhi.w	8007674 <UART_SetConfig+0x22a4>
 8006f68:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <UART_SetConfig+0x1ba0>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08007075 	.word	0x08007075
 8006f74:	08007129 	.word	0x08007129
 8006f78:	08007675 	.word	0x08007675
 8006f7c:	08007675 	.word	0x08007675
 8006f80:	080071dd 	.word	0x080071dd
 8006f84:	08007675 	.word	0x08007675
 8006f88:	08007675 	.word	0x08007675
 8006f8c:	08007675 	.word	0x08007675
 8006f90:	08007297 	.word	0x08007297
 8006f94:	08007675 	.word	0x08007675
 8006f98:	08007675 	.word	0x08007675
 8006f9c:	08007675 	.word	0x08007675
 8006fa0:	08007675 	.word	0x08007675
 8006fa4:	08007675 	.word	0x08007675
 8006fa8:	08007675 	.word	0x08007675
 8006fac:	08007675 	.word	0x08007675
 8006fb0:	08007351 	.word	0x08007351
 8006fb4:	08007675 	.word	0x08007675
 8006fb8:	08007675 	.word	0x08007675
 8006fbc:	08007675 	.word	0x08007675
 8006fc0:	08007675 	.word	0x08007675
 8006fc4:	08007675 	.word	0x08007675
 8006fc8:	08007675 	.word	0x08007675
 8006fcc:	08007675 	.word	0x08007675
 8006fd0:	08007675 	.word	0x08007675
 8006fd4:	08007675 	.word	0x08007675
 8006fd8:	08007675 	.word	0x08007675
 8006fdc:	08007675 	.word	0x08007675
 8006fe0:	08007675 	.word	0x08007675
 8006fe4:	08007675 	.word	0x08007675
 8006fe8:	08007675 	.word	0x08007675
 8006fec:	08007675 	.word	0x08007675
 8006ff0:	080074c1 	.word	0x080074c1
 8006ff4:	08007675 	.word	0x08007675
 8006ff8:	08007675 	.word	0x08007675
 8006ffc:	08007675 	.word	0x08007675
 8007000:	08007675 	.word	0x08007675
 8007004:	08007675 	.word	0x08007675
 8007008:	08007675 	.word	0x08007675
 800700c:	08007675 	.word	0x08007675
 8007010:	08007675 	.word	0x08007675
 8007014:	08007675 	.word	0x08007675
 8007018:	08007675 	.word	0x08007675
 800701c:	08007675 	.word	0x08007675
 8007020:	08007675 	.word	0x08007675
 8007024:	08007675 	.word	0x08007675
 8007028:	08007675 	.word	0x08007675
 800702c:	08007675 	.word	0x08007675
 8007030:	08007675 	.word	0x08007675
 8007034:	08007675 	.word	0x08007675
 8007038:	08007675 	.word	0x08007675
 800703c:	08007675 	.word	0x08007675
 8007040:	08007675 	.word	0x08007675
 8007044:	08007675 	.word	0x08007675
 8007048:	08007675 	.word	0x08007675
 800704c:	08007675 	.word	0x08007675
 8007050:	08007675 	.word	0x08007675
 8007054:	08007675 	.word	0x08007675
 8007058:	08007675 	.word	0x08007675
 800705c:	08007675 	.word	0x08007675
 8007060:	08007675 	.word	0x08007675
 8007064:	08007675 	.word	0x08007675
 8007068:	08007675 	.word	0x08007675
 800706c:	08007675 	.word	0x08007675
 8007070:	080075b5 	.word	0x080075b5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007074:	f7fb fd2c 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8007078:	4602      	mov	r2, r0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	d044      	beq.n	800710c <UART_SetConfig+0x1d3c>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	2b01      	cmp	r3, #1
 8007088:	d03e      	beq.n	8007108 <UART_SetConfig+0x1d38>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	2b02      	cmp	r3, #2
 8007090:	d038      	beq.n	8007104 <UART_SetConfig+0x1d34>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	2b03      	cmp	r3, #3
 8007098:	d032      	beq.n	8007100 <UART_SetConfig+0x1d30>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d02c      	beq.n	80070fc <UART_SetConfig+0x1d2c>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	2b05      	cmp	r3, #5
 80070a8:	d026      	beq.n	80070f8 <UART_SetConfig+0x1d28>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	2b06      	cmp	r3, #6
 80070b0:	d020      	beq.n	80070f4 <UART_SetConfig+0x1d24>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	2b07      	cmp	r3, #7
 80070b8:	d01a      	beq.n	80070f0 <UART_SetConfig+0x1d20>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d014      	beq.n	80070ec <UART_SetConfig+0x1d1c>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	2b09      	cmp	r3, #9
 80070c8:	d00e      	beq.n	80070e8 <UART_SetConfig+0x1d18>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	2b0a      	cmp	r3, #10
 80070d0:	d008      	beq.n	80070e4 <UART_SetConfig+0x1d14>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	2b0b      	cmp	r3, #11
 80070d8:	d102      	bne.n	80070e0 <UART_SetConfig+0x1d10>
 80070da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070de:	e016      	b.n	800710e <UART_SetConfig+0x1d3e>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e014      	b.n	800710e <UART_SetConfig+0x1d3e>
 80070e4:	2380      	movs	r3, #128	; 0x80
 80070e6:	e012      	b.n	800710e <UART_SetConfig+0x1d3e>
 80070e8:	2340      	movs	r3, #64	; 0x40
 80070ea:	e010      	b.n	800710e <UART_SetConfig+0x1d3e>
 80070ec:	2320      	movs	r3, #32
 80070ee:	e00e      	b.n	800710e <UART_SetConfig+0x1d3e>
 80070f0:	2310      	movs	r3, #16
 80070f2:	e00c      	b.n	800710e <UART_SetConfig+0x1d3e>
 80070f4:	230c      	movs	r3, #12
 80070f6:	e00a      	b.n	800710e <UART_SetConfig+0x1d3e>
 80070f8:	230a      	movs	r3, #10
 80070fa:	e008      	b.n	800710e <UART_SetConfig+0x1d3e>
 80070fc:	2308      	movs	r3, #8
 80070fe:	e006      	b.n	800710e <UART_SetConfig+0x1d3e>
 8007100:	2306      	movs	r3, #6
 8007102:	e004      	b.n	800710e <UART_SetConfig+0x1d3e>
 8007104:	2304      	movs	r3, #4
 8007106:	e002      	b.n	800710e <UART_SetConfig+0x1d3e>
 8007108:	2302      	movs	r3, #2
 800710a:	e000      	b.n	800710e <UART_SetConfig+0x1d3e>
 800710c:	2301      	movs	r3, #1
 800710e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	085b      	lsrs	r3, r3, #1
 8007118:	441a      	add	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007122:	b29b      	uxth	r3, r3
 8007124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007126:	e2a9      	b.n	800767c <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007128:	f7fb fce8 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 800712c:	4602      	mov	r2, r0
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	2b00      	cmp	r3, #0
 8007134:	d044      	beq.n	80071c0 <UART_SetConfig+0x1df0>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	2b01      	cmp	r3, #1
 800713c:	d03e      	beq.n	80071bc <UART_SetConfig+0x1dec>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	2b02      	cmp	r3, #2
 8007144:	d038      	beq.n	80071b8 <UART_SetConfig+0x1de8>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	2b03      	cmp	r3, #3
 800714c:	d032      	beq.n	80071b4 <UART_SetConfig+0x1de4>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	2b04      	cmp	r3, #4
 8007154:	d02c      	beq.n	80071b0 <UART_SetConfig+0x1de0>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	2b05      	cmp	r3, #5
 800715c:	d026      	beq.n	80071ac <UART_SetConfig+0x1ddc>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	2b06      	cmp	r3, #6
 8007164:	d020      	beq.n	80071a8 <UART_SetConfig+0x1dd8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	2b07      	cmp	r3, #7
 800716c:	d01a      	beq.n	80071a4 <UART_SetConfig+0x1dd4>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	2b08      	cmp	r3, #8
 8007174:	d014      	beq.n	80071a0 <UART_SetConfig+0x1dd0>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	2b09      	cmp	r3, #9
 800717c:	d00e      	beq.n	800719c <UART_SetConfig+0x1dcc>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	2b0a      	cmp	r3, #10
 8007184:	d008      	beq.n	8007198 <UART_SetConfig+0x1dc8>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	2b0b      	cmp	r3, #11
 800718c:	d102      	bne.n	8007194 <UART_SetConfig+0x1dc4>
 800718e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007192:	e016      	b.n	80071c2 <UART_SetConfig+0x1df2>
 8007194:	2301      	movs	r3, #1
 8007196:	e014      	b.n	80071c2 <UART_SetConfig+0x1df2>
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	e012      	b.n	80071c2 <UART_SetConfig+0x1df2>
 800719c:	2340      	movs	r3, #64	; 0x40
 800719e:	e010      	b.n	80071c2 <UART_SetConfig+0x1df2>
 80071a0:	2320      	movs	r3, #32
 80071a2:	e00e      	b.n	80071c2 <UART_SetConfig+0x1df2>
 80071a4:	2310      	movs	r3, #16
 80071a6:	e00c      	b.n	80071c2 <UART_SetConfig+0x1df2>
 80071a8:	230c      	movs	r3, #12
 80071aa:	e00a      	b.n	80071c2 <UART_SetConfig+0x1df2>
 80071ac:	230a      	movs	r3, #10
 80071ae:	e008      	b.n	80071c2 <UART_SetConfig+0x1df2>
 80071b0:	2308      	movs	r3, #8
 80071b2:	e006      	b.n	80071c2 <UART_SetConfig+0x1df2>
 80071b4:	2306      	movs	r3, #6
 80071b6:	e004      	b.n	80071c2 <UART_SetConfig+0x1df2>
 80071b8:	2304      	movs	r3, #4
 80071ba:	e002      	b.n	80071c2 <UART_SetConfig+0x1df2>
 80071bc:	2302      	movs	r3, #2
 80071be:	e000      	b.n	80071c2 <UART_SetConfig+0x1df2>
 80071c0:	2301      	movs	r3, #1
 80071c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	441a      	add	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071da:	e24f      	b.n	800767c <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071dc:	f107 0314 	add.w	r3, r7, #20
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fc fdb9 	bl	8003d58 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d044      	beq.n	800727a <UART_SetConfig+0x1eaa>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d03e      	beq.n	8007276 <UART_SetConfig+0x1ea6>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d038      	beq.n	8007272 <UART_SetConfig+0x1ea2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	2b03      	cmp	r3, #3
 8007206:	d032      	beq.n	800726e <UART_SetConfig+0x1e9e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	2b04      	cmp	r3, #4
 800720e:	d02c      	beq.n	800726a <UART_SetConfig+0x1e9a>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	2b05      	cmp	r3, #5
 8007216:	d026      	beq.n	8007266 <UART_SetConfig+0x1e96>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	2b06      	cmp	r3, #6
 800721e:	d020      	beq.n	8007262 <UART_SetConfig+0x1e92>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	2b07      	cmp	r3, #7
 8007226:	d01a      	beq.n	800725e <UART_SetConfig+0x1e8e>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	2b08      	cmp	r3, #8
 800722e:	d014      	beq.n	800725a <UART_SetConfig+0x1e8a>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	2b09      	cmp	r3, #9
 8007236:	d00e      	beq.n	8007256 <UART_SetConfig+0x1e86>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	2b0a      	cmp	r3, #10
 800723e:	d008      	beq.n	8007252 <UART_SetConfig+0x1e82>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	2b0b      	cmp	r3, #11
 8007246:	d102      	bne.n	800724e <UART_SetConfig+0x1e7e>
 8007248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800724c:	e016      	b.n	800727c <UART_SetConfig+0x1eac>
 800724e:	2301      	movs	r3, #1
 8007250:	e014      	b.n	800727c <UART_SetConfig+0x1eac>
 8007252:	2380      	movs	r3, #128	; 0x80
 8007254:	e012      	b.n	800727c <UART_SetConfig+0x1eac>
 8007256:	2340      	movs	r3, #64	; 0x40
 8007258:	e010      	b.n	800727c <UART_SetConfig+0x1eac>
 800725a:	2320      	movs	r3, #32
 800725c:	e00e      	b.n	800727c <UART_SetConfig+0x1eac>
 800725e:	2310      	movs	r3, #16
 8007260:	e00c      	b.n	800727c <UART_SetConfig+0x1eac>
 8007262:	230c      	movs	r3, #12
 8007264:	e00a      	b.n	800727c <UART_SetConfig+0x1eac>
 8007266:	230a      	movs	r3, #10
 8007268:	e008      	b.n	800727c <UART_SetConfig+0x1eac>
 800726a:	2308      	movs	r3, #8
 800726c:	e006      	b.n	800727c <UART_SetConfig+0x1eac>
 800726e:	2306      	movs	r3, #6
 8007270:	e004      	b.n	800727c <UART_SetConfig+0x1eac>
 8007272:	2304      	movs	r3, #4
 8007274:	e002      	b.n	800727c <UART_SetConfig+0x1eac>
 8007276:	2302      	movs	r3, #2
 8007278:	e000      	b.n	800727c <UART_SetConfig+0x1eac>
 800727a:	2301      	movs	r3, #1
 800727c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	085b      	lsrs	r3, r3, #1
 8007286:	441a      	add	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007290:	b29b      	uxth	r3, r3
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007294:	e1f2      	b.n	800767c <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007296:	f107 0308 	add.w	r3, r7, #8
 800729a:	4618      	mov	r0, r3
 800729c:	f7fc fea8 	bl	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d044      	beq.n	8007334 <UART_SetConfig+0x1f64>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d03e      	beq.n	8007330 <UART_SetConfig+0x1f60>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d038      	beq.n	800732c <UART_SetConfig+0x1f5c>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d032      	beq.n	8007328 <UART_SetConfig+0x1f58>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d02c      	beq.n	8007324 <UART_SetConfig+0x1f54>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d026      	beq.n	8007320 <UART_SetConfig+0x1f50>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	2b06      	cmp	r3, #6
 80072d8:	d020      	beq.n	800731c <UART_SetConfig+0x1f4c>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	2b07      	cmp	r3, #7
 80072e0:	d01a      	beq.n	8007318 <UART_SetConfig+0x1f48>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	d014      	beq.n	8007314 <UART_SetConfig+0x1f44>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	2b09      	cmp	r3, #9
 80072f0:	d00e      	beq.n	8007310 <UART_SetConfig+0x1f40>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	2b0a      	cmp	r3, #10
 80072f8:	d008      	beq.n	800730c <UART_SetConfig+0x1f3c>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	2b0b      	cmp	r3, #11
 8007300:	d102      	bne.n	8007308 <UART_SetConfig+0x1f38>
 8007302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007306:	e016      	b.n	8007336 <UART_SetConfig+0x1f66>
 8007308:	2301      	movs	r3, #1
 800730a:	e014      	b.n	8007336 <UART_SetConfig+0x1f66>
 800730c:	2380      	movs	r3, #128	; 0x80
 800730e:	e012      	b.n	8007336 <UART_SetConfig+0x1f66>
 8007310:	2340      	movs	r3, #64	; 0x40
 8007312:	e010      	b.n	8007336 <UART_SetConfig+0x1f66>
 8007314:	2320      	movs	r3, #32
 8007316:	e00e      	b.n	8007336 <UART_SetConfig+0x1f66>
 8007318:	2310      	movs	r3, #16
 800731a:	e00c      	b.n	8007336 <UART_SetConfig+0x1f66>
 800731c:	230c      	movs	r3, #12
 800731e:	e00a      	b.n	8007336 <UART_SetConfig+0x1f66>
 8007320:	230a      	movs	r3, #10
 8007322:	e008      	b.n	8007336 <UART_SetConfig+0x1f66>
 8007324:	2308      	movs	r3, #8
 8007326:	e006      	b.n	8007336 <UART_SetConfig+0x1f66>
 8007328:	2306      	movs	r3, #6
 800732a:	e004      	b.n	8007336 <UART_SetConfig+0x1f66>
 800732c:	2304      	movs	r3, #4
 800732e:	e002      	b.n	8007336 <UART_SetConfig+0x1f66>
 8007330:	2302      	movs	r3, #2
 8007332:	e000      	b.n	8007336 <UART_SetConfig+0x1f66>
 8007334:	2301      	movs	r3, #1
 8007336:	fbb2 f2f3 	udiv	r2, r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	441a      	add	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	fbb2 f3f3 	udiv	r3, r2, r3
 800734a:	b29b      	uxth	r3, r3
 800734c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800734e:	e195      	b.n	800767c <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007350:	4b87      	ldr	r3, [pc, #540]	; (8007570 <UART_SetConfig+0x21a0>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0320 	and.w	r3, r3, #32
 8007358:	2b00      	cmp	r3, #0
 800735a:	d05d      	beq.n	8007418 <UART_SetConfig+0x2048>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800735c:	4b84      	ldr	r3, [pc, #528]	; (8007570 <UART_SetConfig+0x21a0>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	08db      	lsrs	r3, r3, #3
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	4a83      	ldr	r2, [pc, #524]	; (8007574 <UART_SetConfig+0x21a4>)
 8007368:	40da      	lsrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	d044      	beq.n	80073fc <UART_SetConfig+0x202c>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	2b01      	cmp	r3, #1
 8007378:	d03e      	beq.n	80073f8 <UART_SetConfig+0x2028>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	2b02      	cmp	r3, #2
 8007380:	d038      	beq.n	80073f4 <UART_SetConfig+0x2024>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	2b03      	cmp	r3, #3
 8007388:	d032      	beq.n	80073f0 <UART_SetConfig+0x2020>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	2b04      	cmp	r3, #4
 8007390:	d02c      	beq.n	80073ec <UART_SetConfig+0x201c>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	2b05      	cmp	r3, #5
 8007398:	d026      	beq.n	80073e8 <UART_SetConfig+0x2018>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	2b06      	cmp	r3, #6
 80073a0:	d020      	beq.n	80073e4 <UART_SetConfig+0x2014>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b07      	cmp	r3, #7
 80073a8:	d01a      	beq.n	80073e0 <UART_SetConfig+0x2010>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d014      	beq.n	80073dc <UART_SetConfig+0x200c>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	2b09      	cmp	r3, #9
 80073b8:	d00e      	beq.n	80073d8 <UART_SetConfig+0x2008>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	2b0a      	cmp	r3, #10
 80073c0:	d008      	beq.n	80073d4 <UART_SetConfig+0x2004>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	2b0b      	cmp	r3, #11
 80073c8:	d102      	bne.n	80073d0 <UART_SetConfig+0x2000>
 80073ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073ce:	e016      	b.n	80073fe <UART_SetConfig+0x202e>
 80073d0:	2301      	movs	r3, #1
 80073d2:	e014      	b.n	80073fe <UART_SetConfig+0x202e>
 80073d4:	2380      	movs	r3, #128	; 0x80
 80073d6:	e012      	b.n	80073fe <UART_SetConfig+0x202e>
 80073d8:	2340      	movs	r3, #64	; 0x40
 80073da:	e010      	b.n	80073fe <UART_SetConfig+0x202e>
 80073dc:	2320      	movs	r3, #32
 80073de:	e00e      	b.n	80073fe <UART_SetConfig+0x202e>
 80073e0:	2310      	movs	r3, #16
 80073e2:	e00c      	b.n	80073fe <UART_SetConfig+0x202e>
 80073e4:	230c      	movs	r3, #12
 80073e6:	e00a      	b.n	80073fe <UART_SetConfig+0x202e>
 80073e8:	230a      	movs	r3, #10
 80073ea:	e008      	b.n	80073fe <UART_SetConfig+0x202e>
 80073ec:	2308      	movs	r3, #8
 80073ee:	e006      	b.n	80073fe <UART_SetConfig+0x202e>
 80073f0:	2306      	movs	r3, #6
 80073f2:	e004      	b.n	80073fe <UART_SetConfig+0x202e>
 80073f4:	2304      	movs	r3, #4
 80073f6:	e002      	b.n	80073fe <UART_SetConfig+0x202e>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e000      	b.n	80073fe <UART_SetConfig+0x202e>
 80073fc:	2301      	movs	r3, #1
 80073fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	085b      	lsrs	r3, r3, #1
 8007408:	441a      	add	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007412:	b29b      	uxth	r3, r3
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8007416:	e131      	b.n	800767c <UART_SetConfig+0x22ac>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	2b00      	cmp	r3, #0
 800741e:	d043      	beq.n	80074a8 <UART_SetConfig+0x20d8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	2b01      	cmp	r3, #1
 8007426:	d03d      	beq.n	80074a4 <UART_SetConfig+0x20d4>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	2b02      	cmp	r3, #2
 800742e:	d037      	beq.n	80074a0 <UART_SetConfig+0x20d0>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	2b03      	cmp	r3, #3
 8007436:	d031      	beq.n	800749c <UART_SetConfig+0x20cc>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	2b04      	cmp	r3, #4
 800743e:	d02b      	beq.n	8007498 <UART_SetConfig+0x20c8>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	2b05      	cmp	r3, #5
 8007446:	d025      	beq.n	8007494 <UART_SetConfig+0x20c4>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	2b06      	cmp	r3, #6
 800744e:	d01f      	beq.n	8007490 <UART_SetConfig+0x20c0>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	2b07      	cmp	r3, #7
 8007456:	d019      	beq.n	800748c <UART_SetConfig+0x20bc>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	2b08      	cmp	r3, #8
 800745e:	d013      	beq.n	8007488 <UART_SetConfig+0x20b8>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	2b09      	cmp	r3, #9
 8007466:	d00d      	beq.n	8007484 <UART_SetConfig+0x20b4>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	2b0a      	cmp	r3, #10
 800746e:	d007      	beq.n	8007480 <UART_SetConfig+0x20b0>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	2b0b      	cmp	r3, #11
 8007476:	d101      	bne.n	800747c <UART_SetConfig+0x20ac>
 8007478:	4b3f      	ldr	r3, [pc, #252]	; (8007578 <UART_SetConfig+0x21a8>)
 800747a:	e016      	b.n	80074aa <UART_SetConfig+0x20da>
 800747c:	4b3d      	ldr	r3, [pc, #244]	; (8007574 <UART_SetConfig+0x21a4>)
 800747e:	e014      	b.n	80074aa <UART_SetConfig+0x20da>
 8007480:	4b3e      	ldr	r3, [pc, #248]	; (800757c <UART_SetConfig+0x21ac>)
 8007482:	e012      	b.n	80074aa <UART_SetConfig+0x20da>
 8007484:	4b3e      	ldr	r3, [pc, #248]	; (8007580 <UART_SetConfig+0x21b0>)
 8007486:	e010      	b.n	80074aa <UART_SetConfig+0x20da>
 8007488:	4b3e      	ldr	r3, [pc, #248]	; (8007584 <UART_SetConfig+0x21b4>)
 800748a:	e00e      	b.n	80074aa <UART_SetConfig+0x20da>
 800748c:	4b3e      	ldr	r3, [pc, #248]	; (8007588 <UART_SetConfig+0x21b8>)
 800748e:	e00c      	b.n	80074aa <UART_SetConfig+0x20da>
 8007490:	4b3e      	ldr	r3, [pc, #248]	; (800758c <UART_SetConfig+0x21bc>)
 8007492:	e00a      	b.n	80074aa <UART_SetConfig+0x20da>
 8007494:	4b3e      	ldr	r3, [pc, #248]	; (8007590 <UART_SetConfig+0x21c0>)
 8007496:	e008      	b.n	80074aa <UART_SetConfig+0x20da>
 8007498:	4b3e      	ldr	r3, [pc, #248]	; (8007594 <UART_SetConfig+0x21c4>)
 800749a:	e006      	b.n	80074aa <UART_SetConfig+0x20da>
 800749c:	4b3e      	ldr	r3, [pc, #248]	; (8007598 <UART_SetConfig+0x21c8>)
 800749e:	e004      	b.n	80074aa <UART_SetConfig+0x20da>
 80074a0:	4b3e      	ldr	r3, [pc, #248]	; (800759c <UART_SetConfig+0x21cc>)
 80074a2:	e002      	b.n	80074aa <UART_SetConfig+0x20da>
 80074a4:	4b3e      	ldr	r3, [pc, #248]	; (80075a0 <UART_SetConfig+0x21d0>)
 80074a6:	e000      	b.n	80074aa <UART_SetConfig+0x20da>
 80074a8:	4b32      	ldr	r3, [pc, #200]	; (8007574 <UART_SetConfig+0x21a4>)
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6852      	ldr	r2, [r2, #4]
 80074ae:	0852      	lsrs	r2, r2, #1
 80074b0:	441a      	add	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074be:	e0dd      	b.n	800767c <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d046      	beq.n	8007556 <UART_SetConfig+0x2186>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d040      	beq.n	8007552 <UART_SetConfig+0x2182>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d03a      	beq.n	800754e <UART_SetConfig+0x217e>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d034      	beq.n	800754a <UART_SetConfig+0x217a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d02e      	beq.n	8007546 <UART_SetConfig+0x2176>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	2b05      	cmp	r3, #5
 80074ee:	d028      	beq.n	8007542 <UART_SetConfig+0x2172>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b06      	cmp	r3, #6
 80074f6:	d022      	beq.n	800753e <UART_SetConfig+0x216e>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2b07      	cmp	r3, #7
 80074fe:	d01c      	beq.n	800753a <UART_SetConfig+0x216a>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	2b08      	cmp	r3, #8
 8007506:	d016      	beq.n	8007536 <UART_SetConfig+0x2166>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b09      	cmp	r3, #9
 800750e:	d00f      	beq.n	8007530 <UART_SetConfig+0x2160>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b0a      	cmp	r3, #10
 8007516:	d008      	beq.n	800752a <UART_SetConfig+0x215a>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	2b0b      	cmp	r3, #11
 800751e:	d102      	bne.n	8007526 <UART_SetConfig+0x2156>
 8007520:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007524:	e018      	b.n	8007558 <UART_SetConfig+0x2188>
 8007526:	4b18      	ldr	r3, [pc, #96]	; (8007588 <UART_SetConfig+0x21b8>)
 8007528:	e016      	b.n	8007558 <UART_SetConfig+0x2188>
 800752a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800752e:	e013      	b.n	8007558 <UART_SetConfig+0x2188>
 8007530:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007534:	e010      	b.n	8007558 <UART_SetConfig+0x2188>
 8007536:	4b1b      	ldr	r3, [pc, #108]	; (80075a4 <UART_SetConfig+0x21d4>)
 8007538:	e00e      	b.n	8007558 <UART_SetConfig+0x2188>
 800753a:	4b0f      	ldr	r3, [pc, #60]	; (8007578 <UART_SetConfig+0x21a8>)
 800753c:	e00c      	b.n	8007558 <UART_SetConfig+0x2188>
 800753e:	4b1a      	ldr	r3, [pc, #104]	; (80075a8 <UART_SetConfig+0x21d8>)
 8007540:	e00a      	b.n	8007558 <UART_SetConfig+0x2188>
 8007542:	4b1a      	ldr	r3, [pc, #104]	; (80075ac <UART_SetConfig+0x21dc>)
 8007544:	e008      	b.n	8007558 <UART_SetConfig+0x2188>
 8007546:	4b0d      	ldr	r3, [pc, #52]	; (800757c <UART_SetConfig+0x21ac>)
 8007548:	e006      	b.n	8007558 <UART_SetConfig+0x2188>
 800754a:	4b19      	ldr	r3, [pc, #100]	; (80075b0 <UART_SetConfig+0x21e0>)
 800754c:	e004      	b.n	8007558 <UART_SetConfig+0x2188>
 800754e:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <UART_SetConfig+0x21b0>)
 8007550:	e002      	b.n	8007558 <UART_SetConfig+0x2188>
 8007552:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <UART_SetConfig+0x21b4>)
 8007554:	e000      	b.n	8007558 <UART_SetConfig+0x2188>
 8007556:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <UART_SetConfig+0x21b8>)
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6852      	ldr	r2, [r2, #4]
 800755c:	0852      	lsrs	r2, r2, #1
 800755e:	441a      	add	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	fbb2 f3f3 	udiv	r3, r2, r3
 8007568:	b29b      	uxth	r3, r3
 800756a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800756c:	e086      	b.n	800767c <UART_SetConfig+0x22ac>
 800756e:	bf00      	nop
 8007570:	58024400 	.word	0x58024400
 8007574:	03d09000 	.word	0x03d09000
 8007578:	0003d090 	.word	0x0003d090
 800757c:	0007a120 	.word	0x0007a120
 8007580:	000f4240 	.word	0x000f4240
 8007584:	001e8480 	.word	0x001e8480
 8007588:	003d0900 	.word	0x003d0900
 800758c:	00516155 	.word	0x00516155
 8007590:	0061a800 	.word	0x0061a800
 8007594:	007a1200 	.word	0x007a1200
 8007598:	00a2c2aa 	.word	0x00a2c2aa
 800759c:	00f42400 	.word	0x00f42400
 80075a0:	01e84800 	.word	0x01e84800
 80075a4:	0001e848 	.word	0x0001e848
 80075a8:	00051615 	.word	0x00051615
 80075ac:	00061a80 	.word	0x00061a80
 80075b0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d04e      	beq.n	800765a <UART_SetConfig+0x228a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d047      	beq.n	8007654 <UART_SetConfig+0x2284>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d040      	beq.n	800764e <UART_SetConfig+0x227e>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d039      	beq.n	8007648 <UART_SetConfig+0x2278>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	2b04      	cmp	r3, #4
 80075da:	d032      	beq.n	8007642 <UART_SetConfig+0x2272>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	2b05      	cmp	r3, #5
 80075e2:	d02b      	beq.n	800763c <UART_SetConfig+0x226c>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	2b06      	cmp	r3, #6
 80075ea:	d024      	beq.n	8007636 <UART_SetConfig+0x2266>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	2b07      	cmp	r3, #7
 80075f2:	d01d      	beq.n	8007630 <UART_SetConfig+0x2260>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d016      	beq.n	800762a <UART_SetConfig+0x225a>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	2b09      	cmp	r3, #9
 8007602:	d00f      	beq.n	8007624 <UART_SetConfig+0x2254>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	2b0a      	cmp	r3, #10
 800760a:	d008      	beq.n	800761e <UART_SetConfig+0x224e>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	2b0b      	cmp	r3, #11
 8007612:	d101      	bne.n	8007618 <UART_SetConfig+0x2248>
 8007614:	2380      	movs	r3, #128	; 0x80
 8007616:	e022      	b.n	800765e <UART_SetConfig+0x228e>
 8007618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800761c:	e01f      	b.n	800765e <UART_SetConfig+0x228e>
 800761e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007622:	e01c      	b.n	800765e <UART_SetConfig+0x228e>
 8007624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007628:	e019      	b.n	800765e <UART_SetConfig+0x228e>
 800762a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800762e:	e016      	b.n	800765e <UART_SetConfig+0x228e>
 8007630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007634:	e013      	b.n	800765e <UART_SetConfig+0x228e>
 8007636:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800763a:	e010      	b.n	800765e <UART_SetConfig+0x228e>
 800763c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007640:	e00d      	b.n	800765e <UART_SetConfig+0x228e>
 8007642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007646:	e00a      	b.n	800765e <UART_SetConfig+0x228e>
 8007648:	f241 5355 	movw	r3, #5461	; 0x1555
 800764c:	e007      	b.n	800765e <UART_SetConfig+0x228e>
 800764e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007652:	e004      	b.n	800765e <UART_SetConfig+0x228e>
 8007654:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007658:	e001      	b.n	800765e <UART_SetConfig+0x228e>
 800765a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6852      	ldr	r2, [r2, #4]
 8007662:	0852      	lsrs	r2, r2, #1
 8007664:	441a      	add	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	fbb2 f3f3 	udiv	r3, r2, r3
 800766e:	b29b      	uxth	r3, r3
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007672:	e003      	b.n	800767c <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800767a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	2b0f      	cmp	r3, #15
 8007680:	d908      	bls.n	8007694 <UART_SetConfig+0x22c4>
 8007682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007688:	d204      	bcs.n	8007694 <UART_SetConfig+0x22c4>
    {
      huart->Instance->BRR = usartdiv;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007690:	60da      	str	r2, [r3, #12]
 8007692:	e002      	b.n	800769a <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80076b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3738      	adds	r7, #56	; 0x38
 80076be:	46bd      	mov	sp, r7
 80076c0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080076c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00a      	beq.n	80076ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00a      	beq.n	8007710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00a      	beq.n	8007732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	430a      	orrs	r2, r1
 8007752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007758:	f003 0310 	and.w	r3, r3, #16
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00a      	beq.n	8007776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00a      	beq.n	8007798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d01a      	beq.n	80077da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077c2:	d10a      	bne.n	80077da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	605a      	str	r2, [r3, #4]
  }
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af02      	add	r7, sp, #8
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007818:	f7f8 ff60 	bl	80006dc <HAL_GetTick>
 800781c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0308 	and.w	r3, r3, #8
 8007828:	2b08      	cmp	r3, #8
 800782a:	d10e      	bne.n	800784a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800782c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f82c 	bl	8007898 <UART_WaitOnFlagUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e022      	b.n	8007890 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b04      	cmp	r3, #4
 8007856:	d10e      	bne.n	8007876 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f816 	bl	8007898 <UART_WaitOnFlagUntilTimeout>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e00c      	b.n	8007890 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2220      	movs	r2, #32
 8007882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	4613      	mov	r3, r2
 80078a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078a8:	e02c      	b.n	8007904 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078b0:	d028      	beq.n	8007904 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b2:	f7f8 ff13 	bl	80006dc <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d302      	bcc.n	80078c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d11d      	bne.n	8007904 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078d6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689a      	ldr	r2, [r3, #8]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0201 	bic.w	r2, r2, #1
 80078e6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e00f      	b.n	8007924 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69da      	ldr	r2, [r3, #28]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	4013      	ands	r3, r2
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	429a      	cmp	r2, r3
 8007912:	bf0c      	ite	eq
 8007914:	2301      	moveq	r3, #1
 8007916:	2300      	movne	r3, #0
 8007918:	b2db      	uxtb	r3, r3
 800791a:	461a      	mov	r2, r3
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	429a      	cmp	r2, r3
 8007920:	d0c3      	beq.n	80078aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <HAL_UARTEx_DisableFifoMode+0x16>
 800793e:	2302      	movs	r3, #2
 8007940:	e027      	b.n	8007992 <HAL_UARTEx_DisableFifoMode+0x66>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2224      	movs	r2, #36	; 0x24
 800794e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f022 0201 	bic.w	r2, r2, #1
 8007968:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007970:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e02d      	b.n	8007a12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2224      	movs	r2, #36	; 0x24
 80079c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0201 	bic.w	r2, r2, #1
 80079dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f850 	bl	8007a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d101      	bne.n	8007a32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	e02d      	b.n	8007a8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2224      	movs	r2, #36	; 0x24
 8007a3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0201 	bic.w	r2, r2, #1
 8007a58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f812 	bl	8007a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b089      	sub	sp, #36	; 0x24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007aa0:	4a2f      	ldr	r2, [pc, #188]	; (8007b60 <UARTEx_SetNbDataToProcess+0xc8>)
 8007aa2:	f107 0314 	add.w	r3, r7, #20
 8007aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007aaa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007aae:	4a2d      	ldr	r2, [pc, #180]	; (8007b64 <UARTEx_SetNbDataToProcess+0xcc>)
 8007ab0:	f107 030c 	add.w	r3, r7, #12
 8007ab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ab8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d108      	bne.n	8007ad6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ad4:	e03d      	b.n	8007b52 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ad6:	2308      	movs	r3, #8
 8007ad8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ada:	2308      	movs	r3, #8
 8007adc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	0e5b      	lsrs	r3, r3, #25
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	f003 0307 	and.w	r3, r3, #7
 8007aec:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	0f5b      	lsrs	r3, r3, #29
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007afe:	7fbb      	ldrb	r3, [r7, #30]
 8007b00:	7f3a      	ldrb	r2, [r7, #28]
 8007b02:	f107 0120 	add.w	r1, r7, #32
 8007b06:	440a      	add	r2, r1
 8007b08:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007b0c:	fb02 f303 	mul.w	r3, r2, r3
 8007b10:	7f3a      	ldrb	r2, [r7, #28]
 8007b12:	f107 0120 	add.w	r1, r7, #32
 8007b16:	440a      	add	r2, r1
 8007b18:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007b1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007b28:	7ffb      	ldrb	r3, [r7, #31]
 8007b2a:	7f7a      	ldrb	r2, [r7, #29]
 8007b2c:	f107 0120 	add.w	r1, r7, #32
 8007b30:	440a      	add	r2, r1
 8007b32:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007b36:	fb02 f303 	mul.w	r3, r2, r3
 8007b3a:	7f7a      	ldrb	r2, [r7, #29]
 8007b3c:	f107 0120 	add.w	r1, r7, #32
 8007b40:	440a      	add	r2, r1
 8007b42:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007b46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b52:	bf00      	nop
 8007b54:	3724      	adds	r7, #36	; 0x24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	080087d8 	.word	0x080087d8
 8007b64:	080087e0 	.word	0x080087e0

08007b68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	; 0x28
 8007b6c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8007b6e:	f107 031c 	add.w	r3, r7, #28
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	605a      	str	r2, [r3, #4]
 8007b78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	605a      	str	r2, [r3, #4]
 8007b82:	609a      	str	r2, [r3, #8]
 8007b84:	60da      	str	r2, [r3, #12]
 8007b86:	611a      	str	r2, [r3, #16]
 8007b88:	615a      	str	r2, [r3, #20]
 8007b8a:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007b8c:	4b2e      	ldr	r3, [pc, #184]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007b8e:	4a2f      	ldr	r2, [pc, #188]	; (8007c4c <MX_ADC1_Init+0xe4>)
 8007b90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007b92:	4b2d      	ldr	r3, [pc, #180]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8007b98:	4b2b      	ldr	r3, [pc, #172]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007b9e:	4b2a      	ldr	r3, [pc, #168]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007ba4:	4b28      	ldr	r3, [pc, #160]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007baa:	4b27      	ldr	r3, [pc, #156]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007bb0:	4b25      	ldr	r3, [pc, #148]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8007bb6:	4b24      	ldr	r3, [pc, #144]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007bb8:	2201      	movs	r2, #1
 8007bba:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007bbc:	4b22      	ldr	r3, [pc, #136]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007bc2:	4b21      	ldr	r3, [pc, #132]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007bc8:	4b1f      	ldr	r3, [pc, #124]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8007bce:	4b1e      	ldr	r3, [pc, #120]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007bd4:	4b1c      	ldr	r3, [pc, #112]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007bda:	4b1b      	ldr	r3, [pc, #108]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8007be0:	4b19      	ldr	r3, [pc, #100]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007be8:	4817      	ldr	r0, [pc, #92]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007bea:	f7f8 ff0b 	bl	8000a04 <HAL_ADC_Init>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007bf4:	f000 fb42 	bl	800827c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007bfc:	f107 031c 	add.w	r3, r7, #28
 8007c00:	4619      	mov	r1, r3
 8007c02:	4811      	ldr	r0, [pc, #68]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007c04:	f7f9 fcbe 	bl	8001584 <HAL_ADCEx_MultiModeConfigChannel>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8007c0e:	f000 fb35 	bl	800827c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007c12:	4b0f      	ldr	r3, [pc, #60]	; (8007c50 <MX_ADC1_Init+0xe8>)
 8007c14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007c16:	2306      	movs	r3, #6
 8007c18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007c1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007c22:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007c24:	2304      	movs	r3, #4
 8007c26:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c2c:	463b      	mov	r3, r7
 8007c2e:	4619      	mov	r1, r3
 8007c30:	4805      	ldr	r0, [pc, #20]	; (8007c48 <MX_ADC1_Init+0xe0>)
 8007c32:	f7f9 f885 	bl	8000d40 <HAL_ADC_ConfigChannel>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8007c3c:	f000 fb1e 	bl	800827c <Error_Handler>
  }

}
 8007c40:	bf00      	nop
 8007c42:	3728      	adds	r7, #40	; 0x28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	24000030 	.word	0x24000030
 8007c4c:	40022000 	.word	0x40022000
 8007c50:	08600004 	.word	0x08600004

08007c54 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8007c5a:	1d3b      	adds	r3, r7, #4
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	605a      	str	r2, [r3, #4]
 8007c62:	609a      	str	r2, [r3, #8]
 8007c64:	60da      	str	r2, [r3, #12]
 8007c66:	611a      	str	r2, [r3, #16]
 8007c68:	615a      	str	r2, [r3, #20]
 8007c6a:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc3.Instance = ADC3;
 8007c6c:	4b28      	ldr	r3, [pc, #160]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007c6e:	4a29      	ldr	r2, [pc, #164]	; (8007d14 <MX_ADC3_Init+0xc0>)
 8007c70:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007c72:	4b27      	ldr	r3, [pc, #156]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8007c78:	4b25      	ldr	r3, [pc, #148]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007c7e:	4b24      	ldr	r3, [pc, #144]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007c84:	4b22      	ldr	r3, [pc, #136]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007c86:	2204      	movs	r2, #4
 8007c88:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8007c8a:	4b21      	ldr	r3, [pc, #132]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8007c90:	4b1f      	ldr	r3, [pc, #124]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8007c96:	4b1e      	ldr	r3, [pc, #120]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8007c9c:	4b1c      	ldr	r3, [pc, #112]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007ca2:	4b1b      	ldr	r3, [pc, #108]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007ca8:	4b19      	ldr	r3, [pc, #100]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8007cae:	4b18      	ldr	r3, [pc, #96]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007cb4:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007cba:	4b15      	ldr	r3, [pc, #84]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8007cc0:	4b13      	ldr	r3, [pc, #76]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8007cc8:	4811      	ldr	r0, [pc, #68]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007cca:	f7f8 fe9b 	bl	8000a04 <HAL_ADC_Init>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8007cd4:	f000 fad2 	bl	800827c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007cd8:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <MX_ADC3_Init+0xc4>)
 8007cda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007cdc:	2306      	movs	r3, #6
 8007cde:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007ce4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007ce8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007cea:	2304      	movs	r3, #4
 8007cec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007cf2:	1d3b      	adds	r3, r7, #4
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4806      	ldr	r0, [pc, #24]	; (8007d10 <MX_ADC3_Init+0xbc>)
 8007cf8:	f7f9 f822 	bl	8000d40 <HAL_ADC_ConfigChannel>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8007d02:	f000 fabb 	bl	800827c <Error_Handler>
  }

}
 8007d06:	bf00      	nop
 8007d08:	3720      	adds	r7, #32
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	24000094 	.word	0x24000094
 8007d14:	58026000 	.word	0x58026000
 8007d18:	04300002 	.word	0x04300002

08007d1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08c      	sub	sp, #48	; 0x30
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d24:	f107 031c 	add.w	r3, r7, #28
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	605a      	str	r2, [r3, #4]
 8007d2e:	609a      	str	r2, [r3, #8]
 8007d30:	60da      	str	r2, [r3, #12]
 8007d32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a3b      	ldr	r2, [pc, #236]	; (8007e28 <HAL_ADC_MspInit+0x10c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d12b      	bne.n	8007d96 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007d3e:	4b3b      	ldr	r3, [pc, #236]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007d44:	4a39      	ldr	r2, [pc, #228]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007d46:	f043 0320 	orr.w	r3, r3, #32
 8007d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007d4e:	4b37      	ldr	r3, [pc, #220]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007d54:	f003 0320 	and.w	r3, r3, #32
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007d5c:	4b33      	ldr	r3, [pc, #204]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d62:	4a32      	ldr	r2, [pc, #200]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007d64:	f043 0320 	orr.w	r3, r3, #32
 8007d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d6c:	4b2f      	ldr	r3, [pc, #188]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PF11     ------> ADC1_INP2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007d7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d80:	2303      	movs	r3, #3
 8007d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d84:	2300      	movs	r3, #0
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007d88:	f107 031c 	add.w	r3, r7, #28
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4828      	ldr	r0, [pc, #160]	; (8007e30 <HAL_ADC_MspInit+0x114>)
 8007d90:	f7f9 fdb6 	bl	8001900 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8007d94:	e044      	b.n	8007e20 <HAL_ADC_MspInit+0x104>
  else if(adcHandle->Instance==ADC3)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a26      	ldr	r2, [pc, #152]	; (8007e34 <HAL_ADC_MspInit+0x118>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d13f      	bne.n	8007e20 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8007da0:	4b22      	ldr	r3, [pc, #136]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007da6:	4a21      	ldr	r2, [pc, #132]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007db0:	4b1e      	ldr	r3, [pc, #120]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dba:	613b      	str	r3, [r7, #16]
 8007dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007dbe:	4b1b      	ldr	r3, [pc, #108]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dc4:	4a19      	ldr	r2, [pc, #100]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007dc6:	f043 0320 	orr.w	r3, r3, #32
 8007dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007dce:	4b17      	ldr	r3, [pc, #92]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dd4:	f003 0320 	and.w	r3, r3, #32
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ddc:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007de2:	4a12      	ldr	r2, [pc, #72]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007de4:	f043 0304 	orr.w	r3, r3, #4
 8007de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <HAL_ADC_MspInit+0x110>)
 8007dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	60bb      	str	r3, [r7, #8]
 8007df8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8007dfa:	f44f 7320 	mov.w	r3, #640	; 0x280
 8007dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e00:	2303      	movs	r3, #3
 8007e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e08:	f107 031c 	add.w	r3, r7, #28
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4808      	ldr	r0, [pc, #32]	; (8007e30 <HAL_ADC_MspInit+0x114>)
 8007e10:	f7f9 fd76 	bl	8001900 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8007e14:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8007e18:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8007e1c:	f7f8 fc76 	bl	800070c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8007e20:	bf00      	nop
 8007e22:	3730      	adds	r7, #48	; 0x30
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40022000 	.word	0x40022000
 8007e2c:	58024400 	.word	0x58024400
 8007e30:	58021400 	.word	0x58021400
 8007e34:	58026000 	.word	0x58026000

08007e38 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08e      	sub	sp, #56	; 0x38
 8007e3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	605a      	str	r2, [r3, #4]
 8007e48:	609a      	str	r2, [r3, #8]
 8007e4a:	60da      	str	r2, [r3, #12]
 8007e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e4e:	4b92      	ldr	r3, [pc, #584]	; (8008098 <MX_GPIO_Init+0x260>)
 8007e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e54:	4a90      	ldr	r2, [pc, #576]	; (8008098 <MX_GPIO_Init+0x260>)
 8007e56:	f043 0304 	orr.w	r3, r3, #4
 8007e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007e5e:	4b8e      	ldr	r3, [pc, #568]	; (8008098 <MX_GPIO_Init+0x260>)
 8007e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	623b      	str	r3, [r7, #32]
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007e6c:	4b8a      	ldr	r3, [pc, #552]	; (8008098 <MX_GPIO_Init+0x260>)
 8007e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e72:	4a89      	ldr	r2, [pc, #548]	; (8008098 <MX_GPIO_Init+0x260>)
 8007e74:	f043 0320 	orr.w	r3, r3, #32
 8007e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007e7c:	4b86      	ldr	r3, [pc, #536]	; (8008098 <MX_GPIO_Init+0x260>)
 8007e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e82:	f003 0320 	and.w	r3, r3, #32
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007e8a:	4b83      	ldr	r3, [pc, #524]	; (8008098 <MX_GPIO_Init+0x260>)
 8007e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e90:	4a81      	ldr	r2, [pc, #516]	; (8008098 <MX_GPIO_Init+0x260>)
 8007e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007e9a:	4b7f      	ldr	r3, [pc, #508]	; (8008098 <MX_GPIO_Init+0x260>)
 8007e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea4:	61bb      	str	r3, [r7, #24]
 8007ea6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ea8:	4b7b      	ldr	r3, [pc, #492]	; (8008098 <MX_GPIO_Init+0x260>)
 8007eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007eae:	4a7a      	ldr	r2, [pc, #488]	; (8008098 <MX_GPIO_Init+0x260>)
 8007eb0:	f043 0301 	orr.w	r3, r3, #1
 8007eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007eb8:	4b77      	ldr	r3, [pc, #476]	; (8008098 <MX_GPIO_Init+0x260>)
 8007eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ec6:	4b74      	ldr	r3, [pc, #464]	; (8008098 <MX_GPIO_Init+0x260>)
 8007ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ecc:	4a72      	ldr	r2, [pc, #456]	; (8008098 <MX_GPIO_Init+0x260>)
 8007ece:	f043 0302 	orr.w	r3, r3, #2
 8007ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ed6:	4b70      	ldr	r3, [pc, #448]	; (8008098 <MX_GPIO_Init+0x260>)
 8007ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007edc:	f003 0302 	and.w	r3, r3, #2
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007ee4:	4b6c      	ldr	r3, [pc, #432]	; (8008098 <MX_GPIO_Init+0x260>)
 8007ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007eea:	4a6b      	ldr	r2, [pc, #428]	; (8008098 <MX_GPIO_Init+0x260>)
 8007eec:	f043 0310 	orr.w	r3, r3, #16
 8007ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ef4:	4b68      	ldr	r3, [pc, #416]	; (8008098 <MX_GPIO_Init+0x260>)
 8007ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007efa:	f003 0310 	and.w	r3, r3, #16
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f02:	4b65      	ldr	r3, [pc, #404]	; (8008098 <MX_GPIO_Init+0x260>)
 8007f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f08:	4a63      	ldr	r2, [pc, #396]	; (8008098 <MX_GPIO_Init+0x260>)
 8007f0a:	f043 0308 	orr.w	r3, r3, #8
 8007f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007f12:	4b61      	ldr	r3, [pc, #388]	; (8008098 <MX_GPIO_Init+0x260>)
 8007f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f18:	f003 0308 	and.w	r3, r3, #8
 8007f1c:	60bb      	str	r3, [r7, #8]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007f20:	4b5d      	ldr	r3, [pc, #372]	; (8008098 <MX_GPIO_Init+0x260>)
 8007f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f26:	4a5c      	ldr	r2, [pc, #368]	; (8008098 <MX_GPIO_Init+0x260>)
 8007f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007f30:	4b59      	ldr	r3, [pc, #356]	; (8008098 <MX_GPIO_Init+0x260>)
 8007f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3a:	607b      	str	r3, [r7, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f244 0101 	movw	r1, #16385	; 0x4001
 8007f44:	4855      	ldr	r0, [pc, #340]	; (800809c <MX_GPIO_Init+0x264>)
 8007f46:	f7f9 fe8b 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f50:	4853      	ldr	r0, [pc, #332]	; (80080a0 <MX_GPIO_Init+0x268>)
 8007f52:	f7f9 fe85 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8007f56:	2200      	movs	r2, #0
 8007f58:	2102      	movs	r1, #2
 8007f5a:	4852      	ldr	r0, [pc, #328]	; (80080a4 <MX_GPIO_Init+0x26c>)
 8007f5c:	f7f9 fe80 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f66:	2300      	movs	r3, #0
 8007f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f72:	4619      	mov	r1, r3
 8007f74:	484c      	ldr	r0, [pc, #304]	; (80080a8 <MX_GPIO_Init+0x270>)
 8007f76:	f7f9 fcc3 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007f7a:	2332      	movs	r3, #50	; 0x32
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f7e:	2302      	movs	r3, #2
 8007f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f86:	2300      	movs	r3, #0
 8007f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007f8a:	230b      	movs	r3, #11
 8007f8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f92:	4619      	mov	r1, r3
 8007f94:	4844      	ldr	r0, [pc, #272]	; (80080a8 <MX_GPIO_Init+0x270>)
 8007f96:	f7f9 fcb3 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007f9a:	2386      	movs	r3, #134	; 0x86
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007faa:	230b      	movs	r3, #11
 8007fac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	483d      	ldr	r0, [pc, #244]	; (80080ac <MX_GPIO_Init+0x274>)
 8007fb6:	f7f9 fca3 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8007fba:	f244 0301 	movw	r3, #16385	; 0x4001
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4832      	ldr	r0, [pc, #200]	; (800809c <MX_GPIO_Init+0x264>)
 8007fd4:	f7f9 fc94 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fde:	2302      	movs	r3, #2
 8007fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007fea:	230b      	movs	r3, #11
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4829      	ldr	r0, [pc, #164]	; (800809c <MX_GPIO_Init+0x264>)
 8007ff6:	f7f9 fc83 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8007ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008000:	2301      	movs	r3, #1
 8008002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008004:	2300      	movs	r3, #0
 8008006:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008008:	2300      	movs	r3, #0
 800800a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800800c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008010:	4619      	mov	r1, r3
 8008012:	4823      	ldr	r0, [pc, #140]	; (80080a0 <MX_GPIO_Init+0x268>)
 8008014:	f7f9 fc74 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8008018:	2380      	movs	r3, #128	; 0x80
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800801c:	4b24      	ldr	r3, [pc, #144]	; (80080b0 <MX_GPIO_Init+0x278>)
 800801e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008020:	2300      	movs	r3, #0
 8008022:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8008024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008028:	4619      	mov	r1, r3
 800802a:	4822      	ldr	r0, [pc, #136]	; (80080b4 <MX_GPIO_Init+0x27c>)
 800802c:	f7f9 fc68 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8008030:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008036:	2302      	movs	r3, #2
 8008038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800803a:	2300      	movs	r3, #0
 800803c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800803e:	2300      	movs	r3, #0
 8008040:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8008042:	230a      	movs	r3, #10
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800804a:	4619      	mov	r1, r3
 800804c:	4817      	ldr	r0, [pc, #92]	; (80080ac <MX_GPIO_Init+0x274>)
 800804e:	f7f9 fc57 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8008052:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008058:	2302      	movs	r3, #2
 800805a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800805c:	2300      	movs	r3, #0
 800805e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008060:	2300      	movs	r3, #0
 8008062:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008064:	230b      	movs	r3, #11
 8008066:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800806c:	4619      	mov	r1, r3
 800806e:	4811      	ldr	r0, [pc, #68]	; (80080b4 <MX_GPIO_Init+0x27c>)
 8008070:	f7f9 fc46 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008074:	2302      	movs	r3, #2
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008078:	2301      	movs	r3, #1
 800807a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800807c:	2300      	movs	r3, #0
 800807e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008080:	2300      	movs	r3, #0
 8008082:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008088:	4619      	mov	r1, r3
 800808a:	4806      	ldr	r0, [pc, #24]	; (80080a4 <MX_GPIO_Init+0x26c>)
 800808c:	f7f9 fc38 	bl	8001900 <HAL_GPIO_Init>

}
 8008090:	bf00      	nop
 8008092:	3738      	adds	r7, #56	; 0x38
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	58024400 	.word	0x58024400
 800809c:	58020400 	.word	0x58020400
 80080a0:	58020c00 	.word	0x58020c00
 80080a4:	58021000 	.word	0x58021000
 80080a8:	58020800 	.word	0x58020800
 80080ac:	58020000 	.word	0x58020000
 80080b0:	11110000 	.word	0x11110000
 80080b4:	58021800 	.word	0x58021800

080080b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80080bc:	f7f8 fa8c 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80080c0:	f000 f80c 	bl	80080dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80080c4:	f7ff feb8 	bl	8007e38 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80080c8:	f000 fa8e 	bl	80085e8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80080cc:	f7ff fd4c 	bl	8007b68 <MX_ADC1_Init>
  MX_ADC3_Init();
 80080d0:	f7ff fdc0 	bl	8007c54 <MX_ADC3_Init>
  MX_TIM1_Init();
 80080d4:	f000 f984 	bl	80083e0 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80080d8:	e7fe      	b.n	80080d8 <main+0x20>
	...

080080dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b0cc      	sub	sp, #304	; 0x130
 80080e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80080e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80080e6:	224c      	movs	r2, #76	; 0x4c
 80080e8:	2100      	movs	r1, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fb60 	bl	80087b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80080f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80080f4:	2220      	movs	r2, #32
 80080f6:	2100      	movs	r1, #0
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 fb59 	bl	80087b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80080fe:	f107 0308 	add.w	r3, r7, #8
 8008102:	4618      	mov	r0, r3
 8008104:	23bc      	movs	r3, #188	; 0xbc
 8008106:	461a      	mov	r2, r3
 8008108:	2100      	movs	r1, #0
 800810a:	f000 fb51 	bl	80087b0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800810e:	2002      	movs	r0, #2
 8008110:	f7f9 fdc0 	bl	8001c94 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008114:	1d3b      	adds	r3, r7, #4
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	4b54      	ldr	r3, [pc, #336]	; (800826c <SystemClock_Config+0x190>)
 800811c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811e:	4a53      	ldr	r2, [pc, #332]	; (800826c <SystemClock_Config+0x190>)
 8008120:	f023 0301 	bic.w	r3, r3, #1
 8008124:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008126:	4b51      	ldr	r3, [pc, #324]	; (800826c <SystemClock_Config+0x190>)
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	f003 0201 	and.w	r2, r3, #1
 800812e:	1d3b      	adds	r3, r7, #4
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	4b4f      	ldr	r3, [pc, #316]	; (8008270 <SystemClock_Config+0x194>)
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800813a:	4a4d      	ldr	r2, [pc, #308]	; (8008270 <SystemClock_Config+0x194>)
 800813c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008140:	6193      	str	r3, [r2, #24]
 8008142:	4b4b      	ldr	r3, [pc, #300]	; (8008270 <SystemClock_Config+0x194>)
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800814a:	1d3b      	adds	r3, r7, #4
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	1d3b      	adds	r3, r7, #4
 8008150:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008152:	bf00      	nop
 8008154:	4b46      	ldr	r3, [pc, #280]	; (8008270 <SystemClock_Config+0x194>)
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800815c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008160:	d1f8      	bne.n	8008154 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8008162:	4b44      	ldr	r3, [pc, #272]	; (8008274 <SystemClock_Config+0x198>)
 8008164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008166:	f023 0303 	bic.w	r3, r3, #3
 800816a:	4a42      	ldr	r2, [pc, #264]	; (8008274 <SystemClock_Config+0x198>)
 800816c:	f043 0302 	orr.w	r3, r3, #2
 8008170:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8008172:	2303      	movs	r3, #3
 8008174:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008178:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800817c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8008180:	2301      	movs	r3, #1
 8008182:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008186:	2320      	movs	r3, #32
 8008188:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800818c:	2300      	movs	r3, #0
 800818e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008192:	2302      	movs	r3, #2
 8008194:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008198:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800819c:	4618      	mov	r0, r3
 800819e:	f7f9 fdb1 	bl	8001d04 <HAL_RCC_OscConfig>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80081a8:	f000 f868 	bl	800827c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80081ac:	233f      	movs	r3, #63	; 0x3f
 80081ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80081b2:	2300      	movs	r3, #0
 80081b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80081b8:	2300      	movs	r3, #0
 80081ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80081be:	2300      	movs	r3, #0
 80081c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80081c4:	2300      	movs	r3, #0
 80081c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80081ca:	2300      	movs	r3, #0
 80081cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80081d0:	2300      	movs	r3, #0
 80081d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80081d6:	2300      	movs	r3, #0
 80081d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80081dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80081e0:	2100      	movs	r1, #0
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fa f946 	bl	8002474 <HAL_RCC_ClockConfig>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <SystemClock_Config+0x116>
  {
    Error_Handler();
 80081ee:	f000 f845 	bl	800827c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC;
 80081f2:	f107 0308 	add.w	r3, r7, #8
 80081f6:	4a20      	ldr	r2, [pc, #128]	; (8008278 <SystemClock_Config+0x19c>)
 80081f8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80081fa:	f107 0308 	add.w	r3, r7, #8
 80081fe:	2201      	movs	r2, #1
 8008200:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8008202:	f107 0308 	add.w	r3, r7, #8
 8008206:	2213      	movs	r2, #19
 8008208:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800820a:	f107 0308 	add.w	r3, r7, #8
 800820e:	2202      	movs	r2, #2
 8008210:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8008212:	f107 0308 	add.w	r3, r7, #8
 8008216:	2202      	movs	r2, #2
 8008218:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800821a:	f107 0308 	add.w	r3, r7, #8
 800821e:	2202      	movs	r2, #2
 8008220:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8008222:	f107 0308 	add.w	r3, r7, #8
 8008226:	22c0      	movs	r2, #192	; 0xc0
 8008228:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800822a:	f107 0308 	add.w	r3, r7, #8
 800822e:	2220      	movs	r2, #32
 8008230:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8008232:	f107 0308 	add.w	r3, r7, #8
 8008236:	2200      	movs	r2, #0
 8008238:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800823a:	f107 0308 	add.w	r3, r7, #8
 800823e:	2200      	movs	r2, #0
 8008240:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8008242:	f107 0308 	add.w	r3, r7, #8
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800824c:	f107 0308 	add.w	r3, r7, #8
 8008250:	4618      	mov	r0, r3
 8008252:	f7fa fc69 	bl	8002b28 <HAL_RCCEx_PeriphCLKConfig>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <SystemClock_Config+0x184>
  {
    Error_Handler();
 800825c:	f000 f80e 	bl	800827c <Error_Handler>
  }
}
 8008260:	bf00      	nop
 8008262:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	58000400 	.word	0x58000400
 8008270:	58024800 	.word	0x58024800
 8008274:	58024400 	.word	0x58024400
 8008278:	00080002 	.word	0x00080002

0800827c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008280:	bf00      	nop
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
	...

0800828c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008292:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <HAL_MspInit+0x30>)
 8008294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008298:	4a08      	ldr	r2, [pc, #32]	; (80082bc <HAL_MspInit+0x30>)
 800829a:	f043 0302 	orr.w	r3, r3, #2
 800829e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80082a2:	4b06      	ldr	r3, [pc, #24]	; (80082bc <HAL_MspInit+0x30>)
 80082a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082a8:	f003 0302 	and.w	r3, r3, #2
 80082ac:	607b      	str	r3, [r7, #4]
 80082ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	58024400 	.word	0x58024400

080082c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80082c4:	bf00      	nop
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082ce:	b480      	push	{r7}
 80082d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082d2:	e7fe      	b.n	80082d2 <HardFault_Handler+0x4>

080082d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082d4:	b480      	push	{r7}
 80082d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082d8:	e7fe      	b.n	80082d8 <MemManage_Handler+0x4>

080082da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082da:	b480      	push	{r7}
 80082dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082de:	e7fe      	b.n	80082de <BusFault_Handler+0x4>

080082e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80082e4:	e7fe      	b.n	80082e4 <UsageFault_Handler+0x4>

080082e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80082e6:	b480      	push	{r7}
 80082e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80082ea:	bf00      	nop
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80082f8:	bf00      	nop
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008302:	b480      	push	{r7}
 8008304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008306:	bf00      	nop
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008314:	f7f8 f9ce 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008318:	bf00      	nop
 800831a:	bd80      	pop	{r7, pc}

0800831c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008320:	4b29      	ldr	r3, [pc, #164]	; (80083c8 <SystemInit+0xac>)
 8008322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008326:	4a28      	ldr	r2, [pc, #160]	; (80083c8 <SystemInit+0xac>)
 8008328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800832c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008330:	4b26      	ldr	r3, [pc, #152]	; (80083cc <SystemInit+0xb0>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a25      	ldr	r2, [pc, #148]	; (80083cc <SystemInit+0xb0>)
 8008336:	f043 0301 	orr.w	r3, r3, #1
 800833a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800833c:	4b23      	ldr	r3, [pc, #140]	; (80083cc <SystemInit+0xb0>)
 800833e:	2200      	movs	r2, #0
 8008340:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008342:	4b22      	ldr	r3, [pc, #136]	; (80083cc <SystemInit+0xb0>)
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	4921      	ldr	r1, [pc, #132]	; (80083cc <SystemInit+0xb0>)
 8008348:	4b21      	ldr	r3, [pc, #132]	; (80083d0 <SystemInit+0xb4>)
 800834a:	4013      	ands	r3, r2
 800834c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800834e:	4b1f      	ldr	r3, [pc, #124]	; (80083cc <SystemInit+0xb0>)
 8008350:	2200      	movs	r2, #0
 8008352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008354:	4b1d      	ldr	r3, [pc, #116]	; (80083cc <SystemInit+0xb0>)
 8008356:	2200      	movs	r2, #0
 8008358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800835a:	4b1c      	ldr	r3, [pc, #112]	; (80083cc <SystemInit+0xb0>)
 800835c:	2200      	movs	r2, #0
 800835e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8008360:	4b1a      	ldr	r3, [pc, #104]	; (80083cc <SystemInit+0xb0>)
 8008362:	2200      	movs	r2, #0
 8008364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8008366:	4b19      	ldr	r3, [pc, #100]	; (80083cc <SystemInit+0xb0>)
 8008368:	2200      	movs	r2, #0
 800836a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800836c:	4b17      	ldr	r3, [pc, #92]	; (80083cc <SystemInit+0xb0>)
 800836e:	2200      	movs	r2, #0
 8008370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008372:	4b16      	ldr	r3, [pc, #88]	; (80083cc <SystemInit+0xb0>)
 8008374:	2200      	movs	r2, #0
 8008376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8008378:	4b14      	ldr	r3, [pc, #80]	; (80083cc <SystemInit+0xb0>)
 800837a:	2200      	movs	r2, #0
 800837c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800837e:	4b13      	ldr	r3, [pc, #76]	; (80083cc <SystemInit+0xb0>)
 8008380:	2200      	movs	r2, #0
 8008382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8008384:	4b11      	ldr	r3, [pc, #68]	; (80083cc <SystemInit+0xb0>)
 8008386:	2200      	movs	r2, #0
 8008388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800838a:	4b10      	ldr	r3, [pc, #64]	; (80083cc <SystemInit+0xb0>)
 800838c:	2200      	movs	r2, #0
 800838e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008390:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <SystemInit+0xb0>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a0d      	ldr	r2, [pc, #52]	; (80083cc <SystemInit+0xb0>)
 8008396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800839a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800839c:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <SystemInit+0xb0>)
 800839e:	2200      	movs	r2, #0
 80083a0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80083a2:	4b0c      	ldr	r3, [pc, #48]	; (80083d4 <SystemInit+0xb8>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <SystemInit+0xbc>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ae:	d202      	bcs.n	80083b6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80083b0:	4b0a      	ldr	r3, [pc, #40]	; (80083dc <SystemInit+0xc0>)
 80083b2:	2201      	movs	r2, #1
 80083b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80083b6:	4b04      	ldr	r3, [pc, #16]	; (80083c8 <SystemInit+0xac>)
 80083b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80083bc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80083be:	bf00      	nop
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	e000ed00 	.word	0xe000ed00
 80083cc:	58024400 	.word	0x58024400
 80083d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80083d4:	5c001000 	.word	0x5c001000
 80083d8:	ffff0000 	.word	0xffff0000
 80083dc:	51008108 	.word	0x51008108

080083e0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b096      	sub	sp, #88	; 0x58
 80083e4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	605a      	str	r2, [r3, #4]
 80083f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80083f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	605a      	str	r2, [r3, #4]
 80083fc:	609a      	str	r2, [r3, #8]
 80083fe:	60da      	str	r2, [r3, #12]
 8008400:	611a      	str	r2, [r3, #16]
 8008402:	615a      	str	r2, [r3, #20]
 8008404:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008406:	1d3b      	adds	r3, r7, #4
 8008408:	222c      	movs	r2, #44	; 0x2c
 800840a:	2100      	movs	r1, #0
 800840c:	4618      	mov	r0, r3
 800840e:	f000 f9cf 	bl	80087b0 <memset>

  htim1.Instance = TIM1;
 8008412:	4b44      	ldr	r3, [pc, #272]	; (8008524 <MX_TIM1_Init+0x144>)
 8008414:	4a44      	ldr	r2, [pc, #272]	; (8008528 <MX_TIM1_Init+0x148>)
 8008416:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008418:	4b42      	ldr	r3, [pc, #264]	; (8008524 <MX_TIM1_Init+0x144>)
 800841a:	2200      	movs	r2, #0
 800841c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800841e:	4b41      	ldr	r3, [pc, #260]	; (8008524 <MX_TIM1_Init+0x144>)
 8008420:	2200      	movs	r2, #0
 8008422:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8008424:	4b3f      	ldr	r3, [pc, #252]	; (8008524 <MX_TIM1_Init+0x144>)
 8008426:	2200      	movs	r2, #0
 8008428:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800842a:	4b3e      	ldr	r3, [pc, #248]	; (8008524 <MX_TIM1_Init+0x144>)
 800842c:	2200      	movs	r2, #0
 800842e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008430:	4b3c      	ldr	r3, [pc, #240]	; (8008524 <MX_TIM1_Init+0x144>)
 8008432:	2200      	movs	r2, #0
 8008434:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008436:	4b3b      	ldr	r3, [pc, #236]	; (8008524 <MX_TIM1_Init+0x144>)
 8008438:	2200      	movs	r2, #0
 800843a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800843c:	4839      	ldr	r0, [pc, #228]	; (8008524 <MX_TIM1_Init+0x144>)
 800843e:	f7fc f9ef 	bl	8004820 <HAL_TIM_PWM_Init>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8008448:	f7ff ff18 	bl	800827c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800844c:	2300      	movs	r3, #0
 800844e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008450:	2300      	movs	r3, #0
 8008452:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008454:	2300      	movs	r3, #0
 8008456:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008458:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800845c:	4619      	mov	r1, r3
 800845e:	4831      	ldr	r0, [pc, #196]	; (8008524 <MX_TIM1_Init+0x144>)
 8008460:	f7fc fe8a 	bl	8005178 <HAL_TIMEx_MasterConfigSynchronization>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800846a:	f7ff ff07 	bl	800827c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800846e:	2360      	movs	r3, #96	; 0x60
 8008470:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008476:	2300      	movs	r3, #0
 8008478:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800847a:	2300      	movs	r3, #0
 800847c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800847e:	2300      	movs	r3, #0
 8008480:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008482:	2300      	movs	r3, #0
 8008484:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008486:	2300      	movs	r3, #0
 8008488:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800848a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800848e:	2200      	movs	r2, #0
 8008490:	4619      	mov	r1, r3
 8008492:	4824      	ldr	r0, [pc, #144]	; (8008524 <MX_TIM1_Init+0x144>)
 8008494:	f7fc f9f0 	bl	8004878 <HAL_TIM_PWM_ConfigChannel>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800849e:	f7ff feed 	bl	800827c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80084a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084a6:	2204      	movs	r2, #4
 80084a8:	4619      	mov	r1, r3
 80084aa:	481e      	ldr	r0, [pc, #120]	; (8008524 <MX_TIM1_Init+0x144>)
 80084ac:	f7fc f9e4 	bl	8004878 <HAL_TIM_PWM_ConfigChannel>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80084b6:	f7ff fee1 	bl	800827c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80084ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084be:	2208      	movs	r2, #8
 80084c0:	4619      	mov	r1, r3
 80084c2:	4818      	ldr	r0, [pc, #96]	; (8008524 <MX_TIM1_Init+0x144>)
 80084c4:	f7fc f9d8 	bl	8004878 <HAL_TIM_PWM_ConfigChannel>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80084ce:	f7ff fed5 	bl	800827c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80084d2:	2300      	movs	r3, #0
 80084d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80084d6:	2300      	movs	r3, #0
 80084d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80084e2:	2300      	movs	r3, #0
 80084e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80084e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80084f0:	2300      	movs	r3, #0
 80084f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80084f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80084fe:	2300      	movs	r3, #0
 8008500:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008502:	1d3b      	adds	r3, r7, #4
 8008504:	4619      	mov	r1, r3
 8008506:	4807      	ldr	r0, [pc, #28]	; (8008524 <MX_TIM1_Init+0x144>)
 8008508:	f7fc fe92 	bl	8005230 <HAL_TIMEx_ConfigBreakDeadTime>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8008512:	f7ff feb3 	bl	800827c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8008516:	4803      	ldr	r0, [pc, #12]	; (8008524 <MX_TIM1_Init+0x144>)
 8008518:	f000 f82a 	bl	8008570 <HAL_TIM_MspPostInit>

}
 800851c:	bf00      	nop
 800851e:	3758      	adds	r7, #88	; 0x58
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	240000f8 	.word	0x240000f8
 8008528:	40010000 	.word	0x40010000

0800852c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a0b      	ldr	r2, [pc, #44]	; (8008568 <HAL_TIM_PWM_MspInit+0x3c>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d10e      	bne.n	800855c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800853e:	4b0b      	ldr	r3, [pc, #44]	; (800856c <HAL_TIM_PWM_MspInit+0x40>)
 8008540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008544:	4a09      	ldr	r2, [pc, #36]	; (800856c <HAL_TIM_PWM_MspInit+0x40>)
 8008546:	f043 0301 	orr.w	r3, r3, #1
 800854a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800854e:	4b07      	ldr	r3, [pc, #28]	; (800856c <HAL_TIM_PWM_MspInit+0x40>)
 8008550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800855c:	bf00      	nop
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	40010000 	.word	0x40010000
 800856c:	58024400 	.word	0x58024400

08008570 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b088      	sub	sp, #32
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008578:	f107 030c 	add.w	r3, r7, #12
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	605a      	str	r2, [r3, #4]
 8008582:	609a      	str	r2, [r3, #8]
 8008584:	60da      	str	r2, [r3, #12]
 8008586:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a13      	ldr	r2, [pc, #76]	; (80085dc <HAL_TIM_MspPostInit+0x6c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d11f      	bne.n	80085d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008592:	4b13      	ldr	r3, [pc, #76]	; (80085e0 <HAL_TIM_MspPostInit+0x70>)
 8008594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008598:	4a11      	ldr	r2, [pc, #68]	; (80085e0 <HAL_TIM_MspPostInit+0x70>)
 800859a:	f043 0310 	orr.w	r3, r3, #16
 800859e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80085a2:	4b0f      	ldr	r3, [pc, #60]	; (80085e0 <HAL_TIM_MspPostInit+0x70>)
 80085a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085a8:	f003 0310 	and.w	r3, r3, #16
 80085ac:	60bb      	str	r3, [r7, #8]
 80085ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80085b0:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80085b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085b6:	2302      	movs	r3, #2
 80085b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085be:	2300      	movs	r3, #0
 80085c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80085c2:	2301      	movs	r3, #1
 80085c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80085c6:	f107 030c 	add.w	r3, r7, #12
 80085ca:	4619      	mov	r1, r3
 80085cc:	4805      	ldr	r0, [pc, #20]	; (80085e4 <HAL_TIM_MspPostInit+0x74>)
 80085ce:	f7f9 f997 	bl	8001900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80085d2:	bf00      	nop
 80085d4:	3720      	adds	r7, #32
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40010000 	.word	0x40010000
 80085e0:	58024400 	.word	0x58024400
 80085e4:	58021000 	.word	0x58021000

080085e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80085ec:	4b22      	ldr	r3, [pc, #136]	; (8008678 <MX_USART3_UART_Init+0x90>)
 80085ee:	4a23      	ldr	r2, [pc, #140]	; (800867c <MX_USART3_UART_Init+0x94>)
 80085f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80085f2:	4b21      	ldr	r3, [pc, #132]	; (8008678 <MX_USART3_UART_Init+0x90>)
 80085f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80085f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80085fa:	4b1f      	ldr	r3, [pc, #124]	; (8008678 <MX_USART3_UART_Init+0x90>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008600:	4b1d      	ldr	r3, [pc, #116]	; (8008678 <MX_USART3_UART_Init+0x90>)
 8008602:	2200      	movs	r2, #0
 8008604:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008606:	4b1c      	ldr	r3, [pc, #112]	; (8008678 <MX_USART3_UART_Init+0x90>)
 8008608:	2200      	movs	r2, #0
 800860a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800860c:	4b1a      	ldr	r3, [pc, #104]	; (8008678 <MX_USART3_UART_Init+0x90>)
 800860e:	220c      	movs	r2, #12
 8008610:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008612:	4b19      	ldr	r3, [pc, #100]	; (8008678 <MX_USART3_UART_Init+0x90>)
 8008614:	2200      	movs	r2, #0
 8008616:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008618:	4b17      	ldr	r3, [pc, #92]	; (8008678 <MX_USART3_UART_Init+0x90>)
 800861a:	2200      	movs	r2, #0
 800861c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800861e:	4b16      	ldr	r3, [pc, #88]	; (8008678 <MX_USART3_UART_Init+0x90>)
 8008620:	2200      	movs	r2, #0
 8008622:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008624:	4b14      	ldr	r3, [pc, #80]	; (8008678 <MX_USART3_UART_Init+0x90>)
 8008626:	2200      	movs	r2, #0
 8008628:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800862a:	4b13      	ldr	r3, [pc, #76]	; (8008678 <MX_USART3_UART_Init+0x90>)
 800862c:	2200      	movs	r2, #0
 800862e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008630:	4811      	ldr	r0, [pc, #68]	; (8008678 <MX_USART3_UART_Init+0x90>)
 8008632:	f7fc fe7b 	bl	800532c <HAL_UART_Init>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800863c:	f7ff fe1e 	bl	800827c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008640:	2100      	movs	r1, #0
 8008642:	480d      	ldr	r0, [pc, #52]	; (8008678 <MX_USART3_UART_Init+0x90>)
 8008644:	f7ff f9ab 	bl	800799e <HAL_UARTEx_SetTxFifoThreshold>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800864e:	f7ff fe15 	bl	800827c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008652:	2100      	movs	r1, #0
 8008654:	4808      	ldr	r0, [pc, #32]	; (8008678 <MX_USART3_UART_Init+0x90>)
 8008656:	f7ff f9e0 	bl	8007a1a <HAL_UARTEx_SetRxFifoThreshold>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8008660:	f7ff fe0c 	bl	800827c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8008664:	4804      	ldr	r0, [pc, #16]	; (8008678 <MX_USART3_UART_Init+0x90>)
 8008666:	f7ff f961 	bl	800792c <HAL_UARTEx_DisableFifoMode>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8008670:	f7ff fe04 	bl	800827c <Error_Handler>
  }

}
 8008674:	bf00      	nop
 8008676:	bd80      	pop	{r7, pc}
 8008678:	24000138 	.word	0x24000138
 800867c:	40004800 	.word	0x40004800

08008680 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08a      	sub	sp, #40	; 0x28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008688:	f107 0314 	add.w	r3, r7, #20
 800868c:	2200      	movs	r2, #0
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	605a      	str	r2, [r3, #4]
 8008692:	609a      	str	r2, [r3, #8]
 8008694:	60da      	str	r2, [r3, #12]
 8008696:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a1a      	ldr	r2, [pc, #104]	; (8008708 <HAL_UART_MspInit+0x88>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d12e      	bne.n	8008700 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80086a2:	4b1a      	ldr	r3, [pc, #104]	; (800870c <HAL_UART_MspInit+0x8c>)
 80086a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086a8:	4a18      	ldr	r2, [pc, #96]	; (800870c <HAL_UART_MspInit+0x8c>)
 80086aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80086b2:	4b16      	ldr	r3, [pc, #88]	; (800870c <HAL_UART_MspInit+0x8c>)
 80086b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086bc:	613b      	str	r3, [r7, #16]
 80086be:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80086c0:	4b12      	ldr	r3, [pc, #72]	; (800870c <HAL_UART_MspInit+0x8c>)
 80086c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086c6:	4a11      	ldr	r2, [pc, #68]	; (800870c <HAL_UART_MspInit+0x8c>)
 80086c8:	f043 0308 	orr.w	r3, r3, #8
 80086cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086d0:	4b0e      	ldr	r3, [pc, #56]	; (800870c <HAL_UART_MspInit+0x8c>)
 80086d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086d6:	f003 0308 	and.w	r3, r3, #8
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80086de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80086e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e4:	2302      	movs	r3, #2
 80086e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ec:	2300      	movs	r3, #0
 80086ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80086f0:	2307      	movs	r3, #7
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086f4:	f107 0314 	add.w	r3, r7, #20
 80086f8:	4619      	mov	r1, r3
 80086fa:	4805      	ldr	r0, [pc, #20]	; (8008710 <HAL_UART_MspInit+0x90>)
 80086fc:	f7f9 f900 	bl	8001900 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008700:	bf00      	nop
 8008702:	3728      	adds	r7, #40	; 0x28
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	40004800 	.word	0x40004800
 800870c:	58024400 	.word	0x58024400
 8008710:	58020c00 	.word	0x58020c00

08008714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800874c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800871a:	e003      	b.n	8008724 <LoopCopyDataInit>

0800871c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800871c:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800871e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008722:	3104      	adds	r1, #4

08008724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008724:	480b      	ldr	r0, [pc, #44]	; (8008754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008726:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800872a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800872c:	d3f6      	bcc.n	800871c <CopyDataInit>
  ldr  r2, =_sbss
 800872e:	4a0b      	ldr	r2, [pc, #44]	; (800875c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008730:	e002      	b.n	8008738 <LoopFillZerobss>

08008732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008734:	f842 3b04 	str.w	r3, [r2], #4

08008738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008738:	4b09      	ldr	r3, [pc, #36]	; (8008760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800873a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800873c:	d3f9      	bcc.n	8008732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800873e:	f7ff fded 	bl	800831c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008742:	f000 f811 	bl	8008768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008746:	f7ff fcb7 	bl	80080b8 <main>
  bx  lr    
 800874a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800874c:	2407ffff 	.word	0x2407ffff
  ldr  r3, =_sidata
 8008750:	08008808 	.word	0x08008808
  ldr  r0, =_sdata
 8008754:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8008758:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 800875c:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8008760:	240001c4 	.word	0x240001c4

08008764 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008764:	e7fe      	b.n	8008764 <ADC3_IRQHandler>
	...

08008768 <__libc_init_array>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	4e0d      	ldr	r6, [pc, #52]	; (80087a0 <__libc_init_array+0x38>)
 800876c:	4c0d      	ldr	r4, [pc, #52]	; (80087a4 <__libc_init_array+0x3c>)
 800876e:	1ba4      	subs	r4, r4, r6
 8008770:	10a4      	asrs	r4, r4, #2
 8008772:	2500      	movs	r5, #0
 8008774:	42a5      	cmp	r5, r4
 8008776:	d109      	bne.n	800878c <__libc_init_array+0x24>
 8008778:	4e0b      	ldr	r6, [pc, #44]	; (80087a8 <__libc_init_array+0x40>)
 800877a:	4c0c      	ldr	r4, [pc, #48]	; (80087ac <__libc_init_array+0x44>)
 800877c:	f000 f820 	bl	80087c0 <_init>
 8008780:	1ba4      	subs	r4, r4, r6
 8008782:	10a4      	asrs	r4, r4, #2
 8008784:	2500      	movs	r5, #0
 8008786:	42a5      	cmp	r5, r4
 8008788:	d105      	bne.n	8008796 <__libc_init_array+0x2e>
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008790:	4798      	blx	r3
 8008792:	3501      	adds	r5, #1
 8008794:	e7ee      	b.n	8008774 <__libc_init_array+0xc>
 8008796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800879a:	4798      	blx	r3
 800879c:	3501      	adds	r5, #1
 800879e:	e7f2      	b.n	8008786 <__libc_init_array+0x1e>
 80087a0:	08008800 	.word	0x08008800
 80087a4:	08008800 	.word	0x08008800
 80087a8:	08008800 	.word	0x08008800
 80087ac:	08008804 	.word	0x08008804

080087b0 <memset>:
 80087b0:	4402      	add	r2, r0
 80087b2:	4603      	mov	r3, r0
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d100      	bne.n	80087ba <memset+0xa>
 80087b8:	4770      	bx	lr
 80087ba:	f803 1b01 	strb.w	r1, [r3], #1
 80087be:	e7f9      	b.n	80087b4 <memset+0x4>

080087c0 <_init>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	bf00      	nop
 80087c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c6:	bc08      	pop	{r3}
 80087c8:	469e      	mov	lr, r3
 80087ca:	4770      	bx	lr

080087cc <_fini>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	bf00      	nop
 80087d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d2:	bc08      	pop	{r3}
 80087d4:	469e      	mov	lr, r3
 80087d6:	4770      	bx	lr
