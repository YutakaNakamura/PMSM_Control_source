
STM32H743ZI_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b398  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800b630  0800b630  0001b630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6f0  0800b6f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6f0  0800b6f0  0001b6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6f8  0800b6f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b6f8  0800b6f8  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b700  0800b700  0001b700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800b708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030b8  24000074  0800b77c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400312c  0800b77c  0002312c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005455d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e5e  00000000  00000000  000745ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d38  00000000  00000000  0007c460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b30  00000000  00000000  0007e198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003de1d  00000000  00000000  0007fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fd43  00000000  00000000  000bdae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0018332c  00000000  00000000  000dd828  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00260b54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007df8  00000000  00000000  00260bd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b618 	.word	0x0800b618

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	0800b618 	.word	0x0800b618

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f002 f95b 	bl	8002898 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e2:	f003 f8f3 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 80005e6:	4601      	mov	r1, r0
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_Init+0x60>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <HAL_Init+0x64>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	f003 031f 	and.w	r3, r3, #31
 80005fa:	fa21 f303 	lsr.w	r3, r1, r3
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <HAL_Init+0x68>)
 8000600:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */  
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_Init+0x60>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <HAL_Init+0x64>)
 8000610:	5ccb      	ldrb	r3, [r1, r3]
 8000612:	f003 031f 	and.w	r3, r3, #31
 8000616:	fa22 f303 	lsr.w	r3, r2, r3
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_Init+0x6c>)
 800061c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f812 	bl	8000648 <HAL_InitTick>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e002      	b.n	8000634 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f00a fb6f 	bl	800ad10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58024400 	.word	0x58024400
 800063c:	0800b6e0 	.word	0x0800b6e0
 8000640:	24000008 	.word	0x24000008
 8000644:	2400000c 	.word	0x2400000c

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_InitTick+0x60>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	e021      	b.n	80006a0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <HAL_InitTick+0x64>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_InitTick+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f002 f943 	bl	80028fe <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f002 f90d 	bl	80028ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_InitTick+0x68>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000004 	.word	0x24000004
 80006ac:	24000008 	.word	0x24000008
 80006b0:	24000000 	.word	0x24000000

080006b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x20>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x24>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_IncTick+0x24>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	24000004 	.word	0x24000004
 80006d8:	24000090 	.word	0x24000090

080006dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_GetTick+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	24000090 	.word	0x24000090

080006f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <HAL_GetREVID+0x14>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	0c1b      	lsrs	r3, r3, #16
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	5c001000 	.word	0x5c001000

0800070c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	43db      	mvns	r3, r3
 800071e:	401a      	ands	r2, r3
 8000720:	4904      	ldr	r1, [pc, #16]	; (8000734 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	4313      	orrs	r3, r2
 8000726:	604b      	str	r3, [r1, #4]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	58000400 	.word	0x58000400

08000738 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	431a      	orrs	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	609a      	str	r2, [r3, #8]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	431a      	orrs	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	609a      	str	r2, [r3, #8]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007a0:	b490      	push	{r4, r7}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3360      	adds	r3, #96	; 0x60
 80007b2:	461a      	mov	r2, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	430b      	orrs	r3, r1
 80007cc:	4313      	orrs	r3, r2
 80007ce:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc90      	pop	{r4, r7}
 80007d8:	4770      	bx	lr

080007da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80007da:	b490      	push	{r4, r7}
 80007dc:	b084      	sub	sp, #16
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	3360      	adds	r3, #96	; 0x60
 80007ea:	461a      	mov	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	6023      	str	r3, [r4, #0]
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bc90      	pop	{r4, r7}
 8000808:	4770      	bx	lr

0800080a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800081a:	2b00      	cmp	r3, #0
 800081c:	d101      	bne.n	8000822 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800081e:	2301      	movs	r3, #1
 8000820:	e000      	b.n	8000824 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000822:	2300      	movs	r3, #0
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000830:	b490      	push	{r4, r7}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3330      	adds	r3, #48	; 0x30
 8000840:	461a      	mov	r2, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	0a1b      	lsrs	r3, r3, #8
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	f003 030c 	and.w	r3, r3, #12
 800084c:	4413      	add	r3, r2
 800084e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000850:	6822      	ldr	r2, [r4, #0]
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	f003 031f 	and.w	r3, r3, #31
 8000858:	211f      	movs	r1, #31
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	401a      	ands	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	0e9b      	lsrs	r3, r3, #26
 8000866:	f003 011f 	and.w	r1, r3, #31
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	f003 031f 	and.w	r3, r3, #31
 8000870:	fa01 f303 	lsl.w	r3, r1, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bc90      	pop	{r4, r7}
 8000880:	4770      	bx	lr

08000882 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000892:	2b00      	cmp	r3, #0
 8000894:	d101      	bne.n	800089a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000896:	2301      	movs	r3, #1
 8000898:	e000      	b.n	800089c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80008a8:	b490      	push	{r4, r7}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3314      	adds	r3, #20
 80008b8:	461a      	mov	r2, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	0e5b      	lsrs	r3, r3, #25
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	4413      	add	r3, r2
 80008c6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80008c8:	6822      	ldr	r2, [r4, #0]
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	0d1b      	lsrs	r3, r3, #20
 80008ce:	f003 031f 	and.w	r3, r3, #31
 80008d2:	2107      	movs	r1, #7
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	401a      	ands	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	0d1b      	lsrs	r3, r3, #20
 80008e0:	f003 031f 	and.w	r3, r3, #31
 80008e4:	6879      	ldr	r1, [r7, #4]
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc90      	pop	{r4, r7}
 80008f6:	4770      	bx	lr

080008f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000910:	43db      	mvns	r3, r3
 8000912:	401a      	ands	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0318 	and.w	r3, r3, #24
 800091a:	4908      	ldr	r1, [pc, #32]	; (800093c <LL_ADC_SetChannelSingleDiff+0x44>)
 800091c:	40d9      	lsrs	r1, r3
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	400b      	ands	r3, r1
 8000922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000926:	431a      	orrs	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	000fffff 	.word	0x000fffff

08000940 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	f003 031f 	and.w	r3, r3, #31
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000986:	4013      	ands	r3, r2
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	6093      	str	r3, [r2, #8]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	5fffffc0 	.word	0x5fffffc0

0800099c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009b0:	d101      	bne.n	80009b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80009b2:	2301      	movs	r3, #1
 80009b4:	e000      	b.n	80009b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80009d2:	4013      	ands	r3, r2
 80009d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	6fffffc0 	.word	0x6fffffc0

080009ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000a00:	d101      	bne.n	8000a06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d101      	bne.n	8000a2c <LL_ADC_IsEnabled+0x18>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <LL_ADC_IsEnabled+0x1a>
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d101      	bne.n	8000a52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e000      	b.n	8000a54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	d101      	bne.n	8000a78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e18c      	b.n	8000dbc <HAL_ADC_Init+0x334>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d109      	bne.n	8000ac4 <HAL_ADC_Init+0x3c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f009 fe2b 	bl	800a70c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff67 	bl	800099c <LL_ADC_IsDeepPowerDownEnabled>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d004      	beq.n	8000ade <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */ 
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff4d 	bl	8000978 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff82 	bl	80009ec <LL_ADC_IsInternalRegulatorEnabled>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d113      	bne.n	8000b16 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff66 	bl	80009c4 <LL_ADC_EnableInternalRegulator>
    
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000af8:	4b99      	ldr	r3, [pc, #612]	; (8000d60 <HAL_ADC_Init+0x2d8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	099b      	lsrs	r3, r3, #6
 8000afe:	4a99      	ldr	r2, [pc, #612]	; (8000d64 <HAL_ADC_Init+0x2dc>)
 8000b00:	fba2 2303 	umull	r2, r3, r2, r3
 8000b04:	099b      	lsrs	r3, r3, #6
 8000b06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000b08:	e002      	b.n	8000b10 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1f9      	bne.n	8000b0a <HAL_ADC_Init+0x82>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff66 	bl	80009ec <LL_ADC_IsInternalRegulatorEnabled>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10d      	bne.n	8000b42 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b2a:	f043 0210 	orr.w	r2, r3, #16
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f043 0201 	orr.w	r2, r3, #1
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	77fb      	strb	r3, [r7, #31]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff77 	bl	8000a3a <LL_ADC_REG_IsConversionOngoing>
 8000b4c:	6178      	str	r0, [r7, #20]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b52:	f003 0310 	and.w	r3, r3, #16
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f040 8127 	bne.w	8000daa <HAL_ADC_Init+0x322>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f040 8123 	bne.w	8000daa <HAL_ADC_Init+0x322>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b6c:	f043 0202 	orr.w	r2, r3, #2
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff4b 	bl	8000a14 <LL_ADC_IsEnabled>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d136      	bne.n	8000bf2 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a77      	ldr	r2, [pc, #476]	; (8000d68 <HAL_ADC_Init+0x2e0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d004      	beq.n	8000b98 <HAL_ADC_Init+0x110>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a76      	ldr	r2, [pc, #472]	; (8000d6c <HAL_ADC_Init+0x2e4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d10e      	bne.n	8000bb6 <HAL_ADC_Init+0x12e>
 8000b98:	4873      	ldr	r0, [pc, #460]	; (8000d68 <HAL_ADC_Init+0x2e0>)
 8000b9a:	f7ff ff3b 	bl	8000a14 <LL_ADC_IsEnabled>
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	4872      	ldr	r0, [pc, #456]	; (8000d6c <HAL_ADC_Init+0x2e4>)
 8000ba2:	f7ff ff37 	bl	8000a14 <LL_ADC_IsEnabled>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4323      	orrs	r3, r4
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bf0c      	ite	eq
 8000bae:	2301      	moveq	r3, #1
 8000bb0:	2300      	movne	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	e008      	b.n	8000bc8 <HAL_ADC_Init+0x140>
 8000bb6:	486e      	ldr	r0, [pc, #440]	; (8000d70 <HAL_ADC_Init+0x2e8>)
 8000bb8:	f7ff ff2c 	bl	8000a14 <LL_ADC_IsEnabled>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2301      	moveq	r3, #1
 8000bc4:	2300      	movne	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d012      	beq.n	8000bf2 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a65      	ldr	r2, [pc, #404]	; (8000d68 <HAL_ADC_Init+0x2e0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d004      	beq.n	8000be0 <HAL_ADC_Init+0x158>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a64      	ldr	r2, [pc, #400]	; (8000d6c <HAL_ADC_Init+0x2e4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d101      	bne.n	8000be4 <HAL_ADC_Init+0x15c>
 8000be0:	4a64      	ldr	r2, [pc, #400]	; (8000d74 <HAL_ADC_Init+0x2ec>)
 8000be2:	e000      	b.n	8000be6 <HAL_ADC_Init+0x15e>
 8000be4:	4a64      	ldr	r2, [pc, #400]	; (8000d78 <HAL_ADC_Init+0x2f0>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	4619      	mov	r1, r3
 8000bec:	4610      	mov	r0, r2
 8000bee:	f7ff fda3 	bl	8000738 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000bf2:	f7ff fd7f 	bl	80006f4 <HAL_GetREVID>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	f241 0303 	movw	r3, #4099	; 0x1003
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d914      	bls.n	8000c2a <HAL_ADC_Init+0x1a2>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	2b10      	cmp	r3, #16
 8000c06:	d110      	bne.n	8000c2a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7d5b      	ldrb	r3, [r3, #21]
 8000c0c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c12:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000c18:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7f1b      	ldrb	r3, [r3, #28]
 8000c1e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000c20:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c22:	f043 030c 	orr.w	r3, r3, #12
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	e00d      	b.n	8000c46 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7d5b      	ldrb	r3, [r3, #21]
 8000c2e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c34:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000c3a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	7f1b      	ldrb	r3, [r3, #28]
 8000c40:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
    }
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7f1b      	ldrb	r3, [r3, #28]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d106      	bne.n	8000c5c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a1b      	ldr	r3, [r3, #32]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	045b      	lsls	r3, r3, #17
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d009      	beq.n	8000c78 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c68:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c70:	4313      	orrs	r3, r2
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <HAL_ADC_Init+0x2f4>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	6812      	ldr	r2, [r2, #0]
 8000c86:	69b9      	ldr	r1, [r7, #24]
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fed2 	bl	8000a3a <LL_ADC_REG_IsConversionOngoing>
 8000c96:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fedf 	bl	8000a60 <LL_ADC_INJ_IsConversionOngoing>
 8000ca2:	60f8      	str	r0, [r7, #12]
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d149      	bne.n	8000d3e <HAL_ADC_Init+0x2b6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d146      	bne.n	8000d3e <HAL_ADC_Init+0x2b6>
       )
    {
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7d1b      	ldrb	r3, [r3, #20]
 8000cb4:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement)  );
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <HAL_ADC_Init+0x2f8>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	6812      	ldr	r2, [r2, #0]
 8000ccc:	69b9      	ldr	r1, [r7, #24]
 8000cce:	430b      	orrs	r3, r1
 8000cd0:	60d3      	str	r3, [r2, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d11a      	bne.n	8000d12 <HAL_ADC_Init+0x28a>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
        
      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce0:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <HAL_ADC_Init+0x2fc>)
 8000cea:	4013      	ands	r3, r2
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000cf0:	0411      	lsls	r1, r2, #16
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000cf6:	4311      	orrs	r1, r2
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cfc:	4311      	orrs	r1, r2
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000d02:	430a      	orrs	r2, r1
 8000d04:	431a      	orrs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f042 0201 	orr.w	r2, r2, #1
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	e007      	b.n	8000d22 <HAL_ADC_Init+0x29a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 0201 	bic.w	r2, r2, #1
 8000d20:	611a      	str	r2, [r3, #16]
      }
      
      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 fd99 	bl	8001870 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d120      	bne.n	8000d88 <HAL_ADC_Init+0x300>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f023 010f 	bic.w	r1, r3, #15
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	1e5a      	subs	r2, r3, #1
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d5e:	e01b      	b.n	8000d98 <HAL_ADC_Init+0x310>
 8000d60:	24000008 	.word	0x24000008
 8000d64:	053e2d63 	.word	0x053e2d63
 8000d68:	40022000 	.word	0x40022000
 8000d6c:	40022100 	.word	0x40022100
 8000d70:	58026000 	.word	0x58026000
 8000d74:	40022300 	.word	0x40022300
 8000d78:	58026300 	.word	0x58026300
 8000d7c:	fff0c003 	.word	0xfff0c003
 8000d80:	ffffbffc 	.word	0xffffbffc
 8000d84:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 020f 	bic.w	r2, r2, #15
 8000d96:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d9c:	f023 0303 	bic.w	r3, r3, #3
 8000da0:	f043 0201 	orr.w	r2, r3, #1
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	655a      	str	r2, [r3, #84]	; 0x54
 8000da8:	e007      	b.n	8000dba <HAL_ADC_Init+0x332>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dae:	f043 0210 	orr.w	r2, r3, #16
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dba:	7ffb      	ldrb	r3, [r7, #31]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3724      	adds	r7, #36	; 0x24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd90      	pop	{r4, r7, pc}

08000dc4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a87      	ldr	r2, [pc, #540]	; (8001004 <HAL_ADC_IRQHandler+0x240>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d004      	beq.n	8000df4 <HAL_ADC_IRQHandler+0x30>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a86      	ldr	r2, [pc, #536]	; (8001008 <HAL_ADC_IRQHandler+0x244>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d101      	bne.n	8000df8 <HAL_ADC_IRQHandler+0x34>
 8000df4:	4b85      	ldr	r3, [pc, #532]	; (800100c <HAL_ADC_IRQHandler+0x248>)
 8000df6:	e000      	b.n	8000dfa <HAL_ADC_IRQHandler+0x36>
 8000df8:	4b85      	ldr	r3, [pc, #532]	; (8001010 <HAL_ADC_IRQHandler+0x24c>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fda0 	bl	8000940 <LL_ADC_GetMultimode>
 8000e00:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d017      	beq.n	8000e3c <HAL_ADC_IRQHandler+0x78>
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d012      	beq.n	8000e3c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d105      	bne.n	8000e2e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e26:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 ff49 	bl	8001cc6 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2202      	movs	r2, #2
 8000e3a:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d004      	beq.n	8000e50 <HAL_ADC_IRQHandler+0x8c>
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10a      	bne.n	8000e66 <HAL_ADC_IRQHandler+0xa2>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0308 	and.w	r3, r3, #8
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 8083 	beq.w	8000f62 <HAL_ADC_IRQHandler+0x19e>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d07d      	beq.n	8000f62 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d105      	bne.n	8000e7e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if(LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fcc1 	bl	800080a <LL_ADC_REG_IsTriggerSourceSWStart>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d062      	beq.n	8000f54 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a5d      	ldr	r2, [pc, #372]	; (8001008 <HAL_ADC_IRQHandler+0x244>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d002      	beq.n	8000e9e <HAL_ADC_IRQHandler+0xda>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	e000      	b.n	8000ea0 <HAL_ADC_IRQHandler+0xdc>
 8000e9e:	4b59      	ldr	r3, [pc, #356]	; (8001004 <HAL_ADC_IRQHandler+0x240>)
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6812      	ldr	r2, [r2, #0]
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d008      	beq.n	8000eba <HAL_ADC_IRQHandler+0xf6>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <HAL_ADC_IRQHandler+0xf6>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d002      	beq.n	8000eba <HAL_ADC_IRQHandler+0xf6>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	2b09      	cmp	r3, #9
 8000eb8:	d104      	bne.n	8000ec4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	623b      	str	r3, [r7, #32]
 8000ec2:	e00c      	b.n	8000ede <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a4f      	ldr	r2, [pc, #316]	; (8001008 <HAL_ADC_IRQHandler+0x244>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d002      	beq.n	8000ed4 <HAL_ADC_IRQHandler+0x110>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	e000      	b.n	8000ed6 <HAL_ADC_IRQHandler+0x112>
 8000ed4:	4b4b      	ldr	r3, [pc, #300]	; (8001004 <HAL_ADC_IRQHandler+0x240>)
 8000ed6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	623b      	str	r3, [r7, #32]
      }
      
      /* Carry on if continuous mode is disabled */
      if (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d135      	bne.n	8000f54 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	2b08      	cmp	r3, #8
 8000ef4:	d12e      	bne.n	8000f54 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fd9d 	bl	8000a3a <LL_ADC_REG_IsConversionOngoing>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11a      	bne.n	8000f3c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 020c 	bic.w	r2, r2, #12
 8000f14:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
            
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d112      	bne.n	8000f54 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f32:	f043 0201 	orr.w	r2, r3, #1
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	655a      	str	r2, [r3, #84]	; 0x54
 8000f3a:	e00b      	b.n	8000f54 <HAL_ADC_IRQHandler+0x190>
            }           
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f40:	f043 0210 	orr.w	r2, r3, #16
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	655a      	str	r2, [r3, #84]	; 0x54
            
            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4c:	f043 0201 	orr.w	r2, r3, #1
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f96f 	bl	8001238 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f003 0320 	and.w	r3, r3, #32
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d004      	beq.n	8000f76 <HAL_ADC_IRQHandler+0x1b2>
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	f003 0320 	and.w	r3, r3, #32
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10b      	bne.n	8000f8e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )      
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80a0 	beq.w	80010c2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )      
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 809a 	beq.w	80010c2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d105      	bne.n	8000fa6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f9e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fc69 	bl	8000882 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8000fb0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fc27 	bl	800080a <LL_ADC_REG_IsTriggerSourceSWStart>
 8000fbc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a11      	ldr	r2, [pc, #68]	; (8001008 <HAL_ADC_IRQHandler+0x244>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d002      	beq.n	8000fce <HAL_ADC_IRQHandler+0x20a>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	e000      	b.n	8000fd0 <HAL_ADC_IRQHandler+0x20c>
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_ADC_IRQHandler+0x240>)
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d008      	beq.n	8000fea <HAL_ADC_IRQHandler+0x226>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <HAL_ADC_IRQHandler+0x226>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b06      	cmp	r3, #6
 8000fe2:	d002      	beq.n	8000fea <HAL_ADC_IRQHandler+0x226>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2b07      	cmp	r3, #7
 8000fe8:	d104      	bne.n	8000ff4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	623b      	str	r3, [r7, #32]
 8000ff2:	e014      	b.n	800101e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a03      	ldr	r2, [pc, #12]	; (8001008 <HAL_ADC_IRQHandler+0x244>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d00a      	beq.n	8001014 <HAL_ADC_IRQHandler+0x250>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	e008      	b.n	8001016 <HAL_ADC_IRQHandler+0x252>
 8001004:	40022000 	.word	0x40022000
 8001008:	40022100 	.word	0x40022100
 800100c:	40022300 	.word	0x40022300
 8001010:	58026300 	.word	0x58026300
 8001014:	4b84      	ldr	r3, [pc, #528]	; (8001228 <HAL_ADC_IRQHandler+0x464>)
 8001016:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d10c      	bne.n	800103e <HAL_ADC_IRQHandler+0x27a>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800102a:	2b00      	cmp	r3, #0
 800102c:	d142      	bne.n	80010b4 <HAL_ADC_IRQHandler+0x2f0>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d03f      	beq.n	80010b4 <HAL_ADC_IRQHandler+0x2f0>
        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
         (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == 0UL)    )   )   )
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800103a:	2b00      	cmp	r3, #0
 800103c:	d13a      	bne.n	80010b4 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001048:	2b40      	cmp	r3, #64	; 0x40
 800104a:	d133      	bne.n	80010b4 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d12e      	bne.n	80010b4 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fd00 	bl	8000a60 <LL_ADC_INJ_IsConversionOngoing>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d11a      	bne.n	800109c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001074:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108a:	2b00      	cmp	r3, #0
 800108c:	d112      	bne.n	80010b4 <HAL_ADC_IRQHandler+0x2f0>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001092:	f043 0201 	orr.w	r2, r3, #1
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	655a      	str	r2, [r3, #84]	; 0x54
 800109a:	e00b      	b.n	80010b4 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a0:	f043 0210 	orr.w	r2, r3, #16
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	655a      	str	r2, [r3, #84]	; 0x54
          
            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ac:	f043 0201 	orr.w	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of 
              sequence.    */    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 fdde 	bl	8001c76 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2260      	movs	r2, #96	; 0x60
 80010c0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d011      	beq.n	80010f0 <HAL_ADC_IRQHandler+0x32c>
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00c      	beq.n	80010f0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f8b2 	bl	800124c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d012      	beq.n	8001120 <HAL_ADC_IRQHandler+0x35c>
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00d      	beq.n	8001120 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001108:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fdc4 	bl	8001c9e <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800111e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001126:	2b00      	cmp	r3, #0
 8001128:	d012      	beq.n	8001150 <HAL_ADC_IRQHandler+0x38c>
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00d      	beq.n	8001150 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001138:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 fdb6 	bl	8001cb2 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	2b00      	cmp	r3, #0
 8001158:	d043      	beq.n	80011e2 <HAL_ADC_IRQHandler+0x41e>
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	2b00      	cmp	r3, #0
 8001162:	d03e      	beq.n	80011e2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800116c:	2301      	movs	r3, #1
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
 8001170:	e021      	b.n	80011b6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d015      	beq.n	80011a4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled, 
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a2a      	ldr	r2, [pc, #168]	; (8001228 <HAL_ADC_IRQHandler+0x464>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d004      	beq.n	800118c <HAL_ADC_IRQHandler+0x3c8>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a29      	ldr	r2, [pc, #164]	; (800122c <HAL_ADC_IRQHandler+0x468>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_ADC_IRQHandler+0x3cc>
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <HAL_ADC_IRQHandler+0x46c>)
 800118e:	e000      	b.n	8001192 <HAL_ADC_IRQHandler+0x3ce>
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <HAL_ADC_IRQHandler+0x470>)
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fbe2 	bl	800095c <LL_ADC_GetMultiDMATransfer>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800119e:	2301      	movs	r3, #1
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
 80011a2:	e008      	b.n	80011b6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_ADC_IRQHandler+0x3f2>
      {
        overrun_error = 1UL;
 80011b2:	2301      	movs	r3, #1
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      }
    }
        
    if (overrun_error == 1UL)
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d10e      	bne.n	80011da <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011cc:	f043 0202 	orr.w	r2, r3, #2
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f843 	bl	8001260 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2210      	movs	r2, #16
 80011e0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF)) 
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d018      	beq.n	800121e <HAL_ADC_IRQHandler+0x45a>
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d013      	beq.n	800121e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	f043 0208 	orr.w	r2, r3, #8
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001216:	601a      	str	r2, [r3, #0]
    
    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 fd36 	bl	8001c8a <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40022000 	.word	0x40022000
 800122c:	40022100 	.word	0x40022100
 8001230:	40022300 	.word	0x40022300
 8001234:	58026300 	.word	0x58026300

08001238 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b099      	sub	sp, #100	; 0x64
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is  
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));  
  
  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	4aa2      	ldr	r2, [pc, #648]	; (8001518 <HAL_ADC_ConfigChannel+0x2a4>)
 800128e:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
    }
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_ADC_ConfigChannel+0x2a>
 800129a:	2302      	movs	r3, #2
 800129c:	e2cf      	b.n	800183e <HAL_ADC_ConfigChannel+0x5ca>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fbc5 	bl	8000a3a <LL_ADC_REG_IsConversionOngoing>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f040 82b4 	bne.w	8001820 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d108      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x62>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	0e9b      	lsrs	r3, r3, #26
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	2201      	movs	r2, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	e00e      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x80>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	2201      	movs	r2, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	69d1      	ldr	r1, [r2, #28]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	430b      	orrs	r3, r1
 8001300:	61d3      	str	r3, [r2, #28]
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	6859      	ldr	r1, [r3, #4]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	f7ff fa8e 	bl	8000830 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fb8e 	bl	8000a3a <LL_ADC_REG_IsConversionOngoing>
 800131e:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fb9b 	bl	8000a60 <LL_ADC_INJ_IsConversionOngoing>
 800132a:	6578      	str	r0, [r7, #84]	; 0x54
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 800132c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800132e:	2b00      	cmp	r3, #0
 8001330:	f040 80a4 	bne.w	800147c <HAL_ADC_ConfigChannel+0x208>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 80a0 	bne.w	800147c <HAL_ADC_ConfigChannel+0x208>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	6819      	ldr	r1, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	461a      	mov	r2, r3
 800134a:	f7ff faad 	bl	80008a8 <LL_ADC_SetChannelSamplingTime>
      
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800134e:	4b73      	ldr	r3, [pc, #460]	; (800151c <HAL_ADC_ConfigChannel+0x2a8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x100>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	e01d      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x13c>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10b      	bne.n	800139a <HAL_ADC_ConfigChannel+0x126>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	e00a      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x13c>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	653b      	str	r3, [r7, #80]	; 0x50
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d018      	beq.n	80013ec <HAL_ADC_ConfigChannel+0x178>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	6919      	ldr	r1, [r3, #16]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013c8:	f7ff f9ea 	bl	80007a0 <LL_ADC_SetOffset>
         
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	6919      	ldr	r1, [r3, #16]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	7e5b      	ldrb	r3, [r3, #25]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d102      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x16e>
 80013dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013e0:	e000      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x170>
 80013e2:	2300      	movs	r3, #0
 80013e4:	461a      	mov	r2, r3
 80013e6:	f7ff f9f8 	bl	80007da <LL_ADC_SetOffsetSignedSaturation>
 80013ea:	e047      	b.n	800147c <HAL_ADC_ConfigChannel+0x208>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	069b      	lsls	r3, r3, #26
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d107      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x19c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800140e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001416:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	069b      	lsls	r3, r3, #26
 8001420:	429a      	cmp	r2, r3
 8001422:	d107      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x1c0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001432:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800143a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	069b      	lsls	r3, r3, #26
 8001444:	429a      	cmp	r2, r3
 8001446:	d107      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x1e4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001456:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800145e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	069b      	lsls	r3, r3, #26
 8001468:	429a      	cmp	r2, r3
 800146a:	d107      	bne.n	800147c <HAL_ADC_ConfigChannel+0x208>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800147a:	66da      	str	r2, [r3, #108]	; 0x6c
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fac7 	bl	8000a14 <LL_ADC_IsEnabled>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	f040 81d2 	bne.w	8001832 <HAL_ADC_ConfigChannel+0x5be>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	6819      	ldr	r1, [r3, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	461a      	mov	r2, r3
 800149c:	f7ff fa2c 	bl	80008f8 <LL_ADC_SetChannelSingleDiff>
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <HAL_ADC_ConfigChannel+0x2a4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	f040 80fa 	bne.w	80016a0 <HAL_ADC_ConfigChannel+0x42c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)), sConfig->SamplingTime);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10b      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x260>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0e9b      	lsrs	r3, r3, #26
 80014c2:	3301      	adds	r3, #1
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	bf94      	ite	ls
 80014cc:	2301      	movls	r3, #1
 80014ce:	2300      	movhi	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	e011      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x284>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80014e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	3301      	adds	r3, #1
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	2b09      	cmp	r3, #9
 80014f0:	bf94      	ite	ls
 80014f2:	2301      	movls	r3, #1
 80014f4:	2300      	movhi	r3, #0
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d065      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x354>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10b      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x2ac>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0e9b      	lsrs	r3, r3, #26
 800150e:	3301      	adds	r3, #1
 8001510:	069b      	lsls	r3, r3, #26
 8001512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001516:	e011      	b.n	800153c <HAL_ADC_ConfigChannel+0x2c8>
 8001518:	47ff0000 	.word	0x47ff0000
 800151c:	5c001000 	.word	0x5c001000
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800152e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	3301      	adds	r3, #1
 8001536:	069b      	lsls	r3, r3, #26
 8001538:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <HAL_ADC_ConfigChannel+0x2e8>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0e9b      	lsrs	r3, r3, #26
 800154e:	3301      	adds	r3, #1
 8001550:	f003 031f 	and.w	r3, r3, #31
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	e00f      	b.n	800157c <HAL_ADC_ConfigChannel+0x308>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001564:	fa93 f3a3 	rbit	r3, r3
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	fab3 f383 	clz	r3, r3
 8001570:	3301      	adds	r3, #1
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	2101      	movs	r1, #1
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	ea42 0103 	orr.w	r1, r2, r3
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10a      	bne.n	80015a2 <HAL_ADC_ConfigChannel+0x32e>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	0e9b      	lsrs	r3, r3, #26
 8001592:	3301      	adds	r3, #1
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	051b      	lsls	r3, r3, #20
 80015a0:	e010      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x350>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	051b      	lsls	r3, r3, #20
 80015c4:	430b      	orrs	r3, r1
 80015c6:	e066      	b.n	8001696 <HAL_ADC_ConfigChannel+0x422>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d107      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x370>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0e9b      	lsrs	r3, r3, #26
 80015da:	3301      	adds	r3, #1
 80015dc:	069b      	lsls	r3, r3, #26
 80015de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015e2:	e00d      	b.n	8001600 <HAL_ADC_ConfigChannel+0x38c>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	fa93 f3a3 	rbit	r3, r3
 80015f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	069b      	lsls	r3, r3, #26
 80015fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x3ac>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0e9b      	lsrs	r3, r3, #26
 8001612:	3301      	adds	r3, #1
 8001614:	f003 031f 	and.w	r3, r3, #31
 8001618:	2101      	movs	r1, #1
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	e00f      	b.n	8001640 <HAL_ADC_ConfigChannel+0x3cc>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	617b      	str	r3, [r7, #20]
  return(result);
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fab3 f383 	clz	r3, r3
 8001634:	3301      	adds	r3, #1
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	ea42 0103 	orr.w	r1, r2, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10d      	bne.n	800166c <HAL_ADC_ConfigChannel+0x3f8>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	0e9b      	lsrs	r3, r3, #26
 8001656:	3301      	adds	r3, #1
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	3b1e      	subs	r3, #30
 8001664:	051b      	lsls	r3, r3, #20
 8001666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800166a:	e013      	b.n	8001694 <HAL_ADC_ConfigChannel+0x420>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	60fb      	str	r3, [r7, #12]
  return(result);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	f003 021f 	and.w	r2, r3, #31
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	3b1e      	subs	r3, #30
 800168e:	051b      	lsls	r3, r3, #20
 8001690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001694:	430b      	orrs	r3, r1
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	6892      	ldr	r2, [r2, #8]
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff f904 	bl	80008a8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */
      
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f280 80c4 	bge.w	8001832 <HAL_ADC_ConfigChannel+0x5be>
      {
        /* Configuration of common ADC parameters                                 */
        
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a66      	ldr	r2, [pc, #408]	; (8001848 <HAL_ADC_ConfigChannel+0x5d4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d004      	beq.n	80016be <HAL_ADC_ConfigChannel+0x44a>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a64      	ldr	r2, [pc, #400]	; (800184c <HAL_ADC_ConfigChannel+0x5d8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x44e>
 80016be:	4b64      	ldr	r3, [pc, #400]	; (8001850 <HAL_ADC_ConfigChannel+0x5dc>)
 80016c0:	e000      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x450>
 80016c2:	4b64      	ldr	r3, [pc, #400]	; (8001854 <HAL_ADC_ConfigChannel+0x5e0>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff f85d 	bl	8000784 <LL_ADC_GetCommonPathInternalCh>
 80016ca:	64f8      	str	r0, [r7, #76]	; 0x4c
        
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a5d      	ldr	r2, [pc, #372]	; (8001848 <HAL_ADC_ConfigChannel+0x5d4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d004      	beq.n	80016e0 <HAL_ADC_ConfigChannel+0x46c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5c      	ldr	r2, [pc, #368]	; (800184c <HAL_ADC_ConfigChannel+0x5d8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d10e      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x48a>
 80016e0:	4859      	ldr	r0, [pc, #356]	; (8001848 <HAL_ADC_ConfigChannel+0x5d4>)
 80016e2:	f7ff f997 	bl	8000a14 <LL_ADC_IsEnabled>
 80016e6:	4604      	mov	r4, r0
 80016e8:	4858      	ldr	r0, [pc, #352]	; (800184c <HAL_ADC_ConfigChannel+0x5d8>)
 80016ea:	f7ff f993 	bl	8000a14 <LL_ADC_IsEnabled>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4323      	orrs	r3, r4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	bf0c      	ite	eq
 80016f6:	2301      	moveq	r3, #1
 80016f8:	2300      	movne	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	e008      	b.n	8001710 <HAL_ADC_ConfigChannel+0x49c>
 80016fe:	4856      	ldr	r0, [pc, #344]	; (8001858 <HAL_ADC_ConfigChannel+0x5e4>)
 8001700:	f7ff f988 	bl	8000a14 <LL_ADC_IsEnabled>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf0c      	ite	eq
 800170a:	2301      	moveq	r3, #1
 800170c:	2300      	movne	r3, #0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d07b      	beq.n	800180c <HAL_ADC_ConfigChannel+0x598>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a50      	ldr	r2, [pc, #320]	; (800185c <HAL_ADC_ConfigChannel+0x5e8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d12e      	bne.n	800177c <HAL_ADC_ConfigChannel+0x508>
 800171e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d129      	bne.n	800177c <HAL_ADC_ConfigChannel+0x508>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a4a      	ldr	r2, [pc, #296]	; (8001858 <HAL_ADC_ConfigChannel+0x5e4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d17f      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x5be>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a44      	ldr	r2, [pc, #272]	; (8001848 <HAL_ADC_ConfigChannel+0x5d4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d004      	beq.n	8001746 <HAL_ADC_ConfigChannel+0x4d2>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a42      	ldr	r2, [pc, #264]	; (800184c <HAL_ADC_ConfigChannel+0x5d8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_ADC_ConfigChannel+0x4d6>
 8001746:	4a42      	ldr	r2, [pc, #264]	; (8001850 <HAL_ADC_ConfigChannel+0x5dc>)
 8001748:	e000      	b.n	800174c <HAL_ADC_ConfigChannel+0x4d8>
 800174a:	4a42      	ldr	r2, [pc, #264]	; (8001854 <HAL_ADC_ConfigChannel+0x5e0>)
 800174c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800174e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001752:	4619      	mov	r1, r3
 8001754:	4610      	mov	r0, r2
 8001756:	f7ff f802 	bl	800075e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800175a:	4b41      	ldr	r3, [pc, #260]	; (8001860 <HAL_ADC_ConfigChannel+0x5ec>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	099b      	lsrs	r3, r3, #6
 8001760:	4a40      	ldr	r2, [pc, #256]	; (8001864 <HAL_ADC_ConfigChannel+0x5f0>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	099b      	lsrs	r3, r3, #6
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800176c:	e002      	b.n	8001774 <HAL_ADC_ConfigChannel+0x500>
              {
                wait_loop_index--;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	3b01      	subs	r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f9      	bne.n	800176e <HAL_ADC_ConfigChannel+0x4fa>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800177a:	e05a      	b.n	8001832 <HAL_ADC_ConfigChannel+0x5be>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a39      	ldr	r2, [pc, #228]	; (8001868 <HAL_ADC_ConfigChannel+0x5f4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d11e      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x550>
 8001786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d119      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x550>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a30      	ldr	r2, [pc, #192]	; (8001858 <HAL_ADC_ConfigChannel+0x5e4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d14b      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x5be>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a2a      	ldr	r2, [pc, #168]	; (8001848 <HAL_ADC_ConfigChannel+0x5d4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d004      	beq.n	80017ae <HAL_ADC_ConfigChannel+0x53a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a28      	ldr	r2, [pc, #160]	; (800184c <HAL_ADC_ConfigChannel+0x5d8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x53e>
 80017ae:	4a28      	ldr	r2, [pc, #160]	; (8001850 <HAL_ADC_ConfigChannel+0x5dc>)
 80017b0:	e000      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x540>
 80017b2:	4a28      	ldr	r2, [pc, #160]	; (8001854 <HAL_ADC_ConfigChannel+0x5e0>)
 80017b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f7fe ffce 	bl	800075e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017c2:	e036      	b.n	8001832 <HAL_ADC_ConfigChannel+0x5be>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a28      	ldr	r2, [pc, #160]	; (800186c <HAL_ADC_ConfigChannel+0x5f8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d131      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x5be>
 80017ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d12c      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x5be>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <HAL_ADC_ConfigChannel+0x5e4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d127      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x5be>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a18      	ldr	r2, [pc, #96]	; (8001848 <HAL_ADC_ConfigChannel+0x5d4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d004      	beq.n	80017f6 <HAL_ADC_ConfigChannel+0x582>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a16      	ldr	r2, [pc, #88]	; (800184c <HAL_ADC_ConfigChannel+0x5d8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x586>
 80017f6:	4a16      	ldr	r2, [pc, #88]	; (8001850 <HAL_ADC_ConfigChannel+0x5dc>)
 80017f8:	e000      	b.n	80017fc <HAL_ADC_ConfigChannel+0x588>
 80017fa:	4a16      	ldr	r2, [pc, #88]	; (8001854 <HAL_ADC_ConfigChannel+0x5e0>)
 80017fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001802:	4619      	mov	r1, r3
 8001804:	4610      	mov	r0, r2
 8001806:	f7fe ffaa 	bl	800075e <LL_ADC_SetCommonPathInternalCh>
 800180a:	e012      	b.n	8001832 <HAL_ADC_ConfigChannel+0x5be>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else  
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	f043 0220 	orr.w	r2, r3, #32
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	655a      	str	r2, [r3, #84]	; 0x54
          
          tmp_hal_status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800181e:	e008      	b.n	8001832 <HAL_ADC_ConfigChannel+0x5be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	f043 0220 	orr.w	r2, r3, #32
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 800183a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800183e:	4618      	mov	r0, r3
 8001840:	3764      	adds	r7, #100	; 0x64
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	40022000 	.word	0x40022000
 800184c:	40022100 	.word	0x40022100
 8001850:	40022300 	.word	0x40022300
 8001854:	58026300 	.word	0x58026300
 8001858:	58026000 	.word	0x58026000
 800185c:	cb840000 	.word	0xcb840000
 8001860:	24000008 	.word	0x24000008
 8001864:	053e2d63 	.word	0x053e2d63
 8001868:	c7520000 	.word	0xc7520000
 800186c:	cfb80000 	.word	0xcfb80000

08001870 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a73      	ldr	r2, [pc, #460]	; (8001a4c <ADC_ConfigureBoostMode+0x1dc>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d004      	beq.n	800188c <ADC_ConfigureBoostMode+0x1c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a72      	ldr	r2, [pc, #456]	; (8001a50 <ADC_ConfigureBoostMode+0x1e0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d109      	bne.n	80018a0 <ADC_ConfigureBoostMode+0x30>
 800188c:	4b71      	ldr	r3, [pc, #452]	; (8001a54 <ADC_ConfigureBoostMode+0x1e4>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	e008      	b.n	80018b2 <ADC_ConfigureBoostMode+0x42>
 80018a0:	4b6d      	ldr	r3, [pc, #436]	; (8001a58 <ADC_ConfigureBoostMode+0x1e8>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf14      	ite	ne
 80018ac:	2301      	movne	r3, #1
 80018ae:	2300      	moveq	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d01a      	beq.n	80018ec <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80018b6:	f002 f8fb 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 80018ba:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018c4:	d006      	beq.n	80018d4 <ADC_ConfigureBoostMode+0x64>
 80018c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80018ca:	d00b      	beq.n	80018e4 <ADC_ConfigureBoostMode+0x74>
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d0:	d000      	beq.n	80018d4 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80018d2:	e05d      	b.n	8001990 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e0:	60fb      	str	r3, [r7, #12]
        break;
 80018e2:	e055      	b.n	8001990 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	60fb      	str	r3, [r7, #12]
        break;
 80018ea:	e051      	b.n	8001990 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80018ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80018f0:	f003 f816 	bl	8004920 <HAL_RCCEx_GetPeriphCLKFreq>
 80018f4:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80018fe:	d02a      	beq.n	8001956 <ADC_ConfigureBoostMode+0xe6>
 8001900:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001904:	d813      	bhi.n	800192e <ADC_ConfigureBoostMode+0xbe>
 8001906:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800190a:	d024      	beq.n	8001956 <ADC_ConfigureBoostMode+0xe6>
 800190c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001910:	d806      	bhi.n	8001920 <ADC_ConfigureBoostMode+0xb0>
 8001912:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001916:	d01e      	beq.n	8001956 <ADC_ConfigureBoostMode+0xe6>
 8001918:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800191c:	d01b      	beq.n	8001956 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800191e:	e037      	b.n	8001990 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001924:	d017      	beq.n	8001956 <ADC_ConfigureBoostMode+0xe6>
 8001926:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800192a:	d014      	beq.n	8001956 <ADC_ConfigureBoostMode+0xe6>
        break;
 800192c:	e030      	b.n	8001990 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800192e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001932:	d021      	beq.n	8001978 <ADC_ConfigureBoostMode+0x108>
 8001934:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001938:	d806      	bhi.n	8001948 <ADC_ConfigureBoostMode+0xd8>
 800193a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800193e:	d013      	beq.n	8001968 <ADC_ConfigureBoostMode+0xf8>
 8001940:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001944:	d014      	beq.n	8001970 <ADC_ConfigureBoostMode+0x100>
        break;
 8001946:	e023      	b.n	8001990 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001948:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800194c:	d018      	beq.n	8001980 <ADC_ConfigureBoostMode+0x110>
 800194e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001952:	d019      	beq.n	8001988 <ADC_ConfigureBoostMode+0x118>
        break;
 8001954:	e01c      	b.n	8001990 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	0c9b      	lsrs	r3, r3, #18
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	60fb      	str	r3, [r7, #12]
        break;
 8001966:	e013      	b.n	8001990 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	60fb      	str	r3, [r7, #12]
      break;
 800196e:	e00f      	b.n	8001990 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	60fb      	str	r3, [r7, #12]
        break;
 8001976:	e00b      	b.n	8001990 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	099b      	lsrs	r3, r3, #6
 800197c:	60fb      	str	r3, [r7, #12]
        break;
 800197e:	e007      	b.n	8001990 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	09db      	lsrs	r3, r3, #7
 8001984:	60fb      	str	r3, [r7, #12]
        break;
 8001986:	e003      	b.n	8001990 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	60fb      	str	r3, [r7, #12]
        break;
 800198e:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001990:	f7fe feb0 	bl	80006f4 <HAL_GetREVID>
 8001994:	4602      	mov	r2, r0
 8001996:	f241 0303 	movw	r3, #4099	; 0x1003
 800199a:	429a      	cmp	r2, r3
 800199c:	d815      	bhi.n	80019ca <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4a2e      	ldr	r2, [pc, #184]	; (8001a5c <ADC_ConfigureBoostMode+0x1ec>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d908      	bls.n	80019b8 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019b4:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */ 
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 80019b6:	e044      	b.n	8001a42 <ADC_ConfigureBoostMode+0x1d2>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019c6:	609a      	str	r2, [r3, #8]
}
 80019c8:	e03b      	b.n	8001a42 <ADC_ConfigureBoostMode+0x1d2>
    if (freq <= 6250000UL)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4a24      	ldr	r2, [pc, #144]	; (8001a60 <ADC_ConfigureBoostMode+0x1f0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d808      	bhi.n	80019e4 <ADC_ConfigureBoostMode+0x174>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80019e0:	609a      	str	r2, [r3, #8]
}
 80019e2:	e02e      	b.n	8001a42 <ADC_ConfigureBoostMode+0x1d2>
    else if((freq > 6250000UL) && (freq <= 12500000UL)) 
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <ADC_ConfigureBoostMode+0x1f0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d90e      	bls.n	8001a0a <ADC_ConfigureBoostMode+0x19a>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <ADC_ConfigureBoostMode+0x1f4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d80a      	bhi.n	8001a0a <ADC_ConfigureBoostMode+0x19a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	e01b      	b.n	8001a42 <ADC_ConfigureBoostMode+0x1d2>
    else if((freq > 12500000UL) && (freq <= 25000000UL)) 
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <ADC_ConfigureBoostMode+0x1f4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d90e      	bls.n	8001a30 <ADC_ConfigureBoostMode+0x1c0>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <ADC_ConfigureBoostMode+0x1f8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d80a      	bhi.n	8001a30 <ADC_ConfigureBoostMode+0x1c0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	e008      	b.n	8001a42 <ADC_ConfigureBoostMode+0x1d2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001a3e:	609a      	str	r2, [r3, #8]
}
 8001a40:	e7ff      	b.n	8001a42 <ADC_ConfigureBoostMode+0x1d2>
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	40022100 	.word	0x40022100
 8001a54:	40022300 	.word	0x40022300
 8001a58:	58026300 	.word	0x58026300
 8001a5c:	01312d00 	.word	0x01312d00
 8001a60:	005f5e10 	.word	0x005f5e10
 8001a64:	00bebc20 	.word	0x00bebc20
 8001a68:	017d7840 	.word	0x017d7840

08001a6c <LL_ADC_SetCommonPathInternalCh>:
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	609a      	str	r2, [r3, #8]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_ADC_GetCommonPathInternalCh>:
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_SetOffset>:
{
 8001aae:	b490      	push	{r4, r7}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3360      	adds	r3, #96	; 0x60
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	4313      	orrs	r3, r2
 8001adc:	6023      	str	r3, [r4, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc90      	pop	{r4, r7}
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_GetOffsetChannel>:
{
 8001ae8:	b490      	push	{r4, r7}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3360      	adds	r3, #96	; 0x60
 8001af6:	461a      	mov	r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc90      	pop	{r4, r7}
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_SetOffsetSignedSaturation>:
{
 8001b10:	b490      	push	{r4, r7}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3360      	adds	r3, #96	; 0x60
 8001b20:	461a      	mov	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	6023      	str	r3, [r4, #0]
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc90      	pop	{r4, r7}
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_INJ_SetQueueMode>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <LL_ADC_INJ_SetQueueMode+0x28>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60da      	str	r2, [r3, #12]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	7fdfffff 	.word	0x7fdfffff

08001b6c <LL_ADC_SetChannelSamplingTime>:
{
 8001b6c:	b490      	push	{r4, r7}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3314      	adds	r3, #20
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	0e5b      	lsrs	r3, r3, #25
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	4413      	add	r3, r2
 8001b8a:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8001b8c:	6822      	ldr	r2, [r4, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	0d1b      	lsrs	r3, r3, #20
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	2107      	movs	r1, #7
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	0d1b      	lsrs	r3, r3, #20
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	6023      	str	r3, [r4, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc90      	pop	{r4, r7}
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_SetChannelSingleDiff>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0318 	and.w	r3, r3, #24
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001be0:	40d9      	lsrs	r1, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	400b      	ands	r3, r1
 8001be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bea:	431a      	orrs	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	000fffff 	.word	0x000fffff

08001c04 <LL_ADC_IsEnabled>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <LL_ADC_IsEnabled+0x18>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <LL_ADC_IsEnabled+0x1a>
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_REG_IsConversionOngoing>:
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_INJ_IsConversionOngoing>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d101      	bne.n	8001c68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef* hadc)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b0ab      	sub	sp, #172	; 0xac
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  
  /*  DISCEN and JAUTO bits can't be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (sConfigInjected->AutoInjectedConv == ENABLE)));  
  
  /* Verification of channel number */
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	4aa7      	ldr	r2, [pc, #668]	; (8001f98 <HAL_ADCEx_InjectedConfigChannel+0x2bc>)
 8001cfc:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
    }
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d102      	bne.n	8001d0e <HAL_ADCEx_InjectedConfigChannel+0x32>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	f000 bcb6 	b.w	800267a <HAL_ADCEx_InjectedConfigChannel+0x99e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_ADCEx_InjectedConfigChannel+0x4a>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d130      	bne.n	8001d88 <HAL_ADCEx_InjectedConfigChannel+0xac>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b09      	cmp	r3, #9
 8001d2c:	d179      	bne.n	8001e22 <HAL_ADCEx_InjectedConfigChannel+0x146>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d010      	beq.n	8001d58 <HAL_ADCEx_InjectedConfigChannel+0x7c>
      {
         tmp_JSQR_ContextQueueBeingBuilt = (  ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0e9b      	lsrs	r3, r3, #26
 8001d3c:	025b      	lsls	r3, r3, #9
 8001d3e:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8001d4a:	431a      	orrs	r2, r3
                                            | sConfigInjected->ExternalTrigInjecConvEdge
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         tmp_JSQR_ContextQueueBeingBuilt = (  ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d56:	e007      	b.n	8001d68 <HAL_ADCEx_InjectedConfigChannel+0x8c>
                                           );
      }
      else
      {
         tmp_JSQR_ContextQueueBeingBuilt = ( ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0e9b      	lsrs	r3, r3, #26
 8001d5e:	025b      	lsls	r3, r3, #9
 8001d60:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8001d64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      }
      
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt); 
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d6e:	4b8b      	ldr	r3, [pc, #556]	; (8001f9c <HAL_ADCEx_InjectedConfigChannel+0x2c0>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001d7a:	430b      	orrs	r3, r1
 8001d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001d84:	65da      	str	r2, [r3, #92]	; 0x5c
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001d86:	e04c      	b.n	8001e22 <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */
    
    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U) 
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d11d      	bne.n	8001dcc <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	661a      	str	r2, [r3, #96]	; 0x60
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
       hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00d      	beq.n	8001dc2 <HAL_ADCEx_InjectedConfigChannel+0xe6>
      {
         tmp_JSQR_ContextQueueBeingBuilt = (  (sConfigInjected->InjectedNbrOfConversion - 1U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	1e5a      	subs	r2, r3, #1
                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8001db4:	431a      	orrs	r2, r3
                                            | sConfigInjected->ExternalTrigInjecConvEdge
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         tmp_JSQR_ContextQueueBeingBuilt = (  (sConfigInjected->InjectedNbrOfConversion - 1U)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001dc0:	e004      	b.n	8001dcc <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                           );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U) );
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);
    
    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	f003 021f 	and.w	r2, r3, #31
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    
    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df0:	1e5a      	subs	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	661a      	str	r2, [r3, #96]	; 0x60
    
    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous  
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10a      	bne.n	8001e22 <HAL_ADCEx_InjectedConfigChannel+0x146>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue); 
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e12:	4b62      	ldr	r3, [pc, #392]	; (8001f9c <HAL_ADCEx_InjectedConfigChannel+0x2c0>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff12 	bl	8001c50 <LL_ADC_INJ_IsConversionOngoing>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d14d      	bne.n	8001ece <HAL_ADCEx_InjectedConfigChannel+0x1f2>
  {
  /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel) & 0x1FUL));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d108      	bne.n	8001e50 <HAL_ADCEx_InjectedConfigChannel+0x174>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0e9b      	lsrs	r3, r3, #26
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2201      	movs	r2, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	e012      	b.n	8001e76 <HAL_ADCEx_InjectedConfigChannel+0x19a>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 8001e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	2201      	movs	r2, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	69d1      	ldr	r1, [r2, #28]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	61d3      	str	r3, [r2, #28]
    
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d112      	bne.n	8001eb4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
    {                               
      MODIFY_REG(hadc->Instance->CFGR,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001e9e:	055a      	lsls	r2, r3, #21
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ea6:	051b      	lsls	r3, r3, #20
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	e00c      	b.n	8001ece <HAL_ADCEx_InjectedConfigChannel+0x1f2>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ec4:	055a      	lsls	r2, r3, #21
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fea9 	bl	8001c2a <LL_ADC_REG_IsConversionOngoing>
 8001ed8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff feb5 	bl	8001c50 <LL_ADC_INJ_IsConversionOngoing>
 8001ee6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  
  if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 81d8 	bne.w	80022a4 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f040 81d3 	bne.w	80022a4 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_ADCEx_InjectedConfigChannel+0x232>
       || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d116      	bne.n	8001f3c <HAL_ADCEx_InjectedConfigChannel+0x260>
    {
         if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d108      	bne.n	8001f2a <HAL_ADCEx_InjectedConfigChannel+0x24e>
         {
           SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);    
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001f26:	60da      	str	r2, [r3, #12]
         if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001f28:	e01f      	b.n	8001f6a <HAL_ADCEx_InjectedConfigChannel+0x28e>
         }
         else
         {
           CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);    
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001f38:	60da      	str	r2, [r3, #12]
         if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001f3a:	e016      	b.n	8001f6a <HAL_ADCEx_InjectedConfigChannel+0x28e>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d109      	bne.n	8001f5a <HAL_ADCEx_InjectedConfigChannel+0x27e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	f043 0220 	orr.w	r2, r3, #32
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        tmp_hal_status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001f58:	e007      	b.n	8001f6a <HAL_ADCEx_InjectedConfigChannel+0x28e>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO); 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001f68:	60da      	str	r2, [r3, #12]
      }
    }
    
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d117      	bne.n	8001fa4 <HAL_ADCEx_InjectedConfigChannel+0x2c8>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */
      
      /* Enable OverSampling mode */
       MODIFY_REG(hadc->Instance->CFGR2,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_ADCEx_InjectedConfigChannel+0x2c4>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f86:	430a      	orrs	r2, r1
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0202 	orr.w	r2, r2, #2
 8001f92:	611a      	str	r2, [r3, #16]
 8001f94:	e00e      	b.n	8001fb4 <HAL_ADCEx_InjectedConfigChannel+0x2d8>
 8001f96:	bf00      	nop
 8001f98:	47ff0000 	.word	0x47ff0000
 8001f9c:	04104000 	.word	0x04104000
 8001fa0:	fc00fe1d 	.word	0xfc00fe1d
                 );
    }
    else
    {
      /* Disable Regular OverSampling */
       CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0202 	bic.w	r2, r2, #2
 8001fb2:	611a      	str	r2, [r3, #16]
    }
    
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6819      	ldr	r1, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f7ff fdd3 	bl	8001b6c <LL_ADC_SetChannelSamplingTime>
    
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8001fc6:	4bac      	ldr	r3, [pc, #688]	; (8002278 <HAL_ADCEx_InjectedConfigChannel+0x59c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fd2:	d10b      	bne.n	8001fec <HAL_ADCEx_InjectedConfigChannel+0x310>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	e01d      	b.n	8002028 <HAL_ADCEx_InjectedConfigChannel+0x34c>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10b      	bne.n	8002012 <HAL_ADCEx_InjectedConfigChannel+0x336>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	e00a      	b.n	8002028 <HAL_ADCEx_InjectedConfigChannel+0x34c>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    
    if(sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	2b04      	cmp	r3, #4
 8002032:	d019      	beq.n	8002068 <HAL_ADCEx_InjectedConfigChannel+0x38c>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel, tmpOffsetShifted);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6919      	ldr	r1, [r3, #16]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002044:	f7ff fd33 	bl	8001aae <LL_ADC_SetOffset>
       
      /* Set ADC selected offset signed saturation */
      LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber, (sConfigInjected->InjectedOffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6919      	ldr	r1, [r3, #16]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	7f1b      	ldrb	r3, [r3, #28]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d102      	bne.n	800205e <HAL_ADCEx_InjectedConfigChannel+0x382>
 8002058:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800205c:	e000      	b.n	8002060 <HAL_ADCEx_InjectedConfigChannel+0x384>
 800205e:	2300      	movs	r3, #0
 8002060:	461a      	mov	r2, r3
 8002062:	f7ff fd55 	bl	8001b10 <LL_ADC_SetOffsetSignedSaturation>
 8002066:	e11d      	b.n	80022a4 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fd3a 	bl	8001ae8 <LL_ADC_GetOffsetChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10a      	bne.n	8002094 <HAL_ADCEx_InjectedConfigChannel+0x3b8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fd2f 	bl	8001ae8 <LL_ADC_GetOffsetChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	0e9b      	lsrs	r3, r3, #26
 800208e:	f003 021f 	and.w	r2, r3, #31
 8002092:	e013      	b.n	80020bc <HAL_ADCEx_InjectedConfigChannel+0x3e0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fd24 	bl	8001ae8 <LL_ADC_GetOffsetChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return(result);
 80020b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	e009      	b.n	80020e8 <HAL_ADCEx_InjectedConfigChannel+0x40c>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 80020e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d107      	bne.n	80020fc <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
       LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2300      	movs	r3, #0
 80020f6:	2100      	movs	r1, #0
 80020f8:	f7ff fcd9 	bl	8001aae <LL_ADC_SetOffset>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fcf0 	bl	8001ae8 <LL_ADC_GetOffsetChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10a      	bne.n	8002128 <HAL_ADCEx_InjectedConfigChannel+0x44c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2101      	movs	r1, #1
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fce5 	bl	8001ae8 <LL_ADC_GetOffsetChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	f003 021f 	and.w	r2, r3, #31
 8002126:	e00f      	b.n	8002148 <HAL_ADCEx_InjectedConfigChannel+0x46c>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2101      	movs	r1, #1
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fcda 	bl	8001ae8 <LL_ADC_GetOffsetChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 8002140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <HAL_ADCEx_InjectedConfigChannel+0x484>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	e009      	b.n	8002174 <HAL_ADCEx_InjectedConfigChannel+0x498>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	66bb      	str	r3, [r7, #104]	; 0x68
  return(result);
 800216e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	429a      	cmp	r2, r3
 8002176:	d107      	bne.n	8002188 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
      {
       LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	2101      	movs	r1, #1
 8002184:	f7ff fc93 	bl	8001aae <LL_ADC_SetOffset>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2102      	movs	r1, #2
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fcaa 	bl	8001ae8 <LL_ADC_GetOffsetChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2102      	movs	r1, #2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fc9f 	bl	8001ae8 <LL_ADC_GetOffsetChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	f003 021f 	and.w	r2, r3, #31
 80021b2:	e00f      	b.n	80021d4 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2102      	movs	r1, #2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fc94 	bl	8001ae8 <LL_ADC_GetOffsetChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80021cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <HAL_ADCEx_InjectedConfigChannel+0x510>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	e009      	b.n	8002200 <HAL_ADCEx_InjectedConfigChannel+0x524>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 80021fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	429a      	cmp	r2, r3
 8002202:	d107      	bne.n	8002214 <HAL_ADCEx_InjectedConfigChannel+0x538>
      {
       LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2300      	movs	r3, #0
 800220e:	2103      	movs	r1, #3
 8002210:	f7ff fc4d 	bl	8001aae <LL_ADC_SetOffset>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2103      	movs	r1, #3
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fc64 	bl	8001ae8 <LL_ADC_GetOffsetChannel>
 8002220:	4603      	mov	r3, r0
 8002222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10a      	bne.n	8002240 <HAL_ADCEx_InjectedConfigChannel+0x564>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2103      	movs	r1, #3
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fc59 	bl	8001ae8 <LL_ADC_GetOffsetChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	0e9b      	lsrs	r3, r3, #26
 800223a:	f003 021f 	and.w	r2, r3, #31
 800223e:	e00f      	b.n	8002260 <HAL_ADCEx_InjectedConfigChannel+0x584>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2103      	movs	r1, #3
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fc4e 	bl	8001ae8 <LL_ADC_GetOffsetChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8002258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <HAL_ADCEx_InjectedConfigChannel+0x5a0>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	e00b      	b.n	8002290 <HAL_ADCEx_InjectedConfigChannel+0x5b4>
 8002278:	5c001000 	.word	0x5c001000
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800228a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	429a      	cmp	r2, r3
 8002292:	d107      	bne.n	80022a4 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
      {
       LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE); 
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2300      	movs	r3, #0
 800229e:	2103      	movs	r1, #3
 80022a0:	f7ff fc05 	bl	8001aae <LL_ADC_SetOffset>
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fcab 	bl	8001c04 <LL_ADC_IsEnabled>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f040 81dc 	bne.w	800266e <HAL_ADCEx_InjectedConfigChannel+0x992>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	461a      	mov	r2, r3
 80022c4:	f7ff fc7a 	bl	8001bbc <LL_ADC_SetChannelSingleDiff>
    
    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4aa9      	ldr	r2, [pc, #676]	; (8002574 <HAL_ADCEx_InjectedConfigChannel+0x898>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	f040 80f6 	bne.w	80024c0 <HAL_ADCEx_InjectedConfigChannel+0x7e4>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10b      	bne.n	80022fc <HAL_ADCEx_InjectedConfigChannel+0x620>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	2b09      	cmp	r3, #9
 80022f2:	bf94      	ite	ls
 80022f4:	2301      	movls	r3, #1
 80022f6:	2300      	movhi	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e011      	b.n	8002320 <HAL_ADCEx_InjectedConfigChannel+0x644>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800230a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2b09      	cmp	r3, #9
 8002318:	bf94      	ite	ls
 800231a:	2301      	movls	r3, #1
 800231c:	2300      	movhi	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d061      	beq.n	80023e8 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <HAL_ADCEx_InjectedConfigChannel+0x664>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	3301      	adds	r3, #1
 8002338:	069b      	lsls	r3, r3, #26
 800233a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800233e:	e00d      	b.n	800235c <HAL_ADCEx_InjectedConfigChannel+0x680>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	3301      	adds	r3, #1
 8002356:	069b      	lsls	r3, r3, #26
 8002358:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002364:	2b00      	cmp	r3, #0
 8002366:	d109      	bne.n	800237c <HAL_ADCEx_InjectedConfigChannel+0x6a0>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	3301      	adds	r3, #1
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	e00f      	b.n	800239c <HAL_ADCEx_InjectedConfigChannel+0x6c0>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	2101      	movs	r1, #1
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	ea42 0103 	orr.w	r1, r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <HAL_ADCEx_InjectedConfigChannel+0x6e6>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	3301      	adds	r3, #1
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	051b      	lsls	r3, r3, #20
 80023c0:	e010      	b.n	80023e4 <HAL_ADCEx_InjectedConfigChannel+0x708>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	3301      	adds	r3, #1
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	051b      	lsls	r3, r3, #20
 80023e4:	430b      	orrs	r3, r1
 80023e6:	e066      	b.n	80024b6 <HAL_ADCEx_InjectedConfigChannel+0x7da>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d107      	bne.n	8002404 <HAL_ADCEx_InjectedConfigChannel+0x728>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	3301      	adds	r3, #1
 80023fc:	069b      	lsls	r3, r3, #26
 80023fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002402:	e00d      	b.n	8002420 <HAL_ADCEx_InjectedConfigChannel+0x744>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	623b      	str	r3, [r7, #32]
  return(result);
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	3301      	adds	r3, #1
 800241a:	069b      	lsls	r3, r3, #26
 800241c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002428:	2b00      	cmp	r3, #0
 800242a:	d109      	bne.n	8002440 <HAL_ADCEx_InjectedConfigChannel+0x764>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	3301      	adds	r3, #1
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2101      	movs	r1, #1
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	e00f      	b.n	8002460 <HAL_ADCEx_InjectedConfigChannel+0x784>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	61bb      	str	r3, [r7, #24]
  return(result);
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	3301      	adds	r3, #1
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	2101      	movs	r1, #1
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	ea42 0103 	orr.w	r1, r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10d      	bne.n	800248c <HAL_ADCEx_InjectedConfigChannel+0x7b0>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0e9b      	lsrs	r3, r3, #26
 8002476:	3301      	adds	r3, #1
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	3b1e      	subs	r3, #30
 8002484:	051b      	lsls	r3, r3, #20
 8002486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800248a:	e013      	b.n	80024b4 <HAL_ADCEx_InjectedConfigChannel+0x7d8>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	613b      	str	r3, [r7, #16]
  return(result);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	f003 021f 	and.w	r2, r3, #31
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	3b1e      	subs	r3, #30
 80024ae:	051b      	lsls	r3, r3, #20
 80024b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024b4:	430b      	orrs	r3, r1
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	6892      	ldr	r2, [r2, #8]
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7ff fb56 	bl	8001b6c <LL_ADC_SetChannelSamplingTime>
    /* internal measurement paths enable: If internal channel selected,       */
    /* enable dedicated internal buffers and path.                            */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */
    
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f280 80d2 	bge.w	800266e <HAL_ADCEx_InjectedConfigChannel+0x992>
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a2a      	ldr	r2, [pc, #168]	; (8002578 <HAL_ADCEx_InjectedConfigChannel+0x89c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d004      	beq.n	80024de <HAL_ADCEx_InjectedConfigChannel+0x802>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a28      	ldr	r2, [pc, #160]	; (800257c <HAL_ADCEx_InjectedConfigChannel+0x8a0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10e      	bne.n	80024fc <HAL_ADCEx_InjectedConfigChannel+0x820>
 80024de:	4826      	ldr	r0, [pc, #152]	; (8002578 <HAL_ADCEx_InjectedConfigChannel+0x89c>)
 80024e0:	f7ff fb90 	bl	8001c04 <LL_ADC_IsEnabled>
 80024e4:	4604      	mov	r4, r0
 80024e6:	4825      	ldr	r0, [pc, #148]	; (800257c <HAL_ADCEx_InjectedConfigChannel+0x8a0>)
 80024e8:	f7ff fb8c 	bl	8001c04 <LL_ADC_IsEnabled>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4323      	orrs	r3, r4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e008      	b.n	800250e <HAL_ADCEx_InjectedConfigChannel+0x832>
 80024fc:	4820      	ldr	r0, [pc, #128]	; (8002580 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 80024fe:	f7ff fb81 	bl	8001c04 <LL_ADC_IsEnabled>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80a4 	beq.w	800265c <HAL_ADCEx_InjectedConfigChannel+0x980>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a17      	ldr	r2, [pc, #92]	; (8002578 <HAL_ADCEx_InjectedConfigChannel+0x89c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d004      	beq.n	8002528 <HAL_ADCEx_InjectedConfigChannel+0x84c>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a16      	ldr	r2, [pc, #88]	; (800257c <HAL_ADCEx_InjectedConfigChannel+0x8a0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d101      	bne.n	800252c <HAL_ADCEx_InjectedConfigChannel+0x850>
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 800252a:	e000      	b.n	800252e <HAL_ADCEx_InjectedConfigChannel+0x852>
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff faaf 	bl	8001a92 <LL_ADC_GetCommonPathInternalCh>
 8002534:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        
        /* If the requested internal measurement path has already been enabled, */
        /* bypass the configuration processing.                                 */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a13      	ldr	r2, [pc, #76]	; (800258c <HAL_ADCEx_InjectedConfigChannel+0x8b0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d140      	bne.n	80025c4 <HAL_ADCEx_InjectedConfigChannel+0x8e8>
 8002542:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d13a      	bne.n	80025c4 <HAL_ADCEx_InjectedConfigChannel+0x8e8>
        {
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	f040 808a 	bne.w	800266e <HAL_ADCEx_InjectedConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a06      	ldr	r2, [pc, #24]	; (8002578 <HAL_ADCEx_InjectedConfigChannel+0x89c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d004      	beq.n	800256e <HAL_ADCEx_InjectedConfigChannel+0x892>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_ADCEx_InjectedConfigChannel+0x8a0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d110      	bne.n	8002590 <HAL_ADCEx_InjectedConfigChannel+0x8b4>
 800256e:	4a05      	ldr	r2, [pc, #20]	; (8002584 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 8002570:	e00f      	b.n	8002592 <HAL_ADCEx_InjectedConfigChannel+0x8b6>
 8002572:	bf00      	nop
 8002574:	47ff0000 	.word	0x47ff0000
 8002578:	40022000 	.word	0x40022000
 800257c:	40022100 	.word	0x40022100
 8002580:	58026000 	.word	0x58026000
 8002584:	40022300 	.word	0x40022300
 8002588:	58026300 	.word	0x58026300
 800258c:	cb840000 	.word	0xcb840000
 8002590:	4a3c      	ldr	r2, [pc, #240]	; (8002684 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8002592:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002596:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800259a:	4619      	mov	r1, r3
 800259c:	4610      	mov	r0, r2
 800259e:	f7ff fa65 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025a2:	4b39      	ldr	r3, [pc, #228]	; (8002688 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	4a38      	ldr	r2, [pc, #224]	; (800268c <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
            while(wait_loop_index != 0UL)
 80025b4:	e002      	b.n	80025bc <HAL_ADCEx_InjectedConfigChannel+0x8e0>
            {
              wait_loop_index--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
            while(wait_loop_index != 0UL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f9      	bne.n	80025b6 <HAL_ADCEx_InjectedConfigChannel+0x8da>
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025c2:	e054      	b.n	800266e <HAL_ADCEx_InjectedConfigChannel+0x992>
            }
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a31      	ldr	r2, [pc, #196]	; (8002690 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d120      	bne.n	8002610 <HAL_ADCEx_InjectedConfigChannel+0x934>
 80025ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d11a      	bne.n	8002610 <HAL_ADCEx_InjectedConfigChannel+0x934>
        { 
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a2d      	ldr	r2, [pc, #180]	; (8002694 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d144      	bne.n	800266e <HAL_ADCEx_InjectedConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2b      	ldr	r2, [pc, #172]	; (8002698 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d004      	beq.n	80025f8 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2a      	ldr	r2, [pc, #168]	; (800269c <HAL_ADCEx_InjectedConfigChannel+0x9c0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d101      	bne.n	80025fc <HAL_ADCEx_InjectedConfigChannel+0x920>
 80025f8:	4a29      	ldr	r2, [pc, #164]	; (80026a0 <HAL_ADCEx_InjectedConfigChannel+0x9c4>)
 80025fa:	e000      	b.n	80025fe <HAL_ADCEx_InjectedConfigChannel+0x922>
 80025fc:	4a21      	ldr	r2, [pc, #132]	; (8002684 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80025fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002606:	4619      	mov	r1, r3
 8002608:	4610      	mov	r0, r2
 800260a:	f7ff fa2f 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800260e:	e02e      	b.n	800266e <HAL_ADCEx_InjectedConfigChannel+0x992>
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_ADCEx_InjectedConfigChannel+0x9c8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d129      	bne.n	800266e <HAL_ADCEx_InjectedConfigChannel+0x992>
 800261a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800261e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d123      	bne.n	800266e <HAL_ADCEx_InjectedConfigChannel+0x992>
        { 
          if (ADC_VREFINT_INSTANCE(hadc))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d11e      	bne.n	800266e <HAL_ADCEx_InjectedConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a18      	ldr	r2, [pc, #96]	; (8002698 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d004      	beq.n	8002644 <HAL_ADCEx_InjectedConfigChannel+0x968>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a17      	ldr	r2, [pc, #92]	; (800269c <HAL_ADCEx_InjectedConfigChannel+0x9c0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <HAL_ADCEx_InjectedConfigChannel+0x96c>
 8002644:	4a16      	ldr	r2, [pc, #88]	; (80026a0 <HAL_ADCEx_InjectedConfigChannel+0x9c4>)
 8002646:	e000      	b.n	800264a <HAL_ADCEx_InjectedConfigChannel+0x96e>
 8002648:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 800264a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800264e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002652:	4619      	mov	r1, r3
 8002654:	4610      	mov	r0, r2
 8002656:	f7ff fa09 	bl	8001a6c <LL_ADC_SetCommonPathInternalCh>
 800265a:	e008      	b.n	800266e <HAL_ADCEx_InjectedConfigChannel+0x992>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	655a      	str	r2, [r3, #84]	; 0x54
        
        tmp_hal_status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 8002676:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800267a:	4618      	mov	r0, r3
 800267c:	37ac      	adds	r7, #172	; 0xac
 800267e:	46bd      	mov	sp, r7
 8002680:	bd90      	pop	{r4, r7, pc}
 8002682:	bf00      	nop
 8002684:	58026300 	.word	0x58026300
 8002688:	24000008 	.word	0x24000008
 800268c:	053e2d63 	.word	0x053e2d63
 8002690:	c7520000 	.word	0xc7520000
 8002694:	58026000 	.word	0x58026000
 8002698:	40022000 	.word	0x40022000
 800269c:	40022100 	.word	0x40022100
 80026a0:	40022300 	.word	0x40022300
 80026a4:	cfb80000 	.word	0xcfb80000

080026a8 <HAL_ADCEx_DisableInjectedQueue>:
  *         conversion is ongoing. 
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef* hadc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fab8 	bl	8001c2a <LL_ADC_REG_IsConversionOngoing>
 80026ba:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fac5 	bl	8001c50 <LL_ADC_INJ_IsConversionOngoing>
 80026c6:	60f8      	str	r0, [r7, #12]
  
  /* Parameter can be set only if no conversion is on-going */
  if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10c      	bne.n	80026e8 <HAL_ADCEx_DisableInjectedQueue+0x40>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_ADCEx_DisableInjectedQueue+0x40>
     )
  {
    LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fa2f 	bl	8001b40 <LL_ADC_INJ_SetQueueMode>
    tmp_hal_status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	75fb      	strb	r3, [r7, #23]
 80026e6:	e001      	b.n	80026ec <HAL_ADCEx_DisableInjectedQueue+0x44>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	75fb      	strb	r3, [r7, #23]
  }
  
  return tmp_hal_status;
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <__NVIC_SetPriorityGrouping+0x40>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	4313      	orrs	r3, r2
 8002724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002726:	4a04      	ldr	r2, [pc, #16]	; (8002738 <__NVIC_SetPriorityGrouping+0x40>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	60d3      	str	r3, [r2, #12]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00
 800273c:	05fa0000 	.word	0x05fa0000

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800276a:	2b00      	cmp	r3, #0
 800276c:	db0b      	blt.n	8002786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	4907      	ldr	r1, [pc, #28]	; (8002794 <__NVIC_EnableIRQ+0x38>)
 8002776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2001      	movs	r0, #1
 800277e:	fa00 f202 	lsl.w	r2, r0, r2
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000e100 	.word	0xe000e100

08002798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	db0a      	blt.n	80027c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	490c      	ldr	r1, [pc, #48]	; (80027e4 <__NVIC_SetPriority+0x4c>)
 80027b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b6:	0112      	lsls	r2, r2, #4
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	440b      	add	r3, r1
 80027bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c0:	e00a      	b.n	80027d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4908      	ldr	r1, [pc, #32]	; (80027e8 <__NVIC_SetPriority+0x50>)
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3b04      	subs	r3, #4
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	440b      	add	r3, r1
 80027d6:	761a      	strb	r2, [r3, #24]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000e100 	.word	0xe000e100
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f1c3 0307 	rsb	r3, r3, #7
 8002806:	2b04      	cmp	r3, #4
 8002808:	bf28      	it	cs
 800280a:	2304      	movcs	r3, #4
 800280c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3304      	adds	r3, #4
 8002812:	2b06      	cmp	r3, #6
 8002814:	d902      	bls.n	800281c <NVIC_EncodePriority+0x30>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3b03      	subs	r3, #3
 800281a:	e000      	b.n	800281e <NVIC_EncodePriority+0x32>
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 32ff 	mov.w	r2, #4294967295
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	401a      	ands	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43d9      	mvns	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	4313      	orrs	r3, r2
         );
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002864:	d301      	bcc.n	800286a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002866:	2301      	movs	r3, #1
 8002868:	e00f      	b.n	800288a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <SysTick_Config+0x40>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002872:	210f      	movs	r1, #15
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	f7ff ff8e 	bl	8002798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <SysTick_Config+0x40>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <SysTick_Config+0x40>)
 8002884:	2207      	movs	r2, #7
 8002886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	e000e010 	.word	0xe000e010

08002898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ff29 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028bc:	f7ff ff40 	bl	8002740 <__NVIC_GetPriorityGrouping>
 80028c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	6978      	ldr	r0, [r7, #20]
 80028c8:	f7ff ff90 	bl	80027ec <NVIC_EncodePriority>
 80028cc:	4602      	mov	r2, r0
 80028ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff5f 	bl	8002798 <__NVIC_SetPriority>
}
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff33 	bl	800275c <__NVIC_EnableIRQ>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffa4 	bl	8002854 <SysTick_Config>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002926:	4b89      	ldr	r3, [pc, #548]	; (8002b4c <HAL_GPIO_Init+0x234>)
 8002928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800292a:	e194      	b.n	8002c56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2101      	movs	r1, #1
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8186 	beq.w	8002c50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x3c>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b12      	cmp	r3, #18
 8002952:	d123      	bne.n	800299c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	220f      	movs	r2, #15
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	08da      	lsrs	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3208      	adds	r2, #8
 8002996:	69b9      	ldr	r1, [r7, #24]
 8002998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0203 	and.w	r2, r3, #3
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d00b      	beq.n	80029f0 <HAL_GPIO_Init+0xd8>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d007      	beq.n	80029f0 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029e4:	2b11      	cmp	r3, #17
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b12      	cmp	r3, #18
 80029ee:	d130      	bne.n	8002a52 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a26:	2201      	movs	r2, #1
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f003 0201 	and.w	r2, r3, #1
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80e0 	beq.w	8002c50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_GPIO_Init+0x238>)
 8002a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a96:	4a2e      	ldr	r2, [pc, #184]	; (8002b50 <HAL_GPIO_Init+0x238>)
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_GPIO_Init+0x238>)
 8002aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aae:	4a29      	ldr	r2, [pc, #164]	; (8002b54 <HAL_GPIO_Init+0x23c>)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a20      	ldr	r2, [pc, #128]	; (8002b58 <HAL_GPIO_Init+0x240>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d052      	beq.n	8002b80 <HAL_GPIO_Init+0x268>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_GPIO_Init+0x244>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d031      	beq.n	8002b46 <HAL_GPIO_Init+0x22e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <HAL_GPIO_Init+0x248>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d02b      	beq.n	8002b42 <HAL_GPIO_Init+0x22a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_GPIO_Init+0x24c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d025      	beq.n	8002b3e <HAL_GPIO_Init+0x226>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <HAL_GPIO_Init+0x250>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01f      	beq.n	8002b3a <HAL_GPIO_Init+0x222>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <HAL_GPIO_Init+0x254>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d019      	beq.n	8002b36 <HAL_GPIO_Init+0x21e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <HAL_GPIO_Init+0x258>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_Init+0x21a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a19      	ldr	r2, [pc, #100]	; (8002b74 <HAL_GPIO_Init+0x25c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00d      	beq.n	8002b2e <HAL_GPIO_Init+0x216>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <HAL_GPIO_Init+0x260>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <HAL_GPIO_Init+0x212>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_GPIO_Init+0x264>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <HAL_GPIO_Init+0x20e>
 8002b22:	2309      	movs	r3, #9
 8002b24:	e02d      	b.n	8002b82 <HAL_GPIO_Init+0x26a>
 8002b26:	230a      	movs	r3, #10
 8002b28:	e02b      	b.n	8002b82 <HAL_GPIO_Init+0x26a>
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	e029      	b.n	8002b82 <HAL_GPIO_Init+0x26a>
 8002b2e:	2307      	movs	r3, #7
 8002b30:	e027      	b.n	8002b82 <HAL_GPIO_Init+0x26a>
 8002b32:	2306      	movs	r3, #6
 8002b34:	e025      	b.n	8002b82 <HAL_GPIO_Init+0x26a>
 8002b36:	2305      	movs	r3, #5
 8002b38:	e023      	b.n	8002b82 <HAL_GPIO_Init+0x26a>
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	e021      	b.n	8002b82 <HAL_GPIO_Init+0x26a>
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e01f      	b.n	8002b82 <HAL_GPIO_Init+0x26a>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e01d      	b.n	8002b82 <HAL_GPIO_Init+0x26a>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e01b      	b.n	8002b82 <HAL_GPIO_Init+0x26a>
 8002b4a:	bf00      	nop
 8002b4c:	58000080 	.word	0x58000080
 8002b50:	58024400 	.word	0x58024400
 8002b54:	58000400 	.word	0x58000400
 8002b58:	58020000 	.word	0x58020000
 8002b5c:	58020400 	.word	0x58020400
 8002b60:	58020800 	.word	0x58020800
 8002b64:	58020c00 	.word	0x58020c00
 8002b68:	58021000 	.word	0x58021000
 8002b6c:	58021400 	.word	0x58021400
 8002b70:	58021800 	.word	0x58021800
 8002b74:	58021c00 	.word	0x58021c00
 8002b78:	58022000 	.word	0x58022000
 8002b7c:	58022400 	.word	0x58022400
 8002b80:	2300      	movs	r3, #0
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	f002 0203 	and.w	r2, r2, #3
 8002b88:	0092      	lsls	r2, r2, #2
 8002b8a:	4093      	lsls	r3, r2
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b92:	4938      	ldr	r1, [pc, #224]	; (8002c74 <HAL_GPIO_Init+0x35c>)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	3301      	adds	r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f47f ae63 	bne.w	800292c <HAL_GPIO_Init+0x14>
  }
}
 8002c66:	bf00      	nop
 8002c68:	3724      	adds	r7, #36	; 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	58000400 	.word	0x58000400

08002c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
 8002c84:	4613      	mov	r3, r2
 8002c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c88:	787b      	ldrb	r3, [r7, #1]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c94:	e003      	b.n	8002c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	041a      	lsls	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	619a      	str	r2, [r3, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <HAL_PWREx_ConfigSupply+0x6c>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d008      	beq.n	8002cd2 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cc0:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <HAL_PWREx_ConfigSupply+0x6c>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d001      	beq.n	8002cd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e01d      	b.n	8002d0e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_PWREx_ConfigSupply+0x6c>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f023 0207 	bic.w	r2, r3, #7
 8002cda:	490f      	ldr	r1, [pc, #60]	; (8002d18 <HAL_PWREx_ConfigSupply+0x6c>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce2:	f7fd fcfb 	bl	80006dc <HAL_GetTick>
 8002ce6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002ce8:	e009      	b.n	8002cfe <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8002cea:	f7fd fcf7 	bl	80006dc <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cf8:	d901      	bls.n	8002cfe <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e007      	b.n	8002d0e <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_PWREx_ConfigSupply+0x6c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0a:	d1ee      	bne.n	8002cea <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	58024800 	.word	0x58024800

08002d1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e3a4      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8087 	beq.w	8002e4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d3c:	4b9a      	ldr	r3, [pc, #616]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d46:	4b98      	ldr	r3, [pc, #608]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	2b10      	cmp	r3, #16
 8002d50:	d007      	beq.n	8002d62 <HAL_RCC_OscConfig+0x46>
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	2b18      	cmp	r3, #24
 8002d56:	d110      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5e>
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d10b      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d62:	4b91      	ldr	r3, [pc, #580]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d06c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x12c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d168      	bne.n	8002e48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e37e      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x76>
 8002d84:	4b88      	ldr	r3, [pc, #544]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a87      	ldr	r2, [pc, #540]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	e02e      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x98>
 8002d9a:	4b83      	ldr	r3, [pc, #524]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a82      	ldr	r2, [pc, #520]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b80      	ldr	r3, [pc, #512]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a7f      	ldr	r2, [pc, #508]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e01d      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xbc>
 8002dbe:	4b7a      	ldr	r3, [pc, #488]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a79      	ldr	r2, [pc, #484]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b77      	ldr	r3, [pc, #476]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a76      	ldr	r2, [pc, #472]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002dd8:	4b73      	ldr	r3, [pc, #460]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a72      	ldr	r2, [pc, #456]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	4b70      	ldr	r3, [pc, #448]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a6f      	ldr	r2, [pc, #444]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d013      	beq.n	8002e20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fd fc70 	bl	80006dc <HAL_GetTick>
 8002dfc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e00:	f7fd fc6c 	bl	80006dc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e332      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e12:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0xe4>
 8002e1e:	e014      	b.n	8002e4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fd fc5c 	bl	80006dc <HAL_GetTick>
 8002e24:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fd fc58 	bl	80006dc <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e31e      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e3a:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x10c>
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80b0 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e58:	4b53      	ldr	r3, [pc, #332]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_RCC_OscConfig+0x162>
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b18      	cmp	r3, #24
 8002e72:	d149      	bne.n	8002f08 <HAL_RCC_OscConfig+0x1ec>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d144      	bne.n	8002f08 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e7e:	4b4a      	ldr	r3, [pc, #296]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_RCC_OscConfig+0x17a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e2f0      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e96:	4b44      	ldr	r3, [pc, #272]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0219 	bic.w	r2, r3, #25
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	4941      	ldr	r1, [pc, #260]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fd fc18 	bl	80006dc <HAL_GetTick>
 8002eac:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fd fc14 	bl	80006dc <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e2da      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ec2:	4b39      	ldr	r3, [pc, #228]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	f7fd fc11 	bl	80006f4 <HAL_GetREVID>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d80a      	bhi.n	8002ef2 <HAL_RCC_OscConfig+0x1d6>
 8002edc:	4b32      	ldr	r3, [pc, #200]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	031b      	lsls	r3, r3, #12
 8002eea:	492f      	ldr	r1, [pc, #188]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef0:	e062      	b.n	8002fb8 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	4929      	ldr	r1, [pc, #164]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f06:	e057      	b.n	8002fb8 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d038      	beq.n	8002f82 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f10:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 0219 	bic.w	r2, r3, #25
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4922      	ldr	r1, [pc, #136]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fd fbdb 	bl	80006dc <HAL_GetTick>
 8002f26:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7fd fbd7 	bl	80006dc <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e29d      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	f7fd fbd4 	bl	80006f4 <HAL_GetREVID>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d80a      	bhi.n	8002f6c <HAL_RCC_OscConfig+0x250>
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	031b      	lsls	r3, r3, #12
 8002f64:	4910      	ldr	r1, [pc, #64]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
 8002f6a:	e025      	b.n	8002fb8 <HAL_RCC_OscConfig+0x29c>
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	061b      	lsls	r3, r3, #24
 8002f7a:	490b      	ldr	r1, [pc, #44]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
 8002f80:	e01a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a08      	ldr	r2, [pc, #32]	; (8002fa8 <HAL_RCC_OscConfig+0x28c>)
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fd fba5 	bl	80006dc <HAL_GetTick>
 8002f92:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f96:	f7fd fba1 	bl	80006dc <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d903      	bls.n	8002fac <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e267      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
 8002fa8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fac:	4ba0      	ldr	r3, [pc, #640]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ee      	bne.n	8002f96 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 808f 	beq.w	80030e4 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc6:	4b9a      	ldr	r3, [pc, #616]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fce:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fd0:	4b97      	ldr	r3, [pc, #604]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d007      	beq.n	8002fec <HAL_RCC_OscConfig+0x2d0>
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b18      	cmp	r3, #24
 8002fe0:	d12d      	bne.n	800303e <HAL_RCC_OscConfig+0x322>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d128      	bne.n	800303e <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fec:	4b90      	ldr	r3, [pc, #576]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_OscConfig+0x2e8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e239      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003004:	f7fd fb76 	bl	80006f4 <HAL_GetREVID>
 8003008:	4602      	mov	r2, r0
 800300a:	f241 0303 	movw	r3, #4099	; 0x1003
 800300e:	429a      	cmp	r2, r3
 8003010:	d80a      	bhi.n	8003028 <HAL_RCC_OscConfig+0x30c>
 8003012:	4b87      	ldr	r3, [pc, #540]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	069b      	lsls	r3, r3, #26
 8003020:	4983      	ldr	r1, [pc, #524]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003026:	e05d      	b.n	80030e4 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003028:	4b81      	ldr	r3, [pc, #516]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	497e      	ldr	r1, [pc, #504]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003038:	4313      	orrs	r3, r2
 800303a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800303c:	e052      	b.n	80030e4 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d035      	beq.n	80030b2 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003046:	4b7a      	ldr	r3, [pc, #488]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a79      	ldr	r2, [pc, #484]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 800304c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fd fb43 	bl	80006dc <HAL_GetTick>
 8003056:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800305a:	f7fd fb3f 	bl	80006dc <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e205      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800306c:	4b70      	ldr	r3, [pc, #448]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003078:	f7fd fb3c 	bl	80006f4 <HAL_GetREVID>
 800307c:	4602      	mov	r2, r0
 800307e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003082:	429a      	cmp	r2, r3
 8003084:	d80a      	bhi.n	800309c <HAL_RCC_OscConfig+0x380>
 8003086:	4b6a      	ldr	r3, [pc, #424]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	069b      	lsls	r3, r3, #26
 8003094:	4966      	ldr	r1, [pc, #408]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
 800309a:	e023      	b.n	80030e4 <HAL_RCC_OscConfig+0x3c8>
 800309c:	4b64      	ldr	r3, [pc, #400]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	4961      	ldr	r1, [pc, #388]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60cb      	str	r3, [r1, #12]
 80030b0:	e018      	b.n	80030e4 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030b2:	4b5f      	ldr	r3, [pc, #380]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a5e      	ldr	r2, [pc, #376]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 80030b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fd fb0d 	bl	80006dc <HAL_GetTick>
 80030c2:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030c6:	f7fd fb09 	bl	80006dc <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1cf      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030d8:	4b55      	ldr	r3, [pc, #340]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d036      	beq.n	800315e <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d019      	beq.n	800312c <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f8:	4b4d      	ldr	r3, [pc, #308]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 80030fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fc:	4a4c      	ldr	r2, [pc, #304]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fd faea 	bl	80006dc <HAL_GetTick>
 8003108:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310c:	f7fd fae6 	bl	80006dc <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e1ac      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800311e:	4b44      	ldr	r3, [pc, #272]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x3f0>
 800312a:	e018      	b.n	800315e <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312c:	4b40      	ldr	r3, [pc, #256]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	4a3f      	ldr	r2, [pc, #252]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fd fad0 	bl	80006dc <HAL_GetTick>
 800313c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003140:	f7fd facc 	bl	80006dc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e192      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003152:	4b37      	ldr	r3, [pc, #220]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d036      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d019      	beq.n	80031a6 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003172:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a2e      	ldr	r2, [pc, #184]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800317c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800317e:	f7fd faad 	bl	80006dc <HAL_GetTick>
 8003182:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003186:	f7fd faa9 	bl	80006dc <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e16f      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x46a>
 80031a4:	e018      	b.n	80031d8 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a21      	ldr	r2, [pc, #132]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 80031ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031b2:	f7fd fa93 	bl	80006dc <HAL_GetTick>
 80031b6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031ba:	f7fd fa8f 	bl	80006dc <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e155      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031cc:	4b18      	ldr	r3, [pc, #96]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8086 	beq.w	80032f2 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HAL_RCC_OscConfig+0x518>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a12      	ldr	r2, [pc, #72]	; (8003234 <HAL_RCC_OscConfig+0x518>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031f2:	f7fd fa73 	bl	80006dc <HAL_GetTick>
 80031f6:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031fa:	f7fd fa6f 	bl	80006dc <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b64      	cmp	r3, #100	; 0x64
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e135      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_OscConfig+0x518>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10b      	bne.n	8003238 <HAL_RCC_OscConfig+0x51c>
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	4a02      	ldr	r2, [pc, #8]	; (8003230 <HAL_RCC_OscConfig+0x514>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	; 0x70
 800322c:	e032      	b.n	8003294 <HAL_RCC_OscConfig+0x578>
 800322e:	bf00      	nop
 8003230:	58024400 	.word	0x58024400
 8003234:	58024800 	.word	0x58024800
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10c      	bne.n	800325a <HAL_RCC_OscConfig+0x53e>
 8003240:	4b8f      	ldr	r3, [pc, #572]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a8e      	ldr	r2, [pc, #568]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
 800324c:	4b8c      	ldr	r3, [pc, #560]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	4a8b      	ldr	r2, [pc, #556]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003252:	f023 0304 	bic.w	r3, r3, #4
 8003256:	6713      	str	r3, [r2, #112]	; 0x70
 8003258:	e01c      	b.n	8003294 <HAL_RCC_OscConfig+0x578>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b05      	cmp	r3, #5
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x560>
 8003262:	4b87      	ldr	r3, [pc, #540]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a86      	ldr	r2, [pc, #536]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	6713      	str	r3, [r2, #112]	; 0x70
 800326e:	4b84      	ldr	r3, [pc, #528]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a83      	ldr	r2, [pc, #524]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0x578>
 800327c:	4b80      	ldr	r3, [pc, #512]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	4a7f      	ldr	r2, [pc, #508]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003282:	f023 0301 	bic.w	r3, r3, #1
 8003286:	6713      	str	r3, [r2, #112]	; 0x70
 8003288:	4b7d      	ldr	r3, [pc, #500]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a7c      	ldr	r2, [pc, #496]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 800328e:	f023 0304 	bic.w	r3, r3, #4
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d015      	beq.n	80032c8 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fd fa1e 	bl	80006dc <HAL_GetTick>
 80032a0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fd fa1a 	bl	80006dc <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e0de      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ba:	4b71      	ldr	r3, [pc, #452]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0ee      	beq.n	80032a4 <HAL_RCC_OscConfig+0x588>
 80032c6:	e014      	b.n	80032f2 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fd fa08 	bl	80006dc <HAL_GetTick>
 80032cc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fd fa04 	bl	80006dc <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0c8      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032e6:	4b66      	ldr	r3, [pc, #408]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1ee      	bne.n	80032d0 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 80bd 	beq.w	8003476 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032fc:	4b60      	ldr	r3, [pc, #384]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003304:	2b18      	cmp	r3, #24
 8003306:	f000 80b4 	beq.w	8003472 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b02      	cmp	r3, #2
 8003310:	f040 8095 	bne.w	800343e <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003314:	4b5a      	ldr	r3, [pc, #360]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a59      	ldr	r2, [pc, #356]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 800331a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800331e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fd f9dc 	bl	80006dc <HAL_GetTick>
 8003324:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003328:	f7fd f9d8 	bl	80006dc <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e09e      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800333a:	4b51      	ldr	r3, [pc, #324]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003346:	4b4e      	ldr	r3, [pc, #312]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800334a:	4b4e      	ldr	r3, [pc, #312]	; (8003484 <HAL_RCC_OscConfig+0x768>)
 800334c:	4013      	ands	r3, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	430a      	orrs	r2, r1
 800335a:	4949      	ldr	r1, [pc, #292]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 800335c:	4313      	orrs	r3, r2
 800335e:	628b      	str	r3, [r1, #40]	; 0x28
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	3b01      	subs	r3, #1
 8003366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336e:	3b01      	subs	r3, #1
 8003370:	025b      	lsls	r3, r3, #9
 8003372:	b29b      	uxth	r3, r3
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	3b01      	subs	r3, #1
 800337c:	041b      	lsls	r3, r3, #16
 800337e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003388:	3b01      	subs	r3, #1
 800338a:	061b      	lsls	r3, r3, #24
 800338c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003390:	493b      	ldr	r1, [pc, #236]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003392:	4313      	orrs	r3, r2
 8003394:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003396:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	4a39      	ldr	r2, [pc, #228]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033a2:	4b37      	ldr	r3, [pc, #220]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80033a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a6:	4b38      	ldr	r3, [pc, #224]	; (8003488 <HAL_RCC_OscConfig+0x76c>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033ae:	00d2      	lsls	r2, r2, #3
 80033b0:	4933      	ldr	r1, [pc, #204]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033b6:	4b32      	ldr	r3, [pc, #200]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	f023 020c 	bic.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	492f      	ldr	r1, [pc, #188]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	f023 0202 	bic.w	r2, r3, #2
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	492a      	ldr	r1, [pc, #168]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033da:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	4a28      	ldr	r2, [pc, #160]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	4a25      	ldr	r2, [pc, #148]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80033ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80033f2:	4b23      	ldr	r3, [pc, #140]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	4a22      	ldr	r2, [pc, #136]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80033fe:	4b20      	ldr	r3, [pc, #128]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	4a1f      	ldr	r2, [pc, #124]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003410:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7fd f961 	bl	80006dc <HAL_GetTick>
 800341a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341e:	f7fd f95d 	bl	80006dc <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e023      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003430:	4b13      	ldr	r3, [pc, #76]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x702>
 800343c:	e01b      	b.n	8003476 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a0f      	ldr	r2, [pc, #60]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003444:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344a:	f7fd f947 	bl	80006dc <HAL_GetTick>
 800344e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003452:	f7fd f943 	bl	80006dc <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e009      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_RCC_OscConfig+0x764>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f0      	bne.n	8003452 <HAL_RCC_OscConfig+0x736>
 8003470:	e001      	b.n	8003476 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3728      	adds	r7, #40	; 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	58024400 	.word	0x58024400
 8003484:	fffffc0c 	.word	0xfffffc0c
 8003488:	ffff0007 	.word	0xffff0007

0800348c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e18b      	b.n	80037b8 <HAL_RCC_ClockConfig+0x32c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a0:	4b8a      	ldr	r3, [pc, #552]	; (80036cc <HAL_RCC_ClockConfig+0x240>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d910      	bls.n	80034d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b87      	ldr	r3, [pc, #540]	; (80036cc <HAL_RCC_ClockConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 020f 	bic.w	r2, r3, #15
 80034b6:	4985      	ldr	r1, [pc, #532]	; (80036cc <HAL_RCC_ClockConfig+0x240>)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b83      	ldr	r3, [pc, #524]	; (80036cc <HAL_RCC_ClockConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e173      	b.n	80037b8 <HAL_RCC_ClockConfig+0x32c>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d010      	beq.n	80034fe <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	4b7b      	ldr	r3, [pc, #492]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d908      	bls.n	80034fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034ec:	4b78      	ldr	r3, [pc, #480]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	4975      	ldr	r1, [pc, #468]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d010      	beq.n	800352c <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	4b70      	ldr	r3, [pc, #448]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003516:	429a      	cmp	r2, r3
 8003518:	d908      	bls.n	800352c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800351a:	4b6d      	ldr	r3, [pc, #436]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	496a      	ldr	r1, [pc, #424]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 8003528:	4313      	orrs	r3, r2
 800352a:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	d010      	beq.n	800355a <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699a      	ldr	r2, [r3, #24]
 800353c:	4b64      	ldr	r3, [pc, #400]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003544:	429a      	cmp	r2, r3
 8003546:	d908      	bls.n	800355a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003548:	4b61      	ldr	r3, [pc, #388]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	495e      	ldr	r1, [pc, #376]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 8003556:	4313      	orrs	r3, r2
 8003558:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d010      	beq.n	8003588 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	4b59      	ldr	r3, [pc, #356]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003572:	429a      	cmp	r2, r3
 8003574:	d908      	bls.n	8003588 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003576:	4b56      	ldr	r3, [pc, #344]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	4953      	ldr	r1, [pc, #332]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 8003584:	4313      	orrs	r3, r2
 8003586:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d010      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	4b4d      	ldr	r3, [pc, #308]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d908      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a4:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f023 020f 	bic.w	r2, r3, #15
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4947      	ldr	r1, [pc, #284]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d055      	beq.n	800366e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035c2:	4b43      	ldr	r3, [pc, #268]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	4940      	ldr	r1, [pc, #256]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d107      	bne.n	80035ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035dc:	4b3c      	ldr	r3, [pc, #240]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d121      	bne.n	800362c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0e5      	b.n	80037b8 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035f4:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d115      	bne.n	800362c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0d9      	b.n	80037b8 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800360c:	4b30      	ldr	r3, [pc, #192]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0cd      	b.n	80037b8 <HAL_RCC_ClockConfig+0x32c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800361c:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0c5      	b.n	80037b8 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800362c:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f023 0207 	bic.w	r2, r3, #7
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4925      	ldr	r1, [pc, #148]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 800363a:	4313      	orrs	r3, r2
 800363c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363e:	f7fd f84d 	bl	80006dc <HAL_GetTick>
 8003642:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003644:	e00a      	b.n	800365c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003646:	f7fd f849 	bl	80006dc <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0ad      	b.n	80037b8 <HAL_RCC_ClockConfig+0x32c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365c:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	429a      	cmp	r2, r3
 800366c:	d1eb      	bne.n	8003646 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d010      	beq.n	800369c <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	429a      	cmp	r2, r3
 8003688:	d208      	bcs.n	800369c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800368a:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f023 020f 	bic.w	r2, r3, #15
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	490e      	ldr	r1, [pc, #56]	; (80036d0 <HAL_RCC_ClockConfig+0x244>)
 8003698:	4313      	orrs	r3, r2
 800369a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCC_ClockConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d214      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <HAL_RCC_ClockConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 020f 	bic.w	r2, r3, #15
 80036b2:	4906      	ldr	r1, [pc, #24]	; (80036cc <HAL_RCC_ClockConfig+0x240>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b04      	ldr	r3, [pc, #16]	; (80036cc <HAL_RCC_ClockConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e075      	b.n	80037b8 <HAL_RCC_ClockConfig+0x32c>
 80036cc:	52002000 	.word	0x52002000
 80036d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d010      	beq.n	8003702 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d208      	bcs.n	8003702 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036f0:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	4930      	ldr	r1, [pc, #192]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d010      	beq.n	8003730 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800371a:	429a      	cmp	r2, r3
 800371c:	d208      	bcs.n	8003730 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800371e:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	4925      	ldr	r1, [pc, #148]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 800372c:	4313      	orrs	r3, r2
 800372e:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d010      	beq.n	800375e <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003748:	429a      	cmp	r2, r3
 800374a:	d208      	bcs.n	800375e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800374c:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	4919      	ldr	r1, [pc, #100]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 800375a:	4313      	orrs	r3, r2
 800375c:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d010      	beq.n	800378c <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003776:	429a      	cmp	r2, r3
 8003778:	d208      	bcs.n	800378c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	490e      	ldr	r1, [pc, #56]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 8003788:	4313      	orrs	r3, r2
 800378a:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800378c:	f000 f81e 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8003790:	4601      	mov	r1, r0
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_ClockConfig+0x334>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	4a09      	ldr	r2, [pc, #36]	; (80037c4 <HAL_RCC_ClockConfig+0x338>)
 800379e:	5cd3      	ldrb	r3, [r2, r3]
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	fa21 f303 	lsr.w	r3, r1, r3
 80037a8:	4a07      	ldr	r2, [pc, #28]	; (80037c8 <HAL_RCC_ClockConfig+0x33c>)
 80037aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 80037ac:	2000      	movs	r0, #0
 80037ae:	f7fc ff4b 	bl	8000648 <HAL_InitTick>
 80037b2:	4603      	mov	r3, r0
 80037b4:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80037b6:	7afb      	ldrb	r3, [r7, #11]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	58024400 	.word	0x58024400
 80037c4:	0800b6e0 	.word	0x0800b6e0
 80037c8:	24000008 	.word	0x24000008

080037cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	; 0x24
 80037d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d2:	4baf      	ldr	r3, [pc, #700]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037da:	2b18      	cmp	r3, #24
 80037dc:	f200 814e 	bhi.w	8003a7c <HAL_RCC_GetSysClockFreq+0x2b0>
 80037e0:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	0800384d 	.word	0x0800384d
 80037ec:	08003a7d 	.word	0x08003a7d
 80037f0:	08003a7d 	.word	0x08003a7d
 80037f4:	08003a7d 	.word	0x08003a7d
 80037f8:	08003a7d 	.word	0x08003a7d
 80037fc:	08003a7d 	.word	0x08003a7d
 8003800:	08003a7d 	.word	0x08003a7d
 8003804:	08003a7d 	.word	0x08003a7d
 8003808:	08003873 	.word	0x08003873
 800380c:	08003a7d 	.word	0x08003a7d
 8003810:	08003a7d 	.word	0x08003a7d
 8003814:	08003a7d 	.word	0x08003a7d
 8003818:	08003a7d 	.word	0x08003a7d
 800381c:	08003a7d 	.word	0x08003a7d
 8003820:	08003a7d 	.word	0x08003a7d
 8003824:	08003a7d 	.word	0x08003a7d
 8003828:	08003879 	.word	0x08003879
 800382c:	08003a7d 	.word	0x08003a7d
 8003830:	08003a7d 	.word	0x08003a7d
 8003834:	08003a7d 	.word	0x08003a7d
 8003838:	08003a7d 	.word	0x08003a7d
 800383c:	08003a7d 	.word	0x08003a7d
 8003840:	08003a7d 	.word	0x08003a7d
 8003844:	08003a7d 	.word	0x08003a7d
 8003848:	0800387f 	.word	0x0800387f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800384c:	4b90      	ldr	r3, [pc, #576]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d009      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003858:	4b8d      	ldr	r3, [pc, #564]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	08db      	lsrs	r3, r3, #3
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	4a8c      	ldr	r2, [pc, #560]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800386a:	e10a      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800386c:	4b89      	ldr	r3, [pc, #548]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800386e:	61bb      	str	r3, [r7, #24]
    break;
 8003870:	e107      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003872:	4b89      	ldr	r3, [pc, #548]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003874:	61bb      	str	r3, [r7, #24]
    break;
 8003876:	e104      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003878:	4b88      	ldr	r3, [pc, #544]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800387a:	61bb      	str	r3, [r7, #24]
    break;
 800387c:	e101      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800387e:	4b84      	ldr	r3, [pc, #528]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003888:	4b81      	ldr	r3, [pc, #516]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003892:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003894:	4b7e      	ldr	r3, [pc, #504]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800389e:	4b7c      	ldr	r3, [pc, #496]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a2:	08db      	lsrs	r3, r3, #3
 80038a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80da 	beq.w	8003a76 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d05a      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0x1b2>
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d302      	bcc.n	80038d2 <HAL_RCC_GetSysClockFreq+0x106>
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d078      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80038d0:	e099      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d2:	4b6f      	ldr	r3, [pc, #444]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d02d      	beq.n	800393a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038de:	4b6c      	ldr	r3, [pc, #432]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	08db      	lsrs	r3, r3, #3
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	4a6a      	ldr	r2, [pc, #424]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80038ea:	fa22 f303 	lsr.w	r3, r2, r3
 80038ee:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	ee07 3a90 	vmov	s15, r3
 8003900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003908:	4b61      	ldr	r3, [pc, #388]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003918:	ed97 6a02 	vldr	s12, [r7, #8]
 800391c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003aa0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003934:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003938:	e087      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003944:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003aa4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394c:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003954:	ee07 3a90 	vmov	s15, r3
 8003958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003960:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003aa0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003978:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800397c:	e065      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	ee07 3a90 	vmov	s15, r3
 8003984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003988:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003aa8 <HAL_RCC_GetSysClockFreq+0x2dc>
 800398c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003990:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003998:	ee07 3a90 	vmov	s15, r3
 800399c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80039a4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003aa0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80039a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039c0:	e043      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039cc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003aac <HAL_RCC_GetSysClockFreq+0x2e0>
 80039d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d4:	4b2e      	ldr	r3, [pc, #184]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039dc:	ee07 3a90 	vmov	s15, r3
 80039e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80039e8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003aa0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80039ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a04:	e021      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	ee07 3a90 	vmov	s15, r3
 8003a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a10:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003aa8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003a14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a20:	ee07 3a90 	vmov	s15, r3
 8003a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a28:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a2c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003aa0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a48:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003a4a:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	0a5b      	lsrs	r3, r3, #9
 8003a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a54:	3301      	adds	r3, #1
 8003a56:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a6e:	ee17 3a90 	vmov	r3, s15
 8003a72:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003a74:	e005      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
    break;
 8003a7a:	e002      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003a7e:	61bb      	str	r3, [r7, #24]
    break;
 8003a80:	bf00      	nop
  }

  return sysclockfreq;
 8003a82:	69bb      	ldr	r3, [r7, #24]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3724      	adds	r7, #36	; 0x24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	58024400 	.word	0x58024400
 8003a94:	03d09000 	.word	0x03d09000
 8003a98:	003d0900 	.word	0x003d0900
 8003a9c:	007a1200 	.word	0x007a1200
 8003aa0:	46000000 	.word	0x46000000
 8003aa4:	4c742400 	.word	0x4c742400
 8003aa8:	4a742400 	.word	0x4a742400
 8003aac:	4af42400 	.word	0x4af42400

08003ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ab4:	f001 fd40 	bl	8005538 <HAL_RCCEx_GetD1SysClockFreq>
 8003ab8:	4601      	mov	r1, r0
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_RCC_GetHCLKFreq+0x2c>)
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	4a07      	ldr	r2, [pc, #28]	; (8003ae0 <HAL_RCC_GetHCLKFreq+0x30>)
 8003ac4:	5cd3      	ldrb	r3, [r2, r3]
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	fa21 f303 	lsr.w	r3, r1, r3
 8003ace:	4a05      	ldr	r2, [pc, #20]	; (8003ae4 <HAL_RCC_GetHCLKFreq+0x34>)
 8003ad0:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003ad2:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <HAL_RCC_GetHCLKFreq+0x34>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	58024400 	.word	0x58024400
 8003ae0:	0800b6e0 	.word	0x0800b6e0
 8003ae4:	2400000c 	.word	0x2400000c

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003aec:	f7ff ffe0 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003af0:	4601      	mov	r1, r0
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003afe:	5cd3      	ldrb	r3, [r2, r3]
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	0800b6e0 	.word	0x0800b6e0

08003b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b18:	f7ff ffca 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4601      	mov	r1, r0
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b2a:	5cd3      	ldrb	r3, [r2, r3]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	0800b6e0 	.word	0x0800b6e0

08003b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b48:	2300      	movs	r3, #0
 8003b4a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d03d      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b64:	d013      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6a:	d802      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003b70:	e01f      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b76:	d013      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003b78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b7c:	d01c      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003b7e:	e018      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b80:	4baf      	ldr	r3, [pc, #700]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	4aae      	ldr	r2, [pc, #696]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b8c:	e015      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	2102      	movs	r1, #2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f001 fceb 	bl	8005570 <RCCEx_PLL2_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b9e:	e00c      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3324      	adds	r3, #36	; 0x24
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 fd94 	bl	80056d4 <RCCEx_PLL3_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bb0:	e003      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb6:	e000      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003bc0:	4b9f      	ldr	r3, [pc, #636]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bcc:	499c      	ldr	r1, [pc, #624]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	650b      	str	r3, [r1, #80]	; 0x50
 8003bd2:	e001      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d03d      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d826      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003bec:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c09 	.word	0x08003c09
 8003bf8:	08003c17 	.word	0x08003c17
 8003bfc:	08003c29 	.word	0x08003c29
 8003c00:	08003c41 	.word	0x08003c41
 8003c04:	08003c41 	.word	0x08003c41
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c08:	4b8d      	ldr	r3, [pc, #564]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	4a8c      	ldr	r2, [pc, #560]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c14:	e015      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 fca7 	bl	8005570 <RCCEx_PLL2_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c26:	e00c      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3324      	adds	r3, #36	; 0x24
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 fd50 	bl	80056d4 <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d109      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c48:	4b7d      	ldr	r3, [pc, #500]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4c:	f023 0207 	bic.w	r2, r3, #7
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	497a      	ldr	r1, [pc, #488]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	650b      	str	r3, [r1, #80]	; 0x50
 8003c5a:	e001      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d03e      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c70:	2b80      	cmp	r3, #128	; 0x80
 8003c72:	d01c      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003c74:	2b80      	cmp	r3, #128	; 0x80
 8003c76:	d804      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d00d      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003c80:	e01e      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003c82:	2bc0      	cmp	r3, #192	; 0xc0
 8003c84:	d01f      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8a:	d01e      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c8c:	e018      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8e:	4b6c      	ldr	r3, [pc, #432]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	4a6b      	ldr	r2, [pc, #428]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c9a:	e017      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 fc64 	bl	8005570 <RCCEx_PLL2_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003cac:	e00e      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3324      	adds	r3, #36	; 0x24
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f001 fd0d 	bl	80056d4 <RCCEx_PLL3_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003cbe:	e005      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc4:	e002      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e000      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003cd2:	4b5b      	ldr	r3, [pc, #364]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	4958      	ldr	r1, [pc, #352]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ce4:	e001      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
 8003ce8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d044      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d00:	d01f      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d06:	d805      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d10:	d00e      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003d12:	e01f      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003d14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d18:	d01f      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d1e:	d01e      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003d20:	e018      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d22:	4b47      	ldr	r3, [pc, #284]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	4a46      	ldr	r2, [pc, #280]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d2e:	e017      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 fc1a 	bl	8005570 <RCCEx_PLL2_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003d40:	e00e      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3324      	adds	r3, #36	; 0x24
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 fcc3 	bl	80056d4 <RCCEx_PLL3_Config>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d52:	e005      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	75fb      	strb	r3, [r7, #23]
      break;
 8003d58:	e002      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d74:	4932      	ldr	r1, [pc, #200]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	658b      	str	r3, [r1, #88]	; 0x58
 8003d7a:	e001      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d044      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d96:	d01f      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d9c:	d805      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003da2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da6:	d00e      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003da8:	e01f      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003daa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dae:	d01f      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003db4:	d01e      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003db6:	e018      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db8:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	4a20      	ldr	r2, [pc, #128]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dc4:	e017      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f001 fbcf 	bl	8005570 <RCCEx_PLL2_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003dd6:	e00e      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3324      	adds	r3, #36	; 0x24
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 fc78 	bl	80056d4 <RCCEx_PLL3_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003de8:	e005      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	75fb      	strb	r3, [r7, #23]
      break;
 8003dee:	e002      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003df0:	bf00      	nop
 8003df2:	e000      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e0a:	490d      	ldr	r1, [pc, #52]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	658b      	str	r3, [r1, #88]	; 0x58
 8003e10:	e001      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
 8003e14:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d035      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d00c      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d802      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01b      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003e32:	e017      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d00c      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003e38:	2b30      	cmp	r3, #48	; 0x30
 8003e3a:	d018      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003e3c:	e012      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003e3e:	bf00      	nop
 8003e40:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e44:	4baf      	ldr	r3, [pc, #700]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	4aae      	ldr	r2, [pc, #696]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003e50:	e00e      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2102      	movs	r1, #2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 fb89 	bl	8005570 <RCCEx_PLL2_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003e62:	e005      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	75fb      	strb	r3, [r7, #23]
      break;
 8003e68:	e002      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e76:	4ba3      	ldr	r3, [pc, #652]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e82:	49a0      	ldr	r1, [pc, #640]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e88:	e001      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d042      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea2:	d01f      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea8:	d805      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003eb4:	e01f      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003eb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eba:	d01f      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec0:	d01e      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003ec2:	e018      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec4:	4b8f      	ldr	r3, [pc, #572]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	4a8e      	ldr	r2, [pc, #568]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ece:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ed0:	e017      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f001 fb49 	bl	8005570 <RCCEx_PLL2_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ee2:	e00e      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3324      	adds	r3, #36	; 0x24
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 fbf2 	bl	80056d4 <RCCEx_PLL3_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ef4:	e005      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8003efa:	e002      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003efc:	bf00      	nop
 8003efe:	e000      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f08:	4b7e      	ldr	r3, [pc, #504]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	497b      	ldr	r1, [pc, #492]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	650b      	str	r3, [r1, #80]	; 0x50
 8003f1a:	e001      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d042      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f34:	d01b      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003f36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f3a:	d805      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d022      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003f46:	e01b      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003f48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f4c:	d01d      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003f4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f52:	d01c      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003f54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f58:	d01b      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003f5a:	e011      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	2101      	movs	r1, #1
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 fb04 	bl	8005570 <RCCEx_PLL2_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f6c:	e012      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3324      	adds	r3, #36	; 0x24
 8003f72:	2101      	movs	r1, #1
 8003f74:	4618      	mov	r0, r3
 8003f76:	f001 fbad 	bl	80056d4 <RCCEx_PLL3_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f7e:	e009      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	75fb      	strb	r3, [r7, #23]
      break;
 8003f84:	e006      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003f86:	bf00      	nop
 8003f88:	e004      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e002      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f9a:	4b5a      	ldr	r3, [pc, #360]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa6:	4957      	ldr	r1, [pc, #348]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	650b      	str	r3, [r1, #80]	; 0x50
 8003fac:	e001      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fae:	7dfb      	ldrb	r3, [r7, #23]
 8003fb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d044      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fc8:	d01b      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fce:	d805      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d022      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003fda:	e01b      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe0:	d01d      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fe6:	d01c      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003fe8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fec:	d01b      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003fee:	e011      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 faba 	bl	8005570 <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004000:	e012      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3324      	adds	r3, #36	; 0x24
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f001 fb63 	bl	80056d4 <RCCEx_PLL3_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004012:	e009      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
      break;
 8004018:	e006      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800401a:	bf00      	nop
 800401c:	e004      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800402e:	4b35      	ldr	r3, [pc, #212]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800403c:	4931      	ldr	r1, [pc, #196]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800403e:	4313      	orrs	r3, r2
 8004040:	658b      	str	r3, [r1, #88]	; 0x58
 8004042:	e001      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
 8004046:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02d      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800405c:	d005      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800405e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004062:	d009      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004068:	e00f      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	4a25      	ldr	r2, [pc, #148]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004074:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004076:	e00c      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f001 fa76 	bl	8005570 <RCCEx_PLL2_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004088:	e003      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	75fb      	strb	r3, [r7, #23]
      break;
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d109      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004098:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a4:	4917      	ldr	r1, [pc, #92]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	650b      	str	r3, [r1, #80]	; 0x50
 80040aa:	e001      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d035      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d81b      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80040c4:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	08004109 	.word	0x08004109
 80040d0:	080040dd 	.word	0x080040dd
 80040d4:	080040eb 	.word	0x080040eb
 80040d8:	08004109 	.word	0x08004109
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040dc:	4b09      	ldr	r3, [pc, #36]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	4a08      	ldr	r2, [pc, #32]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80040e8:	e00f      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 fa3d 	bl	8005570 <RCCEx_PLL2_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80040fa:	e006      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004100:	e003      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004102:	bf00      	nop
 8004104:	58024400 	.word	0x58024400
      break;
 8004108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004110:	4bba      	ldr	r3, [pc, #744]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004114:	f023 0203 	bic.w	r2, r3, #3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411c:	49b7      	ldr	r1, [pc, #732]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800411e:	4313      	orrs	r3, r2
 8004120:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004122:	e001      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8086 	beq.w	8004242 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004136:	4bb2      	ldr	r3, [pc, #712]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4ab1      	ldr	r2, [pc, #708]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004140:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004142:	f7fc facb 	bl	80006dc <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004148:	e009      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414a:	f7fc fac7 	bl	80006dc <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b64      	cmp	r3, #100	; 0x64
 8004156:	d902      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	75fb      	strb	r3, [r7, #23]
        break;
 800415c:	e005      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800415e:	4ba8      	ldr	r3, [pc, #672]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0ef      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d166      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004170:	4ba2      	ldr	r3, [pc, #648]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004172:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800417a:	4053      	eors	r3, r2
 800417c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004180:	2b00      	cmp	r3, #0
 8004182:	d013      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004184:	4b9d      	ldr	r3, [pc, #628]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800418e:	4b9b      	ldr	r3, [pc, #620]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	4a9a      	ldr	r2, [pc, #616]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004198:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800419a:	4b98      	ldr	r3, [pc, #608]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	4a97      	ldr	r2, [pc, #604]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041a6:	4a95      	ldr	r2, [pc, #596]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b6:	d115      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fc fa90 	bl	80006dc <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041be:	e00b      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c0:	f7fc fa8c 	bl	80006dc <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d902      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	75fb      	strb	r3, [r7, #23]
            break;
 80041d6:	e005      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041d8:	4b88      	ldr	r3, [pc, #544]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ed      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d126      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f8:	d10d      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80041fa:	4b80      	ldr	r3, [pc, #512]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004208:	0919      	lsrs	r1, r3, #4
 800420a:	4b7e      	ldr	r3, [pc, #504]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800420c:	400b      	ands	r3, r1
 800420e:	497b      	ldr	r1, [pc, #492]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	610b      	str	r3, [r1, #16]
 8004214:	e005      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004216:	4b79      	ldr	r3, [pc, #484]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	4a78      	ldr	r2, [pc, #480]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800421c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004220:	6113      	str	r3, [r2, #16]
 8004222:	4b76      	ldr	r3, [pc, #472]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004224:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800422c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004230:	4972      	ldr	r1, [pc, #456]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	670b      	str	r3, [r1, #112]	; 0x70
 8004236:	e004      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	75bb      	strb	r3, [r7, #22]
 800423c:	e001      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423e:	7dfb      	ldrb	r3, [r7, #23]
 8004240:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d07d      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004252:	2b28      	cmp	r3, #40	; 0x28
 8004254:	d866      	bhi.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004256:	a201      	add	r2, pc, #4	; (adr r2, 800425c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425c:	0800432b 	.word	0x0800432b
 8004260:	08004325 	.word	0x08004325
 8004264:	08004325 	.word	0x08004325
 8004268:	08004325 	.word	0x08004325
 800426c:	08004325 	.word	0x08004325
 8004270:	08004325 	.word	0x08004325
 8004274:	08004325 	.word	0x08004325
 8004278:	08004325 	.word	0x08004325
 800427c:	08004301 	.word	0x08004301
 8004280:	08004325 	.word	0x08004325
 8004284:	08004325 	.word	0x08004325
 8004288:	08004325 	.word	0x08004325
 800428c:	08004325 	.word	0x08004325
 8004290:	08004325 	.word	0x08004325
 8004294:	08004325 	.word	0x08004325
 8004298:	08004325 	.word	0x08004325
 800429c:	08004313 	.word	0x08004313
 80042a0:	08004325 	.word	0x08004325
 80042a4:	08004325 	.word	0x08004325
 80042a8:	08004325 	.word	0x08004325
 80042ac:	08004325 	.word	0x08004325
 80042b0:	08004325 	.word	0x08004325
 80042b4:	08004325 	.word	0x08004325
 80042b8:	08004325 	.word	0x08004325
 80042bc:	0800432b 	.word	0x0800432b
 80042c0:	08004325 	.word	0x08004325
 80042c4:	08004325 	.word	0x08004325
 80042c8:	08004325 	.word	0x08004325
 80042cc:	08004325 	.word	0x08004325
 80042d0:	08004325 	.word	0x08004325
 80042d4:	08004325 	.word	0x08004325
 80042d8:	08004325 	.word	0x08004325
 80042dc:	0800432b 	.word	0x0800432b
 80042e0:	08004325 	.word	0x08004325
 80042e4:	08004325 	.word	0x08004325
 80042e8:	08004325 	.word	0x08004325
 80042ec:	08004325 	.word	0x08004325
 80042f0:	08004325 	.word	0x08004325
 80042f4:	08004325 	.word	0x08004325
 80042f8:	08004325 	.word	0x08004325
 80042fc:	0800432b 	.word	0x0800432b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	2101      	movs	r1, #1
 8004306:	4618      	mov	r0, r3
 8004308:	f001 f932 	bl	8005570 <RCCEx_PLL2_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004310:	e00c      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3324      	adds	r3, #36	; 0x24
 8004316:	2101      	movs	r1, #1
 8004318:	4618      	mov	r0, r3
 800431a:	f001 f9db 	bl	80056d4 <RCCEx_PLL3_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004322:	e003      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	75fb      	strb	r3, [r7, #23]
      break;
 8004328:	e000      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800432a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004332:	4b32      	ldr	r3, [pc, #200]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800433e:	492f      	ldr	r1, [pc, #188]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004340:	4313      	orrs	r3, r2
 8004342:	654b      	str	r3, [r1, #84]	; 0x54
 8004344:	e001      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
 8004348:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d037      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435a:	2b05      	cmp	r3, #5
 800435c:	d820      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800435e:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	080043a7 	.word	0x080043a7
 8004368:	0800437d 	.word	0x0800437d
 800436c:	0800438f 	.word	0x0800438f
 8004370:	080043a7 	.word	0x080043a7
 8004374:	080043a7 	.word	0x080043a7
 8004378:	080043a7 	.word	0x080043a7
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	2101      	movs	r1, #1
 8004382:	4618      	mov	r0, r3
 8004384:	f001 f8f4 	bl	8005570 <RCCEx_PLL2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800438c:	e00c      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3324      	adds	r3, #36	; 0x24
 8004392:	2101      	movs	r1, #1
 8004394:	4618      	mov	r0, r3
 8004396:	f001 f99d 	bl	80056d4 <RCCEx_PLL3_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800439e:	e003      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	75fb      	strb	r3, [r7, #23]
      break;
 80043a4:	e000      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80043a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80043ae:	4b13      	ldr	r3, [pc, #76]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f023 0207 	bic.w	r2, r3, #7
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ba:	4910      	ldr	r1, [pc, #64]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	654b      	str	r3, [r1, #84]	; 0x54
 80043c0:	e001      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
 80043c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d040      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d8:	2b05      	cmp	r3, #5
 80043da:	d827      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80043dc:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80043de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e2:	bf00      	nop
 80043e4:	08004433 	.word	0x08004433
 80043e8:	08004409 	.word	0x08004409
 80043ec:	0800441b 	.word	0x0800441b
 80043f0:	08004433 	.word	0x08004433
 80043f4:	08004433 	.word	0x08004433
 80043f8:	08004433 	.word	0x08004433
 80043fc:	58024400 	.word	0x58024400
 8004400:	58024800 	.word	0x58024800
 8004404:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	2101      	movs	r1, #1
 800440e:	4618      	mov	r0, r3
 8004410:	f001 f8ae 	bl	8005570 <RCCEx_PLL2_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004418:	e00c      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3324      	adds	r3, #36	; 0x24
 800441e:	2101      	movs	r1, #1
 8004420:	4618      	mov	r0, r3
 8004422:	f001 f957 	bl	80056d4 <RCCEx_PLL3_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800442a:	e003      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	75fb      	strb	r3, [r7, #23]
      break;
 8004430:	e000      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800443a:	4bb3      	ldr	r3, [pc, #716]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	f023 0207 	bic.w	r2, r3, #7
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004448:	49af      	ldr	r1, [pc, #700]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800444a:	4313      	orrs	r3, r2
 800444c:	658b      	str	r3, [r1, #88]	; 0x58
 800444e:	e001      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d044      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800446a:	d01b      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800446c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004470:	d805      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d022      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800447c:	e01b      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004482:	d01d      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004488:	d01c      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800448a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800448e:	d01b      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004490:	e011      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f001 f869 	bl	8005570 <RCCEx_PLL2_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80044a2:	e012      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3324      	adds	r3, #36	; 0x24
 80044a8:	2102      	movs	r1, #2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 f912 	bl	80056d4 <RCCEx_PLL3_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80044b4:	e009      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ba:	e006      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80044bc:	bf00      	nop
 80044be:	e004      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80044c0:	bf00      	nop
 80044c2:	e002      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80044c4:	bf00      	nop
 80044c6:	e000      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80044c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044d0:	4b8d      	ldr	r3, [pc, #564]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80044d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044de:	498a      	ldr	r1, [pc, #552]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	654b      	str	r3, [r1, #84]	; 0x54
 80044e4:	e001      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d044      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004500:	d01b      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004506:	d805      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d022      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800450c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004512:	e01b      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004518:	d01d      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800451a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800451e:	d01c      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004524:	d01b      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004526:	e011      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3304      	adds	r3, #4
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f001 f81e 	bl	8005570 <RCCEx_PLL2_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004538:	e012      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3324      	adds	r3, #36	; 0x24
 800453e:	2102      	movs	r1, #2
 8004540:	4618      	mov	r0, r3
 8004542:	f001 f8c7 	bl	80056d4 <RCCEx_PLL3_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800454a:	e009      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
      break;
 8004550:	e006      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004552:	bf00      	nop
 8004554:	e004      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004556:	bf00      	nop
 8004558:	e002      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800455a:	bf00      	nop
 800455c:	e000      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800455e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004566:	4b68      	ldr	r3, [pc, #416]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004574:	4964      	ldr	r1, [pc, #400]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	658b      	str	r3, [r1, #88]	; 0x58
 800457a:	e001      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b00      	cmp	r3, #0
 800458a:	d044      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004596:	d01b      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800459c:	d805      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d022      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80045a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80045a8:	e01b      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80045aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ae:	d01d      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80045b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80045b4:	d01c      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80045b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045ba:	d01b      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80045bc:	e011      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 ffd3 	bl	8005570 <RCCEx_PLL2_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80045ce:	e012      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3324      	adds	r3, #36	; 0x24
 80045d4:	2102      	movs	r1, #2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f001 f87c 	bl	80056d4 <RCCEx_PLL3_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80045e0:	e009      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	75fb      	strb	r3, [r7, #23]
      break;
 80045e6:	e006      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80045e8:	bf00      	nop
 80045ea:	e004      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80045ec:	bf00      	nop
 80045ee:	e002      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80045f0:	bf00      	nop
 80045f2:	e000      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80045f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10a      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045fc:	4b42      	ldr	r3, [pc, #264]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800460a:	493f      	ldr	r1, [pc, #252]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800460c:	4313      	orrs	r3, r2
 800460e:	658b      	str	r3, [r1, #88]	; 0x58
 8004610:	e001      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01b      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462c:	d10b      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3324      	adds	r3, #36	; 0x24
 8004632:	2102      	movs	r1, #2
 8004634:	4618      	mov	r0, r3
 8004636:	f001 f84d 	bl	80056d4 <RCCEx_PLL3_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	75bb      	strb	r3, [r7, #22]
 8004644:	e009      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004646:	4b30      	ldr	r3, [pc, #192]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004654:	492c      	ldr	r1, [pc, #176]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004656:	4313      	orrs	r3, r2
 8004658:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01b      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004670:	d10b      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3324      	adds	r3, #36	; 0x24
 8004676:	2102      	movs	r1, #2
 8004678:	4618      	mov	r0, r3
 800467a:	f001 f82b 	bl	80056d4 <RCCEx_PLL3_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	75bb      	strb	r3, [r7, #22]
 8004688:	e009      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800468a:	4b1f      	ldr	r3, [pc, #124]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004698:	491b      	ldr	r1, [pc, #108]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800469a:	4313      	orrs	r3, r2
 800469c:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d032      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b4:	d00d      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80046b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046ba:	d016      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d111      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 ff52 	bl	8005570 <RCCEx_PLL2_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80046d0:	e00c      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3324      	adds	r3, #36	; 0x24
 80046d6:	2102      	movs	r1, #2
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fffb 	bl	80056d4 <RCCEx_PLL3_Config>
 80046de:	4603      	mov	r3, r0
 80046e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80046e2:	e003      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	75fb      	strb	r3, [r7, #23]
      break;
 80046e8:	e000      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 80046ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10c      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004700:	4901      	ldr	r1, [pc, #4]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004702:	4313      	orrs	r3, r2
 8004704:	658b      	str	r3, [r1, #88]	; 0x58
 8004706:	e003      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8004708:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d02f      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004726:	d00c      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004728:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800472c:	d015      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800472e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004732:	d10f      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004734:	4b79      	ldr	r3, [pc, #484]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	4a78      	ldr	r2, [pc, #480]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800473a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800473e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004740:	e00c      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3324      	adds	r3, #36	; 0x24
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f000 ffc3 	bl	80056d4 <RCCEx_PLL3_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004752:	e003      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	75fb      	strb	r3, [r7, #23]
      break;
 8004758:	e000      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 800475a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10a      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004762:	4b6e      	ldr	r3, [pc, #440]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004770:	496a      	ldr	r1, [pc, #424]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	654b      	str	r3, [r1, #84]	; 0x54
 8004776:	e001      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	7dfb      	ldrb	r3, [r7, #23]
 800477a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d029      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8004790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004794:	d007      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004796:	e00f      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004798:	4b60      	ldr	r3, [pc, #384]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	4a5f      	ldr	r2, [pc, #380]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800479e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047a4:	e00b      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	2102      	movs	r1, #2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fedf 	bl	8005570 <RCCEx_PLL2_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047b6:	e002      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	75fb      	strb	r3, [r7, #23]
      break;
 80047bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80047c4:	4b55      	ldr	r3, [pc, #340]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80047c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d0:	4952      	ldr	r1, [pc, #328]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047d6:	e001      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
 80047da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3324      	adds	r3, #36	; 0x24
 80047ec:	2102      	movs	r1, #2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 ff70 	bl	80056d4 <RCCEx_PLL3_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d02f      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800480e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004812:	d00c      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004818:	d802      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d011      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800481e:	e00d      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8004820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004824:	d00f      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800482a:	d00e      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 800482c:	e006      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800482e:	4b3b      	ldr	r3, [pc, #236]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	4a3a      	ldr	r2, [pc, #232]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004838:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800483a:	e007      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	75fb      	strb	r3, [r7, #23]
      break;
 8004840:	e004      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004842:	bf00      	nop
 8004844:	e002      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004846:	bf00      	nop
 8004848:	e000      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800484a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004852:	4b32      	ldr	r3, [pc, #200]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485e:	492f      	ldr	r1, [pc, #188]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004860:	4313      	orrs	r3, r2
 8004862:	654b      	str	r3, [r1, #84]	; 0x54
 8004864:	e001      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004866:	7dfb      	ldrb	r3, [r7, #23]
 8004868:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004876:	4b29      	ldr	r3, [pc, #164]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	4926      	ldr	r1, [pc, #152]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004894:	4b21      	ldr	r3, [pc, #132]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048a2:	491e      	ldr	r1, [pc, #120]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c0:	4916      	ldr	r1, [pc, #88]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00d      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	4a11      	ldr	r2, [pc, #68]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048dc:	6113      	str	r3, [r2, #16]
 80048de:	4b0f      	ldr	r3, [pc, #60]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048e8:	490c      	ldr	r1, [pc, #48]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	da08      	bge.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004902:	4906      	ldr	r1, [pc, #24]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004904:	4313      	orrs	r3, r2
 8004906:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004908:	7dbb      	ldrb	r3, [r7, #22]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	58024400 	.word	0x58024400

08004920 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b090      	sub	sp, #64	; 0x40
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492e:	d150      	bne.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004930:	4ba1      	ldr	r3, [pc, #644]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	2b04      	cmp	r3, #4
 800493e:	d844      	bhi.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8004940:	a201      	add	r2, pc, #4	; (adr r2, 8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004946:	bf00      	nop
 8004948:	0800495d 	.word	0x0800495d
 800494c:	0800496d 	.word	0x0800496d
 8004950:	0800497d 	.word	0x0800497d
 8004954:	080049c5 	.word	0x080049c5
 8004958:	0800498d 	.word	0x0800498d
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800495c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fc9d 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800496a:	e1dc      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800496c:	f107 0318 	add.w	r3, r7, #24
 8004970:	4618      	mov	r0, r3
 8004972:	f000 f9fd 	bl	8004d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800497a:	e1d4      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800497c:	f107 030c 	add.w	r3, r7, #12
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fb41 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800498a:	e1cc      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800498c:	4b8a      	ldr	r3, [pc, #552]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800498e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004990:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004994:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8004996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800499c:	4b87      	ldr	r3, [pc, #540]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80049a0:	e1c1      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80049a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049a8:	d102      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80049aa:	4b85      	ldr	r3, [pc, #532]	; (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049ae:	e1ba      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80049b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049b6:	d102      	bne.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80049b8:	4b82      	ldr	r3, [pc, #520]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80049ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049bc:	e1b3      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049c2:	e1b0      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80049c4:	4b80      	ldr	r3, [pc, #512]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049c8:	e1ad      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049ce:	bf00      	nop
 80049d0:	e1a9      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d8:	d14f      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80049da:	4b77      	ldr	r3, [pc, #476]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80049dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80049e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	2b80      	cmp	r3, #128	; 0x80
 80049e8:	d01c      	beq.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80049ea:	2b80      	cmp	r3, #128	; 0x80
 80049ec:	d804      	bhi.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d00e      	beq.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80049f6:	e03c      	b.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80049f8:	2bc0      	cmp	r3, #192	; 0xc0
 80049fa:	d037      	beq.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80049fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a00:	d018      	beq.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8004a02:	e036      	b.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fc49 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a12:	e188      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a14:	f107 0318 	add.w	r3, r7, #24
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 f9a9 	bl	8004d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a22:	e180      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a24:	f107 030c 	add.w	r3, r7, #12
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 faed 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a32:	e178      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a34:	4b60      	ldr	r3, [pc, #384]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004a44:	4b5d      	ldr	r3, [pc, #372]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004a48:	e16d      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a50:	d102      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8004a52:	4b5b      	ldr	r3, [pc, #364]	; (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a56:	e166      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a5e:	d102      	bne.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8004a60:	4b58      	ldr	r3, [pc, #352]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a64:	e15f      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a6a:	e15c      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a6c:	4b56      	ldr	r3, [pc, #344]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a70:	e159      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a76:	bf00      	nop
 8004a78:	e155      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d153      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004a82:	4b4d      	ldr	r3, [pc, #308]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a86:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004a8a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a92:	d01f      	beq.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8004a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a98:	d805      	bhi.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004a9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aa2:	d00f      	beq.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004aa4:	e03d      	b.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8004aa6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004aaa:	d037      	beq.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004aac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ab0:	d018      	beq.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8004ab2:	e036      	b.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fbf1 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ac2:	e130      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ac4:	f107 0318 	add.w	r3, r7, #24
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f951 	bl	8004d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ad2:	e128      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ad4:	f107 030c 	add.w	r3, r7, #12
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fa95 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ae2:	e120      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ae4:	4b34      	ldr	r3, [pc, #208]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004aec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d102      	bne.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004af4:	4b31      	ldr	r3, [pc, #196]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004af8:	e115      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b00:	d102      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8004b02:	4b2f      	ldr	r3, [pc, #188]	; (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b06:	e10e      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b0e:	d102      	bne.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8004b10:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b14:	e107      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b1a:	e104      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b20:	e101      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b26:	bf00      	nop
 8004b28:	e0fd      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b30:	d15d      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004b32:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b36:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004b3a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b42:	d01f      	beq.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b48:	d805      	bhi.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004b4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b52:	d00f      	beq.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8004b54:	e047      	b.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8004b56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b5a:	d041      	beq.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8004b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b60:	d018      	beq.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8004b62:	e040      	b.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fb99 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b72:	e0d8      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b74:	f107 0318 	add.w	r3, r7, #24
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 f8f9 	bl	8004d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b82:	e0d0      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b84:	f107 030c 	add.w	r3, r7, #12
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fa3d 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b92:	e0c8      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b9c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004ba8:	e0bd      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8004bb2:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bb6:	e0b6      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8004bb8:	58024400 	.word	0x58024400
 8004bbc:	03d09000 	.word	0x03d09000
 8004bc0:	003d0900 	.word	0x003d0900
 8004bc4:	007a1200 	.word	0x007a1200
 8004bc8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd2:	d102      	bne.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8004bd4:	4b56      	ldr	r3, [pc, #344]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bd8:	e0a5      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bde:	e0a2      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004be0:	4b54      	ldr	r3, [pc, #336]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004be4:	e09f      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bea:	bf00      	nop
 8004bec:	e09b      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf4:	d153      	bne.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004bf6:	4b50      	ldr	r3, [pc, #320]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8004bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004bfe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c06:	d01f      	beq.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0c:	d805      	bhi.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8004c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c16:	d00f      	beq.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8004c18:	e03d      	b.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8004c1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c1e:	d037      	beq.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c24:	d018      	beq.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004c26:	e036      	b.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fb37 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c36:	e076      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c38:	f107 0318 	add.w	r3, r7, #24
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f897 	bl	8004d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c46:	e06e      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c48:	f107 030c 	add.w	r3, r7, #12
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 f9db 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c56:	e066      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c58:	4b37      	ldr	r3, [pc, #220]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004c68:	4b34      	ldr	r3, [pc, #208]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004c6c:	e05b      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c74:	d102      	bne.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8004c76:	4b32      	ldr	r3, [pc, #200]	; (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x420>)
 8004c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c7a:	e054      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c82:	d102      	bne.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8004c84:	4b2a      	ldr	r3, [pc, #168]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c88:	e04d      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c8e:	e04a      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c90:	4b28      	ldr	r3, [pc, #160]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c94:	e047      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c9a:	bf00      	nop
 8004c9c:	e043      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ca4:	d13d      	bne.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004ca6:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cbc:	d011      	beq.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d12b      	bne.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cc2:	f107 0318 	add.w	r3, r7, #24
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f852 	bl	8004d70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cd0:	e029      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cd2:	f107 030c 	add.w	r3, r7, #12
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 f996 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ce0:	e021      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ce2:	4b15      	ldr	r3, [pc, #84]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d102      	bne.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 8004cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004cf6:	e016      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cfe:	d102      	bne.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8004d00:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x420>)
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d04:	e00f      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d0c:	d102      	bne.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8004d0e:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 8004d10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d12:	e008      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d18:	e005      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d1e:	bf00      	nop
 8004d20:	e001      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }
  else
    {
      frequency = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3740      	adds	r7, #64	; 0x40
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	007a1200 	.word	0x007a1200
 8004d34:	00bb8000 	.word	0x00bb8000
 8004d38:	58024400 	.word	0x58024400
 8004d3c:	03d09000 	.word	0x03d09000
 8004d40:	003d0900 	.word	0x003d0900

08004d44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d48:	f7fe feb2 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8004d4c:	4601      	mov	r1, r0
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	091b      	lsrs	r3, r3, #4
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	4a04      	ldr	r2, [pc, #16]	; (8004d6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d5a:	5cd3      	ldrb	r3, [r2, r3]
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	58024400 	.word	0x58024400
 8004d6c:	0800b6e0 	.word	0x0800b6e0

08004d70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b089      	sub	sp, #36	; 0x24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d78:	4b9d      	ldr	r3, [pc, #628]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8004d82:	4b9b      	ldr	r3, [pc, #620]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	0b1b      	lsrs	r3, r3, #12
 8004d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d8c:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8004d8e:	4b98      	ldr	r3, [pc, #608]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004d98:	4b95      	ldr	r3, [pc, #596]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9c:	08db      	lsrs	r3, r3, #3
 8004d9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	fb02 f303 	mul.w	r3, r2, r3
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 810a 	beq.w	8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d05a      	beq.n	8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d302      	bcc.n	8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d078      	beq.n	8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004dca:	e099      	b.n	8004f00 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dcc:	4b88      	ldr	r3, [pc, #544]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d02d      	beq.n	8004e34 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dd8:	4b85      	ldr	r3, [pc, #532]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	08db      	lsrs	r3, r3, #3
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	4a84      	ldr	r2, [pc, #528]	; (8004ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
 8004de8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e02:	4b7b      	ldr	r3, [pc, #492]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e32:	e087      	b.n	8004f44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e46:	4b6a      	ldr	r3, [pc, #424]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e76:	e065      	b.n	8004f44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8a:	4b59      	ldr	r3, [pc, #356]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eba:	e043      	b.n	8004f44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005004 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ece:	4b48      	ldr	r3, [pc, #288]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ee2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004efe:	e021      	b.n	8004f44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f12:	4b37      	ldr	r3, [pc, #220]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004f44:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	0a5b      	lsrs	r3, r3, #9
 8004f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f6a:	ee17 2a90 	vmov	r2, s15
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004f72:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f7c:	ee07 3a90 	vmov	s15, r3
 8004f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f98:	ee17 2a90 	vmov	r2, s15
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	0e1b      	lsrs	r3, r3, #24
 8004fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fba:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc6:	ee17 2a90 	vmov	r2, s15
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fce:	e008      	b.n	8004fe2 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	609a      	str	r2, [r3, #8]
}
 8004fe2:	bf00      	nop
 8004fe4:	3724      	adds	r7, #36	; 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	03d09000 	.word	0x03d09000
 8004ff8:	46000000 	.word	0x46000000
 8004ffc:	4c742400 	.word	0x4c742400
 8005000:	4a742400 	.word	0x4a742400
 8005004:	4af42400 	.word	0x4af42400

08005008 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	; 0x24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005010:	4b9d      	ldr	r3, [pc, #628]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800501a:	4b9b      	ldr	r3, [pc, #620]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	0d1b      	lsrs	r3, r3, #20
 8005020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005024:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8005026:	4b98      	ldr	r3, [pc, #608]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005030:	4b95      	ldr	r3, [pc, #596]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005034:	08db      	lsrs	r3, r3, #3
 8005036:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	fb02 f303 	mul.w	r3, r2, r3
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005048:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 810a 	beq.w	8005268 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d05a      	beq.n	8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 800505a:	2b01      	cmp	r3, #1
 800505c:	d302      	bcc.n	8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 800505e:	2b02      	cmp	r3, #2
 8005060:	d078      	beq.n	8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005062:	e099      	b.n	8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005064:	4b88      	ldr	r3, [pc, #544]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b00      	cmp	r3, #0
 800506e:	d02d      	beq.n	80050cc <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005070:	4b85      	ldr	r3, [pc, #532]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	08db      	lsrs	r3, r3, #3
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	4a84      	ldr	r2, [pc, #528]	; (800528c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b7b      	ldr	r3, [pc, #492]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050ca:	e087      	b.n	80051dc <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005294 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b6a      	ldr	r3, [pc, #424]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80050f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800510e:	e065      	b.n	80051dc <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	4b59      	ldr	r3, [pc, #356]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a03 	vldr	s12, [r7, #12]
 8005136:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005152:	e043      	b.n	80051dc <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800529c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005166:	4b48      	ldr	r3, [pc, #288]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005176:	ed97 6a03 	vldr	s12, [r7, #12]
 800517a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800517e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005196:	e021      	b.n	80051dc <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005298 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80051a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051aa:	4b37      	ldr	r3, [pc, #220]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80051be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80051c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80051dc:	4b2a      	ldr	r3, [pc, #168]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	0a5b      	lsrs	r3, r3, #9
 80051e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80051fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005202:	ee17 2a90 	vmov	r2, s15
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800520a:	4b1f      	ldr	r3, [pc, #124]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	0c1b      	lsrs	r3, r3, #16
 8005210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005224:	edd7 6a07 	vldr	s13, [r7, #28]
 8005228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800522c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005230:	ee17 2a90 	vmov	r2, s15
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005238:	4b13      	ldr	r3, [pc, #76]	; (8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	0e1b      	lsrs	r3, r3, #24
 800523e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800524e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005252:	edd7 6a07 	vldr	s13, [r7, #28]
 8005256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800525a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800525e:	ee17 2a90 	vmov	r2, s15
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005266:	e008      	b.n	800527a <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	609a      	str	r2, [r3, #8]
}
 800527a:	bf00      	nop
 800527c:	3724      	adds	r7, #36	; 0x24
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	58024400 	.word	0x58024400
 800528c:	03d09000 	.word	0x03d09000
 8005290:	46000000 	.word	0x46000000
 8005294:	4c742400 	.word	0x4c742400
 8005298:	4a742400 	.word	0x4a742400
 800529c:	4af42400 	.word	0x4af42400

080052a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b089      	sub	sp, #36	; 0x24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052a8:	4b9d      	ldr	r3, [pc, #628]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80052b2:	4b9b      	ldr	r3, [pc, #620]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80052be:	4b98      	ldr	r3, [pc, #608]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80052c8:	4b95      	ldr	r3, [pc, #596]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80052ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052cc:	08db      	lsrs	r3, r3, #3
 80052ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	fb02 f303 	mul.w	r3, r2, r3
 80052d8:	ee07 3a90 	vmov	s15, r3
 80052dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 810a 	beq.w	8005500 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d05a      	beq.n	80053a8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d302      	bcc.n	80052fc <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d078      	beq.n	80053ec <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80052fa:	e099      	b.n	8005430 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052fc:	4b88      	ldr	r3, [pc, #544]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d02d      	beq.n	8005364 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005308:	4b85      	ldr	r3, [pc, #532]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	08db      	lsrs	r3, r3, #3
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	4a84      	ldr	r2, [pc, #528]	; (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
 8005318:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	ee07 3a90 	vmov	s15, r3
 8005320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005332:	4b7b      	ldr	r3, [pc, #492]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005342:	ed97 6a03 	vldr	s12, [r7, #12]
 8005346:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800534a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005362:	e087      	b.n	8005474 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800552c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8005372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005376:	4b6a      	ldr	r3, [pc, #424]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005386:	ed97 6a03 	vldr	s12, [r7, #12]
 800538a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800538e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800539a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053a6:	e065      	b.n	8005474 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005530 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80053b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ba:	4b59      	ldr	r3, [pc, #356]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80053d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053ea:	e043      	b.n	8005474 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005534 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80053fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fe:	4b48      	ldr	r3, [pc, #288]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005412:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800542e:	e021      	b.n	8005474 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005530 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800543e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005442:	4b37      	ldr	r3, [pc, #220]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005452:	ed97 6a03 	vldr	s12, [r7, #12]
 8005456:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800545a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005472:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005474:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	0a5b      	lsrs	r3, r3, #9
 800547a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800548a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800548e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800549a:	ee17 2a90 	vmov	r2, s15
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80054a2:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	0c1b      	lsrs	r3, r3, #16
 80054a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ac:	ee07 3a90 	vmov	s15, r3
 80054b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054c8:	ee17 2a90 	vmov	r2, s15
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80054d0:	4b13      	ldr	r3, [pc, #76]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	0e1b      	lsrs	r3, r3, #24
 80054d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f6:	ee17 2a90 	vmov	r2, s15
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80054fe:	e008      	b.n	8005512 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	609a      	str	r2, [r3, #8]
}
 8005512:	bf00      	nop
 8005514:	3724      	adds	r7, #36	; 0x24
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	58024400 	.word	0x58024400
 8005524:	03d09000 	.word	0x03d09000
 8005528:	46000000 	.word	0x46000000
 800552c:	4c742400 	.word	0x4c742400
 8005530:	4a742400 	.word	0x4a742400
 8005534:	4af42400 	.word	0x4af42400

08005538 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800553c:	f7fe f946 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8005540:	4601      	mov	r1, r0
 8005542:	4b08      	ldr	r3, [pc, #32]	; (8005564 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	4a06      	ldr	r2, [pc, #24]	; (8005568 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800554e:	5cd3      	ldrb	r3, [r2, r3]
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	fa21 f303 	lsr.w	r3, r1, r3
 8005558:	4a04      	ldr	r2, [pc, #16]	; (800556c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800555a:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800555c:	4b03      	ldr	r3, [pc, #12]	; (800556c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800555e:	681b      	ldr	r3, [r3, #0]
}
 8005560:	4618      	mov	r0, r3
 8005562:	bd80      	pop	{r7, pc}
 8005564:	58024400 	.word	0x58024400
 8005568:	0800b6e0 	.word	0x0800b6e0
 800556c:	24000008 	.word	0x24000008

08005570 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800557e:	4b53      	ldr	r3, [pc, #332]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b03      	cmp	r3, #3
 8005588:	d101      	bne.n	800558e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e099      	b.n	80056c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800558e:	4b4f      	ldr	r3, [pc, #316]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a4e      	ldr	r2, [pc, #312]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005594:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559a:	f7fb f89f 	bl	80006dc <HAL_GetTick>
 800559e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055a0:	e008      	b.n	80055b4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80055a2:	f7fb f89b 	bl	80006dc <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e086      	b.n	80056c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055b4:	4b45      	ldr	r3, [pc, #276]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1f0      	bne.n	80055a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055c0:	4b42      	ldr	r3, [pc, #264]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 80055c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	031b      	lsls	r3, r3, #12
 80055ce:	493f      	ldr	r1, [pc, #252]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	628b      	str	r3, [r1, #40]	; 0x28
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	3b01      	subs	r3, #1
 80055da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	025b      	lsls	r3, r3, #9
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	041b      	lsls	r3, r3, #16
 80055f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	061b      	lsls	r3, r3, #24
 8005600:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005604:	4931      	ldr	r1, [pc, #196]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005606:	4313      	orrs	r3, r2
 8005608:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800560a:	4b30      	ldr	r3, [pc, #192]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	492d      	ldr	r1, [pc, #180]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005618:	4313      	orrs	r3, r2
 800561a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800561c:	4b2b      	ldr	r3, [pc, #172]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	f023 0220 	bic.w	r2, r3, #32
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	4928      	ldr	r1, [pc, #160]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 800562a:	4313      	orrs	r3, r2
 800562c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800562e:	4b27      	ldr	r3, [pc, #156]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	4a26      	ldr	r2, [pc, #152]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005634:	f023 0310 	bic.w	r3, r3, #16
 8005638:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800563a:	4b24      	ldr	r3, [pc, #144]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 800563c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800563e:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <RCCEx_PLL2_Config+0x160>)
 8005640:	4013      	ands	r3, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	69d2      	ldr	r2, [r2, #28]
 8005646:	00d2      	lsls	r2, r2, #3
 8005648:	4920      	ldr	r1, [pc, #128]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 800564a:	4313      	orrs	r3, r2
 800564c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800564e:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005654:	f043 0310 	orr.w	r3, r3, #16
 8005658:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d106      	bne.n	800566e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005660:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	4a19      	ldr	r2, [pc, #100]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800566a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800566c:	e00f      	b.n	800568e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d106      	bne.n	8005682 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005674:	4b15      	ldr	r3, [pc, #84]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	4a14      	ldr	r2, [pc, #80]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 800567a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800567e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005680:	e005      	b.n	800568e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005682:	4b12      	ldr	r3, [pc, #72]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	4a11      	ldr	r2, [pc, #68]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800568c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800568e:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a0e      	ldr	r2, [pc, #56]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 8005694:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800569a:	f7fb f81f 	bl	80006dc <HAL_GetTick>
 800569e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056a0:	e008      	b.n	80056b4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80056a2:	f7fb f81b 	bl	80006dc <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e006      	b.n	80056c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <RCCEx_PLL2_Config+0x15c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f0      	beq.n	80056a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	58024400 	.word	0x58024400
 80056d0:	ffff0007 	.word	0xffff0007

080056d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056e2:	4b53      	ldr	r3, [pc, #332]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d101      	bne.n	80056f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e099      	b.n	8005826 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056f2:	4b4f      	ldr	r3, [pc, #316]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a4e      	ldr	r2, [pc, #312]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80056f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056fe:	f7fa ffed 	bl	80006dc <HAL_GetTick>
 8005702:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005704:	e008      	b.n	8005718 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005706:	f7fa ffe9 	bl	80006dc <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e086      	b.n	8005826 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005718:	4b45      	ldr	r3, [pc, #276]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005724:	4b42      	ldr	r3, [pc, #264]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	051b      	lsls	r3, r3, #20
 8005732:	493f      	ldr	r1, [pc, #252]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	628b      	str	r3, [r1, #40]	; 0x28
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	3b01      	subs	r3, #1
 800573e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	3b01      	subs	r3, #1
 8005748:	025b      	lsls	r3, r3, #9
 800574a:	b29b      	uxth	r3, r3
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	3b01      	subs	r3, #1
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	3b01      	subs	r3, #1
 8005762:	061b      	lsls	r3, r3, #24
 8005764:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005768:	4931      	ldr	r1, [pc, #196]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 800576a:	4313      	orrs	r3, r2
 800576c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800576e:	4b30      	ldr	r3, [pc, #192]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	492d      	ldr	r1, [pc, #180]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 800577c:	4313      	orrs	r3, r2
 800577e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005780:	4b2b      	ldr	r3, [pc, #172]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	4928      	ldr	r1, [pc, #160]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 800578e:	4313      	orrs	r3, r2
 8005790:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005792:	4b27      	ldr	r3, [pc, #156]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	4a26      	ldr	r2, [pc, #152]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 8005798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800579c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800579e:	4b24      	ldr	r3, [pc, #144]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80057a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057a2:	4b24      	ldr	r3, [pc, #144]	; (8005834 <RCCEx_PLL3_Config+0x160>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	69d2      	ldr	r2, [r2, #28]
 80057aa:	00d2      	lsls	r2, r2, #3
 80057ac:	4920      	ldr	r1, [pc, #128]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80057b2:	4b1f      	ldr	r3, [pc, #124]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80057b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057c4:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	4a19      	ldr	r2, [pc, #100]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80057ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057d0:	e00f      	b.n	80057f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d106      	bne.n	80057e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057d8:	4b15      	ldr	r3, [pc, #84]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	4a14      	ldr	r2, [pc, #80]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80057de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057e4:	e005      	b.n	80057f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057e6:	4b12      	ldr	r3, [pc, #72]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	4a11      	ldr	r2, [pc, #68]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80057ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057f2:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a0e      	ldr	r2, [pc, #56]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 80057f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fe:	f7fa ff6d 	bl	80006dc <HAL_GetTick>
 8005802:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005804:	e008      	b.n	8005818 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005806:	f7fa ff69 	bl	80006dc <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e006      	b.n	8005826 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005818:	4b05      	ldr	r3, [pc, #20]	; (8005830 <RCCEx_PLL3_Config+0x15c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	58024400 	.word	0x58024400
 8005834:	ffff0007 	.word	0xffff0007

08005838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e01d      	b.n	8005886 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f005 fc50 	bl	800b104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f000 fb6e 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <HAL_TIM_Base_Start_IT+0x50>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b06      	cmp	r3, #6
 80058b8:	d00b      	beq.n	80058d2 <HAL_TIM_Base_Start_IT+0x42>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c0:	d007      	beq.n	80058d2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0201 	orr.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	00010007 	.word	0x00010007

080058e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e01d      	b.n	8005932 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f815 	bl	800593a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f000 fb18 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
	...

08005950 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2201      	movs	r2, #1
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 ff83 	bl	800686e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1e      	ldr	r2, [pc, #120]	; (80059e8 <HAL_TIM_PWM_Start+0x98>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_TIM_PWM_Start+0x4a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <HAL_TIM_PWM_Start+0x9c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00e      	beq.n	800599a <HAL_TIM_PWM_Start+0x4a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1b      	ldr	r2, [pc, #108]	; (80059f0 <HAL_TIM_PWM_Start+0xa0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_TIM_PWM_Start+0x4a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1a      	ldr	r2, [pc, #104]	; (80059f4 <HAL_TIM_PWM_Start+0xa4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d004      	beq.n	800599a <HAL_TIM_PWM_Start+0x4a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a18      	ldr	r2, [pc, #96]	; (80059f8 <HAL_TIM_PWM_Start+0xa8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d101      	bne.n	800599e <HAL_TIM_PWM_Start+0x4e>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <HAL_TIM_PWM_Start+0x50>
 800599e:	2300      	movs	r3, #0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	4b10      	ldr	r3, [pc, #64]	; (80059fc <HAL_TIM_PWM_Start+0xac>)
 80059bc:	4013      	ands	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b06      	cmp	r3, #6
 80059c4:	d00b      	beq.n	80059de <HAL_TIM_PWM_Start+0x8e>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059cc:	d007      	beq.n	80059de <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0201 	orr.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40010400 	.word	0x40010400
 80059f0:	40014000 	.word	0x40014000
 80059f4:	40014400 	.word	0x40014400
 80059f8:	40014800 	.word	0x40014800
 80059fc:	00010007 	.word	0x00010007

08005a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d122      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d11b      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0202 	mvn.w	r2, #2
 8005a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa6a 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fa5c 	bl	8005f08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fa6d 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d122      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d11b      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0204 	mvn.w	r2, #4
 8005a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa40 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005a9c:	e005      	b.n	8005aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fa32 	bl	8005f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fa43 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d122      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d11b      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0208 	mvn.w	r2, #8
 8005ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2204      	movs	r2, #4
 8005ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fa16 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005af0:	e005      	b.n	8005afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fa08 	bl	8005f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fa19 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d122      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d11b      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f06f 0210 	mvn.w	r2, #16
 8005b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f9ec 	bl	8005f1c <HAL_TIM_IC_CaptureCallback>
 8005b44:	e005      	b.n	8005b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f9de 	bl	8005f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f9ef 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d10e      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d107      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0201 	mvn.w	r2, #1
 8005b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f9b8 	bl	8005ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b80      	cmp	r3, #128	; 0x80
 8005b90:	d10e      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9c:	2b80      	cmp	r3, #128	; 0x80
 8005b9e:	d107      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 f822 	bl	8006bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bbe:	d10e      	bne.n	8005bde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bca:	2b80      	cmp	r3, #128	; 0x80
 8005bcc:	d107      	bne.n	8005bde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f001 f815 	bl	8006c08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be8:	2b40      	cmp	r3, #64	; 0x40
 8005bea:	d10e      	bne.n	8005c0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b40      	cmp	r3, #64	; 0x40
 8005bf8:	d107      	bne.n	8005c0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f99d 	bl	8005f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	d10e      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d107      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f06f 0220 	mvn.w	r2, #32
 8005c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 ffd5 	bl	8006be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e105      	b.n	8005e66 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2202      	movs	r2, #2
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b14      	cmp	r3, #20
 8005c6e:	f200 80f0 	bhi.w	8005e52 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005c72:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005ccd 	.word	0x08005ccd
 8005c7c:	08005e53 	.word	0x08005e53
 8005c80:	08005e53 	.word	0x08005e53
 8005c84:	08005e53 	.word	0x08005e53
 8005c88:	08005d0d 	.word	0x08005d0d
 8005c8c:	08005e53 	.word	0x08005e53
 8005c90:	08005e53 	.word	0x08005e53
 8005c94:	08005e53 	.word	0x08005e53
 8005c98:	08005d4f 	.word	0x08005d4f
 8005c9c:	08005e53 	.word	0x08005e53
 8005ca0:	08005e53 	.word	0x08005e53
 8005ca4:	08005e53 	.word	0x08005e53
 8005ca8:	08005d8f 	.word	0x08005d8f
 8005cac:	08005e53 	.word	0x08005e53
 8005cb0:	08005e53 	.word	0x08005e53
 8005cb4:	08005e53 	.word	0x08005e53
 8005cb8:	08005dd1 	.word	0x08005dd1
 8005cbc:	08005e53 	.word	0x08005e53
 8005cc0:	08005e53 	.word	0x08005e53
 8005cc4:	08005e53 	.word	0x08005e53
 8005cc8:	08005e11 	.word	0x08005e11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 f9da 	bl	800608c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0208 	orr.w	r2, r2, #8
 8005ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0204 	bic.w	r2, r2, #4
 8005cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6999      	ldr	r1, [r3, #24]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	691a      	ldr	r2, [r3, #16]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	619a      	str	r2, [r3, #24]
      break;
 8005d0a:	e0a3      	b.n	8005e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fa4a 	bl	80061ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6999      	ldr	r1, [r3, #24]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	021a      	lsls	r2, r3, #8
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	619a      	str	r2, [r3, #24]
      break;
 8005d4c:	e082      	b.n	8005e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68b9      	ldr	r1, [r7, #8]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 fab3 	bl	80062c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0208 	orr.w	r2, r2, #8
 8005d68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0204 	bic.w	r2, r2, #4
 8005d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69d9      	ldr	r1, [r3, #28]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	61da      	str	r2, [r3, #28]
      break;
 8005d8c:	e062      	b.n	8005e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fb19 	bl	80063cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69da      	ldr	r2, [r3, #28]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005da8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69da      	ldr	r2, [r3, #28]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69d9      	ldr	r1, [r3, #28]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	021a      	lsls	r2, r3, #8
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	61da      	str	r2, [r3, #28]
      break;
 8005dce:	e041      	b.n	8005e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fb60 	bl	800649c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0208 	orr.w	r2, r2, #8
 8005dea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0204 	bic.w	r2, r2, #4
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e0e:	e021      	b.n	8005e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68b9      	ldr	r1, [r7, #8]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fba2 	bl	8006560 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	021a      	lsls	r2, r3, #8
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e50:	e000      	b.n	8005e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005e52:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop

08005e70 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e031      	b.n	8005eec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fbc4 	bl	8006628 <TIM_SlaveTimer_SetConfig>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d009      	beq.n	8005eba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e018      	b.n	8005eec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ed8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a40      	ldr	r2, [pc, #256]	; (800606c <TIM_Base_SetConfig+0x114>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d00f      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3d      	ldr	r2, [pc, #244]	; (8006070 <TIM_Base_SetConfig+0x118>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00b      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3c      	ldr	r2, [pc, #240]	; (8006074 <TIM_Base_SetConfig+0x11c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a3b      	ldr	r2, [pc, #236]	; (8006078 <TIM_Base_SetConfig+0x120>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a3a      	ldr	r2, [pc, #232]	; (800607c <TIM_Base_SetConfig+0x124>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d108      	bne.n	8005faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2f      	ldr	r2, [pc, #188]	; (800606c <TIM_Base_SetConfig+0x114>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01f      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb8:	d01b      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2c      	ldr	r2, [pc, #176]	; (8006070 <TIM_Base_SetConfig+0x118>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d017      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a2b      	ldr	r2, [pc, #172]	; (8006074 <TIM_Base_SetConfig+0x11c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a2a      	ldr	r2, [pc, #168]	; (8006078 <TIM_Base_SetConfig+0x120>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00f      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a29      	ldr	r2, [pc, #164]	; (800607c <TIM_Base_SetConfig+0x124>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a28      	ldr	r2, [pc, #160]	; (8006080 <TIM_Base_SetConfig+0x128>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d007      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a27      	ldr	r2, [pc, #156]	; (8006084 <TIM_Base_SetConfig+0x12c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a26      	ldr	r2, [pc, #152]	; (8006088 <TIM_Base_SetConfig+0x130>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d108      	bne.n	8006004 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a10      	ldr	r2, [pc, #64]	; (800606c <TIM_Base_SetConfig+0x114>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00f      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a12      	ldr	r2, [pc, #72]	; (800607c <TIM_Base_SetConfig+0x124>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00b      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a11      	ldr	r2, [pc, #68]	; (8006080 <TIM_Base_SetConfig+0x128>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d007      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a10      	ldr	r2, [pc, #64]	; (8006084 <TIM_Base_SetConfig+0x12c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a0f      	ldr	r2, [pc, #60]	; (8006088 <TIM_Base_SetConfig+0x130>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d103      	bne.n	8006058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	615a      	str	r2, [r3, #20]
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40010000 	.word	0x40010000
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40010400 	.word	0x40010400
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400
 8006088:	40014800 	.word	0x40014800

0800608c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f023 0201 	bic.w	r2, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4b37      	ldr	r3, [pc, #220]	; (8006194 <TIM_OC1_SetConfig+0x108>)
 80060b8:	4013      	ands	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0303 	bic.w	r3, r3, #3
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f023 0302 	bic.w	r3, r3, #2
 80060d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a2d      	ldr	r2, [pc, #180]	; (8006198 <TIM_OC1_SetConfig+0x10c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00f      	beq.n	8006108 <TIM_OC1_SetConfig+0x7c>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a2c      	ldr	r2, [pc, #176]	; (800619c <TIM_OC1_SetConfig+0x110>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00b      	beq.n	8006108 <TIM_OC1_SetConfig+0x7c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a2b      	ldr	r2, [pc, #172]	; (80061a0 <TIM_OC1_SetConfig+0x114>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d007      	beq.n	8006108 <TIM_OC1_SetConfig+0x7c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a2a      	ldr	r2, [pc, #168]	; (80061a4 <TIM_OC1_SetConfig+0x118>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_OC1_SetConfig+0x7c>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a29      	ldr	r2, [pc, #164]	; (80061a8 <TIM_OC1_SetConfig+0x11c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d10c      	bne.n	8006122 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f023 0308 	bic.w	r3, r3, #8
 800610e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 0304 	bic.w	r3, r3, #4
 8006120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a1c      	ldr	r2, [pc, #112]	; (8006198 <TIM_OC1_SetConfig+0x10c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00f      	beq.n	800614a <TIM_OC1_SetConfig+0xbe>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a1b      	ldr	r2, [pc, #108]	; (800619c <TIM_OC1_SetConfig+0x110>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00b      	beq.n	800614a <TIM_OC1_SetConfig+0xbe>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a1a      	ldr	r2, [pc, #104]	; (80061a0 <TIM_OC1_SetConfig+0x114>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d007      	beq.n	800614a <TIM_OC1_SetConfig+0xbe>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a19      	ldr	r2, [pc, #100]	; (80061a4 <TIM_OC1_SetConfig+0x118>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d003      	beq.n	800614a <TIM_OC1_SetConfig+0xbe>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a18      	ldr	r2, [pc, #96]	; (80061a8 <TIM_OC1_SetConfig+0x11c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d111      	bne.n	800616e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	621a      	str	r2, [r3, #32]
}
 8006188:	bf00      	nop
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	fffeff8f 	.word	0xfffeff8f
 8006198:	40010000 	.word	0x40010000
 800619c:	40010400 	.word	0x40010400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800

080061ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f023 0210 	bic.w	r2, r3, #16
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4b34      	ldr	r3, [pc, #208]	; (80062a8 <TIM_OC2_SetConfig+0xfc>)
 80061d8:	4013      	ands	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f023 0320 	bic.w	r3, r3, #32
 80061f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a29      	ldr	r2, [pc, #164]	; (80062ac <TIM_OC2_SetConfig+0x100>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d003      	beq.n	8006214 <TIM_OC2_SetConfig+0x68>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a28      	ldr	r2, [pc, #160]	; (80062b0 <TIM_OC2_SetConfig+0x104>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d10d      	bne.n	8006230 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800621a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a1e      	ldr	r2, [pc, #120]	; (80062ac <TIM_OC2_SetConfig+0x100>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00f      	beq.n	8006258 <TIM_OC2_SetConfig+0xac>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a1d      	ldr	r2, [pc, #116]	; (80062b0 <TIM_OC2_SetConfig+0x104>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00b      	beq.n	8006258 <TIM_OC2_SetConfig+0xac>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <TIM_OC2_SetConfig+0x108>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d007      	beq.n	8006258 <TIM_OC2_SetConfig+0xac>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a1b      	ldr	r2, [pc, #108]	; (80062b8 <TIM_OC2_SetConfig+0x10c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_OC2_SetConfig+0xac>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a1a      	ldr	r2, [pc, #104]	; (80062bc <TIM_OC2_SetConfig+0x110>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d113      	bne.n	8006280 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800625e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	feff8fff 	.word	0xfeff8fff
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40010400 	.word	0x40010400
 80062b4:	40014000 	.word	0x40014000
 80062b8:	40014400 	.word	0x40014400
 80062bc:	40014800 	.word	0x40014800

080062c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0303 	bic.w	r3, r3, #3
 80062f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a27      	ldr	r2, [pc, #156]	; (80063b8 <TIM_OC3_SetConfig+0xf8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d003      	beq.n	8006326 <TIM_OC3_SetConfig+0x66>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a26      	ldr	r2, [pc, #152]	; (80063bc <TIM_OC3_SetConfig+0xfc>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d10d      	bne.n	8006342 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800632c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a1c      	ldr	r2, [pc, #112]	; (80063b8 <TIM_OC3_SetConfig+0xf8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d00f      	beq.n	800636a <TIM_OC3_SetConfig+0xaa>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a1b      	ldr	r2, [pc, #108]	; (80063bc <TIM_OC3_SetConfig+0xfc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00b      	beq.n	800636a <TIM_OC3_SetConfig+0xaa>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a1a      	ldr	r2, [pc, #104]	; (80063c0 <TIM_OC3_SetConfig+0x100>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d007      	beq.n	800636a <TIM_OC3_SetConfig+0xaa>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a19      	ldr	r2, [pc, #100]	; (80063c4 <TIM_OC3_SetConfig+0x104>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d003      	beq.n	800636a <TIM_OC3_SetConfig+0xaa>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a18      	ldr	r2, [pc, #96]	; (80063c8 <TIM_OC3_SetConfig+0x108>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d113      	bne.n	8006392 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	621a      	str	r2, [r3, #32]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	40010000 	.word	0x40010000
 80063bc:	40010400 	.word	0x40010400
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40014400 	.word	0x40014400
 80063c8:	40014800 	.word	0x40014800

080063cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	031b      	lsls	r3, r3, #12
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a18      	ldr	r2, [pc, #96]	; (8006488 <TIM_OC4_SetConfig+0xbc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00f      	beq.n	800644c <TIM_OC4_SetConfig+0x80>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a17      	ldr	r2, [pc, #92]	; (800648c <TIM_OC4_SetConfig+0xc0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00b      	beq.n	800644c <TIM_OC4_SetConfig+0x80>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a16      	ldr	r2, [pc, #88]	; (8006490 <TIM_OC4_SetConfig+0xc4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d007      	beq.n	800644c <TIM_OC4_SetConfig+0x80>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a15      	ldr	r2, [pc, #84]	; (8006494 <TIM_OC4_SetConfig+0xc8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <TIM_OC4_SetConfig+0x80>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a14      	ldr	r2, [pc, #80]	; (8006498 <TIM_OC4_SetConfig+0xcc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d109      	bne.n	8006460 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	019b      	lsls	r3, r3, #6
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40010000 	.word	0x40010000
 800648c:	40010400 	.word	0x40010400
 8006490:	40014000 	.word	0x40014000
 8006494:	40014400 	.word	0x40014400
 8006498:	40014800 	.word	0x40014800

0800649c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	041b      	lsls	r3, r3, #16
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a17      	ldr	r2, [pc, #92]	; (800654c <TIM_OC5_SetConfig+0xb0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00f      	beq.n	8006512 <TIM_OC5_SetConfig+0x76>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a16      	ldr	r2, [pc, #88]	; (8006550 <TIM_OC5_SetConfig+0xb4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00b      	beq.n	8006512 <TIM_OC5_SetConfig+0x76>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a15      	ldr	r2, [pc, #84]	; (8006554 <TIM_OC5_SetConfig+0xb8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d007      	beq.n	8006512 <TIM_OC5_SetConfig+0x76>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a14      	ldr	r2, [pc, #80]	; (8006558 <TIM_OC5_SetConfig+0xbc>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d003      	beq.n	8006512 <TIM_OC5_SetConfig+0x76>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a13      	ldr	r2, [pc, #76]	; (800655c <TIM_OC5_SetConfig+0xc0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d109      	bne.n	8006526 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006518:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	621a      	str	r2, [r3, #32]
}
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	40010000 	.word	0x40010000
 8006550:	40010400 	.word	0x40010400
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800

08006560 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	051b      	lsls	r3, r3, #20
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a18      	ldr	r2, [pc, #96]	; (8006614 <TIM_OC6_SetConfig+0xb4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00f      	beq.n	80065d8 <TIM_OC6_SetConfig+0x78>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a17      	ldr	r2, [pc, #92]	; (8006618 <TIM_OC6_SetConfig+0xb8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00b      	beq.n	80065d8 <TIM_OC6_SetConfig+0x78>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a16      	ldr	r2, [pc, #88]	; (800661c <TIM_OC6_SetConfig+0xbc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <TIM_OC6_SetConfig+0x78>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a15      	ldr	r2, [pc, #84]	; (8006620 <TIM_OC6_SetConfig+0xc0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC6_SetConfig+0x78>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a14      	ldr	r2, [pc, #80]	; (8006624 <TIM_OC6_SetConfig+0xc4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d109      	bne.n	80065ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	029b      	lsls	r3, r3, #10
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	621a      	str	r2, [r3, #32]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40010000 	.word	0x40010000
 8006618:	40010400 	.word	0x40010400
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800

08006628 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4b47      	ldr	r3, [pc, #284]	; (800675c <TIM_SlaveTimer_SetConfig+0x134>)
 800663e:	4013      	ands	r3, r2
 8006640:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4b44      	ldr	r3, [pc, #272]	; (8006760 <TIM_SlaveTimer_SetConfig+0x138>)
 8006650:	4013      	ands	r3, r2
 8006652:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b60      	cmp	r3, #96	; 0x60
 800666c:	d065      	beq.n	800673a <TIM_SlaveTimer_SetConfig+0x112>
 800666e:	2b60      	cmp	r3, #96	; 0x60
 8006670:	d80f      	bhi.n	8006692 <TIM_SlaveTimer_SetConfig+0x6a>
 8006672:	2b20      	cmp	r3, #32
 8006674:	d06b      	beq.n	800674e <TIM_SlaveTimer_SetConfig+0x126>
 8006676:	2b20      	cmp	r3, #32
 8006678:	d804      	bhi.n	8006684 <TIM_SlaveTimer_SetConfig+0x5c>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d067      	beq.n	800674e <TIM_SlaveTimer_SetConfig+0x126>
 800667e:	2b10      	cmp	r3, #16
 8006680:	d065      	beq.n	800674e <TIM_SlaveTimer_SetConfig+0x126>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006682:	e065      	b.n	8006750 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d025      	beq.n	80066d4 <TIM_SlaveTimer_SetConfig+0xac>
 8006688:	2b50      	cmp	r3, #80	; 0x50
 800668a:	d04c      	beq.n	8006726 <TIM_SlaveTimer_SetConfig+0xfe>
 800668c:	2b30      	cmp	r3, #48	; 0x30
 800668e:	d05e      	beq.n	800674e <TIM_SlaveTimer_SetConfig+0x126>
      break;
 8006690:	e05e      	b.n	8006750 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 8006692:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006696:	d05a      	beq.n	800674e <TIM_SlaveTimer_SetConfig+0x126>
 8006698:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800669c:	d805      	bhi.n	80066aa <TIM_SlaveTimer_SetConfig+0x82>
 800669e:	2b70      	cmp	r3, #112	; 0x70
 80066a0:	d00d      	beq.n	80066be <TIM_SlaveTimer_SetConfig+0x96>
 80066a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a6:	d052      	beq.n	800674e <TIM_SlaveTimer_SetConfig+0x126>
      break;
 80066a8:	e052      	b.n	8006750 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 80066aa:	4a2e      	ldr	r2, [pc, #184]	; (8006764 <TIM_SlaveTimer_SetConfig+0x13c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d04e      	beq.n	800674e <TIM_SlaveTimer_SetConfig+0x126>
 80066b0:	4a2d      	ldr	r2, [pc, #180]	; (8006768 <TIM_SlaveTimer_SetConfig+0x140>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d04b      	beq.n	800674e <TIM_SlaveTimer_SetConfig+0x126>
 80066b6:	4a2d      	ldr	r2, [pc, #180]	; (800676c <TIM_SlaveTimer_SetConfig+0x144>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d048      	beq.n	800674e <TIM_SlaveTimer_SetConfig+0x126>
      break;
 80066bc:	e048      	b.n	8006750 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_ETR_SetConfig(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68d9      	ldr	r1, [r3, #12]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f000 f8ae 	bl	800682e <TIM_ETR_SetConfig>
      break;
 80066d2:	e03d      	b.n	8006750 <TIM_SlaveTimer_SetConfig+0x128>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b05      	cmp	r3, #5
 80066da:	d101      	bne.n	80066e0 <TIM_SlaveTimer_SetConfig+0xb8>
        return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e038      	b.n	8006752 <TIM_SlaveTimer_SetConfig+0x12a>
      tmpccer = htim->Instance->CCER;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6a1a      	ldr	r2, [r3, #32]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0201 	bic.w	r2, r2, #1
 80066f6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006706:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	621a      	str	r2, [r3, #32]
      break;
 8006724:	e014      	b.n	8006750 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6899      	ldr	r1, [r3, #8]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	461a      	mov	r2, r3
 8006734:	f000 f81c 	bl	8006770 <TIM_TI1_ConfigInputStage>
      break;
 8006738:	e00a      	b.n	8006750 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6899      	ldr	r1, [r3, #8]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	461a      	mov	r2, r3
 8006748:	f000 f841 	bl	80067ce <TIM_TI2_ConfigInputStage>
      break;
 800674c:	e000      	b.n	8006750 <TIM_SlaveTimer_SetConfig+0x128>
      break;
 800674e:	bf00      	nop
  }
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	ffcfff8f 	.word	0xffcfff8f
 8006760:	fffefff8 	.word	0xfffefff8
 8006764:	00100030 	.word	0x00100030
 8006768:	00100040 	.word	0x00100040
 800676c:	00100020 	.word	0x00100020

08006770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	f023 0201 	bic.w	r2, r3, #1
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800679a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f023 030a 	bic.w	r3, r3, #10
 80067ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	621a      	str	r2, [r3, #32]
}
 80067c2:	bf00      	nop
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b087      	sub	sp, #28
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	f023 0210 	bic.w	r2, r3, #16
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	031b      	lsls	r3, r3, #12
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800680a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	621a      	str	r2, [r3, #32]
}
 8006822:	bf00      	nop
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800682e:	b480      	push	{r7}
 8006830:	b087      	sub	sp, #28
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	607a      	str	r2, [r7, #4]
 800683a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006848:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	021a      	lsls	r2, r3, #8
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	431a      	orrs	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4313      	orrs	r3, r2
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	609a      	str	r2, [r3, #8]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800686e:	b480      	push	{r7}
 8006870:	b087      	sub	sp, #28
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	2201      	movs	r2, #1
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a1a      	ldr	r2, [r3, #32]
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	43db      	mvns	r3, r3
 8006890:	401a      	ands	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a1a      	ldr	r2, [r3, #32]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	fa01 f303 	lsl.w	r3, r1, r3
 80068a6:	431a      	orrs	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	621a      	str	r2, [r3, #32]
}
 80068ac:	bf00      	nop
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d101      	bne.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068cc:	2302      	movs	r3, #2
 80068ce:	e045      	b.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1c      	ldr	r2, [pc, #112]	; (8006968 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1b      	ldr	r2, [pc, #108]	; (800696c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d108      	bne.n	8006916 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800690a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800692e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	4313      	orrs	r3, r2
 8006938:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	40010000 	.word	0x40010000
 800696c:	40010400 	.word	0x40010400

08006970 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006984:	2b01      	cmp	r3, #1
 8006986:	d101      	bne.n	800698c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006988:	2302      	movs	r3, #2
 800698a:	e065      	b.n	8006a58 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	041b      	lsls	r3, r3, #16
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a16      	ldr	r2, [pc, #88]	; (8006a64 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a14      	ldr	r2, [pc, #80]	; (8006a68 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d115      	bne.n	8006a46 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	051b      	lsls	r3, r3, #20
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40010400 	.word	0x40010400

08006a6c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b08b      	sub	sp, #44	; 0x2c
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  uint32_t tmporx;
  uint32_t bkin_enable_mask = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	623b      	str	r3, [r7, #32]
  uint32_t bkin_polarity_mask = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61fb      	str	r3, [r7, #28]
  uint32_t bkin_enable_bitpos = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61bb      	str	r3, [r7, #24]
  uint32_t bkin_polarity_bitpos = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
  {
    assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
  }

  /* Check input state */
  __HAL_LOCK(htim);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_TIMEx_ConfigBreakInput+0x2a>
 8006a92:	2302      	movs	r3, #2
 8006a94:	e09e      	b.n	8006bd4 <HAL_TIMEx_ConfigBreakInput+0x168>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	2b07      	cmp	r3, #7
 8006aa6:	d837      	bhi.n	8006b18 <HAL_TIMEx_ConfigBreakInput+0xac>
 8006aa8:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <HAL_TIMEx_ConfigBreakInput+0x44>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006ad1 	.word	0x08006ad1
 8006ab4:	08006ae5 	.word	0x08006ae5
 8006ab8:	08006b19 	.word	0x08006b19
 8006abc:	08006af9 	.word	0x08006af9
 8006ac0:	08006b19 	.word	0x08006b19
 8006ac4:	08006b19 	.word	0x08006b19
 8006ac8:	08006b19 	.word	0x08006b19
 8006acc:	08006b0d 	.word	0x08006b0d
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8006ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006adc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8006ade:	2309      	movs	r3, #9
 8006ae0:	617b      	str	r3, [r7, #20]
      break;
 8006ae2:	e01a      	b.n	8006b1a <HAL_TIMEx_ConfigBreakInput+0xae>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8006aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006af0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8006af2:	230a      	movs	r3, #10
 8006af4:	617b      	str	r3, [r7, #20]
      break;
 8006af6:	e010      	b.n	8006b1a <HAL_TIMEx_ConfigBreakInput+0xae>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8006af8:	2304      	movs	r3, #4
 8006afa:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8006afc:	2302      	movs	r3, #2
 8006afe:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8006b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b04:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8006b06:	230b      	movs	r3, #11
 8006b08:	617b      	str	r3, [r7, #20]
      break;
 8006b0a:	e006      	b.n	8006b1a <HAL_TIMEx_ConfigBreakInput+0xae>
    }
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_AF1_BKDF1BK0E;
 8006b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b10:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 8U;
 8006b12:	2308      	movs	r3, #8
 8006b14:	61bb      	str	r3, [r7, #24]
      break;
 8006b16:	e000      	b.n	8006b1a <HAL_TIMEx_ConfigBreakInput+0xae>
    }

    default:
      break;
 8006b18:	bf00      	nop
  }

  switch (BreakInput)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d002      	beq.n	8006b26 <HAL_TIMEx_ConfigBreakInput+0xba>
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d029      	beq.n	8006b78 <HAL_TIMEx_ConfigBreakInput+0x10c>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8006b24:	e051      	b.n	8006bca <HAL_TIMEx_ConfigBreakInput+0x15e>
      tmporx = htim->Instance->AF1;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
      tmporx &= ~bkin_enable_mask;
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	43db      	mvns	r3, r3
 8006b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b34:	4013      	ands	r3, r2
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	409a      	lsls	r2, r3
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	4013      	ands	r3, r2
 8006b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b46:	4313      	orrs	r3, r2
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d00d      	beq.n	8006b6e <HAL_TIMEx_ConfigBreakInput+0x102>
        tmporx &= ~bkin_polarity_mask;
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	43db      	mvns	r3, r3
 8006b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b58:	4013      	ands	r3, r2
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	409a      	lsls	r2, r3
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	4013      	ands	r3, r2
 8006b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
      htim->Instance->AF1 = tmporx;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b74:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8006b76:	e028      	b.n	8006bca <HAL_TIMEx_ConfigBreakInput+0x15e>
      tmporx = htim->Instance->AF2;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
      tmporx &= ~bkin_enable_mask;
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	43db      	mvns	r3, r3
 8006b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b86:	4013      	ands	r3, r2
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	409a      	lsls	r2, r3
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	4013      	ands	r3, r2
 8006b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d00d      	beq.n	8006bc0 <HAL_TIMEx_ConfigBreakInput+0x154>
        tmporx &= ~bkin_polarity_mask;
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006baa:	4013      	ands	r3, r2
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	409a      	lsls	r2, r3
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
      htim->Instance->AF2 = tmporx;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc6:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8006bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	372c      	adds	r7, #44	; 0x2c
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e042      	b.n	8006cb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d106      	bne.n	8006c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f004 fb41 	bl	800b2c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2224      	movs	r2, #36	; 0x24
 8006c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0201 	bic.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f82e 	bl	8006cc0 <UART_SetConfig>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e022      	b.n	8006cb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f002 f99c 	bl	8008fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c9a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f002 fa23 	bl	80090f8 <UART_CheckIdleState>
 8006cb2:	4603      	mov	r3, r0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	0000      	movs	r0, r0
	...

08006cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cc0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006cc4:	b08e      	sub	sp, #56	; 0x38
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	4bc1      	ldr	r3, [pc, #772]	; (8007008 <UART_SetConfig+0x348>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4ab7      	ldr	r2, [pc, #732]	; (800700c <UART_SetConfig+0x34c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	4bb2      	ldr	r3, [pc, #712]	; (8007010 <UART_SetConfig+0x350>)
 8006d46:	4013      	ands	r3, r2
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6812      	ldr	r2, [r2, #0]
 8006d4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	f023 010f 	bic.w	r1, r3, #15
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4aa9      	ldr	r2, [pc, #676]	; (8007014 <UART_SetConfig+0x354>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d177      	bne.n	8006e62 <UART_SetConfig+0x1a2>
 8006d72:	4ba9      	ldr	r3, [pc, #676]	; (8007018 <UART_SetConfig+0x358>)
 8006d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d7a:	2b28      	cmp	r3, #40	; 0x28
 8006d7c:	d86c      	bhi.n	8006e58 <UART_SetConfig+0x198>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <UART_SetConfig+0xc4>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006e29 	.word	0x08006e29
 8006d88:	08006e59 	.word	0x08006e59
 8006d8c:	08006e59 	.word	0x08006e59
 8006d90:	08006e59 	.word	0x08006e59
 8006d94:	08006e59 	.word	0x08006e59
 8006d98:	08006e59 	.word	0x08006e59
 8006d9c:	08006e59 	.word	0x08006e59
 8006da0:	08006e59 	.word	0x08006e59
 8006da4:	08006e31 	.word	0x08006e31
 8006da8:	08006e59 	.word	0x08006e59
 8006dac:	08006e59 	.word	0x08006e59
 8006db0:	08006e59 	.word	0x08006e59
 8006db4:	08006e59 	.word	0x08006e59
 8006db8:	08006e59 	.word	0x08006e59
 8006dbc:	08006e59 	.word	0x08006e59
 8006dc0:	08006e59 	.word	0x08006e59
 8006dc4:	08006e39 	.word	0x08006e39
 8006dc8:	08006e59 	.word	0x08006e59
 8006dcc:	08006e59 	.word	0x08006e59
 8006dd0:	08006e59 	.word	0x08006e59
 8006dd4:	08006e59 	.word	0x08006e59
 8006dd8:	08006e59 	.word	0x08006e59
 8006ddc:	08006e59 	.word	0x08006e59
 8006de0:	08006e59 	.word	0x08006e59
 8006de4:	08006e41 	.word	0x08006e41
 8006de8:	08006e59 	.word	0x08006e59
 8006dec:	08006e59 	.word	0x08006e59
 8006df0:	08006e59 	.word	0x08006e59
 8006df4:	08006e59 	.word	0x08006e59
 8006df8:	08006e59 	.word	0x08006e59
 8006dfc:	08006e59 	.word	0x08006e59
 8006e00:	08006e59 	.word	0x08006e59
 8006e04:	08006e49 	.word	0x08006e49
 8006e08:	08006e59 	.word	0x08006e59
 8006e0c:	08006e59 	.word	0x08006e59
 8006e10:	08006e59 	.word	0x08006e59
 8006e14:	08006e59 	.word	0x08006e59
 8006e18:	08006e59 	.word	0x08006e59
 8006e1c:	08006e59 	.word	0x08006e59
 8006e20:	08006e59 	.word	0x08006e59
 8006e24:	08006e51 	.word	0x08006e51
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e2e:	e233      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006e30:	2304      	movs	r3, #4
 8006e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e36:	e22f      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006e38:	2308      	movs	r3, #8
 8006e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e3e:	e22b      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006e40:	2310      	movs	r3, #16
 8006e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e46:	e227      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006e48:	2320      	movs	r3, #32
 8006e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e4e:	e223      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006e50:	2340      	movs	r3, #64	; 0x40
 8006e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e56:	e21f      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006e58:	2380      	movs	r3, #128	; 0x80
 8006e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e5e:	bf00      	nop
 8006e60:	e21a      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a6d      	ldr	r2, [pc, #436]	; (800701c <UART_SetConfig+0x35c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d132      	bne.n	8006ed2 <UART_SetConfig+0x212>
 8006e6c:	4b6a      	ldr	r3, [pc, #424]	; (8007018 <UART_SetConfig+0x358>)
 8006e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	2b05      	cmp	r3, #5
 8006e76:	d827      	bhi.n	8006ec8 <UART_SetConfig+0x208>
 8006e78:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <UART_SetConfig+0x1c0>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006e99 	.word	0x08006e99
 8006e84:	08006ea1 	.word	0x08006ea1
 8006e88:	08006ea9 	.word	0x08006ea9
 8006e8c:	08006eb1 	.word	0x08006eb1
 8006e90:	08006eb9 	.word	0x08006eb9
 8006e94:	08006ec1 	.word	0x08006ec1
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9e:	e1fb      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ea6:	e1f7      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eae:	e1f3      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eb6:	e1ef      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006eb8:	2320      	movs	r3, #32
 8006eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ebe:	e1eb      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006ec0:	2340      	movs	r3, #64	; 0x40
 8006ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ec6:	e1e7      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ece:	bf00      	nop
 8006ed0:	e1e2      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a52      	ldr	r2, [pc, #328]	; (8007020 <UART_SetConfig+0x360>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d132      	bne.n	8006f42 <UART_SetConfig+0x282>
 8006edc:	4b4e      	ldr	r3, [pc, #312]	; (8007018 <UART_SetConfig+0x358>)
 8006ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	2b05      	cmp	r3, #5
 8006ee6:	d827      	bhi.n	8006f38 <UART_SetConfig+0x278>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <UART_SetConfig+0x230>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f09 	.word	0x08006f09
 8006ef4:	08006f11 	.word	0x08006f11
 8006ef8:	08006f19 	.word	0x08006f19
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f29 	.word	0x08006f29
 8006f04:	08006f31 	.word	0x08006f31
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f0e:	e1c3      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006f10:	2304      	movs	r3, #4
 8006f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f16:	e1bf      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006f18:	2308      	movs	r3, #8
 8006f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f1e:	e1bb      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006f20:	2310      	movs	r3, #16
 8006f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f26:	e1b7      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006f28:	2320      	movs	r3, #32
 8006f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f2e:	e1b3      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006f30:	2340      	movs	r3, #64	; 0x40
 8006f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f36:	e1af      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f3e:	bf00      	nop
 8006f40:	e1aa      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a37      	ldr	r2, [pc, #220]	; (8007024 <UART_SetConfig+0x364>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d132      	bne.n	8006fb2 <UART_SetConfig+0x2f2>
 8006f4c:	4b32      	ldr	r3, [pc, #200]	; (8007018 <UART_SetConfig+0x358>)
 8006f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	2b05      	cmp	r3, #5
 8006f56:	d827      	bhi.n	8006fa8 <UART_SetConfig+0x2e8>
 8006f58:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <UART_SetConfig+0x2a0>)
 8006f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5e:	bf00      	nop
 8006f60:	08006f79 	.word	0x08006f79
 8006f64:	08006f81 	.word	0x08006f81
 8006f68:	08006f89 	.word	0x08006f89
 8006f6c:	08006f91 	.word	0x08006f91
 8006f70:	08006f99 	.word	0x08006f99
 8006f74:	08006fa1 	.word	0x08006fa1
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f7e:	e18b      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006f80:	2304      	movs	r3, #4
 8006f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f86:	e187      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006f88:	2308      	movs	r3, #8
 8006f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f8e:	e183      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006f90:	2310      	movs	r3, #16
 8006f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f96:	e17f      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006f98:	2320      	movs	r3, #32
 8006f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f9e:	e17b      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006fa0:	2340      	movs	r3, #64	; 0x40
 8006fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fa6:	e177      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006fa8:	2380      	movs	r3, #128	; 0x80
 8006faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fae:	bf00      	nop
 8006fb0:	e172      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1c      	ldr	r2, [pc, #112]	; (8007028 <UART_SetConfig+0x368>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d144      	bne.n	8007046 <UART_SetConfig+0x386>
 8006fbc:	4b16      	ldr	r3, [pc, #88]	; (8007018 <UART_SetConfig+0x358>)
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	2b05      	cmp	r3, #5
 8006fc6:	d839      	bhi.n	800703c <UART_SetConfig+0x37c>
 8006fc8:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <UART_SetConfig+0x310>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08006fe9 	.word	0x08006fe9
 8006fd4:	08006ff1 	.word	0x08006ff1
 8006fd8:	08006ff9 	.word	0x08006ff9
 8006fdc:	08007001 	.word	0x08007001
 8006fe0:	0800702d 	.word	0x0800702d
 8006fe4:	08007035 	.word	0x08007035
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fee:	e153      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ff6:	e14f      	b.n	8007298 <UART_SetConfig+0x5d8>
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ffe:	e14b      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007000:	2310      	movs	r3, #16
 8007002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007006:	e147      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007008:	cfff69f3 	.word	0xcfff69f3
 800700c:	58000c00 	.word	0x58000c00
 8007010:	11fff4ff 	.word	0x11fff4ff
 8007014:	40011000 	.word	0x40011000
 8007018:	58024400 	.word	0x58024400
 800701c:	40004400 	.word	0x40004400
 8007020:	40004800 	.word	0x40004800
 8007024:	40004c00 	.word	0x40004c00
 8007028:	40005000 	.word	0x40005000
 800702c:	2320      	movs	r3, #32
 800702e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007032:	e131      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007034:	2340      	movs	r3, #64	; 0x40
 8007036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800703a:	e12d      	b.n	8007298 <UART_SetConfig+0x5d8>
 800703c:	2380      	movs	r3, #128	; 0x80
 800703e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007042:	bf00      	nop
 8007044:	e128      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4ac3      	ldr	r2, [pc, #780]	; (8007358 <UART_SetConfig+0x698>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d178      	bne.n	8007142 <UART_SetConfig+0x482>
 8007050:	4bc2      	ldr	r3, [pc, #776]	; (800735c <UART_SetConfig+0x69c>)
 8007052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007054:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007058:	2b28      	cmp	r3, #40	; 0x28
 800705a:	d86d      	bhi.n	8007138 <UART_SetConfig+0x478>
 800705c:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <UART_SetConfig+0x3a4>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007109 	.word	0x08007109
 8007068:	08007139 	.word	0x08007139
 800706c:	08007139 	.word	0x08007139
 8007070:	08007139 	.word	0x08007139
 8007074:	08007139 	.word	0x08007139
 8007078:	08007139 	.word	0x08007139
 800707c:	08007139 	.word	0x08007139
 8007080:	08007139 	.word	0x08007139
 8007084:	08007111 	.word	0x08007111
 8007088:	08007139 	.word	0x08007139
 800708c:	08007139 	.word	0x08007139
 8007090:	08007139 	.word	0x08007139
 8007094:	08007139 	.word	0x08007139
 8007098:	08007139 	.word	0x08007139
 800709c:	08007139 	.word	0x08007139
 80070a0:	08007139 	.word	0x08007139
 80070a4:	08007119 	.word	0x08007119
 80070a8:	08007139 	.word	0x08007139
 80070ac:	08007139 	.word	0x08007139
 80070b0:	08007139 	.word	0x08007139
 80070b4:	08007139 	.word	0x08007139
 80070b8:	08007139 	.word	0x08007139
 80070bc:	08007139 	.word	0x08007139
 80070c0:	08007139 	.word	0x08007139
 80070c4:	08007121 	.word	0x08007121
 80070c8:	08007139 	.word	0x08007139
 80070cc:	08007139 	.word	0x08007139
 80070d0:	08007139 	.word	0x08007139
 80070d4:	08007139 	.word	0x08007139
 80070d8:	08007139 	.word	0x08007139
 80070dc:	08007139 	.word	0x08007139
 80070e0:	08007139 	.word	0x08007139
 80070e4:	08007129 	.word	0x08007129
 80070e8:	08007139 	.word	0x08007139
 80070ec:	08007139 	.word	0x08007139
 80070f0:	08007139 	.word	0x08007139
 80070f4:	08007139 	.word	0x08007139
 80070f8:	08007139 	.word	0x08007139
 80070fc:	08007139 	.word	0x08007139
 8007100:	08007139 	.word	0x08007139
 8007104:	08007131 	.word	0x08007131
 8007108:	2301      	movs	r3, #1
 800710a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800710e:	e0c3      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007110:	2304      	movs	r3, #4
 8007112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007116:	e0bf      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007118:	2308      	movs	r3, #8
 800711a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800711e:	e0bb      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007126:	e0b7      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007128:	2320      	movs	r3, #32
 800712a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800712e:	e0b3      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007130:	2340      	movs	r3, #64	; 0x40
 8007132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007136:	e0af      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800713e:	bf00      	nop
 8007140:	e0aa      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a86      	ldr	r2, [pc, #536]	; (8007360 <UART_SetConfig+0x6a0>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d132      	bne.n	80071b2 <UART_SetConfig+0x4f2>
 800714c:	4b83      	ldr	r3, [pc, #524]	; (800735c <UART_SetConfig+0x69c>)
 800714e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	2b05      	cmp	r3, #5
 8007156:	d827      	bhi.n	80071a8 <UART_SetConfig+0x4e8>
 8007158:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <UART_SetConfig+0x4a0>)
 800715a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715e:	bf00      	nop
 8007160:	08007179 	.word	0x08007179
 8007164:	08007181 	.word	0x08007181
 8007168:	08007189 	.word	0x08007189
 800716c:	08007191 	.word	0x08007191
 8007170:	08007199 	.word	0x08007199
 8007174:	080071a1 	.word	0x080071a1
 8007178:	2300      	movs	r3, #0
 800717a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717e:	e08b      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007180:	2304      	movs	r3, #4
 8007182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007186:	e087      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007188:	2308      	movs	r3, #8
 800718a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800718e:	e083      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007190:	2310      	movs	r3, #16
 8007192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007196:	e07f      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007198:	2320      	movs	r3, #32
 800719a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800719e:	e07b      	b.n	8007298 <UART_SetConfig+0x5d8>
 80071a0:	2340      	movs	r3, #64	; 0x40
 80071a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071a6:	e077      	b.n	8007298 <UART_SetConfig+0x5d8>
 80071a8:	2380      	movs	r3, #128	; 0x80
 80071aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ae:	bf00      	nop
 80071b0:	e072      	b.n	8007298 <UART_SetConfig+0x5d8>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a6b      	ldr	r2, [pc, #428]	; (8007364 <UART_SetConfig+0x6a4>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d132      	bne.n	8007222 <UART_SetConfig+0x562>
 80071bc:	4b67      	ldr	r3, [pc, #412]	; (800735c <UART_SetConfig+0x69c>)
 80071be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	2b05      	cmp	r3, #5
 80071c6:	d827      	bhi.n	8007218 <UART_SetConfig+0x558>
 80071c8:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <UART_SetConfig+0x510>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071e9 	.word	0x080071e9
 80071d4:	080071f1 	.word	0x080071f1
 80071d8:	080071f9 	.word	0x080071f9
 80071dc:	08007201 	.word	0x08007201
 80071e0:	08007209 	.word	0x08007209
 80071e4:	08007211 	.word	0x08007211
 80071e8:	2300      	movs	r3, #0
 80071ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ee:	e053      	b.n	8007298 <UART_SetConfig+0x5d8>
 80071f0:	2304      	movs	r3, #4
 80071f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071f6:	e04f      	b.n	8007298 <UART_SetConfig+0x5d8>
 80071f8:	2308      	movs	r3, #8
 80071fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071fe:	e04b      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007200:	2310      	movs	r3, #16
 8007202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007206:	e047      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007208:	2320      	movs	r3, #32
 800720a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800720e:	e043      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007210:	2340      	movs	r3, #64	; 0x40
 8007212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007216:	e03f      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007218:	2380      	movs	r3, #128	; 0x80
 800721a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800721e:	bf00      	nop
 8007220:	e03a      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a50      	ldr	r2, [pc, #320]	; (8007368 <UART_SetConfig+0x6a8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d132      	bne.n	8007292 <UART_SetConfig+0x5d2>
 800722c:	4b4b      	ldr	r3, [pc, #300]	; (800735c <UART_SetConfig+0x69c>)
 800722e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	2b05      	cmp	r3, #5
 8007236:	d827      	bhi.n	8007288 <UART_SetConfig+0x5c8>
 8007238:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <UART_SetConfig+0x580>)
 800723a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723e:	bf00      	nop
 8007240:	08007259 	.word	0x08007259
 8007244:	08007261 	.word	0x08007261
 8007248:	08007269 	.word	0x08007269
 800724c:	08007271 	.word	0x08007271
 8007250:	08007279 	.word	0x08007279
 8007254:	08007281 	.word	0x08007281
 8007258:	2302      	movs	r3, #2
 800725a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800725e:	e01b      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007260:	2304      	movs	r3, #4
 8007262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007266:	e017      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007268:	2308      	movs	r3, #8
 800726a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800726e:	e013      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007270:	2310      	movs	r3, #16
 8007272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007276:	e00f      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007278:	2320      	movs	r3, #32
 800727a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800727e:	e00b      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007280:	2340      	movs	r3, #64	; 0x40
 8007282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007286:	e007      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007288:	2380      	movs	r3, #128	; 0x80
 800728a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800728e:	bf00      	nop
 8007290:	e002      	b.n	8007298 <UART_SetConfig+0x5d8>
 8007292:	2380      	movs	r3, #128	; 0x80
 8007294:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a32      	ldr	r2, [pc, #200]	; (8007368 <UART_SetConfig+0x6a8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	f040 86f7 	bne.w	8008092 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	f000 80c0 	beq.w	800742e <UART_SetConfig+0x76e>
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	dc04      	bgt.n	80072bc <UART_SetConfig+0x5fc>
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d00c      	beq.n	80072d0 <UART_SetConfig+0x610>
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d065      	beq.n	8007386 <UART_SetConfig+0x6c6>
 80072ba:	e27a      	b.n	80077b2 <UART_SetConfig+0xaf2>
 80072bc:	2b20      	cmp	r3, #32
 80072be:	f000 81b0 	beq.w	8007622 <UART_SetConfig+0x962>
 80072c2:	2b40      	cmp	r3, #64	; 0x40
 80072c4:	f000 821e 	beq.w	8007704 <UART_SetConfig+0xa44>
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	f000 8104 	beq.w	80074d6 <UART_SetConfig+0x816>
 80072ce:	e270      	b.n	80077b2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80072d0:	f7fd fd38 	bl	8004d44 <HAL_RCCEx_GetD3PCLK1Freq>
 80072d4:	4602      	mov	r2, r0
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d04e      	beq.n	800737c <UART_SetConfig+0x6bc>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d048      	beq.n	8007378 <UART_SetConfig+0x6b8>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d042      	beq.n	8007374 <UART_SetConfig+0x6b4>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d03c      	beq.n	8007370 <UART_SetConfig+0x6b0>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d036      	beq.n	800736c <UART_SetConfig+0x6ac>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	2b05      	cmp	r3, #5
 8007304:	d026      	beq.n	8007354 <UART_SetConfig+0x694>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	2b06      	cmp	r3, #6
 800730c:	d020      	beq.n	8007350 <UART_SetConfig+0x690>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	2b07      	cmp	r3, #7
 8007314:	d01a      	beq.n	800734c <UART_SetConfig+0x68c>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	2b08      	cmp	r3, #8
 800731c:	d014      	beq.n	8007348 <UART_SetConfig+0x688>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	2b09      	cmp	r3, #9
 8007324:	d00e      	beq.n	8007344 <UART_SetConfig+0x684>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b0a      	cmp	r3, #10
 800732c:	d008      	beq.n	8007340 <UART_SetConfig+0x680>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	2b0b      	cmp	r3, #11
 8007334:	d102      	bne.n	800733c <UART_SetConfig+0x67c>
 8007336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800733a:	e020      	b.n	800737e <UART_SetConfig+0x6be>
 800733c:	2301      	movs	r3, #1
 800733e:	e01e      	b.n	800737e <UART_SetConfig+0x6be>
 8007340:	2380      	movs	r3, #128	; 0x80
 8007342:	e01c      	b.n	800737e <UART_SetConfig+0x6be>
 8007344:	2340      	movs	r3, #64	; 0x40
 8007346:	e01a      	b.n	800737e <UART_SetConfig+0x6be>
 8007348:	2320      	movs	r3, #32
 800734a:	e018      	b.n	800737e <UART_SetConfig+0x6be>
 800734c:	2310      	movs	r3, #16
 800734e:	e016      	b.n	800737e <UART_SetConfig+0x6be>
 8007350:	230c      	movs	r3, #12
 8007352:	e014      	b.n	800737e <UART_SetConfig+0x6be>
 8007354:	230a      	movs	r3, #10
 8007356:	e012      	b.n	800737e <UART_SetConfig+0x6be>
 8007358:	40011400 	.word	0x40011400
 800735c:	58024400 	.word	0x58024400
 8007360:	40007800 	.word	0x40007800
 8007364:	40007c00 	.word	0x40007c00
 8007368:	58000c00 	.word	0x58000c00
 800736c:	2308      	movs	r3, #8
 800736e:	e006      	b.n	800737e <UART_SetConfig+0x6be>
 8007370:	2306      	movs	r3, #6
 8007372:	e004      	b.n	800737e <UART_SetConfig+0x6be>
 8007374:	2304      	movs	r3, #4
 8007376:	e002      	b.n	800737e <UART_SetConfig+0x6be>
 8007378:	2302      	movs	r3, #2
 800737a:	e000      	b.n	800737e <UART_SetConfig+0x6be>
 800737c:	2301      	movs	r3, #1
 800737e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007384:	e219      	b.n	80077ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007386:	f107 0314 	add.w	r3, r7, #20
 800738a:	4618      	mov	r0, r3
 800738c:	f7fd fcf0 	bl	8004d70 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	2b00      	cmp	r3, #0
 8007398:	d044      	beq.n	8007424 <UART_SetConfig+0x764>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d03e      	beq.n	8007420 <UART_SetConfig+0x760>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d038      	beq.n	800741c <UART_SetConfig+0x75c>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d032      	beq.n	8007418 <UART_SetConfig+0x758>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d02c      	beq.n	8007414 <UART_SetConfig+0x754>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	2b05      	cmp	r3, #5
 80073c0:	d026      	beq.n	8007410 <UART_SetConfig+0x750>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	2b06      	cmp	r3, #6
 80073c8:	d020      	beq.n	800740c <UART_SetConfig+0x74c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	2b07      	cmp	r3, #7
 80073d0:	d01a      	beq.n	8007408 <UART_SetConfig+0x748>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d014      	beq.n	8007404 <UART_SetConfig+0x744>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	2b09      	cmp	r3, #9
 80073e0:	d00e      	beq.n	8007400 <UART_SetConfig+0x740>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	2b0a      	cmp	r3, #10
 80073e8:	d008      	beq.n	80073fc <UART_SetConfig+0x73c>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	2b0b      	cmp	r3, #11
 80073f0:	d102      	bne.n	80073f8 <UART_SetConfig+0x738>
 80073f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073f6:	e016      	b.n	8007426 <UART_SetConfig+0x766>
 80073f8:	2301      	movs	r3, #1
 80073fa:	e014      	b.n	8007426 <UART_SetConfig+0x766>
 80073fc:	2380      	movs	r3, #128	; 0x80
 80073fe:	e012      	b.n	8007426 <UART_SetConfig+0x766>
 8007400:	2340      	movs	r3, #64	; 0x40
 8007402:	e010      	b.n	8007426 <UART_SetConfig+0x766>
 8007404:	2320      	movs	r3, #32
 8007406:	e00e      	b.n	8007426 <UART_SetConfig+0x766>
 8007408:	2310      	movs	r3, #16
 800740a:	e00c      	b.n	8007426 <UART_SetConfig+0x766>
 800740c:	230c      	movs	r3, #12
 800740e:	e00a      	b.n	8007426 <UART_SetConfig+0x766>
 8007410:	230a      	movs	r3, #10
 8007412:	e008      	b.n	8007426 <UART_SetConfig+0x766>
 8007414:	2308      	movs	r3, #8
 8007416:	e006      	b.n	8007426 <UART_SetConfig+0x766>
 8007418:	2306      	movs	r3, #6
 800741a:	e004      	b.n	8007426 <UART_SetConfig+0x766>
 800741c:	2304      	movs	r3, #4
 800741e:	e002      	b.n	8007426 <UART_SetConfig+0x766>
 8007420:	2302      	movs	r3, #2
 8007422:	e000      	b.n	8007426 <UART_SetConfig+0x766>
 8007424:	2301      	movs	r3, #1
 8007426:	fbb2 f3f3 	udiv	r3, r2, r3
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800742c:	e1c5      	b.n	80077ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800742e:	f107 0308 	add.w	r3, r7, #8
 8007432:	4618      	mov	r0, r3
 8007434:	f7fd fde8 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	2b00      	cmp	r3, #0
 8007440:	d044      	beq.n	80074cc <UART_SetConfig+0x80c>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	2b01      	cmp	r3, #1
 8007448:	d03e      	beq.n	80074c8 <UART_SetConfig+0x808>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	2b02      	cmp	r3, #2
 8007450:	d038      	beq.n	80074c4 <UART_SetConfig+0x804>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	2b03      	cmp	r3, #3
 8007458:	d032      	beq.n	80074c0 <UART_SetConfig+0x800>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	2b04      	cmp	r3, #4
 8007460:	d02c      	beq.n	80074bc <UART_SetConfig+0x7fc>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	2b05      	cmp	r3, #5
 8007468:	d026      	beq.n	80074b8 <UART_SetConfig+0x7f8>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	2b06      	cmp	r3, #6
 8007470:	d020      	beq.n	80074b4 <UART_SetConfig+0x7f4>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	2b07      	cmp	r3, #7
 8007478:	d01a      	beq.n	80074b0 <UART_SetConfig+0x7f0>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	2b08      	cmp	r3, #8
 8007480:	d014      	beq.n	80074ac <UART_SetConfig+0x7ec>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	2b09      	cmp	r3, #9
 8007488:	d00e      	beq.n	80074a8 <UART_SetConfig+0x7e8>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	2b0a      	cmp	r3, #10
 8007490:	d008      	beq.n	80074a4 <UART_SetConfig+0x7e4>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	2b0b      	cmp	r3, #11
 8007498:	d102      	bne.n	80074a0 <UART_SetConfig+0x7e0>
 800749a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800749e:	e016      	b.n	80074ce <UART_SetConfig+0x80e>
 80074a0:	2301      	movs	r3, #1
 80074a2:	e014      	b.n	80074ce <UART_SetConfig+0x80e>
 80074a4:	2380      	movs	r3, #128	; 0x80
 80074a6:	e012      	b.n	80074ce <UART_SetConfig+0x80e>
 80074a8:	2340      	movs	r3, #64	; 0x40
 80074aa:	e010      	b.n	80074ce <UART_SetConfig+0x80e>
 80074ac:	2320      	movs	r3, #32
 80074ae:	e00e      	b.n	80074ce <UART_SetConfig+0x80e>
 80074b0:	2310      	movs	r3, #16
 80074b2:	e00c      	b.n	80074ce <UART_SetConfig+0x80e>
 80074b4:	230c      	movs	r3, #12
 80074b6:	e00a      	b.n	80074ce <UART_SetConfig+0x80e>
 80074b8:	230a      	movs	r3, #10
 80074ba:	e008      	b.n	80074ce <UART_SetConfig+0x80e>
 80074bc:	2308      	movs	r3, #8
 80074be:	e006      	b.n	80074ce <UART_SetConfig+0x80e>
 80074c0:	2306      	movs	r3, #6
 80074c2:	e004      	b.n	80074ce <UART_SetConfig+0x80e>
 80074c4:	2304      	movs	r3, #4
 80074c6:	e002      	b.n	80074ce <UART_SetConfig+0x80e>
 80074c8:	2302      	movs	r3, #2
 80074ca:	e000      	b.n	80074ce <UART_SetConfig+0x80e>
 80074cc:	2301      	movs	r3, #1
 80074ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074d4:	e171      	b.n	80077ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074d6:	4b7a      	ldr	r3, [pc, #488]	; (80076c0 <UART_SetConfig+0xa00>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d054      	beq.n	800758c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074e2:	4b77      	ldr	r3, [pc, #476]	; (80076c0 <UART_SetConfig+0xa00>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	08db      	lsrs	r3, r3, #3
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	4a75      	ldr	r2, [pc, #468]	; (80076c4 <UART_SetConfig+0xa04>)
 80074ee:	40da      	lsrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d044      	beq.n	8007582 <UART_SetConfig+0x8c2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d03e      	beq.n	800757e <UART_SetConfig+0x8be>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	2b02      	cmp	r3, #2
 8007506:	d038      	beq.n	800757a <UART_SetConfig+0x8ba>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b03      	cmp	r3, #3
 800750e:	d032      	beq.n	8007576 <UART_SetConfig+0x8b6>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b04      	cmp	r3, #4
 8007516:	d02c      	beq.n	8007572 <UART_SetConfig+0x8b2>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	2b05      	cmp	r3, #5
 800751e:	d026      	beq.n	800756e <UART_SetConfig+0x8ae>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	2b06      	cmp	r3, #6
 8007526:	d020      	beq.n	800756a <UART_SetConfig+0x8aa>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	2b07      	cmp	r3, #7
 800752e:	d01a      	beq.n	8007566 <UART_SetConfig+0x8a6>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	2b08      	cmp	r3, #8
 8007536:	d014      	beq.n	8007562 <UART_SetConfig+0x8a2>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	2b09      	cmp	r3, #9
 800753e:	d00e      	beq.n	800755e <UART_SetConfig+0x89e>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	2b0a      	cmp	r3, #10
 8007546:	d008      	beq.n	800755a <UART_SetConfig+0x89a>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	2b0b      	cmp	r3, #11
 800754e:	d102      	bne.n	8007556 <UART_SetConfig+0x896>
 8007550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007554:	e016      	b.n	8007584 <UART_SetConfig+0x8c4>
 8007556:	2301      	movs	r3, #1
 8007558:	e014      	b.n	8007584 <UART_SetConfig+0x8c4>
 800755a:	2380      	movs	r3, #128	; 0x80
 800755c:	e012      	b.n	8007584 <UART_SetConfig+0x8c4>
 800755e:	2340      	movs	r3, #64	; 0x40
 8007560:	e010      	b.n	8007584 <UART_SetConfig+0x8c4>
 8007562:	2320      	movs	r3, #32
 8007564:	e00e      	b.n	8007584 <UART_SetConfig+0x8c4>
 8007566:	2310      	movs	r3, #16
 8007568:	e00c      	b.n	8007584 <UART_SetConfig+0x8c4>
 800756a:	230c      	movs	r3, #12
 800756c:	e00a      	b.n	8007584 <UART_SetConfig+0x8c4>
 800756e:	230a      	movs	r3, #10
 8007570:	e008      	b.n	8007584 <UART_SetConfig+0x8c4>
 8007572:	2308      	movs	r3, #8
 8007574:	e006      	b.n	8007584 <UART_SetConfig+0x8c4>
 8007576:	2306      	movs	r3, #6
 8007578:	e004      	b.n	8007584 <UART_SetConfig+0x8c4>
 800757a:	2304      	movs	r3, #4
 800757c:	e002      	b.n	8007584 <UART_SetConfig+0x8c4>
 800757e:	2302      	movs	r3, #2
 8007580:	e000      	b.n	8007584 <UART_SetConfig+0x8c4>
 8007582:	2301      	movs	r3, #1
 8007584:	fbb2 f3f3 	udiv	r3, r2, r3
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800758a:	e116      	b.n	80077ba <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	2b00      	cmp	r3, #0
 8007592:	d043      	beq.n	800761c <UART_SetConfig+0x95c>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	2b01      	cmp	r3, #1
 800759a:	d03d      	beq.n	8007618 <UART_SetConfig+0x958>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d037      	beq.n	8007614 <UART_SetConfig+0x954>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d031      	beq.n	8007610 <UART_SetConfig+0x950>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d02b      	beq.n	800760c <UART_SetConfig+0x94c>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	2b05      	cmp	r3, #5
 80075ba:	d025      	beq.n	8007608 <UART_SetConfig+0x948>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	2b06      	cmp	r3, #6
 80075c2:	d01f      	beq.n	8007604 <UART_SetConfig+0x944>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2b07      	cmp	r3, #7
 80075ca:	d019      	beq.n	8007600 <UART_SetConfig+0x940>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d013      	beq.n	80075fc <UART_SetConfig+0x93c>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	2b09      	cmp	r3, #9
 80075da:	d00d      	beq.n	80075f8 <UART_SetConfig+0x938>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	2b0a      	cmp	r3, #10
 80075e2:	d007      	beq.n	80075f4 <UART_SetConfig+0x934>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	2b0b      	cmp	r3, #11
 80075ea:	d101      	bne.n	80075f0 <UART_SetConfig+0x930>
 80075ec:	4b36      	ldr	r3, [pc, #216]	; (80076c8 <UART_SetConfig+0xa08>)
 80075ee:	e016      	b.n	800761e <UART_SetConfig+0x95e>
 80075f0:	4b34      	ldr	r3, [pc, #208]	; (80076c4 <UART_SetConfig+0xa04>)
 80075f2:	e014      	b.n	800761e <UART_SetConfig+0x95e>
 80075f4:	4b35      	ldr	r3, [pc, #212]	; (80076cc <UART_SetConfig+0xa0c>)
 80075f6:	e012      	b.n	800761e <UART_SetConfig+0x95e>
 80075f8:	4b35      	ldr	r3, [pc, #212]	; (80076d0 <UART_SetConfig+0xa10>)
 80075fa:	e010      	b.n	800761e <UART_SetConfig+0x95e>
 80075fc:	4b35      	ldr	r3, [pc, #212]	; (80076d4 <UART_SetConfig+0xa14>)
 80075fe:	e00e      	b.n	800761e <UART_SetConfig+0x95e>
 8007600:	4b35      	ldr	r3, [pc, #212]	; (80076d8 <UART_SetConfig+0xa18>)
 8007602:	e00c      	b.n	800761e <UART_SetConfig+0x95e>
 8007604:	4b35      	ldr	r3, [pc, #212]	; (80076dc <UART_SetConfig+0xa1c>)
 8007606:	e00a      	b.n	800761e <UART_SetConfig+0x95e>
 8007608:	4b35      	ldr	r3, [pc, #212]	; (80076e0 <UART_SetConfig+0xa20>)
 800760a:	e008      	b.n	800761e <UART_SetConfig+0x95e>
 800760c:	4b35      	ldr	r3, [pc, #212]	; (80076e4 <UART_SetConfig+0xa24>)
 800760e:	e006      	b.n	800761e <UART_SetConfig+0x95e>
 8007610:	4b35      	ldr	r3, [pc, #212]	; (80076e8 <UART_SetConfig+0xa28>)
 8007612:	e004      	b.n	800761e <UART_SetConfig+0x95e>
 8007614:	4b35      	ldr	r3, [pc, #212]	; (80076ec <UART_SetConfig+0xa2c>)
 8007616:	e002      	b.n	800761e <UART_SetConfig+0x95e>
 8007618:	4b35      	ldr	r3, [pc, #212]	; (80076f0 <UART_SetConfig+0xa30>)
 800761a:	e000      	b.n	800761e <UART_SetConfig+0x95e>
 800761c:	4b29      	ldr	r3, [pc, #164]	; (80076c4 <UART_SetConfig+0xa04>)
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007620:	e0cb      	b.n	80077ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	2b00      	cmp	r3, #0
 8007628:	d046      	beq.n	80076b8 <UART_SetConfig+0x9f8>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	2b01      	cmp	r3, #1
 8007630:	d040      	beq.n	80076b4 <UART_SetConfig+0x9f4>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	2b02      	cmp	r3, #2
 8007638:	d03a      	beq.n	80076b0 <UART_SetConfig+0x9f0>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	2b03      	cmp	r3, #3
 8007640:	d034      	beq.n	80076ac <UART_SetConfig+0x9ec>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	2b04      	cmp	r3, #4
 8007648:	d02e      	beq.n	80076a8 <UART_SetConfig+0x9e8>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	2b05      	cmp	r3, #5
 8007650:	d028      	beq.n	80076a4 <UART_SetConfig+0x9e4>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	2b06      	cmp	r3, #6
 8007658:	d022      	beq.n	80076a0 <UART_SetConfig+0x9e0>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	2b07      	cmp	r3, #7
 8007660:	d01c      	beq.n	800769c <UART_SetConfig+0x9dc>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	2b08      	cmp	r3, #8
 8007668:	d016      	beq.n	8007698 <UART_SetConfig+0x9d8>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	2b09      	cmp	r3, #9
 8007670:	d00f      	beq.n	8007692 <UART_SetConfig+0x9d2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	2b0a      	cmp	r3, #10
 8007678:	d008      	beq.n	800768c <UART_SetConfig+0x9cc>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	2b0b      	cmp	r3, #11
 8007680:	d102      	bne.n	8007688 <UART_SetConfig+0x9c8>
 8007682:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007686:	e018      	b.n	80076ba <UART_SetConfig+0x9fa>
 8007688:	4b13      	ldr	r3, [pc, #76]	; (80076d8 <UART_SetConfig+0xa18>)
 800768a:	e016      	b.n	80076ba <UART_SetConfig+0x9fa>
 800768c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007690:	e013      	b.n	80076ba <UART_SetConfig+0x9fa>
 8007692:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007696:	e010      	b.n	80076ba <UART_SetConfig+0x9fa>
 8007698:	4b16      	ldr	r3, [pc, #88]	; (80076f4 <UART_SetConfig+0xa34>)
 800769a:	e00e      	b.n	80076ba <UART_SetConfig+0x9fa>
 800769c:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <UART_SetConfig+0xa08>)
 800769e:	e00c      	b.n	80076ba <UART_SetConfig+0x9fa>
 80076a0:	4b15      	ldr	r3, [pc, #84]	; (80076f8 <UART_SetConfig+0xa38>)
 80076a2:	e00a      	b.n	80076ba <UART_SetConfig+0x9fa>
 80076a4:	4b15      	ldr	r3, [pc, #84]	; (80076fc <UART_SetConfig+0xa3c>)
 80076a6:	e008      	b.n	80076ba <UART_SetConfig+0x9fa>
 80076a8:	4b08      	ldr	r3, [pc, #32]	; (80076cc <UART_SetConfig+0xa0c>)
 80076aa:	e006      	b.n	80076ba <UART_SetConfig+0x9fa>
 80076ac:	4b14      	ldr	r3, [pc, #80]	; (8007700 <UART_SetConfig+0xa40>)
 80076ae:	e004      	b.n	80076ba <UART_SetConfig+0x9fa>
 80076b0:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <UART_SetConfig+0xa10>)
 80076b2:	e002      	b.n	80076ba <UART_SetConfig+0x9fa>
 80076b4:	4b07      	ldr	r3, [pc, #28]	; (80076d4 <UART_SetConfig+0xa14>)
 80076b6:	e000      	b.n	80076ba <UART_SetConfig+0x9fa>
 80076b8:	4b07      	ldr	r3, [pc, #28]	; (80076d8 <UART_SetConfig+0xa18>)
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076bc:	e07d      	b.n	80077ba <UART_SetConfig+0xafa>
 80076be:	bf00      	nop
 80076c0:	58024400 	.word	0x58024400
 80076c4:	03d09000 	.word	0x03d09000
 80076c8:	0003d090 	.word	0x0003d090
 80076cc:	0007a120 	.word	0x0007a120
 80076d0:	000f4240 	.word	0x000f4240
 80076d4:	001e8480 	.word	0x001e8480
 80076d8:	003d0900 	.word	0x003d0900
 80076dc:	00516155 	.word	0x00516155
 80076e0:	0061a800 	.word	0x0061a800
 80076e4:	007a1200 	.word	0x007a1200
 80076e8:	00a2c2aa 	.word	0x00a2c2aa
 80076ec:	00f42400 	.word	0x00f42400
 80076f0:	01e84800 	.word	0x01e84800
 80076f4:	0001e848 	.word	0x0001e848
 80076f8:	00051615 	.word	0x00051615
 80076fc:	00061a80 	.word	0x00061a80
 8007700:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	2b00      	cmp	r3, #0
 800770a:	d04e      	beq.n	80077aa <UART_SetConfig+0xaea>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b01      	cmp	r3, #1
 8007712:	d047      	beq.n	80077a4 <UART_SetConfig+0xae4>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	2b02      	cmp	r3, #2
 800771a:	d040      	beq.n	800779e <UART_SetConfig+0xade>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	2b03      	cmp	r3, #3
 8007722:	d039      	beq.n	8007798 <UART_SetConfig+0xad8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b04      	cmp	r3, #4
 800772a:	d032      	beq.n	8007792 <UART_SetConfig+0xad2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	2b05      	cmp	r3, #5
 8007732:	d02b      	beq.n	800778c <UART_SetConfig+0xacc>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	2b06      	cmp	r3, #6
 800773a:	d024      	beq.n	8007786 <UART_SetConfig+0xac6>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	2b07      	cmp	r3, #7
 8007742:	d01d      	beq.n	8007780 <UART_SetConfig+0xac0>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	2b08      	cmp	r3, #8
 800774a:	d016      	beq.n	800777a <UART_SetConfig+0xaba>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b09      	cmp	r3, #9
 8007752:	d00f      	beq.n	8007774 <UART_SetConfig+0xab4>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	2b0a      	cmp	r3, #10
 800775a:	d008      	beq.n	800776e <UART_SetConfig+0xaae>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	2b0b      	cmp	r3, #11
 8007762:	d101      	bne.n	8007768 <UART_SetConfig+0xaa8>
 8007764:	2380      	movs	r3, #128	; 0x80
 8007766:	e022      	b.n	80077ae <UART_SetConfig+0xaee>
 8007768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800776c:	e01f      	b.n	80077ae <UART_SetConfig+0xaee>
 800776e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007772:	e01c      	b.n	80077ae <UART_SetConfig+0xaee>
 8007774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007778:	e019      	b.n	80077ae <UART_SetConfig+0xaee>
 800777a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800777e:	e016      	b.n	80077ae <UART_SetConfig+0xaee>
 8007780:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007784:	e013      	b.n	80077ae <UART_SetConfig+0xaee>
 8007786:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800778a:	e010      	b.n	80077ae <UART_SetConfig+0xaee>
 800778c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007790:	e00d      	b.n	80077ae <UART_SetConfig+0xaee>
 8007792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007796:	e00a      	b.n	80077ae <UART_SetConfig+0xaee>
 8007798:	f241 5355 	movw	r3, #5461	; 0x1555
 800779c:	e007      	b.n	80077ae <UART_SetConfig+0xaee>
 800779e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077a2:	e004      	b.n	80077ae <UART_SetConfig+0xaee>
 80077a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077a8:	e001      	b.n	80077ae <UART_SetConfig+0xaee>
 80077aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077b0:	e003      	b.n	80077ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 80077b8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f001 83e4 	beq.w	8008f8a <UART_SetConfig+0x22ca>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	4613      	mov	r3, r2
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	4413      	add	r3, r2
 80077cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d305      	bcc.n	80077de <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077da:	429a      	cmp	r2, r3
 80077dc:	d904      	bls.n	80077e8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077e4:	f001 bbd1 	b.w	8008f8a <UART_SetConfig+0x22ca>
      }
      else
      {
        switch (clocksource)
 80077e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	f000 8153 	beq.w	8007a98 <UART_SetConfig+0xdd8>
 80077f2:	2b08      	cmp	r3, #8
 80077f4:	dc06      	bgt.n	8007804 <UART_SetConfig+0xb44>
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d00f      	beq.n	800781a <UART_SetConfig+0xb5a>
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	f000 80ab 	beq.w	8007956 <UART_SetConfig+0xc96>
 8007800:	f000 bc30 	b.w	8008064 <UART_SetConfig+0x13a4>
 8007804:	2b20      	cmp	r3, #32
 8007806:	f000 832d 	beq.w	8007e64 <UART_SetConfig+0x11a4>
 800780a:	2b40      	cmp	r3, #64	; 0x40
 800780c:	f000 83a5 	beq.w	8007f5a <UART_SetConfig+0x129a>
 8007810:	2b10      	cmp	r3, #16
 8007812:	f000 81e2 	beq.w	8007bda <UART_SetConfig+0xf1a>
 8007816:	f000 bc25 	b.w	8008064 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800781a:	f7fd fa93 	bl	8004d44 <HAL_RCCEx_GetD3PCLK1Freq>
 800781e:	4603      	mov	r3, r0
 8007820:	4618      	mov	r0, r3
 8007822:	f04f 0100 	mov.w	r1, #0
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	d067      	beq.n	80078fe <UART_SetConfig+0xc3e>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	2b01      	cmp	r3, #1
 8007834:	d05e      	beq.n	80078f4 <UART_SetConfig+0xc34>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	2b02      	cmp	r3, #2
 800783c:	d055      	beq.n	80078ea <UART_SetConfig+0xc2a>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	2b03      	cmp	r3, #3
 8007844:	d04c      	beq.n	80078e0 <UART_SetConfig+0xc20>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	2b04      	cmp	r3, #4
 800784c:	d043      	beq.n	80078d6 <UART_SetConfig+0xc16>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	2b05      	cmp	r3, #5
 8007854:	d03a      	beq.n	80078cc <UART_SetConfig+0xc0c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	2b06      	cmp	r3, #6
 800785c:	d031      	beq.n	80078c2 <UART_SetConfig+0xc02>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	2b07      	cmp	r3, #7
 8007864:	d028      	beq.n	80078b8 <UART_SetConfig+0xbf8>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	2b08      	cmp	r3, #8
 800786c:	d01f      	beq.n	80078ae <UART_SetConfig+0xbee>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	2b09      	cmp	r3, #9
 8007874:	d016      	beq.n	80078a4 <UART_SetConfig+0xbe4>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	2b0a      	cmp	r3, #10
 800787c:	d00d      	beq.n	800789a <UART_SetConfig+0xbda>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	2b0b      	cmp	r3, #11
 8007884:	d104      	bne.n	8007890 <UART_SetConfig+0xbd0>
 8007886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800788a:	f04f 0400 	mov.w	r4, #0
 800788e:	e03a      	b.n	8007906 <UART_SetConfig+0xc46>
 8007890:	f04f 0301 	mov.w	r3, #1
 8007894:	f04f 0400 	mov.w	r4, #0
 8007898:	e035      	b.n	8007906 <UART_SetConfig+0xc46>
 800789a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800789e:	f04f 0400 	mov.w	r4, #0
 80078a2:	e030      	b.n	8007906 <UART_SetConfig+0xc46>
 80078a4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80078a8:	f04f 0400 	mov.w	r4, #0
 80078ac:	e02b      	b.n	8007906 <UART_SetConfig+0xc46>
 80078ae:	f04f 0320 	mov.w	r3, #32
 80078b2:	f04f 0400 	mov.w	r4, #0
 80078b6:	e026      	b.n	8007906 <UART_SetConfig+0xc46>
 80078b8:	f04f 0310 	mov.w	r3, #16
 80078bc:	f04f 0400 	mov.w	r4, #0
 80078c0:	e021      	b.n	8007906 <UART_SetConfig+0xc46>
 80078c2:	f04f 030c 	mov.w	r3, #12
 80078c6:	f04f 0400 	mov.w	r4, #0
 80078ca:	e01c      	b.n	8007906 <UART_SetConfig+0xc46>
 80078cc:	f04f 030a 	mov.w	r3, #10
 80078d0:	f04f 0400 	mov.w	r4, #0
 80078d4:	e017      	b.n	8007906 <UART_SetConfig+0xc46>
 80078d6:	f04f 0308 	mov.w	r3, #8
 80078da:	f04f 0400 	mov.w	r4, #0
 80078de:	e012      	b.n	8007906 <UART_SetConfig+0xc46>
 80078e0:	f04f 0306 	mov.w	r3, #6
 80078e4:	f04f 0400 	mov.w	r4, #0
 80078e8:	e00d      	b.n	8007906 <UART_SetConfig+0xc46>
 80078ea:	f04f 0304 	mov.w	r3, #4
 80078ee:	f04f 0400 	mov.w	r4, #0
 80078f2:	e008      	b.n	8007906 <UART_SetConfig+0xc46>
 80078f4:	f04f 0302 	mov.w	r3, #2
 80078f8:	f04f 0400 	mov.w	r4, #0
 80078fc:	e003      	b.n	8007906 <UART_SetConfig+0xc46>
 80078fe:	f04f 0301 	mov.w	r3, #1
 8007902:	f04f 0400 	mov.w	r4, #0
 8007906:	461a      	mov	r2, r3
 8007908:	4623      	mov	r3, r4
 800790a:	f7f8 fce5 	bl	80002d8 <__aeabi_uldivmod>
 800790e:	4603      	mov	r3, r0
 8007910:	460c      	mov	r4, r1
 8007912:	4619      	mov	r1, r3
 8007914:	4622      	mov	r2, r4
 8007916:	f04f 0300 	mov.w	r3, #0
 800791a:	f04f 0400 	mov.w	r4, #0
 800791e:	0214      	lsls	r4, r2, #8
 8007920:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007924:	020b      	lsls	r3, r1, #8
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6852      	ldr	r2, [r2, #4]
 800792a:	0852      	lsrs	r2, r2, #1
 800792c:	4611      	mov	r1, r2
 800792e:	f04f 0200 	mov.w	r2, #0
 8007932:	eb13 0b01 	adds.w	fp, r3, r1
 8007936:	eb44 0c02 	adc.w	ip, r4, r2
 800793a:	4658      	mov	r0, fp
 800793c:	4661      	mov	r1, ip
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f04f 0400 	mov.w	r4, #0
 8007946:	461a      	mov	r2, r3
 8007948:	4623      	mov	r3, r4
 800794a:	f7f8 fcc5 	bl	80002d8 <__aeabi_uldivmod>
 800794e:	4603      	mov	r3, r0
 8007950:	460c      	mov	r4, r1
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8007954:	e38a      	b.n	800806c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007956:	f107 0314 	add.w	r3, r7, #20
 800795a:	4618      	mov	r0, r3
 800795c:	f7fd fa08 	bl	8004d70 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	4618      	mov	r0, r3
 8007964:	f04f 0100 	mov.w	r1, #0
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	2b00      	cmp	r3, #0
 800796e:	d067      	beq.n	8007a40 <UART_SetConfig+0xd80>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	2b01      	cmp	r3, #1
 8007976:	d05e      	beq.n	8007a36 <UART_SetConfig+0xd76>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	2b02      	cmp	r3, #2
 800797e:	d055      	beq.n	8007a2c <UART_SetConfig+0xd6c>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	2b03      	cmp	r3, #3
 8007986:	d04c      	beq.n	8007a22 <UART_SetConfig+0xd62>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	2b04      	cmp	r3, #4
 800798e:	d043      	beq.n	8007a18 <UART_SetConfig+0xd58>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	2b05      	cmp	r3, #5
 8007996:	d03a      	beq.n	8007a0e <UART_SetConfig+0xd4e>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	2b06      	cmp	r3, #6
 800799e:	d031      	beq.n	8007a04 <UART_SetConfig+0xd44>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	2b07      	cmp	r3, #7
 80079a6:	d028      	beq.n	80079fa <UART_SetConfig+0xd3a>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d01f      	beq.n	80079f0 <UART_SetConfig+0xd30>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	2b09      	cmp	r3, #9
 80079b6:	d016      	beq.n	80079e6 <UART_SetConfig+0xd26>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	2b0a      	cmp	r3, #10
 80079be:	d00d      	beq.n	80079dc <UART_SetConfig+0xd1c>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	2b0b      	cmp	r3, #11
 80079c6:	d104      	bne.n	80079d2 <UART_SetConfig+0xd12>
 80079c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079cc:	f04f 0400 	mov.w	r4, #0
 80079d0:	e03a      	b.n	8007a48 <UART_SetConfig+0xd88>
 80079d2:	f04f 0301 	mov.w	r3, #1
 80079d6:	f04f 0400 	mov.w	r4, #0
 80079da:	e035      	b.n	8007a48 <UART_SetConfig+0xd88>
 80079dc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80079e0:	f04f 0400 	mov.w	r4, #0
 80079e4:	e030      	b.n	8007a48 <UART_SetConfig+0xd88>
 80079e6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80079ea:	f04f 0400 	mov.w	r4, #0
 80079ee:	e02b      	b.n	8007a48 <UART_SetConfig+0xd88>
 80079f0:	f04f 0320 	mov.w	r3, #32
 80079f4:	f04f 0400 	mov.w	r4, #0
 80079f8:	e026      	b.n	8007a48 <UART_SetConfig+0xd88>
 80079fa:	f04f 0310 	mov.w	r3, #16
 80079fe:	f04f 0400 	mov.w	r4, #0
 8007a02:	e021      	b.n	8007a48 <UART_SetConfig+0xd88>
 8007a04:	f04f 030c 	mov.w	r3, #12
 8007a08:	f04f 0400 	mov.w	r4, #0
 8007a0c:	e01c      	b.n	8007a48 <UART_SetConfig+0xd88>
 8007a0e:	f04f 030a 	mov.w	r3, #10
 8007a12:	f04f 0400 	mov.w	r4, #0
 8007a16:	e017      	b.n	8007a48 <UART_SetConfig+0xd88>
 8007a18:	f04f 0308 	mov.w	r3, #8
 8007a1c:	f04f 0400 	mov.w	r4, #0
 8007a20:	e012      	b.n	8007a48 <UART_SetConfig+0xd88>
 8007a22:	f04f 0306 	mov.w	r3, #6
 8007a26:	f04f 0400 	mov.w	r4, #0
 8007a2a:	e00d      	b.n	8007a48 <UART_SetConfig+0xd88>
 8007a2c:	f04f 0304 	mov.w	r3, #4
 8007a30:	f04f 0400 	mov.w	r4, #0
 8007a34:	e008      	b.n	8007a48 <UART_SetConfig+0xd88>
 8007a36:	f04f 0302 	mov.w	r3, #2
 8007a3a:	f04f 0400 	mov.w	r4, #0
 8007a3e:	e003      	b.n	8007a48 <UART_SetConfig+0xd88>
 8007a40:	f04f 0301 	mov.w	r3, #1
 8007a44:	f04f 0400 	mov.w	r4, #0
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4623      	mov	r3, r4
 8007a4c:	f7f8 fc44 	bl	80002d8 <__aeabi_uldivmod>
 8007a50:	4603      	mov	r3, r0
 8007a52:	460c      	mov	r4, r1
 8007a54:	4619      	mov	r1, r3
 8007a56:	4622      	mov	r2, r4
 8007a58:	f04f 0300 	mov.w	r3, #0
 8007a5c:	f04f 0400 	mov.w	r4, #0
 8007a60:	0214      	lsls	r4, r2, #8
 8007a62:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007a66:	020b      	lsls	r3, r1, #8
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6852      	ldr	r2, [r2, #4]
 8007a6c:	0852      	lsrs	r2, r2, #1
 8007a6e:	4611      	mov	r1, r2
 8007a70:	f04f 0200 	mov.w	r2, #0
 8007a74:	eb13 0b01 	adds.w	fp, r3, r1
 8007a78:	eb44 0c02 	adc.w	ip, r4, r2
 8007a7c:	4658      	mov	r0, fp
 8007a7e:	4661      	mov	r1, ip
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f04f 0400 	mov.w	r4, #0
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4623      	mov	r3, r4
 8007a8c:	f7f8 fc24 	bl	80002d8 <__aeabi_uldivmod>
 8007a90:	4603      	mov	r3, r0
 8007a92:	460c      	mov	r4, r1
 8007a94:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8007a96:	e2e9      	b.n	800806c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a98:	f107 0308 	add.w	r3, r7, #8
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fd fab3 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f04f 0100 	mov.w	r1, #0
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d067      	beq.n	8007b82 <UART_SetConfig+0xec2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d05e      	beq.n	8007b78 <UART_SetConfig+0xeb8>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d055      	beq.n	8007b6e <UART_SetConfig+0xeae>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d04c      	beq.n	8007b64 <UART_SetConfig+0xea4>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d043      	beq.n	8007b5a <UART_SetConfig+0xe9a>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	2b05      	cmp	r3, #5
 8007ad8:	d03a      	beq.n	8007b50 <UART_SetConfig+0xe90>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b06      	cmp	r3, #6
 8007ae0:	d031      	beq.n	8007b46 <UART_SetConfig+0xe86>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b07      	cmp	r3, #7
 8007ae8:	d028      	beq.n	8007b3c <UART_SetConfig+0xe7c>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	d01f      	beq.n	8007b32 <UART_SetConfig+0xe72>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b09      	cmp	r3, #9
 8007af8:	d016      	beq.n	8007b28 <UART_SetConfig+0xe68>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	2b0a      	cmp	r3, #10
 8007b00:	d00d      	beq.n	8007b1e <UART_SetConfig+0xe5e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	2b0b      	cmp	r3, #11
 8007b08:	d104      	bne.n	8007b14 <UART_SetConfig+0xe54>
 8007b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b0e:	f04f 0400 	mov.w	r4, #0
 8007b12:	e03a      	b.n	8007b8a <UART_SetConfig+0xeca>
 8007b14:	f04f 0301 	mov.w	r3, #1
 8007b18:	f04f 0400 	mov.w	r4, #0
 8007b1c:	e035      	b.n	8007b8a <UART_SetConfig+0xeca>
 8007b1e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007b22:	f04f 0400 	mov.w	r4, #0
 8007b26:	e030      	b.n	8007b8a <UART_SetConfig+0xeca>
 8007b28:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007b2c:	f04f 0400 	mov.w	r4, #0
 8007b30:	e02b      	b.n	8007b8a <UART_SetConfig+0xeca>
 8007b32:	f04f 0320 	mov.w	r3, #32
 8007b36:	f04f 0400 	mov.w	r4, #0
 8007b3a:	e026      	b.n	8007b8a <UART_SetConfig+0xeca>
 8007b3c:	f04f 0310 	mov.w	r3, #16
 8007b40:	f04f 0400 	mov.w	r4, #0
 8007b44:	e021      	b.n	8007b8a <UART_SetConfig+0xeca>
 8007b46:	f04f 030c 	mov.w	r3, #12
 8007b4a:	f04f 0400 	mov.w	r4, #0
 8007b4e:	e01c      	b.n	8007b8a <UART_SetConfig+0xeca>
 8007b50:	f04f 030a 	mov.w	r3, #10
 8007b54:	f04f 0400 	mov.w	r4, #0
 8007b58:	e017      	b.n	8007b8a <UART_SetConfig+0xeca>
 8007b5a:	f04f 0308 	mov.w	r3, #8
 8007b5e:	f04f 0400 	mov.w	r4, #0
 8007b62:	e012      	b.n	8007b8a <UART_SetConfig+0xeca>
 8007b64:	f04f 0306 	mov.w	r3, #6
 8007b68:	f04f 0400 	mov.w	r4, #0
 8007b6c:	e00d      	b.n	8007b8a <UART_SetConfig+0xeca>
 8007b6e:	f04f 0304 	mov.w	r3, #4
 8007b72:	f04f 0400 	mov.w	r4, #0
 8007b76:	e008      	b.n	8007b8a <UART_SetConfig+0xeca>
 8007b78:	f04f 0302 	mov.w	r3, #2
 8007b7c:	f04f 0400 	mov.w	r4, #0
 8007b80:	e003      	b.n	8007b8a <UART_SetConfig+0xeca>
 8007b82:	f04f 0301 	mov.w	r3, #1
 8007b86:	f04f 0400 	mov.w	r4, #0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	4623      	mov	r3, r4
 8007b8e:	f7f8 fba3 	bl	80002d8 <__aeabi_uldivmod>
 8007b92:	4603      	mov	r3, r0
 8007b94:	460c      	mov	r4, r1
 8007b96:	4619      	mov	r1, r3
 8007b98:	4622      	mov	r2, r4
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	f04f 0400 	mov.w	r4, #0
 8007ba2:	0214      	lsls	r4, r2, #8
 8007ba4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007ba8:	020b      	lsls	r3, r1, #8
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6852      	ldr	r2, [r2, #4]
 8007bae:	0852      	lsrs	r2, r2, #1
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	eb13 0b01 	adds.w	fp, r3, r1
 8007bba:	eb44 0c02 	adc.w	ip, r4, r2
 8007bbe:	4658      	mov	r0, fp
 8007bc0:	4661      	mov	r1, ip
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f04f 0400 	mov.w	r4, #0
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4623      	mov	r3, r4
 8007bce:	f7f8 fb83 	bl	80002d8 <__aeabi_uldivmod>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8007bd8:	e248      	b.n	800806c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bda:	4b97      	ldr	r3, [pc, #604]	; (8007e38 <UART_SetConfig+0x1178>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 80a3 	beq.w	8007d2e <UART_SetConfig+0x106e>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be8:	4b93      	ldr	r3, [pc, #588]	; (8007e38 <UART_SetConfig+0x1178>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	08db      	lsrs	r3, r3, #3
 8007bee:	f003 0303 	and.w	r3, r3, #3
 8007bf2:	4a92      	ldr	r2, [pc, #584]	; (8007e3c <UART_SetConfig+0x117c>)
 8007bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f04f 0100 	mov.w	r1, #0
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d067      	beq.n	8007cd6 <UART_SetConfig+0x1016>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d05e      	beq.n	8007ccc <UART_SetConfig+0x100c>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d055      	beq.n	8007cc2 <UART_SetConfig+0x1002>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d04c      	beq.n	8007cb8 <UART_SetConfig+0xff8>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d043      	beq.n	8007cae <UART_SetConfig+0xfee>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	2b05      	cmp	r3, #5
 8007c2c:	d03a      	beq.n	8007ca4 <UART_SetConfig+0xfe4>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	2b06      	cmp	r3, #6
 8007c34:	d031      	beq.n	8007c9a <UART_SetConfig+0xfda>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3a:	2b07      	cmp	r3, #7
 8007c3c:	d028      	beq.n	8007c90 <UART_SetConfig+0xfd0>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	2b08      	cmp	r3, #8
 8007c44:	d01f      	beq.n	8007c86 <UART_SetConfig+0xfc6>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	2b09      	cmp	r3, #9
 8007c4c:	d016      	beq.n	8007c7c <UART_SetConfig+0xfbc>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	2b0a      	cmp	r3, #10
 8007c54:	d00d      	beq.n	8007c72 <UART_SetConfig+0xfb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	2b0b      	cmp	r3, #11
 8007c5c:	d104      	bne.n	8007c68 <UART_SetConfig+0xfa8>
 8007c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c62:	f04f 0400 	mov.w	r4, #0
 8007c66:	e03a      	b.n	8007cde <UART_SetConfig+0x101e>
 8007c68:	f04f 0301 	mov.w	r3, #1
 8007c6c:	f04f 0400 	mov.w	r4, #0
 8007c70:	e035      	b.n	8007cde <UART_SetConfig+0x101e>
 8007c72:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007c76:	f04f 0400 	mov.w	r4, #0
 8007c7a:	e030      	b.n	8007cde <UART_SetConfig+0x101e>
 8007c7c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007c80:	f04f 0400 	mov.w	r4, #0
 8007c84:	e02b      	b.n	8007cde <UART_SetConfig+0x101e>
 8007c86:	f04f 0320 	mov.w	r3, #32
 8007c8a:	f04f 0400 	mov.w	r4, #0
 8007c8e:	e026      	b.n	8007cde <UART_SetConfig+0x101e>
 8007c90:	f04f 0310 	mov.w	r3, #16
 8007c94:	f04f 0400 	mov.w	r4, #0
 8007c98:	e021      	b.n	8007cde <UART_SetConfig+0x101e>
 8007c9a:	f04f 030c 	mov.w	r3, #12
 8007c9e:	f04f 0400 	mov.w	r4, #0
 8007ca2:	e01c      	b.n	8007cde <UART_SetConfig+0x101e>
 8007ca4:	f04f 030a 	mov.w	r3, #10
 8007ca8:	f04f 0400 	mov.w	r4, #0
 8007cac:	e017      	b.n	8007cde <UART_SetConfig+0x101e>
 8007cae:	f04f 0308 	mov.w	r3, #8
 8007cb2:	f04f 0400 	mov.w	r4, #0
 8007cb6:	e012      	b.n	8007cde <UART_SetConfig+0x101e>
 8007cb8:	f04f 0306 	mov.w	r3, #6
 8007cbc:	f04f 0400 	mov.w	r4, #0
 8007cc0:	e00d      	b.n	8007cde <UART_SetConfig+0x101e>
 8007cc2:	f04f 0304 	mov.w	r3, #4
 8007cc6:	f04f 0400 	mov.w	r4, #0
 8007cca:	e008      	b.n	8007cde <UART_SetConfig+0x101e>
 8007ccc:	f04f 0302 	mov.w	r3, #2
 8007cd0:	f04f 0400 	mov.w	r4, #0
 8007cd4:	e003      	b.n	8007cde <UART_SetConfig+0x101e>
 8007cd6:	f04f 0301 	mov.w	r3, #1
 8007cda:	f04f 0400 	mov.w	r4, #0
 8007cde:	461a      	mov	r2, r3
 8007ce0:	4623      	mov	r3, r4
 8007ce2:	f7f8 faf9 	bl	80002d8 <__aeabi_uldivmod>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	460c      	mov	r4, r1
 8007cea:	4619      	mov	r1, r3
 8007cec:	4622      	mov	r2, r4
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	f04f 0400 	mov.w	r4, #0
 8007cf6:	0214      	lsls	r4, r2, #8
 8007cf8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007cfc:	020b      	lsls	r3, r1, #8
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	6852      	ldr	r2, [r2, #4]
 8007d02:	0852      	lsrs	r2, r2, #1
 8007d04:	4611      	mov	r1, r2
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	eb13 0b01 	adds.w	fp, r3, r1
 8007d0e:	eb44 0c02 	adc.w	ip, r4, r2
 8007d12:	4658      	mov	r0, fp
 8007d14:	4661      	mov	r1, ip
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f04f 0400 	mov.w	r4, #0
 8007d1e:	461a      	mov	r2, r3
 8007d20:	4623      	mov	r3, r4
 8007d22:	f7f8 fad9 	bl	80002d8 <__aeabi_uldivmod>
 8007d26:	4603      	mov	r3, r0
 8007d28:	460c      	mov	r4, r1
 8007d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007d2c:	e19e      	b.n	800806c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d05b      	beq.n	8007dee <UART_SetConfig+0x112e>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d053      	beq.n	8007de6 <UART_SetConfig+0x1126>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d04b      	beq.n	8007dde <UART_SetConfig+0x111e>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d043      	beq.n	8007dd6 <UART_SetConfig+0x1116>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	2b04      	cmp	r3, #4
 8007d54:	d03b      	beq.n	8007dce <UART_SetConfig+0x110e>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	d033      	beq.n	8007dc6 <UART_SetConfig+0x1106>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	2b06      	cmp	r3, #6
 8007d64:	d02b      	beq.n	8007dbe <UART_SetConfig+0x10fe>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	2b07      	cmp	r3, #7
 8007d6c:	d023      	beq.n	8007db6 <UART_SetConfig+0x10f6>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	2b08      	cmp	r3, #8
 8007d74:	d01b      	beq.n	8007dae <UART_SetConfig+0x10ee>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	2b09      	cmp	r3, #9
 8007d7c:	d013      	beq.n	8007da6 <UART_SetConfig+0x10e6>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	2b0a      	cmp	r3, #10
 8007d84:	d00b      	beq.n	8007d9e <UART_SetConfig+0x10de>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	2b0b      	cmp	r3, #11
 8007d8c:	d103      	bne.n	8007d96 <UART_SetConfig+0x10d6>
 8007d8e:	4b2b      	ldr	r3, [pc, #172]	; (8007e3c <UART_SetConfig+0x117c>)
 8007d90:	f04f 0400 	mov.w	r4, #0
 8007d94:	e02e      	b.n	8007df4 <UART_SetConfig+0x1134>
 8007d96:	4b2a      	ldr	r3, [pc, #168]	; (8007e40 <UART_SetConfig+0x1180>)
 8007d98:	f04f 0403 	mov.w	r4, #3
 8007d9c:	e02a      	b.n	8007df4 <UART_SetConfig+0x1134>
 8007d9e:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <UART_SetConfig+0x1184>)
 8007da0:	f04f 0400 	mov.w	r4, #0
 8007da4:	e026      	b.n	8007df4 <UART_SetConfig+0x1134>
 8007da6:	4b28      	ldr	r3, [pc, #160]	; (8007e48 <UART_SetConfig+0x1188>)
 8007da8:	f04f 0400 	mov.w	r4, #0
 8007dac:	e022      	b.n	8007df4 <UART_SetConfig+0x1134>
 8007dae:	4b27      	ldr	r3, [pc, #156]	; (8007e4c <UART_SetConfig+0x118c>)
 8007db0:	f04f 0400 	mov.w	r4, #0
 8007db4:	e01e      	b.n	8007df4 <UART_SetConfig+0x1134>
 8007db6:	4b26      	ldr	r3, [pc, #152]	; (8007e50 <UART_SetConfig+0x1190>)
 8007db8:	f04f 0400 	mov.w	r4, #0
 8007dbc:	e01a      	b.n	8007df4 <UART_SetConfig+0x1134>
 8007dbe:	a41a      	add	r4, pc, #104	; (adr r4, 8007e28 <UART_SetConfig+0x1168>)
 8007dc0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007dc4:	e016      	b.n	8007df4 <UART_SetConfig+0x1134>
 8007dc6:	4b23      	ldr	r3, [pc, #140]	; (8007e54 <UART_SetConfig+0x1194>)
 8007dc8:	f04f 0400 	mov.w	r4, #0
 8007dcc:	e012      	b.n	8007df4 <UART_SetConfig+0x1134>
 8007dce:	4b22      	ldr	r3, [pc, #136]	; (8007e58 <UART_SetConfig+0x1198>)
 8007dd0:	f04f 0400 	mov.w	r4, #0
 8007dd4:	e00e      	b.n	8007df4 <UART_SetConfig+0x1134>
 8007dd6:	a416      	add	r4, pc, #88	; (adr r4, 8007e30 <UART_SetConfig+0x1170>)
 8007dd8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007ddc:	e00a      	b.n	8007df4 <UART_SetConfig+0x1134>
 8007dde:	4b1f      	ldr	r3, [pc, #124]	; (8007e5c <UART_SetConfig+0x119c>)
 8007de0:	f04f 0400 	mov.w	r4, #0
 8007de4:	e006      	b.n	8007df4 <UART_SetConfig+0x1134>
 8007de6:	4b1e      	ldr	r3, [pc, #120]	; (8007e60 <UART_SetConfig+0x11a0>)
 8007de8:	f04f 0401 	mov.w	r4, #1
 8007dec:	e002      	b.n	8007df4 <UART_SetConfig+0x1134>
 8007dee:	4b14      	ldr	r3, [pc, #80]	; (8007e40 <UART_SetConfig+0x1180>)
 8007df0:	f04f 0403 	mov.w	r4, #3
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	6852      	ldr	r2, [r2, #4]
 8007df8:	0852      	lsrs	r2, r2, #1
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	eb13 0b01 	adds.w	fp, r3, r1
 8007e04:	eb44 0c02 	adc.w	ip, r4, r2
 8007e08:	4658      	mov	r0, fp
 8007e0a:	4661      	mov	r1, ip
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f04f 0400 	mov.w	r4, #0
 8007e14:	461a      	mov	r2, r3
 8007e16:	4623      	mov	r3, r4
 8007e18:	f7f8 fa5e 	bl	80002d8 <__aeabi_uldivmod>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	460c      	mov	r4, r1
 8007e20:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8007e22:	e123      	b.n	800806c <UART_SetConfig+0x13ac>
 8007e24:	f3af 8000 	nop.w
 8007e28:	51615500 	.word	0x51615500
 8007e2c:	00000000 	.word	0x00000000
 8007e30:	a2c2aa00 	.word	0xa2c2aa00
 8007e34:	00000000 	.word	0x00000000
 8007e38:	58024400 	.word	0x58024400
 8007e3c:	03d09000 	.word	0x03d09000
 8007e40:	d0900000 	.word	0xd0900000
 8007e44:	07a12000 	.word	0x07a12000
 8007e48:	0f424000 	.word	0x0f424000
 8007e4c:	1e848000 	.word	0x1e848000
 8007e50:	3d090000 	.word	0x3d090000
 8007e54:	61a80000 	.word	0x61a80000
 8007e58:	7a120000 	.word	0x7a120000
 8007e5c:	f4240000 	.word	0xf4240000
 8007e60:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d05b      	beq.n	8007f24 <UART_SetConfig+0x1264>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d053      	beq.n	8007f1c <UART_SetConfig+0x125c>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d04b      	beq.n	8007f14 <UART_SetConfig+0x1254>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d043      	beq.n	8007f0c <UART_SetConfig+0x124c>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d03b      	beq.n	8007f04 <UART_SetConfig+0x1244>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	2b05      	cmp	r3, #5
 8007e92:	d033      	beq.n	8007efc <UART_SetConfig+0x123c>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2b06      	cmp	r3, #6
 8007e9a:	d02b      	beq.n	8007ef4 <UART_SetConfig+0x1234>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	2b07      	cmp	r3, #7
 8007ea2:	d023      	beq.n	8007eec <UART_SetConfig+0x122c>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d01b      	beq.n	8007ee4 <UART_SetConfig+0x1224>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	2b09      	cmp	r3, #9
 8007eb2:	d013      	beq.n	8007edc <UART_SetConfig+0x121c>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	2b0a      	cmp	r3, #10
 8007eba:	d00b      	beq.n	8007ed4 <UART_SetConfig+0x1214>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec0:	2b0b      	cmp	r3, #11
 8007ec2:	d103      	bne.n	8007ecc <UART_SetConfig+0x120c>
 8007ec4:	4bc0      	ldr	r3, [pc, #768]	; (80081c8 <UART_SetConfig+0x1508>)
 8007ec6:	f04f 0400 	mov.w	r4, #0
 8007eca:	e02e      	b.n	8007f2a <UART_SetConfig+0x126a>
 8007ecc:	4bbf      	ldr	r3, [pc, #764]	; (80081cc <UART_SetConfig+0x150c>)
 8007ece:	f04f 0400 	mov.w	r4, #0
 8007ed2:	e02a      	b.n	8007f2a <UART_SetConfig+0x126a>
 8007ed4:	4bbe      	ldr	r3, [pc, #760]	; (80081d0 <UART_SetConfig+0x1510>)
 8007ed6:	f04f 0400 	mov.w	r4, #0
 8007eda:	e026      	b.n	8007f2a <UART_SetConfig+0x126a>
 8007edc:	4bbd      	ldr	r3, [pc, #756]	; (80081d4 <UART_SetConfig+0x1514>)
 8007ede:	f04f 0400 	mov.w	r4, #0
 8007ee2:	e022      	b.n	8007f2a <UART_SetConfig+0x126a>
 8007ee4:	4bbc      	ldr	r3, [pc, #752]	; (80081d8 <UART_SetConfig+0x1518>)
 8007ee6:	f04f 0400 	mov.w	r4, #0
 8007eea:	e01e      	b.n	8007f2a <UART_SetConfig+0x126a>
 8007eec:	4bbb      	ldr	r3, [pc, #748]	; (80081dc <UART_SetConfig+0x151c>)
 8007eee:	f04f 0400 	mov.w	r4, #0
 8007ef2:	e01a      	b.n	8007f2a <UART_SetConfig+0x126a>
 8007ef4:	a4b0      	add	r4, pc, #704	; (adr r4, 80081b8 <UART_SetConfig+0x14f8>)
 8007ef6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007efa:	e016      	b.n	8007f2a <UART_SetConfig+0x126a>
 8007efc:	4bb8      	ldr	r3, [pc, #736]	; (80081e0 <UART_SetConfig+0x1520>)
 8007efe:	f04f 0400 	mov.w	r4, #0
 8007f02:	e012      	b.n	8007f2a <UART_SetConfig+0x126a>
 8007f04:	4bb7      	ldr	r3, [pc, #732]	; (80081e4 <UART_SetConfig+0x1524>)
 8007f06:	f04f 0400 	mov.w	r4, #0
 8007f0a:	e00e      	b.n	8007f2a <UART_SetConfig+0x126a>
 8007f0c:	a4ac      	add	r4, pc, #688	; (adr r4, 80081c0 <UART_SetConfig+0x1500>)
 8007f0e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007f12:	e00a      	b.n	8007f2a <UART_SetConfig+0x126a>
 8007f14:	4bb4      	ldr	r3, [pc, #720]	; (80081e8 <UART_SetConfig+0x1528>)
 8007f16:	f04f 0400 	mov.w	r4, #0
 8007f1a:	e006      	b.n	8007f2a <UART_SetConfig+0x126a>
 8007f1c:	4bb3      	ldr	r3, [pc, #716]	; (80081ec <UART_SetConfig+0x152c>)
 8007f1e:	f04f 0400 	mov.w	r4, #0
 8007f22:	e002      	b.n	8007f2a <UART_SetConfig+0x126a>
 8007f24:	4ba9      	ldr	r3, [pc, #676]	; (80081cc <UART_SetConfig+0x150c>)
 8007f26:	f04f 0400 	mov.w	r4, #0
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6852      	ldr	r2, [r2, #4]
 8007f2e:	0852      	lsrs	r2, r2, #1
 8007f30:	4611      	mov	r1, r2
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	eb13 0b01 	adds.w	fp, r3, r1
 8007f3a:	eb44 0c02 	adc.w	ip, r4, r2
 8007f3e:	4658      	mov	r0, fp
 8007f40:	4661      	mov	r1, ip
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f04f 0400 	mov.w	r4, #0
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	4623      	mov	r3, r4
 8007f4e:	f7f8 f9c3 	bl	80002d8 <__aeabi_uldivmod>
 8007f52:	4603      	mov	r3, r0
 8007f54:	460c      	mov	r4, r1
 8007f56:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8007f58:	e088      	b.n	800806c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d064      	beq.n	800802c <UART_SetConfig+0x136c>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d05b      	beq.n	8008022 <UART_SetConfig+0x1362>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d052      	beq.n	8008018 <UART_SetConfig+0x1358>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d04a      	beq.n	8008010 <UART_SetConfig+0x1350>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d041      	beq.n	8008006 <UART_SetConfig+0x1346>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	d039      	beq.n	8007ffe <UART_SetConfig+0x133e>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	2b06      	cmp	r3, #6
 8007f90:	d031      	beq.n	8007ff6 <UART_SetConfig+0x1336>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	2b07      	cmp	r3, #7
 8007f98:	d028      	beq.n	8007fec <UART_SetConfig+0x132c>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d01f      	beq.n	8007fe2 <UART_SetConfig+0x1322>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	2b09      	cmp	r3, #9
 8007fa8:	d016      	beq.n	8007fd8 <UART_SetConfig+0x1318>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	2b0a      	cmp	r3, #10
 8007fb0:	d00d      	beq.n	8007fce <UART_SetConfig+0x130e>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	2b0b      	cmp	r3, #11
 8007fb8:	d104      	bne.n	8007fc4 <UART_SetConfig+0x1304>
 8007fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fbe:	f04f 0400 	mov.w	r4, #0
 8007fc2:	e037      	b.n	8008034 <UART_SetConfig+0x1374>
 8007fc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007fc8:	f04f 0400 	mov.w	r4, #0
 8007fcc:	e032      	b.n	8008034 <UART_SetConfig+0x1374>
 8007fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fd2:	f04f 0400 	mov.w	r4, #0
 8007fd6:	e02d      	b.n	8008034 <UART_SetConfig+0x1374>
 8007fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007fdc:	f04f 0400 	mov.w	r4, #0
 8007fe0:	e028      	b.n	8008034 <UART_SetConfig+0x1374>
 8007fe2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007fe6:	f04f 0400 	mov.w	r4, #0
 8007fea:	e023      	b.n	8008034 <UART_SetConfig+0x1374>
 8007fec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ff0:	f04f 0400 	mov.w	r4, #0
 8007ff4:	e01e      	b.n	8008034 <UART_SetConfig+0x1374>
 8007ff6:	4b7e      	ldr	r3, [pc, #504]	; (80081f0 <UART_SetConfig+0x1530>)
 8007ff8:	f04f 0400 	mov.w	r4, #0
 8007ffc:	e01a      	b.n	8008034 <UART_SetConfig+0x1374>
 8007ffe:	4b7d      	ldr	r3, [pc, #500]	; (80081f4 <UART_SetConfig+0x1534>)
 8008000:	f04f 0400 	mov.w	r4, #0
 8008004:	e016      	b.n	8008034 <UART_SetConfig+0x1374>
 8008006:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800800a:	f04f 0400 	mov.w	r4, #0
 800800e:	e011      	b.n	8008034 <UART_SetConfig+0x1374>
 8008010:	4b79      	ldr	r3, [pc, #484]	; (80081f8 <UART_SetConfig+0x1538>)
 8008012:	f04f 0400 	mov.w	r4, #0
 8008016:	e00d      	b.n	8008034 <UART_SetConfig+0x1374>
 8008018:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800801c:	f04f 0400 	mov.w	r4, #0
 8008020:	e008      	b.n	8008034 <UART_SetConfig+0x1374>
 8008022:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008026:	f04f 0400 	mov.w	r4, #0
 800802a:	e003      	b.n	8008034 <UART_SetConfig+0x1374>
 800802c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008030:	f04f 0400 	mov.w	r4, #0
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6852      	ldr	r2, [r2, #4]
 8008038:	0852      	lsrs	r2, r2, #1
 800803a:	4611      	mov	r1, r2
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	eb13 0b01 	adds.w	fp, r3, r1
 8008044:	eb44 0c02 	adc.w	ip, r4, r2
 8008048:	4658      	mov	r0, fp
 800804a:	4661      	mov	r1, ip
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f04f 0400 	mov.w	r4, #0
 8008054:	461a      	mov	r2, r3
 8008056:	4623      	mov	r3, r4
 8008058:	f7f8 f93e 	bl	80002d8 <__aeabi_uldivmod>
 800805c:	4603      	mov	r3, r0
 800805e:	460c      	mov	r4, r1
 8008060:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8008062:	e003      	b.n	800806c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 800806a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800806c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008072:	d309      	bcc.n	8008088 <UART_SetConfig+0x13c8>
 8008074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800807a:	d205      	bcs.n	8008088 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008082:	60da      	str	r2, [r3, #12]
 8008084:	f000 bf81 	b.w	8008f8a <UART_SetConfig+0x22ca>
        }
        else
        {
          ret = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800808e:	f000 bf7c 	b.w	8008f8a <UART_SetConfig+0x22ca>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800809a:	f040 83d8 	bne.w	800884e <UART_SetConfig+0x1b8e>
  {
    switch (clocksource)
 800809e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080a2:	2b40      	cmp	r3, #64	; 0x40
 80080a4:	f200 83b1 	bhi.w	800880a <UART_SetConfig+0x1b4a>
 80080a8:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <UART_SetConfig+0x13f0>)
 80080aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ae:	bf00      	nop
 80080b0:	080081fd 	.word	0x080081fd
 80080b4:	080082b3 	.word	0x080082b3
 80080b8:	0800880b 	.word	0x0800880b
 80080bc:	0800880b 	.word	0x0800880b
 80080c0:	08008369 	.word	0x08008369
 80080c4:	0800880b 	.word	0x0800880b
 80080c8:	0800880b 	.word	0x0800880b
 80080cc:	0800880b 	.word	0x0800880b
 80080d0:	08008425 	.word	0x08008425
 80080d4:	0800880b 	.word	0x0800880b
 80080d8:	0800880b 	.word	0x0800880b
 80080dc:	0800880b 	.word	0x0800880b
 80080e0:	0800880b 	.word	0x0800880b
 80080e4:	0800880b 	.word	0x0800880b
 80080e8:	0800880b 	.word	0x0800880b
 80080ec:	0800880b 	.word	0x0800880b
 80080f0:	080084e1 	.word	0x080084e1
 80080f4:	0800880b 	.word	0x0800880b
 80080f8:	0800880b 	.word	0x0800880b
 80080fc:	0800880b 	.word	0x0800880b
 8008100:	0800880b 	.word	0x0800880b
 8008104:	0800880b 	.word	0x0800880b
 8008108:	0800880b 	.word	0x0800880b
 800810c:	0800880b 	.word	0x0800880b
 8008110:	0800880b 	.word	0x0800880b
 8008114:	0800880b 	.word	0x0800880b
 8008118:	0800880b 	.word	0x0800880b
 800811c:	0800880b 	.word	0x0800880b
 8008120:	0800880b 	.word	0x0800880b
 8008124:	0800880b 	.word	0x0800880b
 8008128:	0800880b 	.word	0x0800880b
 800812c:	0800880b 	.word	0x0800880b
 8008130:	08008653 	.word	0x08008653
 8008134:	0800880b 	.word	0x0800880b
 8008138:	0800880b 	.word	0x0800880b
 800813c:	0800880b 	.word	0x0800880b
 8008140:	0800880b 	.word	0x0800880b
 8008144:	0800880b 	.word	0x0800880b
 8008148:	0800880b 	.word	0x0800880b
 800814c:	0800880b 	.word	0x0800880b
 8008150:	0800880b 	.word	0x0800880b
 8008154:	0800880b 	.word	0x0800880b
 8008158:	0800880b 	.word	0x0800880b
 800815c:	0800880b 	.word	0x0800880b
 8008160:	0800880b 	.word	0x0800880b
 8008164:	0800880b 	.word	0x0800880b
 8008168:	0800880b 	.word	0x0800880b
 800816c:	0800880b 	.word	0x0800880b
 8008170:	0800880b 	.word	0x0800880b
 8008174:	0800880b 	.word	0x0800880b
 8008178:	0800880b 	.word	0x0800880b
 800817c:	0800880b 	.word	0x0800880b
 8008180:	0800880b 	.word	0x0800880b
 8008184:	0800880b 	.word	0x0800880b
 8008188:	0800880b 	.word	0x0800880b
 800818c:	0800880b 	.word	0x0800880b
 8008190:	0800880b 	.word	0x0800880b
 8008194:	0800880b 	.word	0x0800880b
 8008198:	0800880b 	.word	0x0800880b
 800819c:	0800880b 	.word	0x0800880b
 80081a0:	0800880b 	.word	0x0800880b
 80081a4:	0800880b 	.word	0x0800880b
 80081a8:	0800880b 	.word	0x0800880b
 80081ac:	0800880b 	.word	0x0800880b
 80081b0:	08008749 	.word	0x08008749
 80081b4:	f3af 8000 	nop.w
 80081b8:	05161500 	.word	0x05161500
 80081bc:	00000000 	.word	0x00000000
 80081c0:	0a2c2a00 	.word	0x0a2c2a00
 80081c4:	00000000 	.word	0x00000000
 80081c8:	003d0900 	.word	0x003d0900
 80081cc:	3d090000 	.word	0x3d090000
 80081d0:	007a1200 	.word	0x007a1200
 80081d4:	00f42400 	.word	0x00f42400
 80081d8:	01e84800 	.word	0x01e84800
 80081dc:	03d09000 	.word	0x03d09000
 80081e0:	061a8000 	.word	0x061a8000
 80081e4:	07a12000 	.word	0x07a12000
 80081e8:	0f424000 	.word	0x0f424000
 80081ec:	1e848000 	.word	0x1e848000
 80081f0:	000aaa00 	.word	0x000aaa00
 80081f4:	000ccc00 	.word	0x000ccc00
 80081f8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081fc:	f7fb fc74 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8008200:	4602      	mov	r2, r0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	2b00      	cmp	r3, #0
 8008208:	d044      	beq.n	8008294 <UART_SetConfig+0x15d4>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	2b01      	cmp	r3, #1
 8008210:	d03e      	beq.n	8008290 <UART_SetConfig+0x15d0>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	2b02      	cmp	r3, #2
 8008218:	d038      	beq.n	800828c <UART_SetConfig+0x15cc>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	2b03      	cmp	r3, #3
 8008220:	d032      	beq.n	8008288 <UART_SetConfig+0x15c8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	2b04      	cmp	r3, #4
 8008228:	d02c      	beq.n	8008284 <UART_SetConfig+0x15c4>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	2b05      	cmp	r3, #5
 8008230:	d026      	beq.n	8008280 <UART_SetConfig+0x15c0>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	2b06      	cmp	r3, #6
 8008238:	d020      	beq.n	800827c <UART_SetConfig+0x15bc>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	2b07      	cmp	r3, #7
 8008240:	d01a      	beq.n	8008278 <UART_SetConfig+0x15b8>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	2b08      	cmp	r3, #8
 8008248:	d014      	beq.n	8008274 <UART_SetConfig+0x15b4>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	2b09      	cmp	r3, #9
 8008250:	d00e      	beq.n	8008270 <UART_SetConfig+0x15b0>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2b0a      	cmp	r3, #10
 8008258:	d008      	beq.n	800826c <UART_SetConfig+0x15ac>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	2b0b      	cmp	r3, #11
 8008260:	d102      	bne.n	8008268 <UART_SetConfig+0x15a8>
 8008262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008266:	e016      	b.n	8008296 <UART_SetConfig+0x15d6>
 8008268:	2301      	movs	r3, #1
 800826a:	e014      	b.n	8008296 <UART_SetConfig+0x15d6>
 800826c:	2380      	movs	r3, #128	; 0x80
 800826e:	e012      	b.n	8008296 <UART_SetConfig+0x15d6>
 8008270:	2340      	movs	r3, #64	; 0x40
 8008272:	e010      	b.n	8008296 <UART_SetConfig+0x15d6>
 8008274:	2320      	movs	r3, #32
 8008276:	e00e      	b.n	8008296 <UART_SetConfig+0x15d6>
 8008278:	2310      	movs	r3, #16
 800827a:	e00c      	b.n	8008296 <UART_SetConfig+0x15d6>
 800827c:	230c      	movs	r3, #12
 800827e:	e00a      	b.n	8008296 <UART_SetConfig+0x15d6>
 8008280:	230a      	movs	r3, #10
 8008282:	e008      	b.n	8008296 <UART_SetConfig+0x15d6>
 8008284:	2308      	movs	r3, #8
 8008286:	e006      	b.n	8008296 <UART_SetConfig+0x15d6>
 8008288:	2306      	movs	r3, #6
 800828a:	e004      	b.n	8008296 <UART_SetConfig+0x15d6>
 800828c:	2304      	movs	r3, #4
 800828e:	e002      	b.n	8008296 <UART_SetConfig+0x15d6>
 8008290:	2302      	movs	r3, #2
 8008292:	e000      	b.n	8008296 <UART_SetConfig+0x15d6>
 8008294:	2301      	movs	r3, #1
 8008296:	fbb2 f3f3 	udiv	r3, r2, r3
 800829a:	005a      	lsls	r2, r3, #1
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	085b      	lsrs	r3, r3, #1
 80082a2:	441a      	add	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082b0:	e2af      	b.n	8008812 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082b2:	f7fb fc2f 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 80082b6:	4602      	mov	r2, r0
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d044      	beq.n	800834a <UART_SetConfig+0x168a>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d03e      	beq.n	8008346 <UART_SetConfig+0x1686>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d038      	beq.n	8008342 <UART_SetConfig+0x1682>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d032      	beq.n	800833e <UART_SetConfig+0x167e>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d02c      	beq.n	800833a <UART_SetConfig+0x167a>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b05      	cmp	r3, #5
 80082e6:	d026      	beq.n	8008336 <UART_SetConfig+0x1676>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	2b06      	cmp	r3, #6
 80082ee:	d020      	beq.n	8008332 <UART_SetConfig+0x1672>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	2b07      	cmp	r3, #7
 80082f6:	d01a      	beq.n	800832e <UART_SetConfig+0x166e>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	d014      	beq.n	800832a <UART_SetConfig+0x166a>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	2b09      	cmp	r3, #9
 8008306:	d00e      	beq.n	8008326 <UART_SetConfig+0x1666>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830c:	2b0a      	cmp	r3, #10
 800830e:	d008      	beq.n	8008322 <UART_SetConfig+0x1662>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	2b0b      	cmp	r3, #11
 8008316:	d102      	bne.n	800831e <UART_SetConfig+0x165e>
 8008318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800831c:	e016      	b.n	800834c <UART_SetConfig+0x168c>
 800831e:	2301      	movs	r3, #1
 8008320:	e014      	b.n	800834c <UART_SetConfig+0x168c>
 8008322:	2380      	movs	r3, #128	; 0x80
 8008324:	e012      	b.n	800834c <UART_SetConfig+0x168c>
 8008326:	2340      	movs	r3, #64	; 0x40
 8008328:	e010      	b.n	800834c <UART_SetConfig+0x168c>
 800832a:	2320      	movs	r3, #32
 800832c:	e00e      	b.n	800834c <UART_SetConfig+0x168c>
 800832e:	2310      	movs	r3, #16
 8008330:	e00c      	b.n	800834c <UART_SetConfig+0x168c>
 8008332:	230c      	movs	r3, #12
 8008334:	e00a      	b.n	800834c <UART_SetConfig+0x168c>
 8008336:	230a      	movs	r3, #10
 8008338:	e008      	b.n	800834c <UART_SetConfig+0x168c>
 800833a:	2308      	movs	r3, #8
 800833c:	e006      	b.n	800834c <UART_SetConfig+0x168c>
 800833e:	2306      	movs	r3, #6
 8008340:	e004      	b.n	800834c <UART_SetConfig+0x168c>
 8008342:	2304      	movs	r3, #4
 8008344:	e002      	b.n	800834c <UART_SetConfig+0x168c>
 8008346:	2302      	movs	r3, #2
 8008348:	e000      	b.n	800834c <UART_SetConfig+0x168c>
 800834a:	2301      	movs	r3, #1
 800834c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008350:	005a      	lsls	r2, r3, #1
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	085b      	lsrs	r3, r3, #1
 8008358:	441a      	add	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008362:	b29b      	uxth	r3, r3
 8008364:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008366:	e254      	b.n	8008812 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008368:	f107 0314 	add.w	r3, r7, #20
 800836c:	4618      	mov	r0, r3
 800836e:	f7fc fcff 	bl	8004d70 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	2b00      	cmp	r3, #0
 800837a:	d044      	beq.n	8008406 <UART_SetConfig+0x1746>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	2b01      	cmp	r3, #1
 8008382:	d03e      	beq.n	8008402 <UART_SetConfig+0x1742>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	2b02      	cmp	r3, #2
 800838a:	d038      	beq.n	80083fe <UART_SetConfig+0x173e>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	2b03      	cmp	r3, #3
 8008392:	d032      	beq.n	80083fa <UART_SetConfig+0x173a>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	2b04      	cmp	r3, #4
 800839a:	d02c      	beq.n	80083f6 <UART_SetConfig+0x1736>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	2b05      	cmp	r3, #5
 80083a2:	d026      	beq.n	80083f2 <UART_SetConfig+0x1732>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	2b06      	cmp	r3, #6
 80083aa:	d020      	beq.n	80083ee <UART_SetConfig+0x172e>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	2b07      	cmp	r3, #7
 80083b2:	d01a      	beq.n	80083ea <UART_SetConfig+0x172a>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d014      	beq.n	80083e6 <UART_SetConfig+0x1726>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	2b09      	cmp	r3, #9
 80083c2:	d00e      	beq.n	80083e2 <UART_SetConfig+0x1722>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c8:	2b0a      	cmp	r3, #10
 80083ca:	d008      	beq.n	80083de <UART_SetConfig+0x171e>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	2b0b      	cmp	r3, #11
 80083d2:	d102      	bne.n	80083da <UART_SetConfig+0x171a>
 80083d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083d8:	e016      	b.n	8008408 <UART_SetConfig+0x1748>
 80083da:	2301      	movs	r3, #1
 80083dc:	e014      	b.n	8008408 <UART_SetConfig+0x1748>
 80083de:	2380      	movs	r3, #128	; 0x80
 80083e0:	e012      	b.n	8008408 <UART_SetConfig+0x1748>
 80083e2:	2340      	movs	r3, #64	; 0x40
 80083e4:	e010      	b.n	8008408 <UART_SetConfig+0x1748>
 80083e6:	2320      	movs	r3, #32
 80083e8:	e00e      	b.n	8008408 <UART_SetConfig+0x1748>
 80083ea:	2310      	movs	r3, #16
 80083ec:	e00c      	b.n	8008408 <UART_SetConfig+0x1748>
 80083ee:	230c      	movs	r3, #12
 80083f0:	e00a      	b.n	8008408 <UART_SetConfig+0x1748>
 80083f2:	230a      	movs	r3, #10
 80083f4:	e008      	b.n	8008408 <UART_SetConfig+0x1748>
 80083f6:	2308      	movs	r3, #8
 80083f8:	e006      	b.n	8008408 <UART_SetConfig+0x1748>
 80083fa:	2306      	movs	r3, #6
 80083fc:	e004      	b.n	8008408 <UART_SetConfig+0x1748>
 80083fe:	2304      	movs	r3, #4
 8008400:	e002      	b.n	8008408 <UART_SetConfig+0x1748>
 8008402:	2302      	movs	r3, #2
 8008404:	e000      	b.n	8008408 <UART_SetConfig+0x1748>
 8008406:	2301      	movs	r3, #1
 8008408:	fbb2 f3f3 	udiv	r3, r2, r3
 800840c:	005a      	lsls	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	085b      	lsrs	r3, r3, #1
 8008414:	441a      	add	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	fbb2 f3f3 	udiv	r3, r2, r3
 800841e:	b29b      	uxth	r3, r3
 8008420:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008422:	e1f6      	b.n	8008812 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	4618      	mov	r0, r3
 800842a:	f7fc fded 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	d044      	beq.n	80084c2 <UART_SetConfig+0x1802>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	2b01      	cmp	r3, #1
 800843e:	d03e      	beq.n	80084be <UART_SetConfig+0x17fe>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	2b02      	cmp	r3, #2
 8008446:	d038      	beq.n	80084ba <UART_SetConfig+0x17fa>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	2b03      	cmp	r3, #3
 800844e:	d032      	beq.n	80084b6 <UART_SetConfig+0x17f6>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008454:	2b04      	cmp	r3, #4
 8008456:	d02c      	beq.n	80084b2 <UART_SetConfig+0x17f2>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	2b05      	cmp	r3, #5
 800845e:	d026      	beq.n	80084ae <UART_SetConfig+0x17ee>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	2b06      	cmp	r3, #6
 8008466:	d020      	beq.n	80084aa <UART_SetConfig+0x17ea>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	2b07      	cmp	r3, #7
 800846e:	d01a      	beq.n	80084a6 <UART_SetConfig+0x17e6>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	2b08      	cmp	r3, #8
 8008476:	d014      	beq.n	80084a2 <UART_SetConfig+0x17e2>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	2b09      	cmp	r3, #9
 800847e:	d00e      	beq.n	800849e <UART_SetConfig+0x17de>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	2b0a      	cmp	r3, #10
 8008486:	d008      	beq.n	800849a <UART_SetConfig+0x17da>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	2b0b      	cmp	r3, #11
 800848e:	d102      	bne.n	8008496 <UART_SetConfig+0x17d6>
 8008490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008494:	e016      	b.n	80084c4 <UART_SetConfig+0x1804>
 8008496:	2301      	movs	r3, #1
 8008498:	e014      	b.n	80084c4 <UART_SetConfig+0x1804>
 800849a:	2380      	movs	r3, #128	; 0x80
 800849c:	e012      	b.n	80084c4 <UART_SetConfig+0x1804>
 800849e:	2340      	movs	r3, #64	; 0x40
 80084a0:	e010      	b.n	80084c4 <UART_SetConfig+0x1804>
 80084a2:	2320      	movs	r3, #32
 80084a4:	e00e      	b.n	80084c4 <UART_SetConfig+0x1804>
 80084a6:	2310      	movs	r3, #16
 80084a8:	e00c      	b.n	80084c4 <UART_SetConfig+0x1804>
 80084aa:	230c      	movs	r3, #12
 80084ac:	e00a      	b.n	80084c4 <UART_SetConfig+0x1804>
 80084ae:	230a      	movs	r3, #10
 80084b0:	e008      	b.n	80084c4 <UART_SetConfig+0x1804>
 80084b2:	2308      	movs	r3, #8
 80084b4:	e006      	b.n	80084c4 <UART_SetConfig+0x1804>
 80084b6:	2306      	movs	r3, #6
 80084b8:	e004      	b.n	80084c4 <UART_SetConfig+0x1804>
 80084ba:	2304      	movs	r3, #4
 80084bc:	e002      	b.n	80084c4 <UART_SetConfig+0x1804>
 80084be:	2302      	movs	r3, #2
 80084c0:	e000      	b.n	80084c4 <UART_SetConfig+0x1804>
 80084c2:	2301      	movs	r3, #1
 80084c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c8:	005a      	lsls	r2, r3, #1
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	085b      	lsrs	r3, r3, #1
 80084d0:	441a      	add	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084da:	b29b      	uxth	r3, r3
 80084dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084de:	e198      	b.n	8008812 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084e0:	4b87      	ldr	r3, [pc, #540]	; (8008700 <UART_SetConfig+0x1a40>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0320 	and.w	r3, r3, #32
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d05e      	beq.n	80085aa <UART_SetConfig+0x18ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ec:	4b84      	ldr	r3, [pc, #528]	; (8008700 <UART_SetConfig+0x1a40>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	08db      	lsrs	r3, r3, #3
 80084f2:	f003 0303 	and.w	r3, r3, #3
 80084f6:	4a83      	ldr	r2, [pc, #524]	; (8008704 <UART_SetConfig+0x1a44>)
 80084f8:	40da      	lsrs	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d044      	beq.n	800858c <UART_SetConfig+0x18cc>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	2b01      	cmp	r3, #1
 8008508:	d03e      	beq.n	8008588 <UART_SetConfig+0x18c8>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	2b02      	cmp	r3, #2
 8008510:	d038      	beq.n	8008584 <UART_SetConfig+0x18c4>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	2b03      	cmp	r3, #3
 8008518:	d032      	beq.n	8008580 <UART_SetConfig+0x18c0>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	2b04      	cmp	r3, #4
 8008520:	d02c      	beq.n	800857c <UART_SetConfig+0x18bc>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	2b05      	cmp	r3, #5
 8008528:	d026      	beq.n	8008578 <UART_SetConfig+0x18b8>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b06      	cmp	r3, #6
 8008530:	d020      	beq.n	8008574 <UART_SetConfig+0x18b4>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	2b07      	cmp	r3, #7
 8008538:	d01a      	beq.n	8008570 <UART_SetConfig+0x18b0>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	2b08      	cmp	r3, #8
 8008540:	d014      	beq.n	800856c <UART_SetConfig+0x18ac>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b09      	cmp	r3, #9
 8008548:	d00e      	beq.n	8008568 <UART_SetConfig+0x18a8>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2b0a      	cmp	r3, #10
 8008550:	d008      	beq.n	8008564 <UART_SetConfig+0x18a4>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	2b0b      	cmp	r3, #11
 8008558:	d102      	bne.n	8008560 <UART_SetConfig+0x18a0>
 800855a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800855e:	e016      	b.n	800858e <UART_SetConfig+0x18ce>
 8008560:	2301      	movs	r3, #1
 8008562:	e014      	b.n	800858e <UART_SetConfig+0x18ce>
 8008564:	2380      	movs	r3, #128	; 0x80
 8008566:	e012      	b.n	800858e <UART_SetConfig+0x18ce>
 8008568:	2340      	movs	r3, #64	; 0x40
 800856a:	e010      	b.n	800858e <UART_SetConfig+0x18ce>
 800856c:	2320      	movs	r3, #32
 800856e:	e00e      	b.n	800858e <UART_SetConfig+0x18ce>
 8008570:	2310      	movs	r3, #16
 8008572:	e00c      	b.n	800858e <UART_SetConfig+0x18ce>
 8008574:	230c      	movs	r3, #12
 8008576:	e00a      	b.n	800858e <UART_SetConfig+0x18ce>
 8008578:	230a      	movs	r3, #10
 800857a:	e008      	b.n	800858e <UART_SetConfig+0x18ce>
 800857c:	2308      	movs	r3, #8
 800857e:	e006      	b.n	800858e <UART_SetConfig+0x18ce>
 8008580:	2306      	movs	r3, #6
 8008582:	e004      	b.n	800858e <UART_SetConfig+0x18ce>
 8008584:	2304      	movs	r3, #4
 8008586:	e002      	b.n	800858e <UART_SetConfig+0x18ce>
 8008588:	2302      	movs	r3, #2
 800858a:	e000      	b.n	800858e <UART_SetConfig+0x18ce>
 800858c:	2301      	movs	r3, #1
 800858e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008592:	005a      	lsls	r2, r3, #1
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	085b      	lsrs	r3, r3, #1
 800859a:	441a      	add	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80085a8:	e133      	b.n	8008812 <UART_SetConfig+0x1b52>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d043      	beq.n	800863a <UART_SetConfig+0x197a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d03d      	beq.n	8008636 <UART_SetConfig+0x1976>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d037      	beq.n	8008632 <UART_SetConfig+0x1972>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d031      	beq.n	800862e <UART_SetConfig+0x196e>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d02b      	beq.n	800862a <UART_SetConfig+0x196a>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	d025      	beq.n	8008626 <UART_SetConfig+0x1966>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	2b06      	cmp	r3, #6
 80085e0:	d01f      	beq.n	8008622 <UART_SetConfig+0x1962>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	2b07      	cmp	r3, #7
 80085e8:	d019      	beq.n	800861e <UART_SetConfig+0x195e>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d013      	beq.n	800861a <UART_SetConfig+0x195a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	2b09      	cmp	r3, #9
 80085f8:	d00d      	beq.n	8008616 <UART_SetConfig+0x1956>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	2b0a      	cmp	r3, #10
 8008600:	d007      	beq.n	8008612 <UART_SetConfig+0x1952>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008606:	2b0b      	cmp	r3, #11
 8008608:	d101      	bne.n	800860e <UART_SetConfig+0x194e>
 800860a:	4b3f      	ldr	r3, [pc, #252]	; (8008708 <UART_SetConfig+0x1a48>)
 800860c:	e016      	b.n	800863c <UART_SetConfig+0x197c>
 800860e:	4b3f      	ldr	r3, [pc, #252]	; (800870c <UART_SetConfig+0x1a4c>)
 8008610:	e014      	b.n	800863c <UART_SetConfig+0x197c>
 8008612:	4b3f      	ldr	r3, [pc, #252]	; (8008710 <UART_SetConfig+0x1a50>)
 8008614:	e012      	b.n	800863c <UART_SetConfig+0x197c>
 8008616:	4b3f      	ldr	r3, [pc, #252]	; (8008714 <UART_SetConfig+0x1a54>)
 8008618:	e010      	b.n	800863c <UART_SetConfig+0x197c>
 800861a:	4b3f      	ldr	r3, [pc, #252]	; (8008718 <UART_SetConfig+0x1a58>)
 800861c:	e00e      	b.n	800863c <UART_SetConfig+0x197c>
 800861e:	4b3f      	ldr	r3, [pc, #252]	; (800871c <UART_SetConfig+0x1a5c>)
 8008620:	e00c      	b.n	800863c <UART_SetConfig+0x197c>
 8008622:	4b3f      	ldr	r3, [pc, #252]	; (8008720 <UART_SetConfig+0x1a60>)
 8008624:	e00a      	b.n	800863c <UART_SetConfig+0x197c>
 8008626:	4b3f      	ldr	r3, [pc, #252]	; (8008724 <UART_SetConfig+0x1a64>)
 8008628:	e008      	b.n	800863c <UART_SetConfig+0x197c>
 800862a:	4b3f      	ldr	r3, [pc, #252]	; (8008728 <UART_SetConfig+0x1a68>)
 800862c:	e006      	b.n	800863c <UART_SetConfig+0x197c>
 800862e:	4b3f      	ldr	r3, [pc, #252]	; (800872c <UART_SetConfig+0x1a6c>)
 8008630:	e004      	b.n	800863c <UART_SetConfig+0x197c>
 8008632:	4b3f      	ldr	r3, [pc, #252]	; (8008730 <UART_SetConfig+0x1a70>)
 8008634:	e002      	b.n	800863c <UART_SetConfig+0x197c>
 8008636:	4b33      	ldr	r3, [pc, #204]	; (8008704 <UART_SetConfig+0x1a44>)
 8008638:	e000      	b.n	800863c <UART_SetConfig+0x197c>
 800863a:	4b34      	ldr	r3, [pc, #208]	; (800870c <UART_SetConfig+0x1a4c>)
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	6852      	ldr	r2, [r2, #4]
 8008640:	0852      	lsrs	r2, r2, #1
 8008642:	441a      	add	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	fbb2 f3f3 	udiv	r3, r2, r3
 800864c:	b29b      	uxth	r3, r3
 800864e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008650:	e0df      	b.n	8008812 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	2b00      	cmp	r3, #0
 8008658:	d045      	beq.n	80086e6 <UART_SetConfig+0x1a26>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865e:	2b01      	cmp	r3, #1
 8008660:	d03f      	beq.n	80086e2 <UART_SetConfig+0x1a22>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	2b02      	cmp	r3, #2
 8008668:	d039      	beq.n	80086de <UART_SetConfig+0x1a1e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	2b03      	cmp	r3, #3
 8008670:	d033      	beq.n	80086da <UART_SetConfig+0x1a1a>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	2b04      	cmp	r3, #4
 8008678:	d02d      	beq.n	80086d6 <UART_SetConfig+0x1a16>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	2b05      	cmp	r3, #5
 8008680:	d027      	beq.n	80086d2 <UART_SetConfig+0x1a12>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	2b06      	cmp	r3, #6
 8008688:	d021      	beq.n	80086ce <UART_SetConfig+0x1a0e>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	2b07      	cmp	r3, #7
 8008690:	d01b      	beq.n	80086ca <UART_SetConfig+0x1a0a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	2b08      	cmp	r3, #8
 8008698:	d015      	beq.n	80086c6 <UART_SetConfig+0x1a06>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	2b09      	cmp	r3, #9
 80086a0:	d00f      	beq.n	80086c2 <UART_SetConfig+0x1a02>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	2b0a      	cmp	r3, #10
 80086a8:	d008      	beq.n	80086bc <UART_SetConfig+0x19fc>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	2b0b      	cmp	r3, #11
 80086b0:	d102      	bne.n	80086b8 <UART_SetConfig+0x19f8>
 80086b2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80086b6:	e017      	b.n	80086e8 <UART_SetConfig+0x1a28>
 80086b8:	4b18      	ldr	r3, [pc, #96]	; (800871c <UART_SetConfig+0x1a5c>)
 80086ba:	e015      	b.n	80086e8 <UART_SetConfig+0x1a28>
 80086bc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80086c0:	e012      	b.n	80086e8 <UART_SetConfig+0x1a28>
 80086c2:	4b1c      	ldr	r3, [pc, #112]	; (8008734 <UART_SetConfig+0x1a74>)
 80086c4:	e010      	b.n	80086e8 <UART_SetConfig+0x1a28>
 80086c6:	4b1c      	ldr	r3, [pc, #112]	; (8008738 <UART_SetConfig+0x1a78>)
 80086c8:	e00e      	b.n	80086e8 <UART_SetConfig+0x1a28>
 80086ca:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <UART_SetConfig+0x1a48>)
 80086cc:	e00c      	b.n	80086e8 <UART_SetConfig+0x1a28>
 80086ce:	4b1b      	ldr	r3, [pc, #108]	; (800873c <UART_SetConfig+0x1a7c>)
 80086d0:	e00a      	b.n	80086e8 <UART_SetConfig+0x1a28>
 80086d2:	4b1b      	ldr	r3, [pc, #108]	; (8008740 <UART_SetConfig+0x1a80>)
 80086d4:	e008      	b.n	80086e8 <UART_SetConfig+0x1a28>
 80086d6:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <UART_SetConfig+0x1a50>)
 80086d8:	e006      	b.n	80086e8 <UART_SetConfig+0x1a28>
 80086da:	4b1a      	ldr	r3, [pc, #104]	; (8008744 <UART_SetConfig+0x1a84>)
 80086dc:	e004      	b.n	80086e8 <UART_SetConfig+0x1a28>
 80086de:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <UART_SetConfig+0x1a54>)
 80086e0:	e002      	b.n	80086e8 <UART_SetConfig+0x1a28>
 80086e2:	4b0d      	ldr	r3, [pc, #52]	; (8008718 <UART_SetConfig+0x1a58>)
 80086e4:	e000      	b.n	80086e8 <UART_SetConfig+0x1a28>
 80086e6:	4b0d      	ldr	r3, [pc, #52]	; (800871c <UART_SetConfig+0x1a5c>)
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	6852      	ldr	r2, [r2, #4]
 80086ec:	0852      	lsrs	r2, r2, #1
 80086ee:	441a      	add	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086fc:	e089      	b.n	8008812 <UART_SetConfig+0x1b52>
 80086fe:	bf00      	nop
 8008700:	58024400 	.word	0x58024400
 8008704:	03d09000 	.word	0x03d09000
 8008708:	0007a120 	.word	0x0007a120
 800870c:	07a12000 	.word	0x07a12000
 8008710:	000f4240 	.word	0x000f4240
 8008714:	001e8480 	.word	0x001e8480
 8008718:	003d0900 	.word	0x003d0900
 800871c:	007a1200 	.word	0x007a1200
 8008720:	00a2c2aa 	.word	0x00a2c2aa
 8008724:	00c35000 	.word	0x00c35000
 8008728:	00f42400 	.word	0x00f42400
 800872c:	01458554 	.word	0x01458554
 8008730:	01e84800 	.word	0x01e84800
 8008734:	0001e848 	.word	0x0001e848
 8008738:	0003d090 	.word	0x0003d090
 800873c:	000a2c2a 	.word	0x000a2c2a
 8008740:	000c3500 	.word	0x000c3500
 8008744:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	d04f      	beq.n	80087f0 <UART_SetConfig+0x1b30>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	2b01      	cmp	r3, #1
 8008756:	d048      	beq.n	80087ea <UART_SetConfig+0x1b2a>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b02      	cmp	r3, #2
 800875e:	d041      	beq.n	80087e4 <UART_SetConfig+0x1b24>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b03      	cmp	r3, #3
 8008766:	d03a      	beq.n	80087de <UART_SetConfig+0x1b1e>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2b04      	cmp	r3, #4
 800876e:	d033      	beq.n	80087d8 <UART_SetConfig+0x1b18>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	2b05      	cmp	r3, #5
 8008776:	d02c      	beq.n	80087d2 <UART_SetConfig+0x1b12>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	2b06      	cmp	r3, #6
 800877e:	d025      	beq.n	80087cc <UART_SetConfig+0x1b0c>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	2b07      	cmp	r3, #7
 8008786:	d01e      	beq.n	80087c6 <UART_SetConfig+0x1b06>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	2b08      	cmp	r3, #8
 800878e:	d017      	beq.n	80087c0 <UART_SetConfig+0x1b00>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	2b09      	cmp	r3, #9
 8008796:	d010      	beq.n	80087ba <UART_SetConfig+0x1afa>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	2b0a      	cmp	r3, #10
 800879e:	d009      	beq.n	80087b4 <UART_SetConfig+0x1af4>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	2b0b      	cmp	r3, #11
 80087a6:	d102      	bne.n	80087ae <UART_SetConfig+0x1aee>
 80087a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ac:	e022      	b.n	80087f4 <UART_SetConfig+0x1b34>
 80087ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087b2:	e01f      	b.n	80087f4 <UART_SetConfig+0x1b34>
 80087b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087b8:	e01c      	b.n	80087f4 <UART_SetConfig+0x1b34>
 80087ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087be:	e019      	b.n	80087f4 <UART_SetConfig+0x1b34>
 80087c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087c4:	e016      	b.n	80087f4 <UART_SetConfig+0x1b34>
 80087c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087ca:	e013      	b.n	80087f4 <UART_SetConfig+0x1b34>
 80087cc:	f241 5354 	movw	r3, #5460	; 0x1554
 80087d0:	e010      	b.n	80087f4 <UART_SetConfig+0x1b34>
 80087d2:	f641 1398 	movw	r3, #6552	; 0x1998
 80087d6:	e00d      	b.n	80087f4 <UART_SetConfig+0x1b34>
 80087d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087dc:	e00a      	b.n	80087f4 <UART_SetConfig+0x1b34>
 80087de:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80087e2:	e007      	b.n	80087f4 <UART_SetConfig+0x1b34>
 80087e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087e8:	e004      	b.n	80087f4 <UART_SetConfig+0x1b34>
 80087ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ee:	e001      	b.n	80087f4 <UART_SetConfig+0x1b34>
 80087f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	6852      	ldr	r2, [r2, #4]
 80087f8:	0852      	lsrs	r2, r2, #1
 80087fa:	441a      	add	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	fbb2 f3f3 	udiv	r3, r2, r3
 8008804:	b29b      	uxth	r3, r3
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008808:	e003      	b.n	8008812 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8008810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	2b0f      	cmp	r3, #15
 8008816:	d916      	bls.n	8008846 <UART_SetConfig+0x1b86>
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800881e:	d212      	bcs.n	8008846 <UART_SetConfig+0x1b86>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008822:	b29b      	uxth	r3, r3
 8008824:	f023 030f 	bic.w	r3, r3, #15
 8008828:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882c:	085b      	lsrs	r3, r3, #1
 800882e:	b29b      	uxth	r3, r3
 8008830:	f003 0307 	and.w	r3, r3, #7
 8008834:	b29a      	uxth	r2, r3
 8008836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008838:	4313      	orrs	r3, r2
 800883a:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008842:	60da      	str	r2, [r3, #12]
 8008844:	e3a1      	b.n	8008f8a <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800884c:	e39d      	b.n	8008f8a <UART_SetConfig+0x22ca>
    }
  }
  else
  {
    switch (clocksource)
 800884e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008852:	2b40      	cmp	r3, #64	; 0x40
 8008854:	f200 8386 	bhi.w	8008f64 <UART_SetConfig+0x22a4>
 8008858:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <UART_SetConfig+0x1ba0>)
 800885a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885e:	bf00      	nop
 8008860:	08008965 	.word	0x08008965
 8008864:	08008a19 	.word	0x08008a19
 8008868:	08008f65 	.word	0x08008f65
 800886c:	08008f65 	.word	0x08008f65
 8008870:	08008acd 	.word	0x08008acd
 8008874:	08008f65 	.word	0x08008f65
 8008878:	08008f65 	.word	0x08008f65
 800887c:	08008f65 	.word	0x08008f65
 8008880:	08008b87 	.word	0x08008b87
 8008884:	08008f65 	.word	0x08008f65
 8008888:	08008f65 	.word	0x08008f65
 800888c:	08008f65 	.word	0x08008f65
 8008890:	08008f65 	.word	0x08008f65
 8008894:	08008f65 	.word	0x08008f65
 8008898:	08008f65 	.word	0x08008f65
 800889c:	08008f65 	.word	0x08008f65
 80088a0:	08008c41 	.word	0x08008c41
 80088a4:	08008f65 	.word	0x08008f65
 80088a8:	08008f65 	.word	0x08008f65
 80088ac:	08008f65 	.word	0x08008f65
 80088b0:	08008f65 	.word	0x08008f65
 80088b4:	08008f65 	.word	0x08008f65
 80088b8:	08008f65 	.word	0x08008f65
 80088bc:	08008f65 	.word	0x08008f65
 80088c0:	08008f65 	.word	0x08008f65
 80088c4:	08008f65 	.word	0x08008f65
 80088c8:	08008f65 	.word	0x08008f65
 80088cc:	08008f65 	.word	0x08008f65
 80088d0:	08008f65 	.word	0x08008f65
 80088d4:	08008f65 	.word	0x08008f65
 80088d8:	08008f65 	.word	0x08008f65
 80088dc:	08008f65 	.word	0x08008f65
 80088e0:	08008db1 	.word	0x08008db1
 80088e4:	08008f65 	.word	0x08008f65
 80088e8:	08008f65 	.word	0x08008f65
 80088ec:	08008f65 	.word	0x08008f65
 80088f0:	08008f65 	.word	0x08008f65
 80088f4:	08008f65 	.word	0x08008f65
 80088f8:	08008f65 	.word	0x08008f65
 80088fc:	08008f65 	.word	0x08008f65
 8008900:	08008f65 	.word	0x08008f65
 8008904:	08008f65 	.word	0x08008f65
 8008908:	08008f65 	.word	0x08008f65
 800890c:	08008f65 	.word	0x08008f65
 8008910:	08008f65 	.word	0x08008f65
 8008914:	08008f65 	.word	0x08008f65
 8008918:	08008f65 	.word	0x08008f65
 800891c:	08008f65 	.word	0x08008f65
 8008920:	08008f65 	.word	0x08008f65
 8008924:	08008f65 	.word	0x08008f65
 8008928:	08008f65 	.word	0x08008f65
 800892c:	08008f65 	.word	0x08008f65
 8008930:	08008f65 	.word	0x08008f65
 8008934:	08008f65 	.word	0x08008f65
 8008938:	08008f65 	.word	0x08008f65
 800893c:	08008f65 	.word	0x08008f65
 8008940:	08008f65 	.word	0x08008f65
 8008944:	08008f65 	.word	0x08008f65
 8008948:	08008f65 	.word	0x08008f65
 800894c:	08008f65 	.word	0x08008f65
 8008950:	08008f65 	.word	0x08008f65
 8008954:	08008f65 	.word	0x08008f65
 8008958:	08008f65 	.word	0x08008f65
 800895c:	08008f65 	.word	0x08008f65
 8008960:	08008ea5 	.word	0x08008ea5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008964:	f7fb f8c0 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8008968:	4602      	mov	r2, r0
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	2b00      	cmp	r3, #0
 8008970:	d044      	beq.n	80089fc <UART_SetConfig+0x1d3c>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	2b01      	cmp	r3, #1
 8008978:	d03e      	beq.n	80089f8 <UART_SetConfig+0x1d38>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	2b02      	cmp	r3, #2
 8008980:	d038      	beq.n	80089f4 <UART_SetConfig+0x1d34>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	2b03      	cmp	r3, #3
 8008988:	d032      	beq.n	80089f0 <UART_SetConfig+0x1d30>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	2b04      	cmp	r3, #4
 8008990:	d02c      	beq.n	80089ec <UART_SetConfig+0x1d2c>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	2b05      	cmp	r3, #5
 8008998:	d026      	beq.n	80089e8 <UART_SetConfig+0x1d28>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	2b06      	cmp	r3, #6
 80089a0:	d020      	beq.n	80089e4 <UART_SetConfig+0x1d24>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	2b07      	cmp	r3, #7
 80089a8:	d01a      	beq.n	80089e0 <UART_SetConfig+0x1d20>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	2b08      	cmp	r3, #8
 80089b0:	d014      	beq.n	80089dc <UART_SetConfig+0x1d1c>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	2b09      	cmp	r3, #9
 80089b8:	d00e      	beq.n	80089d8 <UART_SetConfig+0x1d18>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089be:	2b0a      	cmp	r3, #10
 80089c0:	d008      	beq.n	80089d4 <UART_SetConfig+0x1d14>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	2b0b      	cmp	r3, #11
 80089c8:	d102      	bne.n	80089d0 <UART_SetConfig+0x1d10>
 80089ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089ce:	e016      	b.n	80089fe <UART_SetConfig+0x1d3e>
 80089d0:	2301      	movs	r3, #1
 80089d2:	e014      	b.n	80089fe <UART_SetConfig+0x1d3e>
 80089d4:	2380      	movs	r3, #128	; 0x80
 80089d6:	e012      	b.n	80089fe <UART_SetConfig+0x1d3e>
 80089d8:	2340      	movs	r3, #64	; 0x40
 80089da:	e010      	b.n	80089fe <UART_SetConfig+0x1d3e>
 80089dc:	2320      	movs	r3, #32
 80089de:	e00e      	b.n	80089fe <UART_SetConfig+0x1d3e>
 80089e0:	2310      	movs	r3, #16
 80089e2:	e00c      	b.n	80089fe <UART_SetConfig+0x1d3e>
 80089e4:	230c      	movs	r3, #12
 80089e6:	e00a      	b.n	80089fe <UART_SetConfig+0x1d3e>
 80089e8:	230a      	movs	r3, #10
 80089ea:	e008      	b.n	80089fe <UART_SetConfig+0x1d3e>
 80089ec:	2308      	movs	r3, #8
 80089ee:	e006      	b.n	80089fe <UART_SetConfig+0x1d3e>
 80089f0:	2306      	movs	r3, #6
 80089f2:	e004      	b.n	80089fe <UART_SetConfig+0x1d3e>
 80089f4:	2304      	movs	r3, #4
 80089f6:	e002      	b.n	80089fe <UART_SetConfig+0x1d3e>
 80089f8:	2302      	movs	r3, #2
 80089fa:	e000      	b.n	80089fe <UART_SetConfig+0x1d3e>
 80089fc:	2301      	movs	r3, #1
 80089fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	085b      	lsrs	r3, r3, #1
 8008a08:	441a      	add	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a16:	e2a9      	b.n	8008f6c <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a18:	f7fb f87c 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d044      	beq.n	8008ab0 <UART_SetConfig+0x1df0>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d03e      	beq.n	8008aac <UART_SetConfig+0x1dec>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d038      	beq.n	8008aa8 <UART_SetConfig+0x1de8>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d032      	beq.n	8008aa4 <UART_SetConfig+0x1de4>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d02c      	beq.n	8008aa0 <UART_SetConfig+0x1de0>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	2b05      	cmp	r3, #5
 8008a4c:	d026      	beq.n	8008a9c <UART_SetConfig+0x1ddc>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	2b06      	cmp	r3, #6
 8008a54:	d020      	beq.n	8008a98 <UART_SetConfig+0x1dd8>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5a:	2b07      	cmp	r3, #7
 8008a5c:	d01a      	beq.n	8008a94 <UART_SetConfig+0x1dd4>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	2b08      	cmp	r3, #8
 8008a64:	d014      	beq.n	8008a90 <UART_SetConfig+0x1dd0>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6a:	2b09      	cmp	r3, #9
 8008a6c:	d00e      	beq.n	8008a8c <UART_SetConfig+0x1dcc>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	2b0a      	cmp	r3, #10
 8008a74:	d008      	beq.n	8008a88 <UART_SetConfig+0x1dc8>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7a:	2b0b      	cmp	r3, #11
 8008a7c:	d102      	bne.n	8008a84 <UART_SetConfig+0x1dc4>
 8008a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a82:	e016      	b.n	8008ab2 <UART_SetConfig+0x1df2>
 8008a84:	2301      	movs	r3, #1
 8008a86:	e014      	b.n	8008ab2 <UART_SetConfig+0x1df2>
 8008a88:	2380      	movs	r3, #128	; 0x80
 8008a8a:	e012      	b.n	8008ab2 <UART_SetConfig+0x1df2>
 8008a8c:	2340      	movs	r3, #64	; 0x40
 8008a8e:	e010      	b.n	8008ab2 <UART_SetConfig+0x1df2>
 8008a90:	2320      	movs	r3, #32
 8008a92:	e00e      	b.n	8008ab2 <UART_SetConfig+0x1df2>
 8008a94:	2310      	movs	r3, #16
 8008a96:	e00c      	b.n	8008ab2 <UART_SetConfig+0x1df2>
 8008a98:	230c      	movs	r3, #12
 8008a9a:	e00a      	b.n	8008ab2 <UART_SetConfig+0x1df2>
 8008a9c:	230a      	movs	r3, #10
 8008a9e:	e008      	b.n	8008ab2 <UART_SetConfig+0x1df2>
 8008aa0:	2308      	movs	r3, #8
 8008aa2:	e006      	b.n	8008ab2 <UART_SetConfig+0x1df2>
 8008aa4:	2306      	movs	r3, #6
 8008aa6:	e004      	b.n	8008ab2 <UART_SetConfig+0x1df2>
 8008aa8:	2304      	movs	r3, #4
 8008aaa:	e002      	b.n	8008ab2 <UART_SetConfig+0x1df2>
 8008aac:	2302      	movs	r3, #2
 8008aae:	e000      	b.n	8008ab2 <UART_SetConfig+0x1df2>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	085b      	lsrs	r3, r3, #1
 8008abc:	441a      	add	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aca:	e24f      	b.n	8008f6c <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008acc:	f107 0314 	add.w	r3, r7, #20
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fc f94d 	bl	8004d70 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d044      	beq.n	8008b6a <UART_SetConfig+0x1eaa>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d03e      	beq.n	8008b66 <UART_SetConfig+0x1ea6>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d038      	beq.n	8008b62 <UART_SetConfig+0x1ea2>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d032      	beq.n	8008b5e <UART_SetConfig+0x1e9e>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	d02c      	beq.n	8008b5a <UART_SetConfig+0x1e9a>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	2b05      	cmp	r3, #5
 8008b06:	d026      	beq.n	8008b56 <UART_SetConfig+0x1e96>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	2b06      	cmp	r3, #6
 8008b0e:	d020      	beq.n	8008b52 <UART_SetConfig+0x1e92>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	2b07      	cmp	r3, #7
 8008b16:	d01a      	beq.n	8008b4e <UART_SetConfig+0x1e8e>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1c:	2b08      	cmp	r3, #8
 8008b1e:	d014      	beq.n	8008b4a <UART_SetConfig+0x1e8a>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d00e      	beq.n	8008b46 <UART_SetConfig+0x1e86>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	2b0a      	cmp	r3, #10
 8008b2e:	d008      	beq.n	8008b42 <UART_SetConfig+0x1e82>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	2b0b      	cmp	r3, #11
 8008b36:	d102      	bne.n	8008b3e <UART_SetConfig+0x1e7e>
 8008b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b3c:	e016      	b.n	8008b6c <UART_SetConfig+0x1eac>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e014      	b.n	8008b6c <UART_SetConfig+0x1eac>
 8008b42:	2380      	movs	r3, #128	; 0x80
 8008b44:	e012      	b.n	8008b6c <UART_SetConfig+0x1eac>
 8008b46:	2340      	movs	r3, #64	; 0x40
 8008b48:	e010      	b.n	8008b6c <UART_SetConfig+0x1eac>
 8008b4a:	2320      	movs	r3, #32
 8008b4c:	e00e      	b.n	8008b6c <UART_SetConfig+0x1eac>
 8008b4e:	2310      	movs	r3, #16
 8008b50:	e00c      	b.n	8008b6c <UART_SetConfig+0x1eac>
 8008b52:	230c      	movs	r3, #12
 8008b54:	e00a      	b.n	8008b6c <UART_SetConfig+0x1eac>
 8008b56:	230a      	movs	r3, #10
 8008b58:	e008      	b.n	8008b6c <UART_SetConfig+0x1eac>
 8008b5a:	2308      	movs	r3, #8
 8008b5c:	e006      	b.n	8008b6c <UART_SetConfig+0x1eac>
 8008b5e:	2306      	movs	r3, #6
 8008b60:	e004      	b.n	8008b6c <UART_SetConfig+0x1eac>
 8008b62:	2304      	movs	r3, #4
 8008b64:	e002      	b.n	8008b6c <UART_SetConfig+0x1eac>
 8008b66:	2302      	movs	r3, #2
 8008b68:	e000      	b.n	8008b6c <UART_SetConfig+0x1eac>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	085b      	lsrs	r3, r3, #1
 8008b76:	441a      	add	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b84:	e1f2      	b.n	8008f6c <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b86:	f107 0308 	add.w	r3, r7, #8
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fc fa3c 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d044      	beq.n	8008c24 <UART_SetConfig+0x1f64>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d03e      	beq.n	8008c20 <UART_SetConfig+0x1f60>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d038      	beq.n	8008c1c <UART_SetConfig+0x1f5c>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d032      	beq.n	8008c18 <UART_SetConfig+0x1f58>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d02c      	beq.n	8008c14 <UART_SetConfig+0x1f54>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbe:	2b05      	cmp	r3, #5
 8008bc0:	d026      	beq.n	8008c10 <UART_SetConfig+0x1f50>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	2b06      	cmp	r3, #6
 8008bc8:	d020      	beq.n	8008c0c <UART_SetConfig+0x1f4c>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	2b07      	cmp	r3, #7
 8008bd0:	d01a      	beq.n	8008c08 <UART_SetConfig+0x1f48>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	2b08      	cmp	r3, #8
 8008bd8:	d014      	beq.n	8008c04 <UART_SetConfig+0x1f44>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	2b09      	cmp	r3, #9
 8008be0:	d00e      	beq.n	8008c00 <UART_SetConfig+0x1f40>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	2b0a      	cmp	r3, #10
 8008be8:	d008      	beq.n	8008bfc <UART_SetConfig+0x1f3c>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	2b0b      	cmp	r3, #11
 8008bf0:	d102      	bne.n	8008bf8 <UART_SetConfig+0x1f38>
 8008bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bf6:	e016      	b.n	8008c26 <UART_SetConfig+0x1f66>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e014      	b.n	8008c26 <UART_SetConfig+0x1f66>
 8008bfc:	2380      	movs	r3, #128	; 0x80
 8008bfe:	e012      	b.n	8008c26 <UART_SetConfig+0x1f66>
 8008c00:	2340      	movs	r3, #64	; 0x40
 8008c02:	e010      	b.n	8008c26 <UART_SetConfig+0x1f66>
 8008c04:	2320      	movs	r3, #32
 8008c06:	e00e      	b.n	8008c26 <UART_SetConfig+0x1f66>
 8008c08:	2310      	movs	r3, #16
 8008c0a:	e00c      	b.n	8008c26 <UART_SetConfig+0x1f66>
 8008c0c:	230c      	movs	r3, #12
 8008c0e:	e00a      	b.n	8008c26 <UART_SetConfig+0x1f66>
 8008c10:	230a      	movs	r3, #10
 8008c12:	e008      	b.n	8008c26 <UART_SetConfig+0x1f66>
 8008c14:	2308      	movs	r3, #8
 8008c16:	e006      	b.n	8008c26 <UART_SetConfig+0x1f66>
 8008c18:	2306      	movs	r3, #6
 8008c1a:	e004      	b.n	8008c26 <UART_SetConfig+0x1f66>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	e002      	b.n	8008c26 <UART_SetConfig+0x1f66>
 8008c20:	2302      	movs	r3, #2
 8008c22:	e000      	b.n	8008c26 <UART_SetConfig+0x1f66>
 8008c24:	2301      	movs	r3, #1
 8008c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	085b      	lsrs	r3, r3, #1
 8008c30:	441a      	add	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c3e:	e195      	b.n	8008f6c <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c40:	4b87      	ldr	r3, [pc, #540]	; (8008e60 <UART_SetConfig+0x21a0>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0320 	and.w	r3, r3, #32
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d05d      	beq.n	8008d08 <UART_SetConfig+0x2048>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c4c:	4b84      	ldr	r3, [pc, #528]	; (8008e60 <UART_SetConfig+0x21a0>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	08db      	lsrs	r3, r3, #3
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	4a83      	ldr	r2, [pc, #524]	; (8008e64 <UART_SetConfig+0x21a4>)
 8008c58:	40da      	lsrs	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d044      	beq.n	8008cec <UART_SetConfig+0x202c>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d03e      	beq.n	8008ce8 <UART_SetConfig+0x2028>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d038      	beq.n	8008ce4 <UART_SetConfig+0x2024>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d032      	beq.n	8008ce0 <UART_SetConfig+0x2020>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	d02c      	beq.n	8008cdc <UART_SetConfig+0x201c>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	2b05      	cmp	r3, #5
 8008c88:	d026      	beq.n	8008cd8 <UART_SetConfig+0x2018>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	2b06      	cmp	r3, #6
 8008c90:	d020      	beq.n	8008cd4 <UART_SetConfig+0x2014>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	2b07      	cmp	r3, #7
 8008c98:	d01a      	beq.n	8008cd0 <UART_SetConfig+0x2010>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	2b08      	cmp	r3, #8
 8008ca0:	d014      	beq.n	8008ccc <UART_SetConfig+0x200c>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	2b09      	cmp	r3, #9
 8008ca8:	d00e      	beq.n	8008cc8 <UART_SetConfig+0x2008>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	2b0a      	cmp	r3, #10
 8008cb0:	d008      	beq.n	8008cc4 <UART_SetConfig+0x2004>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	2b0b      	cmp	r3, #11
 8008cb8:	d102      	bne.n	8008cc0 <UART_SetConfig+0x2000>
 8008cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cbe:	e016      	b.n	8008cee <UART_SetConfig+0x202e>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e014      	b.n	8008cee <UART_SetConfig+0x202e>
 8008cc4:	2380      	movs	r3, #128	; 0x80
 8008cc6:	e012      	b.n	8008cee <UART_SetConfig+0x202e>
 8008cc8:	2340      	movs	r3, #64	; 0x40
 8008cca:	e010      	b.n	8008cee <UART_SetConfig+0x202e>
 8008ccc:	2320      	movs	r3, #32
 8008cce:	e00e      	b.n	8008cee <UART_SetConfig+0x202e>
 8008cd0:	2310      	movs	r3, #16
 8008cd2:	e00c      	b.n	8008cee <UART_SetConfig+0x202e>
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	e00a      	b.n	8008cee <UART_SetConfig+0x202e>
 8008cd8:	230a      	movs	r3, #10
 8008cda:	e008      	b.n	8008cee <UART_SetConfig+0x202e>
 8008cdc:	2308      	movs	r3, #8
 8008cde:	e006      	b.n	8008cee <UART_SetConfig+0x202e>
 8008ce0:	2306      	movs	r3, #6
 8008ce2:	e004      	b.n	8008cee <UART_SetConfig+0x202e>
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	e002      	b.n	8008cee <UART_SetConfig+0x202e>
 8008ce8:	2302      	movs	r3, #2
 8008cea:	e000      	b.n	8008cee <UART_SetConfig+0x202e>
 8008cec:	2301      	movs	r3, #1
 8008cee:	fbb2 f2f3 	udiv	r2, r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	085b      	lsrs	r3, r3, #1
 8008cf8:	441a      	add	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008d06:	e131      	b.n	8008f6c <UART_SetConfig+0x22ac>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d043      	beq.n	8008d98 <UART_SetConfig+0x20d8>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d03d      	beq.n	8008d94 <UART_SetConfig+0x20d4>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d037      	beq.n	8008d90 <UART_SetConfig+0x20d0>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d031      	beq.n	8008d8c <UART_SetConfig+0x20cc>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d02b      	beq.n	8008d88 <UART_SetConfig+0x20c8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d34:	2b05      	cmp	r3, #5
 8008d36:	d025      	beq.n	8008d84 <UART_SetConfig+0x20c4>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	2b06      	cmp	r3, #6
 8008d3e:	d01f      	beq.n	8008d80 <UART_SetConfig+0x20c0>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	2b07      	cmp	r3, #7
 8008d46:	d019      	beq.n	8008d7c <UART_SetConfig+0x20bc>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d013      	beq.n	8008d78 <UART_SetConfig+0x20b8>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	2b09      	cmp	r3, #9
 8008d56:	d00d      	beq.n	8008d74 <UART_SetConfig+0x20b4>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	2b0a      	cmp	r3, #10
 8008d5e:	d007      	beq.n	8008d70 <UART_SetConfig+0x20b0>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	2b0b      	cmp	r3, #11
 8008d66:	d101      	bne.n	8008d6c <UART_SetConfig+0x20ac>
 8008d68:	4b3f      	ldr	r3, [pc, #252]	; (8008e68 <UART_SetConfig+0x21a8>)
 8008d6a:	e016      	b.n	8008d9a <UART_SetConfig+0x20da>
 8008d6c:	4b3d      	ldr	r3, [pc, #244]	; (8008e64 <UART_SetConfig+0x21a4>)
 8008d6e:	e014      	b.n	8008d9a <UART_SetConfig+0x20da>
 8008d70:	4b3e      	ldr	r3, [pc, #248]	; (8008e6c <UART_SetConfig+0x21ac>)
 8008d72:	e012      	b.n	8008d9a <UART_SetConfig+0x20da>
 8008d74:	4b3e      	ldr	r3, [pc, #248]	; (8008e70 <UART_SetConfig+0x21b0>)
 8008d76:	e010      	b.n	8008d9a <UART_SetConfig+0x20da>
 8008d78:	4b3e      	ldr	r3, [pc, #248]	; (8008e74 <UART_SetConfig+0x21b4>)
 8008d7a:	e00e      	b.n	8008d9a <UART_SetConfig+0x20da>
 8008d7c:	4b3e      	ldr	r3, [pc, #248]	; (8008e78 <UART_SetConfig+0x21b8>)
 8008d7e:	e00c      	b.n	8008d9a <UART_SetConfig+0x20da>
 8008d80:	4b3e      	ldr	r3, [pc, #248]	; (8008e7c <UART_SetConfig+0x21bc>)
 8008d82:	e00a      	b.n	8008d9a <UART_SetConfig+0x20da>
 8008d84:	4b3e      	ldr	r3, [pc, #248]	; (8008e80 <UART_SetConfig+0x21c0>)
 8008d86:	e008      	b.n	8008d9a <UART_SetConfig+0x20da>
 8008d88:	4b3e      	ldr	r3, [pc, #248]	; (8008e84 <UART_SetConfig+0x21c4>)
 8008d8a:	e006      	b.n	8008d9a <UART_SetConfig+0x20da>
 8008d8c:	4b3e      	ldr	r3, [pc, #248]	; (8008e88 <UART_SetConfig+0x21c8>)
 8008d8e:	e004      	b.n	8008d9a <UART_SetConfig+0x20da>
 8008d90:	4b3e      	ldr	r3, [pc, #248]	; (8008e8c <UART_SetConfig+0x21cc>)
 8008d92:	e002      	b.n	8008d9a <UART_SetConfig+0x20da>
 8008d94:	4b3e      	ldr	r3, [pc, #248]	; (8008e90 <UART_SetConfig+0x21d0>)
 8008d96:	e000      	b.n	8008d9a <UART_SetConfig+0x20da>
 8008d98:	4b32      	ldr	r3, [pc, #200]	; (8008e64 <UART_SetConfig+0x21a4>)
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6852      	ldr	r2, [r2, #4]
 8008d9e:	0852      	lsrs	r2, r2, #1
 8008da0:	441a      	add	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dae:	e0dd      	b.n	8008f6c <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d046      	beq.n	8008e46 <UART_SetConfig+0x2186>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d040      	beq.n	8008e42 <UART_SetConfig+0x2182>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d03a      	beq.n	8008e3e <UART_SetConfig+0x217e>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	2b03      	cmp	r3, #3
 8008dce:	d034      	beq.n	8008e3a <UART_SetConfig+0x217a>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d02e      	beq.n	8008e36 <UART_SetConfig+0x2176>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	2b05      	cmp	r3, #5
 8008dde:	d028      	beq.n	8008e32 <UART_SetConfig+0x2172>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	2b06      	cmp	r3, #6
 8008de6:	d022      	beq.n	8008e2e <UART_SetConfig+0x216e>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	2b07      	cmp	r3, #7
 8008dee:	d01c      	beq.n	8008e2a <UART_SetConfig+0x216a>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	2b08      	cmp	r3, #8
 8008df6:	d016      	beq.n	8008e26 <UART_SetConfig+0x2166>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d00f      	beq.n	8008e20 <UART_SetConfig+0x2160>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	2b0a      	cmp	r3, #10
 8008e06:	d008      	beq.n	8008e1a <UART_SetConfig+0x215a>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	2b0b      	cmp	r3, #11
 8008e0e:	d102      	bne.n	8008e16 <UART_SetConfig+0x2156>
 8008e10:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008e14:	e018      	b.n	8008e48 <UART_SetConfig+0x2188>
 8008e16:	4b18      	ldr	r3, [pc, #96]	; (8008e78 <UART_SetConfig+0x21b8>)
 8008e18:	e016      	b.n	8008e48 <UART_SetConfig+0x2188>
 8008e1a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008e1e:	e013      	b.n	8008e48 <UART_SetConfig+0x2188>
 8008e20:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008e24:	e010      	b.n	8008e48 <UART_SetConfig+0x2188>
 8008e26:	4b1b      	ldr	r3, [pc, #108]	; (8008e94 <UART_SetConfig+0x21d4>)
 8008e28:	e00e      	b.n	8008e48 <UART_SetConfig+0x2188>
 8008e2a:	4b0f      	ldr	r3, [pc, #60]	; (8008e68 <UART_SetConfig+0x21a8>)
 8008e2c:	e00c      	b.n	8008e48 <UART_SetConfig+0x2188>
 8008e2e:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <UART_SetConfig+0x21d8>)
 8008e30:	e00a      	b.n	8008e48 <UART_SetConfig+0x2188>
 8008e32:	4b1a      	ldr	r3, [pc, #104]	; (8008e9c <UART_SetConfig+0x21dc>)
 8008e34:	e008      	b.n	8008e48 <UART_SetConfig+0x2188>
 8008e36:	4b0d      	ldr	r3, [pc, #52]	; (8008e6c <UART_SetConfig+0x21ac>)
 8008e38:	e006      	b.n	8008e48 <UART_SetConfig+0x2188>
 8008e3a:	4b19      	ldr	r3, [pc, #100]	; (8008ea0 <UART_SetConfig+0x21e0>)
 8008e3c:	e004      	b.n	8008e48 <UART_SetConfig+0x2188>
 8008e3e:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <UART_SetConfig+0x21b0>)
 8008e40:	e002      	b.n	8008e48 <UART_SetConfig+0x2188>
 8008e42:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <UART_SetConfig+0x21b4>)
 8008e44:	e000      	b.n	8008e48 <UART_SetConfig+0x2188>
 8008e46:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <UART_SetConfig+0x21b8>)
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	6852      	ldr	r2, [r2, #4]
 8008e4c:	0852      	lsrs	r2, r2, #1
 8008e4e:	441a      	add	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e5c:	e086      	b.n	8008f6c <UART_SetConfig+0x22ac>
 8008e5e:	bf00      	nop
 8008e60:	58024400 	.word	0x58024400
 8008e64:	03d09000 	.word	0x03d09000
 8008e68:	0003d090 	.word	0x0003d090
 8008e6c:	0007a120 	.word	0x0007a120
 8008e70:	000f4240 	.word	0x000f4240
 8008e74:	001e8480 	.word	0x001e8480
 8008e78:	003d0900 	.word	0x003d0900
 8008e7c:	00516155 	.word	0x00516155
 8008e80:	0061a800 	.word	0x0061a800
 8008e84:	007a1200 	.word	0x007a1200
 8008e88:	00a2c2aa 	.word	0x00a2c2aa
 8008e8c:	00f42400 	.word	0x00f42400
 8008e90:	01e84800 	.word	0x01e84800
 8008e94:	0001e848 	.word	0x0001e848
 8008e98:	00051615 	.word	0x00051615
 8008e9c:	00061a80 	.word	0x00061a80
 8008ea0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d04e      	beq.n	8008f4a <UART_SetConfig+0x228a>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d047      	beq.n	8008f44 <UART_SetConfig+0x2284>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d040      	beq.n	8008f3e <UART_SetConfig+0x227e>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d039      	beq.n	8008f38 <UART_SetConfig+0x2278>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d032      	beq.n	8008f32 <UART_SetConfig+0x2272>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed0:	2b05      	cmp	r3, #5
 8008ed2:	d02b      	beq.n	8008f2c <UART_SetConfig+0x226c>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	2b06      	cmp	r3, #6
 8008eda:	d024      	beq.n	8008f26 <UART_SetConfig+0x2266>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	2b07      	cmp	r3, #7
 8008ee2:	d01d      	beq.n	8008f20 <UART_SetConfig+0x2260>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	2b08      	cmp	r3, #8
 8008eea:	d016      	beq.n	8008f1a <UART_SetConfig+0x225a>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	2b09      	cmp	r3, #9
 8008ef2:	d00f      	beq.n	8008f14 <UART_SetConfig+0x2254>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	2b0a      	cmp	r3, #10
 8008efa:	d008      	beq.n	8008f0e <UART_SetConfig+0x224e>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f00:	2b0b      	cmp	r3, #11
 8008f02:	d101      	bne.n	8008f08 <UART_SetConfig+0x2248>
 8008f04:	2380      	movs	r3, #128	; 0x80
 8008f06:	e022      	b.n	8008f4e <UART_SetConfig+0x228e>
 8008f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f0c:	e01f      	b.n	8008f4e <UART_SetConfig+0x228e>
 8008f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f12:	e01c      	b.n	8008f4e <UART_SetConfig+0x228e>
 8008f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f18:	e019      	b.n	8008f4e <UART_SetConfig+0x228e>
 8008f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f1e:	e016      	b.n	8008f4e <UART_SetConfig+0x228e>
 8008f20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f24:	e013      	b.n	8008f4e <UART_SetConfig+0x228e>
 8008f26:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008f2a:	e010      	b.n	8008f4e <UART_SetConfig+0x228e>
 8008f2c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008f30:	e00d      	b.n	8008f4e <UART_SetConfig+0x228e>
 8008f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f36:	e00a      	b.n	8008f4e <UART_SetConfig+0x228e>
 8008f38:	f241 5355 	movw	r3, #5461	; 0x1555
 8008f3c:	e007      	b.n	8008f4e <UART_SetConfig+0x228e>
 8008f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f42:	e004      	b.n	8008f4e <UART_SetConfig+0x228e>
 8008f44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f48:	e001      	b.n	8008f4e <UART_SetConfig+0x228e>
 8008f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	6852      	ldr	r2, [r2, #4]
 8008f52:	0852      	lsrs	r2, r2, #1
 8008f54:	441a      	add	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f62:	e003      	b.n	8008f6c <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8008f6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6e:	2b0f      	cmp	r3, #15
 8008f70:	d908      	bls.n	8008f84 <UART_SetConfig+0x22c4>
 8008f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f78:	d204      	bcs.n	8008f84 <UART_SetConfig+0x22c4>
    {
      huart->Instance->BRR = usartdiv;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f80:	60da      	str	r2, [r3, #12]
 8008f82:	e002      	b.n	8008f8a <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008fa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3738      	adds	r7, #56	; 0x38
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00a      	beq.n	8008fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00a      	beq.n	8009000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009048:	f003 0310 	and.w	r3, r3, #16
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00a      	beq.n	8009066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906a:	f003 0320 	and.w	r3, r3, #32
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009090:	2b00      	cmp	r3, #0
 8009092:	d01a      	beq.n	80090ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090b2:	d10a      	bne.n	80090ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	605a      	str	r2, [r3, #4]
  }
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009108:	f7f7 fae8 	bl	80006dc <HAL_GetTick>
 800910c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0308 	and.w	r3, r3, #8
 8009118:	2b08      	cmp	r3, #8
 800911a:	d10e      	bne.n	800913a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800911c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f82c 	bl	8009188 <UART_WaitOnFlagUntilTimeout>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e022      	b.n	8009180 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b04      	cmp	r3, #4
 8009146:	d10e      	bne.n	8009166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f816 	bl	8009188 <UART_WaitOnFlagUntilTimeout>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e00c      	b.n	8009180 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2220      	movs	r2, #32
 800916a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2220      	movs	r2, #32
 8009172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	4613      	mov	r3, r2
 8009196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009198:	e02c      	b.n	80091f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a0:	d028      	beq.n	80091f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a2:	f7f7 fa9b 	bl	80006dc <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	69ba      	ldr	r2, [r7, #24]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d302      	bcc.n	80091b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d11d      	bne.n	80091f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689a      	ldr	r2, [r3, #8]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f022 0201 	bic.w	r2, r2, #1
 80091d6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2220      	movs	r2, #32
 80091dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e00f      	b.n	8009214 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69da      	ldr	r2, [r3, #28]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	4013      	ands	r3, r2
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	429a      	cmp	r2, r3
 8009202:	bf0c      	ite	eq
 8009204:	2301      	moveq	r3, #1
 8009206:	2300      	movne	r3, #0
 8009208:	b2db      	uxtb	r3, r3
 800920a:	461a      	mov	r2, r3
 800920c:	79fb      	ldrb	r3, [r7, #7]
 800920e:	429a      	cmp	r2, r3
 8009210:	d0c3      	beq.n	800919a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800922a:	2b01      	cmp	r3, #1
 800922c:	d101      	bne.n	8009232 <HAL_UARTEx_DisableFifoMode+0x16>
 800922e:	2302      	movs	r3, #2
 8009230:	e027      	b.n	8009282 <HAL_UARTEx_DisableFifoMode+0x66>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2224      	movs	r2, #36	; 0x24
 800923e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 0201 	bic.w	r2, r2, #1
 8009258:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009260:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2220      	movs	r2, #32
 8009274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d101      	bne.n	80092a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092a2:	2302      	movs	r3, #2
 80092a4:	e02d      	b.n	8009302 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2224      	movs	r2, #36	; 0x24
 80092b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0201 	bic.w	r2, r2, #1
 80092cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f850 	bl	8009388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800931a:	2b01      	cmp	r3, #1
 800931c:	d101      	bne.n	8009322 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800931e:	2302      	movs	r3, #2
 8009320:	e02d      	b.n	800937e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2224      	movs	r2, #36	; 0x24
 800932e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f022 0201 	bic.w	r2, r2, #1
 8009348:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f812 	bl	8009388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2220      	movs	r2, #32
 8009370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009388:	b480      	push	{r7}
 800938a:	b089      	sub	sp, #36	; 0x24
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009390:	4a2f      	ldr	r2, [pc, #188]	; (8009450 <UARTEx_SetNbDataToProcess+0xc8>)
 8009392:	f107 0314 	add.w	r3, r7, #20
 8009396:	e892 0003 	ldmia.w	r2, {r0, r1}
 800939a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800939e:	4a2d      	ldr	r2, [pc, #180]	; (8009454 <UARTEx_SetNbDataToProcess+0xcc>)
 80093a0:	f107 030c 	add.w	r3, r7, #12
 80093a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093a8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d108      	bne.n	80093c6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093c4:	e03d      	b.n	8009442 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093c6:	2308      	movs	r3, #8
 80093c8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093ca:	2308      	movs	r3, #8
 80093cc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	0e5b      	lsrs	r3, r3, #25
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	f003 0307 	and.w	r3, r3, #7
 80093dc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	0f5b      	lsrs	r3, r3, #29
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	f003 0307 	and.w	r3, r3, #7
 80093ec:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80093ee:	7fbb      	ldrb	r3, [r7, #30]
 80093f0:	7f3a      	ldrb	r2, [r7, #28]
 80093f2:	f107 0120 	add.w	r1, r7, #32
 80093f6:	440a      	add	r2, r1
 80093f8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80093fc:	fb02 f303 	mul.w	r3, r2, r3
 8009400:	7f3a      	ldrb	r2, [r7, #28]
 8009402:	f107 0120 	add.w	r1, r7, #32
 8009406:	440a      	add	r2, r1
 8009408:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800940c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009410:	b29a      	uxth	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009418:	7ffb      	ldrb	r3, [r7, #31]
 800941a:	7f7a      	ldrb	r2, [r7, #29]
 800941c:	f107 0120 	add.w	r1, r7, #32
 8009420:	440a      	add	r2, r1
 8009422:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009426:	fb02 f303 	mul.w	r3, r2, r3
 800942a:	7f7a      	ldrb	r2, [r7, #29]
 800942c:	f107 0120 	add.w	r1, r7, #32
 8009430:	440a      	add	r2, r1
 8009432:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009436:	fb93 f3f2 	sdiv	r3, r3, r2
 800943a:	b29a      	uxth	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009442:	bf00      	nop
 8009444:	3724      	adds	r7, #36	; 0x24
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	0800b630 	.word	0x0800b630
 8009454:	0800b638 	.word	0x0800b638

08009458 <_ZN3PIDC1Ev>:
 * OutPut()でFloatを取り出せば速度型のPID制御が簡単にできるはず。
 */

#include "PID.hpp"

PID::PID(){
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	4a04      	ldr	r2, [pc, #16]	; (8009474 <_ZN3PIDC1Ev+0x1c>)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	601a      	str	r2, [r3, #0]

}
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr
 8009474:	0800b648 	.word	0x0800b648

08009478 <_ZN3PIDD1Ev>:
	// TODO Auto-generated constructor stub

	mError.fill(0);
}

PID::~PID() {
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	4a04      	ldr	r2, [pc, #16]	; (8009494 <_ZN3PIDD1Ev+0x1c>)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	0800b648 	.word	0x0800b648

08009498 <_ZN3PIDD0Ev>:
PID::~PID() {
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
}
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff ffe9 	bl	8009478 <_ZN3PIDD1Ev>
 80094a6:	2128      	movs	r1, #40	; 0x28
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f002 f82c 	bl	800b506 <_ZdlPvj>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <_ZN3PID8SetParamEfff>:

void PID::SetParam(float pGain_p, float pGain_i, float pGain_d){
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80094c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80094c8:	ed87 1a00 	vstr	s2, [r7]
	mGain_p = pGain_p;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	615a      	str	r2, [r3, #20]
	mGain_i = pGain_i;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	619a      	str	r2, [r3, #24]
	mGain_d = pGain_d;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	61da      	str	r2, [r3, #28]
}
 80094de:	bf00      	nop
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <_ZN7ArgCtrlC1Ev>:
 *      Author: watashi
 */

#include "ArgCtrl.hpp"

ArgCtrl::ArgCtrl() {
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	4a0c      	ldr	r2, [pc, #48]	; (8009528 <_ZN7ArgCtrlC1Ev+0x3c>)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mArg = 0;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f04f 0200 	mov.w	r2, #0
 8009500:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f04f 0200 	mov.w	r2, #0
 8009508:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f04f 0200 	mov.w	r2, #0
 8009510:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f04f 0200 	mov.w	r2, #0
 8009518:	611a      	str	r2, [r3, #16]
}
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4618      	mov	r0, r3
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	0800b658 	.word	0x0800b658

0800952c <_ZN7ArgCtrlD1Ev>:

ArgCtrl::~ArgCtrl() {
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	4a0c      	ldr	r2, [pc, #48]	; (8009568 <_ZN7ArgCtrlD1Ev+0x3c>)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	mArg = 0;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f04f 0200 	mov.w	r2, #0
 8009540:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f04f 0200 	mov.w	r2, #0
 8009548:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f04f 0200 	mov.w	r2, #0
 8009550:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f04f 0200 	mov.w	r2, #0
 8009558:	611a      	str	r2, [r3, #16]
}
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	0800b658 	.word	0x0800b658

0800956c <_ZN7ArgCtrlD0Ev>:
ArgCtrl::~ArgCtrl() {
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
}
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff ffd9 	bl	800952c <_ZN7ArgCtrlD1Ev>
 800957a:	211c      	movs	r1, #28
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f001 ffc2 	bl	800b506 <_ZdlPvj>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4618      	mov	r0, r3
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <_ZN7ArgCtrl4InitEv>:

void ArgCtrl::Init(void) {
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
	mArg = 0;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f04f 0200 	mov.w	r2, #0
 800959a:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f04f 0200 	mov.w	r2, #0
 80095a2:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f04f 0200 	mov.w	r2, #0
 80095aa:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f04f 0200 	mov.w	r2, #0
 80095b2:	611a      	str	r2, [r3, #16]
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <_ZN9DebugCtrlC1Ev>:
 *      Author: watashi
 */

#include "DebugCtrl.hpp"

DebugCtrl::DebugCtrl() {
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	4a0b      	ldr	r2, [pc, #44]	; (80095f8 <_ZN9DebugCtrlC1Ev+0x38>)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3304      	adds	r3, #4
 80095d2:	4618      	mov	r0, r3
 80095d4:	f000 f918 	bl	8009808 <_ZN9DebugInfoC1Ev>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	3314      	adds	r3, #20
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 f991 	bl	8009904 <_ZN13DebugInfoTinyC1Ev>
	// TODO Auto-generated constructor stub
	mDebugStatus = 0;
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	f642 5320 	movw	r3, #11552	; 0x2d20
 80095e8:	4413      	add	r3, r2
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
}
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4618      	mov	r0, r3
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	0800b668 	.word	0x0800b668

080095fc <_ZN9DebugCtrlD1Ev>:

DebugCtrl::~DebugCtrl() {
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	4a08      	ldr	r2, [pc, #32]	; (8009628 <_ZN9DebugCtrlD1Ev+0x2c>)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3314      	adds	r3, #20
 800960e:	4618      	mov	r0, r3
 8009610:	f000 f98c 	bl	800992c <_ZN13DebugInfoTinyD1Ev>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	3304      	adds	r3, #4
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f909 	bl	8009830 <_ZN9DebugInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	0800b668 	.word	0x0800b668

0800962c <_ZN9DebugCtrlD0Ev>:
DebugCtrl::~DebugCtrl() {
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
}
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff ffe1 	bl	80095fc <_ZN9DebugCtrlD1Ev>
 800963a:	f642 5124 	movw	r1, #11556	; 0x2d24
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f001 ff61 	bl	800b506 <_ZdlPvj>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4618      	mov	r0, r3
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800964e:	b5b0      	push	{r4, r5, r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681c      	ldr	r4, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4618      	mov	r0, r3
 8009662:	f000 f835 	bl	80096d0 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 8009666:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009668:	461a      	mov	r2, r3
 800966a:	4629      	mov	r1, r5
 800966c:	4620      	mov	r0, r4
 800966e:	f000 f83a 	bl	80096e6 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 f811 	bl	800969c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bdb0      	pop	{r4, r5, r7, pc}

08009684 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f838 	bl	8009702 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4618      	mov	r0, r3
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6819      	ldr	r1, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80096ac:	461a      	mov	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	119b      	asrs	r3, r3, #6
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80096b6:	461a      	mov	r2, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f82e 	bl	800971a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff ffdf 	bl	8009684 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4618      	mov	r0, r3
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80096f2:	68b9      	ldr	r1, [r7, #8]
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f000 f823 	bl	8009740 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>
    }
 80096fa:	bf00      	nop
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f825 	bl	800975a <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4618      	mov	r0, r3
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	60f8      	str	r0, [r7, #12]
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
	if (__p)
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d005      	beq.n	8009738 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	68b9      	ldr	r1, [r7, #8]
 8009732:	4618      	mov	r0, r3
 8009734:	f000 f81c 	bl	8009770 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>
      }
 8009738:	bf00      	nop
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f829 	bl	80097a4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>
    }
 8009752:	bf00      	nop
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4618      	mov	r0, r3
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	68b9      	ldr	r1, [r7, #8]
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f000 f827 	bl	80097d4 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>
 8009786:	bf00      	nop
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800978e:	b480      	push	{r7}
 8009790:	b083      	sub	sp, #12
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d00a      	beq.n	80097cc <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7ff ffe9 	bl	800978e <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 80097bc:	4603      	mov	r3, r0
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 f815 	bl	80097ee <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>
	  for (; __first != __last; ++__first)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3340      	adds	r3, #64	; 0x40
 80097c8:	607b      	str	r3, [r7, #4]
 80097ca:	e7f0      	b.n	80097ae <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0xa>
	}
 80097cc:	bf00      	nop
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80097e0:	68b8      	ldr	r0, [r7, #8]
 80097e2:	f001 fe92 	bl	800b50a <_ZdlPv>
      }
 80097e6:	bf00      	nop
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>:
    _Destroy(_Tp* __pointer)
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	4798      	blx	r3
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <_ZN9DebugInfoC1Ev>:

DebugInfo::SendMotorData::~SendMotorData(){
	//destructor
}

DebugInfo::DebugInfo() {
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	4a06      	ldr	r2, [pc, #24]	; (800982c <_ZN9DebugInfoC1Ev+0x24>)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	3304      	adds	r3, #4
 800981a:	4618      	mov	r0, r3
 800981c:	f000 f82c 	bl	8009878 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
	// TODO Auto-generated constructor stub
}
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	0800b678 	.word	0x0800b678

08009830 <_ZN9DebugInfoD1Ev>:

DebugInfo::~DebugInfo() {
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	4a06      	ldr	r2, [pc, #24]	; (8009854 <_ZN9DebugInfoD1Ev+0x24>)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	3304      	adds	r3, #4
 8009842:	4618      	mov	r0, r3
 8009844:	f7ff ff03 	bl	800964e <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
	// TODO Auto-generated destructor stub
}
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	0800b678 	.word	0x0800b678

08009858 <_ZN9DebugInfoD0Ev>:
DebugInfo::~DebugInfo() {
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
}
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff ffe5 	bl	8009830 <_ZN9DebugInfoD1Ev>
 8009866:	2110      	movs	r1, #16
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f001 fe4c 	bl	800b506 <_ZdlPvj>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      vector()
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f805 	bl	8009892 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      _Vector_base()
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4618      	mov	r0, r3
 800989e:	f000 f805 	bl	80098ac <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f80e 	bl	80098d6 <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	605a      	str	r2, [r3, #4]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	609a      	str	r2, [r3, #8]
	{ }
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4618      	mov	r0, r3
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>:
      allocator() throw() { }
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f805 	bl	80098ee <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80098ee:	b480      	push	{r7}
 80098f0:	b083      	sub	sp, #12
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4618      	mov	r0, r3
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <_ZN13DebugInfoTinyC1Ev>:
 * 読み出しがVector型であるのは(float型でないのは)データの個数の変化に対応するため。
 *(配列のfor使って調理してください(にっこり))
 */
#include "DebugInfoTiny.hpp"

DebugInfoTiny::DebugInfoTiny() {
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	4a06      	ldr	r2, [pc, #24]	; (8009928 <_ZN13DebugInfoTinyC1Ev+0x24>)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mCNT = 0;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	605a      	str	r2, [r3, #4]
}
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	0800b688 	.word	0x0800b688

0800992c <_ZN13DebugInfoTinyD1Ev>:

DebugInfoTiny::~DebugInfoTiny() {
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	4a04      	ldr	r2, [pc, #16]	; (8009948 <_ZN13DebugInfoTinyD1Ev+0x1c>)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	0800b688 	.word	0x0800b688

0800994c <_ZN13DebugInfoTinyD0Ev>:
DebugInfoTiny::~DebugInfoTiny() {
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
}
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff ffe9 	bl	800992c <_ZN13DebugInfoTinyD1Ev>
 800995a:	f642 5108 	movw	r1, #11528	; 0x2d08
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 fdd1 	bl	800b506 <_ZdlPvj>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4618      	mov	r0, r3
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <_ZN3PWMC1Ev>:

#include "STM32SystemPack.h"
#include "paramsetting.h"


class PWM {
 800996e:	b480      	push	{r7}
 8009970:	b083      	sub	sp, #12
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	609a      	str	r2, [r3, #8]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4618      	mov	r0, r3
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
	...

0800998c <_ZN9MotorCtrlC1Ev>:

#include "MotorCtrl.hpp"

extern TIM_HandleTypeDef htim1;

MotorCtrl::MotorCtrl() {
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	4a24      	ldr	r2, [pc, #144]	; (8009a28 <_ZN9MotorCtrlC1Ev+0x9c>)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	3354      	adds	r3, #84	; 0x54
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fbbc 	bl	800a11c <_ZN8ObserverC1Ev>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff ffdf 	bl	800996e <_ZN3PWMC1Ev>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7ff ffd9 	bl	800996e <_ZN3PWMC1Ev>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff ffd3 	bl	800996e <_ZN3PWMC1Ev>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff ffcd 	bl	800996e <_ZN3PWMC1Ev>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff fd3c 	bl	8009458 <_ZN3PIDC1Ev>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7ff fd36 	bl	8009458 <_ZN3PIDC1Ev>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7ff fd30 	bl	8009458 <_ZN3PIDC1Ev>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7ff fd2a 	bl	8009458 <_ZN3PIDC1Ev>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff fd6e 	bl	80094ec <_ZN7ArgCtrlC1Ev>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7ff fdd2 	bl	80095c0 <_ZN9DebugCtrlC1Ev>
	// TODO Auto-generated constructor stub

}
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	0800b698 	.word	0x0800b698

08009a2c <_ZN9MotorCtrlD1Ev>:

MotorCtrl::~MotorCtrl() {
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	4a18      	ldr	r2, [pc, #96]	; (8009a98 <_ZN9MotorCtrlD1Ev+0x6c>)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff fddb 	bl	80095fc <_ZN9DebugCtrlD1Ev>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7ff fd6d 	bl	800952c <_ZN7ArgCtrlD1Ev>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff fd0d 	bl	8009478 <_ZN3PIDD1Ev>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff fd07 	bl	8009478 <_ZN3PIDD1Ev>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7ff fd01 	bl	8009478 <_ZN3PIDD1Ev>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7ff fcfb 	bl	8009478 <_ZN3PIDD1Ev>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	3354      	adds	r3, #84	; 0x54
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 fb60 	bl	800a14c <_ZN8ObserverD1Ev>
	// TODO Auto-generated destructor stub
}
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	0800b698 	.word	0x0800b698

08009a9c <_ZN9MotorCtrlD0Ev>:
MotorCtrl::~MotorCtrl() {
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
}
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff ffc1 	bl	8009a2c <_ZN9MotorCtrlD1Ev>
 8009aaa:	f642 7160 	movw	r1, #12128	; 0x2f60
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f001 fd29 	bl	800b506 <_ZdlPvj>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <_ZN9MotorCtrl10InitSystemEv>:

void MotorCtrl::InitSystem(void) {
 8009abe:	b480      	push	{r7}
 8009ac0:	b083      	sub	sp, #12
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
	//mainで既に定義されているとうまく動かないから、Mainで定義する前に呼び出すこと。
//	GPIOInit::Init();
//	USARTInit::Init();
//	ADCInit::Init();
//	TIMInit::Init();//あとでつくる
}
 8009ac6:	bf00      	nop
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
	...

08009ad4 <_ZN9MotorCtrl7InitPWMEv>:

void MotorCtrl::InitPWM(void) {
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b08e      	sub	sp, #56	; 0x38
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]

	PWM PWM_Object1; //PWMのHWを叩くClass
 8009adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7ff ff44 	bl	800996e <_ZN3PWMC1Ev>
	PWM PWM_Object2;
 8009ae6:	f107 0320 	add.w	r3, r7, #32
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff ff3f 	bl	800996e <_ZN3PWMC1Ev>
	PWM PWM_Object3;
 8009af0:	f107 0314 	add.w	r3, r7, #20
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7ff ff3a 	bl	800996e <_ZN3PWMC1Ev>
	PWM PWM_Object4;
 8009afa:	f107 0308 	add.w	r3, r7, #8
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff ff35 	bl	800996e <_ZN3PWMC1Ev>
//	 TIM_HandleTypeDef *htim1;
//	 PWM PWM_Object;
//	 PWM_Object.setTIM(htim1);
//	 PWM_Object.setCH(ch1);

	PWM_Object1.setTIM(&htim1);
 8009b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b08:	4948      	ldr	r1, [pc, #288]	; (8009c2c <_ZN9MotorCtrl7InitPWMEv+0x158>)
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f001 fc4f 	bl	800b3ae <_ZN3PWM6setTIMEP17TIM_HandleTypeDef>
	PWM_Object2.setTIM(&htim1);
 8009b10:	f107 0320 	add.w	r3, r7, #32
 8009b14:	4945      	ldr	r1, [pc, #276]	; (8009c2c <_ZN9MotorCtrl7InitPWMEv+0x158>)
 8009b16:	4618      	mov	r0, r3
 8009b18:	f001 fc49 	bl	800b3ae <_ZN3PWM6setTIMEP17TIM_HandleTypeDef>
	PWM_Object3.setTIM(&htim1);
 8009b1c:	f107 0314 	add.w	r3, r7, #20
 8009b20:	4942      	ldr	r1, [pc, #264]	; (8009c2c <_ZN9MotorCtrl7InitPWMEv+0x158>)
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 fc43 	bl	800b3ae <_ZN3PWM6setTIMEP17TIM_HandleTypeDef>
	PWM_Object4.setTIM(&htim1);
 8009b28:	f107 0308 	add.w	r3, r7, #8
 8009b2c:	493f      	ldr	r1, [pc, #252]	; (8009c2c <_ZN9MotorCtrl7InitPWMEv+0x158>)
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f001 fc3d 	bl	800b3ae <_ZN3PWM6setTIMEP17TIM_HandleTypeDef>

	PWM_Object1.setCH(PWM::PWMch::ch1);
 8009b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b38:	2100      	movs	r1, #0
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 fc45 	bl	800b3ca <_ZN3PWM5setCHENS_5PWMchE>
	PWM_Object2.setCH(PWM::PWMch::ch2);
 8009b40:	f107 0320 	add.w	r3, r7, #32
 8009b44:	2104      	movs	r1, #4
 8009b46:	4618      	mov	r0, r3
 8009b48:	f001 fc3f 	bl	800b3ca <_ZN3PWM5setCHENS_5PWMchE>
	PWM_Object3.setCH(PWM::PWMch::ch3);
 8009b4c:	f107 0314 	add.w	r3, r7, #20
 8009b50:	2108      	movs	r1, #8
 8009b52:	4618      	mov	r0, r3
 8009b54:	f001 fc39 	bl	800b3ca <_ZN3PWM5setCHENS_5PWMchE>
	PWM_Object4.setCH(PWM::PWMch::ch4);
 8009b58:	f107 0308 	add.w	r3, r7, #8
 8009b5c:	210c      	movs	r1, #12
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f001 fc33 	bl	800b3ca <_ZN3PWM5setCHENS_5PWMchE>

	PWM_Object1.fInit(PWM_PERIOD_COUNT);
 8009b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b68:	f640 5105 	movw	r1, #3333	; 0xd05
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f001 fc54 	bl	800b41a <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(PWM_PERIOD_COUNT);
 8009b72:	f107 0320 	add.w	r3, r7, #32
 8009b76:	f640 5105 	movw	r1, #3333	; 0xd05
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 fc4d 	bl	800b41a <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(PWM_PERIOD_COUNT);
 8009b80:	f107 0314 	add.w	r3, r7, #20
 8009b84:	f640 5105 	movw	r1, #3333	; 0xd05
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f001 fc46 	bl	800b41a <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(PWM_PERIOD_COUNT);
 8009b8e:	f107 0308 	add.w	r3, r7, #8
 8009b92:	f640 5105 	movw	r1, #3333	; 0xd05
 8009b96:	4618      	mov	r0, r3
 8009b98:	f001 fc3f 	bl	800b41a <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 8009b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ba0:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8009c30 <_ZN9MotorCtrl7InitPWMEv+0x15c>
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f001 fc89 	bl	800b4bc <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 8009baa:	f107 0320 	add.w	r3, r7, #32
 8009bae:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8009c30 <_ZN9MotorCtrl7InitPWMEv+0x15c>
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f001 fc82 	bl	800b4bc <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 8009bb8:	f107 0314 	add.w	r3, r7, #20
 8009bbc:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8009c30 <_ZN9MotorCtrl7InitPWMEv+0x15c>
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f001 fc7b 	bl	800b4bc <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 8009bc6:	f107 0308 	add.w	r3, r7, #8
 8009bca:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009c30 <_ZN9MotorCtrl7InitPWMEv+0x15c>
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f001 fc74 	bl	800b4bc <_ZN3PWM6f2DutyEf>

	mPWMch1 = PWM_Object1;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8009bda:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009bde:	ca07      	ldmia	r2, {r0, r1, r2}
 8009be0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mPWMch2 = PWM_Object2;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009bea:	f107 0220 	add.w	r2, r7, #32
 8009bee:	ca07      	ldmia	r2, {r0, r1, r2}
 8009bf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mPWMch3 = PWM_Object3;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bfa:	f107 0214 	add.w	r2, r7, #20
 8009bfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mPWMch4 = PWM_Object4;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8009c0a:	f107 0208 	add.w	r2, r7, #8
 8009c0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c10:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    PWM_Object4.f2Duty(0.9);
 8009c14:	f107 0308 	add.w	r3, r7, #8
 8009c18:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009c34 <_ZN9MotorCtrl7InitPWMEv+0x160>
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f001 fc4d 	bl	800b4bc <_ZN3PWM6f2DutyEf>
//    LL_ADC_Enable( ADC3 );
//    /* ADC1 Injected conversions end interrupt enabling */
//    LL_ADC_ClearFlag_JEOS( ADC1 );
//    LL_ADC_EnableIT_JEOS( ADC1 );

}
 8009c22:	bf00      	nop
 8009c24:	3738      	adds	r7, #56	; 0x38
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	24003060 	.word	0x24003060
 8009c30:	00000000 	.word	0x00000000
 8009c34:	3f666666 	.word	0x3f666666

08009c38 <_ZN7ArgCtrlaSERKS_>:

#include "MotorLibDefPack.hpp"
#include "math.h"
#include "Observer.hpp"

class ArgCtrl {
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	605a      	str	r2, [r3, #4]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	689a      	ldr	r2, [r3, #8]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	609a      	str	r2, [r3, #8]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	68da      	ldr	r2, [r3, #12]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	60da      	str	r2, [r3, #12]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	691a      	ldr	r2, [r3, #16]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	611a      	str	r2, [r3, #16]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	683a      	ldr	r2, [r7, #0]
 8009c66:	3314      	adds	r3, #20
 8009c68:	3214      	adds	r2, #20
 8009c6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <_ZN3PIDaSERKS_>:
#ifndef PID_HPP_
#define PID_HPP_

#include <array>

class PID {
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	3304      	adds	r3, #4
 8009c90:	3204      	adds	r2, #4
 8009c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	691a      	ldr	r2, [r3, #16]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	611a      	str	r2, [r3, #16]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	695a      	ldr	r2, [r3, #20]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	615a      	str	r2, [r3, #20]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	699a      	ldr	r2, [r3, #24]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	619a      	str	r2, [r3, #24]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	69da      	ldr	r2, [r3, #28]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	61da      	str	r2, [r3, #28]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	6a1a      	ldr	r2, [r3, #32]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	621a      	str	r2, [r3, #32]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	625a      	str	r2, [r3, #36]	; 0x24
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
	...

08009cd8 <_ZN9MotorCtrl13InitMotorInfoEv>:

void MotorCtrl::InitMotorInfo(void) {
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b09e      	sub	sp, #120	; 0x78
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]

	{
		ArgCtrl ArgCtrl; //角度を求める機能を持ったclass
 8009ce0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff fc01 	bl	80094ec <_ZN7ArgCtrlC1Ev>
		ArgCtrl.Init();
 8009cea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff fc4c 	bl	800958c <_ZN7ArgCtrl4InitEv>
		mArgCtrl = ArgCtrl;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8009cfa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8009cfe:	4611      	mov	r1, r2
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7ff ff99 	bl	8009c38 <_ZN7ArgCtrlaSERKS_>
		ArgCtrl ArgCtrl; //角度を求める機能を持ったclass
 8009d06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7ff fc0e 	bl	800952c <_ZN7ArgCtrlD1Ev>
//		TimInfo Tim_Info;//タイマの経過時間測定Class
//		Tim_Info.Init(TIM1);
//		mMotorInfo.setTimInfo(Tim_Info);
//	}
	{//PIDLibの生存時間調整(代入後メモリを解放する)
		PID IdPID;
 8009d10:	f107 030c 	add.w	r3, r7, #12
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7ff fb9f 	bl	8009458 <_ZN3PIDC1Ev>
		PID IqPID;
 8009d1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff fb9a 	bl	8009458 <_ZN3PIDC1Ev>
		IdPID.SetParam(PID_GAIN_ID_P, PID_GAIN_ID_I, PID_GAIN_ID_D);
 8009d24:	f107 030c 	add.w	r3, r7, #12
 8009d28:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8009d90 <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 8009d2c:	eddf 0a18 	vldr	s1, [pc, #96]	; 8009d90 <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 8009d30:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8009d90 <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7ff fbbf 	bl	80094b8 <_ZN3PID8SetParamEfff>
		IqPID.SetParam(PID_GAIN_IQ_P, PID_GAIN_IQ_I, PID_GAIN_IQ_D);
 8009d3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d3e:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8009d90 <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 8009d42:	eddf 0a13 	vldr	s1, [pc, #76]	; 8009d90 <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 8009d46:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009d90 <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7ff fbb4 	bl	80094b8 <_ZN3PID8SetParamEfff>
		mIdPID = IdPID;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009d56:	f107 020c 	add.w	r2, r7, #12
 8009d5a:	4611      	mov	r1, r2
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff ff8f 	bl	8009c80 <_ZN3PIDaSERKS_>
		mIqPID = IqPID;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8009d68:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff ff86 	bl	8009c80 <_ZN3PIDaSERKS_>
		PID IqPID;
 8009d74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7ff fb7d 	bl	8009478 <_ZN3PIDD1Ev>
		PID IdPID;
 8009d7e:	f107 030c 	add.w	r3, r7, #12
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7ff fb78 	bl	8009478 <_ZN3PIDD1Ev>
		//mMotorInfo.setIdqPIDLib(IdPID, IqPID);
		//mMotorInfo.setIganmadeltaPIDLib(IganmaPID, IdeltaPID);
	}
}
 8009d88:	bf00      	nop
 8009d8a:	3778      	adds	r7, #120	; 0x78
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	3dcccccd 	.word	0x3dcccccd

08009d94 <_ZN6EMFObsaSERKS_>:

#include "Matrix.hpp"
#include "ZIntegrate.hpp"
#include "Trigonometric.hpp"

class EMFObs {
 8009d94:	b4b0      	push	{r4, r5, r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	605a      	str	r2, [r3, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	3308      	adds	r3, #8
 8009dac:	3208      	adds	r2, #8
 8009dae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009db2:	e883 0003 	stmia.w	r3, {r0, r1}
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	3310      	adds	r3, #16
 8009dbc:	3210      	adds	r2, #16
 8009dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009dc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	699a      	ldr	r2, [r3, #24]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	619a      	str	r2, [r3, #24]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	69da      	ldr	r2, [r3, #28]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	61da      	str	r2, [r3, #28]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	6a1a      	ldr	r2, [r3, #32]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	621a      	str	r2, [r3, #32]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	625a      	str	r2, [r3, #36]	; 0x24
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	629a      	str	r2, [r3, #40]	; 0x28
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	683a      	ldr	r2, [r7, #0]
 8009dfa:	3330      	adds	r3, #48	; 0x30
 8009dfc:	3230      	adds	r2, #48	; 0x30
 8009dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e02:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	3338      	adds	r3, #56	; 0x38
 8009e0c:	3238      	adds	r2, #56	; 0x38
 8009e0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e12:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	3340      	adds	r3, #64	; 0x40
 8009e1c:	3240      	adds	r2, #64	; 0x40
 8009e1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e22:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	3348      	adds	r3, #72	; 0x48
 8009e2c:	3248      	adds	r2, #72	; 0x48
 8009e2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e32:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	3350      	adds	r3, #80	; 0x50
 8009e3c:	3250      	adds	r2, #80	; 0x50
 8009e3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e42:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	3358      	adds	r3, #88	; 0x58
 8009e4c:	3258      	adds	r2, #88	; 0x58
 8009e4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e52:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	f102 0460 	add.w	r4, r2, #96	; 0x60
 8009e5e:	f103 0560 	add.w	r5, r3, #96	; 0x60
 8009e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e66:	682b      	ldr	r3, [r5, #0]
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	683a      	ldr	r2, [r7, #0]
 8009e6e:	3374      	adds	r3, #116	; 0x74
 8009e70:	3274      	adds	r2, #116	; 0x74
 8009e72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e76:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	683a      	ldr	r2, [r7, #0]
 8009e7e:	337c      	adds	r3, #124	; 0x7c
 8009e80:	327c      	adds	r2, #124	; 0x7c
 8009e82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e86:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	3384      	adds	r3, #132	; 0x84
 8009e90:	3284      	adds	r2, #132	; 0x84
 8009e92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e96:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bcb0      	pop	{r4, r5, r7}
 8009ea4:	4770      	bx	lr

08009ea6 <_ZN4PII2aSERKS_>:
#ifndef INC_PII2_HPP_
#define INC_PII2_HPP_

#include "ZIntegrate.hpp"

class PII2 {
 8009ea6:	b480      	push	{r7}
 8009ea8:	b083      	sub	sp, #12
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	6039      	str	r1, [r7, #0]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	605a      	str	r2, [r3, #4]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	689a      	ldr	r2, [r3, #8]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	609a      	str	r2, [r3, #8]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	68da      	ldr	r2, [r3, #12]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	60da      	str	r2, [r3, #12]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	691a      	ldr	r2, [r3, #16]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	611a      	str	r2, [r3, #16]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	695a      	ldr	r2, [r3, #20]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	615a      	str	r2, [r3, #20]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	699a      	ldr	r2, [r3, #24]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	619a      	str	r2, [r3, #24]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	69da      	ldr	r2, [r3, #28]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	61da      	str	r2, [r3, #28]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	6a1a      	ldr	r2, [r3, #32]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	621a      	str	r2, [r3, #32]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	3324      	adds	r3, #36	; 0x24
 8009ef6:	3224      	adds	r2, #36	; 0x24
 8009ef8:	ca07      	ldmia	r2, {r0, r1, r2}
 8009efa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	631a      	str	r2, [r3, #48]	; 0x30
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	3338      	adds	r3, #56	; 0x38
 8009f14:	3238      	adds	r2, #56	; 0x38
 8009f16:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	645a      	str	r2, [r3, #68]	; 0x44
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	649a      	str	r2, [r3, #72]	; 0x48
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <_ZN8ObserveraSERKS_>:
#include "AdaptVelEst.hpp"
#include "EMFObs.hpp"
#include "EstimatedAxisError.hpp"
#include "PII2.hpp"

class Observer {
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b082      	sub	sp, #8
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	6039      	str	r1, [r7, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	1d1a      	adds	r2, r3, #4
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4610      	mov	r0, r2
 8009f50:	f7ff ff20 	bl	8009d94 <_ZN6EMFObsaSERKS_>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	3390      	adds	r3, #144	; 0x90
 8009f5e:	4619      	mov	r1, r3
 8009f60:	4610      	mov	r0, r2
 8009f62:	f7ff ffa0 	bl	8009ea6 <_ZN4PII2aSERKS_>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	33dc      	adds	r3, #220	; 0xdc
 8009f6c:	32dc      	adds	r2, #220	; 0xdc
 8009f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f72:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	33e4      	adds	r3, #228	; 0xe4
 8009f7c:	32e4      	adds	r2, #228	; 0xe4
 8009f7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f82:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <_ZN9MotorCtrl12InitObserverEv>:

void MotorCtrl::InitObserver(void) {
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b0c0      	sub	sp, #256	; 0x100
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]

	{
		Observer Observer; //オブザーバのInit
 8009fbc:	f107 0308 	add.w	r3, r7, #8
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 f8ab 	bl	800a11c <_ZN8ObserverC1Ev>
		Observer.InitEMFObs(OBSERVER_CYCLE_TIME, M_PARAM_R, M_PARAM_LD, M_PARAM_LQ, OBSERVER_GAIN_G1, OBSERVER_GAIN_ALPHA);
 8009fc6:	f107 0308 	add.w	r3, r7, #8
 8009fca:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8009fce:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8009fd2:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8009fd6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8009fda:	eddf 0a13 	vldr	s1, [pc, #76]	; 800a028 <_ZN9MotorCtrl12InitObserverEv+0x74>
 8009fde:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a02c <_ZN9MotorCtrl12InitObserverEv+0x78>
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 f8da 	bl	800a19c <_ZN8Observer10InitEMFObsEffffff>
		Observer.InitPII2(OBSERVER_CYCLE_TIME, OBSERVER_GAIN_K1, OBSERVER_GAIN_K2, OBSERVER_GAIN_K3);
 8009fe8:	f107 0308 	add.w	r3, r7, #8
 8009fec:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8009ff0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8009ff4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009ff8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a02c <_ZN9MotorCtrl12InitObserverEv+0x78>
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 f901 	bl	800a204 <_ZN8Observer8InitPII2Effff>
		mObserver = Observer;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	3354      	adds	r3, #84	; 0x54
 800a006:	f107 0208 	add.w	r2, r7, #8
 800a00a:	4611      	mov	r1, r2
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7ff ff94 	bl	8009f3a <_ZN8ObserveraSERKS_>
		Observer Observer; //オブザーバのInit
 800a012:	f107 0308 	add.w	r3, r7, #8
 800a016:	4618      	mov	r0, r3
 800a018:	f000 f898 	bl	800a14c <_ZN8ObserverD1Ev>
	}
}
 800a01c:	bf00      	nop
 800a01e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	3ca3d70a 	.word	0x3ca3d70a
 800a02c:	3727c5ac 	.word	0x3727c5ac

0800a030 <_ZN6EMFObsC1Ev>:
 *      Author: watashi
 */

#include "EMFObs.hpp"

EMFObs::EMFObs() {
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	4a04      	ldr	r2, [pc, #16]	; (800a04c <_ZN6EMFObsC1Ev+0x1c>)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4618      	mov	r0, r3
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	0800b6a8 	.word	0x0800b6a8

0800a050 <_ZN6EMFObsD1Ev>:

EMFObs::~EMFObs() {
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	4a04      	ldr	r2, [pc, #16]	; (800a06c <_ZN6EMFObsD1Ev+0x1c>)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	0800b6a8 	.word	0x0800b6a8

0800a070 <_ZN6EMFObsD0Ev>:
EMFObs::~EMFObs() {
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
}
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f7ff ffe9 	bl	800a050 <_ZN6EMFObsD1Ev>
 800a07e:	218c      	movs	r1, #140	; 0x8c
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f001 fa40 	bl	800b506 <_ZdlPvj>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <_ZN6EMFObs14InitMotorParamEfff>:

//Initializer
void EMFObs::InitMotorParam(float pR,float pLd, float pLq) {
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	ed87 0a02 	vstr	s0, [r7, #8]
 800a09c:	edc7 0a01 	vstr	s1, [r7, #4]
 800a0a0:	ed87 1a00 	vstr	s2, [r7]
	mR = pR;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	619a      	str	r2, [r3, #24]
	mLd = pLd;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	61da      	str	r2, [r3, #28]
	mLq = pLq;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	621a      	str	r2, [r3, #32]
}
 800a0b6:	bf00      	nop
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <_ZN6EMFObs13InitCycleTimeEf>:

void EMFObs::InitCycleTime(float pCycleTime) {
 800a0c2:	b480      	push	{r7}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	ed87 0a00 	vstr	s0, [r7]
	mCycleTime = pCycleTime;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <_ZN6EMFObs11InitObsGainEf>:

void EMFObs::InitObsGain(float pGainAlpha) {
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	ed87 0a00 	vstr	s0, [r7]
	mGainAlpha = pGainAlpha;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	683a      	ldr	r2, [r7, #0]
 800a0f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a0f2:	bf00      	nop
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <_ZN6EMFObs13InitModelGainEf>:

void EMFObs::InitModelGain(float pG1) {
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	ed87 0a00 	vstr	s0, [r7]
	mG1 = pG1;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <_ZN8ObserverC1Ev>:
 *      Author: watashi
 */

#include "Observer.hpp"

Observer::Observer() {
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	4a08      	ldr	r2, [pc, #32]	; (800a148 <_ZN8ObserverC1Ev+0x2c>)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	3304      	adds	r3, #4
 800a12e:	4618      	mov	r0, r3
 800a130:	f7ff ff7e 	bl	800a030 <_ZN6EMFObsC1Ev>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3390      	adds	r3, #144	; 0x90
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 f88f 	bl	800a25c <_ZN4PII2C1Ev>
	// TODO Auto-generated constructor stub
}
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4618      	mov	r0, r3
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	0800b6b8 	.word	0x0800b6b8

0800a14c <_ZN8ObserverD1Ev>:

Observer::~Observer() {
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	4a08      	ldr	r2, [pc, #32]	; (800a178 <_ZN8ObserverD1Ev+0x2c>)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	3390      	adds	r3, #144	; 0x90
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f88c 	bl	800a27c <_ZN4PII2D1Ev>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3304      	adds	r3, #4
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff ff71 	bl	800a050 <_ZN6EMFObsD1Ev>
	// TODO Auto-generated destructor stub
}
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	0800b6b8 	.word	0x0800b6b8

0800a17c <_ZN8ObserverD0Ev>:
Observer::~Observer() {
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
}
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7ff ffe1 	bl	800a14c <_ZN8ObserverD1Ev>
 800a18a:	21f8      	movs	r1, #248	; 0xf8
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f001 f9ba 	bl	800b506 <_ZdlPvj>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <_ZN8Observer10InitEMFObsEffffff>:

//Initializer
void Observer::InitEMFObs(float pCycleTime, float pR, float pLd, float pLq, float pG1, float pGainAlpha) {
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	61f8      	str	r0, [r7, #28]
 800a1a4:	ed87 0a06 	vstr	s0, [r7, #24]
 800a1a8:	edc7 0a05 	vstr	s1, [r7, #20]
 800a1ac:	ed87 1a04 	vstr	s2, [r7, #16]
 800a1b0:	edc7 1a03 	vstr	s3, [r7, #12]
 800a1b4:	ed87 2a02 	vstr	s4, [r7, #8]
 800a1b8:	edc7 2a01 	vstr	s5, [r7, #4]
	mEMFObserver.InitCycleTime(pCycleTime);
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	3304      	adds	r3, #4
 800a1c0:	ed97 0a06 	vldr	s0, [r7, #24]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff ff7c 	bl	800a0c2 <_ZN6EMFObs13InitCycleTimeEf>
	mEMFObserver.InitMotorParam(pR, pLd, pLq);
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	ed97 1a03 	vldr	s2, [r7, #12]
 800a1d2:	edd7 0a04 	vldr	s1, [r7, #16]
 800a1d6:	ed97 0a05 	vldr	s0, [r7, #20]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7ff ff58 	bl	800a090 <_ZN6EMFObs14InitMotorParamEfff>
	mEMFObserver.InitModelGain(pG1);
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	3304      	adds	r3, #4
 800a1e4:	ed97 0a02 	vldr	s0, [r7, #8]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7ff ff88 	bl	800a0fe <_ZN6EMFObs13InitModelGainEf>
	mEMFObserver.InitObsGain(pGainAlpha);
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	ed97 0a01 	vldr	s0, [r7, #4]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff ff72 	bl	800a0e0 <_ZN6EMFObs11InitObsGainEf>
}
 800a1fc:	bf00      	nop
 800a1fe:	3720      	adds	r7, #32
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <_ZN8Observer8InitPII2Effff>:

void Observer::InitPII2(float pCycleTime, float pK1, float pK2, float pK3) {
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6178      	str	r0, [r7, #20]
 800a20c:	ed87 0a04 	vstr	s0, [r7, #16]
 800a210:	edc7 0a03 	vstr	s1, [r7, #12]
 800a214:	ed87 1a02 	vstr	s2, [r7, #8]
 800a218:	edc7 1a01 	vstr	s3, [r7, #4]
	mEstThetaPII2.InitCycleTime(pCycleTime);
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	3390      	adds	r3, #144	; 0x90
 800a220:	ed97 0a04 	vldr	s0, [r7, #16]
 800a224:	4618      	mov	r0, r3
 800a226:	f000 f849 	bl	800a2bc <_ZN4PII213InitCycleTimeEf>
	mEstThetaPII2.InitGainK1(pK1);
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	3390      	adds	r3, #144	; 0x90
 800a22e:	ed97 0a03 	vldr	s0, [r7, #12]
 800a232:	4618      	mov	r0, r3
 800a234:	f000 f851 	bl	800a2da <_ZN4PII210InitGainK1Ef>
	mEstThetaPII2.InitGainK2(pK2);
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	3390      	adds	r3, #144	; 0x90
 800a23c:	ed97 0a02 	vldr	s0, [r7, #8]
 800a240:	4618      	mov	r0, r3
 800a242:	f000 f859 	bl	800a2f8 <_ZN4PII210InitGainK2Ef>
	mEstThetaPII2.InitGainK3(pK3);
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	3390      	adds	r3, #144	; 0x90
 800a24a:	ed97 0a01 	vldr	s0, [r7, #4]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f861 	bl	800a316 <_ZN4PII210InitGainK3Ef>
}
 800a254:	bf00      	nop
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <_ZN4PII2C1Ev>:
 *      Author: watashi
 */

#include "PII2.hpp"

PII2::PII2() {
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	4a04      	ldr	r2, [pc, #16]	; (800a278 <_ZN4PII2C1Ev+0x1c>)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4618      	mov	r0, r3
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	0800b6c8 	.word	0x0800b6c8

0800a27c <_ZN4PII2D1Ev>:

PII2::~PII2() {
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	4a04      	ldr	r2, [pc, #16]	; (800a298 <_ZN4PII2D1Ev+0x1c>)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4618      	mov	r0, r3
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	0800b6c8 	.word	0x0800b6c8

0800a29c <_ZN4PII2D0Ev>:
PII2::~PII2() {
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
}
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff ffe9 	bl	800a27c <_ZN4PII2D1Ev>
 800a2aa:	214c      	movs	r1, #76	; 0x4c
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f001 f92a 	bl	800b506 <_ZdlPvj>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <_ZN4PII213InitCycleTimeEf>:

//Initializer
void PII2::InitCycleTime(float pCycleTime) {
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	ed87 0a00 	vstr	s0, [r7]
	mCycleTime = pCycleTime;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	605a      	str	r2, [r3, #4]
}
 800a2ce:	bf00      	nop
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <_ZN4PII210InitGainK1Ef>:
void PII2::InitGainK1(float pK1) {
 800a2da:	b480      	push	{r7}
 800a2dc:	b083      	sub	sp, #12
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	ed87 0a00 	vstr	s0, [r7]
	mK1 = pK1;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	609a      	str	r2, [r3, #8]
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <_ZN4PII210InitGainK2Ef>:
void PII2::InitGainK2(float pK2) {
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	ed87 0a00 	vstr	s0, [r7]
	mK2 = pK2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	60da      	str	r2, [r3, #12]
}
 800a30a:	bf00      	nop
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <_ZN4PII210InitGainK3Ef>:
void PII2::InitGainK3(float pK3) {
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	ed87 0a00 	vstr	s0, [r7]
	mK3 = pK3;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	611a      	str	r2, [r3, #16]
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	ed87 0a01 	vstr	s0, [r7, #4]
 800a33e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a342:	fef8 7a67 	vrinta.f32	s15, s15
 800a346:	eeb0 0a67 	vmov.f32	s0, s15
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <_Z13multipleBenchi>:

//	GPIOCtrl myGPIO0(GPIOB, GPIO_PIN_7);
//	GPIOCtrl myGPIO1(GPIOB, GPIO_PIN_0);
//	GPIOCtrl myGPIO2(GPIOB, GPIO_PIN_14);

void multipleBench(int roop) {
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
	int i=0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	61fb      	str	r3, [r7, #28]
	//float fval=2.3f;
	float const floatval = 2.3f;
 800a360:	4b16      	ldr	r3, [pc, #88]	; (800a3bc <_Z13multipleBenchi+0x68>)
 800a362:	617b      	str	r3, [r7, #20]
	int fpval = (int)round(floatval * (1<<8));
 800a364:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800a3c0 <_Z13multipleBenchi+0x6c>
 800a368:	f7ff ffe4 	bl	800a334 <_ZSt5roundf>
 800a36c:	eef0 7a40 	vmov.f32	s15, s0
 800a370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a374:	ee17 3a90 	vmov	r3, s15
 800a378:	61bb      	str	r3, [r7, #24]

	float const  mpval = 0.996f;
 800a37a:	4b12      	ldr	r3, [pc, #72]	; (800a3c4 <_Z13multipleBenchi+0x70>)
 800a37c:	613b      	str	r3, [r7, #16]
	int fpmp = (int)round(mpval * (1<<8));
 800a37e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800a3c8 <_Z13multipleBenchi+0x74>
 800a382:	f7ff ffd7 	bl	800a334 <_ZSt5roundf>
 800a386:	eef0 7a40 	vmov.f32	s15, s0
 800a38a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a38e:	ee17 3a90 	vmov	r3, s15
 800a392:	60fb      	str	r3, [r7, #12]

	for(i=0; i<roop; i++){
 800a394:	2300      	movs	r3, #0
 800a396:	61fb      	str	r3, [r7, #28]
 800a398:	69fa      	ldr	r2, [r7, #28]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	da09      	bge.n	800a3b4 <_Z13multipleBenchi+0x60>
		fpval =( fpval * fpmp ) >> 8;
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	fb02 f303 	mul.w	r3, r2, r3
 800a3a8:	121b      	asrs	r3, r3, #8
 800a3aa:	61bb      	str	r3, [r7, #24]
	for(i=0; i<roop; i++){
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	61fb      	str	r3, [r7, #28]
 800a3b2:	e7f1      	b.n	800a398 <_Z13multipleBenchi+0x44>
	}
}
 800a3b4:	bf00      	nop
 800a3b6:	3720      	adds	r7, #32
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	40133333 	.word	0x40133333
 800a3c0:	44133333 	.word	0x44133333
 800a3c4:	3f7ef9db 	.word	0x3f7ef9db
 800a3c8:	437ef9db 	.word	0x437ef9db

0800a3cc <_Z8addBenchi>:

void addBench(int roop) {
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
	int i;
	//float fval=2.3f;
	int val = 1;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	60bb      	str	r3, [r7, #8]
	for(i=0; i<roop; i++){
 800a3d8:	2300      	movs	r3, #0
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	da06      	bge.n	800a3f2 <_Z8addBenchi+0x26>
		val = val + 1;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	60bb      	str	r3, [r7, #8]
	for(i=0; i<roop; i++){
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	60fb      	str	r3, [r7, #12]
 800a3f0:	e7f4      	b.n	800a3dc <_Z8addBenchi+0x10>
		//fval = fval + 1.25f;
		//fval = fval /1.2f;
	}
}
 800a3f2:	bf00      	nop
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
	...

0800a400 <_Z5Benchv>:

void Bench(){
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800a404:	2201      	movs	r2, #1
 800a406:	2180      	movs	r1, #128	; 0x80
 800a408:	4813      	ldr	r0, [pc, #76]	; (800a458 <_Z5Benchv+0x58>)
 800a40a:	f7f8 fc35 	bl	8002c78 <HAL_GPIO_WritePin>
	asm("NOP");
 800a40e:	bf00      	nop


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800a410:	2200      	movs	r2, #0
 800a412:	2180      	movs	r1, #128	; 0x80
 800a414:	4810      	ldr	r0, [pc, #64]	; (800a458 <_Z5Benchv+0x58>)
 800a416:	f7f8 fc2f 	bl	8002c78 <HAL_GPIO_WritePin>
	asm("NOP");
 800a41a:	bf00      	nop
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800a41c:	2201      	movs	r2, #1
 800a41e:	2180      	movs	r1, #128	; 0x80
 800a420:	480d      	ldr	r0, [pc, #52]	; (800a458 <_Z5Benchv+0x58>)
 800a422:	f7f8 fc29 	bl	8002c78 <HAL_GPIO_WritePin>


	addBench(70);
 800a426:	2046      	movs	r0, #70	; 0x46
 800a428:	f7ff ffd0 	bl	800a3cc <_Z8addBenchi>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800a42c:	2200      	movs	r2, #0
 800a42e:	2180      	movs	r1, #128	; 0x80
 800a430:	4809      	ldr	r0, [pc, #36]	; (800a458 <_Z5Benchv+0x58>)
 800a432:	f7f8 fc21 	bl	8002c78 <HAL_GPIO_WritePin>
	asm("NOP");
 800a436:	bf00      	nop
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800a438:	2201      	movs	r2, #1
 800a43a:	2180      	movs	r1, #128	; 0x80
 800a43c:	4806      	ldr	r0, [pc, #24]	; (800a458 <_Z5Benchv+0x58>)
 800a43e:	f7f8 fc1b 	bl	8002c78 <HAL_GPIO_WritePin>

	multipleBench(70);
 800a442:	2046      	movs	r0, #70	; 0x46
 800a444:	f7ff ff86 	bl	800a354 <_Z13multipleBenchi>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800a448:	2200      	movs	r2, #0
 800a44a:	2180      	movs	r1, #128	; 0x80
 800a44c:	4802      	ldr	r0, [pc, #8]	; (800a458 <_Z5Benchv+0x58>)
 800a44e:	f7f8 fc13 	bl	8002c78 <HAL_GPIO_WritePin>
}
 800a452:	bf00      	nop
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	58020400 	.word	0x58020400

0800a45c <_ZN4DeusC1Ev>:


Deus::Deus() {
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	4a06      	ldr	r2, [pc, #24]	; (800a480 <_ZN4DeusC1Ev+0x24>)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	3304      	adds	r3, #4
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff fa8c 	bl	800998c <_ZN9MotorCtrlC1Ev>
//		  if((htim->Instance == TIM1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {
//		    // タイムアウト処理
//		  }
//	}

}
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4618      	mov	r0, r3
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	0800b6d8 	.word	0x0800b6d8

0800a484 <_ZN4DeusD1Ev>:

Deus::~Deus() {
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	4a06      	ldr	r2, [pc, #24]	; (800a4a8 <_ZN4DeusD1Ev+0x24>)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	601a      	str	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	3304      	adds	r3, #4
 800a496:	4618      	mov	r0, r3
 800a498:	f7ff fac8 	bl	8009a2c <_ZN9MotorCtrlD1Ev>
	// TODO Auto-generated destructor stub
}
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	0800b6d8 	.word	0x0800b6d8

0800a4ac <_ZN4DeusD0Ev>:
Deus::~Deus() {
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
}
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff ffe5 	bl	800a484 <_ZN4DeusD1Ev>
 800a4ba:	f642 7164 	movw	r1, #12132	; 0x2f64
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f001 f821 	bl	800b506 <_ZdlPvj>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <_ZN4Deus6HFTaskEv>:


void Deus::HFTask() {
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b082      	sub	sp, #8
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
	//M_Ctrl.HighFreqTask();
	Bench();
 800a4d6:	f7ff ff93 	bl	800a400 <_Z5Benchv>
//	myGPIO0.Toggle();
//	myGPIO1.Toggle();
//	myGPIO2.Toggle();
}
 800a4da:	bf00      	nop
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <_ZN4Deus4CtrlEv>:

void Deus::Ctrl() {
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]

	M_Ctrl.InitSystem();
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff fae5 	bl	8009abe <_ZN9MotorCtrl10InitSystemEv>

	M_Ctrl.InitMotorInfo();
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7ff fbed 	bl	8009cd8 <_ZN9MotorCtrl13InitMotorInfoEv>
	M_Ctrl.InitObserver();
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	3304      	adds	r3, #4
 800a502:	4618      	mov	r0, r3
 800a504:	f7ff fd56 	bl	8009fb4 <_ZN9MotorCtrl12InitObserverEv>
	M_Ctrl.InitPWM();
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	3304      	adds	r3, #4
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff fae1 	bl	8009ad4 <_ZN9MotorCtrl7InitPWMEv>

	while(1){}
 800a512:	e7fe      	b.n	800a512 <_ZN4Deus4CtrlEv+0x30>

0800a514 <cppWrapper>:


Deus Bosatsu;


void cppWrapper(void){
 800a514:	b580      	push	{r7, lr}
 800a516:	af00      	add	r7, sp, #0

	Bosatsu.Ctrl();
 800a518:	4802      	ldr	r0, [pc, #8]	; (800a524 <cppWrapper+0x10>)
 800a51a:	f7ff ffe2 	bl	800a4e2 <_ZN4Deus4CtrlEv>

}
 800a51e:	bf00      	nop
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	24000094 	.word	0x24000094

0800a528 <HighFreqTask>:

void HighFreqTask(void){
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0
	Bosatsu.HFTask();
 800a52c:	4802      	ldr	r0, [pc, #8]	; (800a538 <HighFreqTask+0x10>)
 800a52e:	f7ff ffce 	bl	800a4ce <_ZN4Deus6HFTaskEv>

}
 800a532:	bf00      	nop
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	24000094 	.word	0x24000094

0800a53c <_Z41__static_initialization_and_destruction_0ii>:
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d107      	bne.n	800a55c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a552:	4293      	cmp	r3, r2
 800a554:	d102      	bne.n	800a55c <_Z41__static_initialization_and_destruction_0ii+0x20>
Deus Bosatsu;
 800a556:	4809      	ldr	r0, [pc, #36]	; (800a57c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800a558:	f7ff ff80 	bl	800a45c <_ZN4DeusC1Ev>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d107      	bne.n	800a572 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a568:	4293      	cmp	r3, r2
 800a56a:	d102      	bne.n	800a572 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800a56c:	4803      	ldr	r0, [pc, #12]	; (800a57c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800a56e:	f7ff ff89 	bl	800a484 <_ZN4DeusD1Ev>
}
 800a572:	bf00      	nop
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	24000094 	.word	0x24000094

0800a580 <_GLOBAL__sub_I_Bosatsu>:
 800a580:	b580      	push	{r7, lr}
 800a582:	af00      	add	r7, sp, #0
 800a584:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a588:	2001      	movs	r0, #1
 800a58a:	f7ff ffd7 	bl	800a53c <_Z41__static_initialization_and_destruction_0ii>
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <_GLOBAL__sub_D_Bosatsu>:
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
 800a594:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a598:	2000      	movs	r0, #0
 800a59a:	f7ff ffcf 	bl	800a53c <_Z41__static_initialization_and_destruction_0ii>
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b098      	sub	sp, #96	; 0x60
 800a5a4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800a5a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	605a      	str	r2, [r3, #4]
 800a5b0:	609a      	str	r2, [r3, #8]
 800a5b2:	60da      	str	r2, [r3, #12]
 800a5b4:	611a      	str	r2, [r3, #16]
 800a5b6:	615a      	str	r2, [r3, #20]
 800a5b8:	619a      	str	r2, [r3, #24]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a5ba:	1d3b      	adds	r3, r7, #4
 800a5bc:	2240      	movs	r2, #64	; 0x40
 800a5be:	2100      	movs	r1, #0
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 ffd1 	bl	800b568 <memset>

  /** Common config 
  */
  hadc3.Instance = ADC3;
 800a5c6:	4b4d      	ldr	r3, [pc, #308]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a5c8:	4a4d      	ldr	r2, [pc, #308]	; (800a700 <MX_ADC3_Init+0x160>)
 800a5ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800a5cc:	4b4b      	ldr	r3, [pc, #300]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a5ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a5d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800a5d4:	4b49      	ldr	r3, [pc, #292]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a5da:	4b48      	ldr	r3, [pc, #288]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a5dc:	2201      	movs	r2, #1
 800a5de:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a5e0:	4b46      	ldr	r3, [pc, #280]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a5e2:	2204      	movs	r2, #4
 800a5e4:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800a5e6:	4b45      	ldr	r3, [pc, #276]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800a5ec:	4b43      	ldr	r3, [pc, #268]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800a5f2:	4b42      	ldr	r3, [pc, #264]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800a5f8:	4b40      	ldr	r3, [pc, #256]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a5fe:	4b3f      	ldr	r3, [pc, #252]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a600:	2200      	movs	r2, #0
 800a602:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a604:	4b3d      	ldr	r3, [pc, #244]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a606:	2200      	movs	r2, #0
 800a608:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800a60a:	4b3c      	ldr	r3, [pc, #240]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a610:	4b3a      	ldr	r3, [pc, #232]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a612:	2200      	movs	r2, #0
 800a614:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800a616:	4b39      	ldr	r3, [pc, #228]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a618:	2200      	movs	r2, #0
 800a61a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800a61c:	4b37      	ldr	r3, [pc, #220]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800a624:	4835      	ldr	r0, [pc, #212]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a626:	f7f6 fa2f 	bl	8000a88 <HAL_ADC_Init>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800a630:	f000 fb66 	bl	800ad00 <Error_Handler>
  }
  /** Disable Injected Queue 
  */
  HAL_ADCEx_DisableInjectedQueue(&hadc3);
 800a634:	4831      	ldr	r0, [pc, #196]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a636:	f7f8 f837 	bl	80026a8 <HAL_ADCEx_DisableInjectedQueue>
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800a63a:	4b32      	ldr	r3, [pc, #200]	; (800a704 <MX_ADC3_Init+0x164>)
 800a63c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a63e:	2306      	movs	r3, #6
 800a640:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800a642:	2300      	movs	r3, #0
 800a644:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a646:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a64a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a64c:	2304      	movs	r3, #4
 800a64e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.Offset = 0;
 800a650:	2300      	movs	r3, #0
 800a652:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a654:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a658:	4619      	mov	r1, r3
 800a65a:	4828      	ldr	r0, [pc, #160]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a65c:	f7f6 fe0a 	bl	8001274 <HAL_ADC_ConfigChannel>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 800a666:	f000 fb4b 	bl	800ad00 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800a66a:	4b27      	ldr	r3, [pc, #156]	; (800a708 <MX_ADC3_Init+0x168>)
 800a66c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800a66e:	2309      	movs	r3, #9
 800a670:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800a676:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a67a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800a67c:	2304      	movs	r3, #4
 800a67e:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedLeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800a684:	2300      	movs	r3, #0
 800a686:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedNbrOfConversion = 3;
 800a688:	2303      	movs	r3, #3
 800a68a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 800a68c:	2301      	movs	r3, #1
 800a68e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a692:	2300      	movs	r3, #0
 800a694:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sConfigInjected.QueueInjectedContext = DISABLE;
 800a698:	2300      	movs	r3, #0
 800a69a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 800a69e:	2384      	movs	r3, #132	; 0x84
 800a6a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800a6a2:	2380      	movs	r3, #128	; 0x80
 800a6a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a6ac:	1d3b      	adds	r3, r7, #4
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	4812      	ldr	r0, [pc, #72]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a6b2:	f7f7 fb13 	bl	8001cdc <HAL_ADCEx_InjectedConfigChannel>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <MX_ADC3_Init+0x120>
  {
    Error_Handler();
 800a6bc:	f000 fb20 	bl	800ad00 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800a6c0:	f240 130f 	movw	r3, #271	; 0x10f
 800a6c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a6c6:	1d3b      	adds	r3, r7, #4
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	480c      	ldr	r0, [pc, #48]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a6cc:	f7f7 fb06 	bl	8001cdc <HAL_ADCEx_InjectedConfigChannel>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <MX_ADC3_Init+0x13a>
  {
    Error_Handler();
 800a6d6:	f000 fb13 	bl	800ad00 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800a6da:	f240 2315 	movw	r3, #533	; 0x215
 800a6de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a6e0:	1d3b      	adds	r3, r7, #4
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4805      	ldr	r0, [pc, #20]	; (800a6fc <MX_ADC3_Init+0x15c>)
 800a6e6:	f7f7 faf9 	bl	8001cdc <HAL_ADCEx_InjectedConfigChannel>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <MX_ADC3_Init+0x154>
  {
    Error_Handler();
 800a6f0:	f000 fb06 	bl	800ad00 <Error_Handler>
  }

}
 800a6f4:	bf00      	nop
 800a6f6:	3760      	adds	r7, #96	; 0x60
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	24002ffc 	.word	0x24002ffc
 800a700:	58026000 	.word	0x58026000
 800a704:	10c00010 	.word	0x10c00010
 800a708:	04300002 	.word	0x04300002

0800a70c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08a      	sub	sp, #40	; 0x28
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a714:	f107 0314 	add.w	r3, r7, #20
 800a718:	2200      	movs	r2, #0
 800a71a:	601a      	str	r2, [r3, #0]
 800a71c:	605a      	str	r2, [r3, #4]
 800a71e:	609a      	str	r2, [r3, #8]
 800a720:	60da      	str	r2, [r3, #12]
 800a722:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a27      	ldr	r2, [pc, #156]	; (800a7c8 <HAL_ADC_MspInit+0xbc>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d147      	bne.n	800a7be <HAL_ADC_MspInit+0xb2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800a72e:	4b27      	ldr	r3, [pc, #156]	; (800a7cc <HAL_ADC_MspInit+0xc0>)
 800a730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a734:	4a25      	ldr	r2, [pc, #148]	; (800a7cc <HAL_ADC_MspInit+0xc0>)
 800a736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a73a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a73e:	4b23      	ldr	r3, [pc, #140]	; (800a7cc <HAL_ADC_MspInit+0xc0>)
 800a740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a748:	613b      	str	r3, [r7, #16]
 800a74a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a74c:	4b1f      	ldr	r3, [pc, #124]	; (800a7cc <HAL_ADC_MspInit+0xc0>)
 800a74e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a752:	4a1e      	ldr	r2, [pc, #120]	; (800a7cc <HAL_ADC_MspInit+0xc0>)
 800a754:	f043 0320 	orr.w	r3, r3, #32
 800a758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a75c:	4b1b      	ldr	r3, [pc, #108]	; (800a7cc <HAL_ADC_MspInit+0xc0>)
 800a75e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a762:	f003 0320 	and.w	r3, r3, #32
 800a766:	60fb      	str	r3, [r7, #12]
 800a768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a76a:	4b18      	ldr	r3, [pc, #96]	; (800a7cc <HAL_ADC_MspInit+0xc0>)
 800a76c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a770:	4a16      	ldr	r2, [pc, #88]	; (800a7cc <HAL_ADC_MspInit+0xc0>)
 800a772:	f043 0304 	orr.w	r3, r3, #4
 800a776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a77a:	4b14      	ldr	r3, [pc, #80]	; (800a7cc <HAL_ADC_MspInit+0xc0>)
 800a77c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	60bb      	str	r3, [r7, #8]
 800a786:	68bb      	ldr	r3, [r7, #8]
    PF5     ------> ADC3_INP4
    PF7     ------> ADC3_INP3
    PF9     ------> ADC3_INP2
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 800a788:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800a78c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a78e:	2303      	movs	r3, #3
 800a790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a792:	2300      	movs	r3, #0
 800a794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a796:	f107 0314 	add.w	r3, r7, #20
 800a79a:	4619      	mov	r1, r3
 800a79c:	480c      	ldr	r0, [pc, #48]	; (800a7d0 <HAL_ADC_MspInit+0xc4>)
 800a79e:	f7f8 f8bb 	bl	8002918 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800a7a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800a7a6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800a7aa:	f7f5 ffaf 	bl	800070c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	207f      	movs	r0, #127	; 0x7f
 800a7b4:	f7f8 f87b 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800a7b8:	207f      	movs	r0, #127	; 0x7f
 800a7ba:	f7f8 f892 	bl	80028e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800a7be:	bf00      	nop
 800a7c0:	3728      	adds	r7, #40	; 0x28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	58026000 	.word	0x58026000
 800a7cc:	58024400 	.word	0x58024400
 800a7d0:	58021400 	.word	0x58021400

0800a7d4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08e      	sub	sp, #56	; 0x38
 800a7d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7de:	2200      	movs	r2, #0
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	605a      	str	r2, [r3, #4]
 800a7e4:	609a      	str	r2, [r3, #8]
 800a7e6:	60da      	str	r2, [r3, #12]
 800a7e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7ea:	4b92      	ldr	r3, [pc, #584]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a7ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7f0:	4a90      	ldr	r2, [pc, #576]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a7f2:	f043 0304 	orr.w	r3, r3, #4
 800a7f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7fa:	4b8e      	ldr	r3, [pc, #568]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a7fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a800:	f003 0304 	and.w	r3, r3, #4
 800a804:	623b      	str	r3, [r7, #32]
 800a806:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a808:	4b8a      	ldr	r3, [pc, #552]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a80a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a80e:	4a89      	ldr	r2, [pc, #548]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a810:	f043 0320 	orr.w	r3, r3, #32
 800a814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a818:	4b86      	ldr	r3, [pc, #536]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a81a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a81e:	f003 0320 	and.w	r3, r3, #32
 800a822:	61fb      	str	r3, [r7, #28]
 800a824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a826:	4b83      	ldr	r3, [pc, #524]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a82c:	4a81      	ldr	r2, [pc, #516]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a82e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a836:	4b7f      	ldr	r3, [pc, #508]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a840:	61bb      	str	r3, [r7, #24]
 800a842:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a844:	4b7b      	ldr	r3, [pc, #492]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a84a:	4a7a      	ldr	r2, [pc, #488]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a84c:	f043 0301 	orr.w	r3, r3, #1
 800a850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a854:	4b77      	ldr	r3, [pc, #476]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a85a:	f003 0301 	and.w	r3, r3, #1
 800a85e:	617b      	str	r3, [r7, #20]
 800a860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a862:	4b74      	ldr	r3, [pc, #464]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a868:	4a72      	ldr	r2, [pc, #456]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a86a:	f043 0302 	orr.w	r3, r3, #2
 800a86e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a872:	4b70      	ldr	r3, [pc, #448]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a878:	f003 0302 	and.w	r3, r3, #2
 800a87c:	613b      	str	r3, [r7, #16]
 800a87e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a880:	4b6c      	ldr	r3, [pc, #432]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a886:	4a6b      	ldr	r2, [pc, #428]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a888:	f043 0310 	orr.w	r3, r3, #16
 800a88c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a890:	4b68      	ldr	r3, [pc, #416]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a896:	f003 0310 	and.w	r3, r3, #16
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a89e:	4b65      	ldr	r3, [pc, #404]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a8a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8a4:	4a63      	ldr	r2, [pc, #396]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a8a6:	f043 0308 	orr.w	r3, r3, #8
 800a8aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a8ae:	4b61      	ldr	r3, [pc, #388]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a8b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8b4:	f003 0308 	and.w	r3, r3, #8
 800a8b8:	60bb      	str	r3, [r7, #8]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a8bc:	4b5d      	ldr	r3, [pc, #372]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a8be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8c2:	4a5c      	ldr	r2, [pc, #368]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a8c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a8cc:	4b59      	ldr	r3, [pc, #356]	; (800aa34 <MX_GPIO_Init+0x260>)
 800a8ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d6:	607b      	str	r3, [r7, #4]
 800a8d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f244 0181 	movw	r1, #16513	; 0x4081
 800a8e0:	4855      	ldr	r0, [pc, #340]	; (800aa38 <MX_GPIO_Init+0x264>)
 800a8e2:	f7f8 f9c9 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a8ec:	4853      	ldr	r0, [pc, #332]	; (800aa3c <MX_GPIO_Init+0x268>)
 800a8ee:	f7f8 f9c3 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	2102      	movs	r1, #2
 800a8f6:	4852      	ldr	r0, [pc, #328]	; (800aa40 <MX_GPIO_Init+0x26c>)
 800a8f8:	f7f8 f9be 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a8fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a902:	2300      	movs	r3, #0
 800a904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a906:	2300      	movs	r3, #0
 800a908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a90a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a90e:	4619      	mov	r1, r3
 800a910:	484c      	ldr	r0, [pc, #304]	; (800aa44 <MX_GPIO_Init+0x270>)
 800a912:	f7f8 f801 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a916:	2332      	movs	r3, #50	; 0x32
 800a918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a91a:	2302      	movs	r3, #2
 800a91c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a922:	2300      	movs	r3, #0
 800a924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a926:	230b      	movs	r3, #11
 800a928:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a92a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a92e:	4619      	mov	r1, r3
 800a930:	4844      	ldr	r0, [pc, #272]	; (800aa44 <MX_GPIO_Init+0x270>)
 800a932:	f7f7 fff1 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a936:	2386      	movs	r3, #134	; 0x86
 800a938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a93a:	2302      	movs	r3, #2
 800a93c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a93e:	2300      	movs	r3, #0
 800a940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a942:	2300      	movs	r3, #0
 800a944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a946:	230b      	movs	r3, #11
 800a948:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a94a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a94e:	4619      	mov	r1, r3
 800a950:	483d      	ldr	r0, [pc, #244]	; (800aa48 <MX_GPIO_Init+0x274>)
 800a952:	f7f7 ffe1 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB7 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_7;
 800a956:	f244 0381 	movw	r3, #16513	; 0x4081
 800a95a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a95c:	2301      	movs	r3, #1
 800a95e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a960:	2300      	movs	r3, #0
 800a962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a964:	2300      	movs	r3, #0
 800a966:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a96c:	4619      	mov	r1, r3
 800a96e:	4832      	ldr	r0, [pc, #200]	; (800aa38 <MX_GPIO_Init+0x264>)
 800a970:	f7f7 ffd2 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a97a:	2302      	movs	r3, #2
 800a97c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a982:	2300      	movs	r3, #0
 800a984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a986:	230b      	movs	r3, #11
 800a988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a98a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a98e:	4619      	mov	r1, r3
 800a990:	4829      	ldr	r0, [pc, #164]	; (800aa38 <MX_GPIO_Init+0x264>)
 800a992:	f7f7 ffc1 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800a996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a99a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a99c:	2301      	movs	r3, #1
 800a99e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800a9a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4823      	ldr	r0, [pc, #140]	; (800aa3c <MX_GPIO_Init+0x268>)
 800a9b0:	f7f7 ffb2 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800a9b4:	2380      	movs	r3, #128	; 0x80
 800a9b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a9b8:	4b24      	ldr	r3, [pc, #144]	; (800aa4c <MX_GPIO_Init+0x278>)
 800a9ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800a9c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4822      	ldr	r0, [pc, #136]	; (800aa50 <MX_GPIO_Init+0x27c>)
 800a9c8:	f7f7 ffa6 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800a9cc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800a9de:	230a      	movs	r3, #10
 800a9e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	4817      	ldr	r0, [pc, #92]	; (800aa48 <MX_GPIO_Init+0x274>)
 800a9ea:	f7f7 ff95 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800a9ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a9f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aa00:	230b      	movs	r3, #11
 800aa02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800aa04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa08:	4619      	mov	r1, r3
 800aa0a:	4811      	ldr	r0, [pc, #68]	; (800aa50 <MX_GPIO_Init+0x27c>)
 800aa0c:	f7f7 ff84 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800aa10:	2302      	movs	r3, #2
 800aa12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa14:	2301      	movs	r3, #1
 800aa16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800aa20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa24:	4619      	mov	r1, r3
 800aa26:	4806      	ldr	r0, [pc, #24]	; (800aa40 <MX_GPIO_Init+0x26c>)
 800aa28:	f7f7 ff76 	bl	8002918 <HAL_GPIO_Init>

}
 800aa2c:	bf00      	nop
 800aa2e:	3738      	adds	r7, #56	; 0x38
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	58024400 	.word	0x58024400
 800aa38:	58020400 	.word	0x58020400
 800aa3c:	58020c00 	.word	0x58020c00
 800aa40:	58021000 	.word	0x58021000
 800aa44:	58020800 	.word	0x58020800
 800aa48:	58020000 	.word	0x58020000
 800aa4c:	11110000 	.word	0x11110000
 800aa50:	58021800 	.word	0x58021800

0800aa54 <SCB_EnableICache>:
{
 800aa54:	b480      	push	{r7}
 800aa56:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800aa58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800aa5c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800aa60:	4b0b      	ldr	r3, [pc, #44]	; (800aa90 <SCB_EnableICache+0x3c>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800aa68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800aa6c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <SCB_EnableICache+0x3c>)
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	4a06      	ldr	r2, [pc, #24]	; (800aa90 <SCB_EnableICache+0x3c>)
 800aa76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa7a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800aa7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800aa80:	f3bf 8f6f 	isb	sy
}
 800aa84:	bf00      	nop
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	e000ed00 	.word	0xe000ed00

0800aa94 <SCB_EnableDCache>:
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800aa9a:	4b1d      	ldr	r3, [pc, #116]	; (800ab10 <SCB_EnableDCache+0x7c>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800aaa2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800aaa6:	4b1a      	ldr	r3, [pc, #104]	; (800ab10 <SCB_EnableDCache+0x7c>)
 800aaa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaac:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	0b5b      	lsrs	r3, r3, #13
 800aab2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800aab6:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	08db      	lsrs	r3, r3, #3
 800aabc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aac0:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800aaca:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800aad0:	490f      	ldr	r1, [pc, #60]	; (800ab10 <SCB_EnableDCache+0x7c>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	1e5a      	subs	r2, r3, #1
 800aadc:	60ba      	str	r2, [r7, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1ef      	bne.n	800aac2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	1e5a      	subs	r2, r3, #1
 800aae6:	60fa      	str	r2, [r7, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e5      	bne.n	800aab8 <SCB_EnableDCache+0x24>
 800aaec:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800aaf0:	4b07      	ldr	r3, [pc, #28]	; (800ab10 <SCB_EnableDCache+0x7c>)
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	4a06      	ldr	r2, [pc, #24]	; (800ab10 <SCB_EnableDCache+0x7c>)
 800aaf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aafa:	6153      	str	r3, [r2, #20]
 800aafc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ab00:	f3bf 8f6f 	isb	sy
}
 800ab04:	bf00      	nop
 800ab06:	3714      	adds	r7, #20
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	e000ed00 	.word	0xe000ed00

0800ab14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800ab18:	f7ff ff9c 	bl	800aa54 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800ab1c:	f7ff ffba 	bl	800aa94 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ab20:	f7f5 fd5a 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ab24:	f000 f80c 	bl	800ab40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ab28:	f7ff fe54 	bl	800a7d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800ab2c:	f000 fb80 	bl	800b230 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800ab30:	f000 f9fa 	bl	800af28 <MX_TIM1_Init>
  MX_ADC3_Init();
 800ab34:	f7ff fd34 	bl	800a5a0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  cppWrapper();
 800ab38:	f7ff fcec 	bl	800a514 <cppWrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ab3c:	e7fe      	b.n	800ab3c <main+0x28>
	...

0800ab40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b0cc      	sub	sp, #304	; 0x130
 800ab44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ab46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ab4a:	224c      	movs	r2, #76	; 0x4c
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fd0a 	bl	800b568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ab54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ab58:	2220      	movs	r2, #32
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 fd03 	bl	800b568 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ab62:	f107 0308 	add.w	r3, r7, #8
 800ab66:	4618      	mov	r0, r3
 800ab68:	23bc      	movs	r3, #188	; 0xbc
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	f000 fcfb 	bl	800b568 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800ab72:	2002      	movs	r0, #2
 800ab74:	f7f8 f89a 	bl	8002cac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab78:	1d3b      	adds	r3, r7, #4
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	4b5c      	ldr	r3, [pc, #368]	; (800acf0 <SystemClock_Config+0x1b0>)
 800ab80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab82:	4a5b      	ldr	r2, [pc, #364]	; (800acf0 <SystemClock_Config+0x1b0>)
 800ab84:	f023 0301 	bic.w	r3, r3, #1
 800ab88:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab8a:	4b59      	ldr	r3, [pc, #356]	; (800acf0 <SystemClock_Config+0x1b0>)
 800ab8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8e:	f003 0201 	and.w	r2, r3, #1
 800ab92:	1d3b      	adds	r3, r7, #4
 800ab94:	601a      	str	r2, [r3, #0]
 800ab96:	4b57      	ldr	r3, [pc, #348]	; (800acf4 <SystemClock_Config+0x1b4>)
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	4a56      	ldr	r2, [pc, #344]	; (800acf4 <SystemClock_Config+0x1b4>)
 800ab9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aba0:	6193      	str	r3, [r2, #24]
 800aba2:	4b54      	ldr	r3, [pc, #336]	; (800acf4 <SystemClock_Config+0x1b4>)
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800abaa:	1d3b      	adds	r3, r7, #4
 800abac:	601a      	str	r2, [r3, #0]
 800abae:	1d3b      	adds	r3, r7, #4
 800abb0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800abb2:	bf00      	nop
 800abb4:	4b4f      	ldr	r3, [pc, #316]	; (800acf4 <SystemClock_Config+0x1b4>)
 800abb6:	699b      	ldr	r3, [r3, #24]
 800abb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abc0:	d1f8      	bne.n	800abb4 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800abc2:	4b4d      	ldr	r3, [pc, #308]	; (800acf8 <SystemClock_Config+0x1b8>)
 800abc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc6:	f023 0303 	bic.w	r3, r3, #3
 800abca:	4a4b      	ldr	r2, [pc, #300]	; (800acf8 <SystemClock_Config+0x1b8>)
 800abcc:	f043 0302 	orr.w	r3, r3, #2
 800abd0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800abd2:	2301      	movs	r3, #1
 800abd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800abd8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800abdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800abe0:	2302      	movs	r3, #2
 800abe2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800abe6:	2302      	movs	r3, #2
 800abe8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800abec:	2301      	movs	r3, #1
 800abee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 100;
 800abf2:	2364      	movs	r3, #100	; 0x64
 800abf4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800abf8:	2302      	movs	r3, #2
 800abfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800abfe:	2304      	movs	r3, #4
 800ac00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800ac04:	2302      	movs	r3, #2
 800ac06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800ac0a:	230c      	movs	r3, #12
 800ac0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ac1c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7f8 f87b 	bl	8002d1c <HAL_RCC_OscConfig>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d001      	beq.n	800ac30 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800ac2c:	f000 f868 	bl	800ad00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ac30:	233f      	movs	r3, #63	; 0x3f
 800ac32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ac36:	2303      	movs	r3, #3
 800ac38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800ac42:	2308      	movs	r3, #8
 800ac44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800ac48:	2340      	movs	r3, #64	; 0x40
 800ac4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800ac4e:	2340      	movs	r3, #64	; 0x40
 800ac50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800ac54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800ac5c:	2340      	movs	r3, #64	; 0x40
 800ac5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800ac62:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ac66:	2102      	movs	r1, #2
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7f8 fc0f 	bl	800348c <HAL_RCC_ClockConfig>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <SystemClock_Config+0x138>
  {
    Error_Handler();
 800ac74:	f000 f844 	bl	800ad00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC;
 800ac78:	f107 0308 	add.w	r3, r7, #8
 800ac7c:	4a1f      	ldr	r2, [pc, #124]	; (800acfc <SystemClock_Config+0x1bc>)
 800ac7e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800ac80:	f107 0308 	add.w	r3, r7, #8
 800ac84:	2201      	movs	r2, #1
 800ac86:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 800ac88:	f107 0308 	add.w	r3, r7, #8
 800ac8c:	2213      	movs	r2, #19
 800ac8e:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800ac90:	f107 0308 	add.w	r3, r7, #8
 800ac94:	2202      	movs	r2, #2
 800ac96:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800ac98:	f107 0308 	add.w	r3, r7, #8
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800aca0:	f107 0308 	add.w	r3, r7, #8
 800aca4:	2202      	movs	r2, #2
 800aca6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800aca8:	f107 0308 	add.w	r3, r7, #8
 800acac:	22c0      	movs	r2, #192	; 0xc0
 800acae:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800acb0:	f107 0308 	add.w	r3, r7, #8
 800acb4:	2220      	movs	r2, #32
 800acb6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800acb8:	f107 0308 	add.w	r3, r7, #8
 800acbc:	2200      	movs	r2, #0
 800acbe:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800acc0:	f107 0308 	add.w	r3, r7, #8
 800acc4:	2200      	movs	r2, #0
 800acc6:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800acc8:	f107 0308 	add.w	r3, r7, #8
 800accc:	2200      	movs	r2, #0
 800acce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800acd2:	f107 0308 	add.w	r3, r7, #8
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7f8 ff32 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <SystemClock_Config+0x1a6>
  {
    Error_Handler();
 800ace2:	f000 f80d 	bl	800ad00 <Error_Handler>
  }
}
 800ace6:	bf00      	nop
 800ace8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	58000400 	.word	0x58000400
 800acf4:	58024800 	.word	0x58024800
 800acf8:	58024400 	.word	0x58024400
 800acfc:	00080002 	.word	0x00080002

0800ad00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ad00:	b480      	push	{r7}
 800ad02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ad04:	bf00      	nop
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
	...

0800ad10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad16:	4b0a      	ldr	r3, [pc, #40]	; (800ad40 <HAL_MspInit+0x30>)
 800ad18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad1c:	4a08      	ldr	r2, [pc, #32]	; (800ad40 <HAL_MspInit+0x30>)
 800ad1e:	f043 0302 	orr.w	r3, r3, #2
 800ad22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ad26:	4b06      	ldr	r3, [pc, #24]	; (800ad40 <HAL_MspInit+0x30>)
 800ad28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad2c:	f003 0302 	and.w	r3, r3, #2
 800ad30:	607b      	str	r3, [r7, #4]
 800ad32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	58024400 	.word	0x58024400

0800ad44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ad44:	b480      	push	{r7}
 800ad46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ad48:	bf00      	nop
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ad52:	b480      	push	{r7}
 800ad54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ad56:	e7fe      	b.n	800ad56 <HardFault_Handler+0x4>

0800ad58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ad5c:	e7fe      	b.n	800ad5c <MemManage_Handler+0x4>

0800ad5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ad5e:	b480      	push	{r7}
 800ad60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ad62:	e7fe      	b.n	800ad62 <BusFault_Handler+0x4>

0800ad64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ad64:	b480      	push	{r7}
 800ad66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ad68:	e7fe      	b.n	800ad68 <UsageFault_Handler+0x4>

0800ad6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ad6e:	bf00      	nop
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ad7c:	bf00      	nop
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ad86:	b480      	push	{r7}
 800ad88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ad8a:	bf00      	nop
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ad98:	f7f5 fc8c 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ad9c:	bf00      	nop
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ada4:	4802      	ldr	r0, [pc, #8]	; (800adb0 <TIM1_BRK_IRQHandler+0x10>)
 800ada6:	f7fa fe2b 	bl	8005a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800adaa:	bf00      	nop
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	24003060 	.word	0x24003060

0800adb4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC4) != RESET) {
 800adba:	4b24      	ldr	r3, [pc, #144]	; (800ae4c <TIM1_UP_IRQHandler+0x98>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	f003 0310 	and.w	r3, r3, #16
 800adc4:	2b10      	cmp	r3, #16
 800adc6:	d139      	bne.n	800ae3c <TIM1_UP_IRQHandler+0x88>

		int c1b1 = __HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1);
 800adc8:	4b20      	ldr	r3, [pc, #128]	; (800ae4c <TIM1_UP_IRQHandler+0x98>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	f003 0302 	and.w	r3, r3, #2
 800add2:	2b02      	cmp	r3, #2
 800add4:	bf0c      	ite	eq
 800add6:	2301      	moveq	r3, #1
 800add8:	2300      	movne	r3, #0
 800adda:	b2db      	uxtb	r3, r3
 800addc:	617b      	str	r3, [r7, #20]
		int c1b2 = __HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC1);
 800adde:	4b1b      	ldr	r3, [pc, #108]	; (800ae4c <TIM1_UP_IRQHandler+0x98>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	2b02      	cmp	r3, #2
 800adea:	bf0c      	ite	eq
 800adec:	2301      	moveq	r3, #1
 800adee:	2300      	movne	r3, #0
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	613b      	str	r3, [r7, #16]
		int c1b3 = (htim1.Instance->CCMR1 & TIM_CCMR1_CC1S);
 800adf4:	4b15      	ldr	r3, [pc, #84]	; (800ae4c <TIM1_UP_IRQHandler+0x98>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	f003 0303 	and.w	r3, r3, #3
 800adfe:	60fb      	str	r3, [r7, #12]
		int c4b1 = __HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC4);
 800ae00:	4b12      	ldr	r3, [pc, #72]	; (800ae4c <TIM1_UP_IRQHandler+0x98>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	f003 0310 	and.w	r3, r3, #16
 800ae0a:	2b10      	cmp	r3, #16
 800ae0c:	bf0c      	ite	eq
 800ae0e:	2301      	moveq	r3, #1
 800ae10:	2300      	movne	r3, #0
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	60bb      	str	r3, [r7, #8]
		int c4b2 = __HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC4);
 800ae16:	4b0d      	ldr	r3, [pc, #52]	; (800ae4c <TIM1_UP_IRQHandler+0x98>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	f003 0310 	and.w	r3, r3, #16
 800ae20:	2b10      	cmp	r3, #16
 800ae22:	bf0c      	ite	eq
 800ae24:	2301      	moveq	r3, #1
 800ae26:	2300      	movne	r3, #0
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	607b      	str	r3, [r7, #4]
		int c4b3 = (htim1.Instance->CCMR2 & TIM_CCMR2_CC4S);
 800ae2c:	4b07      	ldr	r3, [pc, #28]	; (800ae4c <TIM1_UP_IRQHandler+0x98>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae36:	603b      	str	r3, [r7, #0]

		HighFreqTask();
 800ae38:	f7ff fb76 	bl	800a528 <HighFreqTask>
	}
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ae3c:	4803      	ldr	r0, [pc, #12]	; (800ae4c <TIM1_UP_IRQHandler+0x98>)
 800ae3e:	f7fa fddf 	bl	8005a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800ae42:	bf00      	nop
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	24003060 	.word	0x24003060

0800ae50 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800ae54:	4802      	ldr	r0, [pc, #8]	; (800ae60 <ADC3_IRQHandler+0x10>)
 800ae56:	f7f5 ffb5 	bl	8000dc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800ae5a:	bf00      	nop
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	24002ffc 	.word	0x24002ffc

0800ae64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ae64:	b480      	push	{r7}
 800ae66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ae68:	4b29      	ldr	r3, [pc, #164]	; (800af10 <SystemInit+0xac>)
 800ae6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae6e:	4a28      	ldr	r2, [pc, #160]	; (800af10 <SystemInit+0xac>)
 800ae70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800ae78:	4b26      	ldr	r3, [pc, #152]	; (800af14 <SystemInit+0xb0>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a25      	ldr	r2, [pc, #148]	; (800af14 <SystemInit+0xb0>)
 800ae7e:	f043 0301 	orr.w	r3, r3, #1
 800ae82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ae84:	4b23      	ldr	r3, [pc, #140]	; (800af14 <SystemInit+0xb0>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800ae8a:	4b22      	ldr	r3, [pc, #136]	; (800af14 <SystemInit+0xb0>)
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	4921      	ldr	r1, [pc, #132]	; (800af14 <SystemInit+0xb0>)
 800ae90:	4b21      	ldr	r3, [pc, #132]	; (800af18 <SystemInit+0xb4>)
 800ae92:	4013      	ands	r3, r2
 800ae94:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800ae96:	4b1f      	ldr	r3, [pc, #124]	; (800af14 <SystemInit+0xb0>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800ae9c:	4b1d      	ldr	r3, [pc, #116]	; (800af14 <SystemInit+0xb0>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800aea2:	4b1c      	ldr	r3, [pc, #112]	; (800af14 <SystemInit+0xb0>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800aea8:	4b1a      	ldr	r3, [pc, #104]	; (800af14 <SystemInit+0xb0>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800aeae:	4b19      	ldr	r3, [pc, #100]	; (800af14 <SystemInit+0xb0>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800aeb4:	4b17      	ldr	r3, [pc, #92]	; (800af14 <SystemInit+0xb0>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800aeba:	4b16      	ldr	r3, [pc, #88]	; (800af14 <SystemInit+0xb0>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800aec0:	4b14      	ldr	r3, [pc, #80]	; (800af14 <SystemInit+0xb0>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800aec6:	4b13      	ldr	r3, [pc, #76]	; (800af14 <SystemInit+0xb0>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800aecc:	4b11      	ldr	r3, [pc, #68]	; (800af14 <SystemInit+0xb0>)
 800aece:	2200      	movs	r2, #0
 800aed0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800aed2:	4b10      	ldr	r3, [pc, #64]	; (800af14 <SystemInit+0xb0>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800aed8:	4b0e      	ldr	r3, [pc, #56]	; (800af14 <SystemInit+0xb0>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a0d      	ldr	r2, [pc, #52]	; (800af14 <SystemInit+0xb0>)
 800aede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aee2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800aee4:	4b0b      	ldr	r3, [pc, #44]	; (800af14 <SystemInit+0xb0>)
 800aee6:	2200      	movs	r2, #0
 800aee8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800aeea:	4b0c      	ldr	r3, [pc, #48]	; (800af1c <SystemInit+0xb8>)
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	4b0c      	ldr	r3, [pc, #48]	; (800af20 <SystemInit+0xbc>)
 800aef0:	4013      	ands	r3, r2
 800aef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aef6:	d202      	bcs.n	800aefe <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800aef8:	4b0a      	ldr	r3, [pc, #40]	; (800af24 <SystemInit+0xc0>)
 800aefa:	2201      	movs	r2, #1
 800aefc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800aefe:	4b04      	ldr	r3, [pc, #16]	; (800af10 <SystemInit+0xac>)
 800af00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800af04:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800af06:	bf00      	nop
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr
 800af10:	e000ed00 	.word	0xe000ed00
 800af14:	58024400 	.word	0x58024400
 800af18:	eaf6ed7f 	.word	0xeaf6ed7f
 800af1c:	5c001000 	.word	0x5c001000
 800af20:	ffff0000 	.word	0xffff0000
 800af24:	51008108 	.word	0x51008108

0800af28 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b09e      	sub	sp, #120	; 0x78
 800af2c:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800af2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	605a      	str	r2, [r3, #4]
 800af38:	609a      	str	r2, [r3, #8]
 800af3a:	60da      	str	r2, [r3, #12]
 800af3c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800af42:	2200      	movs	r2, #0
 800af44:	601a      	str	r2, [r3, #0]
 800af46:	605a      	str	r2, [r3, #4]
 800af48:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800af4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	605a      	str	r2, [r3, #4]
 800af54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800af56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]
 800af5e:	605a      	str	r2, [r3, #4]
 800af60:	609a      	str	r2, [r3, #8]
 800af62:	60da      	str	r2, [r3, #12]
 800af64:	611a      	str	r2, [r3, #16]
 800af66:	615a      	str	r2, [r3, #20]
 800af68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800af6a:	1d3b      	adds	r3, r7, #4
 800af6c:	222c      	movs	r2, #44	; 0x2c
 800af6e:	2100      	movs	r1, #0
 800af70:	4618      	mov	r0, r3
 800af72:	f000 faf9 	bl	800b568 <memset>

  htim1.Instance = TIM1;
 800af76:	4b61      	ldr	r3, [pc, #388]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800af78:	4a61      	ldr	r2, [pc, #388]	; (800b100 <MX_TIM1_Init+0x1d8>)
 800af7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800af7c:	4b5f      	ldr	r3, [pc, #380]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800af7e:	2200      	movs	r2, #0
 800af80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800af82:	4b5e      	ldr	r3, [pc, #376]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800af84:	2220      	movs	r2, #32
 800af86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800af88:	4b5c      	ldr	r3, [pc, #368]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800af8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800af90:	4b5a      	ldr	r3, [pc, #360]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800af92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800af98:	4b58      	ldr	r3, [pc, #352]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800af9e:	4b57      	ldr	r3, [pc, #348]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800afa0:	2280      	movs	r2, #128	; 0x80
 800afa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800afa4:	4855      	ldr	r0, [pc, #340]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800afa6:	f7fa fc47 	bl	8005838 <HAL_TIM_Base_Init>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 800afb0:	f7ff fea6 	bl	800ad00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800afb4:	4851      	ldr	r0, [pc, #324]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800afb6:	f7fa fc95 	bl	80058e4 <HAL_TIM_PWM_Init>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800afc0:	f7ff fe9e 	bl	800ad00 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800afc4:	2300      	movs	r3, #0
 800afc6:	667b      	str	r3, [r7, #100]	; 0x64
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800afc8:	2300      	movs	r3, #0
 800afca:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800afcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800afd0:	4619      	mov	r1, r3
 800afd2:	484a      	ldr	r0, [pc, #296]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800afd4:	f7fa ff4c 	bl	8005e70 <HAL_TIM_SlaveConfigSynchro>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800afde:	f7ff fe8f 	bl	800ad00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800afe2:	2300      	movs	r3, #0
 800afe4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800afe6:	2300      	movs	r3, #0
 800afe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800afea:	2300      	movs	r3, #0
 800afec:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800afee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aff2:	4619      	mov	r1, r3
 800aff4:	4841      	ldr	r0, [pc, #260]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800aff6:	f7fb fc5f 	bl	80068b8 <HAL_TIMEx_MasterConfigSynchronization>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800b000:	f7ff fe7e 	bl	800ad00 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800b004:	2301      	movs	r3, #1
 800b006:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800b008:	2301      	movs	r3, #1
 800b00a:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800b00c:	2300      	movs	r3, #0
 800b00e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800b010:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b014:	461a      	mov	r2, r3
 800b016:	2101      	movs	r1, #1
 800b018:	4838      	ldr	r0, [pc, #224]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800b01a:	f7fb fd27 	bl	8006a6c <HAL_TIMEx_ConfigBreakInput>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d001      	beq.n	800b028 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800b024:	f7ff fe6c 	bl	800ad00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b028:	2360      	movs	r3, #96	; 0x60
 800b02a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b030:	2300      	movs	r3, #0
 800b032:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b034:	2300      	movs	r3, #0
 800b036:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b038:	2300      	movs	r3, #0
 800b03a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b03c:	2300      	movs	r3, #0
 800b03e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b040:	2300      	movs	r3, #0
 800b042:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b044:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b048:	2200      	movs	r2, #0
 800b04a:	4619      	mov	r1, r3
 800b04c:	482b      	ldr	r0, [pc, #172]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800b04e:	f7fa fdf7 	bl	8005c40 <HAL_TIM_PWM_ConfigChannel>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 800b058:	f7ff fe52 	bl	800ad00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b05c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b060:	2204      	movs	r2, #4
 800b062:	4619      	mov	r1, r3
 800b064:	4825      	ldr	r0, [pc, #148]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800b066:	f7fa fdeb 	bl	8005c40 <HAL_TIM_PWM_ConfigChannel>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 800b070:	f7ff fe46 	bl	800ad00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b078:	2208      	movs	r2, #8
 800b07a:	4619      	mov	r1, r3
 800b07c:	481f      	ldr	r0, [pc, #124]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800b07e:	f7fa fddf 	bl	8005c40 <HAL_TIM_PWM_ConfigChannel>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 800b088:	f7ff fe3a 	bl	800ad00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800b08c:	2370      	movs	r3, #112	; 0x70
 800b08e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b094:	220c      	movs	r2, #12
 800b096:	4619      	mov	r1, r3
 800b098:	4818      	ldr	r0, [pc, #96]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800b09a:	f7fa fdd1 	bl	8005c40 <HAL_TIM_PWM_ConfigChannel>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d001      	beq.n	800b0a8 <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 800b0a4:	f7ff fe2c 	bl	800ad00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800b0b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b0be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800b0cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0d0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800b0da:	1d3b      	adds	r3, r7, #4
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4807      	ldr	r0, [pc, #28]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800b0e0:	f7fb fc46 	bl	8006970 <HAL_TIMEx_ConfigBreakDeadTime>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <MX_TIM1_Init+0x1c6>
  {
    Error_Handler();
 800b0ea:	f7ff fe09 	bl	800ad00 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800b0ee:	4803      	ldr	r0, [pc, #12]	; (800b0fc <MX_TIM1_Init+0x1d4>)
 800b0f0:	f000 f862 	bl	800b1b8 <HAL_TIM_MspPostInit>

}
 800b0f4:	bf00      	nop
 800b0f6:	3778      	adds	r7, #120	; 0x78
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	24003060 	.word	0x24003060
 800b100:	40010000 	.word	0x40010000

0800b104 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b08a      	sub	sp, #40	; 0x28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b10c:	f107 0314 	add.w	r3, r7, #20
 800b110:	2200      	movs	r2, #0
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	605a      	str	r2, [r3, #4]
 800b116:	609a      	str	r2, [r3, #8]
 800b118:	60da      	str	r2, [r3, #12]
 800b11a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a22      	ldr	r2, [pc, #136]	; (800b1ac <HAL_TIM_Base_MspInit+0xa8>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d13d      	bne.n	800b1a2 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */
//
  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b126:	4b22      	ldr	r3, [pc, #136]	; (800b1b0 <HAL_TIM_Base_MspInit+0xac>)
 800b128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b12c:	4a20      	ldr	r2, [pc, #128]	; (800b1b0 <HAL_TIM_Base_MspInit+0xac>)
 800b12e:	f043 0301 	orr.w	r3, r3, #1
 800b132:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800b136:	4b1e      	ldr	r3, [pc, #120]	; (800b1b0 <HAL_TIM_Base_MspInit+0xac>)
 800b138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b13c:	f003 0301 	and.w	r3, r3, #1
 800b140:	613b      	str	r3, [r7, #16]
 800b142:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b144:	4b1a      	ldr	r3, [pc, #104]	; (800b1b0 <HAL_TIM_Base_MspInit+0xac>)
 800b146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b14a:	4a19      	ldr	r2, [pc, #100]	; (800b1b0 <HAL_TIM_Base_MspInit+0xac>)
 800b14c:	f043 0301 	orr.w	r3, r3, #1
 800b150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b154:	4b16      	ldr	r3, [pc, #88]	; (800b1b0 <HAL_TIM_Base_MspInit+0xac>)
 800b156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b15a:	f003 0301 	and.w	r3, r3, #1
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA6     ------> TIM1_BKIN 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b162:	2340      	movs	r3, #64	; 0x40
 800b164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b166:	2302      	movs	r3, #2
 800b168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b16e:	2300      	movs	r3, #0
 800b170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b172:	2301      	movs	r3, #1
 800b174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b176:	f107 0314 	add.w	r3, r7, #20
 800b17a:	4619      	mov	r1, r3
 800b17c:	480d      	ldr	r0, [pc, #52]	; (800b1b4 <HAL_TIM_Base_MspInit+0xb0>)
 800b17e:	f7f7 fbcb 	bl	8002918 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800b182:	2200      	movs	r2, #0
 800b184:	2100      	movs	r1, #0
 800b186:	2018      	movs	r0, #24
 800b188:	f7f7 fb91 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800b18c:	2018      	movs	r0, #24
 800b18e:	f7f7 fba8 	bl	80028e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800b192:	2200      	movs	r2, #0
 800b194:	2100      	movs	r1, #0
 800b196:	2019      	movs	r0, #25
 800b198:	f7f7 fb89 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800b19c:	2019      	movs	r0, #25
 800b19e:	f7f7 fba0 	bl	80028e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */
//
  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800b1a2:	bf00      	nop
 800b1a4:	3728      	adds	r7, #40	; 0x28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40010000 	.word	0x40010000
 800b1b0:	58024400 	.word	0x58024400
 800b1b4:	58020000 	.word	0x58020000

0800b1b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b088      	sub	sp, #32
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1c0:	f107 030c 	add.w	r3, r7, #12
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]
 800b1c8:	605a      	str	r2, [r3, #4]
 800b1ca:	609a      	str	r2, [r3, #8]
 800b1cc:	60da      	str	r2, [r3, #12]
 800b1ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a13      	ldr	r2, [pc, #76]	; (800b224 <HAL_TIM_MspPostInit+0x6c>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d11f      	bne.n	800b21a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */
//
  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b1da:	4b13      	ldr	r3, [pc, #76]	; (800b228 <HAL_TIM_MspPostInit+0x70>)
 800b1dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1e0:	4a11      	ldr	r2, [pc, #68]	; (800b228 <HAL_TIM_MspPostInit+0x70>)
 800b1e2:	f043 0310 	orr.w	r3, r3, #16
 800b1e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b1ea:	4b0f      	ldr	r3, [pc, #60]	; (800b228 <HAL_TIM_MspPostInit+0x70>)
 800b1ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1f0:	f003 0310 	and.w	r3, r3, #16
 800b1f4:	60bb      	str	r3, [r7, #8]
 800b1f6:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800b1f8:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800b1fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1fe:	2302      	movs	r3, #2
 800b200:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b202:	2302      	movs	r3, #2
 800b204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b206:	2302      	movs	r3, #2
 800b208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b20a:	2301      	movs	r3, #1
 800b20c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b20e:	f107 030c 	add.w	r3, r7, #12
 800b212:	4619      	mov	r1, r3
 800b214:	4805      	ldr	r0, [pc, #20]	; (800b22c <HAL_TIM_MspPostInit+0x74>)
 800b216:	f7f7 fb7f 	bl	8002918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */
//
  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800b21a:	bf00      	nop
 800b21c:	3720      	adds	r7, #32
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	40010000 	.word	0x40010000
 800b228:	58024400 	.word	0x58024400
 800b22c:	58021000 	.word	0x58021000

0800b230 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800b234:	4b22      	ldr	r3, [pc, #136]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b236:	4a23      	ldr	r2, [pc, #140]	; (800b2c4 <MX_USART3_UART_Init+0x94>)
 800b238:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800b23a:	4b21      	ldr	r3, [pc, #132]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b23c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b240:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b242:	4b1f      	ldr	r3, [pc, #124]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b244:	2200      	movs	r2, #0
 800b246:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b248:	4b1d      	ldr	r3, [pc, #116]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b24e:	4b1c      	ldr	r3, [pc, #112]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b250:	2200      	movs	r2, #0
 800b252:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b254:	4b1a      	ldr	r3, [pc, #104]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b256:	220c      	movs	r2, #12
 800b258:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b25a:	4b19      	ldr	r3, [pc, #100]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b260:	4b17      	ldr	r3, [pc, #92]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b262:	2200      	movs	r2, #0
 800b264:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b266:	4b16      	ldr	r3, [pc, #88]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b268:	2200      	movs	r2, #0
 800b26a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b26c:	4b14      	ldr	r3, [pc, #80]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b26e:	2200      	movs	r2, #0
 800b270:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b272:	4b13      	ldr	r3, [pc, #76]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b274:	2200      	movs	r2, #0
 800b276:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b278:	4811      	ldr	r0, [pc, #68]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b27a:	f7fb fccf 	bl	8006c1c <HAL_UART_Init>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800b284:	f7ff fd3c 	bl	800ad00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b288:	2100      	movs	r1, #0
 800b28a:	480d      	ldr	r0, [pc, #52]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b28c:	f7fd ffff 	bl	800928e <HAL_UARTEx_SetTxFifoThreshold>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800b296:	f7ff fd33 	bl	800ad00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b29a:	2100      	movs	r1, #0
 800b29c:	4808      	ldr	r0, [pc, #32]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b29e:	f7fe f834 	bl	800930a <HAL_UARTEx_SetRxFifoThreshold>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800b2a8:	f7ff fd2a 	bl	800ad00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800b2ac:	4804      	ldr	r0, [pc, #16]	; (800b2c0 <MX_USART3_UART_Init+0x90>)
 800b2ae:	f7fd ffb5 	bl	800921c <HAL_UARTEx_DisableFifoMode>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800b2b8:	f7ff fd22 	bl	800ad00 <Error_Handler>
  }

}
 800b2bc:	bf00      	nop
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	240030a0 	.word	0x240030a0
 800b2c4:	40004800 	.word	0x40004800

0800b2c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b08a      	sub	sp, #40	; 0x28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2d0:	f107 0314 	add.w	r3, r7, #20
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	609a      	str	r2, [r3, #8]
 800b2dc:	60da      	str	r2, [r3, #12]
 800b2de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a1a      	ldr	r2, [pc, #104]	; (800b350 <HAL_UART_MspInit+0x88>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d12e      	bne.n	800b348 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b2ea:	4b1a      	ldr	r3, [pc, #104]	; (800b354 <HAL_UART_MspInit+0x8c>)
 800b2ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b2f0:	4a18      	ldr	r2, [pc, #96]	; (800b354 <HAL_UART_MspInit+0x8c>)
 800b2f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b2f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b2fa:	4b16      	ldr	r3, [pc, #88]	; (800b354 <HAL_UART_MspInit+0x8c>)
 800b2fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b304:	613b      	str	r3, [r7, #16]
 800b306:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b308:	4b12      	ldr	r3, [pc, #72]	; (800b354 <HAL_UART_MspInit+0x8c>)
 800b30a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b30e:	4a11      	ldr	r2, [pc, #68]	; (800b354 <HAL_UART_MspInit+0x8c>)
 800b310:	f043 0308 	orr.w	r3, r3, #8
 800b314:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b318:	4b0e      	ldr	r3, [pc, #56]	; (800b354 <HAL_UART_MspInit+0x8c>)
 800b31a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b31e:	f003 0308 	and.w	r3, r3, #8
 800b322:	60fb      	str	r3, [r7, #12]
 800b324:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800b326:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b32a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b32c:	2302      	movs	r3, #2
 800b32e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b330:	2300      	movs	r3, #0
 800b332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b334:	2300      	movs	r3, #0
 800b336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b338:	2307      	movs	r3, #7
 800b33a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b33c:	f107 0314 	add.w	r3, r7, #20
 800b340:	4619      	mov	r1, r3
 800b342:	4805      	ldr	r0, [pc, #20]	; (800b358 <HAL_UART_MspInit+0x90>)
 800b344:	f7f7 fae8 	bl	8002918 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800b348:	bf00      	nop
 800b34a:	3728      	adds	r7, #40	; 0x28
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	40004800 	.word	0x40004800
 800b354:	58024400 	.word	0x58024400
 800b358:	58020c00 	.word	0x58020c00

0800b35c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b35c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b394 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b360:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b362:	e003      	b.n	800b36c <LoopCopyDataInit>

0800b364 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b364:	4b0c      	ldr	r3, [pc, #48]	; (800b398 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b366:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b368:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b36a:	3104      	adds	r1, #4

0800b36c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b36c:	480b      	ldr	r0, [pc, #44]	; (800b39c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b36e:	4b0c      	ldr	r3, [pc, #48]	; (800b3a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b370:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b372:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b374:	d3f6      	bcc.n	800b364 <CopyDataInit>
  ldr  r2, =_sbss
 800b376:	4a0b      	ldr	r2, [pc, #44]	; (800b3a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b378:	e002      	b.n	800b380 <LoopFillZerobss>

0800b37a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b37a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b37c:	f842 3b04 	str.w	r3, [r2], #4

0800b380 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b380:	4b09      	ldr	r3, [pc, #36]	; (800b3a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b382:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b384:	d3f9      	bcc.n	800b37a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b386:	f7ff fd6d 	bl	800ae64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b38a:	f000 f8c1 	bl	800b510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b38e:	f7ff fbc1 	bl	800ab14 <main>
  bx  lr    
 800b392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b394:	2407ffff 	.word	0x2407ffff
  ldr  r3, =_sidata
 800b398:	0800b708 	.word	0x0800b708
  ldr  r0, =_sdata
 800b39c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800b3a0:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 800b3a4:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 800b3a8:	2400312c 	.word	0x2400312c

0800b3ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b3ac:	e7fe      	b.n	800b3ac <ADC_IRQHandler>

0800b3ae <_ZN3PWM6setTIMEP17TIM_HandleTypeDef>:


#include "PWM.hpp"


void PWM::setTIM(TIM_HandleTypeDef* phtim) {
 800b3ae:	b480      	push	{r7}
 800b3b0:	b083      	sub	sp, #12
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	6039      	str	r1, [r7, #0]
	mhtim = phtim;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	683a      	ldr	r2, [r7, #0]
 800b3bc:	601a      	str	r2, [r3, #0]
}
 800b3be:	bf00      	nop
 800b3c0:	370c      	adds	r7, #12
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <_ZN3PWM5setCHENS_5PWMchE>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(PWMch pCH) {
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	70fb      	strb	r3, [r7, #3]
	mCH = pCH;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	78fa      	ldrb	r2, [r7, #3]
 800b3da:	711a      	strb	r2, [r3, #4]
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <_ZN3PWM4InitEv>:

void PWM::Init(){
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
	//PWM Channel Init
	if(mhtim){//error check
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00c      	beq.n	800b412 <_ZN3PWM4InitEv+0x2a>
		//while(1){}//err handle else でとばしてもいいかも。
		HAL_TIM_Base_Start_IT(mhtim);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fa fa47 	bl	8005890 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(mhtim, mCH);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	791b      	ldrb	r3, [r3, #4]
 800b40a:	4619      	mov	r1, r3
 800b40c:	4610      	mov	r0, r2
 800b40e:	f7fa fa9f 	bl	8005950 <HAL_TIM_PWM_Start>

	}
}
 800b412:	bf00      	nop
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <_ZN3PWM5fInitEi>:

void PWM::fInit(int pTimReload){
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b082      	sub	sp, #8
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	6039      	str	r1, [r7, #0]
	mTimReload = pTimReload;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	609a      	str	r2, [r3, #8]
	Init();
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7ff ffdc 	bl	800b3e8 <_ZN3PWM4InitEv>
}
 800b430:	bf00      	nop
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <_ZN3PWM4DutyEi>:

void PWM::Duty(int pDuty){
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
	//WRITE_REG(*mREG, pDuty);
	__HAL_TIM_SET_COMPARE(mhtim, mCH, pDuty);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	791b      	ldrb	r3, [r3, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d105      	bne.n	800b456 <_ZN3PWM4DutyEi+0x1e>
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b454:	e02c      	b.n	800b4b0 <_ZN3PWM4DutyEi+0x78>
	__HAL_TIM_SET_COMPARE(mhtim, mCH, pDuty);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	791b      	ldrb	r3, [r3, #4]
 800b45a:	2b04      	cmp	r3, #4
 800b45c:	d105      	bne.n	800b46a <_ZN3PWM4DutyEi+0x32>
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b468:	e022      	b.n	800b4b0 <_ZN3PWM4DutyEi+0x78>
	__HAL_TIM_SET_COMPARE(mhtim, mCH, pDuty);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	791b      	ldrb	r3, [r3, #4]
 800b46e:	2b08      	cmp	r3, #8
 800b470:	d105      	bne.n	800b47e <_ZN3PWM4DutyEi+0x46>
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b47c:	e018      	b.n	800b4b0 <_ZN3PWM4DutyEi+0x78>
	__HAL_TIM_SET_COMPARE(mhtim, mCH, pDuty);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	791b      	ldrb	r3, [r3, #4]
 800b482:	2b0c      	cmp	r3, #12
 800b484:	d105      	bne.n	800b492 <_ZN3PWM4DutyEi+0x5a>
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b490:	e00e      	b.n	800b4b0 <_ZN3PWM4DutyEi+0x78>
	__HAL_TIM_SET_COMPARE(mhtim, mCH, pDuty);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	791b      	ldrb	r3, [r3, #4]
 800b496:	2b10      	cmp	r3, #16
 800b498:	d105      	bne.n	800b4a6 <_ZN3PWM4DutyEi+0x6e>
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	659a      	str	r2, [r3, #88]	; 0x58
}
 800b4a4:	e004      	b.n	800b4b0 <_ZN3PWM4DutyEi+0x78>
	__HAL_TIM_SET_COMPARE(mhtim, mCH, pDuty);
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int duty = pfDuty * (float)mTimReload;
	Duty(duty);
}

void PWM::f2Duty(float pfDuty){
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	ed87 0a00 	vstr	s0, [r7]
	int duty = (pfDuty + 1)/2 * (float)mTimReload;
 800b4c8:	edd7 7a00 	vldr	s15, [r7]
 800b4cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b4d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	ee07 3a90 	vmov	s15, r3
 800b4e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4f0:	ee17 3a90 	vmov	r3, s15
 800b4f4:	60fb      	str	r3, [r7, #12]
	Duty(duty);
 800b4f6:	68f9      	ldr	r1, [r7, #12]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7ff ff9d 	bl	800b438 <_ZN3PWM4DutyEi>
}
 800b4fe:	bf00      	nop
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <_ZdlPvj>:
 800b506:	f000 b800 	b.w	800b50a <_ZdlPv>

0800b50a <_ZdlPv>:
 800b50a:	f000 b825 	b.w	800b558 <free>
	...

0800b510 <__libc_init_array>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	4e0d      	ldr	r6, [pc, #52]	; (800b548 <__libc_init_array+0x38>)
 800b514:	4c0d      	ldr	r4, [pc, #52]	; (800b54c <__libc_init_array+0x3c>)
 800b516:	1ba4      	subs	r4, r4, r6
 800b518:	10a4      	asrs	r4, r4, #2
 800b51a:	2500      	movs	r5, #0
 800b51c:	42a5      	cmp	r5, r4
 800b51e:	d109      	bne.n	800b534 <__libc_init_array+0x24>
 800b520:	4e0b      	ldr	r6, [pc, #44]	; (800b550 <__libc_init_array+0x40>)
 800b522:	4c0c      	ldr	r4, [pc, #48]	; (800b554 <__libc_init_array+0x44>)
 800b524:	f000 f878 	bl	800b618 <_init>
 800b528:	1ba4      	subs	r4, r4, r6
 800b52a:	10a4      	asrs	r4, r4, #2
 800b52c:	2500      	movs	r5, #0
 800b52e:	42a5      	cmp	r5, r4
 800b530:	d105      	bne.n	800b53e <__libc_init_array+0x2e>
 800b532:	bd70      	pop	{r4, r5, r6, pc}
 800b534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b538:	4798      	blx	r3
 800b53a:	3501      	adds	r5, #1
 800b53c:	e7ee      	b.n	800b51c <__libc_init_array+0xc>
 800b53e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b542:	4798      	blx	r3
 800b544:	3501      	adds	r5, #1
 800b546:	e7f2      	b.n	800b52e <__libc_init_array+0x1e>
 800b548:	0800b6f8 	.word	0x0800b6f8
 800b54c:	0800b6f8 	.word	0x0800b6f8
 800b550:	0800b6f8 	.word	0x0800b6f8
 800b554:	0800b700 	.word	0x0800b700

0800b558 <free>:
 800b558:	4b02      	ldr	r3, [pc, #8]	; (800b564 <free+0xc>)
 800b55a:	4601      	mov	r1, r0
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	f000 b80b 	b.w	800b578 <_free_r>
 800b562:	bf00      	nop
 800b564:	24000010 	.word	0x24000010

0800b568 <memset>:
 800b568:	4402      	add	r2, r0
 800b56a:	4603      	mov	r3, r0
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d100      	bne.n	800b572 <memset+0xa>
 800b570:	4770      	bx	lr
 800b572:	f803 1b01 	strb.w	r1, [r3], #1
 800b576:	e7f9      	b.n	800b56c <memset+0x4>

0800b578 <_free_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4605      	mov	r5, r0
 800b57c:	2900      	cmp	r1, #0
 800b57e:	d045      	beq.n	800b60c <_free_r+0x94>
 800b580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b584:	1f0c      	subs	r4, r1, #4
 800b586:	2b00      	cmp	r3, #0
 800b588:	bfb8      	it	lt
 800b58a:	18e4      	addlt	r4, r4, r3
 800b58c:	f000 f842 	bl	800b614 <__malloc_lock>
 800b590:	4a1f      	ldr	r2, [pc, #124]	; (800b610 <_free_r+0x98>)
 800b592:	6813      	ldr	r3, [r2, #0]
 800b594:	4610      	mov	r0, r2
 800b596:	b933      	cbnz	r3, 800b5a6 <_free_r+0x2e>
 800b598:	6063      	str	r3, [r4, #4]
 800b59a:	6014      	str	r4, [r2, #0]
 800b59c:	4628      	mov	r0, r5
 800b59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5a2:	f000 b838 	b.w	800b616 <__malloc_unlock>
 800b5a6:	42a3      	cmp	r3, r4
 800b5a8:	d90c      	bls.n	800b5c4 <_free_r+0x4c>
 800b5aa:	6821      	ldr	r1, [r4, #0]
 800b5ac:	1862      	adds	r2, r4, r1
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	bf04      	itt	eq
 800b5b2:	681a      	ldreq	r2, [r3, #0]
 800b5b4:	685b      	ldreq	r3, [r3, #4]
 800b5b6:	6063      	str	r3, [r4, #4]
 800b5b8:	bf04      	itt	eq
 800b5ba:	1852      	addeq	r2, r2, r1
 800b5bc:	6022      	streq	r2, [r4, #0]
 800b5be:	6004      	str	r4, [r0, #0]
 800b5c0:	e7ec      	b.n	800b59c <_free_r+0x24>
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	685a      	ldr	r2, [r3, #4]
 800b5c6:	b10a      	cbz	r2, 800b5cc <_free_r+0x54>
 800b5c8:	42a2      	cmp	r2, r4
 800b5ca:	d9fa      	bls.n	800b5c2 <_free_r+0x4a>
 800b5cc:	6819      	ldr	r1, [r3, #0]
 800b5ce:	1858      	adds	r0, r3, r1
 800b5d0:	42a0      	cmp	r0, r4
 800b5d2:	d10b      	bne.n	800b5ec <_free_r+0x74>
 800b5d4:	6820      	ldr	r0, [r4, #0]
 800b5d6:	4401      	add	r1, r0
 800b5d8:	1858      	adds	r0, r3, r1
 800b5da:	4282      	cmp	r2, r0
 800b5dc:	6019      	str	r1, [r3, #0]
 800b5de:	d1dd      	bne.n	800b59c <_free_r+0x24>
 800b5e0:	6810      	ldr	r0, [r2, #0]
 800b5e2:	6852      	ldr	r2, [r2, #4]
 800b5e4:	605a      	str	r2, [r3, #4]
 800b5e6:	4401      	add	r1, r0
 800b5e8:	6019      	str	r1, [r3, #0]
 800b5ea:	e7d7      	b.n	800b59c <_free_r+0x24>
 800b5ec:	d902      	bls.n	800b5f4 <_free_r+0x7c>
 800b5ee:	230c      	movs	r3, #12
 800b5f0:	602b      	str	r3, [r5, #0]
 800b5f2:	e7d3      	b.n	800b59c <_free_r+0x24>
 800b5f4:	6820      	ldr	r0, [r4, #0]
 800b5f6:	1821      	adds	r1, r4, r0
 800b5f8:	428a      	cmp	r2, r1
 800b5fa:	bf04      	itt	eq
 800b5fc:	6811      	ldreq	r1, [r2, #0]
 800b5fe:	6852      	ldreq	r2, [r2, #4]
 800b600:	6062      	str	r2, [r4, #4]
 800b602:	bf04      	itt	eq
 800b604:	1809      	addeq	r1, r1, r0
 800b606:	6021      	streq	r1, [r4, #0]
 800b608:	605c      	str	r4, [r3, #4]
 800b60a:	e7c7      	b.n	800b59c <_free_r+0x24>
 800b60c:	bd38      	pop	{r3, r4, r5, pc}
 800b60e:	bf00      	nop
 800b610:	24002ff8 	.word	0x24002ff8

0800b614 <__malloc_lock>:
 800b614:	4770      	bx	lr

0800b616 <__malloc_unlock>:
 800b616:	4770      	bx	lr

0800b618 <_init>:
 800b618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61a:	bf00      	nop
 800b61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b61e:	bc08      	pop	{r3}
 800b620:	469e      	mov	lr, r3
 800b622:	4770      	bx	lr

0800b624 <_fini>:
 800b624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b626:	bf00      	nop
 800b628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b62a:	bc08      	pop	{r3}
 800b62c:	469e      	mov	lr, r3
 800b62e:	4770      	bx	lr
