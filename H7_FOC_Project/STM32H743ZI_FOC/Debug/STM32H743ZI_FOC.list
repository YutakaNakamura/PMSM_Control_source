
STM32H743ZI_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c644  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800c8e0  0800c8e0  0001c8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc18  0800cc18  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc18  0800cc18  0001cc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc20  0800cc20  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800cc20  0800cc20  0001cc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800cc2c  0800cc2c  0001cc2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800cc38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003590  240001e0  0800ce18  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24003770  0800ce18  00023770  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005d31c  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008dc9  00000000  00000000  0007d52a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f28  00000000  00000000  000862f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ce8  00000000  00000000  00088220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ee52  00000000  00000000  00089f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022c33  00000000  00000000  000c8d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00183d7b  00000000  00000000  000eb98d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0026f708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008aa8  00000000  00000000  0026f784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001e0 	.word	0x240001e0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c8c4 	.word	0x0800c8c4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001e4 	.word	0x240001e4
 80002d4:	0800c8c4 	.word	0x0800c8c4

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f001 fdb5 	bl	800215c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005f2:	f002 fd4d 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 80005f6:	4601      	mov	r1, r0
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <HAL_Init+0x60>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 030f 	and.w	r3, r3, #15
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <HAL_Init+0x64>)
 8000604:	5cd3      	ldrb	r3, [r2, r3]
 8000606:	f003 031f 	and.w	r3, r3, #31
 800060a:	fa21 f303 	lsr.w	r3, r1, r3
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <HAL_Init+0x68>)
 8000610:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */  
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_Init+0x68>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_Init+0x60>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f003 030f 	and.w	r3, r3, #15
 800061e:	490b      	ldr	r1, [pc, #44]	; (800064c <HAL_Init+0x64>)
 8000620:	5ccb      	ldrb	r3, [r1, r3]
 8000622:	f003 031f 	and.w	r3, r3, #31
 8000626:	fa22 f303 	lsr.w	r3, r2, r3
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <HAL_Init+0x6c>)
 800062c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 f812 	bl	8000658 <HAL_InitTick>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e002      	b.n	8000644 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800063e:	f009 ff83 	bl	800a548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	bd80      	pop	{r7, pc}
 8000648:	58024400 	.word	0x58024400
 800064c:	0800c9bc 	.word	0x0800c9bc
 8000650:	24000008 	.word	0x24000008
 8000654:	2400000c 	.word	0x2400000c

08000658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_InitTick+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d101      	bne.n	800066c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	e021      	b.n	80006b0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <HAL_InitTick+0x64>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <HAL_InitTick+0x60>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	fbb3 f3f1 	udiv	r3, r3, r1
 800067e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fd9d 	bl	80021c2 <HAL_SYSTICK_Config>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e00e      	b.n	80006b0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b0f      	cmp	r3, #15
 8000696:	d80a      	bhi.n	80006ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000698:	2200      	movs	r2, #0
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006a0:	f001 fd67 	bl	8002172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <HAL_InitTick+0x68>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e000      	b.n	80006b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	24000004 	.word	0x24000004
 80006bc:	24000008 	.word	0x24000008
 80006c0:	24000000 	.word	0x24000000

080006c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_IncTick+0x20>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_IncTick+0x24>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <HAL_IncTick+0x24>)
 80006d6:	6013      	str	r3, [r2, #0]
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	24000004 	.word	0x24000004
 80006e8:	240001fc 	.word	0x240001fc

080006ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <HAL_GetTick+0x14>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	240001fc 	.word	0x240001fc

08000704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800070c:	f7ff ffee 	bl	80006ec <HAL_GetTick>
 8000710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800071c:	d005      	beq.n	800072a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_Delay+0x40>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4413      	add	r3, r2
 8000728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800072a:	bf00      	nop
 800072c:	f7ff ffde 	bl	80006ec <HAL_GetTick>
 8000730:	4602      	mov	r2, r0
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	429a      	cmp	r2, r3
 800073a:	d8f7      	bhi.n	800072c <HAL_Delay+0x28>
  {
  }
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	24000004 	.word	0x24000004

08000748 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <HAL_GetREVID+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	0c1b      	lsrs	r3, r3, #16
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	5c001000 	.word	0x5c001000

08000760 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800076c:	685a      	ldr	r2, [r3, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	43db      	mvns	r3, r3
 8000772:	401a      	ands	r2, r3
 8000774:	4904      	ldr	r1, [pc, #16]	; (8000788 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	4313      	orrs	r3, r2
 800077a:	604b      	str	r3, [r1, #4]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	58000400 	.word	0x58000400

0800078c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	431a      	orrs	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	609a      	str	r2, [r3, #8]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e000      	b.n	80007cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d101      	bne.n	80007f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80007ec:	2301      	movs	r3, #1
 80007ee:	e000      	b.n	80007f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	f003 031f 	and.w	r3, r3, #31
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689a      	ldr	r2, [r3, #8]
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000846:	4013      	ands	r3, r2
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	6093      	str	r3, [r2, #8]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	5fffffc0 	.word	0x5fffffc0

0800085c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800086c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000870:	d101      	bne.n	8000876 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000872:	2301      	movs	r3, #1
 8000874:	e000      	b.n	8000878 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689a      	ldr	r2, [r3, #8]
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000892:	4013      	ands	r3, r2
 8000894:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	6fffffc0 	.word	0x6fffffc0

080008ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008c0:	d101      	bne.n	80008c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80008c2:	2301      	movs	r3, #1
 80008c4:	e000      	b.n	80008c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d101      	bne.n	80008ec <LL_ADC_IsEnabled+0x18>
 80008e8:	2301      	movs	r3, #1
 80008ea:	e000      	b.n	80008ee <LL_ADC_IsEnabled+0x1a>
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	2b04      	cmp	r3, #4
 800090c:	d101      	bne.n	8000912 <LL_ADC_REG_IsConversionOngoing+0x18>
 800090e:	2301      	movs	r3, #1
 8000910:	e000      	b.n	8000914 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	2b08      	cmp	r3, #8
 8000932:	d101      	bne.n	8000938 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000934:	2301      	movs	r3, #1
 8000936:	e000      	b.n	800093a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000950:	2300      	movs	r3, #0
 8000952:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e18c      	b.n	8000c7c <HAL_ADC_Init+0x334>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800096c:	2b00      	cmp	r3, #0
 800096e:	d109      	bne.n	8000984 <HAL_ADC_Init+0x3c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f009 fad1 	bl	8009f18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff67 	bl	800085c <LL_ADC_IsDeepPowerDownEnabled>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d004      	beq.n	800099e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */ 
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff4d 	bl	8000838 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff82 	bl	80008ac <LL_ADC_IsInternalRegulatorEnabled>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d113      	bne.n	80009d6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ff66 	bl	8000884 <LL_ADC_EnableInternalRegulator>
    
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009b8:	4b99      	ldr	r3, [pc, #612]	; (8000c20 <HAL_ADC_Init+0x2d8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	099b      	lsrs	r3, r3, #6
 80009be:	4a99      	ldr	r2, [pc, #612]	; (8000c24 <HAL_ADC_Init+0x2dc>)
 80009c0:	fba2 2303 	umull	r2, r3, r2, r3
 80009c4:	099b      	lsrs	r3, r3, #6
 80009c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80009c8:	e002      	b.n	80009d0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1f9      	bne.n	80009ca <HAL_ADC_Init+0x82>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff66 	bl	80008ac <LL_ADC_IsInternalRegulatorEnabled>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10d      	bne.n	8000a02 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009ea:	f043 0210 	orr.w	r2, r3, #16
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	f043 0201 	orr.w	r2, r3, #1
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	77fb      	strb	r3, [r7, #31]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ff77 	bl	80008fa <LL_ADC_REG_IsConversionOngoing>
 8000a0c:	6178      	str	r0, [r7, #20]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a12:	f003 0310 	and.w	r3, r3, #16
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f040 8127 	bne.w	8000c6a <HAL_ADC_Init+0x322>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f040 8123 	bne.w	8000c6a <HAL_ADC_Init+0x322>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a2c:	f043 0202 	orr.w	r2, r3, #2
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff4b 	bl	80008d4 <LL_ADC_IsEnabled>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d136      	bne.n	8000ab2 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a77      	ldr	r2, [pc, #476]	; (8000c28 <HAL_ADC_Init+0x2e0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d004      	beq.n	8000a58 <HAL_ADC_Init+0x110>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a76      	ldr	r2, [pc, #472]	; (8000c2c <HAL_ADC_Init+0x2e4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d10e      	bne.n	8000a76 <HAL_ADC_Init+0x12e>
 8000a58:	4873      	ldr	r0, [pc, #460]	; (8000c28 <HAL_ADC_Init+0x2e0>)
 8000a5a:	f7ff ff3b 	bl	80008d4 <LL_ADC_IsEnabled>
 8000a5e:	4604      	mov	r4, r0
 8000a60:	4872      	ldr	r0, [pc, #456]	; (8000c2c <HAL_ADC_Init+0x2e4>)
 8000a62:	f7ff ff37 	bl	80008d4 <LL_ADC_IsEnabled>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4323      	orrs	r3, r4
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	bf0c      	ite	eq
 8000a6e:	2301      	moveq	r3, #1
 8000a70:	2300      	movne	r3, #0
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	e008      	b.n	8000a88 <HAL_ADC_Init+0x140>
 8000a76:	486e      	ldr	r0, [pc, #440]	; (8000c30 <HAL_ADC_Init+0x2e8>)
 8000a78:	f7ff ff2c 	bl	80008d4 <LL_ADC_IsEnabled>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	bf0c      	ite	eq
 8000a82:	2301      	moveq	r3, #1
 8000a84:	2300      	movne	r3, #0
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d012      	beq.n	8000ab2 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a65      	ldr	r2, [pc, #404]	; (8000c28 <HAL_ADC_Init+0x2e0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d004      	beq.n	8000aa0 <HAL_ADC_Init+0x158>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a64      	ldr	r2, [pc, #400]	; (8000c2c <HAL_ADC_Init+0x2e4>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d101      	bne.n	8000aa4 <HAL_ADC_Init+0x15c>
 8000aa0:	4a64      	ldr	r2, [pc, #400]	; (8000c34 <HAL_ADC_Init+0x2ec>)
 8000aa2:	e000      	b.n	8000aa6 <HAL_ADC_Init+0x15e>
 8000aa4:	4a64      	ldr	r2, [pc, #400]	; (8000c38 <HAL_ADC_Init+0x2f0>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4610      	mov	r0, r2
 8000aae:	f7ff fe6d 	bl	800078c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000ab2:	f7ff fe49 	bl	8000748 <HAL_GetREVID>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	f241 0303 	movw	r3, #4099	; 0x1003
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d914      	bls.n	8000aea <HAL_ADC_Init+0x1a2>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	2b10      	cmp	r3, #16
 8000ac6:	d110      	bne.n	8000aea <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7d5b      	ldrb	r3, [r3, #21]
 8000acc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ad2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000ad8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7f1b      	ldrb	r3, [r3, #28]
 8000ade:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000ae0:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ae2:	f043 030c 	orr.w	r3, r3, #12
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	e00d      	b.n	8000b06 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7d5b      	ldrb	r3, [r3, #21]
 8000aee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000af4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000afa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7f1b      	ldrb	r3, [r3, #28]
 8000b00:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b02:	4313      	orrs	r3, r2
 8000b04:	61bb      	str	r3, [r7, #24]
    }
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7f1b      	ldrb	r3, [r3, #28]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d106      	bne.n	8000b1c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a1b      	ldr	r3, [r3, #32]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	045b      	lsls	r3, r3, #17
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d009      	beq.n	8000b38 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b28:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b30:	4313      	orrs	r3, r2
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68da      	ldr	r2, [r3, #12]
 8000b3e:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <HAL_ADC_Init+0x2f4>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	69b9      	ldr	r1, [r7, #24]
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fed2 	bl	80008fa <LL_ADC_REG_IsConversionOngoing>
 8000b56:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fedf 	bl	8000920 <LL_ADC_INJ_IsConversionOngoing>
 8000b62:	60f8      	str	r0, [r7, #12]
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d149      	bne.n	8000bfe <HAL_ADC_Init+0x2b6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d146      	bne.n	8000bfe <HAL_ADC_Init+0x2b6>
       )
    {
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7d1b      	ldrb	r3, [r3, #20]
 8000b74:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement)  );
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	61bb      	str	r3, [r7, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <HAL_ADC_Init+0x2f8>)
 8000b86:	4013      	ands	r3, r2
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	69b9      	ldr	r1, [r7, #24]
 8000b8e:	430b      	orrs	r3, r1
 8000b90:	60d3      	str	r3, [r2, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d11a      	bne.n	8000bd2 <HAL_ADC_Init+0x28a>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
        
      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba0:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	691a      	ldr	r2, [r3, #16]
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <HAL_ADC_Init+0x2fc>)
 8000baa:	4013      	ands	r3, r2
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000bb0:	0411      	lsls	r1, r2, #16
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bb6:	4311      	orrs	r1, r2
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000bbc:	4311      	orrs	r1, r2
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f042 0201 	orr.w	r2, r2, #1
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	e007      	b.n	8000be2 <HAL_ADC_Init+0x29a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	691a      	ldr	r2, [r3, #16]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0201 	bic.w	r2, r2, #1
 8000be0:	611a      	str	r2, [r3, #16]
      }
      
      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f000 fa9b 	bl	8001134 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d120      	bne.n	8000c48 <HAL_ADC_Init+0x300>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f023 010f 	bic.w	r1, r3, #15
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	1e5a      	subs	r2, r3, #1
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	631a      	str	r2, [r3, #48]	; 0x30
 8000c1e:	e01b      	b.n	8000c58 <HAL_ADC_Init+0x310>
 8000c20:	24000008 	.word	0x24000008
 8000c24:	053e2d63 	.word	0x053e2d63
 8000c28:	40022000 	.word	0x40022000
 8000c2c:	40022100 	.word	0x40022100
 8000c30:	58026000 	.word	0x58026000
 8000c34:	40022300 	.word	0x40022300
 8000c38:	58026300 	.word	0x58026300
 8000c3c:	fff0c003 	.word	0xfff0c003
 8000c40:	ffffbffc 	.word	0xffffbffc
 8000c44:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 020f 	bic.w	r2, r2, #15
 8000c56:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c5c:	f023 0303 	bic.w	r3, r3, #3
 8000c60:	f043 0201 	orr.w	r2, r3, #1
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	655a      	str	r2, [r3, #84]	; 0x54
 8000c68:	e007      	b.n	8000c7a <HAL_ADC_Init+0x332>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c6e:	f043 0210 	orr.w	r2, r3, #16
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3724      	adds	r7, #36	; 0x24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd90      	pop	{r4, r7, pc}

08000c84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a87      	ldr	r2, [pc, #540]	; (8000ec4 <HAL_ADC_IRQHandler+0x240>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d004      	beq.n	8000cb4 <HAL_ADC_IRQHandler+0x30>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a86      	ldr	r2, [pc, #536]	; (8000ec8 <HAL_ADC_IRQHandler+0x244>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d101      	bne.n	8000cb8 <HAL_ADC_IRQHandler+0x34>
 8000cb4:	4b85      	ldr	r3, [pc, #532]	; (8000ecc <HAL_ADC_IRQHandler+0x248>)
 8000cb6:	e000      	b.n	8000cba <HAL_ADC_IRQHandler+0x36>
 8000cb8:	4b85      	ldr	r3, [pc, #532]	; (8000ed0 <HAL_ADC_IRQHandler+0x24c>)
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fd9f 	bl	80007fe <LL_ADC_GetMultimode>
 8000cc0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d017      	beq.n	8000cfc <HAL_ADC_IRQHandler+0x78>
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d012      	beq.n	8000cfc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cda:	f003 0310 	and.w	r3, r3, #16
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d105      	bne.n	8000cee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 fc4b 	bl	800158a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d004      	beq.n	8000d10 <HAL_ADC_IRQHandler+0x8c>
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10a      	bne.n	8000d26 <HAL_ADC_IRQHandler+0xa2>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f003 0308 	and.w	r3, r3, #8
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8083 	beq.w	8000e22 <HAL_ADC_IRQHandler+0x19e>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d07d      	beq.n	8000e22 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d105      	bne.n	8000d3e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if(LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fd35 	bl	80007b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d062      	beq.n	8000e14 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a5d      	ldr	r2, [pc, #372]	; (8000ec8 <HAL_ADC_IRQHandler+0x244>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d002      	beq.n	8000d5e <HAL_ADC_IRQHandler+0xda>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	e000      	b.n	8000d60 <HAL_ADC_IRQHandler+0xdc>
 8000d5e:	4b59      	ldr	r3, [pc, #356]	; (8000ec4 <HAL_ADC_IRQHandler+0x240>)
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6812      	ldr	r2, [r2, #0]
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d008      	beq.n	8000d7a <HAL_ADC_IRQHandler+0xf6>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d005      	beq.n	8000d7a <HAL_ADC_IRQHandler+0xf6>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	d002      	beq.n	8000d7a <HAL_ADC_IRQHandler+0xf6>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	2b09      	cmp	r3, #9
 8000d78:	d104      	bne.n	8000d84 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	e00c      	b.n	8000d9e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a4f      	ldr	r2, [pc, #316]	; (8000ec8 <HAL_ADC_IRQHandler+0x244>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d002      	beq.n	8000d94 <HAL_ADC_IRQHandler+0x110>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	e000      	b.n	8000d96 <HAL_ADC_IRQHandler+0x112>
 8000d94:	4b4b      	ldr	r3, [pc, #300]	; (8000ec4 <HAL_ADC_IRQHandler+0x240>)
 8000d96:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	623b      	str	r3, [r7, #32]
      }
      
      /* Carry on if continuous mode is disabled */
      if (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d135      	bne.n	8000e14 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	2b08      	cmp	r3, #8
 8000db4:	d12e      	bne.n	8000e14 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fd9d 	bl	80008fa <LL_ADC_REG_IsConversionOngoing>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d11a      	bne.n	8000dfc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 020c 	bic.w	r2, r2, #12
 8000dd4:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	655a      	str	r2, [r3, #84]	; 0x54
            
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d112      	bne.n	8000e14 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000df2:	f043 0201 	orr.w	r2, r3, #1
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	655a      	str	r2, [r3, #84]	; 0x54
 8000dfa:	e00b      	b.n	8000e14 <HAL_ADC_IRQHandler+0x190>
            }           
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e00:	f043 0210 	orr.w	r2, r3, #16
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	655a      	str	r2, [r3, #84]	; 0x54
            
            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0c:	f043 0201 	orr.w	r2, r3, #1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 f96f 	bl	80010f8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <HAL_ADC_IRQHandler+0x1b2>
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	f003 0320 	and.w	r3, r3, #32
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10b      	bne.n	8000e4e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )      
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 80a0 	beq.w	8000f82 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )      
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 809a 	beq.w	8000f82 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fcb4 	bl	80007d8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8000e70:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fc9b 	bl	80007b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000e7c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <HAL_ADC_IRQHandler+0x244>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d002      	beq.n	8000e8e <HAL_ADC_IRQHandler+0x20a>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	e000      	b.n	8000e90 <HAL_ADC_IRQHandler+0x20c>
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_ADC_IRQHandler+0x240>)
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d008      	beq.n	8000eaa <HAL_ADC_IRQHandler+0x226>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d005      	beq.n	8000eaa <HAL_ADC_IRQHandler+0x226>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2b06      	cmp	r3, #6
 8000ea2:	d002      	beq.n	8000eaa <HAL_ADC_IRQHandler+0x226>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	2b07      	cmp	r3, #7
 8000ea8:	d104      	bne.n	8000eb4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	623b      	str	r3, [r7, #32]
 8000eb2:	e014      	b.n	8000ede <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a03      	ldr	r2, [pc, #12]	; (8000ec8 <HAL_ADC_IRQHandler+0x244>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00a      	beq.n	8000ed4 <HAL_ADC_IRQHandler+0x250>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	e008      	b.n	8000ed6 <HAL_ADC_IRQHandler+0x252>
 8000ec4:	40022000 	.word	0x40022000
 8000ec8:	40022100 	.word	0x40022100
 8000ecc:	40022300 	.word	0x40022300
 8000ed0:	58026300 	.word	0x58026300
 8000ed4:	4b84      	ldr	r3, [pc, #528]	; (80010e8 <HAL_ADC_IRQHandler+0x464>)
 8000ed6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10c      	bne.n	8000efe <HAL_ADC_IRQHandler+0x27a>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d142      	bne.n	8000f74 <HAL_ADC_IRQHandler+0x2f0>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d03f      	beq.n	8000f74 <HAL_ADC_IRQHandler+0x2f0>
        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
         (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == 0UL)    )   )   )
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d13a      	bne.n	8000f74 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f08:	2b40      	cmp	r3, #64	; 0x40
 8000f0a:	d133      	bne.n	8000f74 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d12e      	bne.n	8000f74 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fd00 	bl	8000920 <LL_ADC_INJ_IsConversionOngoing>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d11a      	bne.n	8000f5c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000f34:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d112      	bne.n	8000f74 <HAL_ADC_IRQHandler+0x2f0>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f52:	f043 0201 	orr.w	r2, r3, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
 8000f5a:	e00b      	b.n	8000f74 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f60:	f043 0210 	orr.w	r2, r3, #16
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	655a      	str	r2, [r3, #84]	; 0x54
          
            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6c:	f043 0201 	orr.w	r2, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of 
              sequence.    */    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 fae0 	bl	800153a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2260      	movs	r2, #96	; 0x60
 8000f80:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d011      	beq.n	8000fb0 <HAL_ADC_IRQHandler+0x32c>
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00c      	beq.n	8000fb0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f8b2 	bl	800110c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d012      	beq.n	8000fe0 <HAL_ADC_IRQHandler+0x35c>
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00d      	beq.n	8000fe0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 fac6 	bl	8001562 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fde:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d012      	beq.n	8001010 <HAL_ADC_IRQHandler+0x38c>
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00d      	beq.n	8001010 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fab8 	bl	8001576 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	2b00      	cmp	r3, #0
 8001018:	d043      	beq.n	80010a2 <HAL_ADC_IRQHandler+0x41e>
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	2b00      	cmp	r3, #0
 8001022:	d03e      	beq.n	80010a2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800102c:	2301      	movs	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
 8001030:	e021      	b.n	8001076 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d015      	beq.n	8001064 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled, 
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a2a      	ldr	r2, [pc, #168]	; (80010e8 <HAL_ADC_IRQHandler+0x464>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d004      	beq.n	800104c <HAL_ADC_IRQHandler+0x3c8>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a29      	ldr	r2, [pc, #164]	; (80010ec <HAL_ADC_IRQHandler+0x468>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d101      	bne.n	8001050 <HAL_ADC_IRQHandler+0x3cc>
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <HAL_ADC_IRQHandler+0x46c>)
 800104e:	e000      	b.n	8001052 <HAL_ADC_IRQHandler+0x3ce>
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_ADC_IRQHandler+0x470>)
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fbe1 	bl	800081a <LL_ADC_GetMultiDMATransfer>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00b      	beq.n	8001076 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800105e:	2301      	movs	r3, #1
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
 8001062:	e008      	b.n	8001076 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_ADC_IRQHandler+0x3f2>
      {
        overrun_error = 1UL;
 8001072:	2301      	movs	r3, #1
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
      }
      }
    }
        
    if (overrun_error == 1UL)
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	2b01      	cmp	r3, #1
 800107a:	d10e      	bne.n	800109a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001080:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108c:	f043 0202 	orr.w	r2, r3, #2
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f843 	bl	8001120 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2210      	movs	r2, #16
 80010a0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF)) 
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d018      	beq.n	80010de <HAL_ADC_IRQHandler+0x45a>
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d013      	beq.n	80010de <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	f043 0208 	orr.w	r2, r3, #8
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d6:	601a      	str	r2, [r3, #0]
    
    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 fa38 	bl	800154e <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40022000 	.word	0x40022000
 80010ec:	40022100 	.word	0x40022100
 80010f0:	40022300 	.word	0x40022300
 80010f4:	58026300 	.word	0x58026300

080010f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a73      	ldr	r2, [pc, #460]	; (8001310 <ADC_ConfigureBoostMode+0x1dc>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d004      	beq.n	8001150 <ADC_ConfigureBoostMode+0x1c>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a72      	ldr	r2, [pc, #456]	; (8001314 <ADC_ConfigureBoostMode+0x1e0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d109      	bne.n	8001164 <ADC_ConfigureBoostMode+0x30>
 8001150:	4b71      	ldr	r3, [pc, #452]	; (8001318 <ADC_ConfigureBoostMode+0x1e4>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf14      	ite	ne
 800115c:	2301      	movne	r3, #1
 800115e:	2300      	moveq	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	e008      	b.n	8001176 <ADC_ConfigureBoostMode+0x42>
 8001164:	4b6d      	ldr	r3, [pc, #436]	; (800131c <ADC_ConfigureBoostMode+0x1e8>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116c:	2b00      	cmp	r3, #0
 800116e:	bf14      	ite	ne
 8001170:	2301      	movne	r3, #1
 8001172:	2300      	moveq	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d01a      	beq.n	80011b0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800117a:	f002 f8fb 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 800117e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001188:	d006      	beq.n	8001198 <ADC_ConfigureBoostMode+0x64>
 800118a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800118e:	d00b      	beq.n	80011a8 <ADC_ConfigureBoostMode+0x74>
 8001190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001194:	d000      	beq.n	8001198 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8001196:	e05d      	b.n	8001254 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	0c1b      	lsrs	r3, r3, #16
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a4:	60fb      	str	r3, [r7, #12]
        break;
 80011a6:	e055      	b.n	8001254 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	60fb      	str	r3, [r7, #12]
        break;
 80011ae:	e051      	b.n	8001254 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80011b0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011b4:	f003 f816 	bl	80041e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80011b8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80011c2:	d02a      	beq.n	800121a <ADC_ConfigureBoostMode+0xe6>
 80011c4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80011c8:	d813      	bhi.n	80011f2 <ADC_ConfigureBoostMode+0xbe>
 80011ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80011ce:	d024      	beq.n	800121a <ADC_ConfigureBoostMode+0xe6>
 80011d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80011d4:	d806      	bhi.n	80011e4 <ADC_ConfigureBoostMode+0xb0>
 80011d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011da:	d01e      	beq.n	800121a <ADC_ConfigureBoostMode+0xe6>
 80011dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011e0:	d01b      	beq.n	800121a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80011e2:	e037      	b.n	8001254 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80011e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80011e8:	d017      	beq.n	800121a <ADC_ConfigureBoostMode+0xe6>
 80011ea:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80011ee:	d014      	beq.n	800121a <ADC_ConfigureBoostMode+0xe6>
        break;
 80011f0:	e030      	b.n	8001254 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80011f2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80011f6:	d021      	beq.n	800123c <ADC_ConfigureBoostMode+0x108>
 80011f8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80011fc:	d806      	bhi.n	800120c <ADC_ConfigureBoostMode+0xd8>
 80011fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001202:	d013      	beq.n	800122c <ADC_ConfigureBoostMode+0xf8>
 8001204:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001208:	d014      	beq.n	8001234 <ADC_ConfigureBoostMode+0x100>
        break;
 800120a:	e023      	b.n	8001254 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800120c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001210:	d018      	beq.n	8001244 <ADC_ConfigureBoostMode+0x110>
 8001212:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001216:	d019      	beq.n	800124c <ADC_ConfigureBoostMode+0x118>
        break;
 8001218:	e01c      	b.n	8001254 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	0c9b      	lsrs	r3, r3, #18
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	fbb2 f3f3 	udiv	r3, r2, r3
 8001228:	60fb      	str	r3, [r7, #12]
        break;
 800122a:	e013      	b.n	8001254 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	60fb      	str	r3, [r7, #12]
      break;
 8001232:	e00f      	b.n	8001254 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	60fb      	str	r3, [r7, #12]
        break;
 800123a:	e00b      	b.n	8001254 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	099b      	lsrs	r3, r3, #6
 8001240:	60fb      	str	r3, [r7, #12]
        break;
 8001242:	e007      	b.n	8001254 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	09db      	lsrs	r3, r3, #7
 8001248:	60fb      	str	r3, [r7, #12]
        break;
 800124a:	e003      	b.n	8001254 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	60fb      	str	r3, [r7, #12]
        break;
 8001252:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001254:	f7ff fa78 	bl	8000748 <HAL_GetREVID>
 8001258:	4602      	mov	r2, r0
 800125a:	f241 0303 	movw	r3, #4099	; 0x1003
 800125e:	429a      	cmp	r2, r3
 8001260:	d815      	bhi.n	800128e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4a2e      	ldr	r2, [pc, #184]	; (8001320 <ADC_ConfigureBoostMode+0x1ec>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d908      	bls.n	800127c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001278:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */ 
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 800127a:	e044      	b.n	8001306 <ADC_ConfigureBoostMode+0x1d2>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800128a:	609a      	str	r2, [r3, #8]
}
 800128c:	e03b      	b.n	8001306 <ADC_ConfigureBoostMode+0x1d2>
    if (freq <= 6250000UL)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4a24      	ldr	r2, [pc, #144]	; (8001324 <ADC_ConfigureBoostMode+0x1f0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d808      	bhi.n	80012a8 <ADC_ConfigureBoostMode+0x174>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012a4:	609a      	str	r2, [r3, #8]
}
 80012a6:	e02e      	b.n	8001306 <ADC_ConfigureBoostMode+0x1d2>
    else if((freq > 6250000UL) && (freq <= 12500000UL)) 
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <ADC_ConfigureBoostMode+0x1f0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d90e      	bls.n	80012ce <ADC_ConfigureBoostMode+0x19a>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <ADC_ConfigureBoostMode+0x1f4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d80a      	bhi.n	80012ce <ADC_ConfigureBoostMode+0x19a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	e01b      	b.n	8001306 <ADC_ConfigureBoostMode+0x1d2>
    else if((freq > 12500000UL) && (freq <= 25000000UL)) 
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4a15      	ldr	r2, [pc, #84]	; (8001328 <ADC_ConfigureBoostMode+0x1f4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d90e      	bls.n	80012f4 <ADC_ConfigureBoostMode+0x1c0>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4a14      	ldr	r2, [pc, #80]	; (800132c <ADC_ConfigureBoostMode+0x1f8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d80a      	bhi.n	80012f4 <ADC_ConfigureBoostMode+0x1c0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	e008      	b.n	8001306 <ADC_ConfigureBoostMode+0x1d2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001302:	609a      	str	r2, [r3, #8]
}
 8001304:	e7ff      	b.n	8001306 <ADC_ConfigureBoostMode+0x1d2>
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000
 8001314:	40022100 	.word	0x40022100
 8001318:	40022300 	.word	0x40022300
 800131c:	58026300 	.word	0x58026300
 8001320:	01312d00 	.word	0x01312d00
 8001324:	005f5e10 	.word	0x005f5e10
 8001328:	00bebc20 	.word	0x00bebc20
 800132c:	017d7840 	.word	0x017d7840

08001330 <LL_ADC_SetCommonPathInternalCh>:
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	609a      	str	r2, [r3, #8]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_ADC_GetCommonPathInternalCh>:
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_ADC_SetOffset>:
{
 8001372:	b490      	push	{r4, r7}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3360      	adds	r3, #96	; 0x60
 8001384:	461a      	mov	r2, r3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	430b      	orrs	r3, r1
 800139e:	4313      	orrs	r3, r2
 80013a0:	6023      	str	r3, [r4, #0]
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc90      	pop	{r4, r7}
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_GetOffsetChannel>:
{
 80013ac:	b490      	push	{r4, r7}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3360      	adds	r3, #96	; 0x60
 80013ba:	461a      	mov	r2, r3
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc90      	pop	{r4, r7}
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_SetOffsetSignedSaturation>:
{
 80013d4:	b490      	push	{r4, r7}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3360      	adds	r3, #96	; 0x60
 80013e4:	461a      	mov	r2, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	6023      	str	r3, [r4, #0]
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc90      	pop	{r4, r7}
 8001402:	4770      	bx	lr

08001404 <LL_ADC_INJ_SetQueueMode>:
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <LL_ADC_INJ_SetQueueMode+0x28>)
 8001414:	4013      	ands	r3, r2
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	60da      	str	r2, [r3, #12]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	7fdfffff 	.word	0x7fdfffff

08001430 <LL_ADC_SetChannelSamplingTime>:
{
 8001430:	b490      	push	{r4, r7}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3314      	adds	r3, #20
 8001440:	461a      	mov	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	0e5b      	lsrs	r3, r3, #25
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	4413      	add	r3, r2
 800144e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8001450:	6822      	ldr	r2, [r4, #0]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	0d1b      	lsrs	r3, r3, #20
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	2107      	movs	r1, #7
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	401a      	ands	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	0d1b      	lsrs	r3, r3, #20
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	6023      	str	r3, [r4, #0]
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bc90      	pop	{r4, r7}
 800147e:	4770      	bx	lr

08001480 <LL_ADC_SetChannelSingleDiff>:
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001498:	43db      	mvns	r3, r3
 800149a:	401a      	ands	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0318 	and.w	r3, r3, #24
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014a4:	40d9      	lsrs	r1, r3
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	400b      	ands	r3, r1
 80014aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014ae:	431a      	orrs	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	000fffff 	.word	0x000fffff

080014c8 <LL_ADC_IsEnabled>:
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <LL_ADC_IsEnabled+0x18>
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <LL_ADC_IsEnabled+0x1a>
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <LL_ADC_REG_IsConversionOngoing>:
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d101      	bne.n	8001506 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_INJ_IsConversionOngoing>:
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	2b08      	cmp	r3, #8
 8001526:	d101      	bne.n	800152c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef* hadc)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b0ab      	sub	sp, #172	; 0xac
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  
  /*  DISCEN and JAUTO bits can't be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (sConfigInjected->AutoInjectedConv == ENABLE)));  
  
  /* Verification of channel number */
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4aa7      	ldr	r2, [pc, #668]	; (800185c <HAL_ADCEx_InjectedConfigChannel+0x2bc>)
 80015c0:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
    }
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d102      	bne.n	80015d2 <HAL_ADCEx_InjectedConfigChannel+0x32>
 80015cc:	2302      	movs	r3, #2
 80015ce:	f000 bcb6 	b.w	8001f3e <HAL_ADCEx_InjectedConfigChannel+0x99e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_ADCEx_InjectedConfigChannel+0x4a>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d130      	bne.n	800164c <HAL_ADCEx_InjectedConfigChannel+0xac>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b09      	cmp	r3, #9
 80015f0:	d179      	bne.n	80016e6 <HAL_ADCEx_InjectedConfigChannel+0x146>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d010      	beq.n	800161c <HAL_ADCEx_InjectedConfigChannel+0x7c>
      {
         tmp_JSQR_ContextQueueBeingBuilt = (  ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	0e9b      	lsrs	r3, r3, #26
 8001600:	025b      	lsls	r3, r3, #9
 8001602:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800160e:	431a      	orrs	r2, r3
                                            | sConfigInjected->ExternalTrigInjecConvEdge
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         tmp_JSQR_ContextQueueBeingBuilt = (  ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8001614:	4313      	orrs	r3, r2
 8001616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800161a:	e007      	b.n	800162c <HAL_ADCEx_InjectedConfigChannel+0x8c>
                                           );
      }
      else
      {
         tmp_JSQR_ContextQueueBeingBuilt = ( ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0e9b      	lsrs	r3, r3, #26
 8001622:	025b      	lsls	r3, r3, #9
 8001624:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8001628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      }
      
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt); 
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001632:	4b8b      	ldr	r3, [pc, #556]	; (8001860 <HAL_ADCEx_InjectedConfigChannel+0x2c0>)
 8001634:	4013      	ands	r3, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800163e:	430b      	orrs	r3, r1
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001648:	65da      	str	r2, [r3, #92]	; 0x5c
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800164a:	e04c      	b.n	80016e6 <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */
    
    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U) 
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001650:	2b00      	cmp	r3, #0
 8001652:	d11d      	bne.n	8001690 <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	661a      	str	r2, [r3, #96]	; 0x60
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
       hadc->InjectionConfig.ContextQueue = 0x00000000U;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00d      	beq.n	8001686 <HAL_ADCEx_InjectedConfigChannel+0xe6>
      {
         tmp_JSQR_ContextQueueBeingBuilt = (  (sConfigInjected->InjectedNbrOfConversion - 1U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	1e5a      	subs	r2, r3, #1
                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8001678:	431a      	orrs	r2, r3
                                            | sConfigInjected->ExternalTrigInjecConvEdge
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         tmp_JSQR_ContextQueueBeingBuilt = (  (sConfigInjected->InjectedNbrOfConversion - 1U)
 800167e:	4313      	orrs	r3, r2
 8001680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001684:	e004      	b.n	8001690 <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                           );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U) );
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	3b01      	subs	r3, #1
 800168c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);
    
    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0e9b      	lsrs	r3, r3, #26
 8001696:	f003 021f 	and.w	r2, r3, #31
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80016aa:	4313      	orrs	r3, r2
 80016ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    
    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b4:	1e5a      	subs	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	661a      	str	r2, [r3, #96]	; 0x60
    
    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous  
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10a      	bne.n	80016e6 <HAL_ADCEx_InjectedConfigChannel+0x146>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue); 
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d6:	4b62      	ldr	r3, [pc, #392]	; (8001860 <HAL_ADCEx_InjectedConfigChannel+0x2c0>)
 80016d8:	4013      	ands	r3, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	430b      	orrs	r3, r1
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff12 	bl	8001514 <LL_ADC_INJ_IsConversionOngoing>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d14d      	bne.n	8001792 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
  {
  /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel) & 0x1FUL));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d108      	bne.n	8001714 <HAL_ADCEx_InjectedConfigChannel+0x174>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0e9b      	lsrs	r3, r3, #26
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	2201      	movs	r2, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	e012      	b.n	800173a <HAL_ADCEx_InjectedConfigChannel+0x19a>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001720:	fa93 f3a3 	rbit	r3, r3
 8001724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	2201      	movs	r2, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	69d1      	ldr	r1, [r2, #28]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	430b      	orrs	r3, r1
 8001746:	61d3      	str	r3, [r2, #28]
    
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800174e:	2b00      	cmp	r3, #0
 8001750:	d112      	bne.n	8001778 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
    {                               
      MODIFY_REG(hadc->Instance->CFGR,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001762:	055a      	lsls	r2, r3, #21
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800176a:	051b      	lsls	r3, r3, #20
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	e00c      	b.n	8001792 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001788:	055a      	lsls	r2, r3, #21
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fea9 	bl	80014ee <LL_ADC_REG_IsConversionOngoing>
 800179c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff feb5 	bl	8001514 <LL_ADC_INJ_IsConversionOngoing>
 80017aa:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  
  if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 81d8 	bne.w	8001b68 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f040 81d3 	bne.w	8001b68 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_ADCEx_InjectedConfigChannel+0x232>
       || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_ADCEx_InjectedConfigChannel+0x260>
    {
         if (sConfigInjected->AutoInjectedConv == ENABLE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d108      	bne.n	80017ee <HAL_ADCEx_InjectedConfigChannel+0x24e>
         {
           SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);    
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80017ea:	60da      	str	r2, [r3, #12]
         if (sConfigInjected->AutoInjectedConv == ENABLE)
 80017ec:	e01f      	b.n	800182e <HAL_ADCEx_InjectedConfigChannel+0x28e>
         }
         else
         {
           CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);    
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80017fc:	60da      	str	r2, [r3, #12]
         if (sConfigInjected->AutoInjectedConv == ENABLE)
 80017fe:	e016      	b.n	800182e <HAL_ADCEx_InjectedConfigChannel+0x28e>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001806:	2b01      	cmp	r3, #1
 8001808:	d109      	bne.n	800181e <HAL_ADCEx_InjectedConfigChannel+0x27e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	f043 0220 	orr.w	r2, r3, #32
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
        
        tmp_hal_status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800181c:	e007      	b.n	800182e <HAL_ADCEx_InjectedConfigChannel+0x28e>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO); 
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800182c:	60da      	str	r2, [r3, #12]
      }
    }
    
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001834:	2b01      	cmp	r3, #1
 8001836:	d117      	bne.n	8001868 <HAL_ADCEx_InjectedConfigChannel+0x2c8>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */
      
      /* Enable OverSampling mode */
       MODIFY_REG(hadc->Instance->CFGR2,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_ADCEx_InjectedConfigChannel+0x2c4>)
 8001840:	4013      	ands	r3, r2
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800184a:	430a      	orrs	r2, r1
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0202 	orr.w	r2, r2, #2
 8001856:	611a      	str	r2, [r3, #16]
 8001858:	e00e      	b.n	8001878 <HAL_ADCEx_InjectedConfigChannel+0x2d8>
 800185a:	bf00      	nop
 800185c:	47ff0000 	.word	0x47ff0000
 8001860:	04104000 	.word	0x04104000
 8001864:	fc00fe1d 	.word	0xfc00fe1d
                 );
    }
    else
    {
      /* Disable Regular OverSampling */
       CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0202 	bic.w	r2, r2, #2
 8001876:	611a      	str	r2, [r3, #16]
    }
    
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	461a      	mov	r2, r3
 8001886:	f7ff fdd3 	bl	8001430 <LL_ADC_SetChannelSamplingTime>
    
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800188a:	4bac      	ldr	r3, [pc, #688]	; (8001b3c <HAL_ADCEx_InjectedConfigChannel+0x59c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001896:	d10b      	bne.n	80018b0 <HAL_ADCEx_InjectedConfigChannel+0x310>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	e01d      	b.n	80018ec <HAL_ADCEx_InjectedConfigChannel+0x34c>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10b      	bne.n	80018d6 <HAL_ADCEx_InjectedConfigChannel+0x336>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	e00a      	b.n	80018ec <HAL_ADCEx_InjectedConfigChannel+0x34c>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    
    if(sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d019      	beq.n	800192c <HAL_ADCEx_InjectedConfigChannel+0x38c>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel, tmpOffsetShifted);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6919      	ldr	r1, [r3, #16]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001908:	f7ff fd33 	bl	8001372 <LL_ADC_SetOffset>
       
      /* Set ADC selected offset signed saturation */
      LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber, (sConfigInjected->InjectedOffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6919      	ldr	r1, [r3, #16]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	7f1b      	ldrb	r3, [r3, #28]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <HAL_ADCEx_InjectedConfigChannel+0x382>
 800191c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001920:	e000      	b.n	8001924 <HAL_ADCEx_InjectedConfigChannel+0x384>
 8001922:	2300      	movs	r3, #0
 8001924:	461a      	mov	r2, r3
 8001926:	f7ff fd55 	bl	80013d4 <LL_ADC_SetOffsetSignedSaturation>
 800192a:	e11d      	b.n	8001b68 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fd3a 	bl	80013ac <LL_ADC_GetOffsetChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10a      	bne.n	8001958 <HAL_ADCEx_InjectedConfigChannel+0x3b8>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fd2f 	bl	80013ac <LL_ADC_GetOffsetChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	0e9b      	lsrs	r3, r3, #26
 8001952:	f003 021f 	and.w	r2, r3, #31
 8001956:	e013      	b.n	8001980 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fd24 	bl	80013ac <LL_ADC_GetOffsetChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return(result);
 8001976:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0e9b      	lsrs	r3, r3, #26
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	e009      	b.n	80019ac <HAL_ADCEx_InjectedConfigChannel+0x40c>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 80019a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d107      	bne.n	80019c0 <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
       LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2300      	movs	r3, #0
 80019ba:	2100      	movs	r1, #0
 80019bc:	f7ff fcd9 	bl	8001372 <LL_ADC_SetOffset>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2101      	movs	r1, #1
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fcf0 	bl	80013ac <LL_ADC_GetOffsetChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <HAL_ADCEx_InjectedConfigChannel+0x44c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2101      	movs	r1, #1
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fce5 	bl	80013ac <LL_ADC_GetOffsetChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	0e9b      	lsrs	r3, r3, #26
 80019e6:	f003 021f 	and.w	r2, r3, #31
 80019ea:	e00f      	b.n	8001a0c <HAL_ADCEx_InjectedConfigChannel+0x46c>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fcda 	bl	80013ac <LL_ADC_GetOffsetChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 8001a04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <HAL_ADCEx_InjectedConfigChannel+0x484>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0e9b      	lsrs	r3, r3, #26
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	e009      	b.n	8001a38 <HAL_ADCEx_InjectedConfigChannel+0x498>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a2c:	fa93 f3a3 	rbit	r3, r3
 8001a30:	66bb      	str	r3, [r7, #104]	; 0x68
  return(result);
 8001a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_ADCEx_InjectedConfigChannel+0x4ac>
      {
       LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2300      	movs	r3, #0
 8001a46:	2101      	movs	r1, #1
 8001a48:	f7ff fc93 	bl	8001372 <LL_ADC_SetOffset>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2102      	movs	r1, #2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fcaa 	bl	80013ac <LL_ADC_GetOffsetChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10a      	bne.n	8001a78 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2102      	movs	r1, #2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fc9f 	bl	80013ac <LL_ADC_GetOffsetChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	0e9b      	lsrs	r3, r3, #26
 8001a72:	f003 021f 	and.w	r2, r3, #31
 8001a76:	e00f      	b.n	8001a98 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fc94 	bl	80013ac <LL_ADC_GetOffsetChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADCEx_InjectedConfigChannel+0x510>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0e9b      	lsrs	r3, r3, #26
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	e009      	b.n	8001ac4 <HAL_ADCEx_InjectedConfigChannel+0x524>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8001abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d107      	bne.n	8001ad8 <HAL_ADCEx_InjectedConfigChannel+0x538>
      {
       LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	f7ff fc4d 	bl	8001372 <LL_ADC_SetOffset>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2103      	movs	r1, #3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fc64 	bl	80013ac <LL_ADC_GetOffsetChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10a      	bne.n	8001b04 <HAL_ADCEx_InjectedConfigChannel+0x564>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2103      	movs	r1, #3
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fc59 	bl	80013ac <LL_ADC_GetOffsetChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	0e9b      	lsrs	r3, r3, #26
 8001afe:	f003 021f 	and.w	r2, r3, #31
 8001b02:	e00f      	b.n	8001b24 <HAL_ADCEx_InjectedConfigChannel+0x584>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2103      	movs	r1, #3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fc4e 	bl	80013ac <LL_ADC_GetOffsetChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8001b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d107      	bne.n	8001b40 <HAL_ADCEx_InjectedConfigChannel+0x5a0>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0e9b      	lsrs	r3, r3, #26
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	e00b      	b.n	8001b54 <HAL_ADCEx_InjectedConfigChannel+0x5b4>
 8001b3c:	5c001000 	.word	0x5c001000
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d107      	bne.n	8001b68 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
      {
       LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE); 
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2300      	movs	r3, #0
 8001b62:	2103      	movs	r1, #3
 8001b64:	f7ff fc05 	bl	8001372 <LL_ADC_SetOffset>
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fcab 	bl	80014c8 <LL_ADC_IsEnabled>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f040 81dc 	bne.w	8001f32 <HAL_ADCEx_InjectedConfigChannel+0x992>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6819      	ldr	r1, [r3, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f7ff fc7a 	bl	8001480 <LL_ADC_SetChannelSingleDiff>
    
    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4aa9      	ldr	r2, [pc, #676]	; (8001e38 <HAL_ADCEx_InjectedConfigChannel+0x898>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	f040 80f6 	bne.w	8001d84 <HAL_ADCEx_InjectedConfigChannel+0x7e4>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10b      	bne.n	8001bc0 <HAL_ADCEx_InjectedConfigChannel+0x620>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0e9b      	lsrs	r3, r3, #26
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	2b09      	cmp	r3, #9
 8001bb6:	bf94      	ite	ls
 8001bb8:	2301      	movls	r3, #1
 8001bba:	2300      	movhi	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	e011      	b.n	8001be4 <HAL_ADCEx_InjectedConfigChannel+0x644>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8001bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2b09      	cmp	r3, #9
 8001bdc:	bf94      	ite	ls
 8001bde:	2301      	movls	r3, #1
 8001be0:	2300      	movhi	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d061      	beq.n	8001cac <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_ADCEx_InjectedConfigChannel+0x664>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0e9b      	lsrs	r3, r3, #26
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	069b      	lsls	r3, r3, #26
 8001bfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c02:	e00d      	b.n	8001c20 <HAL_ADCEx_InjectedConfigChannel+0x680>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8001c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	3301      	adds	r3, #1
 8001c1a:	069b      	lsls	r3, r3, #26
 8001c1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d109      	bne.n	8001c40 <HAL_ADCEx_InjectedConfigChannel+0x6a0>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0e9b      	lsrs	r3, r3, #26
 8001c32:	3301      	adds	r3, #1
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	e00f      	b.n	8001c60 <HAL_ADCEx_InjectedConfigChannel+0x6c0>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	3301      	adds	r3, #1
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	ea42 0103 	orr.w	r1, r2, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10a      	bne.n	8001c86 <HAL_ADCEx_InjectedConfigChannel+0x6e6>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0e9b      	lsrs	r3, r3, #26
 8001c76:	3301      	adds	r3, #1
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	051b      	lsls	r3, r3, #20
 8001c84:	e010      	b.n	8001ca8 <HAL_ADCEx_InjectedConfigChannel+0x708>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8001c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	051b      	lsls	r3, r3, #20
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	e066      	b.n	8001d7a <HAL_ADCEx_InjectedConfigChannel+0x7da>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d107      	bne.n	8001cc8 <HAL_ADCEx_InjectedConfigChannel+0x728>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0e9b      	lsrs	r3, r3, #26
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	069b      	lsls	r3, r3, #26
 8001cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc6:	e00d      	b.n	8001ce4 <HAL_ADCEx_InjectedConfigChannel+0x744>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	623b      	str	r3, [r7, #32]
  return(result);
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	3301      	adds	r3, #1
 8001cde:	069b      	lsls	r3, r3, #26
 8001ce0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d109      	bne.n	8001d04 <HAL_ADCEx_InjectedConfigChannel+0x764>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0e9b      	lsrs	r3, r3, #26
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	e00f      	b.n	8001d24 <HAL_ADCEx_InjectedConfigChannel+0x784>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	61bb      	str	r3, [r7, #24]
  return(result);
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	ea42 0103 	orr.w	r1, r2, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10d      	bne.n	8001d50 <HAL_ADCEx_InjectedConfigChannel+0x7b0>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	3b1e      	subs	r3, #30
 8001d48:	051b      	lsls	r3, r3, #20
 8001d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	e013      	b.n	8001d78 <HAL_ADCEx_InjectedConfigChannel+0x7d8>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	613b      	str	r3, [r7, #16]
  return(result);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	3301      	adds	r3, #1
 8001d66:	f003 021f 	and.w	r2, r3, #31
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b1e      	subs	r3, #30
 8001d72:	051b      	lsls	r3, r3, #20
 8001d74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	6892      	ldr	r2, [r2, #8]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7ff fb56 	bl	8001430 <LL_ADC_SetChannelSamplingTime>
    /* internal measurement paths enable: If internal channel selected,       */
    /* enable dedicated internal buffers and path.                            */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */
    
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f280 80d2 	bge.w	8001f32 <HAL_ADCEx_InjectedConfigChannel+0x992>
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a2a      	ldr	r2, [pc, #168]	; (8001e3c <HAL_ADCEx_InjectedConfigChannel+0x89c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d004      	beq.n	8001da2 <HAL_ADCEx_InjectedConfigChannel+0x802>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a28      	ldr	r2, [pc, #160]	; (8001e40 <HAL_ADCEx_InjectedConfigChannel+0x8a0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d10e      	bne.n	8001dc0 <HAL_ADCEx_InjectedConfigChannel+0x820>
 8001da2:	4826      	ldr	r0, [pc, #152]	; (8001e3c <HAL_ADCEx_InjectedConfigChannel+0x89c>)
 8001da4:	f7ff fb90 	bl	80014c8 <LL_ADC_IsEnabled>
 8001da8:	4604      	mov	r4, r0
 8001daa:	4825      	ldr	r0, [pc, #148]	; (8001e40 <HAL_ADCEx_InjectedConfigChannel+0x8a0>)
 8001dac:	f7ff fb8c 	bl	80014c8 <LL_ADC_IsEnabled>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4323      	orrs	r3, r4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	e008      	b.n	8001dd2 <HAL_ADCEx_InjectedConfigChannel+0x832>
 8001dc0:	4820      	ldr	r0, [pc, #128]	; (8001e44 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 8001dc2:	f7ff fb81 	bl	80014c8 <LL_ADC_IsEnabled>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf0c      	ite	eq
 8001dcc:	2301      	moveq	r3, #1
 8001dce:	2300      	movne	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 80a4 	beq.w	8001f20 <HAL_ADCEx_InjectedConfigChannel+0x980>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <HAL_ADCEx_InjectedConfigChannel+0x89c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d004      	beq.n	8001dec <HAL_ADCEx_InjectedConfigChannel+0x84c>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <HAL_ADCEx_InjectedConfigChannel+0x8a0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d101      	bne.n	8001df0 <HAL_ADCEx_InjectedConfigChannel+0x850>
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 8001dee:	e000      	b.n	8001df2 <HAL_ADCEx_InjectedConfigChannel+0x852>
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff faaf 	bl	8001356 <LL_ADC_GetCommonPathInternalCh>
 8001df8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        
        /* If the requested internal measurement path has already been enabled, */
        /* bypass the configuration processing.                                 */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <HAL_ADCEx_InjectedConfigChannel+0x8b0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d140      	bne.n	8001e88 <HAL_ADCEx_InjectedConfigChannel+0x8e8>
 8001e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d13a      	bne.n	8001e88 <HAL_ADCEx_InjectedConfigChannel+0x8e8>
        {
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	f040 808a 	bne.w	8001f32 <HAL_ADCEx_InjectedConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <HAL_ADCEx_InjectedConfigChannel+0x89c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d004      	beq.n	8001e32 <HAL_ADCEx_InjectedConfigChannel+0x892>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <HAL_ADCEx_InjectedConfigChannel+0x8a0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d110      	bne.n	8001e54 <HAL_ADCEx_InjectedConfigChannel+0x8b4>
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 8001e34:	e00f      	b.n	8001e56 <HAL_ADCEx_InjectedConfigChannel+0x8b6>
 8001e36:	bf00      	nop
 8001e38:	47ff0000 	.word	0x47ff0000
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40022100 	.word	0x40022100
 8001e44:	58026000 	.word	0x58026000
 8001e48:	40022300 	.word	0x40022300
 8001e4c:	58026300 	.word	0x58026300
 8001e50:	cb840000 	.word	0xcb840000
 8001e54:	4a3c      	ldr	r2, [pc, #240]	; (8001f48 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8001e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4610      	mov	r0, r2
 8001e62:	f7ff fa65 	bl	8001330 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	4a38      	ldr	r2, [pc, #224]	; (8001f50 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	099b      	lsrs	r3, r3, #6
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
            while(wait_loop_index != 0UL)
 8001e78:	e002      	b.n	8001e80 <HAL_ADCEx_InjectedConfigChannel+0x8e0>
            {
              wait_loop_index--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
            while(wait_loop_index != 0UL)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f9      	bne.n	8001e7a <HAL_ADCEx_InjectedConfigChannel+0x8da>
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e86:	e054      	b.n	8001f32 <HAL_ADCEx_InjectedConfigChannel+0x992>
            }
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d120      	bne.n	8001ed4 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8001e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d11a      	bne.n	8001ed4 <HAL_ADCEx_InjectedConfigChannel+0x934>
        { 
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2d      	ldr	r2, [pc, #180]	; (8001f58 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d144      	bne.n	8001f32 <HAL_ADCEx_InjectedConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a2b      	ldr	r2, [pc, #172]	; (8001f5c <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d004      	beq.n	8001ebc <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a2a      	ldr	r2, [pc, #168]	; (8001f60 <HAL_ADCEx_InjectedConfigChannel+0x9c0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_ADCEx_InjectedConfigChannel+0x920>
 8001ebc:	4a29      	ldr	r2, [pc, #164]	; (8001f64 <HAL_ADCEx_InjectedConfigChannel+0x9c4>)
 8001ebe:	e000      	b.n	8001ec2 <HAL_ADCEx_InjectedConfigChannel+0x922>
 8001ec0:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8001ec2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4610      	mov	r0, r2
 8001ece:	f7ff fa2f 	bl	8001330 <LL_ADC_SetCommonPathInternalCh>
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ed2:	e02e      	b.n	8001f32 <HAL_ADCEx_InjectedConfigChannel+0x992>
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_ADCEx_InjectedConfigChannel+0x9c8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d129      	bne.n	8001f32 <HAL_ADCEx_InjectedConfigChannel+0x992>
 8001ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d123      	bne.n	8001f32 <HAL_ADCEx_InjectedConfigChannel+0x992>
        { 
          if (ADC_VREFINT_INSTANCE(hadc))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d11e      	bne.n	8001f32 <HAL_ADCEx_InjectedConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d004      	beq.n	8001f08 <HAL_ADCEx_InjectedConfigChannel+0x968>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_ADCEx_InjectedConfigChannel+0x9c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_ADCEx_InjectedConfigChannel+0x96c>
 8001f08:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <HAL_ADCEx_InjectedConfigChannel+0x9c4>)
 8001f0a:	e000      	b.n	8001f0e <HAL_ADCEx_InjectedConfigChannel+0x96e>
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8001f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f16:	4619      	mov	r1, r3
 8001f18:	4610      	mov	r0, r2
 8001f1a:	f7ff fa09 	bl	8001330 <LL_ADC_SetCommonPathInternalCh>
 8001f1e:	e008      	b.n	8001f32 <HAL_ADCEx_InjectedConfigChannel+0x992>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	f043 0220 	orr.w	r2, r3, #32
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        tmp_hal_status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 8001f3a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	37ac      	adds	r7, #172	; 0xac
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd90      	pop	{r4, r7, pc}
 8001f46:	bf00      	nop
 8001f48:	58026300 	.word	0x58026300
 8001f4c:	24000008 	.word	0x24000008
 8001f50:	053e2d63 	.word	0x053e2d63
 8001f54:	c7520000 	.word	0xc7520000
 8001f58:	58026000 	.word	0x58026000
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	40022100 	.word	0x40022100
 8001f64:	40022300 	.word	0x40022300
 8001f68:	cfb80000 	.word	0xcfb80000

08001f6c <HAL_ADCEx_DisableInjectedQueue>:
  *         conversion is ongoing. 
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef* hadc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fab8 	bl	80014ee <LL_ADC_REG_IsConversionOngoing>
 8001f7e:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fac5 	bl	8001514 <LL_ADC_INJ_IsConversionOngoing>
 8001f8a:	60f8      	str	r0, [r7, #12]
  
  /* Parameter can be set only if no conversion is on-going */
  if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10c      	bne.n	8001fac <HAL_ADCEx_DisableInjectedQueue+0x40>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d109      	bne.n	8001fac <HAL_ADCEx_DisableInjectedQueue+0x40>
     )
  {
    LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fa2f 	bl	8001404 <LL_ADC_INJ_SetQueueMode>
    tmp_hal_status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75fb      	strb	r3, [r7, #23]
 8001faa:	e001      	b.n	8001fb0 <HAL_ADCEx_DisableInjectedQueue+0x44>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	75fb      	strb	r3, [r7, #23]
  }
  
  return tmp_hal_status;
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <__NVIC_SetPriorityGrouping+0x40>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <__NVIC_SetPriorityGrouping+0x40>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00
 8002000:	05fa0000 	.word	0x05fa0000

08002004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <__NVIC_GetPriorityGrouping+0x18>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	f003 0307 	and.w	r3, r3, #7
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800202a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800202e:	2b00      	cmp	r3, #0
 8002030:	db0b      	blt.n	800204a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4907      	ldr	r1, [pc, #28]	; (8002058 <__NVIC_EnableIRQ+0x38>)
 800203a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	2001      	movs	r0, #1
 8002042:	fa00 f202 	lsl.w	r2, r0, r2
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000e100 	.word	0xe000e100

0800205c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206c:	2b00      	cmp	r3, #0
 800206e:	db0a      	blt.n	8002086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	490c      	ldr	r1, [pc, #48]	; (80020a8 <__NVIC_SetPriority+0x4c>)
 8002076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207a:	0112      	lsls	r2, r2, #4
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	440b      	add	r3, r1
 8002080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002084:	e00a      	b.n	800209c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4908      	ldr	r1, [pc, #32]	; (80020ac <__NVIC_SetPriority+0x50>)
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	3b04      	subs	r3, #4
 8002094:	0112      	lsls	r2, r2, #4
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	440b      	add	r3, r1
 800209a:	761a      	strb	r2, [r3, #24]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000e100 	.word	0xe000e100
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f1c3 0307 	rsb	r3, r3, #7
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	bf28      	it	cs
 80020ce:	2304      	movcs	r3, #4
 80020d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3304      	adds	r3, #4
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d902      	bls.n	80020e0 <NVIC_EncodePriority+0x30>
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3b03      	subs	r3, #3
 80020de:	e000      	b.n	80020e2 <NVIC_EncodePriority+0x32>
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	401a      	ands	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43d9      	mvns	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	4313      	orrs	r3, r2
         );
}
 800210a:	4618      	mov	r0, r3
 800210c:	3724      	adds	r7, #36	; 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002128:	d301      	bcc.n	800212e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212a:	2301      	movs	r3, #1
 800212c:	e00f      	b.n	800214e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <SysTick_Config+0x40>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002136:	210f      	movs	r1, #15
 8002138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800213c:	f7ff ff8e 	bl	800205c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <SysTick_Config+0x40>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <SysTick_Config+0x40>)
 8002148:	2207      	movs	r2, #7
 800214a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	e000e010 	.word	0xe000e010

0800215c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff29 	bl	8001fbc <__NVIC_SetPriorityGrouping>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff40 	bl	8002004 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff90 	bl	80020b0 <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5f 	bl	800205c <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff33 	bl	8002020 <__NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffa4 	bl	8002118 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021ea:	4b89      	ldr	r3, [pc, #548]	; (8002410 <HAL_GPIO_Init+0x234>)
 80021ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021ee:	e194      	b.n	800251a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8186 	beq.w	8002514 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x3c>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b12      	cmp	r3, #18
 8002216:	d123      	bne.n	8002260 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	08da      	lsrs	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3208      	adds	r2, #8
 8002220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	220f      	movs	r2, #15
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	08da      	lsrs	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3208      	adds	r2, #8
 800225a:	69b9      	ldr	r1, [r7, #24]
 800225c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0203 	and.w	r2, r3, #3
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d00b      	beq.n	80022b4 <HAL_GPIO_Init+0xd8>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d007      	beq.n	80022b4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022a8:	2b11      	cmp	r3, #17
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b12      	cmp	r3, #18
 80022b2:	d130      	bne.n	8002316 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ea:	2201      	movs	r2, #1
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	f003 0201 	and.w	r2, r3, #1
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80e0 	beq.w	8002514 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002354:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <HAL_GPIO_Init+0x238>)
 8002356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800235a:	4a2e      	ldr	r2, [pc, #184]	; (8002414 <HAL_GPIO_Init+0x238>)
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002364:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_GPIO_Init+0x238>)
 8002366:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002372:	4a29      	ldr	r2, [pc, #164]	; (8002418 <HAL_GPIO_Init+0x23c>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a20      	ldr	r2, [pc, #128]	; (800241c <HAL_GPIO_Init+0x240>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d052      	beq.n	8002444 <HAL_GPIO_Init+0x268>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_GPIO_Init+0x244>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d031      	beq.n	800240a <HAL_GPIO_Init+0x22e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <HAL_GPIO_Init+0x248>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02b      	beq.n	8002406 <HAL_GPIO_Init+0x22a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <HAL_GPIO_Init+0x24c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d025      	beq.n	8002402 <HAL_GPIO_Init+0x226>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a1c      	ldr	r2, [pc, #112]	; (800242c <HAL_GPIO_Init+0x250>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <HAL_GPIO_Init+0x222>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <HAL_GPIO_Init+0x254>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d019      	beq.n	80023fa <HAL_GPIO_Init+0x21e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1a      	ldr	r2, [pc, #104]	; (8002434 <HAL_GPIO_Init+0x258>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x21a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a19      	ldr	r2, [pc, #100]	; (8002438 <HAL_GPIO_Init+0x25c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x216>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_GPIO_Init+0x260>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x212>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a17      	ldr	r2, [pc, #92]	; (8002440 <HAL_GPIO_Init+0x264>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x20e>
 80023e6:	2309      	movs	r3, #9
 80023e8:	e02d      	b.n	8002446 <HAL_GPIO_Init+0x26a>
 80023ea:	230a      	movs	r3, #10
 80023ec:	e02b      	b.n	8002446 <HAL_GPIO_Init+0x26a>
 80023ee:	2308      	movs	r3, #8
 80023f0:	e029      	b.n	8002446 <HAL_GPIO_Init+0x26a>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e027      	b.n	8002446 <HAL_GPIO_Init+0x26a>
 80023f6:	2306      	movs	r3, #6
 80023f8:	e025      	b.n	8002446 <HAL_GPIO_Init+0x26a>
 80023fa:	2305      	movs	r3, #5
 80023fc:	e023      	b.n	8002446 <HAL_GPIO_Init+0x26a>
 80023fe:	2304      	movs	r3, #4
 8002400:	e021      	b.n	8002446 <HAL_GPIO_Init+0x26a>
 8002402:	2303      	movs	r3, #3
 8002404:	e01f      	b.n	8002446 <HAL_GPIO_Init+0x26a>
 8002406:	2302      	movs	r3, #2
 8002408:	e01d      	b.n	8002446 <HAL_GPIO_Init+0x26a>
 800240a:	2301      	movs	r3, #1
 800240c:	e01b      	b.n	8002446 <HAL_GPIO_Init+0x26a>
 800240e:	bf00      	nop
 8002410:	58000080 	.word	0x58000080
 8002414:	58024400 	.word	0x58024400
 8002418:	58000400 	.word	0x58000400
 800241c:	58020000 	.word	0x58020000
 8002420:	58020400 	.word	0x58020400
 8002424:	58020800 	.word	0x58020800
 8002428:	58020c00 	.word	0x58020c00
 800242c:	58021000 	.word	0x58021000
 8002430:	58021400 	.word	0x58021400
 8002434:	58021800 	.word	0x58021800
 8002438:	58021c00 	.word	0x58021c00
 800243c:	58022000 	.word	0x58022000
 8002440:	58022400 	.word	0x58022400
 8002444:	2300      	movs	r3, #0
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	f002 0203 	and.w	r2, r2, #3
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	4093      	lsls	r3, r2
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002456:	4938      	ldr	r1, [pc, #224]	; (8002538 <HAL_GPIO_Init+0x35c>)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800250c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	3301      	adds	r3, #1
 8002518:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f ae63 	bne.w	80021f0 <HAL_GPIO_Init+0x14>
  }
}
 800252a:	bf00      	nop
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	58000400 	.word	0x58000400

0800253c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
 8002548:	4613      	mov	r3, r2
 800254a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800254c:	787b      	ldrb	r3, [r7, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002558:	e003      	b.n	8002562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	041a      	lsls	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	619a      	str	r2, [r3, #24]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8002578:	4b18      	ldr	r3, [pc, #96]	; (80025dc <HAL_PWREx_ConfigSupply+0x6c>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b04      	cmp	r3, #4
 8002582:	d008      	beq.n	8002596 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_PWREx_ConfigSupply+0x6c>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e01d      	b.n	80025d2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_PWREx_ConfigSupply+0x6c>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f023 0207 	bic.w	r2, r3, #7
 800259e:	490f      	ldr	r1, [pc, #60]	; (80025dc <HAL_PWREx_ConfigSupply+0x6c>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a6:	f7fe f8a1 	bl	80006ec <HAL_GetTick>
 80025aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80025ac:	e009      	b.n	80025c2 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 80025ae:	f7fe f89d 	bl	80006ec <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025bc:	d901      	bls.n	80025c2 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e007      	b.n	80025d2 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_PWREx_ConfigSupply+0x6c>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ce:	d1ee      	bne.n	80025ae <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	58024800 	.word	0x58024800

080025e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e3a4      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8087 	beq.w	800270e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002600:	4b9a      	ldr	r3, [pc, #616]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800260a:	4b98      	ldr	r3, [pc, #608]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	2b10      	cmp	r3, #16
 8002614:	d007      	beq.n	8002626 <HAL_RCC_OscConfig+0x46>
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	2b18      	cmp	r3, #24
 800261a:	d110      	bne.n	800263e <HAL_RCC_OscConfig+0x5e>
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d10b      	bne.n	800263e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002626:	4b91      	ldr	r3, [pc, #580]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d06c      	beq.n	800270c <HAL_RCC_OscConfig+0x12c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d168      	bne.n	800270c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e37e      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x76>
 8002648:	4b88      	ldr	r3, [pc, #544]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a87      	ldr	r2, [pc, #540]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 800264e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e02e      	b.n	80026b4 <HAL_RCC_OscConfig+0xd4>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x98>
 800265e:	4b83      	ldr	r3, [pc, #524]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a82      	ldr	r2, [pc, #520]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b80      	ldr	r3, [pc, #512]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a7f      	ldr	r2, [pc, #508]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e01d      	b.n	80026b4 <HAL_RCC_OscConfig+0xd4>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0xbc>
 8002682:	4b7a      	ldr	r3, [pc, #488]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a79      	ldr	r2, [pc, #484]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b77      	ldr	r3, [pc, #476]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a76      	ldr	r2, [pc, #472]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e00b      	b.n	80026b4 <HAL_RCC_OscConfig+0xd4>
 800269c:	4b73      	ldr	r3, [pc, #460]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a72      	ldr	r2, [pc, #456]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 80026a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b70      	ldr	r3, [pc, #448]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a6f      	ldr	r2, [pc, #444]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 80026ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d013      	beq.n	80026e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe f816 	bl	80006ec <HAL_GetTick>
 80026c0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c4:	f7fe f812 	bl	80006ec <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e332      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026d6:	4b65      	ldr	r3, [pc, #404]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0xe4>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe f802 	bl	80006ec <HAL_GetTick>
 80026e8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ec:	f7fd fffe 	bl	80006ec <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e31e      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026fe:	4b5b      	ldr	r3, [pc, #364]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x10c>
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80b0 	beq.w	800287c <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002724:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002726:	4b51      	ldr	r3, [pc, #324]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_RCC_OscConfig+0x162>
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b18      	cmp	r3, #24
 8002736:	d149      	bne.n	80027cc <HAL_RCC_OscConfig+0x1ec>
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d144      	bne.n	80027cc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002742:	4b4a      	ldr	r3, [pc, #296]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_RCC_OscConfig+0x17a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e2f0      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800275a:	4b44      	ldr	r3, [pc, #272]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 0219 	bic.w	r2, r3, #25
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	4941      	ldr	r1, [pc, #260]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fd ffbe 	bl	80006ec <HAL_GetTick>
 8002770:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002774:	f7fd ffba 	bl	80006ec <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e2da      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	f7fd ffd9 	bl	8000748 <HAL_GetREVID>
 8002796:	4602      	mov	r2, r0
 8002798:	f241 0303 	movw	r3, #4099	; 0x1003
 800279c:	429a      	cmp	r2, r3
 800279e:	d80a      	bhi.n	80027b6 <HAL_RCC_OscConfig+0x1d6>
 80027a0:	4b32      	ldr	r3, [pc, #200]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	031b      	lsls	r3, r3, #12
 80027ae:	492f      	ldr	r1, [pc, #188]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b4:	e062      	b.n	800287c <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	061b      	lsls	r3, r3, #24
 80027c4:	4929      	ldr	r1, [pc, #164]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ca:	e057      	b.n	800287c <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d038      	beq.n	8002846 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027d4:	4b25      	ldr	r3, [pc, #148]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 0219 	bic.w	r2, r3, #25
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4922      	ldr	r1, [pc, #136]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fd ff81 	bl	80006ec <HAL_GetTick>
 80027ea:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fd ff7d 	bl	80006ec <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e29d      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	f7fd ff9c 	bl	8000748 <HAL_GetREVID>
 8002810:	4602      	mov	r2, r0
 8002812:	f241 0303 	movw	r3, #4099	; 0x1003
 8002816:	429a      	cmp	r2, r3
 8002818:	d80a      	bhi.n	8002830 <HAL_RCC_OscConfig+0x250>
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	031b      	lsls	r3, r3, #12
 8002828:	4910      	ldr	r1, [pc, #64]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
 800282e:	e025      	b.n	800287c <HAL_RCC_OscConfig+0x29c>
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	061b      	lsls	r3, r3, #24
 800283e:	490b      	ldr	r1, [pc, #44]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
 8002844:	e01a      	b.n	800287c <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a08      	ldr	r2, [pc, #32]	; (800286c <HAL_RCC_OscConfig+0x28c>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7fd ff4b 	bl	80006ec <HAL_GetTick>
 8002856:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285a:	f7fd ff47 	bl	80006ec <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d903      	bls.n	8002870 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e267      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
 800286c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002870:	4ba0      	ldr	r3, [pc, #640]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1ee      	bne.n	800285a <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 808f 	beq.w	80029a8 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288a:	4b9a      	ldr	r3, [pc, #616]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002892:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002894:	4b97      	ldr	r3, [pc, #604]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b08      	cmp	r3, #8
 800289e:	d007      	beq.n	80028b0 <HAL_RCC_OscConfig+0x2d0>
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b18      	cmp	r3, #24
 80028a4:	d12d      	bne.n	8002902 <HAL_RCC_OscConfig+0x322>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d128      	bne.n	8002902 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028b0:	4b90      	ldr	r3, [pc, #576]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_OscConfig+0x2e8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e239      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c8:	f7fd ff3e 	bl	8000748 <HAL_GetREVID>
 80028cc:	4602      	mov	r2, r0
 80028ce:	f241 0303 	movw	r3, #4099	; 0x1003
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d80a      	bhi.n	80028ec <HAL_RCC_OscConfig+0x30c>
 80028d6:	4b87      	ldr	r3, [pc, #540]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	069b      	lsls	r3, r3, #26
 80028e4:	4983      	ldr	r1, [pc, #524]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028ea:	e05d      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ec:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	497e      	ldr	r1, [pc, #504]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002900:	e052      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d035      	beq.n	8002976 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800290a:	4b7a      	ldr	r3, [pc, #488]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a79      	ldr	r2, [pc, #484]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7fd fee9 	bl	80006ec <HAL_GetTick>
 800291a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800291e:	f7fd fee5 	bl	80006ec <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e205      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002930:	4b70      	ldr	r3, [pc, #448]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800293c:	f7fd ff04 	bl	8000748 <HAL_GetREVID>
 8002940:	4602      	mov	r2, r0
 8002942:	f241 0303 	movw	r3, #4099	; 0x1003
 8002946:	429a      	cmp	r2, r3
 8002948:	d80a      	bhi.n	8002960 <HAL_RCC_OscConfig+0x380>
 800294a:	4b6a      	ldr	r3, [pc, #424]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	069b      	lsls	r3, r3, #26
 8002958:	4966      	ldr	r1, [pc, #408]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
 800295e:	e023      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c8>
 8002960:	4b64      	ldr	r3, [pc, #400]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	061b      	lsls	r3, r3, #24
 800296e:	4961      	ldr	r1, [pc, #388]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002970:	4313      	orrs	r3, r2
 8002972:	60cb      	str	r3, [r1, #12]
 8002974:	e018      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002976:	4b5f      	ldr	r3, [pc, #380]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5e      	ldr	r2, [pc, #376]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 800297c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fd feb3 	bl	80006ec <HAL_GetTick>
 8002986:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800298a:	f7fd feaf 	bl	80006ec <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1cf      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800299c:	4b55      	ldr	r3, [pc, #340]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d036      	beq.n	8002a22 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d019      	beq.n	80029f0 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029bc:	4b4d      	ldr	r3, [pc, #308]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 80029be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c0:	4a4c      	ldr	r2, [pc, #304]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7fd fe90 	bl	80006ec <HAL_GetTick>
 80029cc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d0:	f7fd fe8c 	bl	80006ec <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1ac      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029e2:	4b44      	ldr	r3, [pc, #272]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 80029e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x3f0>
 80029ee:	e018      	b.n	8002a22 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f0:	4b40      	ldr	r3, [pc, #256]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f4:	4a3f      	ldr	r2, [pc, #252]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fd fe76 	bl	80006ec <HAL_GetTick>
 8002a00:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a04:	f7fd fe72 	bl	80006ec <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e192      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a16:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d036      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d019      	beq.n	8002a6a <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a36:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a2e      	ldr	r2, [pc, #184]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a42:	f7fd fe53 	bl	80006ec <HAL_GetTick>
 8002a46:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a4a:	f7fd fe4f 	bl	80006ec <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e16f      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x46a>
 8002a68:	e018      	b.n	8002a9c <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a76:	f7fd fe39 	bl	80006ec <HAL_GetTick>
 8002a7a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a7e:	f7fd fe35 	bl	80006ec <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e155      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a90:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8086 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_RCC_OscConfig+0x518>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <HAL_RCC_OscConfig+0x518>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ab6:	f7fd fe19 	bl	80006ec <HAL_GetTick>
 8002aba:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7fd fe15 	bl	80006ec <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b64      	cmp	r3, #100	; 0x64
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e135      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_OscConfig+0x518>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10b      	bne.n	8002afc <HAL_RCC_OscConfig+0x51c>
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a02      	ldr	r2, [pc, #8]	; (8002af4 <HAL_RCC_OscConfig+0x514>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	e032      	b.n	8002b58 <HAL_RCC_OscConfig+0x578>
 8002af2:	bf00      	nop
 8002af4:	58024400 	.word	0x58024400
 8002af8:	58024800 	.word	0x58024800
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10c      	bne.n	8002b1e <HAL_RCC_OscConfig+0x53e>
 8002b04:	4b8f      	ldr	r3, [pc, #572]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a8e      	ldr	r2, [pc, #568]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	4b8c      	ldr	r3, [pc, #560]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a8b      	ldr	r2, [pc, #556]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b16:	f023 0304 	bic.w	r3, r3, #4
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	e01c      	b.n	8002b58 <HAL_RCC_OscConfig+0x578>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x560>
 8002b26:	4b87      	ldr	r3, [pc, #540]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a86      	ldr	r2, [pc, #536]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
 8002b32:	4b84      	ldr	r3, [pc, #528]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a83      	ldr	r2, [pc, #524]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0x578>
 8002b40:	4b80      	ldr	r3, [pc, #512]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a7f      	ldr	r2, [pc, #508]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4c:	4b7d      	ldr	r3, [pc, #500]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a7c      	ldr	r2, [pc, #496]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b52:	f023 0304 	bic.w	r3, r3, #4
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d015      	beq.n	8002b8c <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fd fdc4 	bl	80006ec <HAL_GetTick>
 8002b64:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fd fdc0 	bl	80006ec <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0de      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b7e:	4b71      	ldr	r3, [pc, #452]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ee      	beq.n	8002b68 <HAL_RCC_OscConfig+0x588>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fd fdae 	bl	80006ec <HAL_GetTick>
 8002b90:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fd fdaa 	bl	80006ec <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0c8      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002baa:	4b66      	ldr	r3, [pc, #408]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1ee      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80bd 	beq.w	8002d3a <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bc0:	4b60      	ldr	r3, [pc, #384]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bc8:	2b18      	cmp	r3, #24
 8002bca:	f000 80b4 	beq.w	8002d36 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	f040 8095 	bne.w	8002d02 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd8:	4b5a      	ldr	r3, [pc, #360]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a59      	ldr	r2, [pc, #356]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fd fd82 	bl	80006ec <HAL_GetTick>
 8002be8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fd fd7e 	bl	80006ec <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e09e      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bfe:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0a:	4b4e      	ldr	r3, [pc, #312]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c0e:	4b4e      	ldr	r3, [pc, #312]	; (8002d48 <HAL_RCC_OscConfig+0x768>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	4949      	ldr	r1, [pc, #292]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	628b      	str	r3, [r1, #40]	; 0x28
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	3b01      	subs	r3, #1
 8002c34:	025b      	lsls	r3, r3, #9
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	061b      	lsls	r3, r3, #24
 8002c50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c54:	493b      	ldr	r1, [pc, #236]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c5a:	4b3a      	ldr	r3, [pc, #232]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	4a39      	ldr	r2, [pc, #228]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c66:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6a:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c72:	00d2      	lsls	r2, r2, #3
 8002c74:	4933      	ldr	r1, [pc, #204]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c7a:	4b32      	ldr	r3, [pc, #200]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	f023 020c 	bic.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	492f      	ldr	r1, [pc, #188]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c8c:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	f023 0202 	bic.w	r2, r3, #2
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	492a      	ldr	r1, [pc, #168]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002caa:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	4a25      	ldr	r2, [pc, #148]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cb6:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002cc2:	4b20      	ldr	r3, [pc, #128]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7fd fd07 	bl	80006ec <HAL_GetTick>
 8002cde:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7fd fd03 	bl	80006ec <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e023      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x702>
 8002d00:	e01b      	b.n	8002d3a <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a0f      	ldr	r2, [pc, #60]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fd fced 	bl	80006ec <HAL_GetTick>
 8002d12:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fd fce9 	bl	80006ec <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e009      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCC_OscConfig+0x764>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0x736>
 8002d34:	e001      	b.n	8002d3a <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3728      	adds	r7, #40	; 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	58024400 	.word	0x58024400
 8002d48:	fffffc0c 	.word	0xfffffc0c
 8002d4c:	ffff0007 	.word	0xffff0007

08002d50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e18b      	b.n	800307c <HAL_RCC_ClockConfig+0x32c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d64:	4b8a      	ldr	r3, [pc, #552]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d910      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b87      	ldr	r3, [pc, #540]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 020f 	bic.w	r2, r3, #15
 8002d7a:	4985      	ldr	r1, [pc, #532]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b83      	ldr	r3, [pc, #524]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e173      	b.n	800307c <HAL_RCC_ClockConfig+0x32c>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d010      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	4b7b      	ldr	r3, [pc, #492]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d908      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002db0:	4b78      	ldr	r3, [pc, #480]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	4975      	ldr	r1, [pc, #468]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d010      	beq.n	8002df0 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	4b70      	ldr	r3, [pc, #448]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d908      	bls.n	8002df0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dde:	4b6d      	ldr	r3, [pc, #436]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	496a      	ldr	r1, [pc, #424]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d010      	beq.n	8002e1e <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	4b64      	ldr	r3, [pc, #400]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d908      	bls.n	8002e1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e0c:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	495e      	ldr	r1, [pc, #376]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d010      	beq.n	8002e4c <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d908      	bls.n	8002e4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e3a:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4953      	ldr	r1, [pc, #332]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	4b4d      	ldr	r3, [pc, #308]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d908      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f023 020f 	bic.w	r2, r3, #15
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4947      	ldr	r1, [pc, #284]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d055      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e86:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	4940      	ldr	r1, [pc, #256]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ea0:	4b3c      	ldr	r3, [pc, #240]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d121      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0e5      	b.n	800307c <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eb8:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d115      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0d9      	b.n	800307c <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ed0:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0cd      	b.n	800307c <HAL_RCC_ClockConfig+0x32c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee0:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0c5      	b.n	800307c <HAL_RCC_ClockConfig+0x32c>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ef0:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f023 0207 	bic.w	r2, r3, #7
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4925      	ldr	r1, [pc, #148]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fd fbf3 	bl	80006ec <HAL_GetTick>
 8002f06:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0a:	f7fd fbef 	bl	80006ec <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0ad      	b.n	800307c <HAL_RCC_ClockConfig+0x32c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f20:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d1eb      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d208      	bcs.n	8002f60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f023 020f 	bic.w	r2, r3, #15
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	490e      	ldr	r1, [pc, #56]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d214      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 020f 	bic.w	r2, r3, #15
 8002f76:	4906      	ldr	r1, [pc, #24]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e075      	b.n	800307c <HAL_RCC_ClockConfig+0x32c>
 8002f90:	52002000 	.word	0x52002000
 8002f94:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d010      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	4b36      	ldr	r3, [pc, #216]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d208      	bcs.n	8002fc6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fb4:	4b33      	ldr	r3, [pc, #204]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	4930      	ldr	r1, [pc, #192]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d208      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fe2:	4b28      	ldr	r3, [pc, #160]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4925      	ldr	r1, [pc, #148]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800300c:	429a      	cmp	r2, r3
 800300e:	d208      	bcs.n	8003022 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003010:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4919      	ldr	r1, [pc, #100]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 800301e:	4313      	orrs	r3, r2
 8003020:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800303a:	429a      	cmp	r2, r3
 800303c:	d208      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	490e      	ldr	r1, [pc, #56]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 800304c:	4313      	orrs	r3, r2
 800304e:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003050:	f000 f81e 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8003054:	4601      	mov	r1, r0
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_ClockConfig+0x334>)
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_RCC_ClockConfig+0x338>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	fa21 f303 	lsr.w	r3, r1, r3
 800306c:	4a07      	ldr	r2, [pc, #28]	; (800308c <HAL_RCC_ClockConfig+0x33c>)
 800306e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 8003070:	2000      	movs	r0, #0
 8003072:	f7fd faf1 	bl	8000658 <HAL_InitTick>
 8003076:	4603      	mov	r3, r0
 8003078:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800307a:	7afb      	ldrb	r3, [r7, #11]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	58024400 	.word	0x58024400
 8003088:	0800c9bc 	.word	0x0800c9bc
 800308c:	24000008 	.word	0x24000008

08003090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003096:	4baf      	ldr	r3, [pc, #700]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800309e:	2b18      	cmp	r3, #24
 80030a0:	f200 814e 	bhi.w	8003340 <HAL_RCC_GetSysClockFreq+0x2b0>
 80030a4:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	08003111 	.word	0x08003111
 80030b0:	08003341 	.word	0x08003341
 80030b4:	08003341 	.word	0x08003341
 80030b8:	08003341 	.word	0x08003341
 80030bc:	08003341 	.word	0x08003341
 80030c0:	08003341 	.word	0x08003341
 80030c4:	08003341 	.word	0x08003341
 80030c8:	08003341 	.word	0x08003341
 80030cc:	08003137 	.word	0x08003137
 80030d0:	08003341 	.word	0x08003341
 80030d4:	08003341 	.word	0x08003341
 80030d8:	08003341 	.word	0x08003341
 80030dc:	08003341 	.word	0x08003341
 80030e0:	08003341 	.word	0x08003341
 80030e4:	08003341 	.word	0x08003341
 80030e8:	08003341 	.word	0x08003341
 80030ec:	0800313d 	.word	0x0800313d
 80030f0:	08003341 	.word	0x08003341
 80030f4:	08003341 	.word	0x08003341
 80030f8:	08003341 	.word	0x08003341
 80030fc:	08003341 	.word	0x08003341
 8003100:	08003341 	.word	0x08003341
 8003104:	08003341 	.word	0x08003341
 8003108:	08003341 	.word	0x08003341
 800310c:	08003143 	.word	0x08003143
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003110:	4b90      	ldr	r3, [pc, #576]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d009      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800311c:	4b8d      	ldr	r3, [pc, #564]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	08db      	lsrs	r3, r3, #3
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	4a8c      	ldr	r2, [pc, #560]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800312e:	e10a      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003130:	4b89      	ldr	r3, [pc, #548]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003132:	61bb      	str	r3, [r7, #24]
    break;
 8003134:	e107      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003136:	4b89      	ldr	r3, [pc, #548]	; (800335c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003138:	61bb      	str	r3, [r7, #24]
    break;
 800313a:	e104      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800313c:	4b88      	ldr	r3, [pc, #544]	; (8003360 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800313e:	61bb      	str	r3, [r7, #24]
    break;
 8003140:	e101      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003142:	4b84      	ldr	r3, [pc, #528]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800314c:	4b81      	ldr	r3, [pc, #516]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003156:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003158:	4b7e      	ldr	r3, [pc, #504]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003162:	4b7c      	ldr	r3, [pc, #496]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	08db      	lsrs	r3, r3, #3
 8003168:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80da 	beq.w	800333a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d05a      	beq.n	8003242 <HAL_RCC_GetSysClockFreq+0x1b2>
 800318c:	2b01      	cmp	r3, #1
 800318e:	d302      	bcc.n	8003196 <HAL_RCC_GetSysClockFreq+0x106>
 8003190:	2b02      	cmp	r3, #2
 8003192:	d078      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003194:	e099      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003196:	4b6f      	ldr	r3, [pc, #444]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d02d      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031a2:	4b6c      	ldr	r3, [pc, #432]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	08db      	lsrs	r3, r3, #3
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	4a6a      	ldr	r2, [pc, #424]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80031ae:	fa22 f303 	lsr.w	r3, r2, r3
 80031b2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	ee07 3a90 	vmov	s15, r3
 80031c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031cc:	4b61      	ldr	r3, [pc, #388]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d4:	ee07 3a90 	vmov	s15, r3
 80031d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80031e0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003364 <HAL_RCC_GetSysClockFreq+0x2d4>
 80031e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80031fc:	e087      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003208:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003368 <HAL_RCC_GetSysClockFreq+0x2d8>
 800320c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003210:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003218:	ee07 3a90 	vmov	s15, r3
 800321c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003220:	ed97 6a02 	vldr	s12, [r7, #8]
 8003224:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003364 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003240:	e065      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	ee07 3a90 	vmov	s15, r3
 8003248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800336c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003254:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325c:	ee07 3a90 	vmov	s15, r3
 8003260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003264:	ed97 6a02 	vldr	s12, [r7, #8]
 8003268:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003364 <HAL_RCC_GetSysClockFreq+0x2d4>
 800326c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003280:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003284:	e043      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003290:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003370 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003298:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ac:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003364 <HAL_RCC_GetSysClockFreq+0x2d4>
 80032b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032c8:	e021      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800336c <HAL_RCC_GetSysClockFreq+0x2dc>
 80032d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80032f0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003364 <HAL_RCC_GetSysClockFreq+0x2d4>
 80032f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003308:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800330c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	0a5b      	lsrs	r3, r3, #9
 8003314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003318:	3301      	adds	r3, #1
 800331a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003326:	edd7 6a07 	vldr	s13, [r7, #28]
 800332a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003332:	ee17 3a90 	vmov	r3, s15
 8003336:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003338:	e005      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
    break;
 800333e:	e002      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003342:	61bb      	str	r3, [r7, #24]
    break;
 8003344:	bf00      	nop
  }

  return sysclockfreq;
 8003346:	69bb      	ldr	r3, [r7, #24]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3724      	adds	r7, #36	; 0x24
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	58024400 	.word	0x58024400
 8003358:	03d09000 	.word	0x03d09000
 800335c:	003d0900 	.word	0x003d0900
 8003360:	007a1200 	.word	0x007a1200
 8003364:	46000000 	.word	0x46000000
 8003368:	4c742400 	.word	0x4c742400
 800336c:	4a742400 	.word	0x4a742400
 8003370:	4af42400 	.word	0x4af42400

08003374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003378:	f001 fd40 	bl	8004dfc <HAL_RCCEx_GetD1SysClockFreq>
 800337c:	4601      	mov	r1, r0
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8003388:	5cd3      	ldrb	r3, [r2, r3]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	fa21 f303 	lsr.w	r3, r1, r3
 8003392:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <HAL_RCC_GetHCLKFreq+0x34>)
 8003394:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <HAL_RCC_GetHCLKFreq+0x34>)
 8003398:	681b      	ldr	r3, [r3, #0]
}
 800339a:	4618      	mov	r0, r3
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	58024400 	.word	0x58024400
 80033a4:	0800c9bc 	.word	0x0800c9bc
 80033a8:	2400000c 	.word	0x2400000c

080033ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033b0:	f7ff ffe0 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033b4:	4601      	mov	r1, r0
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033c2:	5cd3      	ldrb	r3, [r2, r3]
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	58024400 	.word	0x58024400
 80033d4:	0800c9bc 	.word	0x0800c9bc

080033d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033dc:	f7ff ffca 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033e0:	4601      	mov	r1, r0
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	4a04      	ldr	r2, [pc, #16]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	58024400 	.word	0x58024400
 8003400:	0800c9bc 	.word	0x0800c9bc

08003404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800340c:	2300      	movs	r3, #0
 800340e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003410:	2300      	movs	r3, #0
 8003412:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d03d      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003428:	d013      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800342a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342e:	d802      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003434:	e01f      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800343a:	d013      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800343c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003440:	d01c      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003442:	e018      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003444:	4baf      	ldr	r3, [pc, #700]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	4aae      	ldr	r2, [pc, #696]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800344a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003450:	e015      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	2102      	movs	r1, #2
 8003458:	4618      	mov	r0, r3
 800345a:	f001 fceb 	bl	8004e34 <RCCEx_PLL2_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003462:	e00c      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3324      	adds	r3, #36	; 0x24
 8003468:	2102      	movs	r1, #2
 800346a:	4618      	mov	r0, r3
 800346c:	f001 fd94 	bl	8004f98 <RCCEx_PLL3_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003474:	e003      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
      break;
 800347a:	e000      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800347c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003484:	4b9f      	ldr	r3, [pc, #636]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003490:	499c      	ldr	r1, [pc, #624]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003492:	4313      	orrs	r3, r2
 8003494:	650b      	str	r3, [r1, #80]	; 0x50
 8003496:	e001      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d03d      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d826      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80034b0:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034cd 	.word	0x080034cd
 80034bc:	080034db 	.word	0x080034db
 80034c0:	080034ed 	.word	0x080034ed
 80034c4:	08003505 	.word	0x08003505
 80034c8:	08003505 	.word	0x08003505
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034cc:	4b8d      	ldr	r3, [pc, #564]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	4a8c      	ldr	r2, [pc, #560]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034d8:	e015      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 fca7 	bl	8004e34 <RCCEx_PLL2_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034ea:	e00c      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3324      	adds	r3, #36	; 0x24
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f001 fd50 	bl	8004f98 <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	75fb      	strb	r3, [r7, #23]
      break;
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800350c:	4b7d      	ldr	r3, [pc, #500]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800350e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003510:	f023 0207 	bic.w	r2, r3, #7
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	497a      	ldr	r1, [pc, #488]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800351a:	4313      	orrs	r3, r2
 800351c:	650b      	str	r3, [r1, #80]	; 0x50
 800351e:	e001      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352c:	2b00      	cmp	r3, #0
 800352e:	d03e      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d01c      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003538:	2b80      	cmp	r3, #128	; 0x80
 800353a:	d804      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	d00d      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003544:	e01e      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003546:	2bc0      	cmp	r3, #192	; 0xc0
 8003548:	d01f      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800354a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354e:	d01e      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003550:	e018      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003552:	4b6c      	ldr	r3, [pc, #432]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	4a6b      	ldr	r2, [pc, #428]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800355e:	e017      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f001 fc64 	bl	8004e34 <RCCEx_PLL2_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003570:	e00e      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3324      	adds	r3, #36	; 0x24
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f001 fd0d 	bl	8004f98 <RCCEx_PLL3_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003582:	e005      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	75fb      	strb	r3, [r7, #23]
      break;
 8003588:	e002      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800358e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003596:	4b5b      	ldr	r3, [pc, #364]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	4958      	ldr	r1, [pc, #352]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	650b      	str	r3, [r1, #80]	; 0x50
 80035a8:	e001      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d044      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c4:	d01f      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80035c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ca:	d805      	bhi.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d4:	d00e      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80035d6:	e01f      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80035d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035dc:	d01f      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80035de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035e2:	d01e      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80035e4:	e018      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e6:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	4a46      	ldr	r2, [pc, #280]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035f2:	e017      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3304      	adds	r3, #4
 80035f8:	2100      	movs	r1, #0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 fc1a 	bl	8004e34 <RCCEx_PLL2_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003604:	e00e      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3324      	adds	r3, #36	; 0x24
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fcc3 	bl	8004f98 <RCCEx_PLL3_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003616:	e005      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	75fb      	strb	r3, [r7, #23]
      break;
 800361c:	e002      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800362a:	4b36      	ldr	r3, [pc, #216]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003638:	4932      	ldr	r1, [pc, #200]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800363a:	4313      	orrs	r3, r2
 800363c:	658b      	str	r3, [r1, #88]	; 0x58
 800363e:	e001      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364c:	2b00      	cmp	r3, #0
 800364e:	d044      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800365a:	d01f      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800365c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003660:	d805      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003666:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800366a:	d00e      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800366c:	e01f      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800366e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003672:	d01f      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003678:	d01e      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800367a:	e018      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	4a20      	ldr	r2, [pc, #128]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003686:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003688:	e017      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f001 fbcf 	bl	8004e34 <RCCEx_PLL2_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800369a:	e00e      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3324      	adds	r3, #36	; 0x24
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 fc78 	bl	8004f98 <RCCEx_PLL3_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ac:	e005      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
      break;
 80036b2:	e002      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80036b4:	bf00      	nop
 80036b6:	e000      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80036b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036ce:	490d      	ldr	r1, [pc, #52]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	658b      	str	r3, [r1, #88]	; 0x58
 80036d4:	e001      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d035      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d00c      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d802      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01b      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80036f6:	e017      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d00c      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80036fc:	2b30      	cmp	r3, #48	; 0x30
 80036fe:	d018      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003700:	e012      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003702:	bf00      	nop
 8003704:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003708:	4baf      	ldr	r3, [pc, #700]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	4aae      	ldr	r2, [pc, #696]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800370e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003714:	e00e      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	2102      	movs	r1, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fb89 	bl	8004e34 <RCCEx_PLL2_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003726:	e005      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	75fb      	strb	r3, [r7, #23]
      break;
 800372c:	e002      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800373a:	4ba3      	ldr	r3, [pc, #652]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003746:	49a0      	ldr	r1, [pc, #640]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003748:	4313      	orrs	r3, r2
 800374a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800374c:	e001      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d042      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003766:	d01f      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376c:	d805      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003776:	d00e      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003778:	e01f      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800377a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800377e:	d01f      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003784:	d01e      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003786:	e018      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003788:	4b8f      	ldr	r3, [pc, #572]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	4a8e      	ldr	r2, [pc, #568]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800378e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003794:	e017      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3304      	adds	r3, #4
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f001 fb49 	bl	8004e34 <RCCEx_PLL2_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037a6:	e00e      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3324      	adds	r3, #36	; 0x24
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fbf2 	bl	8004f98 <RCCEx_PLL3_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037b8:	e005      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	75fb      	strb	r3, [r7, #23]
      break;
 80037be:	e002      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80037c0:	bf00      	nop
 80037c2:	e000      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80037c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037cc:	4b7e      	ldr	r3, [pc, #504]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	497b      	ldr	r1, [pc, #492]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	650b      	str	r3, [r1, #80]	; 0x50
 80037de:	e001      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d042      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037f8:	d01b      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80037fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037fe:	d805      	bhi.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d022      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800380a:	e01b      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800380c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003810:	d01d      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003812:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003816:	d01c      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003818:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800381c:	d01b      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800381e:	e011      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	2101      	movs	r1, #1
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fb04 	bl	8004e34 <RCCEx_PLL2_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003830:	e012      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3324      	adds	r3, #36	; 0x24
 8003836:	2101      	movs	r1, #1
 8003838:	4618      	mov	r0, r3
 800383a:	f001 fbad 	bl	8004f98 <RCCEx_PLL3_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003842:	e009      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	75fb      	strb	r3, [r7, #23]
      break;
 8003848:	e006      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800384a:	bf00      	nop
 800384c:	e004      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800384e:	bf00      	nop
 8003850:	e002      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003858:	7dfb      	ldrb	r3, [r7, #23]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800385e:	4b5a      	ldr	r3, [pc, #360]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003862:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386a:	4957      	ldr	r1, [pc, #348]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800386c:	4313      	orrs	r3, r2
 800386e:	650b      	str	r3, [r1, #80]	; 0x50
 8003870:	e001      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d044      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388c:	d01b      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800388e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003892:	d805      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d022      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800389e:	e01b      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d01d      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038aa:	d01c      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80038ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038b0:	d01b      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80038b2:	e011      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	2101      	movs	r1, #1
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 faba 	bl	8004e34 <RCCEx_PLL2_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038c4:	e012      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3324      	adds	r3, #36	; 0x24
 80038ca:	2101      	movs	r1, #1
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 fb63 	bl	8004f98 <RCCEx_PLL3_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038d6:	e009      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
      break;
 80038dc:	e006      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80038de:	bf00      	nop
 80038e0:	e004      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80038e2:	bf00      	nop
 80038e4:	e002      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80038e6:	bf00      	nop
 80038e8:	e000      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80038ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038f2:	4b35      	ldr	r3, [pc, #212]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003900:	4931      	ldr	r1, [pc, #196]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003902:	4313      	orrs	r3, r2
 8003904:	658b      	str	r3, [r1, #88]	; 0x58
 8003906:	e001      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02d      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800391c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003920:	d005      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003926:	d009      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800392c:	e00f      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	4a25      	ldr	r2, [pc, #148]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800393a:	e00c      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	2101      	movs	r1, #1
 8003942:	4618      	mov	r0, r3
 8003944:	f001 fa76 	bl	8004e34 <RCCEx_PLL2_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800394c:	e003      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
      break;
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800395e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003960:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003968:	4917      	ldr	r1, [pc, #92]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	650b      	str	r3, [r1, #80]	; 0x50
 800396e:	e001      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d035      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	2b03      	cmp	r3, #3
 8003986:	d81b      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039cd 	.word	0x080039cd
 8003994:	080039a1 	.word	0x080039a1
 8003998:	080039af 	.word	0x080039af
 800399c:	080039cd 	.word	0x080039cd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	4a08      	ldr	r2, [pc, #32]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039ac:	e00f      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2102      	movs	r1, #2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 fa3d 	bl	8004e34 <RCCEx_PLL2_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039be:	e006      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	75fb      	strb	r3, [r7, #23]
      break;
 80039c4:	e003      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80039c6:	bf00      	nop
 80039c8:	58024400 	.word	0x58024400
      break;
 80039cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039d4:	4bba      	ldr	r3, [pc, #744]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80039d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d8:	f023 0203 	bic.w	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	49b7      	ldr	r1, [pc, #732]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039e6:	e001      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8086 	beq.w	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039fa:	4bb2      	ldr	r3, [pc, #712]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4ab1      	ldr	r2, [pc, #708]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a06:	f7fc fe71 	bl	80006ec <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a0c:	e009      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0e:	f7fc fe6d 	bl	80006ec <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b64      	cmp	r3, #100	; 0x64
 8003a1a:	d902      	bls.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	75fb      	strb	r3, [r7, #23]
        break;
 8003a20:	e005      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a22:	4ba8      	ldr	r3, [pc, #672]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0ef      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d166      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a34:	4ba2      	ldr	r3, [pc, #648]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a3e:	4053      	eors	r3, r2
 8003a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d013      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a48:	4b9d      	ldr	r3, [pc, #628]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a50:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a52:	4b9b      	ldr	r3, [pc, #620]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a9a      	ldr	r2, [pc, #616]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a5e:	4b98      	ldr	r3, [pc, #608]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4a97      	ldr	r2, [pc, #604]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a6a:	4a95      	ldr	r2, [pc, #596]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a7a:	d115      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fc fe36 	bl	80006ec <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a82:	e00b      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a84:	f7fc fe32 	bl	80006ec <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d902      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	75fb      	strb	r3, [r7, #23]
            break;
 8003a9a:	e005      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a9c:	4b88      	ldr	r3, [pc, #544]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ed      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d126      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003abc:	d10d      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003abe:	4b80      	ldr	r3, [pc, #512]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003acc:	0919      	lsrs	r1, r3, #4
 8003ace:	4b7e      	ldr	r3, [pc, #504]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003ad0:	400b      	ands	r3, r1
 8003ad2:	497b      	ldr	r1, [pc, #492]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	610b      	str	r3, [r1, #16]
 8003ad8:	e005      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003ada:	4b79      	ldr	r3, [pc, #484]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	4a78      	ldr	r2, [pc, #480]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ae0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ae4:	6113      	str	r3, [r2, #16]
 8003ae6:	4b76      	ldr	r3, [pc, #472]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ae8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	4972      	ldr	r1, [pc, #456]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	670b      	str	r3, [r1, #112]	; 0x70
 8003afa:	e004      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	75bb      	strb	r3, [r7, #22]
 8003b00:	e001      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
 8003b04:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d07d      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b16:	2b28      	cmp	r3, #40	; 0x28
 8003b18:	d866      	bhi.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003b1a:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003bef 	.word	0x08003bef
 8003b24:	08003be9 	.word	0x08003be9
 8003b28:	08003be9 	.word	0x08003be9
 8003b2c:	08003be9 	.word	0x08003be9
 8003b30:	08003be9 	.word	0x08003be9
 8003b34:	08003be9 	.word	0x08003be9
 8003b38:	08003be9 	.word	0x08003be9
 8003b3c:	08003be9 	.word	0x08003be9
 8003b40:	08003bc5 	.word	0x08003bc5
 8003b44:	08003be9 	.word	0x08003be9
 8003b48:	08003be9 	.word	0x08003be9
 8003b4c:	08003be9 	.word	0x08003be9
 8003b50:	08003be9 	.word	0x08003be9
 8003b54:	08003be9 	.word	0x08003be9
 8003b58:	08003be9 	.word	0x08003be9
 8003b5c:	08003be9 	.word	0x08003be9
 8003b60:	08003bd7 	.word	0x08003bd7
 8003b64:	08003be9 	.word	0x08003be9
 8003b68:	08003be9 	.word	0x08003be9
 8003b6c:	08003be9 	.word	0x08003be9
 8003b70:	08003be9 	.word	0x08003be9
 8003b74:	08003be9 	.word	0x08003be9
 8003b78:	08003be9 	.word	0x08003be9
 8003b7c:	08003be9 	.word	0x08003be9
 8003b80:	08003bef 	.word	0x08003bef
 8003b84:	08003be9 	.word	0x08003be9
 8003b88:	08003be9 	.word	0x08003be9
 8003b8c:	08003be9 	.word	0x08003be9
 8003b90:	08003be9 	.word	0x08003be9
 8003b94:	08003be9 	.word	0x08003be9
 8003b98:	08003be9 	.word	0x08003be9
 8003b9c:	08003be9 	.word	0x08003be9
 8003ba0:	08003bef 	.word	0x08003bef
 8003ba4:	08003be9 	.word	0x08003be9
 8003ba8:	08003be9 	.word	0x08003be9
 8003bac:	08003be9 	.word	0x08003be9
 8003bb0:	08003be9 	.word	0x08003be9
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003be9 	.word	0x08003be9
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	08003bef 	.word	0x08003bef
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f001 f932 	bl	8004e34 <RCCEx_PLL2_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003bd4:	e00c      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3324      	adds	r3, #36	; 0x24
 8003bda:	2101      	movs	r1, #1
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f001 f9db 	bl	8004f98 <RCCEx_PLL3_Config>
 8003be2:	4603      	mov	r3, r0
 8003be4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003be6:	e003      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	75fb      	strb	r3, [r7, #23]
      break;
 8003bec:	e000      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003bf6:	4b32      	ldr	r3, [pc, #200]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c02:	492f      	ldr	r1, [pc, #188]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	654b      	str	r3, [r1, #84]	; 0x54
 8003c08:	e001      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d037      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1e:	2b05      	cmp	r3, #5
 8003c20:	d820      	bhi.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003c22:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c6b 	.word	0x08003c6b
 8003c2c:	08003c41 	.word	0x08003c41
 8003c30:	08003c53 	.word	0x08003c53
 8003c34:	08003c6b 	.word	0x08003c6b
 8003c38:	08003c6b 	.word	0x08003c6b
 8003c3c:	08003c6b 	.word	0x08003c6b
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	2101      	movs	r1, #1
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 f8f4 	bl	8004e34 <RCCEx_PLL2_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c50:	e00c      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3324      	adds	r3, #36	; 0x24
 8003c56:	2101      	movs	r1, #1
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f001 f99d 	bl	8004f98 <RCCEx_PLL3_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	75fb      	strb	r3, [r7, #23]
      break;
 8003c68:	e000      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c72:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	f023 0207 	bic.w	r2, r3, #7
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	4910      	ldr	r1, [pc, #64]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	654b      	str	r3, [r1, #84]	; 0x54
 8003c84:	e001      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
 8003c88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d040      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9c:	2b05      	cmp	r3, #5
 8003c9e:	d827      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cf7 	.word	0x08003cf7
 8003cac:	08003ccd 	.word	0x08003ccd
 8003cb0:	08003cdf 	.word	0x08003cdf
 8003cb4:	08003cf7 	.word	0x08003cf7
 8003cb8:	08003cf7 	.word	0x08003cf7
 8003cbc:	08003cf7 	.word	0x08003cf7
 8003cc0:	58024400 	.word	0x58024400
 8003cc4:	58024800 	.word	0x58024800
 8003cc8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f8ae 	bl	8004e34 <RCCEx_PLL2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003cdc:	e00c      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3324      	adds	r3, #36	; 0x24
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 f957 	bl	8004f98 <RCCEx_PLL3_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003cee:	e003      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf4:	e000      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cfe:	4bb3      	ldr	r3, [pc, #716]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d02:	f023 0207 	bic.w	r2, r3, #7
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0c:	49af      	ldr	r1, [pc, #700]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	658b      	str	r3, [r1, #88]	; 0x58
 8003d12:	e001      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d044      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2e:	d01b      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d34:	d805      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d022      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003d40:	e01b      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d46:	d01d      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d4c:	d01c      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003d4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d52:	d01b      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003d54:	e011      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f001 f869 	bl	8004e34 <RCCEx_PLL2_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d66:	e012      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3324      	adds	r3, #36	; 0x24
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 f912 	bl	8004f98 <RCCEx_PLL3_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d78:	e009      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7e:	e006      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003d80:	bf00      	nop
 8003d82:	e004      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003d84:	bf00      	nop
 8003d86:	e002      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003d88:	bf00      	nop
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d94:	4b8d      	ldr	r3, [pc, #564]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d98:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da2:	498a      	ldr	r1, [pc, #552]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	654b      	str	r3, [r1, #84]	; 0x54
 8003da8:	e001      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d044      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc4:	d01b      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dca:	d805      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d022      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003dd6:	e01b      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ddc:	d01d      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003dde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003de2:	d01c      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003de4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003de8:	d01b      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003dea:	e011      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 f81e 	bl	8004e34 <RCCEx_PLL2_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003dfc:	e012      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3324      	adds	r3, #36	; 0x24
 8003e02:	2102      	movs	r1, #2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f001 f8c7 	bl	8004f98 <RCCEx_PLL3_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e0e:	e009      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	75fb      	strb	r3, [r7, #23]
      break;
 8003e14:	e006      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e16:	bf00      	nop
 8003e18:	e004      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e002      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e000      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e2a:	4b68      	ldr	r3, [pc, #416]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e38:	4964      	ldr	r1, [pc, #400]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e3e:	e001      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d044      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e5a:	d01b      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e60:	d805      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d022      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e6c:	e01b      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e72:	d01d      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003e74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e78:	d01c      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003e7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e7e:	d01b      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003e80:	e011      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 ffd3 	bl	8004e34 <RCCEx_PLL2_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e92:	e012      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3324      	adds	r3, #36	; 0x24
 8003e98:	2102      	movs	r1, #2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 f87c 	bl	8004f98 <RCCEx_PLL3_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ea4:	e009      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eaa:	e006      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003eac:	bf00      	nop
 8003eae:	e004      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003eb0:	bf00      	nop
 8003eb2:	e002      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003eb4:	bf00      	nop
 8003eb6:	e000      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10a      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ec0:	4b42      	ldr	r3, [pc, #264]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ece:	493f      	ldr	r1, [pc, #252]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	658b      	str	r3, [r1, #88]	; 0x58
 8003ed4:	e001      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01b      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef0:	d10b      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3324      	adds	r3, #36	; 0x24
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 f84d 	bl	8004f98 <RCCEx_PLL3_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00c      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75bb      	strb	r3, [r7, #22]
 8003f08:	e009      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f0a:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f18:	492c      	ldr	r1, [pc, #176]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01b      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f34:	d10b      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3324      	adds	r3, #36	; 0x24
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 f82b 	bl	8004f98 <RCCEx_PLL3_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00c      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	75bb      	strb	r3, [r7, #22]
 8003f4c:	e009      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f4e:	4b1f      	ldr	r3, [pc, #124]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5c:	491b      	ldr	r1, [pc, #108]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d032      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f78:	d00d      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8003f7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f7e:	d016      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d111      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3304      	adds	r3, #4
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 ff52 	bl	8004e34 <RCCEx_PLL2_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f94:	e00c      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3324      	adds	r3, #36	; 0x24
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fffb 	bl	8004f98 <RCCEx_PLL3_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003fa6:	e003      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	75fb      	strb	r3, [r7, #23]
      break;
 8003fac:	e000      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8003fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fc4:	4901      	ldr	r1, [pc, #4]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	658b      	str	r3, [r1, #88]	; 0x58
 8003fca:	e003      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8003fcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d02f      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fea:	d00c      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003fec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ff0:	d015      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff6:	d10f      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff8:	4b79      	ldr	r3, [pc, #484]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	4a78      	ldr	r2, [pc, #480]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004004:	e00c      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3324      	adds	r3, #36	; 0x24
 800400a:	2101      	movs	r1, #1
 800400c:	4618      	mov	r0, r3
 800400e:	f000 ffc3 	bl	8004f98 <RCCEx_PLL3_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004016:	e003      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	75fb      	strb	r3, [r7, #23]
      break;
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 800401e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004026:	4b6e      	ldr	r3, [pc, #440]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004034:	496a      	ldr	r1, [pc, #424]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	654b      	str	r3, [r1, #84]	; 0x54
 800403a:	e001      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d029      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d007      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800405a:	e00f      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800405c:	4b60      	ldr	r3, [pc, #384]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4a5f      	ldr	r2, [pc, #380]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004066:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004068:	e00b      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3304      	adds	r3, #4
 800406e:	2102      	movs	r1, #2
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fedf 	bl	8004e34 <RCCEx_PLL2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800407a:	e002      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	75fb      	strb	r3, [r7, #23]
      break;
 8004080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004088:	4b55      	ldr	r3, [pc, #340]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800408a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004094:	4952      	ldr	r1, [pc, #328]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	64cb      	str	r3, [r1, #76]	; 0x4c
 800409a:	e001      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3324      	adds	r3, #36	; 0x24
 80040b0:	2102      	movs	r1, #2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 ff70 	bl	8004f98 <RCCEx_PLL3_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d02f      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d6:	d00c      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 80040d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040dc:	d802      	bhi.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d011      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80040e2:	e00d      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 80040e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e8:	d00f      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80040ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ee:	d00e      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 80040f0:	e006      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f2:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	4a3a      	ldr	r2, [pc, #232]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80040f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80040fe:	e007      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	75fb      	strb	r3, [r7, #23]
      break;
 8004104:	e004      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800410e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004116:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004122:	492f      	ldr	r1, [pc, #188]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004124:	4313      	orrs	r3, r2
 8004126:	654b      	str	r3, [r1, #84]	; 0x54
 8004128:	e001      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412a:	7dfb      	ldrb	r3, [r7, #23]
 800412c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800413a:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800413c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004146:	4926      	ldr	r1, [pc, #152]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004148:	4313      	orrs	r3, r2
 800414a:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004158:	4b21      	ldr	r3, [pc, #132]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004166:	491e      	ldr	r1, [pc, #120]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004168:	4313      	orrs	r3, r2
 800416a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004178:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800417a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004184:	4916      	ldr	r1, [pc, #88]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004186:	4313      	orrs	r3, r2
 8004188:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800419c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041a0:	6113      	str	r3, [r2, #16]
 80041a2:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80041ac:	490c      	ldr	r1, [pc, #48]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da08      	bge.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c6:	4906      	ldr	r1, [pc, #24]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80041cc:	7dbb      	ldrb	r3, [r7, #22]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e000      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	58024400 	.word	0x58024400

080041e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b090      	sub	sp, #64	; 0x40
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f2:	d150      	bne.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80041f4:	4ba1      	ldr	r3, [pc, #644]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	2b04      	cmp	r3, #4
 8004202:	d844      	bhi.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8004204:	a201      	add	r2, pc, #4	; (adr r2, 800420c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	08004221 	.word	0x08004221
 8004210:	08004231 	.word	0x08004231
 8004214:	08004241 	.word	0x08004241
 8004218:	08004289 	.word	0x08004289
 800421c:	08004251 	.word	0x08004251
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fc9d 	bl	8004b64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800422e:	e1dc      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004230:	f107 0318 	add.w	r3, r7, #24
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f9fd 	bl	8004634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800423e:	e1d4      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004240:	f107 030c 	add.w	r3, r7, #12
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fb41 	bl	80048cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800424e:	e1cc      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004250:	4b8a      	ldr	r3, [pc, #552]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004254:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004258:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800425a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004260:	4b87      	ldr	r3, [pc, #540]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004262:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004264:	e1c1      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800426c:	d102      	bne.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800426e:	4b85      	ldr	r3, [pc, #532]	; (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004272:	e1ba      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800427a:	d102      	bne.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800427c:	4b82      	ldr	r3, [pc, #520]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004280:	e1b3      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004286:	e1b0      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004288:	4b80      	ldr	r3, [pc, #512]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800428c:	e1ad      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004292:	bf00      	nop
 8004294:	e1a9      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800429c:	d14f      	bne.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800429e:	4b77      	ldr	r3, [pc, #476]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80042a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2b80      	cmp	r3, #128	; 0x80
 80042ac:	d01c      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80042ae:	2b80      	cmp	r3, #128	; 0x80
 80042b0:	d804      	bhi.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80042b6:	2b40      	cmp	r3, #64	; 0x40
 80042b8:	d00e      	beq.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80042ba:	e03c      	b.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80042bc:	2bc0      	cmp	r3, #192	; 0xc0
 80042be:	d037      	beq.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80042c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c4:	d018      	beq.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80042c6:	e036      	b.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fc49 	bl	8004b64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042d6:	e188      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042d8:	f107 0318 	add.w	r3, r7, #24
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 f9a9 	bl	8004634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042e6:	e180      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042e8:	f107 030c 	add.w	r3, r7, #12
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 faed 	bl	80048cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042f6:	e178      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80042f8:	4b60      	ldr	r3, [pc, #384]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80042fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004300:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004308:	4b5d      	ldr	r3, [pc, #372]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800430c:	e16d      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 800430e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004310:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004314:	d102      	bne.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8004316:	4b5b      	ldr	r3, [pc, #364]	; (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004318:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800431a:	e166      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 800431c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004322:	d102      	bne.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8004324:	4b58      	ldr	r3, [pc, #352]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004326:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004328:	e15f      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 800432a:	2300      	movs	r3, #0
 800432c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800432e:	e15c      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004330:	4b56      	ldr	r3, [pc, #344]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004334:	e159      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800433a:	bf00      	nop
 800433c:	e155      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004344:	d153      	bne.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004346:	4b4d      	ldr	r3, [pc, #308]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800434e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004356:	d01f      	beq.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8004358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435c:	d805      	bhi.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004362:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004366:	d00f      	beq.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004368:	e03d      	b.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800436a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800436e:	d037      	beq.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004370:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004374:	d018      	beq.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8004376:	e036      	b.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fbf1 	bl	8004b64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004386:	e130      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004388:	f107 0318 	add.w	r3, r7, #24
 800438c:	4618      	mov	r0, r3
 800438e:	f000 f951 	bl	8004634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004396:	e128      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004398:	f107 030c 	add.w	r3, r7, #12
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fa95 	bl	80048cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80043a6:	e120      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80043a8:	4b34      	ldr	r3, [pc, #208]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80043aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043b0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80043b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80043b8:	4b31      	ldr	r3, [pc, #196]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80043ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80043bc:	e115      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80043be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043c4:	d102      	bne.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80043c6:	4b2f      	ldr	r3, [pc, #188]	; (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80043c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80043ca:	e10e      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80043cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043d2:	d102      	bne.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80043d4:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80043d8:	e107      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80043de:	e104      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80043e0:	4b2a      	ldr	r3, [pc, #168]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80043e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80043e4:	e101      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80043ea:	bf00      	nop
 80043ec:	e0fd      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f4:	d15d      	bne.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80043f6:	4b21      	ldr	r3, [pc, #132]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80043fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004406:	d01f      	beq.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800440c:	d805      	bhi.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004412:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004416:	d00f      	beq.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8004418:	e047      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800441a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800441e:	d041      	beq.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8004420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004424:	d018      	beq.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8004426:	e040      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fb99 	bl	8004b64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004436:	e0d8      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004438:	f107 0318 	add.w	r3, r7, #24
 800443c:	4618      	mov	r0, r3
 800443e:	f000 f8f9 	bl	8004634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004446:	e0d0      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004448:	f107 030c 	add.w	r3, r7, #12
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fa3d 	bl	80048cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004456:	e0c8      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004458:	4b08      	ldr	r3, [pc, #32]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800445a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004460:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8004462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004464:	2b00      	cmp	r3, #0
 8004466:	d102      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800446a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800446c:	e0bd      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004474:	d10c      	bne.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8004476:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800447a:	e0b6      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 800447c:	58024400 	.word	0x58024400
 8004480:	03d09000 	.word	0x03d09000
 8004484:	003d0900 	.word	0x003d0900
 8004488:	007a1200 	.word	0x007a1200
 800448c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004496:	d102      	bne.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8004498:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 800449a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800449c:	e0a5      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044a2:	e0a2      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80044a4:	4b54      	ldr	r3, [pc, #336]	; (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 80044a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044a8:	e09f      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044ae:	bf00      	nop
 80044b0:	e09b      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b8:	d153      	bne.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80044ba:	4b50      	ldr	r3, [pc, #320]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 80044bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044be:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ca:	d01f      	beq.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80044cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d0:	d805      	bhi.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044da:	d00f      	beq.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80044dc:	e03d      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80044de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044e2:	d037      	beq.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80044e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044e8:	d018      	beq.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80044ea:	e036      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fb37 	bl	8004b64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044fa:	e076      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044fc:	f107 0318 	add.w	r3, r7, #24
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f897 	bl	8004634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800450a:	e06e      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800450c:	f107 030c 	add.w	r3, r7, #12
 8004510:	4618      	mov	r0, r3
 8004512:	f000 f9db 	bl	80048cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800451a:	e066      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800451c:	4b37      	ldr	r3, [pc, #220]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 800451e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004520:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004524:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004528:	2b00      	cmp	r3, #0
 800452a:	d102      	bne.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800452c:	4b34      	ldr	r3, [pc, #208]	; (8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 800452e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004530:	e05b      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004538:	d102      	bne.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800453a:	4b32      	ldr	r3, [pc, #200]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x420>)
 800453c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800453e:	e054      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004546:	d102      	bne.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8004548:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 800454a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800454c:	e04d      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004552:	e04a      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004554:	4b28      	ldr	r3, [pc, #160]	; (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 8004556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004558:	e047      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800455e:	bf00      	nop
 8004560:	e043      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004568:	d13d      	bne.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800456a:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 800456c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004572:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457a:	d00c      	beq.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800457c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004580:	d011      	beq.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d12b      	bne.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004586:	f107 0318 	add.w	r3, r7, #24
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f852 	bl	8004634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004594:	e029      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004596:	f107 030c 	add.w	r3, r7, #12
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f996 	bl	80048cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045a4:	e021      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80045a6:	4b15      	ldr	r3, [pc, #84]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 80045a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80045b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d102      	bne.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 80045b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80045ba:	e016      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80045bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c2:	d102      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x420>)
 80045c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045c8:	e00f      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80045ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d0:	d102      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80045d2:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 80045d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045d6:	e008      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045dc:	e005      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045e2:	bf00      	nop
 80045e4:	e001      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }
  else
    {
      frequency = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80045ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3740      	adds	r7, #64	; 0x40
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	007a1200 	.word	0x007a1200
 80045f8:	00bb8000 	.word	0x00bb8000
 80045fc:	58024400 	.word	0x58024400
 8004600:	03d09000 	.word	0x03d09000
 8004604:	003d0900 	.word	0x003d0900

08004608 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800460c:	f7fe feb2 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8004610:	4601      	mov	r1, r0
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	4a04      	ldr	r2, [pc, #16]	; (8004630 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800461e:	5cd3      	ldrb	r3, [r2, r3]
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004628:	4618      	mov	r0, r3
 800462a:	bd80      	pop	{r7, pc}
 800462c:	58024400 	.word	0x58024400
 8004630:	0800c9bc 	.word	0x0800c9bc

08004634 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800463c:	4b9d      	ldr	r3, [pc, #628]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8004646:	4b9b      	ldr	r3, [pc, #620]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	0b1b      	lsrs	r3, r3, #12
 800464c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004650:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8004652:	4b98      	ldr	r3, [pc, #608]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800465c:	4b95      	ldr	r3, [pc, #596]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	08db      	lsrs	r3, r3, #3
 8004662:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	fb02 f303 	mul.w	r3, r2, r3
 800466c:	ee07 3a90 	vmov	s15, r3
 8004670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004674:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 810a 	beq.w	8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d05a      	beq.n	800473c <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8004686:	2b01      	cmp	r3, #1
 8004688:	d302      	bcc.n	8004690 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 800468a:	2b02      	cmp	r3, #2
 800468c:	d078      	beq.n	8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800468e:	e099      	b.n	80047c4 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004690:	4b88      	ldr	r3, [pc, #544]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d02d      	beq.n	80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800469c:	4b85      	ldr	r3, [pc, #532]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	4a84      	ldr	r2, [pc, #528]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c6:	4b7b      	ldr	r3, [pc, #492]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80046de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046f6:	e087      	b.n	8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470a:	4b6a      	ldr	r3, [pc, #424]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471a:	ed97 6a03 	vldr	s12, [r7, #12]
 800471e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800473a:	e065      	b.n	8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474e:	4b59      	ldr	r3, [pc, #356]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004762:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800477e:	e043      	b.n	8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800478e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004792:	4b48      	ldr	r3, [pc, #288]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80047aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047c2:	e021      	b.n	8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80047d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d6:	4b37      	ldr	r3, [pc, #220]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80047ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004806:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004808:	4b2a      	ldr	r3, [pc, #168]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	0a5b      	lsrs	r3, r3, #9
 800480e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800481e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004822:	edd7 6a07 	vldr	s13, [r7, #28]
 8004826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800482a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482e:	ee17 2a90 	vmov	r2, s15
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004836:	4b1f      	ldr	r3, [pc, #124]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	0c1b      	lsrs	r3, r3, #16
 800483c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004840:	ee07 3a90 	vmov	s15, r3
 8004844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800484c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004850:	edd7 6a07 	vldr	s13, [r7, #28]
 8004854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485c:	ee17 2a90 	vmov	r2, s15
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004864:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	0e1b      	lsrs	r3, r3, #24
 800486a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004876:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800487a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800487e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800488a:	ee17 2a90 	vmov	r2, s15
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004892:	e008      	b.n	80048a6 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]
}
 80048a6:	bf00      	nop
 80048a8:	3724      	adds	r7, #36	; 0x24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	58024400 	.word	0x58024400
 80048b8:	03d09000 	.word	0x03d09000
 80048bc:	46000000 	.word	0x46000000
 80048c0:	4c742400 	.word	0x4c742400
 80048c4:	4a742400 	.word	0x4a742400
 80048c8:	4af42400 	.word	0x4af42400

080048cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048d4:	4b9d      	ldr	r3, [pc, #628]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80048de:	4b9b      	ldr	r3, [pc, #620]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	0d1b      	lsrs	r3, r3, #20
 80048e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e8:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80048ea:	4b98      	ldr	r3, [pc, #608]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80048f4:	4b95      	ldr	r3, [pc, #596]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	08db      	lsrs	r3, r3, #3
 80048fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	fb02 f303 	mul.w	r3, r2, r3
 8004904:	ee07 3a90 	vmov	s15, r3
 8004908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 810a 	beq.w	8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d05a      	beq.n	80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 800491e:	2b01      	cmp	r3, #1
 8004920:	d302      	bcc.n	8004928 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8004922:	2b02      	cmp	r3, #2
 8004924:	d078      	beq.n	8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004926:	e099      	b.n	8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004928:	4b88      	ldr	r3, [pc, #544]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d02d      	beq.n	8004990 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004934:	4b85      	ldr	r3, [pc, #532]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	08db      	lsrs	r3, r3, #3
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	4a84      	ldr	r2, [pc, #528]	; (8004b50 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
 8004944:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	ee07 3a90 	vmov	s15, r3
 800494c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495e:	4b7b      	ldr	r3, [pc, #492]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004972:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800498e:	e087      	b.n	8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b58 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800499e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a2:	4b6a      	ldr	r3, [pc, #424]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049d2:	e065      	b.n	8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80049e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e6:	4b59      	ldr	r3, [pc, #356]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a16:	e043      	b.n	8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2a:	4b48      	ldr	r3, [pc, #288]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a5a:	e021      	b.n	8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6e:	4b37      	ldr	r3, [pc, #220]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004aa0:	4b2a      	ldr	r3, [pc, #168]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	0a5b      	lsrs	r3, r3, #9
 8004aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aba:	edd7 6a07 	vldr	s13, [r7, #28]
 8004abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac6:	ee17 2a90 	vmov	r2, s15
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004ace:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ae4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ae8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af4:	ee17 2a90 	vmov	r2, s15
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004afc:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	0e1b      	lsrs	r3, r3, #24
 8004b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b16:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b22:	ee17 2a90 	vmov	r2, s15
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b2a:	e008      	b.n	8004b3e <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	609a      	str	r2, [r3, #8]
}
 8004b3e:	bf00      	nop
 8004b40:	3724      	adds	r7, #36	; 0x24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	58024400 	.word	0x58024400
 8004b50:	03d09000 	.word	0x03d09000
 8004b54:	46000000 	.word	0x46000000
 8004b58:	4c742400 	.word	0x4c742400
 8004b5c:	4a742400 	.word	0x4a742400
 8004b60:	4af42400 	.word	0x4af42400

08004b64 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b089      	sub	sp, #36	; 0x24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b6c:	4b9d      	ldr	r3, [pc, #628]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004b76:	4b9b      	ldr	r3, [pc, #620]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b80:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004b82:	4b98      	ldr	r3, [pc, #608]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004b8c:	4b95      	ldr	r3, [pc, #596]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	08db      	lsrs	r3, r3, #3
 8004b92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 810a 	beq.w	8004dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d05a      	beq.n	8004c6c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d302      	bcc.n	8004bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d078      	beq.n	8004cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8004bbe:	e099      	b.n	8004cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bc0:	4b88      	ldr	r3, [pc, #544]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d02d      	beq.n	8004c28 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bcc:	4b85      	ldr	r3, [pc, #532]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	08db      	lsrs	r3, r3, #3
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	4a84      	ldr	r2, [pc, #528]	; (8004de8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bdc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf6:	4b7b      	ldr	r3, [pc, #492]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004dec <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c26:	e087      	b.n	8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004df0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8004c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c3a:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004dec <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c6a:	e065      	b.n	8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004df4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8004c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7e:	4b59      	ldr	r3, [pc, #356]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004dec <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004caa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cae:	e043      	b.n	8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004df8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc2:	4b48      	ldr	r3, [pc, #288]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004dec <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cf2:	e021      	b.n	8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004df4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8004d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d06:	4b37      	ldr	r3, [pc, #220]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004dec <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d36:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004d38:	4b2a      	ldr	r3, [pc, #168]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	0a5b      	lsrs	r3, r3, #9
 8004d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d5e:	ee17 2a90 	vmov	r2, s15
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004d66:	4b1f      	ldr	r3, [pc, #124]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d70:	ee07 3a90 	vmov	s15, r3
 8004d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d8c:	ee17 2a90 	vmov	r2, s15
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004d94:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	0e1b      	lsrs	r3, r3, #24
 8004d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dba:	ee17 2a90 	vmov	r2, s15
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
}
 8004dd6:	bf00      	nop
 8004dd8:	3724      	adds	r7, #36	; 0x24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	58024400 	.word	0x58024400
 8004de8:	03d09000 	.word	0x03d09000
 8004dec:	46000000 	.word	0x46000000
 8004df0:	4c742400 	.word	0x4c742400
 8004df4:	4a742400 	.word	0x4a742400
 8004df8:	4af42400 	.word	0x4af42400

08004dfc <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e00:	f7fe f946 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8004e04:	4601      	mov	r1, r0
 8004e06:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	0a1b      	lsrs	r3, r3, #8
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	4a06      	ldr	r2, [pc, #24]	; (8004e2c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8004e12:	5cd3      	ldrb	r3, [r2, r3]
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	fa21 f303 	lsr.w	r3, r1, r3
 8004e1c:	4a04      	ldr	r2, [pc, #16]	; (8004e30 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8004e1e:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004e20:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8004e22:	681b      	ldr	r3, [r3, #0]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	58024400 	.word	0x58024400
 8004e2c:	0800c9bc 	.word	0x0800c9bc
 8004e30:	24000008 	.word	0x24000008

08004e34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e42:	4b53      	ldr	r3, [pc, #332]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d101      	bne.n	8004e52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e099      	b.n	8004f86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e52:	4b4f      	ldr	r3, [pc, #316]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a4e      	ldr	r2, [pc, #312]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5e:	f7fb fc45 	bl	80006ec <HAL_GetTick>
 8004e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e64:	e008      	b.n	8004e78 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004e66:	f7fb fc41 	bl	80006ec <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e086      	b.n	8004f86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e78:	4b45      	ldr	r3, [pc, #276]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e84:	4b42      	ldr	r3, [pc, #264]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	031b      	lsls	r3, r3, #12
 8004e92:	493f      	ldr	r1, [pc, #252]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	628b      	str	r3, [r1, #40]	; 0x28
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	025b      	lsls	r3, r3, #9
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ec8:	4931      	ldr	r1, [pc, #196]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ece:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	492d      	ldr	r1, [pc, #180]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	f023 0220 	bic.w	r2, r3, #32
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	4928      	ldr	r1, [pc, #160]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ef2:	4b27      	ldr	r3, [pc, #156]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	4a26      	ldr	r2, [pc, #152]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ef8:	f023 0310 	bic.w	r3, r3, #16
 8004efc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <RCCEx_PLL2_Config+0x160>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	69d2      	ldr	r2, [r2, #28]
 8004f0a:	00d2      	lsls	r2, r2, #3
 8004f0c:	4920      	ldr	r1, [pc, #128]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f12:	4b1f      	ldr	r3, [pc, #124]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f18:	f043 0310 	orr.w	r3, r3, #16
 8004f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f30:	e00f      	b.n	8004f52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f44:	e005      	b.n	8004f52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f46:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f52:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a0e      	ldr	r2, [pc, #56]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5e:	f7fb fbc5 	bl	80006ec <HAL_GetTick>
 8004f62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f64:	e008      	b.n	8004f78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004f66:	f7fb fbc1 	bl	80006ec <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e006      	b.n	8004f86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	58024400 	.word	0x58024400
 8004f94:	ffff0007 	.word	0xffff0007

08004f98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fa6:	4b53      	ldr	r3, [pc, #332]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d101      	bne.n	8004fb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e099      	b.n	80050ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fb6:	4b4f      	ldr	r3, [pc, #316]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a4e      	ldr	r2, [pc, #312]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc2:	f7fb fb93 	bl	80006ec <HAL_GetTick>
 8004fc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fc8:	e008      	b.n	8004fdc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004fca:	f7fb fb8f 	bl	80006ec <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e086      	b.n	80050ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fdc:	4b45      	ldr	r3, [pc, #276]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1f0      	bne.n	8004fca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004fe8:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	051b      	lsls	r3, r3, #20
 8004ff6:	493f      	ldr	r1, [pc, #252]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	628b      	str	r3, [r1, #40]	; 0x28
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	3b01      	subs	r3, #1
 8005002:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	3b01      	subs	r3, #1
 800500c:	025b      	lsls	r3, r3, #9
 800500e:	b29b      	uxth	r3, r3
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	3b01      	subs	r3, #1
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	3b01      	subs	r3, #1
 8005026:	061b      	lsls	r3, r3, #24
 8005028:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800502c:	4931      	ldr	r1, [pc, #196]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800502e:	4313      	orrs	r3, r2
 8005030:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005032:	4b30      	ldr	r3, [pc, #192]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	492d      	ldr	r1, [pc, #180]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005044:	4b2b      	ldr	r3, [pc, #172]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	4928      	ldr	r1, [pc, #160]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005056:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800505c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005060:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005062:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <RCCEx_PLL3_Config+0x160>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	69d2      	ldr	r2, [r2, #28]
 800506e:	00d2      	lsls	r2, r2, #3
 8005070:	4920      	ldr	r1, [pc, #128]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d106      	bne.n	8005096 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005088:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800508e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005092:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005094:	e00f      	b.n	80050b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d106      	bne.n	80050aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800509c:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	4a14      	ldr	r2, [pc, #80]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050a8:	e005      	b.n	80050b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a0e      	ldr	r2, [pc, #56]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c2:	f7fb fb13 	bl	80006ec <HAL_GetTick>
 80050c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050c8:	e008      	b.n	80050dc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80050ca:	f7fb fb0f 	bl	80006ec <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e006      	b.n	80050ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	58024400 	.word	0x58024400
 80050f8:	ffff0007 	.word	0xffff0007

080050fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e01d      	b.n	800514a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f005 fc06 	bl	800a934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f000 fc12 	bl	8005964 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e01d      	b.n	80051a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f815 	bl	80051a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3304      	adds	r3, #4
 800518e:	4619      	mov	r1, r3
 8005190:	4610      	mov	r0, r2
 8005192:	f000 fbe7 	bl	8005964 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2201      	movs	r2, #1
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 f872 	bl	80062b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <HAL_TIM_PWM_Start+0x98>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <HAL_TIM_PWM_Start+0x4a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <HAL_TIM_PWM_Start+0x9c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00e      	beq.n	8005206 <HAL_TIM_PWM_Start+0x4a>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1b      	ldr	r2, [pc, #108]	; (800525c <HAL_TIM_PWM_Start+0xa0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d009      	beq.n	8005206 <HAL_TIM_PWM_Start+0x4a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1a      	ldr	r2, [pc, #104]	; (8005260 <HAL_TIM_PWM_Start+0xa4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d004      	beq.n	8005206 <HAL_TIM_PWM_Start+0x4a>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a18      	ldr	r2, [pc, #96]	; (8005264 <HAL_TIM_PWM_Start+0xa8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d101      	bne.n	800520a <HAL_TIM_PWM_Start+0x4e>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <HAL_TIM_PWM_Start+0x50>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800521e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	4b10      	ldr	r3, [pc, #64]	; (8005268 <HAL_TIM_PWM_Start+0xac>)
 8005228:	4013      	ands	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b06      	cmp	r3, #6
 8005230:	d00b      	beq.n	800524a <HAL_TIM_PWM_Start+0x8e>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005238:	d007      	beq.n	800524a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0201 	orr.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40010000 	.word	0x40010000
 8005258:	40010400 	.word	0x40010400
 800525c:	40014000 	.word	0x40014000
 8005260:	40014400 	.word	0x40014400
 8005264:	40014800 	.word	0x40014800
 8005268:	00010007 	.word	0x00010007

0800526c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b02      	cmp	r3, #2
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b02      	cmp	r3, #2
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0202 	mvn.w	r2, #2
 8005298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fb3a 	bl	8005928 <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fb2c 	bl	8005914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fb3d 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d122      	bne.n	800531c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d11b      	bne.n	800531c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0204 	mvn.w	r2, #4
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2202      	movs	r2, #2
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fb10 	bl	8005928 <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fb02 	bl	8005914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fb13 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b08      	cmp	r3, #8
 8005328:	d122      	bne.n	8005370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b08      	cmp	r3, #8
 8005336:	d11b      	bne.n	8005370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0208 	mvn.w	r2, #8
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2204      	movs	r2, #4
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fae6 	bl	8005928 <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fad8 	bl	8005914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fae9 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b10      	cmp	r3, #16
 800537c:	d122      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b10      	cmp	r3, #16
 800538a:	d11b      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0210 	mvn.w	r2, #16
 8005394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2208      	movs	r2, #8
 800539a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fabc 	bl	8005928 <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 faae 	bl	8005914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fabf 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d10e      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d107      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0201 	mvn.w	r2, #1
 80053e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa88 	bl	8005900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b80      	cmp	r3, #128	; 0x80
 80053fc:	d10e      	bne.n	800541c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005408:	2b80      	cmp	r3, #128	; 0x80
 800540a:	d107      	bne.n	800541c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 f858 	bl	80064cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542a:	d10e      	bne.n	800544a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d107      	bne.n	800544a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f001 f84b 	bl	80064e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d10e      	bne.n	8005476 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005462:	2b40      	cmp	r3, #64	; 0x40
 8005464:	d107      	bne.n	8005476 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800546e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fa6d 	bl	8005950 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b20      	cmp	r3, #32
 8005482:	d10e      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b20      	cmp	r3, #32
 8005490:	d107      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f06f 0220 	mvn.w	r2, #32
 800549a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f001 f80b 	bl	80064b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e105      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b14      	cmp	r3, #20
 80054da:	f200 80f0 	bhi.w	80056be <HAL_TIM_PWM_ConfigChannel+0x212>
 80054de:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	08005539 	.word	0x08005539
 80054e8:	080056bf 	.word	0x080056bf
 80054ec:	080056bf 	.word	0x080056bf
 80054f0:	080056bf 	.word	0x080056bf
 80054f4:	08005579 	.word	0x08005579
 80054f8:	080056bf 	.word	0x080056bf
 80054fc:	080056bf 	.word	0x080056bf
 8005500:	080056bf 	.word	0x080056bf
 8005504:	080055bb 	.word	0x080055bb
 8005508:	080056bf 	.word	0x080056bf
 800550c:	080056bf 	.word	0x080056bf
 8005510:	080056bf 	.word	0x080056bf
 8005514:	080055fb 	.word	0x080055fb
 8005518:	080056bf 	.word	0x080056bf
 800551c:	080056bf 	.word	0x080056bf
 8005520:	080056bf 	.word	0x080056bf
 8005524:	0800563d 	.word	0x0800563d
 8005528:	080056bf 	.word	0x080056bf
 800552c:	080056bf 	.word	0x080056bf
 8005530:	080056bf 	.word	0x080056bf
 8005534:	0800567d 	.word	0x0800567d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 faaa 	bl	8005a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0208 	orr.w	r2, r2, #8
 8005552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0204 	bic.w	r2, r2, #4
 8005562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6999      	ldr	r1, [r3, #24]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	619a      	str	r2, [r3, #24]
      break;
 8005576:	e0a3      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fb1a 	bl	8005bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6999      	ldr	r1, [r3, #24]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	021a      	lsls	r2, r3, #8
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	619a      	str	r2, [r3, #24]
      break;
 80055b8:	e082      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fb83 	bl	8005ccc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0208 	orr.w	r2, r2, #8
 80055d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0204 	bic.w	r2, r2, #4
 80055e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69d9      	ldr	r1, [r3, #28]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	61da      	str	r2, [r3, #28]
      break;
 80055f8:	e062      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fbe9 	bl	8005dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69d9      	ldr	r1, [r3, #28]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	021a      	lsls	r2, r3, #8
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	61da      	str	r2, [r3, #28]
      break;
 800563a:	e041      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fc30 	bl	8005ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0208 	orr.w	r2, r2, #8
 8005656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0204 	bic.w	r2, r2, #4
 8005666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	691a      	ldr	r2, [r3, #16]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800567a:	e021      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fc72 	bl	8005f6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005696:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	021a      	lsls	r2, r3, #8
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056bc:	e000      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80056be:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop

080056dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIM_ConfigClockSource+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e0b7      	b.n	8005864 <HAL_TIM_ConfigClockSource+0x188>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4b57      	ldr	r3, [pc, #348]	; (800586c <HAL_TIM_ConfigClockSource+0x190>)
 8005710:	4013      	ands	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800571a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b70      	cmp	r3, #112	; 0x70
 800572a:	d02e      	beq.n	800578a <HAL_TIM_ConfigClockSource+0xae>
 800572c:	2b70      	cmp	r3, #112	; 0x70
 800572e:	d812      	bhi.n	8005756 <HAL_TIM_ConfigClockSource+0x7a>
 8005730:	2b30      	cmp	r3, #48	; 0x30
 8005732:	f000 8084 	beq.w	800583e <HAL_TIM_ConfigClockSource+0x162>
 8005736:	2b30      	cmp	r3, #48	; 0x30
 8005738:	d806      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x6c>
 800573a:	2b10      	cmp	r3, #16
 800573c:	d07f      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x162>
 800573e:	2b20      	cmp	r3, #32
 8005740:	d07d      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x162>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d07b      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005746:	e084      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005748:	2b50      	cmp	r3, #80	; 0x50
 800574a:	d048      	beq.n	80057de <HAL_TIM_ConfigClockSource+0x102>
 800574c:	2b60      	cmp	r3, #96	; 0x60
 800574e:	d056      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x122>
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d064      	beq.n	800581e <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005754:	e07d      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005756:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800575a:	d070      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x162>
 800575c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005760:	d809      	bhi.n	8005776 <HAL_TIM_ConfigClockSource+0x9a>
 8005762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005766:	d027      	beq.n	80057b8 <HAL_TIM_ConfigClockSource+0xdc>
 8005768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800576c:	d067      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x162>
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005772:	d06d      	beq.n	8005850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005774:	e06d      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005776:	4a3e      	ldr	r2, [pc, #248]	; (8005870 <HAL_TIM_ConfigClockSource+0x194>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d060      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x162>
 800577c:	4a3d      	ldr	r2, [pc, #244]	; (8005874 <HAL_TIM_ConfigClockSource+0x198>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d05d      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x162>
 8005782:	4a3d      	ldr	r2, [pc, #244]	; (8005878 <HAL_TIM_ConfigClockSource+0x19c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d05a      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x162>
      break;
 8005788:	e063      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6899      	ldr	r1, [r3, #8]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f000 fd6d 	bl	8006278 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	609a      	str	r2, [r3, #8]
      break;
 80057b6:	e04c      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	6899      	ldr	r1, [r3, #8]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f000 fd56 	bl	8006278 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057da:	609a      	str	r2, [r3, #8]
      break;
 80057dc:	e039      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	6859      	ldr	r1, [r3, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f000 fcc6 	bl	800617c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2150      	movs	r1, #80	; 0x50
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fd20 	bl	800623c <TIM_ITRx_SetConfig>
      break;
 80057fc:	e029      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6859      	ldr	r1, [r3, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	461a      	mov	r2, r3
 800580c:	f000 fce5 	bl	80061da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2160      	movs	r1, #96	; 0x60
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fd10 	bl	800623c <TIM_ITRx_SetConfig>
      break;
 800581c:	e019      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6859      	ldr	r1, [r3, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	461a      	mov	r2, r3
 800582c:	f000 fca6 	bl	800617c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2140      	movs	r1, #64	; 0x40
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fd00 	bl	800623c <TIM_ITRx_SetConfig>
      break;
 800583c:	e009      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4619      	mov	r1, r3
 8005848:	4610      	mov	r0, r2
 800584a:	f000 fcf7 	bl	800623c <TIM_ITRx_SetConfig>
      break;
 800584e:	e000      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005850:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	ffceff88 	.word	0xffceff88
 8005870:	00100030 	.word	0x00100030
 8005874:	00100040 	.word	0x00100040
 8005878:	00100020 	.word	0x00100020

0800587c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005890:	2302      	movs	r3, #2
 8005892:	e031      	b.n	80058f8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fbc4 	bl	8006034 <TIM_SlaveTimer_SetConfig>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e018      	b.n	80058f8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058e4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a40      	ldr	r2, [pc, #256]	; (8005a78 <TIM_Base_SetConfig+0x114>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d013      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005982:	d00f      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a3d      	ldr	r2, [pc, #244]	; (8005a7c <TIM_Base_SetConfig+0x118>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00b      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a3c      	ldr	r2, [pc, #240]	; (8005a80 <TIM_Base_SetConfig+0x11c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d007      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a3b      	ldr	r2, [pc, #236]	; (8005a84 <TIM_Base_SetConfig+0x120>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a3a      	ldr	r2, [pc, #232]	; (8005a88 <TIM_Base_SetConfig+0x124>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d108      	bne.n	80059b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2f      	ldr	r2, [pc, #188]	; (8005a78 <TIM_Base_SetConfig+0x114>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01f      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c4:	d01b      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2c      	ldr	r2, [pc, #176]	; (8005a7c <TIM_Base_SetConfig+0x118>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d017      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2b      	ldr	r2, [pc, #172]	; (8005a80 <TIM_Base_SetConfig+0x11c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2a      	ldr	r2, [pc, #168]	; (8005a84 <TIM_Base_SetConfig+0x120>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00f      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a29      	ldr	r2, [pc, #164]	; (8005a88 <TIM_Base_SetConfig+0x124>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00b      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a28      	ldr	r2, [pc, #160]	; (8005a8c <TIM_Base_SetConfig+0x128>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a27      	ldr	r2, [pc, #156]	; (8005a90 <TIM_Base_SetConfig+0x12c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <TIM_Base_SetConfig+0x130>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d108      	bne.n	8005a10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a10      	ldr	r2, [pc, #64]	; (8005a78 <TIM_Base_SetConfig+0x114>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00f      	beq.n	8005a5c <TIM_Base_SetConfig+0xf8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <TIM_Base_SetConfig+0x124>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00b      	beq.n	8005a5c <TIM_Base_SetConfig+0xf8>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a11      	ldr	r2, [pc, #68]	; (8005a8c <TIM_Base_SetConfig+0x128>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d007      	beq.n	8005a5c <TIM_Base_SetConfig+0xf8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a10      	ldr	r2, [pc, #64]	; (8005a90 <TIM_Base_SetConfig+0x12c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <TIM_Base_SetConfig+0xf8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a0f      	ldr	r2, [pc, #60]	; (8005a94 <TIM_Base_SetConfig+0x130>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d103      	bne.n	8005a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	615a      	str	r2, [r3, #20]
}
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800
 8005a84:	40000c00 	.word	0x40000c00
 8005a88:	40010400 	.word	0x40010400
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40014400 	.word	0x40014400
 8005a94:	40014800 	.word	0x40014800

08005a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4b37      	ldr	r3, [pc, #220]	; (8005ba0 <TIM_OC1_SetConfig+0x108>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f023 0302 	bic.w	r3, r3, #2
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a2d      	ldr	r2, [pc, #180]	; (8005ba4 <TIM_OC1_SetConfig+0x10c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00f      	beq.n	8005b14 <TIM_OC1_SetConfig+0x7c>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a2c      	ldr	r2, [pc, #176]	; (8005ba8 <TIM_OC1_SetConfig+0x110>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00b      	beq.n	8005b14 <TIM_OC1_SetConfig+0x7c>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <TIM_OC1_SetConfig+0x114>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d007      	beq.n	8005b14 <TIM_OC1_SetConfig+0x7c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a2a      	ldr	r2, [pc, #168]	; (8005bb0 <TIM_OC1_SetConfig+0x118>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d003      	beq.n	8005b14 <TIM_OC1_SetConfig+0x7c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a29      	ldr	r2, [pc, #164]	; (8005bb4 <TIM_OC1_SetConfig+0x11c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d10c      	bne.n	8005b2e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0308 	bic.w	r3, r3, #8
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 0304 	bic.w	r3, r3, #4
 8005b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1c      	ldr	r2, [pc, #112]	; (8005ba4 <TIM_OC1_SetConfig+0x10c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00f      	beq.n	8005b56 <TIM_OC1_SetConfig+0xbe>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <TIM_OC1_SetConfig+0x110>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <TIM_OC1_SetConfig+0xbe>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <TIM_OC1_SetConfig+0x114>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <TIM_OC1_SetConfig+0xbe>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <TIM_OC1_SetConfig+0x118>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_OC1_SetConfig+0xbe>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <TIM_OC1_SetConfig+0x11c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d111      	bne.n	8005b7a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	621a      	str	r2, [r3, #32]
}
 8005b94:	bf00      	nop
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	fffeff8f 	.word	0xfffeff8f
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40010400 	.word	0x40010400
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40014400 	.word	0x40014400
 8005bb4:	40014800 	.word	0x40014800

08005bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0210 	bic.w	r2, r3, #16
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4b34      	ldr	r3, [pc, #208]	; (8005cb4 <TIM_OC2_SetConfig+0xfc>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f023 0320 	bic.w	r3, r3, #32
 8005c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a29      	ldr	r2, [pc, #164]	; (8005cb8 <TIM_OC2_SetConfig+0x100>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_OC2_SetConfig+0x68>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a28      	ldr	r2, [pc, #160]	; (8005cbc <TIM_OC2_SetConfig+0x104>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d10d      	bne.n	8005c3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <TIM_OC2_SetConfig+0x100>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00f      	beq.n	8005c64 <TIM_OC2_SetConfig+0xac>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <TIM_OC2_SetConfig+0x104>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_OC2_SetConfig+0xac>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <TIM_OC2_SetConfig+0x108>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_OC2_SetConfig+0xac>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a1b      	ldr	r2, [pc, #108]	; (8005cc4 <TIM_OC2_SetConfig+0x10c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_OC2_SetConfig+0xac>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <TIM_OC2_SetConfig+0x110>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d113      	bne.n	8005c8c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	feff8fff 	.word	0xfeff8fff
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40010400 	.word	0x40010400
 8005cc0:	40014000 	.word	0x40014000
 8005cc4:	40014400 	.word	0x40014400
 8005cc8:	40014800 	.word	0x40014800

08005ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0303 	bic.w	r3, r3, #3
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a27      	ldr	r2, [pc, #156]	; (8005dc4 <TIM_OC3_SetConfig+0xf8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d003      	beq.n	8005d32 <TIM_OC3_SetConfig+0x66>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a26      	ldr	r2, [pc, #152]	; (8005dc8 <TIM_OC3_SetConfig+0xfc>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10d      	bne.n	8005d4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a1c      	ldr	r2, [pc, #112]	; (8005dc4 <TIM_OC3_SetConfig+0xf8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00f      	beq.n	8005d76 <TIM_OC3_SetConfig+0xaa>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a1b      	ldr	r2, [pc, #108]	; (8005dc8 <TIM_OC3_SetConfig+0xfc>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00b      	beq.n	8005d76 <TIM_OC3_SetConfig+0xaa>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a1a      	ldr	r2, [pc, #104]	; (8005dcc <TIM_OC3_SetConfig+0x100>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d007      	beq.n	8005d76 <TIM_OC3_SetConfig+0xaa>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a19      	ldr	r2, [pc, #100]	; (8005dd0 <TIM_OC3_SetConfig+0x104>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_OC3_SetConfig+0xaa>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a18      	ldr	r2, [pc, #96]	; (8005dd4 <TIM_OC3_SetConfig+0x108>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d113      	bne.n	8005d9e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	621a      	str	r2, [r3, #32]
}
 8005db8:	bf00      	nop
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40010400 	.word	0x40010400
 8005dcc:	40014000 	.word	0x40014000
 8005dd0:	40014400 	.word	0x40014400
 8005dd4:	40014800 	.word	0x40014800

08005dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	031b      	lsls	r3, r3, #12
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a18      	ldr	r2, [pc, #96]	; (8005e94 <TIM_OC4_SetConfig+0xbc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00f      	beq.n	8005e58 <TIM_OC4_SetConfig+0x80>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <TIM_OC4_SetConfig+0xc0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00b      	beq.n	8005e58 <TIM_OC4_SetConfig+0x80>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <TIM_OC4_SetConfig+0xc4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_OC4_SetConfig+0x80>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a15      	ldr	r2, [pc, #84]	; (8005ea0 <TIM_OC4_SetConfig+0xc8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_OC4_SetConfig+0x80>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a14      	ldr	r2, [pc, #80]	; (8005ea4 <TIM_OC4_SetConfig+0xcc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d109      	bne.n	8005e6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	019b      	lsls	r3, r3, #6
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40010000 	.word	0x40010000
 8005e98:	40010400 	.word	0x40010400
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40014400 	.word	0x40014400
 8005ea4:	40014800 	.word	0x40014800

08005ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ee8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	041b      	lsls	r3, r3, #16
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <TIM_OC5_SetConfig+0xb0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00f      	beq.n	8005f1e <TIM_OC5_SetConfig+0x76>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a16      	ldr	r2, [pc, #88]	; (8005f5c <TIM_OC5_SetConfig+0xb4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00b      	beq.n	8005f1e <TIM_OC5_SetConfig+0x76>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a15      	ldr	r2, [pc, #84]	; (8005f60 <TIM_OC5_SetConfig+0xb8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d007      	beq.n	8005f1e <TIM_OC5_SetConfig+0x76>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a14      	ldr	r2, [pc, #80]	; (8005f64 <TIM_OC5_SetConfig+0xbc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_OC5_SetConfig+0x76>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a13      	ldr	r2, [pc, #76]	; (8005f68 <TIM_OC5_SetConfig+0xc0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d109      	bne.n	8005f32 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	621a      	str	r2, [r3, #32]
}
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40014400 	.word	0x40014400
 8005f68:	40014800 	.word	0x40014800

08005f6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	051b      	lsls	r3, r3, #20
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a18      	ldr	r2, [pc, #96]	; (8006020 <TIM_OC6_SetConfig+0xb4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00f      	beq.n	8005fe4 <TIM_OC6_SetConfig+0x78>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a17      	ldr	r2, [pc, #92]	; (8006024 <TIM_OC6_SetConfig+0xb8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <TIM_OC6_SetConfig+0x78>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a16      	ldr	r2, [pc, #88]	; (8006028 <TIM_OC6_SetConfig+0xbc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d007      	beq.n	8005fe4 <TIM_OC6_SetConfig+0x78>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a15      	ldr	r2, [pc, #84]	; (800602c <TIM_OC6_SetConfig+0xc0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_OC6_SetConfig+0x78>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a14      	ldr	r2, [pc, #80]	; (8006030 <TIM_OC6_SetConfig+0xc4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d109      	bne.n	8005ff8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	029b      	lsls	r3, r3, #10
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40010000 	.word	0x40010000
 8006024:	40010400 	.word	0x40010400
 8006028:	40014000 	.word	0x40014000
 800602c:	40014400 	.word	0x40014400
 8006030:	40014800 	.word	0x40014800

08006034 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4b47      	ldr	r3, [pc, #284]	; (8006168 <TIM_SlaveTimer_SetConfig+0x134>)
 800604a:	4013      	ands	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4b44      	ldr	r3, [pc, #272]	; (800616c <TIM_SlaveTimer_SetConfig+0x138>)
 800605c:	4013      	ands	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b60      	cmp	r3, #96	; 0x60
 8006078:	d065      	beq.n	8006146 <TIM_SlaveTimer_SetConfig+0x112>
 800607a:	2b60      	cmp	r3, #96	; 0x60
 800607c:	d80f      	bhi.n	800609e <TIM_SlaveTimer_SetConfig+0x6a>
 800607e:	2b20      	cmp	r3, #32
 8006080:	d06b      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0x126>
 8006082:	2b20      	cmp	r3, #32
 8006084:	d804      	bhi.n	8006090 <TIM_SlaveTimer_SetConfig+0x5c>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d067      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0x126>
 800608a:	2b10      	cmp	r3, #16
 800608c:	d065      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0x126>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800608e:	e065      	b.n	800615c <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	d025      	beq.n	80060e0 <TIM_SlaveTimer_SetConfig+0xac>
 8006094:	2b50      	cmp	r3, #80	; 0x50
 8006096:	d04c      	beq.n	8006132 <TIM_SlaveTimer_SetConfig+0xfe>
 8006098:	2b30      	cmp	r3, #48	; 0x30
 800609a:	d05e      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0x126>
      break;
 800609c:	e05e      	b.n	800615c <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 800609e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80060a2:	d05a      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0x126>
 80060a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80060a8:	d805      	bhi.n	80060b6 <TIM_SlaveTimer_SetConfig+0x82>
 80060aa:	2b70      	cmp	r3, #112	; 0x70
 80060ac:	d00d      	beq.n	80060ca <TIM_SlaveTimer_SetConfig+0x96>
 80060ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b2:	d052      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0x126>
      break;
 80060b4:	e052      	b.n	800615c <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 80060b6:	4a2e      	ldr	r2, [pc, #184]	; (8006170 <TIM_SlaveTimer_SetConfig+0x13c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d04e      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0x126>
 80060bc:	4a2d      	ldr	r2, [pc, #180]	; (8006174 <TIM_SlaveTimer_SetConfig+0x140>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d04b      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0x126>
 80060c2:	4a2d      	ldr	r2, [pc, #180]	; (8006178 <TIM_SlaveTimer_SetConfig+0x144>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d048      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0x126>
      break;
 80060c8:	e048      	b.n	800615c <TIM_SlaveTimer_SetConfig+0x128>
      TIM_ETR_SetConfig(htim->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68d9      	ldr	r1, [r3, #12]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f000 f8cd 	bl	8006278 <TIM_ETR_SetConfig>
      break;
 80060de:	e03d      	b.n	800615c <TIM_SlaveTimer_SetConfig+0x128>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b05      	cmp	r3, #5
 80060e6:	d101      	bne.n	80060ec <TIM_SlaveTimer_SetConfig+0xb8>
        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e038      	b.n	800615e <TIM_SlaveTimer_SetConfig+0x12a>
      tmpccer = htim->Instance->CCER;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6a1a      	ldr	r2, [r3, #32]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0201 	bic.w	r2, r2, #1
 8006102:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006112:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	621a      	str	r2, [r3, #32]
      break;
 8006130:	e014      	b.n	800615c <TIM_SlaveTimer_SetConfig+0x128>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6899      	ldr	r1, [r3, #8]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	461a      	mov	r2, r3
 8006140:	f000 f81c 	bl	800617c <TIM_TI1_ConfigInputStage>
      break;
 8006144:	e00a      	b.n	800615c <TIM_SlaveTimer_SetConfig+0x128>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6899      	ldr	r1, [r3, #8]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	461a      	mov	r2, r3
 8006154:	f000 f841 	bl	80061da <TIM_TI2_ConfigInputStage>
      break;
 8006158:	e000      	b.n	800615c <TIM_SlaveTimer_SetConfig+0x128>
      break;
 800615a:	bf00      	nop
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	ffcfff8f 	.word	0xffcfff8f
 800616c:	fffefff8 	.word	0xfffefff8
 8006170:	00100030 	.word	0x00100030
 8006174:	00100040 	.word	0x00100040
 8006178:	00100020 	.word	0x00100020

0800617c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f023 0201 	bic.w	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f023 030a 	bic.w	r3, r3, #10
 80061b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061da:	b480      	push	{r7}
 80061dc:	b087      	sub	sp, #28
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f023 0210 	bic.w	r2, r3, #16
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	031b      	lsls	r3, r3, #12
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006216:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
	...

0800623c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4b09      	ldr	r3, [pc, #36]	; (8006274 <TIM_ITRx_SetConfig+0x38>)
 8006250:	4013      	ands	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	f043 0307 	orr.w	r3, r3, #7
 800625e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	609a      	str	r2, [r3, #8]
}
 8006266:	bf00      	nop
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	ffcfff8f 	.word	0xffcfff8f

08006278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	021a      	lsls	r2, r3, #8
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	431a      	orrs	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4313      	orrs	r3, r2
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	609a      	str	r2, [r3, #8]
}
 80062ac:	bf00      	nop
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 031f 	and.w	r3, r3, #31
 80062ca:	2201      	movs	r2, #1
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a1a      	ldr	r2, [r3, #32]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	43db      	mvns	r3, r3
 80062da:	401a      	ands	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a1a      	ldr	r2, [r3, #32]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	fa01 f303 	lsl.w	r3, r1, r3
 80062f0:	431a      	orrs	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
	...

08006304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006318:	2302      	movs	r3, #2
 800631a:	e045      	b.n	80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a1c      	ldr	r2, [pc, #112]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d108      	bne.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006356:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006368:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4313      	orrs	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800637a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	4313      	orrs	r3, r2
 8006384:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40010400 	.word	0x40010400

080063bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e065      	b.n	80064a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	041b      	lsls	r3, r3, #16
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a16      	ldr	r2, [pc, #88]	; (80064b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a14      	ldr	r2, [pc, #80]	; (80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d115      	bne.n	8006492 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	051b      	lsls	r3, r3, #20
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40010400 	.word	0x40010400

080064b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e042      	b.n	800658c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f004 fad3 	bl	800aac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2224      	movs	r2, #36	; 0x24
 8006522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0201 	bic.w	r2, r2, #1
 8006534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f82e 	bl	8006598 <UART_SetConfig>
 800653c:	4603      	mov	r3, r0
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e022      	b.n	800658c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f002 f99c 	bl	800888c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006572:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0201 	orr.w	r2, r2, #1
 8006582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f002 fa23 	bl	80089d0 <UART_CheckIdleState>
 800658a:	4603      	mov	r3, r0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	0000      	movs	r0, r0
	...

08006598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006598:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800659c:	b08e      	sub	sp, #56	; 0x38
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ce:	4313      	orrs	r3, r2
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	4bc1      	ldr	r3, [pc, #772]	; (80068e0 <UART_SetConfig+0x348>)
 80065da:	4013      	ands	r3, r2
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6812      	ldr	r2, [r2, #0]
 80065e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065e2:	430b      	orrs	r3, r1
 80065e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4ab7      	ldr	r2, [pc, #732]	; (80068e4 <UART_SetConfig+0x34c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d004      	beq.n	8006616 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006612:	4313      	orrs	r3, r2
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	4bb2      	ldr	r3, [pc, #712]	; (80068e8 <UART_SetConfig+0x350>)
 800661e:	4013      	ands	r3, r2
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6812      	ldr	r2, [r2, #0]
 8006624:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006626:	430b      	orrs	r3, r1
 8006628:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	f023 010f 	bic.w	r1, r3, #15
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4aa9      	ldr	r2, [pc, #676]	; (80068ec <UART_SetConfig+0x354>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d177      	bne.n	800673a <UART_SetConfig+0x1a2>
 800664a:	4ba9      	ldr	r3, [pc, #676]	; (80068f0 <UART_SetConfig+0x358>)
 800664c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006652:	2b28      	cmp	r3, #40	; 0x28
 8006654:	d86c      	bhi.n	8006730 <UART_SetConfig+0x198>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <UART_SetConfig+0xc4>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	08006701 	.word	0x08006701
 8006660:	08006731 	.word	0x08006731
 8006664:	08006731 	.word	0x08006731
 8006668:	08006731 	.word	0x08006731
 800666c:	08006731 	.word	0x08006731
 8006670:	08006731 	.word	0x08006731
 8006674:	08006731 	.word	0x08006731
 8006678:	08006731 	.word	0x08006731
 800667c:	08006709 	.word	0x08006709
 8006680:	08006731 	.word	0x08006731
 8006684:	08006731 	.word	0x08006731
 8006688:	08006731 	.word	0x08006731
 800668c:	08006731 	.word	0x08006731
 8006690:	08006731 	.word	0x08006731
 8006694:	08006731 	.word	0x08006731
 8006698:	08006731 	.word	0x08006731
 800669c:	08006711 	.word	0x08006711
 80066a0:	08006731 	.word	0x08006731
 80066a4:	08006731 	.word	0x08006731
 80066a8:	08006731 	.word	0x08006731
 80066ac:	08006731 	.word	0x08006731
 80066b0:	08006731 	.word	0x08006731
 80066b4:	08006731 	.word	0x08006731
 80066b8:	08006731 	.word	0x08006731
 80066bc:	08006719 	.word	0x08006719
 80066c0:	08006731 	.word	0x08006731
 80066c4:	08006731 	.word	0x08006731
 80066c8:	08006731 	.word	0x08006731
 80066cc:	08006731 	.word	0x08006731
 80066d0:	08006731 	.word	0x08006731
 80066d4:	08006731 	.word	0x08006731
 80066d8:	08006731 	.word	0x08006731
 80066dc:	08006721 	.word	0x08006721
 80066e0:	08006731 	.word	0x08006731
 80066e4:	08006731 	.word	0x08006731
 80066e8:	08006731 	.word	0x08006731
 80066ec:	08006731 	.word	0x08006731
 80066f0:	08006731 	.word	0x08006731
 80066f4:	08006731 	.word	0x08006731
 80066f8:	08006731 	.word	0x08006731
 80066fc:	08006729 	.word	0x08006729
 8006700:	2301      	movs	r3, #1
 8006702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006706:	e233      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006708:	2304      	movs	r3, #4
 800670a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800670e:	e22f      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006710:	2308      	movs	r3, #8
 8006712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006716:	e22b      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006718:	2310      	movs	r3, #16
 800671a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800671e:	e227      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006720:	2320      	movs	r3, #32
 8006722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006726:	e223      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006728:	2340      	movs	r3, #64	; 0x40
 800672a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800672e:	e21f      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006730:	2380      	movs	r3, #128	; 0x80
 8006732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006736:	bf00      	nop
 8006738:	e21a      	b.n	8006b70 <UART_SetConfig+0x5d8>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a6d      	ldr	r2, [pc, #436]	; (80068f4 <UART_SetConfig+0x35c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d132      	bne.n	80067aa <UART_SetConfig+0x212>
 8006744:	4b6a      	ldr	r3, [pc, #424]	; (80068f0 <UART_SetConfig+0x358>)
 8006746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	2b05      	cmp	r3, #5
 800674e:	d827      	bhi.n	80067a0 <UART_SetConfig+0x208>
 8006750:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <UART_SetConfig+0x1c0>)
 8006752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006756:	bf00      	nop
 8006758:	08006771 	.word	0x08006771
 800675c:	08006779 	.word	0x08006779
 8006760:	08006781 	.word	0x08006781
 8006764:	08006789 	.word	0x08006789
 8006768:	08006791 	.word	0x08006791
 800676c:	08006799 	.word	0x08006799
 8006770:	2300      	movs	r3, #0
 8006772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006776:	e1fb      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006778:	2304      	movs	r3, #4
 800677a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800677e:	e1f7      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006780:	2308      	movs	r3, #8
 8006782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006786:	e1f3      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006788:	2310      	movs	r3, #16
 800678a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800678e:	e1ef      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006790:	2320      	movs	r3, #32
 8006792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006796:	e1eb      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006798:	2340      	movs	r3, #64	; 0x40
 800679a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800679e:	e1e7      	b.n	8006b70 <UART_SetConfig+0x5d8>
 80067a0:	2380      	movs	r3, #128	; 0x80
 80067a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067a6:	bf00      	nop
 80067a8:	e1e2      	b.n	8006b70 <UART_SetConfig+0x5d8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a52      	ldr	r2, [pc, #328]	; (80068f8 <UART_SetConfig+0x360>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d132      	bne.n	800681a <UART_SetConfig+0x282>
 80067b4:	4b4e      	ldr	r3, [pc, #312]	; (80068f0 <UART_SetConfig+0x358>)
 80067b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	2b05      	cmp	r3, #5
 80067be:	d827      	bhi.n	8006810 <UART_SetConfig+0x278>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <UART_SetConfig+0x230>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067e1 	.word	0x080067e1
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006801 	.word	0x08006801
 80067dc:	08006809 	.word	0x08006809
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067e6:	e1c3      	b.n	8006b70 <UART_SetConfig+0x5d8>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ee:	e1bf      	b.n	8006b70 <UART_SetConfig+0x5d8>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067f6:	e1bb      	b.n	8006b70 <UART_SetConfig+0x5d8>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fe:	e1b7      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006800:	2320      	movs	r3, #32
 8006802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006806:	e1b3      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006808:	2340      	movs	r3, #64	; 0x40
 800680a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800680e:	e1af      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006810:	2380      	movs	r3, #128	; 0x80
 8006812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006816:	bf00      	nop
 8006818:	e1aa      	b.n	8006b70 <UART_SetConfig+0x5d8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a37      	ldr	r2, [pc, #220]	; (80068fc <UART_SetConfig+0x364>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d132      	bne.n	800688a <UART_SetConfig+0x2f2>
 8006824:	4b32      	ldr	r3, [pc, #200]	; (80068f0 <UART_SetConfig+0x358>)
 8006826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	2b05      	cmp	r3, #5
 800682e:	d827      	bhi.n	8006880 <UART_SetConfig+0x2e8>
 8006830:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <UART_SetConfig+0x2a0>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	08006851 	.word	0x08006851
 800683c:	08006859 	.word	0x08006859
 8006840:	08006861 	.word	0x08006861
 8006844:	08006869 	.word	0x08006869
 8006848:	08006871 	.word	0x08006871
 800684c:	08006879 	.word	0x08006879
 8006850:	2300      	movs	r3, #0
 8006852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006856:	e18b      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006858:	2304      	movs	r3, #4
 800685a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800685e:	e187      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006860:	2308      	movs	r3, #8
 8006862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006866:	e183      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006868:	2310      	movs	r3, #16
 800686a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800686e:	e17f      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006870:	2320      	movs	r3, #32
 8006872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006876:	e17b      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006878:	2340      	movs	r3, #64	; 0x40
 800687a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800687e:	e177      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006880:	2380      	movs	r3, #128	; 0x80
 8006882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006886:	bf00      	nop
 8006888:	e172      	b.n	8006b70 <UART_SetConfig+0x5d8>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a1c      	ldr	r2, [pc, #112]	; (8006900 <UART_SetConfig+0x368>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d144      	bne.n	800691e <UART_SetConfig+0x386>
 8006894:	4b16      	ldr	r3, [pc, #88]	; (80068f0 <UART_SetConfig+0x358>)
 8006896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	2b05      	cmp	r3, #5
 800689e:	d839      	bhi.n	8006914 <UART_SetConfig+0x37c>
 80068a0:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <UART_SetConfig+0x310>)
 80068a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a6:	bf00      	nop
 80068a8:	080068c1 	.word	0x080068c1
 80068ac:	080068c9 	.word	0x080068c9
 80068b0:	080068d1 	.word	0x080068d1
 80068b4:	080068d9 	.word	0x080068d9
 80068b8:	08006905 	.word	0x08006905
 80068bc:	0800690d 	.word	0x0800690d
 80068c0:	2300      	movs	r3, #0
 80068c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c6:	e153      	b.n	8006b70 <UART_SetConfig+0x5d8>
 80068c8:	2304      	movs	r3, #4
 80068ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ce:	e14f      	b.n	8006b70 <UART_SetConfig+0x5d8>
 80068d0:	2308      	movs	r3, #8
 80068d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068d6:	e14b      	b.n	8006b70 <UART_SetConfig+0x5d8>
 80068d8:	2310      	movs	r3, #16
 80068da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068de:	e147      	b.n	8006b70 <UART_SetConfig+0x5d8>
 80068e0:	cfff69f3 	.word	0xcfff69f3
 80068e4:	58000c00 	.word	0x58000c00
 80068e8:	11fff4ff 	.word	0x11fff4ff
 80068ec:	40011000 	.word	0x40011000
 80068f0:	58024400 	.word	0x58024400
 80068f4:	40004400 	.word	0x40004400
 80068f8:	40004800 	.word	0x40004800
 80068fc:	40004c00 	.word	0x40004c00
 8006900:	40005000 	.word	0x40005000
 8006904:	2320      	movs	r3, #32
 8006906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800690a:	e131      	b.n	8006b70 <UART_SetConfig+0x5d8>
 800690c:	2340      	movs	r3, #64	; 0x40
 800690e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006912:	e12d      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006914:	2380      	movs	r3, #128	; 0x80
 8006916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800691a:	bf00      	nop
 800691c:	e128      	b.n	8006b70 <UART_SetConfig+0x5d8>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4ac3      	ldr	r2, [pc, #780]	; (8006c30 <UART_SetConfig+0x698>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d178      	bne.n	8006a1a <UART_SetConfig+0x482>
 8006928:	4bc2      	ldr	r3, [pc, #776]	; (8006c34 <UART_SetConfig+0x69c>)
 800692a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006930:	2b28      	cmp	r3, #40	; 0x28
 8006932:	d86d      	bhi.n	8006a10 <UART_SetConfig+0x478>
 8006934:	a201      	add	r2, pc, #4	; (adr r2, 800693c <UART_SetConfig+0x3a4>)
 8006936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693a:	bf00      	nop
 800693c:	080069e1 	.word	0x080069e1
 8006940:	08006a11 	.word	0x08006a11
 8006944:	08006a11 	.word	0x08006a11
 8006948:	08006a11 	.word	0x08006a11
 800694c:	08006a11 	.word	0x08006a11
 8006950:	08006a11 	.word	0x08006a11
 8006954:	08006a11 	.word	0x08006a11
 8006958:	08006a11 	.word	0x08006a11
 800695c:	080069e9 	.word	0x080069e9
 8006960:	08006a11 	.word	0x08006a11
 8006964:	08006a11 	.word	0x08006a11
 8006968:	08006a11 	.word	0x08006a11
 800696c:	08006a11 	.word	0x08006a11
 8006970:	08006a11 	.word	0x08006a11
 8006974:	08006a11 	.word	0x08006a11
 8006978:	08006a11 	.word	0x08006a11
 800697c:	080069f1 	.word	0x080069f1
 8006980:	08006a11 	.word	0x08006a11
 8006984:	08006a11 	.word	0x08006a11
 8006988:	08006a11 	.word	0x08006a11
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006a11 	.word	0x08006a11
 8006994:	08006a11 	.word	0x08006a11
 8006998:	08006a11 	.word	0x08006a11
 800699c:	080069f9 	.word	0x080069f9
 80069a0:	08006a11 	.word	0x08006a11
 80069a4:	08006a11 	.word	0x08006a11
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	08006a11 	.word	0x08006a11
 80069b0:	08006a11 	.word	0x08006a11
 80069b4:	08006a11 	.word	0x08006a11
 80069b8:	08006a11 	.word	0x08006a11
 80069bc:	08006a01 	.word	0x08006a01
 80069c0:	08006a11 	.word	0x08006a11
 80069c4:	08006a11 	.word	0x08006a11
 80069c8:	08006a11 	.word	0x08006a11
 80069cc:	08006a11 	.word	0x08006a11
 80069d0:	08006a11 	.word	0x08006a11
 80069d4:	08006a11 	.word	0x08006a11
 80069d8:	08006a11 	.word	0x08006a11
 80069dc:	08006a09 	.word	0x08006a09
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069e6:	e0c3      	b.n	8006b70 <UART_SetConfig+0x5d8>
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ee:	e0bf      	b.n	8006b70 <UART_SetConfig+0x5d8>
 80069f0:	2308      	movs	r3, #8
 80069f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069f6:	e0bb      	b.n	8006b70 <UART_SetConfig+0x5d8>
 80069f8:	2310      	movs	r3, #16
 80069fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069fe:	e0b7      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006a00:	2320      	movs	r3, #32
 8006a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a06:	e0b3      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006a08:	2340      	movs	r3, #64	; 0x40
 8006a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a0e:	e0af      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006a10:	2380      	movs	r3, #128	; 0x80
 8006a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a16:	bf00      	nop
 8006a18:	e0aa      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a86      	ldr	r2, [pc, #536]	; (8006c38 <UART_SetConfig+0x6a0>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d132      	bne.n	8006a8a <UART_SetConfig+0x4f2>
 8006a24:	4b83      	ldr	r3, [pc, #524]	; (8006c34 <UART_SetConfig+0x69c>)
 8006a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	d827      	bhi.n	8006a80 <UART_SetConfig+0x4e8>
 8006a30:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <UART_SetConfig+0x4a0>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006a51 	.word	0x08006a51
 8006a3c:	08006a59 	.word	0x08006a59
 8006a40:	08006a61 	.word	0x08006a61
 8006a44:	08006a69 	.word	0x08006a69
 8006a48:	08006a71 	.word	0x08006a71
 8006a4c:	08006a79 	.word	0x08006a79
 8006a50:	2300      	movs	r3, #0
 8006a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a56:	e08b      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a5e:	e087      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006a60:	2308      	movs	r3, #8
 8006a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a66:	e083      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006a68:	2310      	movs	r3, #16
 8006a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a6e:	e07f      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006a70:	2320      	movs	r3, #32
 8006a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a76:	e07b      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006a78:	2340      	movs	r3, #64	; 0x40
 8006a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a7e:	e077      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006a80:	2380      	movs	r3, #128	; 0x80
 8006a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a86:	bf00      	nop
 8006a88:	e072      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a6b      	ldr	r2, [pc, #428]	; (8006c3c <UART_SetConfig+0x6a4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d132      	bne.n	8006afa <UART_SetConfig+0x562>
 8006a94:	4b67      	ldr	r3, [pc, #412]	; (8006c34 <UART_SetConfig+0x69c>)
 8006a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	2b05      	cmp	r3, #5
 8006a9e:	d827      	bhi.n	8006af0 <UART_SetConfig+0x558>
 8006aa0:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <UART_SetConfig+0x510>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006ac1 	.word	0x08006ac1
 8006aac:	08006ac9 	.word	0x08006ac9
 8006ab0:	08006ad1 	.word	0x08006ad1
 8006ab4:	08006ad9 	.word	0x08006ad9
 8006ab8:	08006ae1 	.word	0x08006ae1
 8006abc:	08006ae9 	.word	0x08006ae9
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac6:	e053      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006ac8:	2304      	movs	r3, #4
 8006aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ace:	e04f      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ad6:	e04b      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ade:	e047      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006ae0:	2320      	movs	r3, #32
 8006ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ae6:	e043      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aee:	e03f      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006af6:	bf00      	nop
 8006af8:	e03a      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a50      	ldr	r2, [pc, #320]	; (8006c40 <UART_SetConfig+0x6a8>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d132      	bne.n	8006b6a <UART_SetConfig+0x5d2>
 8006b04:	4b4b      	ldr	r3, [pc, #300]	; (8006c34 <UART_SetConfig+0x69c>)
 8006b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	2b05      	cmp	r3, #5
 8006b0e:	d827      	bhi.n	8006b60 <UART_SetConfig+0x5c8>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <UART_SetConfig+0x580>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b31 	.word	0x08006b31
 8006b1c:	08006b39 	.word	0x08006b39
 8006b20:	08006b41 	.word	0x08006b41
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006b51 	.word	0x08006b51
 8006b2c:	08006b59 	.word	0x08006b59
 8006b30:	2302      	movs	r3, #2
 8006b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b36:	e01b      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006b38:	2304      	movs	r3, #4
 8006b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b3e:	e017      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006b40:	2308      	movs	r3, #8
 8006b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b46:	e013      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b4e:	e00f      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006b50:	2320      	movs	r3, #32
 8006b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b56:	e00b      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006b58:	2340      	movs	r3, #64	; 0x40
 8006b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b5e:	e007      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006b60:	2380      	movs	r3, #128	; 0x80
 8006b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b66:	bf00      	nop
 8006b68:	e002      	b.n	8006b70 <UART_SetConfig+0x5d8>
 8006b6a:	2380      	movs	r3, #128	; 0x80
 8006b6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a32      	ldr	r2, [pc, #200]	; (8006c40 <UART_SetConfig+0x6a8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	f040 86f7 	bne.w	800796a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	f000 80c0 	beq.w	8006d06 <UART_SetConfig+0x76e>
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	dc04      	bgt.n	8006b94 <UART_SetConfig+0x5fc>
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d00c      	beq.n	8006ba8 <UART_SetConfig+0x610>
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d065      	beq.n	8006c5e <UART_SetConfig+0x6c6>
 8006b92:	e27a      	b.n	800708a <UART_SetConfig+0xaf2>
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	f000 81b0 	beq.w	8006efa <UART_SetConfig+0x962>
 8006b9a:	2b40      	cmp	r3, #64	; 0x40
 8006b9c:	f000 821e 	beq.w	8006fdc <UART_SetConfig+0xa44>
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	f000 8104 	beq.w	8006dae <UART_SetConfig+0x816>
 8006ba6:	e270      	b.n	800708a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006ba8:	f7fd fd2e 	bl	8004608 <HAL_RCCEx_GetD3PCLK1Freq>
 8006bac:	4602      	mov	r2, r0
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d04e      	beq.n	8006c54 <UART_SetConfig+0x6bc>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d048      	beq.n	8006c50 <UART_SetConfig+0x6b8>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d042      	beq.n	8006c4c <UART_SetConfig+0x6b4>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d03c      	beq.n	8006c48 <UART_SetConfig+0x6b0>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d036      	beq.n	8006c44 <UART_SetConfig+0x6ac>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	2b05      	cmp	r3, #5
 8006bdc:	d026      	beq.n	8006c2c <UART_SetConfig+0x694>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	2b06      	cmp	r3, #6
 8006be4:	d020      	beq.n	8006c28 <UART_SetConfig+0x690>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	2b07      	cmp	r3, #7
 8006bec:	d01a      	beq.n	8006c24 <UART_SetConfig+0x68c>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	2b08      	cmp	r3, #8
 8006bf4:	d014      	beq.n	8006c20 <UART_SetConfig+0x688>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	2b09      	cmp	r3, #9
 8006bfc:	d00e      	beq.n	8006c1c <UART_SetConfig+0x684>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	2b0a      	cmp	r3, #10
 8006c04:	d008      	beq.n	8006c18 <UART_SetConfig+0x680>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	2b0b      	cmp	r3, #11
 8006c0c:	d102      	bne.n	8006c14 <UART_SetConfig+0x67c>
 8006c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c12:	e020      	b.n	8006c56 <UART_SetConfig+0x6be>
 8006c14:	2301      	movs	r3, #1
 8006c16:	e01e      	b.n	8006c56 <UART_SetConfig+0x6be>
 8006c18:	2380      	movs	r3, #128	; 0x80
 8006c1a:	e01c      	b.n	8006c56 <UART_SetConfig+0x6be>
 8006c1c:	2340      	movs	r3, #64	; 0x40
 8006c1e:	e01a      	b.n	8006c56 <UART_SetConfig+0x6be>
 8006c20:	2320      	movs	r3, #32
 8006c22:	e018      	b.n	8006c56 <UART_SetConfig+0x6be>
 8006c24:	2310      	movs	r3, #16
 8006c26:	e016      	b.n	8006c56 <UART_SetConfig+0x6be>
 8006c28:	230c      	movs	r3, #12
 8006c2a:	e014      	b.n	8006c56 <UART_SetConfig+0x6be>
 8006c2c:	230a      	movs	r3, #10
 8006c2e:	e012      	b.n	8006c56 <UART_SetConfig+0x6be>
 8006c30:	40011400 	.word	0x40011400
 8006c34:	58024400 	.word	0x58024400
 8006c38:	40007800 	.word	0x40007800
 8006c3c:	40007c00 	.word	0x40007c00
 8006c40:	58000c00 	.word	0x58000c00
 8006c44:	2308      	movs	r3, #8
 8006c46:	e006      	b.n	8006c56 <UART_SetConfig+0x6be>
 8006c48:	2306      	movs	r3, #6
 8006c4a:	e004      	b.n	8006c56 <UART_SetConfig+0x6be>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	e002      	b.n	8006c56 <UART_SetConfig+0x6be>
 8006c50:	2302      	movs	r3, #2
 8006c52:	e000      	b.n	8006c56 <UART_SetConfig+0x6be>
 8006c54:	2301      	movs	r3, #1
 8006c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c5c:	e219      	b.n	8007092 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c5e:	f107 0314 	add.w	r3, r7, #20
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fd fce6 	bl	8004634 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d044      	beq.n	8006cfc <UART_SetConfig+0x764>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d03e      	beq.n	8006cf8 <UART_SetConfig+0x760>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d038      	beq.n	8006cf4 <UART_SetConfig+0x75c>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d032      	beq.n	8006cf0 <UART_SetConfig+0x758>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d02c      	beq.n	8006cec <UART_SetConfig+0x754>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b05      	cmp	r3, #5
 8006c98:	d026      	beq.n	8006ce8 <UART_SetConfig+0x750>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b06      	cmp	r3, #6
 8006ca0:	d020      	beq.n	8006ce4 <UART_SetConfig+0x74c>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	2b07      	cmp	r3, #7
 8006ca8:	d01a      	beq.n	8006ce0 <UART_SetConfig+0x748>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d014      	beq.n	8006cdc <UART_SetConfig+0x744>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	2b09      	cmp	r3, #9
 8006cb8:	d00e      	beq.n	8006cd8 <UART_SetConfig+0x740>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	2b0a      	cmp	r3, #10
 8006cc0:	d008      	beq.n	8006cd4 <UART_SetConfig+0x73c>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b0b      	cmp	r3, #11
 8006cc8:	d102      	bne.n	8006cd0 <UART_SetConfig+0x738>
 8006cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cce:	e016      	b.n	8006cfe <UART_SetConfig+0x766>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e014      	b.n	8006cfe <UART_SetConfig+0x766>
 8006cd4:	2380      	movs	r3, #128	; 0x80
 8006cd6:	e012      	b.n	8006cfe <UART_SetConfig+0x766>
 8006cd8:	2340      	movs	r3, #64	; 0x40
 8006cda:	e010      	b.n	8006cfe <UART_SetConfig+0x766>
 8006cdc:	2320      	movs	r3, #32
 8006cde:	e00e      	b.n	8006cfe <UART_SetConfig+0x766>
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	e00c      	b.n	8006cfe <UART_SetConfig+0x766>
 8006ce4:	230c      	movs	r3, #12
 8006ce6:	e00a      	b.n	8006cfe <UART_SetConfig+0x766>
 8006ce8:	230a      	movs	r3, #10
 8006cea:	e008      	b.n	8006cfe <UART_SetConfig+0x766>
 8006cec:	2308      	movs	r3, #8
 8006cee:	e006      	b.n	8006cfe <UART_SetConfig+0x766>
 8006cf0:	2306      	movs	r3, #6
 8006cf2:	e004      	b.n	8006cfe <UART_SetConfig+0x766>
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	e002      	b.n	8006cfe <UART_SetConfig+0x766>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e000      	b.n	8006cfe <UART_SetConfig+0x766>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d04:	e1c5      	b.n	8007092 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d06:	f107 0308 	add.w	r3, r7, #8
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fd fdde 	bl	80048cc <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d044      	beq.n	8006da4 <UART_SetConfig+0x80c>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d03e      	beq.n	8006da0 <UART_SetConfig+0x808>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d038      	beq.n	8006d9c <UART_SetConfig+0x804>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d032      	beq.n	8006d98 <UART_SetConfig+0x800>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d02c      	beq.n	8006d94 <UART_SetConfig+0x7fc>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	2b05      	cmp	r3, #5
 8006d40:	d026      	beq.n	8006d90 <UART_SetConfig+0x7f8>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d020      	beq.n	8006d8c <UART_SetConfig+0x7f4>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	2b07      	cmp	r3, #7
 8006d50:	d01a      	beq.n	8006d88 <UART_SetConfig+0x7f0>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	2b08      	cmp	r3, #8
 8006d58:	d014      	beq.n	8006d84 <UART_SetConfig+0x7ec>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	2b09      	cmp	r3, #9
 8006d60:	d00e      	beq.n	8006d80 <UART_SetConfig+0x7e8>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	2b0a      	cmp	r3, #10
 8006d68:	d008      	beq.n	8006d7c <UART_SetConfig+0x7e4>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	2b0b      	cmp	r3, #11
 8006d70:	d102      	bne.n	8006d78 <UART_SetConfig+0x7e0>
 8006d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d76:	e016      	b.n	8006da6 <UART_SetConfig+0x80e>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e014      	b.n	8006da6 <UART_SetConfig+0x80e>
 8006d7c:	2380      	movs	r3, #128	; 0x80
 8006d7e:	e012      	b.n	8006da6 <UART_SetConfig+0x80e>
 8006d80:	2340      	movs	r3, #64	; 0x40
 8006d82:	e010      	b.n	8006da6 <UART_SetConfig+0x80e>
 8006d84:	2320      	movs	r3, #32
 8006d86:	e00e      	b.n	8006da6 <UART_SetConfig+0x80e>
 8006d88:	2310      	movs	r3, #16
 8006d8a:	e00c      	b.n	8006da6 <UART_SetConfig+0x80e>
 8006d8c:	230c      	movs	r3, #12
 8006d8e:	e00a      	b.n	8006da6 <UART_SetConfig+0x80e>
 8006d90:	230a      	movs	r3, #10
 8006d92:	e008      	b.n	8006da6 <UART_SetConfig+0x80e>
 8006d94:	2308      	movs	r3, #8
 8006d96:	e006      	b.n	8006da6 <UART_SetConfig+0x80e>
 8006d98:	2306      	movs	r3, #6
 8006d9a:	e004      	b.n	8006da6 <UART_SetConfig+0x80e>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	e002      	b.n	8006da6 <UART_SetConfig+0x80e>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e000      	b.n	8006da6 <UART_SetConfig+0x80e>
 8006da4:	2301      	movs	r3, #1
 8006da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006dac:	e171      	b.n	8007092 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dae:	4b7a      	ldr	r3, [pc, #488]	; (8006f98 <UART_SetConfig+0xa00>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d054      	beq.n	8006e64 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006dba:	4b77      	ldr	r3, [pc, #476]	; (8006f98 <UART_SetConfig+0xa00>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	08db      	lsrs	r3, r3, #3
 8006dc0:	f003 0303 	and.w	r3, r3, #3
 8006dc4:	4a75      	ldr	r2, [pc, #468]	; (8006f9c <UART_SetConfig+0xa04>)
 8006dc6:	40da      	lsrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d044      	beq.n	8006e5a <UART_SetConfig+0x8c2>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d03e      	beq.n	8006e56 <UART_SetConfig+0x8be>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d038      	beq.n	8006e52 <UART_SetConfig+0x8ba>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d032      	beq.n	8006e4e <UART_SetConfig+0x8b6>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d02c      	beq.n	8006e4a <UART_SetConfig+0x8b2>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	2b05      	cmp	r3, #5
 8006df6:	d026      	beq.n	8006e46 <UART_SetConfig+0x8ae>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	2b06      	cmp	r3, #6
 8006dfe:	d020      	beq.n	8006e42 <UART_SetConfig+0x8aa>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	2b07      	cmp	r3, #7
 8006e06:	d01a      	beq.n	8006e3e <UART_SetConfig+0x8a6>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	d014      	beq.n	8006e3a <UART_SetConfig+0x8a2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	2b09      	cmp	r3, #9
 8006e16:	d00e      	beq.n	8006e36 <UART_SetConfig+0x89e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	2b0a      	cmp	r3, #10
 8006e1e:	d008      	beq.n	8006e32 <UART_SetConfig+0x89a>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	2b0b      	cmp	r3, #11
 8006e26:	d102      	bne.n	8006e2e <UART_SetConfig+0x896>
 8006e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e2c:	e016      	b.n	8006e5c <UART_SetConfig+0x8c4>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e014      	b.n	8006e5c <UART_SetConfig+0x8c4>
 8006e32:	2380      	movs	r3, #128	; 0x80
 8006e34:	e012      	b.n	8006e5c <UART_SetConfig+0x8c4>
 8006e36:	2340      	movs	r3, #64	; 0x40
 8006e38:	e010      	b.n	8006e5c <UART_SetConfig+0x8c4>
 8006e3a:	2320      	movs	r3, #32
 8006e3c:	e00e      	b.n	8006e5c <UART_SetConfig+0x8c4>
 8006e3e:	2310      	movs	r3, #16
 8006e40:	e00c      	b.n	8006e5c <UART_SetConfig+0x8c4>
 8006e42:	230c      	movs	r3, #12
 8006e44:	e00a      	b.n	8006e5c <UART_SetConfig+0x8c4>
 8006e46:	230a      	movs	r3, #10
 8006e48:	e008      	b.n	8006e5c <UART_SetConfig+0x8c4>
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	e006      	b.n	8006e5c <UART_SetConfig+0x8c4>
 8006e4e:	2306      	movs	r3, #6
 8006e50:	e004      	b.n	8006e5c <UART_SetConfig+0x8c4>
 8006e52:	2304      	movs	r3, #4
 8006e54:	e002      	b.n	8006e5c <UART_SetConfig+0x8c4>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e000      	b.n	8006e5c <UART_SetConfig+0x8c4>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8006e62:	e116      	b.n	8007092 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d043      	beq.n	8006ef4 <UART_SetConfig+0x95c>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d03d      	beq.n	8006ef0 <UART_SetConfig+0x958>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d037      	beq.n	8006eec <UART_SetConfig+0x954>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d031      	beq.n	8006ee8 <UART_SetConfig+0x950>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d02b      	beq.n	8006ee4 <UART_SetConfig+0x94c>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	2b05      	cmp	r3, #5
 8006e92:	d025      	beq.n	8006ee0 <UART_SetConfig+0x948>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	2b06      	cmp	r3, #6
 8006e9a:	d01f      	beq.n	8006edc <UART_SetConfig+0x944>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	2b07      	cmp	r3, #7
 8006ea2:	d019      	beq.n	8006ed8 <UART_SetConfig+0x940>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d013      	beq.n	8006ed4 <UART_SetConfig+0x93c>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	2b09      	cmp	r3, #9
 8006eb2:	d00d      	beq.n	8006ed0 <UART_SetConfig+0x938>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	2b0a      	cmp	r3, #10
 8006eba:	d007      	beq.n	8006ecc <UART_SetConfig+0x934>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	2b0b      	cmp	r3, #11
 8006ec2:	d101      	bne.n	8006ec8 <UART_SetConfig+0x930>
 8006ec4:	4b36      	ldr	r3, [pc, #216]	; (8006fa0 <UART_SetConfig+0xa08>)
 8006ec6:	e016      	b.n	8006ef6 <UART_SetConfig+0x95e>
 8006ec8:	4b34      	ldr	r3, [pc, #208]	; (8006f9c <UART_SetConfig+0xa04>)
 8006eca:	e014      	b.n	8006ef6 <UART_SetConfig+0x95e>
 8006ecc:	4b35      	ldr	r3, [pc, #212]	; (8006fa4 <UART_SetConfig+0xa0c>)
 8006ece:	e012      	b.n	8006ef6 <UART_SetConfig+0x95e>
 8006ed0:	4b35      	ldr	r3, [pc, #212]	; (8006fa8 <UART_SetConfig+0xa10>)
 8006ed2:	e010      	b.n	8006ef6 <UART_SetConfig+0x95e>
 8006ed4:	4b35      	ldr	r3, [pc, #212]	; (8006fac <UART_SetConfig+0xa14>)
 8006ed6:	e00e      	b.n	8006ef6 <UART_SetConfig+0x95e>
 8006ed8:	4b35      	ldr	r3, [pc, #212]	; (8006fb0 <UART_SetConfig+0xa18>)
 8006eda:	e00c      	b.n	8006ef6 <UART_SetConfig+0x95e>
 8006edc:	4b35      	ldr	r3, [pc, #212]	; (8006fb4 <UART_SetConfig+0xa1c>)
 8006ede:	e00a      	b.n	8006ef6 <UART_SetConfig+0x95e>
 8006ee0:	4b35      	ldr	r3, [pc, #212]	; (8006fb8 <UART_SetConfig+0xa20>)
 8006ee2:	e008      	b.n	8006ef6 <UART_SetConfig+0x95e>
 8006ee4:	4b35      	ldr	r3, [pc, #212]	; (8006fbc <UART_SetConfig+0xa24>)
 8006ee6:	e006      	b.n	8006ef6 <UART_SetConfig+0x95e>
 8006ee8:	4b35      	ldr	r3, [pc, #212]	; (8006fc0 <UART_SetConfig+0xa28>)
 8006eea:	e004      	b.n	8006ef6 <UART_SetConfig+0x95e>
 8006eec:	4b35      	ldr	r3, [pc, #212]	; (8006fc4 <UART_SetConfig+0xa2c>)
 8006eee:	e002      	b.n	8006ef6 <UART_SetConfig+0x95e>
 8006ef0:	4b35      	ldr	r3, [pc, #212]	; (8006fc8 <UART_SetConfig+0xa30>)
 8006ef2:	e000      	b.n	8006ef6 <UART_SetConfig+0x95e>
 8006ef4:	4b29      	ldr	r3, [pc, #164]	; (8006f9c <UART_SetConfig+0xa04>)
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ef8:	e0cb      	b.n	8007092 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d046      	beq.n	8006f90 <UART_SetConfig+0x9f8>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d040      	beq.n	8006f8c <UART_SetConfig+0x9f4>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d03a      	beq.n	8006f88 <UART_SetConfig+0x9f0>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d034      	beq.n	8006f84 <UART_SetConfig+0x9ec>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d02e      	beq.n	8006f80 <UART_SetConfig+0x9e8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d028      	beq.n	8006f7c <UART_SetConfig+0x9e4>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	2b06      	cmp	r3, #6
 8006f30:	d022      	beq.n	8006f78 <UART_SetConfig+0x9e0>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b07      	cmp	r3, #7
 8006f38:	d01c      	beq.n	8006f74 <UART_SetConfig+0x9dc>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d016      	beq.n	8006f70 <UART_SetConfig+0x9d8>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	2b09      	cmp	r3, #9
 8006f48:	d00f      	beq.n	8006f6a <UART_SetConfig+0x9d2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	2b0a      	cmp	r3, #10
 8006f50:	d008      	beq.n	8006f64 <UART_SetConfig+0x9cc>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	2b0b      	cmp	r3, #11
 8006f58:	d102      	bne.n	8006f60 <UART_SetConfig+0x9c8>
 8006f5a:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006f5e:	e018      	b.n	8006f92 <UART_SetConfig+0x9fa>
 8006f60:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <UART_SetConfig+0xa18>)
 8006f62:	e016      	b.n	8006f92 <UART_SetConfig+0x9fa>
 8006f64:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006f68:	e013      	b.n	8006f92 <UART_SetConfig+0x9fa>
 8006f6a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006f6e:	e010      	b.n	8006f92 <UART_SetConfig+0x9fa>
 8006f70:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <UART_SetConfig+0xa34>)
 8006f72:	e00e      	b.n	8006f92 <UART_SetConfig+0x9fa>
 8006f74:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <UART_SetConfig+0xa08>)
 8006f76:	e00c      	b.n	8006f92 <UART_SetConfig+0x9fa>
 8006f78:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <UART_SetConfig+0xa38>)
 8006f7a:	e00a      	b.n	8006f92 <UART_SetConfig+0x9fa>
 8006f7c:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <UART_SetConfig+0xa3c>)
 8006f7e:	e008      	b.n	8006f92 <UART_SetConfig+0x9fa>
 8006f80:	4b08      	ldr	r3, [pc, #32]	; (8006fa4 <UART_SetConfig+0xa0c>)
 8006f82:	e006      	b.n	8006f92 <UART_SetConfig+0x9fa>
 8006f84:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <UART_SetConfig+0xa40>)
 8006f86:	e004      	b.n	8006f92 <UART_SetConfig+0x9fa>
 8006f88:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <UART_SetConfig+0xa10>)
 8006f8a:	e002      	b.n	8006f92 <UART_SetConfig+0x9fa>
 8006f8c:	4b07      	ldr	r3, [pc, #28]	; (8006fac <UART_SetConfig+0xa14>)
 8006f8e:	e000      	b.n	8006f92 <UART_SetConfig+0x9fa>
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <UART_SetConfig+0xa18>)
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f94:	e07d      	b.n	8007092 <UART_SetConfig+0xafa>
 8006f96:	bf00      	nop
 8006f98:	58024400 	.word	0x58024400
 8006f9c:	03d09000 	.word	0x03d09000
 8006fa0:	0003d090 	.word	0x0003d090
 8006fa4:	0007a120 	.word	0x0007a120
 8006fa8:	000f4240 	.word	0x000f4240
 8006fac:	001e8480 	.word	0x001e8480
 8006fb0:	003d0900 	.word	0x003d0900
 8006fb4:	00516155 	.word	0x00516155
 8006fb8:	0061a800 	.word	0x0061a800
 8006fbc:	007a1200 	.word	0x007a1200
 8006fc0:	00a2c2aa 	.word	0x00a2c2aa
 8006fc4:	00f42400 	.word	0x00f42400
 8006fc8:	01e84800 	.word	0x01e84800
 8006fcc:	0001e848 	.word	0x0001e848
 8006fd0:	00051615 	.word	0x00051615
 8006fd4:	00061a80 	.word	0x00061a80
 8006fd8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d04e      	beq.n	8007082 <UART_SetConfig+0xaea>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d047      	beq.n	800707c <UART_SetConfig+0xae4>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d040      	beq.n	8007076 <UART_SetConfig+0xade>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d039      	beq.n	8007070 <UART_SetConfig+0xad8>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	2b04      	cmp	r3, #4
 8007002:	d032      	beq.n	800706a <UART_SetConfig+0xad2>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	2b05      	cmp	r3, #5
 800700a:	d02b      	beq.n	8007064 <UART_SetConfig+0xacc>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	2b06      	cmp	r3, #6
 8007012:	d024      	beq.n	800705e <UART_SetConfig+0xac6>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	2b07      	cmp	r3, #7
 800701a:	d01d      	beq.n	8007058 <UART_SetConfig+0xac0>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	2b08      	cmp	r3, #8
 8007022:	d016      	beq.n	8007052 <UART_SetConfig+0xaba>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	2b09      	cmp	r3, #9
 800702a:	d00f      	beq.n	800704c <UART_SetConfig+0xab4>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	2b0a      	cmp	r3, #10
 8007032:	d008      	beq.n	8007046 <UART_SetConfig+0xaae>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	2b0b      	cmp	r3, #11
 800703a:	d101      	bne.n	8007040 <UART_SetConfig+0xaa8>
 800703c:	2380      	movs	r3, #128	; 0x80
 800703e:	e022      	b.n	8007086 <UART_SetConfig+0xaee>
 8007040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007044:	e01f      	b.n	8007086 <UART_SetConfig+0xaee>
 8007046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800704a:	e01c      	b.n	8007086 <UART_SetConfig+0xaee>
 800704c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007050:	e019      	b.n	8007086 <UART_SetConfig+0xaee>
 8007052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007056:	e016      	b.n	8007086 <UART_SetConfig+0xaee>
 8007058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800705c:	e013      	b.n	8007086 <UART_SetConfig+0xaee>
 800705e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007062:	e010      	b.n	8007086 <UART_SetConfig+0xaee>
 8007064:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007068:	e00d      	b.n	8007086 <UART_SetConfig+0xaee>
 800706a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800706e:	e00a      	b.n	8007086 <UART_SetConfig+0xaee>
 8007070:	f241 5355 	movw	r3, #5461	; 0x1555
 8007074:	e007      	b.n	8007086 <UART_SetConfig+0xaee>
 8007076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800707a:	e004      	b.n	8007086 <UART_SetConfig+0xaee>
 800707c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007080:	e001      	b.n	8007086 <UART_SetConfig+0xaee>
 8007082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007088:	e003      	b.n	8007092 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8007090:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	2b00      	cmp	r3, #0
 8007096:	f001 83e4 	beq.w	8008862 <UART_SetConfig+0x22ca>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	4613      	mov	r3, r2
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	4413      	add	r3, r2
 80070a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d305      	bcc.n	80070b6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d904      	bls.n	80070c0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070bc:	f001 bbd1 	b.w	8008862 <UART_SetConfig+0x22ca>
      }
      else
      {
        switch (clocksource)
 80070c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	f000 8153 	beq.w	8007370 <UART_SetConfig+0xdd8>
 80070ca:	2b08      	cmp	r3, #8
 80070cc:	dc06      	bgt.n	80070dc <UART_SetConfig+0xb44>
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d00f      	beq.n	80070f2 <UART_SetConfig+0xb5a>
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	f000 80ab 	beq.w	800722e <UART_SetConfig+0xc96>
 80070d8:	f000 bc30 	b.w	800793c <UART_SetConfig+0x13a4>
 80070dc:	2b20      	cmp	r3, #32
 80070de:	f000 832d 	beq.w	800773c <UART_SetConfig+0x11a4>
 80070e2:	2b40      	cmp	r3, #64	; 0x40
 80070e4:	f000 83a5 	beq.w	8007832 <UART_SetConfig+0x129a>
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	f000 81e2 	beq.w	80074b2 <UART_SetConfig+0xf1a>
 80070ee:	f000 bc25 	b.w	800793c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070f2:	f7fd fa89 	bl	8004608 <HAL_RCCEx_GetD3PCLK1Freq>
 80070f6:	4603      	mov	r3, r0
 80070f8:	4618      	mov	r0, r3
 80070fa:	f04f 0100 	mov.w	r1, #0
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	2b00      	cmp	r3, #0
 8007104:	d067      	beq.n	80071d6 <UART_SetConfig+0xc3e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	2b01      	cmp	r3, #1
 800710c:	d05e      	beq.n	80071cc <UART_SetConfig+0xc34>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	2b02      	cmp	r3, #2
 8007114:	d055      	beq.n	80071c2 <UART_SetConfig+0xc2a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	2b03      	cmp	r3, #3
 800711c:	d04c      	beq.n	80071b8 <UART_SetConfig+0xc20>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b04      	cmp	r3, #4
 8007124:	d043      	beq.n	80071ae <UART_SetConfig+0xc16>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	2b05      	cmp	r3, #5
 800712c:	d03a      	beq.n	80071a4 <UART_SetConfig+0xc0c>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	2b06      	cmp	r3, #6
 8007134:	d031      	beq.n	800719a <UART_SetConfig+0xc02>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	2b07      	cmp	r3, #7
 800713c:	d028      	beq.n	8007190 <UART_SetConfig+0xbf8>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	2b08      	cmp	r3, #8
 8007144:	d01f      	beq.n	8007186 <UART_SetConfig+0xbee>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	2b09      	cmp	r3, #9
 800714c:	d016      	beq.n	800717c <UART_SetConfig+0xbe4>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	2b0a      	cmp	r3, #10
 8007154:	d00d      	beq.n	8007172 <UART_SetConfig+0xbda>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	2b0b      	cmp	r3, #11
 800715c:	d104      	bne.n	8007168 <UART_SetConfig+0xbd0>
 800715e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007162:	f04f 0400 	mov.w	r4, #0
 8007166:	e03a      	b.n	80071de <UART_SetConfig+0xc46>
 8007168:	f04f 0301 	mov.w	r3, #1
 800716c:	f04f 0400 	mov.w	r4, #0
 8007170:	e035      	b.n	80071de <UART_SetConfig+0xc46>
 8007172:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007176:	f04f 0400 	mov.w	r4, #0
 800717a:	e030      	b.n	80071de <UART_SetConfig+0xc46>
 800717c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007180:	f04f 0400 	mov.w	r4, #0
 8007184:	e02b      	b.n	80071de <UART_SetConfig+0xc46>
 8007186:	f04f 0320 	mov.w	r3, #32
 800718a:	f04f 0400 	mov.w	r4, #0
 800718e:	e026      	b.n	80071de <UART_SetConfig+0xc46>
 8007190:	f04f 0310 	mov.w	r3, #16
 8007194:	f04f 0400 	mov.w	r4, #0
 8007198:	e021      	b.n	80071de <UART_SetConfig+0xc46>
 800719a:	f04f 030c 	mov.w	r3, #12
 800719e:	f04f 0400 	mov.w	r4, #0
 80071a2:	e01c      	b.n	80071de <UART_SetConfig+0xc46>
 80071a4:	f04f 030a 	mov.w	r3, #10
 80071a8:	f04f 0400 	mov.w	r4, #0
 80071ac:	e017      	b.n	80071de <UART_SetConfig+0xc46>
 80071ae:	f04f 0308 	mov.w	r3, #8
 80071b2:	f04f 0400 	mov.w	r4, #0
 80071b6:	e012      	b.n	80071de <UART_SetConfig+0xc46>
 80071b8:	f04f 0306 	mov.w	r3, #6
 80071bc:	f04f 0400 	mov.w	r4, #0
 80071c0:	e00d      	b.n	80071de <UART_SetConfig+0xc46>
 80071c2:	f04f 0304 	mov.w	r3, #4
 80071c6:	f04f 0400 	mov.w	r4, #0
 80071ca:	e008      	b.n	80071de <UART_SetConfig+0xc46>
 80071cc:	f04f 0302 	mov.w	r3, #2
 80071d0:	f04f 0400 	mov.w	r4, #0
 80071d4:	e003      	b.n	80071de <UART_SetConfig+0xc46>
 80071d6:	f04f 0301 	mov.w	r3, #1
 80071da:	f04f 0400 	mov.w	r4, #0
 80071de:	461a      	mov	r2, r3
 80071e0:	4623      	mov	r3, r4
 80071e2:	f7f9 f881 	bl	80002e8 <__aeabi_uldivmod>
 80071e6:	4603      	mov	r3, r0
 80071e8:	460c      	mov	r4, r1
 80071ea:	4619      	mov	r1, r3
 80071ec:	4622      	mov	r2, r4
 80071ee:	f04f 0300 	mov.w	r3, #0
 80071f2:	f04f 0400 	mov.w	r4, #0
 80071f6:	0214      	lsls	r4, r2, #8
 80071f8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80071fc:	020b      	lsls	r3, r1, #8
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6852      	ldr	r2, [r2, #4]
 8007202:	0852      	lsrs	r2, r2, #1
 8007204:	4611      	mov	r1, r2
 8007206:	f04f 0200 	mov.w	r2, #0
 800720a:	eb13 0b01 	adds.w	fp, r3, r1
 800720e:	eb44 0c02 	adc.w	ip, r4, r2
 8007212:	4658      	mov	r0, fp
 8007214:	4661      	mov	r1, ip
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f04f 0400 	mov.w	r4, #0
 800721e:	461a      	mov	r2, r3
 8007220:	4623      	mov	r3, r4
 8007222:	f7f9 f861 	bl	80002e8 <__aeabi_uldivmod>
 8007226:	4603      	mov	r3, r0
 8007228:	460c      	mov	r4, r1
 800722a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800722c:	e38a      	b.n	8007944 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800722e:	f107 0314 	add.w	r3, r7, #20
 8007232:	4618      	mov	r0, r3
 8007234:	f7fd f9fe 	bl	8004634 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	4618      	mov	r0, r3
 800723c:	f04f 0100 	mov.w	r1, #0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	2b00      	cmp	r3, #0
 8007246:	d067      	beq.n	8007318 <UART_SetConfig+0xd80>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	2b01      	cmp	r3, #1
 800724e:	d05e      	beq.n	800730e <UART_SetConfig+0xd76>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	2b02      	cmp	r3, #2
 8007256:	d055      	beq.n	8007304 <UART_SetConfig+0xd6c>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	2b03      	cmp	r3, #3
 800725e:	d04c      	beq.n	80072fa <UART_SetConfig+0xd62>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	2b04      	cmp	r3, #4
 8007266:	d043      	beq.n	80072f0 <UART_SetConfig+0xd58>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	2b05      	cmp	r3, #5
 800726e:	d03a      	beq.n	80072e6 <UART_SetConfig+0xd4e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	2b06      	cmp	r3, #6
 8007276:	d031      	beq.n	80072dc <UART_SetConfig+0xd44>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	2b07      	cmp	r3, #7
 800727e:	d028      	beq.n	80072d2 <UART_SetConfig+0xd3a>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	2b08      	cmp	r3, #8
 8007286:	d01f      	beq.n	80072c8 <UART_SetConfig+0xd30>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	2b09      	cmp	r3, #9
 800728e:	d016      	beq.n	80072be <UART_SetConfig+0xd26>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	2b0a      	cmp	r3, #10
 8007296:	d00d      	beq.n	80072b4 <UART_SetConfig+0xd1c>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	2b0b      	cmp	r3, #11
 800729e:	d104      	bne.n	80072aa <UART_SetConfig+0xd12>
 80072a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072a4:	f04f 0400 	mov.w	r4, #0
 80072a8:	e03a      	b.n	8007320 <UART_SetConfig+0xd88>
 80072aa:	f04f 0301 	mov.w	r3, #1
 80072ae:	f04f 0400 	mov.w	r4, #0
 80072b2:	e035      	b.n	8007320 <UART_SetConfig+0xd88>
 80072b4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80072b8:	f04f 0400 	mov.w	r4, #0
 80072bc:	e030      	b.n	8007320 <UART_SetConfig+0xd88>
 80072be:	f04f 0340 	mov.w	r3, #64	; 0x40
 80072c2:	f04f 0400 	mov.w	r4, #0
 80072c6:	e02b      	b.n	8007320 <UART_SetConfig+0xd88>
 80072c8:	f04f 0320 	mov.w	r3, #32
 80072cc:	f04f 0400 	mov.w	r4, #0
 80072d0:	e026      	b.n	8007320 <UART_SetConfig+0xd88>
 80072d2:	f04f 0310 	mov.w	r3, #16
 80072d6:	f04f 0400 	mov.w	r4, #0
 80072da:	e021      	b.n	8007320 <UART_SetConfig+0xd88>
 80072dc:	f04f 030c 	mov.w	r3, #12
 80072e0:	f04f 0400 	mov.w	r4, #0
 80072e4:	e01c      	b.n	8007320 <UART_SetConfig+0xd88>
 80072e6:	f04f 030a 	mov.w	r3, #10
 80072ea:	f04f 0400 	mov.w	r4, #0
 80072ee:	e017      	b.n	8007320 <UART_SetConfig+0xd88>
 80072f0:	f04f 0308 	mov.w	r3, #8
 80072f4:	f04f 0400 	mov.w	r4, #0
 80072f8:	e012      	b.n	8007320 <UART_SetConfig+0xd88>
 80072fa:	f04f 0306 	mov.w	r3, #6
 80072fe:	f04f 0400 	mov.w	r4, #0
 8007302:	e00d      	b.n	8007320 <UART_SetConfig+0xd88>
 8007304:	f04f 0304 	mov.w	r3, #4
 8007308:	f04f 0400 	mov.w	r4, #0
 800730c:	e008      	b.n	8007320 <UART_SetConfig+0xd88>
 800730e:	f04f 0302 	mov.w	r3, #2
 8007312:	f04f 0400 	mov.w	r4, #0
 8007316:	e003      	b.n	8007320 <UART_SetConfig+0xd88>
 8007318:	f04f 0301 	mov.w	r3, #1
 800731c:	f04f 0400 	mov.w	r4, #0
 8007320:	461a      	mov	r2, r3
 8007322:	4623      	mov	r3, r4
 8007324:	f7f8 ffe0 	bl	80002e8 <__aeabi_uldivmod>
 8007328:	4603      	mov	r3, r0
 800732a:	460c      	mov	r4, r1
 800732c:	4619      	mov	r1, r3
 800732e:	4622      	mov	r2, r4
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	f04f 0400 	mov.w	r4, #0
 8007338:	0214      	lsls	r4, r2, #8
 800733a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800733e:	020b      	lsls	r3, r1, #8
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6852      	ldr	r2, [r2, #4]
 8007344:	0852      	lsrs	r2, r2, #1
 8007346:	4611      	mov	r1, r2
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	eb13 0b01 	adds.w	fp, r3, r1
 8007350:	eb44 0c02 	adc.w	ip, r4, r2
 8007354:	4658      	mov	r0, fp
 8007356:	4661      	mov	r1, ip
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f04f 0400 	mov.w	r4, #0
 8007360:	461a      	mov	r2, r3
 8007362:	4623      	mov	r3, r4
 8007364:	f7f8 ffc0 	bl	80002e8 <__aeabi_uldivmod>
 8007368:	4603      	mov	r3, r0
 800736a:	460c      	mov	r4, r1
 800736c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800736e:	e2e9      	b.n	8007944 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007370:	f107 0308 	add.w	r3, r7, #8
 8007374:	4618      	mov	r0, r3
 8007376:	f7fd faa9 	bl	80048cc <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4618      	mov	r0, r3
 800737e:	f04f 0100 	mov.w	r1, #0
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d067      	beq.n	800745a <UART_SetConfig+0xec2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	2b01      	cmp	r3, #1
 8007390:	d05e      	beq.n	8007450 <UART_SetConfig+0xeb8>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	2b02      	cmp	r3, #2
 8007398:	d055      	beq.n	8007446 <UART_SetConfig+0xeae>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d04c      	beq.n	800743c <UART_SetConfig+0xea4>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d043      	beq.n	8007432 <UART_SetConfig+0xe9a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	2b05      	cmp	r3, #5
 80073b0:	d03a      	beq.n	8007428 <UART_SetConfig+0xe90>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	2b06      	cmp	r3, #6
 80073b8:	d031      	beq.n	800741e <UART_SetConfig+0xe86>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	2b07      	cmp	r3, #7
 80073c0:	d028      	beq.n	8007414 <UART_SetConfig+0xe7c>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	d01f      	beq.n	800740a <UART_SetConfig+0xe72>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	d016      	beq.n	8007400 <UART_SetConfig+0xe68>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	2b0a      	cmp	r3, #10
 80073d8:	d00d      	beq.n	80073f6 <UART_SetConfig+0xe5e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	2b0b      	cmp	r3, #11
 80073e0:	d104      	bne.n	80073ec <UART_SetConfig+0xe54>
 80073e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073e6:	f04f 0400 	mov.w	r4, #0
 80073ea:	e03a      	b.n	8007462 <UART_SetConfig+0xeca>
 80073ec:	f04f 0301 	mov.w	r3, #1
 80073f0:	f04f 0400 	mov.w	r4, #0
 80073f4:	e035      	b.n	8007462 <UART_SetConfig+0xeca>
 80073f6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80073fa:	f04f 0400 	mov.w	r4, #0
 80073fe:	e030      	b.n	8007462 <UART_SetConfig+0xeca>
 8007400:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007404:	f04f 0400 	mov.w	r4, #0
 8007408:	e02b      	b.n	8007462 <UART_SetConfig+0xeca>
 800740a:	f04f 0320 	mov.w	r3, #32
 800740e:	f04f 0400 	mov.w	r4, #0
 8007412:	e026      	b.n	8007462 <UART_SetConfig+0xeca>
 8007414:	f04f 0310 	mov.w	r3, #16
 8007418:	f04f 0400 	mov.w	r4, #0
 800741c:	e021      	b.n	8007462 <UART_SetConfig+0xeca>
 800741e:	f04f 030c 	mov.w	r3, #12
 8007422:	f04f 0400 	mov.w	r4, #0
 8007426:	e01c      	b.n	8007462 <UART_SetConfig+0xeca>
 8007428:	f04f 030a 	mov.w	r3, #10
 800742c:	f04f 0400 	mov.w	r4, #0
 8007430:	e017      	b.n	8007462 <UART_SetConfig+0xeca>
 8007432:	f04f 0308 	mov.w	r3, #8
 8007436:	f04f 0400 	mov.w	r4, #0
 800743a:	e012      	b.n	8007462 <UART_SetConfig+0xeca>
 800743c:	f04f 0306 	mov.w	r3, #6
 8007440:	f04f 0400 	mov.w	r4, #0
 8007444:	e00d      	b.n	8007462 <UART_SetConfig+0xeca>
 8007446:	f04f 0304 	mov.w	r3, #4
 800744a:	f04f 0400 	mov.w	r4, #0
 800744e:	e008      	b.n	8007462 <UART_SetConfig+0xeca>
 8007450:	f04f 0302 	mov.w	r3, #2
 8007454:	f04f 0400 	mov.w	r4, #0
 8007458:	e003      	b.n	8007462 <UART_SetConfig+0xeca>
 800745a:	f04f 0301 	mov.w	r3, #1
 800745e:	f04f 0400 	mov.w	r4, #0
 8007462:	461a      	mov	r2, r3
 8007464:	4623      	mov	r3, r4
 8007466:	f7f8 ff3f 	bl	80002e8 <__aeabi_uldivmod>
 800746a:	4603      	mov	r3, r0
 800746c:	460c      	mov	r4, r1
 800746e:	4619      	mov	r1, r3
 8007470:	4622      	mov	r2, r4
 8007472:	f04f 0300 	mov.w	r3, #0
 8007476:	f04f 0400 	mov.w	r4, #0
 800747a:	0214      	lsls	r4, r2, #8
 800747c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007480:	020b      	lsls	r3, r1, #8
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6852      	ldr	r2, [r2, #4]
 8007486:	0852      	lsrs	r2, r2, #1
 8007488:	4611      	mov	r1, r2
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	eb13 0b01 	adds.w	fp, r3, r1
 8007492:	eb44 0c02 	adc.w	ip, r4, r2
 8007496:	4658      	mov	r0, fp
 8007498:	4661      	mov	r1, ip
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f04f 0400 	mov.w	r4, #0
 80074a2:	461a      	mov	r2, r3
 80074a4:	4623      	mov	r3, r4
 80074a6:	f7f8 ff1f 	bl	80002e8 <__aeabi_uldivmod>
 80074aa:	4603      	mov	r3, r0
 80074ac:	460c      	mov	r4, r1
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80074b0:	e248      	b.n	8007944 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074b2:	4b97      	ldr	r3, [pc, #604]	; (8007710 <UART_SetConfig+0x1178>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 80a3 	beq.w	8007606 <UART_SetConfig+0x106e>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074c0:	4b93      	ldr	r3, [pc, #588]	; (8007710 <UART_SetConfig+0x1178>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	08db      	lsrs	r3, r3, #3
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	4a92      	ldr	r2, [pc, #584]	; (8007714 <UART_SetConfig+0x117c>)
 80074cc:	fa22 f303 	lsr.w	r3, r2, r3
 80074d0:	4618      	mov	r0, r3
 80074d2:	f04f 0100 	mov.w	r1, #0
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d067      	beq.n	80075ae <UART_SetConfig+0x1016>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d05e      	beq.n	80075a4 <UART_SetConfig+0x100c>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d055      	beq.n	800759a <UART_SetConfig+0x1002>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d04c      	beq.n	8007590 <UART_SetConfig+0xff8>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d043      	beq.n	8007586 <UART_SetConfig+0xfee>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	2b05      	cmp	r3, #5
 8007504:	d03a      	beq.n	800757c <UART_SetConfig+0xfe4>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	2b06      	cmp	r3, #6
 800750c:	d031      	beq.n	8007572 <UART_SetConfig+0xfda>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	2b07      	cmp	r3, #7
 8007514:	d028      	beq.n	8007568 <UART_SetConfig+0xfd0>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	2b08      	cmp	r3, #8
 800751c:	d01f      	beq.n	800755e <UART_SetConfig+0xfc6>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	2b09      	cmp	r3, #9
 8007524:	d016      	beq.n	8007554 <UART_SetConfig+0xfbc>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	2b0a      	cmp	r3, #10
 800752c:	d00d      	beq.n	800754a <UART_SetConfig+0xfb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	2b0b      	cmp	r3, #11
 8007534:	d104      	bne.n	8007540 <UART_SetConfig+0xfa8>
 8007536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800753a:	f04f 0400 	mov.w	r4, #0
 800753e:	e03a      	b.n	80075b6 <UART_SetConfig+0x101e>
 8007540:	f04f 0301 	mov.w	r3, #1
 8007544:	f04f 0400 	mov.w	r4, #0
 8007548:	e035      	b.n	80075b6 <UART_SetConfig+0x101e>
 800754a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800754e:	f04f 0400 	mov.w	r4, #0
 8007552:	e030      	b.n	80075b6 <UART_SetConfig+0x101e>
 8007554:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007558:	f04f 0400 	mov.w	r4, #0
 800755c:	e02b      	b.n	80075b6 <UART_SetConfig+0x101e>
 800755e:	f04f 0320 	mov.w	r3, #32
 8007562:	f04f 0400 	mov.w	r4, #0
 8007566:	e026      	b.n	80075b6 <UART_SetConfig+0x101e>
 8007568:	f04f 0310 	mov.w	r3, #16
 800756c:	f04f 0400 	mov.w	r4, #0
 8007570:	e021      	b.n	80075b6 <UART_SetConfig+0x101e>
 8007572:	f04f 030c 	mov.w	r3, #12
 8007576:	f04f 0400 	mov.w	r4, #0
 800757a:	e01c      	b.n	80075b6 <UART_SetConfig+0x101e>
 800757c:	f04f 030a 	mov.w	r3, #10
 8007580:	f04f 0400 	mov.w	r4, #0
 8007584:	e017      	b.n	80075b6 <UART_SetConfig+0x101e>
 8007586:	f04f 0308 	mov.w	r3, #8
 800758a:	f04f 0400 	mov.w	r4, #0
 800758e:	e012      	b.n	80075b6 <UART_SetConfig+0x101e>
 8007590:	f04f 0306 	mov.w	r3, #6
 8007594:	f04f 0400 	mov.w	r4, #0
 8007598:	e00d      	b.n	80075b6 <UART_SetConfig+0x101e>
 800759a:	f04f 0304 	mov.w	r3, #4
 800759e:	f04f 0400 	mov.w	r4, #0
 80075a2:	e008      	b.n	80075b6 <UART_SetConfig+0x101e>
 80075a4:	f04f 0302 	mov.w	r3, #2
 80075a8:	f04f 0400 	mov.w	r4, #0
 80075ac:	e003      	b.n	80075b6 <UART_SetConfig+0x101e>
 80075ae:	f04f 0301 	mov.w	r3, #1
 80075b2:	f04f 0400 	mov.w	r4, #0
 80075b6:	461a      	mov	r2, r3
 80075b8:	4623      	mov	r3, r4
 80075ba:	f7f8 fe95 	bl	80002e8 <__aeabi_uldivmod>
 80075be:	4603      	mov	r3, r0
 80075c0:	460c      	mov	r4, r1
 80075c2:	4619      	mov	r1, r3
 80075c4:	4622      	mov	r2, r4
 80075c6:	f04f 0300 	mov.w	r3, #0
 80075ca:	f04f 0400 	mov.w	r4, #0
 80075ce:	0214      	lsls	r4, r2, #8
 80075d0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80075d4:	020b      	lsls	r3, r1, #8
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6852      	ldr	r2, [r2, #4]
 80075da:	0852      	lsrs	r2, r2, #1
 80075dc:	4611      	mov	r1, r2
 80075de:	f04f 0200 	mov.w	r2, #0
 80075e2:	eb13 0b01 	adds.w	fp, r3, r1
 80075e6:	eb44 0c02 	adc.w	ip, r4, r2
 80075ea:	4658      	mov	r0, fp
 80075ec:	4661      	mov	r1, ip
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f04f 0400 	mov.w	r4, #0
 80075f6:	461a      	mov	r2, r3
 80075f8:	4623      	mov	r3, r4
 80075fa:	f7f8 fe75 	bl	80002e8 <__aeabi_uldivmod>
 80075fe:	4603      	mov	r3, r0
 8007600:	460c      	mov	r4, r1
 8007602:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007604:	e19e      	b.n	8007944 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	2b00      	cmp	r3, #0
 800760c:	d05b      	beq.n	80076c6 <UART_SetConfig+0x112e>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	2b01      	cmp	r3, #1
 8007614:	d053      	beq.n	80076be <UART_SetConfig+0x1126>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	2b02      	cmp	r3, #2
 800761c:	d04b      	beq.n	80076b6 <UART_SetConfig+0x111e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	2b03      	cmp	r3, #3
 8007624:	d043      	beq.n	80076ae <UART_SetConfig+0x1116>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	2b04      	cmp	r3, #4
 800762c:	d03b      	beq.n	80076a6 <UART_SetConfig+0x110e>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	2b05      	cmp	r3, #5
 8007634:	d033      	beq.n	800769e <UART_SetConfig+0x1106>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	2b06      	cmp	r3, #6
 800763c:	d02b      	beq.n	8007696 <UART_SetConfig+0x10fe>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	2b07      	cmp	r3, #7
 8007644:	d023      	beq.n	800768e <UART_SetConfig+0x10f6>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	2b08      	cmp	r3, #8
 800764c:	d01b      	beq.n	8007686 <UART_SetConfig+0x10ee>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	2b09      	cmp	r3, #9
 8007654:	d013      	beq.n	800767e <UART_SetConfig+0x10e6>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	2b0a      	cmp	r3, #10
 800765c:	d00b      	beq.n	8007676 <UART_SetConfig+0x10de>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	2b0b      	cmp	r3, #11
 8007664:	d103      	bne.n	800766e <UART_SetConfig+0x10d6>
 8007666:	4b2b      	ldr	r3, [pc, #172]	; (8007714 <UART_SetConfig+0x117c>)
 8007668:	f04f 0400 	mov.w	r4, #0
 800766c:	e02e      	b.n	80076cc <UART_SetConfig+0x1134>
 800766e:	4b2a      	ldr	r3, [pc, #168]	; (8007718 <UART_SetConfig+0x1180>)
 8007670:	f04f 0403 	mov.w	r4, #3
 8007674:	e02a      	b.n	80076cc <UART_SetConfig+0x1134>
 8007676:	4b29      	ldr	r3, [pc, #164]	; (800771c <UART_SetConfig+0x1184>)
 8007678:	f04f 0400 	mov.w	r4, #0
 800767c:	e026      	b.n	80076cc <UART_SetConfig+0x1134>
 800767e:	4b28      	ldr	r3, [pc, #160]	; (8007720 <UART_SetConfig+0x1188>)
 8007680:	f04f 0400 	mov.w	r4, #0
 8007684:	e022      	b.n	80076cc <UART_SetConfig+0x1134>
 8007686:	4b27      	ldr	r3, [pc, #156]	; (8007724 <UART_SetConfig+0x118c>)
 8007688:	f04f 0400 	mov.w	r4, #0
 800768c:	e01e      	b.n	80076cc <UART_SetConfig+0x1134>
 800768e:	4b26      	ldr	r3, [pc, #152]	; (8007728 <UART_SetConfig+0x1190>)
 8007690:	f04f 0400 	mov.w	r4, #0
 8007694:	e01a      	b.n	80076cc <UART_SetConfig+0x1134>
 8007696:	a41a      	add	r4, pc, #104	; (adr r4, 8007700 <UART_SetConfig+0x1168>)
 8007698:	e9d4 3400 	ldrd	r3, r4, [r4]
 800769c:	e016      	b.n	80076cc <UART_SetConfig+0x1134>
 800769e:	4b23      	ldr	r3, [pc, #140]	; (800772c <UART_SetConfig+0x1194>)
 80076a0:	f04f 0400 	mov.w	r4, #0
 80076a4:	e012      	b.n	80076cc <UART_SetConfig+0x1134>
 80076a6:	4b22      	ldr	r3, [pc, #136]	; (8007730 <UART_SetConfig+0x1198>)
 80076a8:	f04f 0400 	mov.w	r4, #0
 80076ac:	e00e      	b.n	80076cc <UART_SetConfig+0x1134>
 80076ae:	a416      	add	r4, pc, #88	; (adr r4, 8007708 <UART_SetConfig+0x1170>)
 80076b0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80076b4:	e00a      	b.n	80076cc <UART_SetConfig+0x1134>
 80076b6:	4b1f      	ldr	r3, [pc, #124]	; (8007734 <UART_SetConfig+0x119c>)
 80076b8:	f04f 0400 	mov.w	r4, #0
 80076bc:	e006      	b.n	80076cc <UART_SetConfig+0x1134>
 80076be:	4b1e      	ldr	r3, [pc, #120]	; (8007738 <UART_SetConfig+0x11a0>)
 80076c0:	f04f 0401 	mov.w	r4, #1
 80076c4:	e002      	b.n	80076cc <UART_SetConfig+0x1134>
 80076c6:	4b14      	ldr	r3, [pc, #80]	; (8007718 <UART_SetConfig+0x1180>)
 80076c8:	f04f 0403 	mov.w	r4, #3
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6852      	ldr	r2, [r2, #4]
 80076d0:	0852      	lsrs	r2, r2, #1
 80076d2:	4611      	mov	r1, r2
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	eb13 0b01 	adds.w	fp, r3, r1
 80076dc:	eb44 0c02 	adc.w	ip, r4, r2
 80076e0:	4658      	mov	r0, fp
 80076e2:	4661      	mov	r1, ip
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f04f 0400 	mov.w	r4, #0
 80076ec:	461a      	mov	r2, r3
 80076ee:	4623      	mov	r3, r4
 80076f0:	f7f8 fdfa 	bl	80002e8 <__aeabi_uldivmod>
 80076f4:	4603      	mov	r3, r0
 80076f6:	460c      	mov	r4, r1
 80076f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80076fa:	e123      	b.n	8007944 <UART_SetConfig+0x13ac>
 80076fc:	f3af 8000 	nop.w
 8007700:	51615500 	.word	0x51615500
 8007704:	00000000 	.word	0x00000000
 8007708:	a2c2aa00 	.word	0xa2c2aa00
 800770c:	00000000 	.word	0x00000000
 8007710:	58024400 	.word	0x58024400
 8007714:	03d09000 	.word	0x03d09000
 8007718:	d0900000 	.word	0xd0900000
 800771c:	07a12000 	.word	0x07a12000
 8007720:	0f424000 	.word	0x0f424000
 8007724:	1e848000 	.word	0x1e848000
 8007728:	3d090000 	.word	0x3d090000
 800772c:	61a80000 	.word	0x61a80000
 8007730:	7a120000 	.word	0x7a120000
 8007734:	f4240000 	.word	0xf4240000
 8007738:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	2b00      	cmp	r3, #0
 8007742:	d05b      	beq.n	80077fc <UART_SetConfig+0x1264>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	2b01      	cmp	r3, #1
 800774a:	d053      	beq.n	80077f4 <UART_SetConfig+0x125c>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b02      	cmp	r3, #2
 8007752:	d04b      	beq.n	80077ec <UART_SetConfig+0x1254>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	2b03      	cmp	r3, #3
 800775a:	d043      	beq.n	80077e4 <UART_SetConfig+0x124c>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	2b04      	cmp	r3, #4
 8007762:	d03b      	beq.n	80077dc <UART_SetConfig+0x1244>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	2b05      	cmp	r3, #5
 800776a:	d033      	beq.n	80077d4 <UART_SetConfig+0x123c>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	2b06      	cmp	r3, #6
 8007772:	d02b      	beq.n	80077cc <UART_SetConfig+0x1234>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2b07      	cmp	r3, #7
 800777a:	d023      	beq.n	80077c4 <UART_SetConfig+0x122c>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	2b08      	cmp	r3, #8
 8007782:	d01b      	beq.n	80077bc <UART_SetConfig+0x1224>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	2b09      	cmp	r3, #9
 800778a:	d013      	beq.n	80077b4 <UART_SetConfig+0x121c>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2b0a      	cmp	r3, #10
 8007792:	d00b      	beq.n	80077ac <UART_SetConfig+0x1214>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2b0b      	cmp	r3, #11
 800779a:	d103      	bne.n	80077a4 <UART_SetConfig+0x120c>
 800779c:	4bc0      	ldr	r3, [pc, #768]	; (8007aa0 <UART_SetConfig+0x1508>)
 800779e:	f04f 0400 	mov.w	r4, #0
 80077a2:	e02e      	b.n	8007802 <UART_SetConfig+0x126a>
 80077a4:	4bbf      	ldr	r3, [pc, #764]	; (8007aa4 <UART_SetConfig+0x150c>)
 80077a6:	f04f 0400 	mov.w	r4, #0
 80077aa:	e02a      	b.n	8007802 <UART_SetConfig+0x126a>
 80077ac:	4bbe      	ldr	r3, [pc, #760]	; (8007aa8 <UART_SetConfig+0x1510>)
 80077ae:	f04f 0400 	mov.w	r4, #0
 80077b2:	e026      	b.n	8007802 <UART_SetConfig+0x126a>
 80077b4:	4bbd      	ldr	r3, [pc, #756]	; (8007aac <UART_SetConfig+0x1514>)
 80077b6:	f04f 0400 	mov.w	r4, #0
 80077ba:	e022      	b.n	8007802 <UART_SetConfig+0x126a>
 80077bc:	4bbc      	ldr	r3, [pc, #752]	; (8007ab0 <UART_SetConfig+0x1518>)
 80077be:	f04f 0400 	mov.w	r4, #0
 80077c2:	e01e      	b.n	8007802 <UART_SetConfig+0x126a>
 80077c4:	4bbb      	ldr	r3, [pc, #748]	; (8007ab4 <UART_SetConfig+0x151c>)
 80077c6:	f04f 0400 	mov.w	r4, #0
 80077ca:	e01a      	b.n	8007802 <UART_SetConfig+0x126a>
 80077cc:	a4b0      	add	r4, pc, #704	; (adr r4, 8007a90 <UART_SetConfig+0x14f8>)
 80077ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80077d2:	e016      	b.n	8007802 <UART_SetConfig+0x126a>
 80077d4:	4bb8      	ldr	r3, [pc, #736]	; (8007ab8 <UART_SetConfig+0x1520>)
 80077d6:	f04f 0400 	mov.w	r4, #0
 80077da:	e012      	b.n	8007802 <UART_SetConfig+0x126a>
 80077dc:	4bb7      	ldr	r3, [pc, #732]	; (8007abc <UART_SetConfig+0x1524>)
 80077de:	f04f 0400 	mov.w	r4, #0
 80077e2:	e00e      	b.n	8007802 <UART_SetConfig+0x126a>
 80077e4:	a4ac      	add	r4, pc, #688	; (adr r4, 8007a98 <UART_SetConfig+0x1500>)
 80077e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80077ea:	e00a      	b.n	8007802 <UART_SetConfig+0x126a>
 80077ec:	4bb4      	ldr	r3, [pc, #720]	; (8007ac0 <UART_SetConfig+0x1528>)
 80077ee:	f04f 0400 	mov.w	r4, #0
 80077f2:	e006      	b.n	8007802 <UART_SetConfig+0x126a>
 80077f4:	4bb3      	ldr	r3, [pc, #716]	; (8007ac4 <UART_SetConfig+0x152c>)
 80077f6:	f04f 0400 	mov.w	r4, #0
 80077fa:	e002      	b.n	8007802 <UART_SetConfig+0x126a>
 80077fc:	4ba9      	ldr	r3, [pc, #676]	; (8007aa4 <UART_SetConfig+0x150c>)
 80077fe:	f04f 0400 	mov.w	r4, #0
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6852      	ldr	r2, [r2, #4]
 8007806:	0852      	lsrs	r2, r2, #1
 8007808:	4611      	mov	r1, r2
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	eb13 0b01 	adds.w	fp, r3, r1
 8007812:	eb44 0c02 	adc.w	ip, r4, r2
 8007816:	4658      	mov	r0, fp
 8007818:	4661      	mov	r1, ip
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f04f 0400 	mov.w	r4, #0
 8007822:	461a      	mov	r2, r3
 8007824:	4623      	mov	r3, r4
 8007826:	f7f8 fd5f 	bl	80002e8 <__aeabi_uldivmod>
 800782a:	4603      	mov	r3, r0
 800782c:	460c      	mov	r4, r1
 800782e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8007830:	e088      	b.n	8007944 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	2b00      	cmp	r3, #0
 8007838:	d064      	beq.n	8007904 <UART_SetConfig+0x136c>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	2b01      	cmp	r3, #1
 8007840:	d05b      	beq.n	80078fa <UART_SetConfig+0x1362>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	2b02      	cmp	r3, #2
 8007848:	d052      	beq.n	80078f0 <UART_SetConfig+0x1358>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	2b03      	cmp	r3, #3
 8007850:	d04a      	beq.n	80078e8 <UART_SetConfig+0x1350>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	2b04      	cmp	r3, #4
 8007858:	d041      	beq.n	80078de <UART_SetConfig+0x1346>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	2b05      	cmp	r3, #5
 8007860:	d039      	beq.n	80078d6 <UART_SetConfig+0x133e>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	2b06      	cmp	r3, #6
 8007868:	d031      	beq.n	80078ce <UART_SetConfig+0x1336>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	2b07      	cmp	r3, #7
 8007870:	d028      	beq.n	80078c4 <UART_SetConfig+0x132c>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	2b08      	cmp	r3, #8
 8007878:	d01f      	beq.n	80078ba <UART_SetConfig+0x1322>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	2b09      	cmp	r3, #9
 8007880:	d016      	beq.n	80078b0 <UART_SetConfig+0x1318>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	2b0a      	cmp	r3, #10
 8007888:	d00d      	beq.n	80078a6 <UART_SetConfig+0x130e>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	2b0b      	cmp	r3, #11
 8007890:	d104      	bne.n	800789c <UART_SetConfig+0x1304>
 8007892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007896:	f04f 0400 	mov.w	r4, #0
 800789a:	e037      	b.n	800790c <UART_SetConfig+0x1374>
 800789c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80078a0:	f04f 0400 	mov.w	r4, #0
 80078a4:	e032      	b.n	800790c <UART_SetConfig+0x1374>
 80078a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078aa:	f04f 0400 	mov.w	r4, #0
 80078ae:	e02d      	b.n	800790c <UART_SetConfig+0x1374>
 80078b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078b4:	f04f 0400 	mov.w	r4, #0
 80078b8:	e028      	b.n	800790c <UART_SetConfig+0x1374>
 80078ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80078be:	f04f 0400 	mov.w	r4, #0
 80078c2:	e023      	b.n	800790c <UART_SetConfig+0x1374>
 80078c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80078c8:	f04f 0400 	mov.w	r4, #0
 80078cc:	e01e      	b.n	800790c <UART_SetConfig+0x1374>
 80078ce:	4b7e      	ldr	r3, [pc, #504]	; (8007ac8 <UART_SetConfig+0x1530>)
 80078d0:	f04f 0400 	mov.w	r4, #0
 80078d4:	e01a      	b.n	800790c <UART_SetConfig+0x1374>
 80078d6:	4b7d      	ldr	r3, [pc, #500]	; (8007acc <UART_SetConfig+0x1534>)
 80078d8:	f04f 0400 	mov.w	r4, #0
 80078dc:	e016      	b.n	800790c <UART_SetConfig+0x1374>
 80078de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80078e2:	f04f 0400 	mov.w	r4, #0
 80078e6:	e011      	b.n	800790c <UART_SetConfig+0x1374>
 80078e8:	4b79      	ldr	r3, [pc, #484]	; (8007ad0 <UART_SetConfig+0x1538>)
 80078ea:	f04f 0400 	mov.w	r4, #0
 80078ee:	e00d      	b.n	800790c <UART_SetConfig+0x1374>
 80078f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078f4:	f04f 0400 	mov.w	r4, #0
 80078f8:	e008      	b.n	800790c <UART_SetConfig+0x1374>
 80078fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80078fe:	f04f 0400 	mov.w	r4, #0
 8007902:	e003      	b.n	800790c <UART_SetConfig+0x1374>
 8007904:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007908:	f04f 0400 	mov.w	r4, #0
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	6852      	ldr	r2, [r2, #4]
 8007910:	0852      	lsrs	r2, r2, #1
 8007912:	4611      	mov	r1, r2
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	eb13 0b01 	adds.w	fp, r3, r1
 800791c:	eb44 0c02 	adc.w	ip, r4, r2
 8007920:	4658      	mov	r0, fp
 8007922:	4661      	mov	r1, ip
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f04f 0400 	mov.w	r4, #0
 800792c:	461a      	mov	r2, r3
 800792e:	4623      	mov	r3, r4
 8007930:	f7f8 fcda 	bl	80002e8 <__aeabi_uldivmod>
 8007934:	4603      	mov	r3, r0
 8007936:	460c      	mov	r4, r1
 8007938:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800793a:	e003      	b.n	8007944 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8007942:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800794a:	d309      	bcc.n	8007960 <UART_SetConfig+0x13c8>
 800794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007952:	d205      	bcs.n	8007960 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800795a:	60da      	str	r2, [r3, #12]
 800795c:	f000 bf81 	b.w	8008862 <UART_SetConfig+0x22ca>
        }
        else
        {
          ret = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007966:	f000 bf7c 	b.w	8008862 <UART_SetConfig+0x22ca>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007972:	f040 83d8 	bne.w	8008126 <UART_SetConfig+0x1b8e>
  {
    switch (clocksource)
 8007976:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	f200 83b1 	bhi.w	80080e2 <UART_SetConfig+0x1b4a>
 8007980:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <UART_SetConfig+0x13f0>)
 8007982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007986:	bf00      	nop
 8007988:	08007ad5 	.word	0x08007ad5
 800798c:	08007b8b 	.word	0x08007b8b
 8007990:	080080e3 	.word	0x080080e3
 8007994:	080080e3 	.word	0x080080e3
 8007998:	08007c41 	.word	0x08007c41
 800799c:	080080e3 	.word	0x080080e3
 80079a0:	080080e3 	.word	0x080080e3
 80079a4:	080080e3 	.word	0x080080e3
 80079a8:	08007cfd 	.word	0x08007cfd
 80079ac:	080080e3 	.word	0x080080e3
 80079b0:	080080e3 	.word	0x080080e3
 80079b4:	080080e3 	.word	0x080080e3
 80079b8:	080080e3 	.word	0x080080e3
 80079bc:	080080e3 	.word	0x080080e3
 80079c0:	080080e3 	.word	0x080080e3
 80079c4:	080080e3 	.word	0x080080e3
 80079c8:	08007db9 	.word	0x08007db9
 80079cc:	080080e3 	.word	0x080080e3
 80079d0:	080080e3 	.word	0x080080e3
 80079d4:	080080e3 	.word	0x080080e3
 80079d8:	080080e3 	.word	0x080080e3
 80079dc:	080080e3 	.word	0x080080e3
 80079e0:	080080e3 	.word	0x080080e3
 80079e4:	080080e3 	.word	0x080080e3
 80079e8:	080080e3 	.word	0x080080e3
 80079ec:	080080e3 	.word	0x080080e3
 80079f0:	080080e3 	.word	0x080080e3
 80079f4:	080080e3 	.word	0x080080e3
 80079f8:	080080e3 	.word	0x080080e3
 80079fc:	080080e3 	.word	0x080080e3
 8007a00:	080080e3 	.word	0x080080e3
 8007a04:	080080e3 	.word	0x080080e3
 8007a08:	08007f2b 	.word	0x08007f2b
 8007a0c:	080080e3 	.word	0x080080e3
 8007a10:	080080e3 	.word	0x080080e3
 8007a14:	080080e3 	.word	0x080080e3
 8007a18:	080080e3 	.word	0x080080e3
 8007a1c:	080080e3 	.word	0x080080e3
 8007a20:	080080e3 	.word	0x080080e3
 8007a24:	080080e3 	.word	0x080080e3
 8007a28:	080080e3 	.word	0x080080e3
 8007a2c:	080080e3 	.word	0x080080e3
 8007a30:	080080e3 	.word	0x080080e3
 8007a34:	080080e3 	.word	0x080080e3
 8007a38:	080080e3 	.word	0x080080e3
 8007a3c:	080080e3 	.word	0x080080e3
 8007a40:	080080e3 	.word	0x080080e3
 8007a44:	080080e3 	.word	0x080080e3
 8007a48:	080080e3 	.word	0x080080e3
 8007a4c:	080080e3 	.word	0x080080e3
 8007a50:	080080e3 	.word	0x080080e3
 8007a54:	080080e3 	.word	0x080080e3
 8007a58:	080080e3 	.word	0x080080e3
 8007a5c:	080080e3 	.word	0x080080e3
 8007a60:	080080e3 	.word	0x080080e3
 8007a64:	080080e3 	.word	0x080080e3
 8007a68:	080080e3 	.word	0x080080e3
 8007a6c:	080080e3 	.word	0x080080e3
 8007a70:	080080e3 	.word	0x080080e3
 8007a74:	080080e3 	.word	0x080080e3
 8007a78:	080080e3 	.word	0x080080e3
 8007a7c:	080080e3 	.word	0x080080e3
 8007a80:	080080e3 	.word	0x080080e3
 8007a84:	080080e3 	.word	0x080080e3
 8007a88:	08008021 	.word	0x08008021
 8007a8c:	f3af 8000 	nop.w
 8007a90:	05161500 	.word	0x05161500
 8007a94:	00000000 	.word	0x00000000
 8007a98:	0a2c2a00 	.word	0x0a2c2a00
 8007a9c:	00000000 	.word	0x00000000
 8007aa0:	003d0900 	.word	0x003d0900
 8007aa4:	3d090000 	.word	0x3d090000
 8007aa8:	007a1200 	.word	0x007a1200
 8007aac:	00f42400 	.word	0x00f42400
 8007ab0:	01e84800 	.word	0x01e84800
 8007ab4:	03d09000 	.word	0x03d09000
 8007ab8:	061a8000 	.word	0x061a8000
 8007abc:	07a12000 	.word	0x07a12000
 8007ac0:	0f424000 	.word	0x0f424000
 8007ac4:	1e848000 	.word	0x1e848000
 8007ac8:	000aaa00 	.word	0x000aaa00
 8007acc:	000ccc00 	.word	0x000ccc00
 8007ad0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad4:	f7fb fc6a 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d044      	beq.n	8007b6c <UART_SetConfig+0x15d4>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d03e      	beq.n	8007b68 <UART_SetConfig+0x15d0>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d038      	beq.n	8007b64 <UART_SetConfig+0x15cc>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d032      	beq.n	8007b60 <UART_SetConfig+0x15c8>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d02c      	beq.n	8007b5c <UART_SetConfig+0x15c4>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	2b05      	cmp	r3, #5
 8007b08:	d026      	beq.n	8007b58 <UART_SetConfig+0x15c0>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	2b06      	cmp	r3, #6
 8007b10:	d020      	beq.n	8007b54 <UART_SetConfig+0x15bc>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	2b07      	cmp	r3, #7
 8007b18:	d01a      	beq.n	8007b50 <UART_SetConfig+0x15b8>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	2b08      	cmp	r3, #8
 8007b20:	d014      	beq.n	8007b4c <UART_SetConfig+0x15b4>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	2b09      	cmp	r3, #9
 8007b28:	d00e      	beq.n	8007b48 <UART_SetConfig+0x15b0>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	2b0a      	cmp	r3, #10
 8007b30:	d008      	beq.n	8007b44 <UART_SetConfig+0x15ac>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	2b0b      	cmp	r3, #11
 8007b38:	d102      	bne.n	8007b40 <UART_SetConfig+0x15a8>
 8007b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b3e:	e016      	b.n	8007b6e <UART_SetConfig+0x15d6>
 8007b40:	2301      	movs	r3, #1
 8007b42:	e014      	b.n	8007b6e <UART_SetConfig+0x15d6>
 8007b44:	2380      	movs	r3, #128	; 0x80
 8007b46:	e012      	b.n	8007b6e <UART_SetConfig+0x15d6>
 8007b48:	2340      	movs	r3, #64	; 0x40
 8007b4a:	e010      	b.n	8007b6e <UART_SetConfig+0x15d6>
 8007b4c:	2320      	movs	r3, #32
 8007b4e:	e00e      	b.n	8007b6e <UART_SetConfig+0x15d6>
 8007b50:	2310      	movs	r3, #16
 8007b52:	e00c      	b.n	8007b6e <UART_SetConfig+0x15d6>
 8007b54:	230c      	movs	r3, #12
 8007b56:	e00a      	b.n	8007b6e <UART_SetConfig+0x15d6>
 8007b58:	230a      	movs	r3, #10
 8007b5a:	e008      	b.n	8007b6e <UART_SetConfig+0x15d6>
 8007b5c:	2308      	movs	r3, #8
 8007b5e:	e006      	b.n	8007b6e <UART_SetConfig+0x15d6>
 8007b60:	2306      	movs	r3, #6
 8007b62:	e004      	b.n	8007b6e <UART_SetConfig+0x15d6>
 8007b64:	2304      	movs	r3, #4
 8007b66:	e002      	b.n	8007b6e <UART_SetConfig+0x15d6>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e000      	b.n	8007b6e <UART_SetConfig+0x15d6>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b72:	005a      	lsls	r2, r3, #1
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	085b      	lsrs	r3, r3, #1
 8007b7a:	441a      	add	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b88:	e2af      	b.n	80080ea <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b8a:	f7fb fc25 	bl	80033d8 <HAL_RCC_GetPCLK2Freq>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d044      	beq.n	8007c22 <UART_SetConfig+0x168a>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d03e      	beq.n	8007c1e <UART_SetConfig+0x1686>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d038      	beq.n	8007c1a <UART_SetConfig+0x1682>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d032      	beq.n	8007c16 <UART_SetConfig+0x167e>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d02c      	beq.n	8007c12 <UART_SetConfig+0x167a>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	2b05      	cmp	r3, #5
 8007bbe:	d026      	beq.n	8007c0e <UART_SetConfig+0x1676>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	2b06      	cmp	r3, #6
 8007bc6:	d020      	beq.n	8007c0a <UART_SetConfig+0x1672>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	2b07      	cmp	r3, #7
 8007bce:	d01a      	beq.n	8007c06 <UART_SetConfig+0x166e>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d014      	beq.n	8007c02 <UART_SetConfig+0x166a>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	2b09      	cmp	r3, #9
 8007bde:	d00e      	beq.n	8007bfe <UART_SetConfig+0x1666>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	2b0a      	cmp	r3, #10
 8007be6:	d008      	beq.n	8007bfa <UART_SetConfig+0x1662>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	2b0b      	cmp	r3, #11
 8007bee:	d102      	bne.n	8007bf6 <UART_SetConfig+0x165e>
 8007bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bf4:	e016      	b.n	8007c24 <UART_SetConfig+0x168c>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e014      	b.n	8007c24 <UART_SetConfig+0x168c>
 8007bfa:	2380      	movs	r3, #128	; 0x80
 8007bfc:	e012      	b.n	8007c24 <UART_SetConfig+0x168c>
 8007bfe:	2340      	movs	r3, #64	; 0x40
 8007c00:	e010      	b.n	8007c24 <UART_SetConfig+0x168c>
 8007c02:	2320      	movs	r3, #32
 8007c04:	e00e      	b.n	8007c24 <UART_SetConfig+0x168c>
 8007c06:	2310      	movs	r3, #16
 8007c08:	e00c      	b.n	8007c24 <UART_SetConfig+0x168c>
 8007c0a:	230c      	movs	r3, #12
 8007c0c:	e00a      	b.n	8007c24 <UART_SetConfig+0x168c>
 8007c0e:	230a      	movs	r3, #10
 8007c10:	e008      	b.n	8007c24 <UART_SetConfig+0x168c>
 8007c12:	2308      	movs	r3, #8
 8007c14:	e006      	b.n	8007c24 <UART_SetConfig+0x168c>
 8007c16:	2306      	movs	r3, #6
 8007c18:	e004      	b.n	8007c24 <UART_SetConfig+0x168c>
 8007c1a:	2304      	movs	r3, #4
 8007c1c:	e002      	b.n	8007c24 <UART_SetConfig+0x168c>
 8007c1e:	2302      	movs	r3, #2
 8007c20:	e000      	b.n	8007c24 <UART_SetConfig+0x168c>
 8007c22:	2301      	movs	r3, #1
 8007c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c28:	005a      	lsls	r2, r3, #1
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	085b      	lsrs	r3, r3, #1
 8007c30:	441a      	add	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c3e:	e254      	b.n	80080ea <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c40:	f107 0314 	add.w	r3, r7, #20
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fc fcf5 	bl	8004634 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c4a:	69ba      	ldr	r2, [r7, #24]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d044      	beq.n	8007cde <UART_SetConfig+0x1746>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d03e      	beq.n	8007cda <UART_SetConfig+0x1742>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d038      	beq.n	8007cd6 <UART_SetConfig+0x173e>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d032      	beq.n	8007cd2 <UART_SetConfig+0x173a>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d02c      	beq.n	8007cce <UART_SetConfig+0x1736>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	2b05      	cmp	r3, #5
 8007c7a:	d026      	beq.n	8007cca <UART_SetConfig+0x1732>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	2b06      	cmp	r3, #6
 8007c82:	d020      	beq.n	8007cc6 <UART_SetConfig+0x172e>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	2b07      	cmp	r3, #7
 8007c8a:	d01a      	beq.n	8007cc2 <UART_SetConfig+0x172a>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d014      	beq.n	8007cbe <UART_SetConfig+0x1726>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	2b09      	cmp	r3, #9
 8007c9a:	d00e      	beq.n	8007cba <UART_SetConfig+0x1722>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	2b0a      	cmp	r3, #10
 8007ca2:	d008      	beq.n	8007cb6 <UART_SetConfig+0x171e>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	2b0b      	cmp	r3, #11
 8007caa:	d102      	bne.n	8007cb2 <UART_SetConfig+0x171a>
 8007cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cb0:	e016      	b.n	8007ce0 <UART_SetConfig+0x1748>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e014      	b.n	8007ce0 <UART_SetConfig+0x1748>
 8007cb6:	2380      	movs	r3, #128	; 0x80
 8007cb8:	e012      	b.n	8007ce0 <UART_SetConfig+0x1748>
 8007cba:	2340      	movs	r3, #64	; 0x40
 8007cbc:	e010      	b.n	8007ce0 <UART_SetConfig+0x1748>
 8007cbe:	2320      	movs	r3, #32
 8007cc0:	e00e      	b.n	8007ce0 <UART_SetConfig+0x1748>
 8007cc2:	2310      	movs	r3, #16
 8007cc4:	e00c      	b.n	8007ce0 <UART_SetConfig+0x1748>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	e00a      	b.n	8007ce0 <UART_SetConfig+0x1748>
 8007cca:	230a      	movs	r3, #10
 8007ccc:	e008      	b.n	8007ce0 <UART_SetConfig+0x1748>
 8007cce:	2308      	movs	r3, #8
 8007cd0:	e006      	b.n	8007ce0 <UART_SetConfig+0x1748>
 8007cd2:	2306      	movs	r3, #6
 8007cd4:	e004      	b.n	8007ce0 <UART_SetConfig+0x1748>
 8007cd6:	2304      	movs	r3, #4
 8007cd8:	e002      	b.n	8007ce0 <UART_SetConfig+0x1748>
 8007cda:	2302      	movs	r3, #2
 8007cdc:	e000      	b.n	8007ce0 <UART_SetConfig+0x1748>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce4:	005a      	lsls	r2, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	085b      	lsrs	r3, r3, #1
 8007cec:	441a      	add	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cfa:	e1f6      	b.n	80080ea <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cfc:	f107 0308 	add.w	r3, r7, #8
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fc fde3 	bl	80048cc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d044      	beq.n	8007d9a <UART_SetConfig+0x1802>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d03e      	beq.n	8007d96 <UART_SetConfig+0x17fe>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d038      	beq.n	8007d92 <UART_SetConfig+0x17fa>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d032      	beq.n	8007d8e <UART_SetConfig+0x17f6>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d02c      	beq.n	8007d8a <UART_SetConfig+0x17f2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	2b05      	cmp	r3, #5
 8007d36:	d026      	beq.n	8007d86 <UART_SetConfig+0x17ee>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	2b06      	cmp	r3, #6
 8007d3e:	d020      	beq.n	8007d82 <UART_SetConfig+0x17ea>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	2b07      	cmp	r3, #7
 8007d46:	d01a      	beq.n	8007d7e <UART_SetConfig+0x17e6>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d014      	beq.n	8007d7a <UART_SetConfig+0x17e2>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	2b09      	cmp	r3, #9
 8007d56:	d00e      	beq.n	8007d76 <UART_SetConfig+0x17de>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2b0a      	cmp	r3, #10
 8007d5e:	d008      	beq.n	8007d72 <UART_SetConfig+0x17da>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	2b0b      	cmp	r3, #11
 8007d66:	d102      	bne.n	8007d6e <UART_SetConfig+0x17d6>
 8007d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d6c:	e016      	b.n	8007d9c <UART_SetConfig+0x1804>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e014      	b.n	8007d9c <UART_SetConfig+0x1804>
 8007d72:	2380      	movs	r3, #128	; 0x80
 8007d74:	e012      	b.n	8007d9c <UART_SetConfig+0x1804>
 8007d76:	2340      	movs	r3, #64	; 0x40
 8007d78:	e010      	b.n	8007d9c <UART_SetConfig+0x1804>
 8007d7a:	2320      	movs	r3, #32
 8007d7c:	e00e      	b.n	8007d9c <UART_SetConfig+0x1804>
 8007d7e:	2310      	movs	r3, #16
 8007d80:	e00c      	b.n	8007d9c <UART_SetConfig+0x1804>
 8007d82:	230c      	movs	r3, #12
 8007d84:	e00a      	b.n	8007d9c <UART_SetConfig+0x1804>
 8007d86:	230a      	movs	r3, #10
 8007d88:	e008      	b.n	8007d9c <UART_SetConfig+0x1804>
 8007d8a:	2308      	movs	r3, #8
 8007d8c:	e006      	b.n	8007d9c <UART_SetConfig+0x1804>
 8007d8e:	2306      	movs	r3, #6
 8007d90:	e004      	b.n	8007d9c <UART_SetConfig+0x1804>
 8007d92:	2304      	movs	r3, #4
 8007d94:	e002      	b.n	8007d9c <UART_SetConfig+0x1804>
 8007d96:	2302      	movs	r3, #2
 8007d98:	e000      	b.n	8007d9c <UART_SetConfig+0x1804>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da0:	005a      	lsls	r2, r3, #1
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	085b      	lsrs	r3, r3, #1
 8007da8:	441a      	add	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007db6:	e198      	b.n	80080ea <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007db8:	4b87      	ldr	r3, [pc, #540]	; (8007fd8 <UART_SetConfig+0x1a40>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0320 	and.w	r3, r3, #32
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d05e      	beq.n	8007e82 <UART_SetConfig+0x18ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dc4:	4b84      	ldr	r3, [pc, #528]	; (8007fd8 <UART_SetConfig+0x1a40>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	08db      	lsrs	r3, r3, #3
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	4a83      	ldr	r2, [pc, #524]	; (8007fdc <UART_SetConfig+0x1a44>)
 8007dd0:	40da      	lsrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d044      	beq.n	8007e64 <UART_SetConfig+0x18cc>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d03e      	beq.n	8007e60 <UART_SetConfig+0x18c8>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d038      	beq.n	8007e5c <UART_SetConfig+0x18c4>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d032      	beq.n	8007e58 <UART_SetConfig+0x18c0>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d02c      	beq.n	8007e54 <UART_SetConfig+0x18bc>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	2b05      	cmp	r3, #5
 8007e00:	d026      	beq.n	8007e50 <UART_SetConfig+0x18b8>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	2b06      	cmp	r3, #6
 8007e08:	d020      	beq.n	8007e4c <UART_SetConfig+0x18b4>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	2b07      	cmp	r3, #7
 8007e10:	d01a      	beq.n	8007e48 <UART_SetConfig+0x18b0>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	d014      	beq.n	8007e44 <UART_SetConfig+0x18ac>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	2b09      	cmp	r3, #9
 8007e20:	d00e      	beq.n	8007e40 <UART_SetConfig+0x18a8>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	2b0a      	cmp	r3, #10
 8007e28:	d008      	beq.n	8007e3c <UART_SetConfig+0x18a4>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	2b0b      	cmp	r3, #11
 8007e30:	d102      	bne.n	8007e38 <UART_SetConfig+0x18a0>
 8007e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e36:	e016      	b.n	8007e66 <UART_SetConfig+0x18ce>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e014      	b.n	8007e66 <UART_SetConfig+0x18ce>
 8007e3c:	2380      	movs	r3, #128	; 0x80
 8007e3e:	e012      	b.n	8007e66 <UART_SetConfig+0x18ce>
 8007e40:	2340      	movs	r3, #64	; 0x40
 8007e42:	e010      	b.n	8007e66 <UART_SetConfig+0x18ce>
 8007e44:	2320      	movs	r3, #32
 8007e46:	e00e      	b.n	8007e66 <UART_SetConfig+0x18ce>
 8007e48:	2310      	movs	r3, #16
 8007e4a:	e00c      	b.n	8007e66 <UART_SetConfig+0x18ce>
 8007e4c:	230c      	movs	r3, #12
 8007e4e:	e00a      	b.n	8007e66 <UART_SetConfig+0x18ce>
 8007e50:	230a      	movs	r3, #10
 8007e52:	e008      	b.n	8007e66 <UART_SetConfig+0x18ce>
 8007e54:	2308      	movs	r3, #8
 8007e56:	e006      	b.n	8007e66 <UART_SetConfig+0x18ce>
 8007e58:	2306      	movs	r3, #6
 8007e5a:	e004      	b.n	8007e66 <UART_SetConfig+0x18ce>
 8007e5c:	2304      	movs	r3, #4
 8007e5e:	e002      	b.n	8007e66 <UART_SetConfig+0x18ce>
 8007e60:	2302      	movs	r3, #2
 8007e62:	e000      	b.n	8007e66 <UART_SetConfig+0x18ce>
 8007e64:	2301      	movs	r3, #1
 8007e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6a:	005a      	lsls	r2, r3, #1
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	085b      	lsrs	r3, r3, #1
 8007e72:	441a      	add	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8007e80:	e133      	b.n	80080ea <UART_SetConfig+0x1b52>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d043      	beq.n	8007f12 <UART_SetConfig+0x197a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d03d      	beq.n	8007f0e <UART_SetConfig+0x1976>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d037      	beq.n	8007f0a <UART_SetConfig+0x1972>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d031      	beq.n	8007f06 <UART_SetConfig+0x196e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d02b      	beq.n	8007f02 <UART_SetConfig+0x196a>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	2b05      	cmp	r3, #5
 8007eb0:	d025      	beq.n	8007efe <UART_SetConfig+0x1966>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	2b06      	cmp	r3, #6
 8007eb8:	d01f      	beq.n	8007efa <UART_SetConfig+0x1962>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	2b07      	cmp	r3, #7
 8007ec0:	d019      	beq.n	8007ef6 <UART_SetConfig+0x195e>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d013      	beq.n	8007ef2 <UART_SetConfig+0x195a>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	2b09      	cmp	r3, #9
 8007ed0:	d00d      	beq.n	8007eee <UART_SetConfig+0x1956>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	2b0a      	cmp	r3, #10
 8007ed8:	d007      	beq.n	8007eea <UART_SetConfig+0x1952>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	2b0b      	cmp	r3, #11
 8007ee0:	d101      	bne.n	8007ee6 <UART_SetConfig+0x194e>
 8007ee2:	4b3f      	ldr	r3, [pc, #252]	; (8007fe0 <UART_SetConfig+0x1a48>)
 8007ee4:	e016      	b.n	8007f14 <UART_SetConfig+0x197c>
 8007ee6:	4b3f      	ldr	r3, [pc, #252]	; (8007fe4 <UART_SetConfig+0x1a4c>)
 8007ee8:	e014      	b.n	8007f14 <UART_SetConfig+0x197c>
 8007eea:	4b3f      	ldr	r3, [pc, #252]	; (8007fe8 <UART_SetConfig+0x1a50>)
 8007eec:	e012      	b.n	8007f14 <UART_SetConfig+0x197c>
 8007eee:	4b3f      	ldr	r3, [pc, #252]	; (8007fec <UART_SetConfig+0x1a54>)
 8007ef0:	e010      	b.n	8007f14 <UART_SetConfig+0x197c>
 8007ef2:	4b3f      	ldr	r3, [pc, #252]	; (8007ff0 <UART_SetConfig+0x1a58>)
 8007ef4:	e00e      	b.n	8007f14 <UART_SetConfig+0x197c>
 8007ef6:	4b3f      	ldr	r3, [pc, #252]	; (8007ff4 <UART_SetConfig+0x1a5c>)
 8007ef8:	e00c      	b.n	8007f14 <UART_SetConfig+0x197c>
 8007efa:	4b3f      	ldr	r3, [pc, #252]	; (8007ff8 <UART_SetConfig+0x1a60>)
 8007efc:	e00a      	b.n	8007f14 <UART_SetConfig+0x197c>
 8007efe:	4b3f      	ldr	r3, [pc, #252]	; (8007ffc <UART_SetConfig+0x1a64>)
 8007f00:	e008      	b.n	8007f14 <UART_SetConfig+0x197c>
 8007f02:	4b3f      	ldr	r3, [pc, #252]	; (8008000 <UART_SetConfig+0x1a68>)
 8007f04:	e006      	b.n	8007f14 <UART_SetConfig+0x197c>
 8007f06:	4b3f      	ldr	r3, [pc, #252]	; (8008004 <UART_SetConfig+0x1a6c>)
 8007f08:	e004      	b.n	8007f14 <UART_SetConfig+0x197c>
 8007f0a:	4b3f      	ldr	r3, [pc, #252]	; (8008008 <UART_SetConfig+0x1a70>)
 8007f0c:	e002      	b.n	8007f14 <UART_SetConfig+0x197c>
 8007f0e:	4b33      	ldr	r3, [pc, #204]	; (8007fdc <UART_SetConfig+0x1a44>)
 8007f10:	e000      	b.n	8007f14 <UART_SetConfig+0x197c>
 8007f12:	4b34      	ldr	r3, [pc, #208]	; (8007fe4 <UART_SetConfig+0x1a4c>)
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6852      	ldr	r2, [r2, #4]
 8007f18:	0852      	lsrs	r2, r2, #1
 8007f1a:	441a      	add	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f28:	e0df      	b.n	80080ea <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d045      	beq.n	8007fbe <UART_SetConfig+0x1a26>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d03f      	beq.n	8007fba <UART_SetConfig+0x1a22>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d039      	beq.n	8007fb6 <UART_SetConfig+0x1a1e>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d033      	beq.n	8007fb2 <UART_SetConfig+0x1a1a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d02d      	beq.n	8007fae <UART_SetConfig+0x1a16>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	2b05      	cmp	r3, #5
 8007f58:	d027      	beq.n	8007faa <UART_SetConfig+0x1a12>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	2b06      	cmp	r3, #6
 8007f60:	d021      	beq.n	8007fa6 <UART_SetConfig+0x1a0e>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	2b07      	cmp	r3, #7
 8007f68:	d01b      	beq.n	8007fa2 <UART_SetConfig+0x1a0a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	2b08      	cmp	r3, #8
 8007f70:	d015      	beq.n	8007f9e <UART_SetConfig+0x1a06>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	2b09      	cmp	r3, #9
 8007f78:	d00f      	beq.n	8007f9a <UART_SetConfig+0x1a02>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	2b0a      	cmp	r3, #10
 8007f80:	d008      	beq.n	8007f94 <UART_SetConfig+0x19fc>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b0b      	cmp	r3, #11
 8007f88:	d102      	bne.n	8007f90 <UART_SetConfig+0x19f8>
 8007f8a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007f8e:	e017      	b.n	8007fc0 <UART_SetConfig+0x1a28>
 8007f90:	4b18      	ldr	r3, [pc, #96]	; (8007ff4 <UART_SetConfig+0x1a5c>)
 8007f92:	e015      	b.n	8007fc0 <UART_SetConfig+0x1a28>
 8007f94:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007f98:	e012      	b.n	8007fc0 <UART_SetConfig+0x1a28>
 8007f9a:	4b1c      	ldr	r3, [pc, #112]	; (800800c <UART_SetConfig+0x1a74>)
 8007f9c:	e010      	b.n	8007fc0 <UART_SetConfig+0x1a28>
 8007f9e:	4b1c      	ldr	r3, [pc, #112]	; (8008010 <UART_SetConfig+0x1a78>)
 8007fa0:	e00e      	b.n	8007fc0 <UART_SetConfig+0x1a28>
 8007fa2:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <UART_SetConfig+0x1a48>)
 8007fa4:	e00c      	b.n	8007fc0 <UART_SetConfig+0x1a28>
 8007fa6:	4b1b      	ldr	r3, [pc, #108]	; (8008014 <UART_SetConfig+0x1a7c>)
 8007fa8:	e00a      	b.n	8007fc0 <UART_SetConfig+0x1a28>
 8007faa:	4b1b      	ldr	r3, [pc, #108]	; (8008018 <UART_SetConfig+0x1a80>)
 8007fac:	e008      	b.n	8007fc0 <UART_SetConfig+0x1a28>
 8007fae:	4b0e      	ldr	r3, [pc, #56]	; (8007fe8 <UART_SetConfig+0x1a50>)
 8007fb0:	e006      	b.n	8007fc0 <UART_SetConfig+0x1a28>
 8007fb2:	4b1a      	ldr	r3, [pc, #104]	; (800801c <UART_SetConfig+0x1a84>)
 8007fb4:	e004      	b.n	8007fc0 <UART_SetConfig+0x1a28>
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	; (8007fec <UART_SetConfig+0x1a54>)
 8007fb8:	e002      	b.n	8007fc0 <UART_SetConfig+0x1a28>
 8007fba:	4b0d      	ldr	r3, [pc, #52]	; (8007ff0 <UART_SetConfig+0x1a58>)
 8007fbc:	e000      	b.n	8007fc0 <UART_SetConfig+0x1a28>
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <UART_SetConfig+0x1a5c>)
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	6852      	ldr	r2, [r2, #4]
 8007fc4:	0852      	lsrs	r2, r2, #1
 8007fc6:	441a      	add	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fd4:	e089      	b.n	80080ea <UART_SetConfig+0x1b52>
 8007fd6:	bf00      	nop
 8007fd8:	58024400 	.word	0x58024400
 8007fdc:	03d09000 	.word	0x03d09000
 8007fe0:	0007a120 	.word	0x0007a120
 8007fe4:	07a12000 	.word	0x07a12000
 8007fe8:	000f4240 	.word	0x000f4240
 8007fec:	001e8480 	.word	0x001e8480
 8007ff0:	003d0900 	.word	0x003d0900
 8007ff4:	007a1200 	.word	0x007a1200
 8007ff8:	00a2c2aa 	.word	0x00a2c2aa
 8007ffc:	00c35000 	.word	0x00c35000
 8008000:	00f42400 	.word	0x00f42400
 8008004:	01458554 	.word	0x01458554
 8008008:	01e84800 	.word	0x01e84800
 800800c:	0001e848 	.word	0x0001e848
 8008010:	0003d090 	.word	0x0003d090
 8008014:	000a2c2a 	.word	0x000a2c2a
 8008018:	000c3500 	.word	0x000c3500
 800801c:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	2b00      	cmp	r3, #0
 8008026:	d04f      	beq.n	80080c8 <UART_SetConfig+0x1b30>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	2b01      	cmp	r3, #1
 800802e:	d048      	beq.n	80080c2 <UART_SetConfig+0x1b2a>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	2b02      	cmp	r3, #2
 8008036:	d041      	beq.n	80080bc <UART_SetConfig+0x1b24>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	2b03      	cmp	r3, #3
 800803e:	d03a      	beq.n	80080b6 <UART_SetConfig+0x1b1e>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	2b04      	cmp	r3, #4
 8008046:	d033      	beq.n	80080b0 <UART_SetConfig+0x1b18>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	2b05      	cmp	r3, #5
 800804e:	d02c      	beq.n	80080aa <UART_SetConfig+0x1b12>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	2b06      	cmp	r3, #6
 8008056:	d025      	beq.n	80080a4 <UART_SetConfig+0x1b0c>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	2b07      	cmp	r3, #7
 800805e:	d01e      	beq.n	800809e <UART_SetConfig+0x1b06>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	2b08      	cmp	r3, #8
 8008066:	d017      	beq.n	8008098 <UART_SetConfig+0x1b00>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806c:	2b09      	cmp	r3, #9
 800806e:	d010      	beq.n	8008092 <UART_SetConfig+0x1afa>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	2b0a      	cmp	r3, #10
 8008076:	d009      	beq.n	800808c <UART_SetConfig+0x1af4>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	2b0b      	cmp	r3, #11
 800807e:	d102      	bne.n	8008086 <UART_SetConfig+0x1aee>
 8008080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008084:	e022      	b.n	80080cc <UART_SetConfig+0x1b34>
 8008086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800808a:	e01f      	b.n	80080cc <UART_SetConfig+0x1b34>
 800808c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008090:	e01c      	b.n	80080cc <UART_SetConfig+0x1b34>
 8008092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008096:	e019      	b.n	80080cc <UART_SetConfig+0x1b34>
 8008098:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800809c:	e016      	b.n	80080cc <UART_SetConfig+0x1b34>
 800809e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080a2:	e013      	b.n	80080cc <UART_SetConfig+0x1b34>
 80080a4:	f241 5354 	movw	r3, #5460	; 0x1554
 80080a8:	e010      	b.n	80080cc <UART_SetConfig+0x1b34>
 80080aa:	f641 1398 	movw	r3, #6552	; 0x1998
 80080ae:	e00d      	b.n	80080cc <UART_SetConfig+0x1b34>
 80080b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080b4:	e00a      	b.n	80080cc <UART_SetConfig+0x1b34>
 80080b6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80080ba:	e007      	b.n	80080cc <UART_SetConfig+0x1b34>
 80080bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80080c0:	e004      	b.n	80080cc <UART_SetConfig+0x1b34>
 80080c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080c6:	e001      	b.n	80080cc <UART_SetConfig+0x1b34>
 80080c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6852      	ldr	r2, [r2, #4]
 80080d0:	0852      	lsrs	r2, r2, #1
 80080d2:	441a      	add	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080dc:	b29b      	uxth	r3, r3
 80080de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080e0:	e003      	b.n	80080ea <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 80080e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ec:	2b0f      	cmp	r3, #15
 80080ee:	d916      	bls.n	800811e <UART_SetConfig+0x1b86>
 80080f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f6:	d212      	bcs.n	800811e <UART_SetConfig+0x1b86>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	f023 030f 	bic.w	r3, r3, #15
 8008100:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	085b      	lsrs	r3, r3, #1
 8008106:	b29b      	uxth	r3, r3
 8008108:	f003 0307 	and.w	r3, r3, #7
 800810c:	b29a      	uxth	r2, r3
 800810e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008110:	4313      	orrs	r3, r2
 8008112:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800811a:	60da      	str	r2, [r3, #12]
 800811c:	e3a1      	b.n	8008862 <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008124:	e39d      	b.n	8008862 <UART_SetConfig+0x22ca>
    }
  }
  else
  {
    switch (clocksource)
 8008126:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800812a:	2b40      	cmp	r3, #64	; 0x40
 800812c:	f200 8386 	bhi.w	800883c <UART_SetConfig+0x22a4>
 8008130:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <UART_SetConfig+0x1ba0>)
 8008132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008136:	bf00      	nop
 8008138:	0800823d 	.word	0x0800823d
 800813c:	080082f1 	.word	0x080082f1
 8008140:	0800883d 	.word	0x0800883d
 8008144:	0800883d 	.word	0x0800883d
 8008148:	080083a5 	.word	0x080083a5
 800814c:	0800883d 	.word	0x0800883d
 8008150:	0800883d 	.word	0x0800883d
 8008154:	0800883d 	.word	0x0800883d
 8008158:	0800845f 	.word	0x0800845f
 800815c:	0800883d 	.word	0x0800883d
 8008160:	0800883d 	.word	0x0800883d
 8008164:	0800883d 	.word	0x0800883d
 8008168:	0800883d 	.word	0x0800883d
 800816c:	0800883d 	.word	0x0800883d
 8008170:	0800883d 	.word	0x0800883d
 8008174:	0800883d 	.word	0x0800883d
 8008178:	08008519 	.word	0x08008519
 800817c:	0800883d 	.word	0x0800883d
 8008180:	0800883d 	.word	0x0800883d
 8008184:	0800883d 	.word	0x0800883d
 8008188:	0800883d 	.word	0x0800883d
 800818c:	0800883d 	.word	0x0800883d
 8008190:	0800883d 	.word	0x0800883d
 8008194:	0800883d 	.word	0x0800883d
 8008198:	0800883d 	.word	0x0800883d
 800819c:	0800883d 	.word	0x0800883d
 80081a0:	0800883d 	.word	0x0800883d
 80081a4:	0800883d 	.word	0x0800883d
 80081a8:	0800883d 	.word	0x0800883d
 80081ac:	0800883d 	.word	0x0800883d
 80081b0:	0800883d 	.word	0x0800883d
 80081b4:	0800883d 	.word	0x0800883d
 80081b8:	08008689 	.word	0x08008689
 80081bc:	0800883d 	.word	0x0800883d
 80081c0:	0800883d 	.word	0x0800883d
 80081c4:	0800883d 	.word	0x0800883d
 80081c8:	0800883d 	.word	0x0800883d
 80081cc:	0800883d 	.word	0x0800883d
 80081d0:	0800883d 	.word	0x0800883d
 80081d4:	0800883d 	.word	0x0800883d
 80081d8:	0800883d 	.word	0x0800883d
 80081dc:	0800883d 	.word	0x0800883d
 80081e0:	0800883d 	.word	0x0800883d
 80081e4:	0800883d 	.word	0x0800883d
 80081e8:	0800883d 	.word	0x0800883d
 80081ec:	0800883d 	.word	0x0800883d
 80081f0:	0800883d 	.word	0x0800883d
 80081f4:	0800883d 	.word	0x0800883d
 80081f8:	0800883d 	.word	0x0800883d
 80081fc:	0800883d 	.word	0x0800883d
 8008200:	0800883d 	.word	0x0800883d
 8008204:	0800883d 	.word	0x0800883d
 8008208:	0800883d 	.word	0x0800883d
 800820c:	0800883d 	.word	0x0800883d
 8008210:	0800883d 	.word	0x0800883d
 8008214:	0800883d 	.word	0x0800883d
 8008218:	0800883d 	.word	0x0800883d
 800821c:	0800883d 	.word	0x0800883d
 8008220:	0800883d 	.word	0x0800883d
 8008224:	0800883d 	.word	0x0800883d
 8008228:	0800883d 	.word	0x0800883d
 800822c:	0800883d 	.word	0x0800883d
 8008230:	0800883d 	.word	0x0800883d
 8008234:	0800883d 	.word	0x0800883d
 8008238:	0800877d 	.word	0x0800877d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800823c:	f7fb f8b6 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8008240:	4602      	mov	r2, r0
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	2b00      	cmp	r3, #0
 8008248:	d044      	beq.n	80082d4 <UART_SetConfig+0x1d3c>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	2b01      	cmp	r3, #1
 8008250:	d03e      	beq.n	80082d0 <UART_SetConfig+0x1d38>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2b02      	cmp	r3, #2
 8008258:	d038      	beq.n	80082cc <UART_SetConfig+0x1d34>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	2b03      	cmp	r3, #3
 8008260:	d032      	beq.n	80082c8 <UART_SetConfig+0x1d30>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	2b04      	cmp	r3, #4
 8008268:	d02c      	beq.n	80082c4 <UART_SetConfig+0x1d2c>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	2b05      	cmp	r3, #5
 8008270:	d026      	beq.n	80082c0 <UART_SetConfig+0x1d28>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	2b06      	cmp	r3, #6
 8008278:	d020      	beq.n	80082bc <UART_SetConfig+0x1d24>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	2b07      	cmp	r3, #7
 8008280:	d01a      	beq.n	80082b8 <UART_SetConfig+0x1d20>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	2b08      	cmp	r3, #8
 8008288:	d014      	beq.n	80082b4 <UART_SetConfig+0x1d1c>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	2b09      	cmp	r3, #9
 8008290:	d00e      	beq.n	80082b0 <UART_SetConfig+0x1d18>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	2b0a      	cmp	r3, #10
 8008298:	d008      	beq.n	80082ac <UART_SetConfig+0x1d14>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	2b0b      	cmp	r3, #11
 80082a0:	d102      	bne.n	80082a8 <UART_SetConfig+0x1d10>
 80082a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082a6:	e016      	b.n	80082d6 <UART_SetConfig+0x1d3e>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e014      	b.n	80082d6 <UART_SetConfig+0x1d3e>
 80082ac:	2380      	movs	r3, #128	; 0x80
 80082ae:	e012      	b.n	80082d6 <UART_SetConfig+0x1d3e>
 80082b0:	2340      	movs	r3, #64	; 0x40
 80082b2:	e010      	b.n	80082d6 <UART_SetConfig+0x1d3e>
 80082b4:	2320      	movs	r3, #32
 80082b6:	e00e      	b.n	80082d6 <UART_SetConfig+0x1d3e>
 80082b8:	2310      	movs	r3, #16
 80082ba:	e00c      	b.n	80082d6 <UART_SetConfig+0x1d3e>
 80082bc:	230c      	movs	r3, #12
 80082be:	e00a      	b.n	80082d6 <UART_SetConfig+0x1d3e>
 80082c0:	230a      	movs	r3, #10
 80082c2:	e008      	b.n	80082d6 <UART_SetConfig+0x1d3e>
 80082c4:	2308      	movs	r3, #8
 80082c6:	e006      	b.n	80082d6 <UART_SetConfig+0x1d3e>
 80082c8:	2306      	movs	r3, #6
 80082ca:	e004      	b.n	80082d6 <UART_SetConfig+0x1d3e>
 80082cc:	2304      	movs	r3, #4
 80082ce:	e002      	b.n	80082d6 <UART_SetConfig+0x1d3e>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e000      	b.n	80082d6 <UART_SetConfig+0x1d3e>
 80082d4:	2301      	movs	r3, #1
 80082d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	085b      	lsrs	r3, r3, #1
 80082e0:	441a      	add	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082ee:	e2a9      	b.n	8008844 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082f0:	f7fb f872 	bl	80033d8 <HAL_RCC_GetPCLK2Freq>
 80082f4:	4602      	mov	r2, r0
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d044      	beq.n	8008388 <UART_SetConfig+0x1df0>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	2b01      	cmp	r3, #1
 8008304:	d03e      	beq.n	8008384 <UART_SetConfig+0x1dec>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	2b02      	cmp	r3, #2
 800830c:	d038      	beq.n	8008380 <UART_SetConfig+0x1de8>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	2b03      	cmp	r3, #3
 8008314:	d032      	beq.n	800837c <UART_SetConfig+0x1de4>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	2b04      	cmp	r3, #4
 800831c:	d02c      	beq.n	8008378 <UART_SetConfig+0x1de0>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	2b05      	cmp	r3, #5
 8008324:	d026      	beq.n	8008374 <UART_SetConfig+0x1ddc>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	2b06      	cmp	r3, #6
 800832c:	d020      	beq.n	8008370 <UART_SetConfig+0x1dd8>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	2b07      	cmp	r3, #7
 8008334:	d01a      	beq.n	800836c <UART_SetConfig+0x1dd4>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	2b08      	cmp	r3, #8
 800833c:	d014      	beq.n	8008368 <UART_SetConfig+0x1dd0>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	2b09      	cmp	r3, #9
 8008344:	d00e      	beq.n	8008364 <UART_SetConfig+0x1dcc>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	2b0a      	cmp	r3, #10
 800834c:	d008      	beq.n	8008360 <UART_SetConfig+0x1dc8>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	2b0b      	cmp	r3, #11
 8008354:	d102      	bne.n	800835c <UART_SetConfig+0x1dc4>
 8008356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800835a:	e016      	b.n	800838a <UART_SetConfig+0x1df2>
 800835c:	2301      	movs	r3, #1
 800835e:	e014      	b.n	800838a <UART_SetConfig+0x1df2>
 8008360:	2380      	movs	r3, #128	; 0x80
 8008362:	e012      	b.n	800838a <UART_SetConfig+0x1df2>
 8008364:	2340      	movs	r3, #64	; 0x40
 8008366:	e010      	b.n	800838a <UART_SetConfig+0x1df2>
 8008368:	2320      	movs	r3, #32
 800836a:	e00e      	b.n	800838a <UART_SetConfig+0x1df2>
 800836c:	2310      	movs	r3, #16
 800836e:	e00c      	b.n	800838a <UART_SetConfig+0x1df2>
 8008370:	230c      	movs	r3, #12
 8008372:	e00a      	b.n	800838a <UART_SetConfig+0x1df2>
 8008374:	230a      	movs	r3, #10
 8008376:	e008      	b.n	800838a <UART_SetConfig+0x1df2>
 8008378:	2308      	movs	r3, #8
 800837a:	e006      	b.n	800838a <UART_SetConfig+0x1df2>
 800837c:	2306      	movs	r3, #6
 800837e:	e004      	b.n	800838a <UART_SetConfig+0x1df2>
 8008380:	2304      	movs	r3, #4
 8008382:	e002      	b.n	800838a <UART_SetConfig+0x1df2>
 8008384:	2302      	movs	r3, #2
 8008386:	e000      	b.n	800838a <UART_SetConfig+0x1df2>
 8008388:	2301      	movs	r3, #1
 800838a:	fbb2 f2f3 	udiv	r2, r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	085b      	lsrs	r3, r3, #1
 8008394:	441a      	add	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	fbb2 f3f3 	udiv	r3, r2, r3
 800839e:	b29b      	uxth	r3, r3
 80083a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083a2:	e24f      	b.n	8008844 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083a4:	f107 0314 	add.w	r3, r7, #20
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fc f943 	bl	8004634 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ae:	69ba      	ldr	r2, [r7, #24]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d044      	beq.n	8008442 <UART_SetConfig+0x1eaa>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d03e      	beq.n	800843e <UART_SetConfig+0x1ea6>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d038      	beq.n	800843a <UART_SetConfig+0x1ea2>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d032      	beq.n	8008436 <UART_SetConfig+0x1e9e>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	d02c      	beq.n	8008432 <UART_SetConfig+0x1e9a>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	2b05      	cmp	r3, #5
 80083de:	d026      	beq.n	800842e <UART_SetConfig+0x1e96>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	2b06      	cmp	r3, #6
 80083e6:	d020      	beq.n	800842a <UART_SetConfig+0x1e92>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	2b07      	cmp	r3, #7
 80083ee:	d01a      	beq.n	8008426 <UART_SetConfig+0x1e8e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	2b08      	cmp	r3, #8
 80083f6:	d014      	beq.n	8008422 <UART_SetConfig+0x1e8a>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	2b09      	cmp	r3, #9
 80083fe:	d00e      	beq.n	800841e <UART_SetConfig+0x1e86>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	2b0a      	cmp	r3, #10
 8008406:	d008      	beq.n	800841a <UART_SetConfig+0x1e82>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	2b0b      	cmp	r3, #11
 800840e:	d102      	bne.n	8008416 <UART_SetConfig+0x1e7e>
 8008410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008414:	e016      	b.n	8008444 <UART_SetConfig+0x1eac>
 8008416:	2301      	movs	r3, #1
 8008418:	e014      	b.n	8008444 <UART_SetConfig+0x1eac>
 800841a:	2380      	movs	r3, #128	; 0x80
 800841c:	e012      	b.n	8008444 <UART_SetConfig+0x1eac>
 800841e:	2340      	movs	r3, #64	; 0x40
 8008420:	e010      	b.n	8008444 <UART_SetConfig+0x1eac>
 8008422:	2320      	movs	r3, #32
 8008424:	e00e      	b.n	8008444 <UART_SetConfig+0x1eac>
 8008426:	2310      	movs	r3, #16
 8008428:	e00c      	b.n	8008444 <UART_SetConfig+0x1eac>
 800842a:	230c      	movs	r3, #12
 800842c:	e00a      	b.n	8008444 <UART_SetConfig+0x1eac>
 800842e:	230a      	movs	r3, #10
 8008430:	e008      	b.n	8008444 <UART_SetConfig+0x1eac>
 8008432:	2308      	movs	r3, #8
 8008434:	e006      	b.n	8008444 <UART_SetConfig+0x1eac>
 8008436:	2306      	movs	r3, #6
 8008438:	e004      	b.n	8008444 <UART_SetConfig+0x1eac>
 800843a:	2304      	movs	r3, #4
 800843c:	e002      	b.n	8008444 <UART_SetConfig+0x1eac>
 800843e:	2302      	movs	r3, #2
 8008440:	e000      	b.n	8008444 <UART_SetConfig+0x1eac>
 8008442:	2301      	movs	r3, #1
 8008444:	fbb2 f2f3 	udiv	r2, r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	085b      	lsrs	r3, r3, #1
 800844e:	441a      	add	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	fbb2 f3f3 	udiv	r3, r2, r3
 8008458:	b29b      	uxth	r3, r3
 800845a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800845c:	e1f2      	b.n	8008844 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800845e:	f107 0308 	add.w	r3, r7, #8
 8008462:	4618      	mov	r0, r3
 8008464:	f7fc fa32 	bl	80048cc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	2b00      	cmp	r3, #0
 8008470:	d044      	beq.n	80084fc <UART_SetConfig+0x1f64>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	2b01      	cmp	r3, #1
 8008478:	d03e      	beq.n	80084f8 <UART_SetConfig+0x1f60>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	2b02      	cmp	r3, #2
 8008480:	d038      	beq.n	80084f4 <UART_SetConfig+0x1f5c>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	2b03      	cmp	r3, #3
 8008488:	d032      	beq.n	80084f0 <UART_SetConfig+0x1f58>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	2b04      	cmp	r3, #4
 8008490:	d02c      	beq.n	80084ec <UART_SetConfig+0x1f54>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	2b05      	cmp	r3, #5
 8008498:	d026      	beq.n	80084e8 <UART_SetConfig+0x1f50>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	2b06      	cmp	r3, #6
 80084a0:	d020      	beq.n	80084e4 <UART_SetConfig+0x1f4c>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	2b07      	cmp	r3, #7
 80084a8:	d01a      	beq.n	80084e0 <UART_SetConfig+0x1f48>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	2b08      	cmp	r3, #8
 80084b0:	d014      	beq.n	80084dc <UART_SetConfig+0x1f44>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	2b09      	cmp	r3, #9
 80084b8:	d00e      	beq.n	80084d8 <UART_SetConfig+0x1f40>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	2b0a      	cmp	r3, #10
 80084c0:	d008      	beq.n	80084d4 <UART_SetConfig+0x1f3c>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	2b0b      	cmp	r3, #11
 80084c8:	d102      	bne.n	80084d0 <UART_SetConfig+0x1f38>
 80084ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084ce:	e016      	b.n	80084fe <UART_SetConfig+0x1f66>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e014      	b.n	80084fe <UART_SetConfig+0x1f66>
 80084d4:	2380      	movs	r3, #128	; 0x80
 80084d6:	e012      	b.n	80084fe <UART_SetConfig+0x1f66>
 80084d8:	2340      	movs	r3, #64	; 0x40
 80084da:	e010      	b.n	80084fe <UART_SetConfig+0x1f66>
 80084dc:	2320      	movs	r3, #32
 80084de:	e00e      	b.n	80084fe <UART_SetConfig+0x1f66>
 80084e0:	2310      	movs	r3, #16
 80084e2:	e00c      	b.n	80084fe <UART_SetConfig+0x1f66>
 80084e4:	230c      	movs	r3, #12
 80084e6:	e00a      	b.n	80084fe <UART_SetConfig+0x1f66>
 80084e8:	230a      	movs	r3, #10
 80084ea:	e008      	b.n	80084fe <UART_SetConfig+0x1f66>
 80084ec:	2308      	movs	r3, #8
 80084ee:	e006      	b.n	80084fe <UART_SetConfig+0x1f66>
 80084f0:	2306      	movs	r3, #6
 80084f2:	e004      	b.n	80084fe <UART_SetConfig+0x1f66>
 80084f4:	2304      	movs	r3, #4
 80084f6:	e002      	b.n	80084fe <UART_SetConfig+0x1f66>
 80084f8:	2302      	movs	r3, #2
 80084fa:	e000      	b.n	80084fe <UART_SetConfig+0x1f66>
 80084fc:	2301      	movs	r3, #1
 80084fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	085b      	lsrs	r3, r3, #1
 8008508:	441a      	add	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008512:	b29b      	uxth	r3, r3
 8008514:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008516:	e195      	b.n	8008844 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008518:	4b87      	ldr	r3, [pc, #540]	; (8008738 <UART_SetConfig+0x21a0>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b00      	cmp	r3, #0
 8008522:	d05d      	beq.n	80085e0 <UART_SetConfig+0x2048>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008524:	4b84      	ldr	r3, [pc, #528]	; (8008738 <UART_SetConfig+0x21a0>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	08db      	lsrs	r3, r3, #3
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	4a83      	ldr	r2, [pc, #524]	; (800873c <UART_SetConfig+0x21a4>)
 8008530:	40da      	lsrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	2b00      	cmp	r3, #0
 8008538:	d044      	beq.n	80085c4 <UART_SetConfig+0x202c>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	2b01      	cmp	r3, #1
 8008540:	d03e      	beq.n	80085c0 <UART_SetConfig+0x2028>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b02      	cmp	r3, #2
 8008548:	d038      	beq.n	80085bc <UART_SetConfig+0x2024>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2b03      	cmp	r3, #3
 8008550:	d032      	beq.n	80085b8 <UART_SetConfig+0x2020>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	2b04      	cmp	r3, #4
 8008558:	d02c      	beq.n	80085b4 <UART_SetConfig+0x201c>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855e:	2b05      	cmp	r3, #5
 8008560:	d026      	beq.n	80085b0 <UART_SetConfig+0x2018>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	2b06      	cmp	r3, #6
 8008568:	d020      	beq.n	80085ac <UART_SetConfig+0x2014>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	2b07      	cmp	r3, #7
 8008570:	d01a      	beq.n	80085a8 <UART_SetConfig+0x2010>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	2b08      	cmp	r3, #8
 8008578:	d014      	beq.n	80085a4 <UART_SetConfig+0x200c>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	2b09      	cmp	r3, #9
 8008580:	d00e      	beq.n	80085a0 <UART_SetConfig+0x2008>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	2b0a      	cmp	r3, #10
 8008588:	d008      	beq.n	800859c <UART_SetConfig+0x2004>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	2b0b      	cmp	r3, #11
 8008590:	d102      	bne.n	8008598 <UART_SetConfig+0x2000>
 8008592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008596:	e016      	b.n	80085c6 <UART_SetConfig+0x202e>
 8008598:	2301      	movs	r3, #1
 800859a:	e014      	b.n	80085c6 <UART_SetConfig+0x202e>
 800859c:	2380      	movs	r3, #128	; 0x80
 800859e:	e012      	b.n	80085c6 <UART_SetConfig+0x202e>
 80085a0:	2340      	movs	r3, #64	; 0x40
 80085a2:	e010      	b.n	80085c6 <UART_SetConfig+0x202e>
 80085a4:	2320      	movs	r3, #32
 80085a6:	e00e      	b.n	80085c6 <UART_SetConfig+0x202e>
 80085a8:	2310      	movs	r3, #16
 80085aa:	e00c      	b.n	80085c6 <UART_SetConfig+0x202e>
 80085ac:	230c      	movs	r3, #12
 80085ae:	e00a      	b.n	80085c6 <UART_SetConfig+0x202e>
 80085b0:	230a      	movs	r3, #10
 80085b2:	e008      	b.n	80085c6 <UART_SetConfig+0x202e>
 80085b4:	2308      	movs	r3, #8
 80085b6:	e006      	b.n	80085c6 <UART_SetConfig+0x202e>
 80085b8:	2306      	movs	r3, #6
 80085ba:	e004      	b.n	80085c6 <UART_SetConfig+0x202e>
 80085bc:	2304      	movs	r3, #4
 80085be:	e002      	b.n	80085c6 <UART_SetConfig+0x202e>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e000      	b.n	80085c6 <UART_SetConfig+0x202e>
 80085c4:	2301      	movs	r3, #1
 80085c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	085b      	lsrs	r3, r3, #1
 80085d0:	441a      	add	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085da:	b29b      	uxth	r3, r3
 80085dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80085de:	e131      	b.n	8008844 <UART_SetConfig+0x22ac>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d043      	beq.n	8008670 <UART_SetConfig+0x20d8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d03d      	beq.n	800866c <UART_SetConfig+0x20d4>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d037      	beq.n	8008668 <UART_SetConfig+0x20d0>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d031      	beq.n	8008664 <UART_SetConfig+0x20cc>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	2b04      	cmp	r3, #4
 8008606:	d02b      	beq.n	8008660 <UART_SetConfig+0x20c8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	2b05      	cmp	r3, #5
 800860e:	d025      	beq.n	800865c <UART_SetConfig+0x20c4>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	2b06      	cmp	r3, #6
 8008616:	d01f      	beq.n	8008658 <UART_SetConfig+0x20c0>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	2b07      	cmp	r3, #7
 800861e:	d019      	beq.n	8008654 <UART_SetConfig+0x20bc>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	2b08      	cmp	r3, #8
 8008626:	d013      	beq.n	8008650 <UART_SetConfig+0x20b8>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	2b09      	cmp	r3, #9
 800862e:	d00d      	beq.n	800864c <UART_SetConfig+0x20b4>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	2b0a      	cmp	r3, #10
 8008636:	d007      	beq.n	8008648 <UART_SetConfig+0x20b0>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	2b0b      	cmp	r3, #11
 800863e:	d101      	bne.n	8008644 <UART_SetConfig+0x20ac>
 8008640:	4b3f      	ldr	r3, [pc, #252]	; (8008740 <UART_SetConfig+0x21a8>)
 8008642:	e016      	b.n	8008672 <UART_SetConfig+0x20da>
 8008644:	4b3d      	ldr	r3, [pc, #244]	; (800873c <UART_SetConfig+0x21a4>)
 8008646:	e014      	b.n	8008672 <UART_SetConfig+0x20da>
 8008648:	4b3e      	ldr	r3, [pc, #248]	; (8008744 <UART_SetConfig+0x21ac>)
 800864a:	e012      	b.n	8008672 <UART_SetConfig+0x20da>
 800864c:	4b3e      	ldr	r3, [pc, #248]	; (8008748 <UART_SetConfig+0x21b0>)
 800864e:	e010      	b.n	8008672 <UART_SetConfig+0x20da>
 8008650:	4b3e      	ldr	r3, [pc, #248]	; (800874c <UART_SetConfig+0x21b4>)
 8008652:	e00e      	b.n	8008672 <UART_SetConfig+0x20da>
 8008654:	4b3e      	ldr	r3, [pc, #248]	; (8008750 <UART_SetConfig+0x21b8>)
 8008656:	e00c      	b.n	8008672 <UART_SetConfig+0x20da>
 8008658:	4b3e      	ldr	r3, [pc, #248]	; (8008754 <UART_SetConfig+0x21bc>)
 800865a:	e00a      	b.n	8008672 <UART_SetConfig+0x20da>
 800865c:	4b3e      	ldr	r3, [pc, #248]	; (8008758 <UART_SetConfig+0x21c0>)
 800865e:	e008      	b.n	8008672 <UART_SetConfig+0x20da>
 8008660:	4b3e      	ldr	r3, [pc, #248]	; (800875c <UART_SetConfig+0x21c4>)
 8008662:	e006      	b.n	8008672 <UART_SetConfig+0x20da>
 8008664:	4b3e      	ldr	r3, [pc, #248]	; (8008760 <UART_SetConfig+0x21c8>)
 8008666:	e004      	b.n	8008672 <UART_SetConfig+0x20da>
 8008668:	4b3e      	ldr	r3, [pc, #248]	; (8008764 <UART_SetConfig+0x21cc>)
 800866a:	e002      	b.n	8008672 <UART_SetConfig+0x20da>
 800866c:	4b3e      	ldr	r3, [pc, #248]	; (8008768 <UART_SetConfig+0x21d0>)
 800866e:	e000      	b.n	8008672 <UART_SetConfig+0x20da>
 8008670:	4b32      	ldr	r3, [pc, #200]	; (800873c <UART_SetConfig+0x21a4>)
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6852      	ldr	r2, [r2, #4]
 8008676:	0852      	lsrs	r2, r2, #1
 8008678:	441a      	add	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008682:	b29b      	uxth	r3, r3
 8008684:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008686:	e0dd      	b.n	8008844 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	2b00      	cmp	r3, #0
 800868e:	d046      	beq.n	800871e <UART_SetConfig+0x2186>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	2b01      	cmp	r3, #1
 8008696:	d040      	beq.n	800871a <UART_SetConfig+0x2182>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	2b02      	cmp	r3, #2
 800869e:	d03a      	beq.n	8008716 <UART_SetConfig+0x217e>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d034      	beq.n	8008712 <UART_SetConfig+0x217a>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	d02e      	beq.n	800870e <UART_SetConfig+0x2176>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b05      	cmp	r3, #5
 80086b6:	d028      	beq.n	800870a <UART_SetConfig+0x2172>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	2b06      	cmp	r3, #6
 80086be:	d022      	beq.n	8008706 <UART_SetConfig+0x216e>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	2b07      	cmp	r3, #7
 80086c6:	d01c      	beq.n	8008702 <UART_SetConfig+0x216a>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	2b08      	cmp	r3, #8
 80086ce:	d016      	beq.n	80086fe <UART_SetConfig+0x2166>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	2b09      	cmp	r3, #9
 80086d6:	d00f      	beq.n	80086f8 <UART_SetConfig+0x2160>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2b0a      	cmp	r3, #10
 80086de:	d008      	beq.n	80086f2 <UART_SetConfig+0x215a>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	2b0b      	cmp	r3, #11
 80086e6:	d102      	bne.n	80086ee <UART_SetConfig+0x2156>
 80086e8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80086ec:	e018      	b.n	8008720 <UART_SetConfig+0x2188>
 80086ee:	4b18      	ldr	r3, [pc, #96]	; (8008750 <UART_SetConfig+0x21b8>)
 80086f0:	e016      	b.n	8008720 <UART_SetConfig+0x2188>
 80086f2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80086f6:	e013      	b.n	8008720 <UART_SetConfig+0x2188>
 80086f8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80086fc:	e010      	b.n	8008720 <UART_SetConfig+0x2188>
 80086fe:	4b1b      	ldr	r3, [pc, #108]	; (800876c <UART_SetConfig+0x21d4>)
 8008700:	e00e      	b.n	8008720 <UART_SetConfig+0x2188>
 8008702:	4b0f      	ldr	r3, [pc, #60]	; (8008740 <UART_SetConfig+0x21a8>)
 8008704:	e00c      	b.n	8008720 <UART_SetConfig+0x2188>
 8008706:	4b1a      	ldr	r3, [pc, #104]	; (8008770 <UART_SetConfig+0x21d8>)
 8008708:	e00a      	b.n	8008720 <UART_SetConfig+0x2188>
 800870a:	4b1a      	ldr	r3, [pc, #104]	; (8008774 <UART_SetConfig+0x21dc>)
 800870c:	e008      	b.n	8008720 <UART_SetConfig+0x2188>
 800870e:	4b0d      	ldr	r3, [pc, #52]	; (8008744 <UART_SetConfig+0x21ac>)
 8008710:	e006      	b.n	8008720 <UART_SetConfig+0x2188>
 8008712:	4b19      	ldr	r3, [pc, #100]	; (8008778 <UART_SetConfig+0x21e0>)
 8008714:	e004      	b.n	8008720 <UART_SetConfig+0x2188>
 8008716:	4b0c      	ldr	r3, [pc, #48]	; (8008748 <UART_SetConfig+0x21b0>)
 8008718:	e002      	b.n	8008720 <UART_SetConfig+0x2188>
 800871a:	4b0c      	ldr	r3, [pc, #48]	; (800874c <UART_SetConfig+0x21b4>)
 800871c:	e000      	b.n	8008720 <UART_SetConfig+0x2188>
 800871e:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <UART_SetConfig+0x21b8>)
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	6852      	ldr	r2, [r2, #4]
 8008724:	0852      	lsrs	r2, r2, #1
 8008726:	441a      	add	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008730:	b29b      	uxth	r3, r3
 8008732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008734:	e086      	b.n	8008844 <UART_SetConfig+0x22ac>
 8008736:	bf00      	nop
 8008738:	58024400 	.word	0x58024400
 800873c:	03d09000 	.word	0x03d09000
 8008740:	0003d090 	.word	0x0003d090
 8008744:	0007a120 	.word	0x0007a120
 8008748:	000f4240 	.word	0x000f4240
 800874c:	001e8480 	.word	0x001e8480
 8008750:	003d0900 	.word	0x003d0900
 8008754:	00516155 	.word	0x00516155
 8008758:	0061a800 	.word	0x0061a800
 800875c:	007a1200 	.word	0x007a1200
 8008760:	00a2c2aa 	.word	0x00a2c2aa
 8008764:	00f42400 	.word	0x00f42400
 8008768:	01e84800 	.word	0x01e84800
 800876c:	0001e848 	.word	0x0001e848
 8008770:	00051615 	.word	0x00051615
 8008774:	00061a80 	.word	0x00061a80
 8008778:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	2b00      	cmp	r3, #0
 8008782:	d04e      	beq.n	8008822 <UART_SetConfig+0x228a>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	2b01      	cmp	r3, #1
 800878a:	d047      	beq.n	800881c <UART_SetConfig+0x2284>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	2b02      	cmp	r3, #2
 8008792:	d040      	beq.n	8008816 <UART_SetConfig+0x227e>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	2b03      	cmp	r3, #3
 800879a:	d039      	beq.n	8008810 <UART_SetConfig+0x2278>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	2b04      	cmp	r3, #4
 80087a2:	d032      	beq.n	800880a <UART_SetConfig+0x2272>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	2b05      	cmp	r3, #5
 80087aa:	d02b      	beq.n	8008804 <UART_SetConfig+0x226c>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	2b06      	cmp	r3, #6
 80087b2:	d024      	beq.n	80087fe <UART_SetConfig+0x2266>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	2b07      	cmp	r3, #7
 80087ba:	d01d      	beq.n	80087f8 <UART_SetConfig+0x2260>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	2b08      	cmp	r3, #8
 80087c2:	d016      	beq.n	80087f2 <UART_SetConfig+0x225a>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	2b09      	cmp	r3, #9
 80087ca:	d00f      	beq.n	80087ec <UART_SetConfig+0x2254>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	2b0a      	cmp	r3, #10
 80087d2:	d008      	beq.n	80087e6 <UART_SetConfig+0x224e>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	2b0b      	cmp	r3, #11
 80087da:	d101      	bne.n	80087e0 <UART_SetConfig+0x2248>
 80087dc:	2380      	movs	r3, #128	; 0x80
 80087de:	e022      	b.n	8008826 <UART_SetConfig+0x228e>
 80087e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087e4:	e01f      	b.n	8008826 <UART_SetConfig+0x228e>
 80087e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ea:	e01c      	b.n	8008826 <UART_SetConfig+0x228e>
 80087ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087f0:	e019      	b.n	8008826 <UART_SetConfig+0x228e>
 80087f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f6:	e016      	b.n	8008826 <UART_SetConfig+0x228e>
 80087f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087fc:	e013      	b.n	8008826 <UART_SetConfig+0x228e>
 80087fe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008802:	e010      	b.n	8008826 <UART_SetConfig+0x228e>
 8008804:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008808:	e00d      	b.n	8008826 <UART_SetConfig+0x228e>
 800880a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800880e:	e00a      	b.n	8008826 <UART_SetConfig+0x228e>
 8008810:	f241 5355 	movw	r3, #5461	; 0x1555
 8008814:	e007      	b.n	8008826 <UART_SetConfig+0x228e>
 8008816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800881a:	e004      	b.n	8008826 <UART_SetConfig+0x228e>
 800881c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008820:	e001      	b.n	8008826 <UART_SetConfig+0x228e>
 8008822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	6852      	ldr	r2, [r2, #4]
 800882a:	0852      	lsrs	r2, r2, #1
 800882c:	441a      	add	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	fbb2 f3f3 	udiv	r3, r2, r3
 8008836:	b29b      	uxth	r3, r3
 8008838:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800883a:	e003      	b.n	8008844 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8008842:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008846:	2b0f      	cmp	r3, #15
 8008848:	d908      	bls.n	800885c <UART_SetConfig+0x22c4>
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008850:	d204      	bcs.n	800885c <UART_SetConfig+0x22c4>
    {
      huart->Instance->BRR = usartdiv;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008858:	60da      	str	r2, [r3, #12]
 800885a:	e002      	b.n	8008862 <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800887e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008882:	4618      	mov	r0, r3
 8008884:	3738      	adds	r7, #56	; 0x38
 8008886:	46bd      	mov	sp, r7
 8008888:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800888c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00a      	beq.n	80088b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00a      	beq.n	80088d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00a      	beq.n	80088fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fe:	f003 0308 	and.w	r3, r3, #8
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008920:	f003 0310 	and.w	r3, r3, #16
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00a      	beq.n	800893e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	f003 0320 	and.w	r3, r3, #32
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01a      	beq.n	80089a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800898a:	d10a      	bne.n	80089a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00a      	beq.n	80089c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	605a      	str	r2, [r3, #4]
  }
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af02      	add	r7, sp, #8
 80089d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80089e0:	f7f7 fe84 	bl	80006ec <HAL_GetTick>
 80089e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0308 	and.w	r3, r3, #8
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d10e      	bne.n	8008a12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f82c 	bl	8008a60 <UART_WaitOnFlagUntilTimeout>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e022      	b.n	8008a58 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d10e      	bne.n	8008a3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f816 	bl	8008a60 <UART_WaitOnFlagUntilTimeout>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e00c      	b.n	8008a58 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a70:	e02c      	b.n	8008acc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a78:	d028      	beq.n	8008acc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7a:	f7f7 fe37 	bl	80006ec <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d302      	bcc.n	8008a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d11d      	bne.n	8008acc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a9e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689a      	ldr	r2, [r3, #8]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 0201 	bic.w	r2, r2, #1
 8008aae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e00f      	b.n	8008aec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	69da      	ldr	r2, [r3, #28]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	bf0c      	ite	eq
 8008adc:	2301      	moveq	r3, #1
 8008ade:	2300      	movne	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d0c3      	beq.n	8008a72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d101      	bne.n	8008b0a <HAL_UARTEx_DisableFifoMode+0x16>
 8008b06:	2302      	movs	r3, #2
 8008b08:	e027      	b.n	8008b5a <HAL_UARTEx_DisableFifoMode+0x66>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2224      	movs	r2, #36	; 0x24
 8008b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f022 0201 	bic.w	r2, r2, #1
 8008b30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	e02d      	b.n	8008bda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2224      	movs	r2, #36	; 0x24
 8008b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f022 0201 	bic.w	r2, r2, #1
 8008ba4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f850 	bl	8008c60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d101      	bne.n	8008bfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e02d      	b.n	8008c56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2224      	movs	r2, #36	; 0x24
 8008c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0201 	bic.w	r2, r2, #1
 8008c20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f812 	bl	8008c60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b089      	sub	sp, #36	; 0x24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008c68:	4a2f      	ldr	r2, [pc, #188]	; (8008d28 <UARTEx_SetNbDataToProcess+0xc8>)
 8008c6a:	f107 0314 	add.w	r3, r7, #20
 8008c6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c72:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008c76:	4a2d      	ldr	r2, [pc, #180]	; (8008d2c <UARTEx_SetNbDataToProcess+0xcc>)
 8008c78:	f107 030c 	add.w	r3, r7, #12
 8008c7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c80:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d108      	bne.n	8008c9e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c9c:	e03d      	b.n	8008d1a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c9e:	2308      	movs	r3, #8
 8008ca0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ca2:	2308      	movs	r3, #8
 8008ca4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	0e5b      	lsrs	r3, r3, #25
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	f003 0307 	and.w	r3, r3, #7
 8008cb4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	0f5b      	lsrs	r3, r3, #29
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	f003 0307 	and.w	r3, r3, #7
 8008cc4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008cc6:	7fbb      	ldrb	r3, [r7, #30]
 8008cc8:	7f3a      	ldrb	r2, [r7, #28]
 8008cca:	f107 0120 	add.w	r1, r7, #32
 8008cce:	440a      	add	r2, r1
 8008cd0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008cd4:	fb02 f303 	mul.w	r3, r2, r3
 8008cd8:	7f3a      	ldrb	r2, [r7, #28]
 8008cda:	f107 0120 	add.w	r1, r7, #32
 8008cde:	440a      	add	r2, r1
 8008ce0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008ce4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008cf0:	7ffb      	ldrb	r3, [r7, #31]
 8008cf2:	7f7a      	ldrb	r2, [r7, #29]
 8008cf4:	f107 0120 	add.w	r1, r7, #32
 8008cf8:	440a      	add	r2, r1
 8008cfa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008cfe:	fb02 f303 	mul.w	r3, r2, r3
 8008d02:	7f7a      	ldrb	r2, [r7, #29]
 8008d04:	f107 0120 	add.w	r1, r7, #32
 8008d08:	440a      	add	r2, r1
 8008d0a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008d0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d1a:	bf00      	nop
 8008d1c:	3724      	adds	r7, #36	; 0x24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	0800c8e0 	.word	0x0800c8e0
 8008d2c:	0800c8e8 	.word	0x0800c8e8

08008d30 <_ZN3PIDC1Ev>:
 * OutPut()でFloatを取り出せば速度型のPID制御が簡単にできるはず。
 */

#include "PID.hpp"

PID::PID(){
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	4a04      	ldr	r2, [pc, #16]	; (8008d4c <_ZN3PIDC1Ev+0x1c>)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	601a      	str	r2, [r3, #0]

}
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	0800c924 	.word	0x0800c924

08008d50 <_ZN3PIDD1Ev>:
	// TODO Auto-generated constructor stub

	mError.fill(0);
}

PID::~PID() {
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	4a04      	ldr	r2, [pc, #16]	; (8008d6c <_ZN3PIDD1Ev+0x1c>)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	0800c924 	.word	0x0800c924

08008d70 <_ZN3PIDD0Ev>:
PID::~PID() {
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
}
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff ffe9 	bl	8008d50 <_ZN3PIDD1Ev>
 8008d7e:	2128      	movs	r1, #40	; 0x28
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f002 f879 	bl	800ae78 <_ZdlPvj>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <_ZN7ArgCtrlC1Ev>:
 *      Author: watashi
 */

#include "ArgCtrl.hpp"

ArgCtrl::ArgCtrl() {
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	4a0c      	ldr	r2, [pc, #48]	; (8008dcc <_ZN7ArgCtrlC1Ev+0x3c>)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mArg = 0;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f04f 0200 	mov.w	r2, #0
 8008da4:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f04f 0200 	mov.w	r2, #0
 8008db4:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f04f 0200 	mov.w	r2, #0
 8008dbc:	611a      	str	r2, [r3, #16]
}
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	0800c934 	.word	0x0800c934

08008dd0 <_ZN7ArgCtrlD1Ev>:

ArgCtrl::~ArgCtrl() {
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	4a0c      	ldr	r2, [pc, #48]	; (8008e0c <_ZN7ArgCtrlD1Ev+0x3c>)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	mArg = 0;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f04f 0200 	mov.w	r2, #0
 8008dec:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f04f 0200 	mov.w	r2, #0
 8008df4:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f04f 0200 	mov.w	r2, #0
 8008dfc:	611a      	str	r2, [r3, #16]
}
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	0800c934 	.word	0x0800c934

08008e10 <_ZN7ArgCtrlD0Ev>:
ArgCtrl::~ArgCtrl() {
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
}
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff ffd9 	bl	8008dd0 <_ZN7ArgCtrlD1Ev>
 8008e1e:	211c      	movs	r1, #28
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f002 f829 	bl	800ae78 <_ZdlPvj>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <_ZN9DebugCtrlC1Ev>:
 *      Author: watashi
 */

#include "DebugCtrl.hpp"

DebugCtrl::DebugCtrl() {
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	4a0b      	ldr	r2, [pc, #44]	; (8008e68 <_ZN9DebugCtrlC1Ev+0x38>)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	3304      	adds	r3, #4
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 f918 	bl	8009078 <_ZN9DebugInfoC1Ev>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3314      	adds	r3, #20
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 f991 	bl	8009174 <_ZN13DebugInfoTinyC1Ev>
	// TODO Auto-generated constructor stub
	mDebugStatus = 0;
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	f642 5320 	movw	r3, #11552	; 0x2d20
 8008e58:	4413      	add	r3, r2
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	601a      	str	r2, [r3, #0]
}
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	0800c944 	.word	0x0800c944

08008e6c <_ZN9DebugCtrlD1Ev>:

DebugCtrl::~DebugCtrl() {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	4a08      	ldr	r2, [pc, #32]	; (8008e98 <_ZN9DebugCtrlD1Ev+0x2c>)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3314      	adds	r3, #20
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 f98c 	bl	800919c <_ZN13DebugInfoTinyD1Ev>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 f909 	bl	80090a0 <_ZN9DebugInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	0800c944 	.word	0x0800c944

08008e9c <_ZN9DebugCtrlD0Ev>:
DebugCtrl::~DebugCtrl() {
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
}
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f7ff ffe1 	bl	8008e6c <_ZN9DebugCtrlD1Ev>
 8008eaa:	f642 5124 	movw	r1, #11556	; 0x2d24
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 ffe2 	bl	800ae78 <_ZdlPvj>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8008ebe:	b5b0      	push	{r4, r5, r7, lr}
 8008ec0:	b082      	sub	sp, #8
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681c      	ldr	r4, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 f835 	bl	8008f40 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 8008ed6:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008ed8:	461a      	mov	r2, r3
 8008eda:	4629      	mov	r1, r5
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 f83a 	bl	8008f56 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 f811 	bl	8008f0c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4618      	mov	r0, r3
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bdb0      	pop	{r4, r5, r7, pc}

08008ef4 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f838 	bl	8008f72 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6819      	ldr	r1, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	119b      	asrs	r3, r3, #6
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8008f26:	461a      	mov	r2, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f82e 	bl	8008f8a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff ffdf 	bl	8008ef4 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f823 	bl	8008fb0 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>
    }
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f825 	bl	8008fca <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	607a      	str	r2, [r7, #4]
	if (__p)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d005      	beq.n	8008fa8 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	68b9      	ldr	r1, [r7, #8]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 f81c 	bl	8008fe0 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>
      }
 8008fa8:	bf00      	nop
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f829 	bl	8009014 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>
    }
 8008fc2:	bf00      	nop
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008fca:	b480      	push	{r7}
 8008fcc:	b083      	sub	sp, #12
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	68b9      	ldr	r1, [r7, #8]
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 f827 	bl	8009044 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>
 8008ff6:	bf00      	nop
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	429a      	cmp	r2, r3
 8009024:	d00a      	beq.n	800903c <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7ff ffe9 	bl	8008ffe <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 800902c:	4603      	mov	r3, r0
 800902e:	4618      	mov	r0, r3
 8009030:	f000 f815 	bl	800905e <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>
	  for (; __first != __last; ++__first)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3340      	adds	r3, #64	; 0x40
 8009038:	607b      	str	r3, [r7, #4]
 800903a:	e7f0      	b.n	800901e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0xa>
	}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8009050:	68b8      	ldr	r0, [r7, #8]
 8009052:	f001 ff0f 	bl	800ae74 <_ZdlPv>
      }
 8009056:	bf00      	nop
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>:
    _Destroy(_Tp* __pointer)
 800905e:	b580      	push	{r7, lr}
 8009060:	b082      	sub	sp, #8
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	4798      	blx	r3
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <_ZN9DebugInfoC1Ev>:

DebugInfo::SendMotorData::~SendMotorData(){
	//destructor
}

DebugInfo::DebugInfo() {
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	4a06      	ldr	r2, [pc, #24]	; (800909c <_ZN9DebugInfoC1Ev+0x24>)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	3304      	adds	r3, #4
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f82c 	bl	80090e8 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
	// TODO Auto-generated constructor stub
}
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	0800c954 	.word	0x0800c954

080090a0 <_ZN9DebugInfoD1Ev>:

DebugInfo::~DebugInfo() {
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	4a06      	ldr	r2, [pc, #24]	; (80090c4 <_ZN9DebugInfoD1Ev+0x24>)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	3304      	adds	r3, #4
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff ff03 	bl	8008ebe <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
	// TODO Auto-generated destructor stub
}
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	0800c954 	.word	0x0800c954

080090c8 <_ZN9DebugInfoD0Ev>:
DebugInfo::~DebugInfo() {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
}
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff ffe5 	bl	80090a0 <_ZN9DebugInfoD1Ev>
 80090d6:	2110      	movs	r1, #16
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 fecd 	bl	800ae78 <_ZdlPvj>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      vector()
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f805 	bl	8009102 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      _Vector_base()
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4618      	mov	r0, r3
 800910e:	f000 f805 	bl	800911c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f80e 	bl	8009146 <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	605a      	str	r2, [r3, #4]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	609a      	str	r2, [r3, #8]
	{ }
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>:
      allocator() throw() { }
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f805 	bl	800915e <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4618      	mov	r0, r3
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <_ZN13DebugInfoTinyC1Ev>:
 * 読み出しがVector型であるのは(float型でないのは)データの個数の変化に対応するため。
 *(配列のfor使って調理してください(にっこり))
 */
#include "DebugInfoTiny.hpp"

DebugInfoTiny::DebugInfoTiny() {
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	4a06      	ldr	r2, [pc, #24]	; (8009198 <_ZN13DebugInfoTinyC1Ev+0x24>)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mCNT = 0;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	605a      	str	r2, [r3, #4]
}
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	0800c964 	.word	0x0800c964

0800919c <_ZN13DebugInfoTinyD1Ev>:

DebugInfoTiny::~DebugInfoTiny() {
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	4a04      	ldr	r2, [pc, #16]	; (80091b8 <_ZN13DebugInfoTinyD1Ev+0x1c>)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	0800c964 	.word	0x0800c964

080091bc <_ZN13DebugInfoTinyD0Ev>:
DebugInfoTiny::~DebugInfoTiny() {
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
}
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff ffe9 	bl	800919c <_ZN13DebugInfoTinyD1Ev>
 80091ca:	f642 5108 	movw	r1, #11528	; 0x2d08
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 fe52 	bl	800ae78 <_ZdlPvj>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <_ZN3PWMC1Ev>:

#include "STM32SystemPack.h"
#include "paramsetting.h"


class PWM {
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	609a      	str	r2, [r3, #8]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4618      	mov	r0, r3
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
	...

080091fc <_ZN9MotorCtrlC1Ev>:
#include "MotorCtrl.hpp"

extern TIM_HandleTypeDef htim1;
extern ADC_HandleTypeDef hadc3;

MotorCtrl::MotorCtrl() {
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	4a25      	ldr	r2, [pc, #148]	; (800929c <_ZN9MotorCtrlC1Ev+0xa0>)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	605a      	str	r2, [r3, #4]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3358      	adds	r3, #88	; 0x58
 8009214:	4618      	mov	r0, r3
 8009216:	f000 f8bd 	bl	8009394 <_ZN8ObserverC1Ev>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009220:	4618      	mov	r0, r3
 8009222:	f7ff ffdc 	bl	80091de <_ZN3PWMC1Ev>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff ffd6 	bl	80091de <_ZN3PWMC1Ev>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff ffd0 	bl	80091de <_ZN3PWMC1Ev>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff ffca 	bl	80091de <_ZN3PWMC1Ev>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009250:	4618      	mov	r0, r3
 8009252:	f7ff fd6d 	bl	8008d30 <_ZN3PIDC1Ev>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff fd67 	bl	8008d30 <_ZN3PIDC1Ev>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff fd61 	bl	8008d30 <_ZN3PIDC1Ev>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff fd5b 	bl	8008d30 <_ZN3PIDC1Ev>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8009280:	4618      	mov	r0, r3
 8009282:	f7ff fd85 	bl	8008d90 <_ZN7ArgCtrlC1Ev>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800928c:	4618      	mov	r0, r3
 800928e:	f7ff fdcf 	bl	8008e30 <_ZN9DebugCtrlC1Ev>
	// TODO Auto-generated constructor stub

}
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	0800c974 	.word	0x0800c974

080092a0 <_ZN9MotorCtrlD1Ev>:

MotorCtrl::~MotorCtrl() {
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	4a18      	ldr	r2, [pc, #96]	; (800930c <_ZN9MotorCtrlD1Ev+0x6c>)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7ff fdd9 	bl	8008e6c <_ZN9DebugCtrlD1Ev>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff fd85 	bl	8008dd0 <_ZN7ArgCtrlD1Ev>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff fd3f 	bl	8008d50 <_ZN3PIDD1Ev>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80092d8:	4618      	mov	r0, r3
 80092da:	f7ff fd39 	bl	8008d50 <_ZN3PIDD1Ev>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7ff fd33 	bl	8008d50 <_ZN3PIDD1Ev>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff fd2d 	bl	8008d50 <_ZN3PIDD1Ev>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	3358      	adds	r3, #88	; 0x58
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f862 	bl	80093c4 <_ZN8ObserverD1Ev>
	// TODO Auto-generated destructor stub
}
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	0800c974 	.word	0x0800c974

08009310 <_ZN9MotorCtrlD0Ev>:
MotorCtrl::~MotorCtrl() {
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
}
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7ff ffc1 	bl	80092a0 <_ZN9MotorCtrlD1Ev>
 800931e:	f642 7164 	movw	r1, #12132	; 0x2f64
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f001 fda8 	bl	800ae78 <_ZdlPvj>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <_ZN6EMFObsC1Ev>:
 *      Author: watashi
 */

#include "EMFObs.hpp"

EMFObs::EMFObs() {
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	4a04      	ldr	r2, [pc, #16]	; (8009350 <_ZN6EMFObsC1Ev+0x1c>)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4618      	mov	r0, r3
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	0800c984 	.word	0x0800c984

08009354 <_ZN6EMFObsD1Ev>:

EMFObs::~EMFObs() {
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	4a04      	ldr	r2, [pc, #16]	; (8009370 <_ZN6EMFObsD1Ev+0x1c>)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	0800c984 	.word	0x0800c984

08009374 <_ZN6EMFObsD0Ev>:
EMFObs::~EMFObs() {
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
}
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7ff ffe9 	bl	8009354 <_ZN6EMFObsD1Ev>
 8009382:	218c      	movs	r1, #140	; 0x8c
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 fd77 	bl	800ae78 <_ZdlPvj>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <_ZN8ObserverC1Ev>:
 *      Author: watashi
 */

#include "Observer.hpp"

Observer::Observer() {
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	4a08      	ldr	r2, [pc, #32]	; (80093c0 <_ZN8ObserverC1Ev+0x2c>)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff ffc4 	bl	8009334 <_ZN6EMFObsC1Ev>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3390      	adds	r3, #144	; 0x90
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 f82f 	bl	8009414 <_ZN4PII2C1Ev>
	// TODO Auto-generated constructor stub
}
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4618      	mov	r0, r3
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	0800c994 	.word	0x0800c994

080093c4 <_ZN8ObserverD1Ev>:

Observer::~Observer() {
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	4a08      	ldr	r2, [pc, #32]	; (80093f0 <_ZN8ObserverD1Ev+0x2c>)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3390      	adds	r3, #144	; 0x90
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 f82c 	bl	8009434 <_ZN4PII2D1Ev>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	3304      	adds	r3, #4
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff ffb7 	bl	8009354 <_ZN6EMFObsD1Ev>
	// TODO Auto-generated destructor stub
}
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4618      	mov	r0, r3
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	0800c994 	.word	0x0800c994

080093f4 <_ZN8ObserverD0Ev>:
Observer::~Observer() {
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
}
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7ff ffe1 	bl	80093c4 <_ZN8ObserverD1Ev>
 8009402:	21f8      	movs	r1, #248	; 0xf8
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 fd37 	bl	800ae78 <_ZdlPvj>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <_ZN4PII2C1Ev>:
 *      Author: watashi
 */

#include "PII2.hpp"

PII2::PII2() {
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	4a04      	ldr	r2, [pc, #16]	; (8009430 <_ZN4PII2C1Ev+0x1c>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	0800c9a4 	.word	0x0800c9a4

08009434 <_ZN4PII2D1Ev>:

PII2::~PII2() {
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	4a04      	ldr	r2, [pc, #16]	; (8009450 <_ZN4PII2D1Ev+0x1c>)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	0800c9a4 	.word	0x0800c9a4

08009454 <_ZN4PII2D0Ev>:
PII2::~PII2() {
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
}
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff ffe9 	bl	8009434 <_ZN4PII2D1Ev>
 8009462:	214c      	movs	r1, #76	; 0x4c
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f001 fd07 	bl	800ae78 <_ZdlPvj>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4618      	mov	r0, r3
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800947a:	4b21      	ldr	r3, [pc, #132]	; (8009500 <_DoInit+0x8c>)
 800947c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2203      	movs	r2, #3
 8009482:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2203      	movs	r2, #3
 8009488:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a1d      	ldr	r2, [pc, #116]	; (8009504 <_DoInit+0x90>)
 800948e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a1d      	ldr	r2, [pc, #116]	; (8009508 <_DoInit+0x94>)
 8009494:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800949c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a14      	ldr	r2, [pc, #80]	; (8009504 <_DoInit+0x90>)
 80094b4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a14      	ldr	r2, [pc, #80]	; (800950c <_DoInit+0x98>)
 80094ba:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2210      	movs	r2, #16
 80094c0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3307      	adds	r3, #7
 80094d8:	4a0d      	ldr	r2, [pc, #52]	; (8009510 <_DoInit+0x9c>)
 80094da:	6810      	ldr	r0, [r2, #0]
 80094dc:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a0c      	ldr	r2, [pc, #48]	; (8009514 <_DoInit+0xa0>)
 80094e2:	6810      	ldr	r0, [r2, #0]
 80094e4:	6018      	str	r0, [r3, #0]
 80094e6:	8891      	ldrh	r1, [r2, #4]
 80094e8:	7992      	ldrb	r2, [r2, #6]
 80094ea:	8099      	strh	r1, [r3, #4]
 80094ec:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	719a      	strb	r2, [r3, #6]
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	24003594 	.word	0x24003594
 8009504:	0800c8f0 	.word	0x0800c8f0
 8009508:	24000200 	.word	0x24000200
 800950c:	24000600 	.word	0x24000600
 8009510:	0800c8fc 	.word	0x0800c8fc
 8009514:	0800c900 	.word	0x0800c900

08009518 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8009524:	2300      	movs	r3, #0
 8009526:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	429a      	cmp	r2, r3
 800953a:	d905      	bls.n	8009548 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	3b01      	subs	r3, #1
 8009544:	61fb      	str	r3, [r7, #28]
 8009546:	e007      	b.n	8009558 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	6939      	ldr	r1, [r7, #16]
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	1acb      	subs	r3, r1, r3
 8009552:	4413      	add	r3, r2
 8009554:	3b01      	subs	r3, #1
 8009556:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	69fa      	ldr	r2, [r7, #28]
 8009562:	4293      	cmp	r3, r2
 8009564:	bf28      	it	cs
 8009566:	4613      	movcs	r3, r2
 8009568:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4293      	cmp	r3, r2
 8009570:	bf28      	it	cs
 8009572:	4613      	movcs	r3, r2
 8009574:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	4413      	add	r3, r2
 800957e:	69fa      	ldr	r2, [r7, #28]
 8009580:	68b9      	ldr	r1, [r7, #8]
 8009582:	4618      	mov	r0, r3
 8009584:	f001 fcb4 	bl	800aef0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	4413      	add	r3, r2
 800958e:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	4413      	add	r3, r2
 8009596:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	4413      	add	r3, r2
 80095a6:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d101      	bne.n	80095b6 <_WriteBlocking+0x9e>
      WrOff = 0u;
 80095b2:	2300      	movs	r3, #0
 80095b4:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1b5      	bne.n	800952e <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 80095c2:	69bb      	ldr	r3, [r7, #24]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3720      	adds	r7, #32
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b088      	sub	sp, #32
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80095e8:	69ba      	ldr	r2, [r7, #24]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d90e      	bls.n	800960e <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	4413      	add	r3, r2
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	68b9      	ldr	r1, [r7, #8]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f001 fc77 	bl	800aef0 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	441a      	add	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800960c:	e01a      	b.n	8009644 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	4413      	add	r3, r2
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	68b9      	ldr	r1, [r7, #8]
 800961e:	4618      	mov	r0, r3
 8009620:	f001 fc66 	bl	800aef0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6858      	ldr	r0, [r3, #4]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	4413      	add	r3, r2
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	4619      	mov	r1, r3
 800963a:	f001 fc59 	bl	800aef0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	60da      	str	r2, [r3, #12]
}
 8009644:	bf00      	nop
 8009646:	3720      	adds	r7, #32
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	429a      	cmp	r2, r3
 8009666:	d808      	bhi.n	800967a <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689a      	ldr	r2, [r3, #8]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	1ad2      	subs	r2, r2, r3
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	4413      	add	r3, r2
 8009674:	3b01      	subs	r3, #1
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	e004      	b.n	8009684 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	3b01      	subs	r3, #1
 8009682:	617b      	str	r3, [r7, #20]
  }
  return r;
 8009684:	697b      	ldr	r3, [r7, #20]
}
 8009686:	4618      	mov	r0, r3
 8009688:	371c      	adds	r7, #28
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
	...

08009694 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	4613      	mov	r3, r2
 80096aa:	005b      	lsls	r3, r3, #1
 80096ac:	4413      	add	r3, r2
 80096ae:	00db      	lsls	r3, r3, #3
 80096b0:	4a1e      	ldr	r2, [pc, #120]	; (800972c <SEGGER_RTT_WriteNoLock+0x98>)
 80096b2:	4413      	add	r3, r2
 80096b4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d017      	beq.n	80096ee <SEGGER_RTT_WriteNoLock+0x5a>
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d302      	bcc.n	80096c8 <SEGGER_RTT_WriteNoLock+0x34>
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d023      	beq.n	800970e <SEGGER_RTT_WriteNoLock+0x7a>
 80096c6:	e029      	b.n	800971c <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80096c8:	6978      	ldr	r0, [r7, #20]
 80096ca:	f7ff ffbf 	bl	800964c <_GetAvailWriteSpace>
 80096ce:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d202      	bcs.n	80096de <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 80096d8:	2300      	movs	r3, #0
 80096da:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80096dc:	e021      	b.n	8009722 <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	69b9      	ldr	r1, [r7, #24]
 80096e6:	6978      	ldr	r0, [r7, #20]
 80096e8:	f7ff ff70 	bl	80095cc <_WriteNoCheck>
    break;
 80096ec:	e019      	b.n	8009722 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80096ee:	6978      	ldr	r0, [r7, #20]
 80096f0:	f7ff ffac 	bl	800964c <_GetAvailWriteSpace>
 80096f4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	4293      	cmp	r3, r2
 80096fc:	bf28      	it	cs
 80096fe:	4613      	movcs	r3, r2
 8009700:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8009702:	69fa      	ldr	r2, [r7, #28]
 8009704:	69b9      	ldr	r1, [r7, #24]
 8009706:	6978      	ldr	r0, [r7, #20]
 8009708:	f7ff ff60 	bl	80095cc <_WriteNoCheck>
    break;
 800970c:	e009      	b.n	8009722 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	69b9      	ldr	r1, [r7, #24]
 8009712:	6978      	ldr	r0, [r7, #20]
 8009714:	f7ff ff00 	bl	8009518 <_WriteBlocking>
 8009718:	61f8      	str	r0, [r7, #28]
    break;
 800971a:	e002      	b.n	8009722 <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 800971c:	2300      	movs	r3, #0
 800971e:	61fb      	str	r3, [r7, #28]
    break;
 8009720:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8009722:	69fb      	ldr	r3, [r7, #28]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3720      	adds	r7, #32
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	24003594 	.word	0x24003594

08009730 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 800973c:	4b0d      	ldr	r3, [pc, #52]	; (8009774 <SEGGER_RTT_Write+0x44>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <SEGGER_RTT_Write+0x18>
 8009744:	f7ff fe96 	bl	8009474 <_DoInit>
  SEGGER_RTT_LOCK();
 8009748:	f3ef 8311 	mrs	r3, BASEPRI
 800974c:	f04f 0120 	mov.w	r1, #32
 8009750:	f381 8811 	msr	BASEPRI, r1
 8009754:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	68b9      	ldr	r1, [r7, #8]
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f7ff ff9a 	bl	8009694 <SEGGER_RTT_WriteNoLock>
 8009760:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8009768:	693b      	ldr	r3, [r7, #16]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	24003594 	.word	0x24003594

08009778 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	1c5a      	adds	r2, r3, #1
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	429a      	cmp	r2, r3
 8009794:	d80e      	bhi.n	80097b4 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4413      	add	r3, r2
 800979e:	78fa      	ldrb	r2, [r7, #3]
 80097a0:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	1c5a      	adds	r2, r3, #1
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689a      	ldr	r2, [r3, #8]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d115      	bne.n	80097ec <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6918      	ldr	r0, [r3, #16]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6819      	ldr	r1, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	461a      	mov	r2, r3
 80097ce:	f7ff ffaf 	bl	8009730 <SEGGER_RTT_Write>
 80097d2:	4602      	mov	r2, r0
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d004      	beq.n	80097e6 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097e2:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80097e4:	e002      	b.n	80097ec <_StoreChar+0x74>
      p->Cnt = 0u;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	609a      	str	r2, [r3, #8]
}
 80097ec:	bf00      	nop
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b08a      	sub	sp, #40	; 0x28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
 8009800:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8009806:	2301      	movs	r3, #1
 8009808:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800980a:	2301      	movs	r3, #1
 800980c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800980e:	e007      	b.n	8009820 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8009810:	6a3a      	ldr	r2, [r7, #32]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	fbb2 f3f3 	udiv	r3, r2, r3
 8009818:	623b      	str	r3, [r7, #32]
    Width++;
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	3301      	adds	r3, #1
 800981e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8009820:	6a3a      	ldr	r2, [r7, #32]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	429a      	cmp	r2, r3
 8009826:	d2f3      	bcs.n	8009810 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	429a      	cmp	r2, r3
 800982e:	d901      	bls.n	8009834 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8009834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d125      	bne.n	800988a <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 800983e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009840:	2b00      	cmp	r3, #0
 8009842:	d022      	beq.n	800988a <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8009844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009846:	f003 0302 	and.w	r3, r3, #2
 800984a:	2b00      	cmp	r3, #0
 800984c:	d005      	beq.n	800985a <_PrintUnsigned+0x66>
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <_PrintUnsigned+0x66>
        c = '0';
 8009854:	2330      	movs	r3, #48	; 0x30
 8009856:	76fb      	strb	r3, [r7, #27]
 8009858:	e001      	b.n	800985e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800985a:	2320      	movs	r3, #32
 800985c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800985e:	e00b      	b.n	8009878 <_PrintUnsigned+0x84>
        FieldWidth--;
 8009860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009862:	3b01      	subs	r3, #1
 8009864:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8009866:	7efb      	ldrb	r3, [r7, #27]
 8009868:	4619      	mov	r1, r3
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f7ff ff84 	bl	8009778 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	db07      	blt.n	8009888 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987a:	2b00      	cmp	r3, #0
 800987c:	d005      	beq.n	800988a <_PrintUnsigned+0x96>
 800987e:	69fa      	ldr	r2, [r7, #28]
 8009880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009882:	429a      	cmp	r2, r3
 8009884:	d3ec      	bcc.n	8009860 <_PrintUnsigned+0x6c>
 8009886:	e000      	b.n	800988a <_PrintUnsigned+0x96>
          break;
 8009888:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	db55      	blt.n	800993e <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d903      	bls.n	80098a0 <_PrintUnsigned+0xac>
        NumDigits--;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	3b01      	subs	r3, #1
 800989c:	603b      	str	r3, [r7, #0]
 800989e:	e009      	b.n	80098b4 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a8:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d200      	bcs.n	80098b4 <_PrintUnsigned+0xc0>
          break;
 80098b2:	e005      	b.n	80098c0 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	fb02 f303 	mul.w	r3, r2, r3
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80098be:	e7e8      	b.n	8009892 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c8:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ce:	fb02 f303 	mul.w	r3, r2, r3
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80098d8:	4a1b      	ldr	r2, [pc, #108]	; (8009948 <_PrintUnsigned+0x154>)
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	4413      	add	r3, r2
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	4619      	mov	r1, r3
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f7ff ff48 	bl	8009778 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	db08      	blt.n	8009902 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 80098f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f8:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1df      	bne.n	80098c0 <_PrintUnsigned+0xcc>
 8009900:	e000      	b.n	8009904 <_PrintUnsigned+0x110>
        break;
 8009902:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8009904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	d017      	beq.n	800993e <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	2b00      	cmp	r3, #0
 8009912:	d014      	beq.n	800993e <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009914:	e00a      	b.n	800992c <_PrintUnsigned+0x138>
          FieldWidth--;
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	3b01      	subs	r3, #1
 800991a:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 800991c:	2120      	movs	r1, #32
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f7ff ff2a 	bl	8009778 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	db07      	blt.n	800993c <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	2b00      	cmp	r3, #0
 8009930:	d005      	beq.n	800993e <_PrintUnsigned+0x14a>
 8009932:	69fa      	ldr	r2, [r7, #28]
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	429a      	cmp	r2, r3
 8009938:	d3ed      	bcc.n	8009916 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 800993a:	e000      	b.n	800993e <_PrintUnsigned+0x14a>
            break;
 800993c:	bf00      	nop
}
 800993e:	bf00      	nop
 8009940:	3728      	adds	r7, #40	; 0x28
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	0800c9ac 	.word	0x0800c9ac

0800994c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af02      	add	r7, sp, #8
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
 8009958:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	bfb8      	it	lt
 8009960:	425b      	neglt	r3, r3
 8009962:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8009964:	2301      	movs	r3, #1
 8009966:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8009968:	e007      	b.n	800997a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	fb92 f3f3 	sdiv	r3, r2, r3
 8009972:	613b      	str	r3, [r7, #16]
    Width++;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	3301      	adds	r3, #1
 8009978:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	429a      	cmp	r2, r3
 8009980:	daf3      	bge.n	800996a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	429a      	cmp	r2, r3
 8009988:	d901      	bls.n	800998e <_PrintInt+0x42>
    Width = NumDigits;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00a      	beq.n	80099aa <_PrintInt+0x5e>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	db04      	blt.n	80099a4 <_PrintInt+0x58>
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	f003 0304 	and.w	r3, r3, #4
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <_PrintInt+0x5e>
    FieldWidth--;
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	f003 0302 	and.w	r3, r3, #2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <_PrintInt+0x6e>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d01c      	beq.n	80099f4 <_PrintInt+0xa8>
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d117      	bne.n	80099f4 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d014      	beq.n	80099f4 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80099ca:	e00a      	b.n	80099e2 <_PrintInt+0x96>
        FieldWidth--;
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80099d2:	2120      	movs	r1, #32
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f7ff fecf 	bl	8009778 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	db07      	blt.n	80099f2 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d005      	beq.n	80099f4 <_PrintInt+0xa8>
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d3ed      	bcc.n	80099cc <_PrintInt+0x80>
 80099f0:	e000      	b.n	80099f4 <_PrintInt+0xa8>
          break;
 80099f2:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	db4a      	blt.n	8009a92 <_PrintInt+0x146>
    if (v < 0) {
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	da07      	bge.n	8009a12 <_PrintInt+0xc6>
      v = -v;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	425b      	negs	r3, r3
 8009a06:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8009a08:	212d      	movs	r1, #45	; 0x2d
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f7ff feb4 	bl	8009778 <_StoreChar>
 8009a10:	e008      	b.n	8009a24 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	f003 0304 	and.w	r3, r3, #4
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d003      	beq.n	8009a24 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8009a1c:	212b      	movs	r1, #43	; 0x2b
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f7ff feaa 	bl	8009778 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	db32      	blt.n	8009a92 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	f003 0302 	and.w	r3, r3, #2
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d01f      	beq.n	8009a76 <_PrintInt+0x12a>
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	f003 0301 	and.w	r3, r3, #1
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d11a      	bne.n	8009a76 <_PrintInt+0x12a>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d117      	bne.n	8009a76 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d014      	beq.n	8009a76 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009a4c:	e00a      	b.n	8009a64 <_PrintInt+0x118>
            FieldWidth--;
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	3b01      	subs	r3, #1
 8009a52:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8009a54:	2130      	movs	r1, #48	; 0x30
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff fe8e 	bl	8009778 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	db07      	blt.n	8009a74 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d005      	beq.n	8009a76 <_PrintInt+0x12a>
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d3ed      	bcc.n	8009a4e <_PrintInt+0x102>
 8009a72:	e000      	b.n	8009a76 <_PrintInt+0x12a>
              break;
 8009a74:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	db09      	blt.n	8009a92 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8009a7e:	68b9      	ldr	r1, [r7, #8]
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f7ff feb1 	bl	80097f4 <_PrintUnsigned>
      }
    }
  }
}
 8009a92:	bf00      	nop
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
	...

08009a9c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b0a2      	sub	sp, #136	; 0x88
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8009aa8:	f107 0310 	add.w	r3, r7, #16
 8009aac:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8009aae:	2340      	movs	r3, #64	; 0x40
 8009ab0:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8009acc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 8161 	beq.w	8009d98 <SEGGER_RTT_vprintf+0x2fc>
      break;
    }
    if (c == '%') {
 8009ad6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009ada:	2b25      	cmp	r3, #37	; 0x25
 8009adc:	f040 814f 	bne.w	8009d7e <SEGGER_RTT_vprintf+0x2e2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8009af0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009af4:	3b23      	subs	r3, #35	; 0x23
 8009af6:	2b0d      	cmp	r3, #13
 8009af8:	d83e      	bhi.n	8009b78 <SEGGER_RTT_vprintf+0xdc>
 8009afa:	a201      	add	r2, pc, #4	; (adr r2, 8009b00 <SEGGER_RTT_vprintf+0x64>)
 8009afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b00:	08009b69 	.word	0x08009b69
 8009b04:	08009b79 	.word	0x08009b79
 8009b08:	08009b79 	.word	0x08009b79
 8009b0c:	08009b79 	.word	0x08009b79
 8009b10:	08009b79 	.word	0x08009b79
 8009b14:	08009b79 	.word	0x08009b79
 8009b18:	08009b79 	.word	0x08009b79
 8009b1c:	08009b79 	.word	0x08009b79
 8009b20:	08009b59 	.word	0x08009b59
 8009b24:	08009b79 	.word	0x08009b79
 8009b28:	08009b39 	.word	0x08009b39
 8009b2c:	08009b79 	.word	0x08009b79
 8009b30:	08009b79 	.word	0x08009b79
 8009b34:	08009b49 	.word	0x08009b49
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8009b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b3a:	f043 0301 	orr.w	r3, r3, #1
 8009b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	3301      	adds	r3, #1
 8009b44:	60bb      	str	r3, [r7, #8]
 8009b46:	e01a      	b.n	8009b7e <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8009b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b4a:	f043 0302 	orr.w	r3, r3, #2
 8009b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	3301      	adds	r3, #1
 8009b54:	60bb      	str	r3, [r7, #8]
 8009b56:	e012      	b.n	8009b7e <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8009b58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b5a:	f043 0304 	orr.w	r3, r3, #4
 8009b5e:	673b      	str	r3, [r7, #112]	; 0x70
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	3301      	adds	r3, #1
 8009b64:	60bb      	str	r3, [r7, #8]
 8009b66:	e00a      	b.n	8009b7e <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8009b68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b6a:	f043 0308 	orr.w	r3, r3, #8
 8009b6e:	673b      	str	r3, [r7, #112]	; 0x70
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	3301      	adds	r3, #1
 8009b74:	60bb      	str	r3, [r7, #8]
 8009b76:	e002      	b.n	8009b7e <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b7c:	bf00      	nop
        }
      } while (v);
 8009b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1b1      	bne.n	8009ae8 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8009b84:	2300      	movs	r3, #0
 8009b86:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 8009b90:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009b94:	2b2f      	cmp	r3, #47	; 0x2f
 8009b96:	d912      	bls.n	8009bbe <SEGGER_RTT_vprintf+0x122>
 8009b98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009b9c:	2b39      	cmp	r3, #57	; 0x39
 8009b9e:	d80e      	bhi.n	8009bbe <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8009ba6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ba8:	4613      	mov	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009bb6:	4413      	add	r3, r2
 8009bb8:	3b30      	subs	r3, #48	; 0x30
 8009bba:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8009bbc:	e7e4      	b.n	8009b88 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8009bca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009bce:	2b2e      	cmp	r3, #46	; 0x2e
 8009bd0:	d11d      	bne.n	8009c0e <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8009be0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009be4:	2b2f      	cmp	r3, #47	; 0x2f
 8009be6:	d912      	bls.n	8009c0e <SEGGER_RTT_vprintf+0x172>
 8009be8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009bec:	2b39      	cmp	r3, #57	; 0x39
 8009bee:	d80e      	bhi.n	8009c0e <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8009bf6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	461a      	mov	r2, r3
 8009c02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009c06:	4413      	add	r3, r2
 8009c08:	3b30      	subs	r3, #48	; 0x30
 8009c0a:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8009c0c:	e7e4      	b.n	8009bd8 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8009c16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009c1a:	2b6c      	cmp	r3, #108	; 0x6c
 8009c1c:	d003      	beq.n	8009c26 <SEGGER_RTT_vprintf+0x18a>
 8009c1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009c22:	2b68      	cmp	r3, #104	; 0x68
 8009c24:	d107      	bne.n	8009c36 <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8009c34:	e7ef      	b.n	8009c16 <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8009c36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009c3a:	2b64      	cmp	r3, #100	; 0x64
 8009c3c:	d028      	beq.n	8009c90 <SEGGER_RTT_vprintf+0x1f4>
 8009c3e:	2b64      	cmp	r3, #100	; 0x64
 8009c40:	dc07      	bgt.n	8009c52 <SEGGER_RTT_vprintf+0x1b6>
 8009c42:	2b58      	cmp	r3, #88	; 0x58
 8009c44:	d04a      	beq.n	8009cdc <SEGGER_RTT_vprintf+0x240>
 8009c46:	2b63      	cmp	r3, #99	; 0x63
 8009c48:	d00f      	beq.n	8009c6a <SEGGER_RTT_vprintf+0x1ce>
 8009c4a:	2b25      	cmp	r3, #37	; 0x25
 8009c4c:	f000 808c 	beq.w	8009d68 <SEGGER_RTT_vprintf+0x2cc>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8009c50:	e091      	b.n	8009d76 <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8009c52:	2b73      	cmp	r3, #115	; 0x73
 8009c54:	d055      	beq.n	8009d02 <SEGGER_RTT_vprintf+0x266>
 8009c56:	2b73      	cmp	r3, #115	; 0x73
 8009c58:	dc02      	bgt.n	8009c60 <SEGGER_RTT_vprintf+0x1c4>
 8009c5a:	2b70      	cmp	r3, #112	; 0x70
 8009c5c:	d071      	beq.n	8009d42 <SEGGER_RTT_vprintf+0x2a6>
        break;
 8009c5e:	e08a      	b.n	8009d76 <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8009c60:	2b75      	cmp	r3, #117	; 0x75
 8009c62:	d028      	beq.n	8009cb6 <SEGGER_RTT_vprintf+0x21a>
 8009c64:	2b78      	cmp	r3, #120	; 0x78
 8009c66:	d039      	beq.n	8009cdc <SEGGER_RTT_vprintf+0x240>
        break;
 8009c68:	e085      	b.n	8009d76 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	1d19      	adds	r1, r3, #4
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6011      	str	r1, [r2, #0]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8009c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8009c7e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8009c82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009c86:	4611      	mov	r1, r2
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7ff fd75 	bl	8009778 <_StoreChar>
        break;
 8009c8e:	e072      	b.n	8009d76 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	1d19      	adds	r1, r3, #4
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	6011      	str	r1, [r2, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8009c9e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8009ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ca4:	9301      	str	r3, [sp, #4]
 8009ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cac:	220a      	movs	r2, #10
 8009cae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009cb0:	f7ff fe4c 	bl	800994c <_PrintInt>
        break;
 8009cb4:	e05f      	b.n	8009d76 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	1d19      	adds	r1, r3, #4
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	6011      	str	r1, [r2, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8009cc4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009cc6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8009cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cd4:	220a      	movs	r2, #10
 8009cd6:	f7ff fd8d 	bl	80097f4 <_PrintUnsigned>
        break;
 8009cda:	e04c      	b.n	8009d76 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	1d19      	adds	r1, r3, #4
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	6011      	str	r1, [r2, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8009cea:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009cec:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8009cf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cf2:	9301      	str	r3, [sp, #4]
 8009cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cfa:	2210      	movs	r2, #16
 8009cfc:	f7ff fd7a 	bl	80097f4 <_PrintUnsigned>
        break;
 8009d00:	e039      	b.n	8009d76 <SEGGER_RTT_vprintf+0x2da>
          const char * s = va_arg(*pParamList, const char *);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	1d19      	adds	r1, r3, #4
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	6011      	str	r1, [r2, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	66bb      	str	r3, [r7, #104]	; 0x68
            c = *s;
 8009d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 8009d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 8009d1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00b      	beq.n	8009d3e <SEGGER_RTT_vprintf+0x2a2>
           _StoreChar(&BufferDesc, c);
 8009d26:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009d2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009d2e:	4611      	mov	r1, r2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff fd21 	bl	8009778 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8009d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	dae9      	bge.n	8009d10 <SEGGER_RTT_vprintf+0x274>
        break;
 8009d3c:	e01b      	b.n	8009d76 <SEGGER_RTT_vprintf+0x2da>
              break;
 8009d3e:	bf00      	nop
        break;
 8009d40:	e019      	b.n	8009d76 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	1d19      	adds	r1, r3, #4
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	6011      	str	r1, [r2, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8009d50:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009d52:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8009d56:	2300      	movs	r3, #0
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	2308      	movs	r3, #8
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	2308      	movs	r3, #8
 8009d60:	2210      	movs	r2, #16
 8009d62:	f7ff fd47 	bl	80097f4 <_PrintUnsigned>
        break;
 8009d66:	e006      	b.n	8009d76 <SEGGER_RTT_vprintf+0x2da>
        _StoreChar(&BufferDesc, '%');
 8009d68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009d6c:	2125      	movs	r1, #37	; 0x25
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff fd02 	bl	8009778 <_StoreChar>
        break;
 8009d74:	bf00      	nop
      }
      sFormat++;
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	60bb      	str	r3, [r7, #8]
 8009d7c:	e007      	b.n	8009d8e <SEGGER_RTT_vprintf+0x2f2>
    } else {
      _StoreChar(&BufferDesc, c);
 8009d7e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009d82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009d86:	4611      	mov	r1, r2
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7ff fcf5 	bl	8009778 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8009d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f6bf ae94 	bge.w	8009abe <SEGGER_RTT_vprintf+0x22>
 8009d96:	e000      	b.n	8009d9a <SEGGER_RTT_vprintf+0x2fe>
      break;
 8009d98:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8009d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dd0d      	ble.n	8009dbc <SEGGER_RTT_vprintf+0x320>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8009da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d006      	beq.n	8009db4 <SEGGER_RTT_vprintf+0x318>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8009da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009da8:	f107 0310 	add.w	r3, r7, #16
 8009dac:	4619      	mov	r1, r3
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f7ff fcbe 	bl	8009730 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8009db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009db6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009db8:	4413      	add	r3, r2
 8009dba:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8009dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3780      	adds	r7, #128	; 0x80
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop

08009dc8 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8009dc8:	b40e      	push	{r1, r2, r3}
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b085      	sub	sp, #20
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8009dd2:	f107 0320 	add.w	r3, r7, #32
 8009dd6:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8009dd8:	f107 0308 	add.w	r3, r7, #8
 8009ddc:	461a      	mov	r2, r3
 8009dde:	69f9      	ldr	r1, [r7, #28]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f7ff fe5b 	bl	8009a9c <SEGGER_RTT_vprintf>
 8009de6:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8009de8:	68fb      	ldr	r3, [r7, #12]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009df4:	b003      	add	sp, #12
 8009df6:	4770      	bx	lr

08009df8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b090      	sub	sp, #64	; 0x40
 8009dfc:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8009dfe:	463b      	mov	r3, r7
 8009e00:	2240      	movs	r2, #64	; 0x40
 8009e02:	2100      	movs	r1, #0
 8009e04:	4618      	mov	r0, r3
 8009e06:	f001 f87e 	bl	800af06 <memset>

  /** Common config 
  */
  hadc3.Instance = ADC3;
 8009e0a:	4b3f      	ldr	r3, [pc, #252]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e0c:	4a3f      	ldr	r2, [pc, #252]	; (8009f0c <MX_ADC3_Init+0x114>)
 8009e0e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8009e10:	4b3d      	ldr	r3, [pc, #244]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e12:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8009e16:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8009e18:	4b3b      	ldr	r3, [pc, #236]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8009e1e:	4b3a      	ldr	r3, [pc, #232]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e20:	2201      	movs	r2, #1
 8009e22:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009e24:	4b38      	ldr	r3, [pc, #224]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e26:	2204      	movs	r2, #4
 8009e28:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8009e2a:	4b37      	ldr	r3, [pc, #220]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8009e30:	4b35      	ldr	r3, [pc, #212]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8009e36:	4b34      	ldr	r3, [pc, #208]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e38:	2201      	movs	r2, #1
 8009e3a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8009e3c:	4b32      	ldr	r3, [pc, #200]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8009e42:	4b31      	ldr	r3, [pc, #196]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009e48:	4b2f      	ldr	r3, [pc, #188]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.OversamplingMode = DISABLE;
 8009e4e:	4b2e      	ldr	r3, [pc, #184]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8009e56:	482c      	ldr	r0, [pc, #176]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e58:	f7f6 fd76 	bl	8000948 <HAL_ADC_Init>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8009e62:	f000 fb69 	bl	800a538 <Error_Handler>
  }
  /** Disable Injected Queue 
  */
  HAL_ADCEx_DisableInjectedQueue(&hadc3);
 8009e66:	4828      	ldr	r0, [pc, #160]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009e68:	f7f8 f880 	bl	8001f6c <HAL_ADCEx_DisableInjectedQueue>
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8009e6c:	4b28      	ldr	r3, [pc, #160]	; (8009f10 <MX_ADC3_Init+0x118>)
 8009e6e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8009e70:	2309      	movs	r3, #9
 8009e72:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8009e74:	2300      	movs	r3, #0
 8009e76:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8009e78:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009e7c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8009e7e:	2304      	movs	r3, #4
 8009e80:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedLeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8009e86:	2300      	movs	r3, #0
 8009e88:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8009e94:	2300      	movs	r3, #0
 8009e96:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO2;
 8009ea0:	23a0      	movs	r3, #160	; 0xa0
 8009ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8009ea4:	2380      	movs	r3, #128	; 0x80
 8009ea6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8009eae:	463b      	mov	r3, r7
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4815      	ldr	r0, [pc, #84]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009eb4:	f7f7 fb74 	bl	80015a0 <HAL_ADCEx_InjectedConfigChannel>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 8009ebe:	f000 fb3b 	bl	800a538 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8009ec6:	f240 130f 	movw	r3, #271	; 0x10f
 8009eca:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8009ecc:	463b      	mov	r3, r7
 8009ece:	4619      	mov	r1, r3
 8009ed0:	480d      	ldr	r0, [pc, #52]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009ed2:	f7f7 fb65 	bl	80015a0 <HAL_ADCEx_InjectedConfigChannel>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8009edc:	f000 fb2c 	bl	800a538 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8009ee0:	4b0c      	ldr	r3, [pc, #48]	; (8009f14 <MX_ADC3_Init+0x11c>)
 8009ee2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8009ee4:	f240 2315 	movw	r3, #533	; 0x215
 8009ee8:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8009eea:	463b      	mov	r3, r7
 8009eec:	4619      	mov	r1, r3
 8009eee:	4806      	ldr	r0, [pc, #24]	; (8009f08 <MX_ADC3_Init+0x110>)
 8009ef0:	f7f7 fb56 	bl	80015a0 <HAL_ADCEx_InjectedConfigChannel>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8009efa:	f000 fb1d 	bl	800a538 <Error_Handler>
  }

}
 8009efe:	bf00      	nop
 8009f00:	3740      	adds	r7, #64	; 0x40
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	2400363c 	.word	0x2400363c
 8009f0c:	58026000 	.word	0x58026000
 8009f10:	04300002 	.word	0x04300002
 8009f14:	19200040 	.word	0x19200040

08009f18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08a      	sub	sp, #40	; 0x28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f20:	f107 0314 	add.w	r3, r7, #20
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	605a      	str	r2, [r3, #4]
 8009f2a:	609a      	str	r2, [r3, #8]
 8009f2c:	60da      	str	r2, [r3, #12]
 8009f2e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a2a      	ldr	r2, [pc, #168]	; (8009fe0 <HAL_ADC_MspInit+0xc8>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d14d      	bne.n	8009fd6 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8009f3a:	4b2a      	ldr	r3, [pc, #168]	; (8009fe4 <HAL_ADC_MspInit+0xcc>)
 8009f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f40:	4a28      	ldr	r2, [pc, #160]	; (8009fe4 <HAL_ADC_MspInit+0xcc>)
 8009f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f4a:	4b26      	ldr	r3, [pc, #152]	; (8009fe4 <HAL_ADC_MspInit+0xcc>)
 8009f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f54:	613b      	str	r3, [r7, #16]
 8009f56:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009f58:	4b22      	ldr	r3, [pc, #136]	; (8009fe4 <HAL_ADC_MspInit+0xcc>)
 8009f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f5e:	4a21      	ldr	r2, [pc, #132]	; (8009fe4 <HAL_ADC_MspInit+0xcc>)
 8009f60:	f043 0320 	orr.w	r3, r3, #32
 8009f64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f68:	4b1e      	ldr	r3, [pc, #120]	; (8009fe4 <HAL_ADC_MspInit+0xcc>)
 8009f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f6e:	f003 0320 	and.w	r3, r3, #32
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f76:	4b1b      	ldr	r3, [pc, #108]	; (8009fe4 <HAL_ADC_MspInit+0xcc>)
 8009f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f7c:	4a19      	ldr	r2, [pc, #100]	; (8009fe4 <HAL_ADC_MspInit+0xcc>)
 8009f7e:	f043 0304 	orr.w	r3, r3, #4
 8009f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f86:	4b17      	ldr	r3, [pc, #92]	; (8009fe4 <HAL_ADC_MspInit+0xcc>)
 8009f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f8c:	f003 0304 	and.w	r3, r3, #4
 8009f90:	60bb      	str	r3, [r7, #8]
 8009f92:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration    
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009fa2:	f107 0314 	add.w	r3, r7, #20
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	480f      	ldr	r0, [pc, #60]	; (8009fe8 <HAL_ADC_MspInit+0xd0>)
 8009faa:	f7f8 f917 	bl	80021dc <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8009fae:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8009fb2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009fb6:	f7f6 fbd3 	bl	8000760 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8009fba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009fbe:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8009fc2:	f7f6 fbcd 	bl	8000760 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2100      	movs	r1, #0
 8009fca:	207f      	movs	r0, #127	; 0x7f
 8009fcc:	f7f8 f8d1 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8009fd0:	207f      	movs	r0, #127	; 0x7f
 8009fd2:	f7f8 f8e8 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8009fd6:	bf00      	nop
 8009fd8:	3728      	adds	r7, #40	; 0x28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	58026000 	.word	0x58026000
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	58021400 	.word	0x58021400

08009fec <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08e      	sub	sp, #56	; 0x38
 8009ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	605a      	str	r2, [r3, #4]
 8009ffc:	609a      	str	r2, [r3, #8]
 8009ffe:	60da      	str	r2, [r3, #12]
 800a000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a002:	4b99      	ldr	r3, [pc, #612]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a008:	4a97      	ldr	r2, [pc, #604]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a00a:	f043 0304 	orr.w	r3, r3, #4
 800a00e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a012:	4b95      	ldr	r3, [pc, #596]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a018:	f003 0304 	and.w	r3, r3, #4
 800a01c:	623b      	str	r3, [r7, #32]
 800a01e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a020:	4b91      	ldr	r3, [pc, #580]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a026:	4a90      	ldr	r2, [pc, #576]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a028:	f043 0320 	orr.w	r3, r3, #32
 800a02c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a030:	4b8d      	ldr	r3, [pc, #564]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	61fb      	str	r3, [r7, #28]
 800a03c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a03e:	4b8a      	ldr	r3, [pc, #552]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a044:	4a88      	ldr	r2, [pc, #544]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a04a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a04e:	4b86      	ldr	r3, [pc, #536]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a058:	61bb      	str	r3, [r7, #24]
 800a05a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a05c:	4b82      	ldr	r3, [pc, #520]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a05e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a062:	4a81      	ldr	r2, [pc, #516]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a064:	f043 0301 	orr.w	r3, r3, #1
 800a068:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a06c:	4b7e      	ldr	r3, [pc, #504]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a06e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	617b      	str	r3, [r7, #20]
 800a078:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a07a:	4b7b      	ldr	r3, [pc, #492]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a07c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a080:	4a79      	ldr	r2, [pc, #484]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a082:	f043 0302 	orr.w	r3, r3, #2
 800a086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a08a:	4b77      	ldr	r3, [pc, #476]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a08c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a090:	f003 0302 	and.w	r3, r3, #2
 800a094:	613b      	str	r3, [r7, #16]
 800a096:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a098:	4b73      	ldr	r3, [pc, #460]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a09a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a09e:	4a72      	ldr	r2, [pc, #456]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a0a0:	f043 0310 	orr.w	r3, r3, #16
 800a0a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a0a8:	4b6f      	ldr	r3, [pc, #444]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a0aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0ae:	f003 0310 	and.w	r3, r3, #16
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a0b6:	4b6c      	ldr	r3, [pc, #432]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a0b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0bc:	4a6a      	ldr	r2, [pc, #424]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a0be:	f043 0308 	orr.w	r3, r3, #8
 800a0c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a0c6:	4b68      	ldr	r3, [pc, #416]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a0c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0cc:	f003 0308 	and.w	r3, r3, #8
 800a0d0:	60bb      	str	r3, [r7, #8]
 800a0d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a0d4:	4b64      	ldr	r3, [pc, #400]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a0d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0da:	4a63      	ldr	r2, [pc, #396]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a0e4:	4b60      	ldr	r3, [pc, #384]	; (800a268 <MX_GPIO_Init+0x27c>)
 800a0e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ee:	607b      	str	r3, [r7, #4]
 800a0f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f244 0181 	movw	r1, #16513	; 0x4081
 800a0f8:	485c      	ldr	r0, [pc, #368]	; (800a26c <MX_GPIO_Init+0x280>)
 800a0fa:	f7f8 fa1f 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800a0fe:	2200      	movs	r2, #0
 800a100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a104:	485a      	ldr	r0, [pc, #360]	; (800a270 <MX_GPIO_Init+0x284>)
 800a106:	f7f8 fa19 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800a10a:	2200      	movs	r2, #0
 800a10c:	2102      	movs	r1, #2
 800a10e:	4859      	ldr	r0, [pc, #356]	; (800a274 <MX_GPIO_Init+0x288>)
 800a110:	f7f8 fa14 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a11a:	2300      	movs	r3, #0
 800a11c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a126:	4619      	mov	r1, r3
 800a128:	4853      	ldr	r0, [pc, #332]	; (800a278 <MX_GPIO_Init+0x28c>)
 800a12a:	f7f8 f857 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a12e:	2332      	movs	r3, #50	; 0x32
 800a130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a132:	2302      	movs	r3, #2
 800a134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a136:	2300      	movs	r3, #0
 800a138:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a13a:	2300      	movs	r3, #0
 800a13c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a13e:	230b      	movs	r3, #11
 800a140:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a146:	4619      	mov	r1, r3
 800a148:	484b      	ldr	r0, [pc, #300]	; (800a278 <MX_GPIO_Init+0x28c>)
 800a14a:	f7f8 f847 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a14e:	2386      	movs	r3, #134	; 0x86
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a152:	2302      	movs	r3, #2
 800a154:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a156:	2300      	movs	r3, #0
 800a158:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a15a:	2300      	movs	r3, #0
 800a15c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a15e:	230b      	movs	r3, #11
 800a160:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a166:	4619      	mov	r1, r3
 800a168:	4844      	ldr	r0, [pc, #272]	; (800a27c <MX_GPIO_Init+0x290>)
 800a16a:	f7f8 f837 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800a16e:	f244 0301 	movw	r3, #16385	; 0x4001
 800a172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a174:	2301      	movs	r3, #1
 800a176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a178:	2300      	movs	r3, #0
 800a17a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a17c:	2300      	movs	r3, #0
 800a17e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a184:	4619      	mov	r1, r3
 800a186:	4839      	ldr	r0, [pc, #228]	; (800a26c <MX_GPIO_Init+0x280>)
 800a188:	f7f8 f828 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a18c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a192:	2302      	movs	r3, #2
 800a194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a196:	2300      	movs	r3, #0
 800a198:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a19a:	2300      	movs	r3, #0
 800a19c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a19e:	230b      	movs	r3, #11
 800a1a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4830      	ldr	r0, [pc, #192]	; (800a26c <MX_GPIO_Init+0x280>)
 800a1aa:	f7f8 f817 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800a1ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800a1c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	482a      	ldr	r0, [pc, #168]	; (800a270 <MX_GPIO_Init+0x284>)
 800a1c8:	f7f8 f808 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800a1cc:	2380      	movs	r3, #128	; 0x80
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a1d0:	4b2b      	ldr	r3, [pc, #172]	; (800a280 <MX_GPIO_Init+0x294>)
 800a1d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800a1d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1dc:	4619      	mov	r1, r3
 800a1de:	4829      	ldr	r0, [pc, #164]	; (800a284 <MX_GPIO_Init+0x298>)
 800a1e0:	f7f7 fffc 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800a1e4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800a1f6:	230a      	movs	r3, #10
 800a1f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1fe:	4619      	mov	r1, r3
 800a200:	481e      	ldr	r0, [pc, #120]	; (800a27c <MX_GPIO_Init+0x290>)
 800a202:	f7f7 ffeb 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800a206:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a20a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a20c:	2302      	movs	r3, #2
 800a20e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a210:	2300      	movs	r3, #0
 800a212:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a214:	2300      	movs	r3, #0
 800a216:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a218:	230b      	movs	r3, #11
 800a21a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a21c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a220:	4619      	mov	r1, r3
 800a222:	4818      	ldr	r0, [pc, #96]	; (800a284 <MX_GPIO_Init+0x298>)
 800a224:	f7f7 ffda 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a228:	2380      	movs	r3, #128	; 0x80
 800a22a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a22c:	2301      	movs	r3, #1
 800a22e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a230:	2300      	movs	r3, #0
 800a232:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a234:	2303      	movs	r3, #3
 800a236:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a23c:	4619      	mov	r1, r3
 800a23e:	480b      	ldr	r0, [pc, #44]	; (800a26c <MX_GPIO_Init+0x280>)
 800a240:	f7f7 ffcc 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800a244:	2302      	movs	r3, #2
 800a246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a248:	2301      	movs	r3, #1
 800a24a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a24c:	2300      	movs	r3, #0
 800a24e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a250:	2300      	movs	r3, #0
 800a252:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800a254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a258:	4619      	mov	r1, r3
 800a25a:	4806      	ldr	r0, [pc, #24]	; (800a274 <MX_GPIO_Init+0x288>)
 800a25c:	f7f7 ffbe 	bl	80021dc <HAL_GPIO_Init>

}
 800a260:	bf00      	nop
 800a262:	3738      	adds	r7, #56	; 0x38
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	58024400 	.word	0x58024400
 800a26c:	58020400 	.word	0x58020400
 800a270:	58020c00 	.word	0x58020c00
 800a274:	58021000 	.word	0x58021000
 800a278:	58020800 	.word	0x58020800
 800a27c:	58020000 	.word	0x58020000
 800a280:	11110000 	.word	0x11110000
 800a284:	58021800 	.word	0x58021800

0800a288 <SCB_EnableICache>:
{
 800a288:	b480      	push	{r7}
 800a28a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a28c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a290:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a294:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <SCB_EnableICache+0x3c>)
 800a296:	2200      	movs	r2, #0
 800a298:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a29c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a2a0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a2a4:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <SCB_EnableICache+0x3c>)
 800a2a6:	695b      	ldr	r3, [r3, #20]
 800a2a8:	4a06      	ldr	r2, [pc, #24]	; (800a2c4 <SCB_EnableICache+0x3c>)
 800a2aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2ae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a2b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a2b4:	f3bf 8f6f 	isb	sy
}
 800a2b8:	bf00      	nop
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	e000ed00 	.word	0xe000ed00

0800a2c8 <SCB_EnableDCache>:
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800a2ce:	4b1d      	ldr	r3, [pc, #116]	; (800a344 <SCB_EnableDCache+0x7c>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800a2d6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800a2da:	4b1a      	ldr	r3, [pc, #104]	; (800a344 <SCB_EnableDCache+0x7c>)
 800a2dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2e0:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	0b5b      	lsrs	r3, r3, #13
 800a2e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a2ea:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	08db      	lsrs	r3, r3, #3
 800a2f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2f4:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800a2fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a304:	490f      	ldr	r1, [pc, #60]	; (800a344 <SCB_EnableDCache+0x7c>)
 800a306:	4313      	orrs	r3, r2
 800a308:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	1e5a      	subs	r2, r3, #1
 800a310:	60ba      	str	r2, [r7, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1ef      	bne.n	800a2f6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	1e5a      	subs	r2, r3, #1
 800a31a:	60fa      	str	r2, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e5      	bne.n	800a2ec <SCB_EnableDCache+0x24>
 800a320:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800a324:	4b07      	ldr	r3, [pc, #28]	; (800a344 <SCB_EnableDCache+0x7c>)
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	4a06      	ldr	r2, [pc, #24]	; (800a344 <SCB_EnableDCache+0x7c>)
 800a32a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a32e:	6153      	str	r3, [r2, #20]
 800a330:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a334:	f3bf 8f6f 	isb	sy
}
 800a338:	bf00      	nop
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	e000ed00 	.word	0xe000ed00

0800a348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800a34c:	f7ff ff9c 	bl	800a288 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800a350:	f7ff ffba 	bl	800a2c8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a354:	f7f6 f948 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a358:	f000 f80c 	bl	800a374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a35c:	f7ff fe46 	bl	8009fec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800a360:	f000 fb64 	bl	800aa2c <MX_USART3_UART_Init>
  MX_ADC3_Init();
 800a364:	f7ff fd48 	bl	8009df8 <MX_ADC3_Init>
  MX_TIM1_Init();
 800a368:	f000 f9f6 	bl	800a758 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
cppWrapper();
 800a36c:	f000 fd4a 	bl	800ae04 <cppWrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a370:	e7fe      	b.n	800a370 <main+0x28>
	...

0800a374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b0cc      	sub	sp, #304	; 0x130
 800a378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a37a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a37e:	224c      	movs	r2, #76	; 0x4c
 800a380:	2100      	movs	r1, #0
 800a382:	4618      	mov	r0, r3
 800a384:	f000 fdbf 	bl	800af06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a388:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a38c:	2220      	movs	r2, #32
 800a38e:	2100      	movs	r1, #0
 800a390:	4618      	mov	r0, r3
 800a392:	f000 fdb8 	bl	800af06 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a396:	f107 0308 	add.w	r3, r7, #8
 800a39a:	4618      	mov	r0, r3
 800a39c:	23bc      	movs	r3, #188	; 0xbc
 800a39e:	461a      	mov	r2, r3
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	f000 fdb0 	bl	800af06 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a3a6:	2002      	movs	r0, #2
 800a3a8:	f7f8 f8e2 	bl	8002570 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a3ac:	1d3b      	adds	r3, r7, #4
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	4b5d      	ldr	r3, [pc, #372]	; (800a528 <SystemClock_Config+0x1b4>)
 800a3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b6:	4a5c      	ldr	r2, [pc, #368]	; (800a528 <SystemClock_Config+0x1b4>)
 800a3b8:	f023 0301 	bic.w	r3, r3, #1
 800a3bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3be:	4b5a      	ldr	r3, [pc, #360]	; (800a528 <SystemClock_Config+0x1b4>)
 800a3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c2:	f003 0201 	and.w	r2, r3, #1
 800a3c6:	1d3b      	adds	r3, r7, #4
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	4b58      	ldr	r3, [pc, #352]	; (800a52c <SystemClock_Config+0x1b8>)
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	4a57      	ldr	r2, [pc, #348]	; (800a52c <SystemClock_Config+0x1b8>)
 800a3d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3d4:	6193      	str	r3, [r2, #24]
 800a3d6:	4b55      	ldr	r3, [pc, #340]	; (800a52c <SystemClock_Config+0x1b8>)
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800a3de:	1d3b      	adds	r3, r7, #4
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	1d3b      	adds	r3, r7, #4
 800a3e4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a3e6:	bf00      	nop
 800a3e8:	4b50      	ldr	r3, [pc, #320]	; (800a52c <SystemClock_Config+0x1b8>)
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3f4:	d1f8      	bne.n	800a3e8 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800a3f6:	4b4e      	ldr	r3, [pc, #312]	; (800a530 <SystemClock_Config+0x1bc>)
 800a3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fa:	4a4d      	ldr	r2, [pc, #308]	; (800a530 <SystemClock_Config+0x1bc>)
 800a3fc:	f023 0303 	bic.w	r3, r3, #3
 800a400:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a402:	2302      	movs	r3, #2
 800a404:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800a408:	2301      	movs	r3, #1
 800a40a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a40e:	2320      	movs	r3, #32
 800a410:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a414:	2302      	movs	r3, #2
 800a416:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a41a:	2300      	movs	r3, #0
 800a41c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a420:	2304      	movs	r3, #4
 800a422:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 50;
 800a426:	2332      	movs	r3, #50	; 0x32
 800a428:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a42c:	2302      	movs	r3, #2
 800a42e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a432:	2304      	movs	r3, #4
 800a434:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a438:	2302      	movs	r3, #2
 800a43a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800a43e:	230c      	movs	r3, #12
 800a440:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a444:	2300      	movs	r3, #0
 800a446:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a44a:	2300      	movs	r3, #0
 800a44c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a450:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a454:	4618      	mov	r0, r3
 800a456:	f7f8 f8c3 	bl	80025e0 <HAL_RCC_OscConfig>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d001      	beq.n	800a464 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800a460:	f000 f86a 	bl	800a538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a464:	233f      	movs	r3, #63	; 0x3f
 800a466:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a46a:	2303      	movs	r3, #3
 800a46c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a470:	2300      	movs	r3, #0
 800a472:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a476:	2308      	movs	r3, #8
 800a478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a47c:	2340      	movs	r3, #64	; 0x40
 800a47e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a482:	2340      	movs	r3, #64	; 0x40
 800a484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a48c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a490:	2340      	movs	r3, #64	; 0x40
 800a492:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a496:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a49a:	2102      	movs	r1, #2
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7f8 fc57 	bl	8002d50 <HAL_RCC_ClockConfig>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <SystemClock_Config+0x138>
  {
    Error_Handler();
 800a4a8:	f000 f846 	bl	800a538 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC;
 800a4ac:	f107 0308 	add.w	r3, r7, #8
 800a4b0:	4a20      	ldr	r2, [pc, #128]	; (800a534 <SystemClock_Config+0x1c0>)
 800a4b2:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800a4b4:	f107 0308 	add.w	r3, r7, #8
 800a4b8:	2204      	movs	r2, #4
 800a4ba:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800a4bc:	f107 0308 	add.w	r3, r7, #8
 800a4c0:	2209      	movs	r2, #9
 800a4c2:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800a4c4:	f107 0308 	add.w	r3, r7, #8
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800a4cc:	f107 0308 	add.w	r3, r7, #8
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800a4d4:	f107 0308 	add.w	r3, r7, #8
 800a4d8:	2202      	movs	r2, #2
 800a4da:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800a4dc:	f107 0308 	add.w	r3, r7, #8
 800a4e0:	22c0      	movs	r2, #192	; 0xc0
 800a4e2:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800a4e4:	f107 0308 	add.w	r3, r7, #8
 800a4e8:	2220      	movs	r2, #32
 800a4ea:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800a4ec:	f107 0308 	add.w	r3, r7, #8
 800a4f0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800a4f4:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800a4f6:	f107 0308 	add.w	r3, r7, #8
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800a4fe:	f107 0308 	add.w	r3, r7, #8
 800a502:	2200      	movs	r2, #0
 800a504:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a508:	f107 0308 	add.w	r3, r7, #8
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7f8 ff79 	bl	8003404 <HAL_RCCEx_PeriphCLKConfig>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d001      	beq.n	800a51c <SystemClock_Config+0x1a8>
  {
    Error_Handler();
 800a518:	f000 f80e 	bl	800a538 <Error_Handler>
  }
}
 800a51c:	bf00      	nop
 800a51e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	58000400 	.word	0x58000400
 800a52c:	58024800 	.word	0x58024800
 800a530:	58024400 	.word	0x58024400
 800a534:	00080002 	.word	0x00080002

0800a538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a538:	b480      	push	{r7}
 800a53a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a53c:	bf00      	nop
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
	...

0800a548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a54e:	4b0a      	ldr	r3, [pc, #40]	; (800a578 <HAL_MspInit+0x30>)
 800a550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a554:	4a08      	ldr	r2, [pc, #32]	; (800a578 <HAL_MspInit+0x30>)
 800a556:	f043 0302 	orr.w	r3, r3, #2
 800a55a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a55e:	4b06      	ldr	r3, [pc, #24]	; (800a578 <HAL_MspInit+0x30>)
 800a560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	607b      	str	r3, [r7, #4]
 800a56a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	58024400 	.word	0x58024400

0800a57c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a57c:	b480      	push	{r7}
 800a57e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a580:	bf00      	nop
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a58a:	b480      	push	{r7}
 800a58c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a58e:	e7fe      	b.n	800a58e <HardFault_Handler+0x4>

0800a590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a590:	b480      	push	{r7}
 800a592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a594:	e7fe      	b.n	800a594 <MemManage_Handler+0x4>

0800a596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a596:	b480      	push	{r7}
 800a598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a59a:	e7fe      	b.n	800a59a <BusFault_Handler+0x4>

0800a59c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a59c:	b480      	push	{r7}
 800a59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a5a0:	e7fe      	b.n	800a5a0 <UsageFault_Handler+0x4>

0800a5a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a5a6:	bf00      	nop
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a5b4:	bf00      	nop
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a5c2:	bf00      	nop
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a5d0:	f7f6 f878 	bl	80006c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a5d4:	bf00      	nop
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a5dc:	4802      	ldr	r0, [pc, #8]	; (800a5e8 <TIM1_BRK_IRQHandler+0x10>)
 800a5de:	f7fa fe45 	bl	800526c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800a5e2:	bf00      	nop
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	240036a0 	.word	0x240036a0

0800a5ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
//	HighFreqTask();
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a5f0:	4802      	ldr	r0, [pc, #8]	; (800a5fc <TIM1_UP_IRQHandler+0x10>)
 800a5f2:	f7fa fe3b 	bl	800526c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800a5f6:	bf00      	nop
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	240036a0 	.word	0x240036a0

0800a600 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a604:	4802      	ldr	r0, [pc, #8]	; (800a610 <TIM1_TRG_COM_IRQHandler+0x10>)
 800a606:	f7fa fe31 	bl	800526c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800a60a:	bf00      	nop
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	240036a0 	.word	0x240036a0

0800a614 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a618:	4802      	ldr	r0, [pc, #8]	; (800a624 <TIM1_CC_IRQHandler+0x10>)
 800a61a:	f7fa fe27 	bl	800526c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800a61e:	bf00      	nop
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	240036a0 	.word	0x240036a0

0800a628 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	af00      	add	r7, sp, #0
//		//HAL_ADC_IRQHandler(&hadc3);
//	} else {
//	}
	//HAL_ADC
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800a62c:	4802      	ldr	r0, [pc, #8]	; (800a638 <ADC3_IRQHandler+0x10>)
 800a62e:	f7f6 fb29 	bl	8000c84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */
  asm("NOP");
 800a632:	bf00      	nop
  /* USER CODE END ADC3_IRQn 1 */
}
 800a634:	bf00      	nop
 800a636:	bd80      	pop	{r7, pc}
 800a638:	2400363c 	.word	0x2400363c

0800a63c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a644:	4b11      	ldr	r3, [pc, #68]	; (800a68c <_sbrk+0x50>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d102      	bne.n	800a652 <_sbrk+0x16>
		heap_end = &end;
 800a64c:	4b0f      	ldr	r3, [pc, #60]	; (800a68c <_sbrk+0x50>)
 800a64e:	4a10      	ldr	r2, [pc, #64]	; (800a690 <_sbrk+0x54>)
 800a650:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a652:	4b0e      	ldr	r3, [pc, #56]	; (800a68c <_sbrk+0x50>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a658:	4b0c      	ldr	r3, [pc, #48]	; (800a68c <_sbrk+0x50>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4413      	add	r3, r2
 800a660:	466a      	mov	r2, sp
 800a662:	4293      	cmp	r3, r2
 800a664:	d907      	bls.n	800a676 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a666:	f000 fc09 	bl	800ae7c <__errno>
 800a66a:	4602      	mov	r2, r0
 800a66c:	230c      	movs	r3, #12
 800a66e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a674:	e006      	b.n	800a684 <_sbrk+0x48>
	}

	heap_end += incr;
 800a676:	4b05      	ldr	r3, [pc, #20]	; (800a68c <_sbrk+0x50>)
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4413      	add	r3, r2
 800a67e:	4a03      	ldr	r2, [pc, #12]	; (800a68c <_sbrk+0x50>)
 800a680:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a682:	68fb      	ldr	r3, [r7, #12]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	24000610 	.word	0x24000610
 800a690:	24003770 	.word	0x24003770

0800a694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a694:	b480      	push	{r7}
 800a696:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a698:	4b29      	ldr	r3, [pc, #164]	; (800a740 <SystemInit+0xac>)
 800a69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a69e:	4a28      	ldr	r2, [pc, #160]	; (800a740 <SystemInit+0xac>)
 800a6a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a6a8:	4b26      	ldr	r3, [pc, #152]	; (800a744 <SystemInit+0xb0>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a25      	ldr	r2, [pc, #148]	; (800a744 <SystemInit+0xb0>)
 800a6ae:	f043 0301 	orr.w	r3, r3, #1
 800a6b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a6b4:	4b23      	ldr	r3, [pc, #140]	; (800a744 <SystemInit+0xb0>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a6ba:	4b22      	ldr	r3, [pc, #136]	; (800a744 <SystemInit+0xb0>)
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	4921      	ldr	r1, [pc, #132]	; (800a744 <SystemInit+0xb0>)
 800a6c0:	4b21      	ldr	r3, [pc, #132]	; (800a748 <SystemInit+0xb4>)
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a6c6:	4b1f      	ldr	r3, [pc, #124]	; (800a744 <SystemInit+0xb0>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800a6cc:	4b1d      	ldr	r3, [pc, #116]	; (800a744 <SystemInit+0xb0>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800a6d2:	4b1c      	ldr	r3, [pc, #112]	; (800a744 <SystemInit+0xb0>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800a6d8:	4b1a      	ldr	r3, [pc, #104]	; (800a744 <SystemInit+0xb0>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800a6de:	4b19      	ldr	r3, [pc, #100]	; (800a744 <SystemInit+0xb0>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800a6e4:	4b17      	ldr	r3, [pc, #92]	; (800a744 <SystemInit+0xb0>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a6ea:	4b16      	ldr	r3, [pc, #88]	; (800a744 <SystemInit+0xb0>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800a6f0:	4b14      	ldr	r3, [pc, #80]	; (800a744 <SystemInit+0xb0>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a6f6:	4b13      	ldr	r3, [pc, #76]	; (800a744 <SystemInit+0xb0>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800a6fc:	4b11      	ldr	r3, [pc, #68]	; (800a744 <SystemInit+0xb0>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a702:	4b10      	ldr	r3, [pc, #64]	; (800a744 <SystemInit+0xb0>)
 800a704:	2200      	movs	r2, #0
 800a706:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a708:	4b0e      	ldr	r3, [pc, #56]	; (800a744 <SystemInit+0xb0>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a0d      	ldr	r2, [pc, #52]	; (800a744 <SystemInit+0xb0>)
 800a70e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a712:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a714:	4b0b      	ldr	r3, [pc, #44]	; (800a744 <SystemInit+0xb0>)
 800a716:	2200      	movs	r2, #0
 800a718:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800a71a:	4b0c      	ldr	r3, [pc, #48]	; (800a74c <SystemInit+0xb8>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	4b0c      	ldr	r3, [pc, #48]	; (800a750 <SystemInit+0xbc>)
 800a720:	4013      	ands	r3, r2
 800a722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a726:	d202      	bcs.n	800a72e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800a728:	4b0a      	ldr	r3, [pc, #40]	; (800a754 <SystemInit+0xc0>)
 800a72a:	2201      	movs	r2, #1
 800a72c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a72e:	4b04      	ldr	r3, [pc, #16]	; (800a740 <SystemInit+0xac>)
 800a730:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a734:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800a736:	bf00      	nop
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	e000ed00 	.word	0xe000ed00
 800a744:	58024400 	.word	0x58024400
 800a748:	eaf6ed7f 	.word	0xeaf6ed7f
 800a74c:	5c001000 	.word	0x5c001000
 800a750:	ffff0000 	.word	0xffff0000
 800a754:	51008108 	.word	0x51008108

0800a758 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b09e      	sub	sp, #120	; 0x78
 800a75c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a75e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	605a      	str	r2, [r3, #4]
 800a768:	609a      	str	r2, [r3, #8]
 800a76a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a76c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a770:	2200      	movs	r2, #0
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	605a      	str	r2, [r3, #4]
 800a776:	609a      	str	r2, [r3, #8]
 800a778:	60da      	str	r2, [r3, #12]
 800a77a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a77c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	605a      	str	r2, [r3, #4]
 800a786:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a78c:	2200      	movs	r2, #0
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	605a      	str	r2, [r3, #4]
 800a792:	609a      	str	r2, [r3, #8]
 800a794:	60da      	str	r2, [r3, #12]
 800a796:	611a      	str	r2, [r3, #16]
 800a798:	615a      	str	r2, [r3, #20]
 800a79a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a79c:	463b      	mov	r3, r7
 800a79e:	222c      	movs	r2, #44	; 0x2c
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 fbaf 	bl	800af06 <memset>

  htim1.Instance = TIM1;
 800a7a8:	4b60      	ldr	r3, [pc, #384]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a7aa:	4a61      	ldr	r2, [pc, #388]	; (800a930 <MX_TIM1_Init+0x1d8>)
 800a7ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50000;
 800a7ae:	4b5f      	ldr	r3, [pc, #380]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a7b0:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a7b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800a7b6:	4b5d      	ldr	r3, [pc, #372]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD_COUNT;
 800a7bc:	4b5b      	ldr	r3, [pc, #364]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a7be:	f242 7210 	movw	r2, #10000	; 0x2710
 800a7c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a7c4:	4b59      	ldr	r3, [pc, #356]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a7ca:	4b58      	ldr	r3, [pc, #352]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a7d0:	4b56      	ldr	r3, [pc, #344]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a7d6:	4855      	ldr	r0, [pc, #340]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a7d8:	f7fa fc90 	bl	80050fc <HAL_TIM_Base_Init>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800a7e2:	f7ff fea9 	bl	800a538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a7e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7ea:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a7ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	484e      	ldr	r0, [pc, #312]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a7f4:	f7fa ff72 	bl	80056dc <HAL_TIM_ConfigClockSource>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800a7fe:	f7ff fe9b 	bl	800a538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a802:	484a      	ldr	r0, [pc, #296]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a804:	f7fa fca5 	bl	8005152 <HAL_TIM_PWM_Init>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800a80e:	f7ff fe93 	bl	800a538 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800a812:	2300      	movs	r3, #0
 800a814:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800a816:	2300      	movs	r3, #0
 800a818:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800a81a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a81e:	4619      	mov	r1, r3
 800a820:	4842      	ldr	r0, [pc, #264]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a822:	f7fb f82b 	bl	800587c <HAL_TIM_SlaveConfigSynchro>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 800a82c:	f7ff fe84 	bl	800a538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a830:	2320      	movs	r3, #32
 800a832:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC4REF;
 800a834:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 800a838:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a83a:	2300      	movs	r3, #0
 800a83c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a83e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a842:	4619      	mov	r1, r3
 800a844:	4839      	ldr	r0, [pc, #228]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a846:	f7fb fd5d 	bl	8006304 <HAL_TIMEx_MasterConfigSynchronization>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d001      	beq.n	800a854 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800a850:	f7ff fe72 	bl	800a538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a854:	2360      	movs	r3, #96	; 0x60
 800a856:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a85c:	2300      	movs	r3, #0
 800a85e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a860:	2300      	movs	r3, #0
 800a862:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a864:	2300      	movs	r3, #0
 800a866:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a868:	2300      	movs	r3, #0
 800a86a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a86c:	2300      	movs	r3, #0
 800a86e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a874:	2200      	movs	r2, #0
 800a876:	4619      	mov	r1, r3
 800a878:	482c      	ldr	r0, [pc, #176]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a87a:	f7fa fe17 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800a884:	f7ff fe58 	bl	800a538 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a88c:	2204      	movs	r2, #4
 800a88e:	4619      	mov	r1, r3
 800a890:	4826      	ldr	r0, [pc, #152]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a892:	f7fa fe0b 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800a89c:	f7ff fe4c 	bl	800a538 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a8a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8a4:	2208      	movs	r2, #8
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4820      	ldr	r0, [pc, #128]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a8aa:	f7fa fdff 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 800a8b4:	f7ff fe40 	bl	800a538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800a8b8:	2370      	movs	r3, #112	; 0x70
 800a8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 9900;
 800a8bc:	f242 63ac 	movw	r3, #9900	; 0x26ac
 800a8c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a8c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8c6:	220c      	movs	r2, #12
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	4818      	ldr	r0, [pc, #96]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a8cc:	f7fa fdee 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 800a8d6:	f7ff fe2f 	bl	800a538 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a8ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a8fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a900:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a906:	2300      	movs	r3, #0
 800a908:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a90a:	463b      	mov	r3, r7
 800a90c:	4619      	mov	r1, r3
 800a90e:	4807      	ldr	r0, [pc, #28]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a910:	f7fb fd54 	bl	80063bc <HAL_TIMEx_ConfigBreakDeadTime>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d001      	beq.n	800a91e <MX_TIM1_Init+0x1c6>
  {
    Error_Handler();
 800a91a:	f7ff fe0d 	bl	800a538 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800a91e:	4803      	ldr	r0, [pc, #12]	; (800a92c <MX_TIM1_Init+0x1d4>)
 800a920:	f000 f848 	bl	800a9b4 <HAL_TIM_MspPostInit>

}
 800a924:	bf00      	nop
 800a926:	3778      	adds	r7, #120	; 0x78
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	240036a0 	.word	0x240036a0
 800a930:	40010000 	.word	0x40010000

0800a934 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a1a      	ldr	r2, [pc, #104]	; (800a9ac <HAL_TIM_Base_MspInit+0x78>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d12e      	bne.n	800a9a4 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a946:	4b1a      	ldr	r3, [pc, #104]	; (800a9b0 <HAL_TIM_Base_MspInit+0x7c>)
 800a948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a94c:	4a18      	ldr	r2, [pc, #96]	; (800a9b0 <HAL_TIM_Base_MspInit+0x7c>)
 800a94e:	f043 0301 	orr.w	r3, r3, #1
 800a952:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a956:	4b16      	ldr	r3, [pc, #88]	; (800a9b0 <HAL_TIM_Base_MspInit+0x7c>)
 800a958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	60fb      	str	r3, [r7, #12]
 800a962:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800a964:	2200      	movs	r2, #0
 800a966:	2100      	movs	r1, #0
 800a968:	2018      	movs	r0, #24
 800a96a:	f7f7 fc02 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800a96e:	2018      	movs	r0, #24
 800a970:	f7f7 fc19 	bl	80021a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800a974:	2200      	movs	r2, #0
 800a976:	2100      	movs	r1, #0
 800a978:	2019      	movs	r0, #25
 800a97a:	f7f7 fbfa 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800a97e:	2019      	movs	r0, #25
 800a980:	f7f7 fc11 	bl	80021a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800a984:	2200      	movs	r2, #0
 800a986:	2100      	movs	r1, #0
 800a988:	201a      	movs	r0, #26
 800a98a:	f7f7 fbf2 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800a98e:	201a      	movs	r0, #26
 800a990:	f7f7 fc09 	bl	80021a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800a994:	2200      	movs	r2, #0
 800a996:	2100      	movs	r1, #0
 800a998:	201b      	movs	r0, #27
 800a99a:	f7f7 fbea 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800a99e:	201b      	movs	r0, #27
 800a9a0:	f7f7 fc01 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800a9a4:	bf00      	nop
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	40010000 	.word	0x40010000
 800a9b0:	58024400 	.word	0x58024400

0800a9b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b088      	sub	sp, #32
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9bc:	f107 030c 	add.w	r3, r7, #12
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	605a      	str	r2, [r3, #4]
 800a9c6:	609a      	str	r2, [r3, #8]
 800a9c8:	60da      	str	r2, [r3, #12]
 800a9ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a13      	ldr	r2, [pc, #76]	; (800aa20 <HAL_TIM_MspPostInit+0x6c>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d11f      	bne.n	800aa16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a9d6:	4b13      	ldr	r3, [pc, #76]	; (800aa24 <HAL_TIM_MspPostInit+0x70>)
 800a9d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9dc:	4a11      	ldr	r2, [pc, #68]	; (800aa24 <HAL_TIM_MspPostInit+0x70>)
 800a9de:	f043 0310 	orr.w	r3, r3, #16
 800a9e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <HAL_TIM_MspPostInit+0x70>)
 800a9e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9ec:	f003 0310 	and.w	r3, r3, #16
 800a9f0:	60bb      	str	r3, [r7, #8]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800a9f4:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800a9f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa02:	2303      	movs	r3, #3
 800aa04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800aa06:	2301      	movs	r3, #1
 800aa08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800aa0a:	f107 030c 	add.w	r3, r7, #12
 800aa0e:	4619      	mov	r1, r3
 800aa10:	4805      	ldr	r0, [pc, #20]	; (800aa28 <HAL_TIM_MspPostInit+0x74>)
 800aa12:	f7f7 fbe3 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800aa16:	bf00      	nop
 800aa18:	3720      	adds	r7, #32
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	40010000 	.word	0x40010000
 800aa24:	58024400 	.word	0x58024400
 800aa28:	58021000 	.word	0x58021000

0800aa2c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800aa30:	4b22      	ldr	r3, [pc, #136]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa32:	4a23      	ldr	r2, [pc, #140]	; (800aac0 <MX_USART3_UART_Init+0x94>)
 800aa34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800aa36:	4b21      	ldr	r3, [pc, #132]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800aa3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800aa3e:	4b1f      	ldr	r3, [pc, #124]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800aa44:	4b1d      	ldr	r3, [pc, #116]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800aa4a:	4b1c      	ldr	r3, [pc, #112]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800aa50:	4b1a      	ldr	r3, [pc, #104]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa52:	220c      	movs	r2, #12
 800aa54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa56:	4b19      	ldr	r3, [pc, #100]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa58:	2200      	movs	r2, #0
 800aa5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa5c:	4b17      	ldr	r3, [pc, #92]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa5e:	2200      	movs	r2, #0
 800aa60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aa62:	4b16      	ldr	r3, [pc, #88]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800aa68:	4b14      	ldr	r3, [pc, #80]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aa6e:	4b13      	ldr	r3, [pc, #76]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800aa74:	4811      	ldr	r0, [pc, #68]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa76:	f7fb fd3d 	bl	80064f4 <HAL_UART_Init>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800aa80:	f7ff fd5a 	bl	800a538 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa84:	2100      	movs	r1, #0
 800aa86:	480d      	ldr	r0, [pc, #52]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa88:	f7fe f86d 	bl	8008b66 <HAL_UARTEx_SetTxFifoThreshold>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800aa92:	f7ff fd51 	bl	800a538 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa96:	2100      	movs	r1, #0
 800aa98:	4808      	ldr	r0, [pc, #32]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aa9a:	f7fe f8a2 	bl	8008be2 <HAL_UARTEx_SetRxFifoThreshold>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800aaa4:	f7ff fd48 	bl	800a538 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800aaa8:	4804      	ldr	r0, [pc, #16]	; (800aabc <MX_USART3_UART_Init+0x90>)
 800aaaa:	f7fe f823 	bl	8008af4 <HAL_UARTEx_DisableFifoMode>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800aab4:	f7ff fd40 	bl	800a538 <Error_Handler>
  }

}
 800aab8:	bf00      	nop
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	240036e0 	.word	0x240036e0
 800aac0:	40004800 	.word	0x40004800

0800aac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08a      	sub	sp, #40	; 0x28
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aacc:	f107 0314 	add.w	r3, r7, #20
 800aad0:	2200      	movs	r2, #0
 800aad2:	601a      	str	r2, [r3, #0]
 800aad4:	605a      	str	r2, [r3, #4]
 800aad6:	609a      	str	r2, [r3, #8]
 800aad8:	60da      	str	r2, [r3, #12]
 800aada:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a1a      	ldr	r2, [pc, #104]	; (800ab4c <HAL_UART_MspInit+0x88>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d12e      	bne.n	800ab44 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800aae6:	4b1a      	ldr	r3, [pc, #104]	; (800ab50 <HAL_UART_MspInit+0x8c>)
 800aae8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aaec:	4a18      	ldr	r2, [pc, #96]	; (800ab50 <HAL_UART_MspInit+0x8c>)
 800aaee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aaf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800aaf6:	4b16      	ldr	r3, [pc, #88]	; (800ab50 <HAL_UART_MspInit+0x8c>)
 800aaf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aafc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab00:	613b      	str	r3, [r7, #16]
 800ab02:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ab04:	4b12      	ldr	r3, [pc, #72]	; (800ab50 <HAL_UART_MspInit+0x8c>)
 800ab06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab0a:	4a11      	ldr	r2, [pc, #68]	; (800ab50 <HAL_UART_MspInit+0x8c>)
 800ab0c:	f043 0308 	orr.w	r3, r3, #8
 800ab10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ab14:	4b0e      	ldr	r3, [pc, #56]	; (800ab50 <HAL_UART_MspInit+0x8c>)
 800ab16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab1a:	f003 0308 	and.w	r3, r3, #8
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800ab22:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab28:	2302      	movs	r3, #2
 800ab2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab30:	2300      	movs	r3, #0
 800ab32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ab34:	2307      	movs	r3, #7
 800ab36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab38:	f107 0314 	add.w	r3, r7, #20
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4805      	ldr	r0, [pc, #20]	; (800ab54 <HAL_UART_MspInit+0x90>)
 800ab40:	f7f7 fb4c 	bl	80021dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800ab44:	bf00      	nop
 800ab46:	3728      	adds	r7, #40	; 0x28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	40004800 	.word	0x40004800
 800ab50:	58024400 	.word	0x58024400
 800ab54:	58020c00 	.word	0x58020c00

0800ab58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ab58:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ab90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ab5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ab5e:	e003      	b.n	800ab68 <LoopCopyDataInit>

0800ab60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ab60:	4b0c      	ldr	r3, [pc, #48]	; (800ab94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ab62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ab64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ab66:	3104      	adds	r1, #4

0800ab68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ab68:	480b      	ldr	r0, [pc, #44]	; (800ab98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ab6a:	4b0c      	ldr	r3, [pc, #48]	; (800ab9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ab6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ab6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ab70:	d3f6      	bcc.n	800ab60 <CopyDataInit>
  ldr  r2, =_sbss
 800ab72:	4a0b      	ldr	r2, [pc, #44]	; (800aba0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ab74:	e002      	b.n	800ab7c <LoopFillZerobss>

0800ab76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ab76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ab78:	f842 3b04 	str.w	r3, [r2], #4

0800ab7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ab7c:	4b09      	ldr	r3, [pc, #36]	; (800aba4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ab7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ab80:	d3f9      	bcc.n	800ab76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ab82:	f7ff fd87 	bl	800a694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ab86:	f000 f97f 	bl	800ae88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ab8a:	f7ff fbdd 	bl	800a348 <main>
  bx  lr    
 800ab8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ab90:	2407ffff 	.word	0x2407ffff
  ldr  r3, =_sidata
 800ab94:	0800cc38 	.word	0x0800cc38
  ldr  r0, =_sdata
 800ab98:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800ab9c:	240001e0 	.word	0x240001e0
  ldr  r2, =_sbss
 800aba0:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 800aba4:	24003770 	.word	0x24003770

0800aba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800aba8:	e7fe      	b.n	800aba8 <ADC_IRQHandler>
	...

0800abac <_ZN7ADCInit10ADC3EnableEv>:
	//ADC3 -> LHTR2 |= 0x3ffffff; //ADCウォッチドッグ閾値レジスタ 2
	//ADC3 -> LHTR3 |= 0x3ffffff; //ADCウォッチドッグ閾値レジスタ 3
	//0915 HAL_ADC_MspInit 107まで再現
}

void ADCInit::ADC3Enable() {
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
	ADC3 -> CR |= ( 0x1UL ); //ADEN
 800abb2:	4b11      	ldr	r3, [pc, #68]	; (800abf8 <_ZN7ADCInit10ADC3EnableEv+0x4c>)
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	4a10      	ldr	r2, [pc, #64]	; (800abf8 <_ZN7ADCInit10ADC3EnableEv+0x4c>)
 800abb8:	f043 0301 	orr.w	r3, r3, #1
 800abbc:	6093      	str	r3, [r2, #8]

	int i=0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	607b      	str	r3, [r7, #4]
	while(	!( (ADC3 -> ISR) && 0x1 ) ){
 800abc2:	4b0d      	ldr	r3, [pc, #52]	; (800abf8 <_ZN7ADCInit10ADC3EnableEv+0x4c>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <_ZN7ADCInit10ADC3EnableEv+0x22>
 800abca:	2301      	movs	r3, #1
 800abcc:	e000      	b.n	800abd0 <_ZN7ADCInit10ADC3EnableEv+0x24>
 800abce:	2300      	movs	r3, #0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d004      	beq.n	800abde <_ZN7ADCInit10ADC3EnableEv+0x32>
		//ADRDYの立ち上がりを確認する
		asm("NOP");
 800abd4:	bf00      	nop
		i++; //ADC立ち上がりタイミングのデバッグ用カウンタ
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	3301      	adds	r3, #1
 800abda:	607b      	str	r3, [r7, #4]
	while(	!( (ADC3 -> ISR) && 0x1 ) ){
 800abdc:	e7f1      	b.n	800abc2 <_ZN7ADCInit10ADC3EnableEv+0x16>
	}
	asm("NOP");
 800abde:	bf00      	nop

	ADC3 -> CR |= ( 0x1UL << 3UL ); //JADSTART
 800abe0:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <_ZN7ADCInit10ADC3EnableEv+0x4c>)
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	4a04      	ldr	r2, [pc, #16]	; (800abf8 <_ZN7ADCInit10ADC3EnableEv+0x4c>)
 800abe6:	f043 0308 	orr.w	r3, r3, #8
 800abea:	6093      	str	r3, [r2, #8]
}
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr
 800abf8:	58026000 	.word	0x58026000

0800abfc <_ZN8GPIOCtrlC1EP12GPIO_TypeDefm>:
 *      Author: Nakamura(Yutaka)
 */

#include "GPIOCtrl.hpp"

GPIOCtrl::GPIOCtrl( GPIO_TypeDef *pGPIOx, uint32_t pPinMask)
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
:mGPIOx(pGPIOx), mPinMask(pPinMask), mGPIOStatus(GPIO_OFF) {
 800ac08:	4a09      	ldr	r2, [pc, #36]	; (800ac30 <_ZN8GPIOCtrlC1EP12GPIO_TypeDefm+0x34>)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	605a      	str	r2, [r3, #4]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	609a      	str	r2, [r3, #8]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	731a      	strb	r2, [r3, #12]
	OFF();
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 f827 	bl	800ac74 <_ZN8GPIOCtrl3OFFEv>
}
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	0800c9d4 	.word	0x0800c9d4

0800ac34 <_ZN8GPIOCtrlD1Ev>:

GPIOCtrl::~GPIOCtrl() {
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	4a04      	ldr	r2, [pc, #16]	; (800ac50 <_ZN8GPIOCtrlD1Ev+0x1c>)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	601a      	str	r2, [r3, #0]
}
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4618      	mov	r0, r3
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	0800c9d4 	.word	0x0800c9d4

0800ac54 <_ZN8GPIOCtrlD0Ev>:
GPIOCtrl::~GPIOCtrl() {
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
}
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7ff ffe9 	bl	800ac34 <_ZN8GPIOCtrlD1Ev>
 800ac62:	2110      	movs	r1, #16
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f907 	bl	800ae78 <_ZdlPvj>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <_ZN8GPIOCtrl3OFFEv>:

void GPIOCtrl::OFF() {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
	mGPIOStatus = GPIO_OFF;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	731a      	strb	r2, [r3, #12]
	HAL_GPIO_WritePin(mGPIOx, mPinMask, GPIO_PIN_RESET);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6858      	ldr	r0, [r3, #4]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4619      	mov	r1, r3
 800ac90:	f7f7 fc54 	bl	800253c <HAL_GPIO_WritePin>
	//LL_GPIO_ResetOutputPin(mGPIOx, mPinMask);
}
 800ac94:	bf00      	nop
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <_ZN10SystemTest9StartTestEv>:

SystemTest::~SystemTest() {
	// TODO Auto-generated destructor stub
}

void SystemTest::StartTest() {
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af02      	add	r7, sp, #8
	  //extern TIM_OC_InitTypeDef sConfigOC;

	 // HAL_ADC_Start_IT(&hadc3);

	  //HAL_ADC_Start(&hadc3);
	  ADCInit::ADC3Enable();
 800aca2:	f7ff ff83 	bl	800abac <_ZN7ADCInit10ADC3EnableEv>

	  asm("NOP");
 800aca6:	bf00      	nop

		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 5000);
 800aca8:	4b1b      	ldr	r3, [pc, #108]	; (800ad18 <_ZN10SystemTest9StartTestEv+0x7c>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f241 3288 	movw	r2, #5000	; 0x1388
 800acb0:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 2500);
 800acb2:	4b19      	ldr	r3, [pc, #100]	; (800ad18 <_ZN10SystemTest9StartTestEv+0x7c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800acba:	639a      	str	r2, [r3, #56]	; 0x38
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1250);
 800acbc:	4b16      	ldr	r3, [pc, #88]	; (800ad18 <_ZN10SystemTest9StartTestEv+0x7c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800acc4:	63da      	str	r2, [r3, #60]	; 0x3c
		// __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 5000);

		 asm("NOP");
 800acc6:	bf00      	nop
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800acc8:	2100      	movs	r1, #0
 800acca:	4813      	ldr	r0, [pc, #76]	; (800ad18 <_ZN10SystemTest9StartTestEv+0x7c>)
 800accc:	f7fa fa76 	bl	80051bc <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800acd0:	2104      	movs	r1, #4
 800acd2:	4811      	ldr	r0, [pc, #68]	; (800ad18 <_ZN10SystemTest9StartTestEv+0x7c>)
 800acd4:	f7fa fa72 	bl	80051bc <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800acd8:	2108      	movs	r1, #8
 800acda:	480f      	ldr	r0, [pc, #60]	; (800ad18 <_ZN10SystemTest9StartTestEv+0x7c>)
 800acdc:	f7fa fa6e 	bl	80051bc <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800ace0:	210c      	movs	r1, #12
 800ace2:	480d      	ldr	r0, [pc, #52]	; (800ad18 <_ZN10SystemTest9StartTestEv+0x7c>)
 800ace4:	f7fa fa6a 	bl	80051bc <HAL_TIM_PWM_Start>


			while(1){
				HAL_Delay(100);
 800ace8:	2064      	movs	r0, #100	; 0x64
 800acea:	f7f5 fd0b 	bl	8000704 <HAL_Delay>
				int adc_u = ADC3 -> JDR1;
 800acee:	4b0b      	ldr	r3, [pc, #44]	; (800ad1c <_ZN10SystemTest9StartTestEv+0x80>)
 800acf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acf4:	60fb      	str	r3, [r7, #12]
				int adc_v = ADC3 -> JDR2;
 800acf6:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <_ZN10SystemTest9StartTestEv+0x80>)
 800acf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acfc:	60bb      	str	r3, [r7, #8]
				int adc_w = ADC3 -> JDR3;
 800acfe:	4b07      	ldr	r3, [pc, #28]	; (800ad1c <_ZN10SystemTest9StartTestEv+0x80>)
 800ad00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad04:	607b      	str	r3, [r7, #4]
				SEGGER_RTT_printf(0, "adcVal:%d,%d,%d\n" ,adc_u, adc_v, adc_w);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	4904      	ldr	r1, [pc, #16]	; (800ad20 <_ZN10SystemTest9StartTestEv+0x84>)
 800ad10:	2000      	movs	r0, #0
 800ad12:	f7ff f859 	bl	8009dc8 <SEGGER_RTT_printf>
			}
 800ad16:	e7e7      	b.n	800ace8 <_ZN10SystemTest9StartTestEv+0x4c>
 800ad18:	240036a0 	.word	0x240036a0
 800ad1c:	58026000 	.word	0x58026000
 800ad20:	0800c908 	.word	0x0800c908

0800ad24 <_ZN4DeusC1Ev>:

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
}


Deus::Deus() {
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	4a06      	ldr	r2, [pc, #24]	; (800ad48 <_ZN4DeusC1Ev+0x24>)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3304      	adds	r3, #4
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe fa60 	bl	80091fc <_ZN9MotorCtrlC1Ev>
//		  if((htim->Instance == TIM1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {
//		    // タイムアウト処理
//		  }
//	}

}
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	0800c9e4 	.word	0x0800c9e4

0800ad4c <_ZN4DeusD1Ev>:

Deus::~Deus() {
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	4a06      	ldr	r2, [pc, #24]	; (800ad70 <_ZN4DeusD1Ev+0x24>)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	601a      	str	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fe fa9e 	bl	80092a0 <_ZN9MotorCtrlD1Ev>
	// TODO Auto-generated destructor stub
}
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	0800c9e4 	.word	0x0800c9e4

0800ad74 <_ZN4DeusD0Ev>:
Deus::~Deus() {
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
}
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7ff ffe5 	bl	800ad4c <_ZN4DeusD1Ev>
 800ad82:	f642 7168 	movw	r1, #12136	; 0x2f68
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f876 	bl	800ae78 <_ZdlPvj>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
	...

0800ad98 <_Z41__static_initialization_and_destruction_0ii>:
//		myGPIO0.Toggle();
//		myGPIO1.Toggle();
//		myGPIO2.Toggle();
//		HAL_Delay(1000);
//	}
}
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d10a      	bne.n	800adbe <_Z41__static_initialization_and_destruction_0ii+0x26>
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adae:	4293      	cmp	r3, r2
 800adb0:	d105      	bne.n	800adbe <_Z41__static_initialization_and_destruction_0ii+0x26>
	GPIOCtrl myGPIO2(GPIOB, GPIO_PIN_14);
 800adb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800adb6:	4909      	ldr	r1, [pc, #36]	; (800addc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800adb8:	4809      	ldr	r0, [pc, #36]	; (800ade0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800adba:	f7ff ff1f 	bl	800abfc <_ZN8GPIOCtrlC1EP12GPIO_TypeDefm>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d107      	bne.n	800add4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adca:	4293      	cmp	r3, r2
 800adcc:	d102      	bne.n	800add4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800adce:	4804      	ldr	r0, [pc, #16]	; (800ade0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800add0:	f7ff ff30 	bl	800ac34 <_ZN8GPIOCtrlD1Ev>
}
 800add4:	bf00      	nop
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	58020400 	.word	0x58020400
 800ade0:	24000614 	.word	0x24000614

0800ade4 <_GLOBAL__sub_I_myGPIO2>:
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800adec:	2001      	movs	r0, #1
 800adee:	f7ff ffd3 	bl	800ad98 <_Z41__static_initialization_and_destruction_0ii>
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <_GLOBAL__sub_D_myGPIO2>:
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800adfc:	2000      	movs	r0, #0
 800adfe:	f7ff ffcb 	bl	800ad98 <_Z41__static_initialization_and_destruction_0ii>
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <cppWrapper>:


Deus Bosatsu;


void cppWrapper(void){
 800ae04:	b580      	push	{r7, lr}
 800ae06:	af00      	add	r7, sp, #0
	SystemTest::StartTest();
 800ae08:	f7ff ff48 	bl	800ac9c <_ZN10SystemTest9StartTestEv>
	//Bosatsu.Ctrl();

}
 800ae0c:	bf00      	nop
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <_Z41__static_initialization_and_destruction_0ii>:

void HighFreqTask(void){
	Bosatsu.HFTask();

}
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d107      	bne.n	800ae30 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d102      	bne.n	800ae30 <_Z41__static_initialization_and_destruction_0ii+0x20>
Deus Bosatsu;
 800ae2a:	4809      	ldr	r0, [pc, #36]	; (800ae50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ae2c:	f7ff ff7a 	bl	800ad24 <_ZN4DeusC1Ev>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d107      	bne.n	800ae46 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d102      	bne.n	800ae46 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800ae40:	4803      	ldr	r0, [pc, #12]	; (800ae50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ae42:	f7ff ff83 	bl	800ad4c <_ZN4DeusD1Ev>
}
 800ae46:	bf00      	nop
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	24000624 	.word	0x24000624

0800ae54 <_GLOBAL__sub_I_Bosatsu>:
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae5c:	2001      	movs	r0, #1
 800ae5e:	f7ff ffd7 	bl	800ae10 <_Z41__static_initialization_and_destruction_0ii>
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <_GLOBAL__sub_D_Bosatsu>:
 800ae64:	b580      	push	{r7, lr}
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	f7ff ffcf 	bl	800ae10 <_Z41__static_initialization_and_destruction_0ii>
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <_ZdlPv>:
 800ae74:	f000 b834 	b.w	800aee0 <free>

0800ae78 <_ZdlPvj>:
 800ae78:	f7ff bffc 	b.w	800ae74 <_ZdlPv>

0800ae7c <__errno>:
 800ae7c:	4b01      	ldr	r3, [pc, #4]	; (800ae84 <__errno+0x8>)
 800ae7e:	6818      	ldr	r0, [r3, #0]
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	24000010 	.word	0x24000010

0800ae88 <__libc_init_array>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	4e0d      	ldr	r6, [pc, #52]	; (800aec0 <__libc_init_array+0x38>)
 800ae8c:	4c0d      	ldr	r4, [pc, #52]	; (800aec4 <__libc_init_array+0x3c>)
 800ae8e:	1ba4      	subs	r4, r4, r6
 800ae90:	10a4      	asrs	r4, r4, #2
 800ae92:	2500      	movs	r5, #0
 800ae94:	42a5      	cmp	r5, r4
 800ae96:	d109      	bne.n	800aeac <__libc_init_array+0x24>
 800ae98:	4e0b      	ldr	r6, [pc, #44]	; (800aec8 <__libc_init_array+0x40>)
 800ae9a:	4c0c      	ldr	r4, [pc, #48]	; (800aecc <__libc_init_array+0x44>)
 800ae9c:	f001 fd12 	bl	800c8c4 <_init>
 800aea0:	1ba4      	subs	r4, r4, r6
 800aea2:	10a4      	asrs	r4, r4, #2
 800aea4:	2500      	movs	r5, #0
 800aea6:	42a5      	cmp	r5, r4
 800aea8:	d105      	bne.n	800aeb6 <__libc_init_array+0x2e>
 800aeaa:	bd70      	pop	{r4, r5, r6, pc}
 800aeac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aeb0:	4798      	blx	r3
 800aeb2:	3501      	adds	r5, #1
 800aeb4:	e7ee      	b.n	800ae94 <__libc_init_array+0xc>
 800aeb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aeba:	4798      	blx	r3
 800aebc:	3501      	adds	r5, #1
 800aebe:	e7f2      	b.n	800aea6 <__libc_init_array+0x1e>
 800aec0:	0800cc20 	.word	0x0800cc20
 800aec4:	0800cc20 	.word	0x0800cc20
 800aec8:	0800cc20 	.word	0x0800cc20
 800aecc:	0800cc2c 	.word	0x0800cc2c

0800aed0 <malloc>:
 800aed0:	4b02      	ldr	r3, [pc, #8]	; (800aedc <malloc+0xc>)
 800aed2:	4601      	mov	r1, r0
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	f000 b86d 	b.w	800afb4 <_malloc_r>
 800aeda:	bf00      	nop
 800aedc:	24000010 	.word	0x24000010

0800aee0 <free>:
 800aee0:	4b02      	ldr	r3, [pc, #8]	; (800aeec <free+0xc>)
 800aee2:	4601      	mov	r1, r0
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	f000 b817 	b.w	800af18 <_free_r>
 800aeea:	bf00      	nop
 800aeec:	24000010 	.word	0x24000010

0800aef0 <memcpy>:
 800aef0:	b510      	push	{r4, lr}
 800aef2:	1e43      	subs	r3, r0, #1
 800aef4:	440a      	add	r2, r1
 800aef6:	4291      	cmp	r1, r2
 800aef8:	d100      	bne.n	800aefc <memcpy+0xc>
 800aefa:	bd10      	pop	{r4, pc}
 800aefc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af04:	e7f7      	b.n	800aef6 <memcpy+0x6>

0800af06 <memset>:
 800af06:	4402      	add	r2, r0
 800af08:	4603      	mov	r3, r0
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d100      	bne.n	800af10 <memset+0xa>
 800af0e:	4770      	bx	lr
 800af10:	f803 1b01 	strb.w	r1, [r3], #1
 800af14:	e7f9      	b.n	800af0a <memset+0x4>
	...

0800af18 <_free_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4605      	mov	r5, r0
 800af1c:	2900      	cmp	r1, #0
 800af1e:	d045      	beq.n	800afac <_free_r+0x94>
 800af20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af24:	1f0c      	subs	r4, r1, #4
 800af26:	2b00      	cmp	r3, #0
 800af28:	bfb8      	it	lt
 800af2a:	18e4      	addlt	r4, r4, r3
 800af2c:	f001 f9be 	bl	800c2ac <__malloc_lock>
 800af30:	4a1f      	ldr	r2, [pc, #124]	; (800afb0 <_free_r+0x98>)
 800af32:	6813      	ldr	r3, [r2, #0]
 800af34:	4610      	mov	r0, r2
 800af36:	b933      	cbnz	r3, 800af46 <_free_r+0x2e>
 800af38:	6063      	str	r3, [r4, #4]
 800af3a:	6014      	str	r4, [r2, #0]
 800af3c:	4628      	mov	r0, r5
 800af3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af42:	f001 b9b4 	b.w	800c2ae <__malloc_unlock>
 800af46:	42a3      	cmp	r3, r4
 800af48:	d90c      	bls.n	800af64 <_free_r+0x4c>
 800af4a:	6821      	ldr	r1, [r4, #0]
 800af4c:	1862      	adds	r2, r4, r1
 800af4e:	4293      	cmp	r3, r2
 800af50:	bf04      	itt	eq
 800af52:	681a      	ldreq	r2, [r3, #0]
 800af54:	685b      	ldreq	r3, [r3, #4]
 800af56:	6063      	str	r3, [r4, #4]
 800af58:	bf04      	itt	eq
 800af5a:	1852      	addeq	r2, r2, r1
 800af5c:	6022      	streq	r2, [r4, #0]
 800af5e:	6004      	str	r4, [r0, #0]
 800af60:	e7ec      	b.n	800af3c <_free_r+0x24>
 800af62:	4613      	mov	r3, r2
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	b10a      	cbz	r2, 800af6c <_free_r+0x54>
 800af68:	42a2      	cmp	r2, r4
 800af6a:	d9fa      	bls.n	800af62 <_free_r+0x4a>
 800af6c:	6819      	ldr	r1, [r3, #0]
 800af6e:	1858      	adds	r0, r3, r1
 800af70:	42a0      	cmp	r0, r4
 800af72:	d10b      	bne.n	800af8c <_free_r+0x74>
 800af74:	6820      	ldr	r0, [r4, #0]
 800af76:	4401      	add	r1, r0
 800af78:	1858      	adds	r0, r3, r1
 800af7a:	4282      	cmp	r2, r0
 800af7c:	6019      	str	r1, [r3, #0]
 800af7e:	d1dd      	bne.n	800af3c <_free_r+0x24>
 800af80:	6810      	ldr	r0, [r2, #0]
 800af82:	6852      	ldr	r2, [r2, #4]
 800af84:	605a      	str	r2, [r3, #4]
 800af86:	4401      	add	r1, r0
 800af88:	6019      	str	r1, [r3, #0]
 800af8a:	e7d7      	b.n	800af3c <_free_r+0x24>
 800af8c:	d902      	bls.n	800af94 <_free_r+0x7c>
 800af8e:	230c      	movs	r3, #12
 800af90:	602b      	str	r3, [r5, #0]
 800af92:	e7d3      	b.n	800af3c <_free_r+0x24>
 800af94:	6820      	ldr	r0, [r4, #0]
 800af96:	1821      	adds	r1, r4, r0
 800af98:	428a      	cmp	r2, r1
 800af9a:	bf04      	itt	eq
 800af9c:	6811      	ldreq	r1, [r2, #0]
 800af9e:	6852      	ldreq	r2, [r2, #4]
 800afa0:	6062      	str	r2, [r4, #4]
 800afa2:	bf04      	itt	eq
 800afa4:	1809      	addeq	r1, r1, r0
 800afa6:	6021      	streq	r1, [r4, #0]
 800afa8:	605c      	str	r4, [r3, #4]
 800afaa:	e7c7      	b.n	800af3c <_free_r+0x24>
 800afac:	bd38      	pop	{r3, r4, r5, pc}
 800afae:	bf00      	nop
 800afb0:	2400358c 	.word	0x2400358c

0800afb4 <_malloc_r>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	1ccd      	adds	r5, r1, #3
 800afb8:	f025 0503 	bic.w	r5, r5, #3
 800afbc:	3508      	adds	r5, #8
 800afbe:	2d0c      	cmp	r5, #12
 800afc0:	bf38      	it	cc
 800afc2:	250c      	movcc	r5, #12
 800afc4:	2d00      	cmp	r5, #0
 800afc6:	4606      	mov	r6, r0
 800afc8:	db01      	blt.n	800afce <_malloc_r+0x1a>
 800afca:	42a9      	cmp	r1, r5
 800afcc:	d903      	bls.n	800afd6 <_malloc_r+0x22>
 800afce:	230c      	movs	r3, #12
 800afd0:	6033      	str	r3, [r6, #0]
 800afd2:	2000      	movs	r0, #0
 800afd4:	bd70      	pop	{r4, r5, r6, pc}
 800afd6:	f001 f969 	bl	800c2ac <__malloc_lock>
 800afda:	4a21      	ldr	r2, [pc, #132]	; (800b060 <_malloc_r+0xac>)
 800afdc:	6814      	ldr	r4, [r2, #0]
 800afde:	4621      	mov	r1, r4
 800afe0:	b991      	cbnz	r1, 800b008 <_malloc_r+0x54>
 800afe2:	4c20      	ldr	r4, [pc, #128]	; (800b064 <_malloc_r+0xb0>)
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	b91b      	cbnz	r3, 800aff0 <_malloc_r+0x3c>
 800afe8:	4630      	mov	r0, r6
 800afea:	f000 fb67 	bl	800b6bc <_sbrk_r>
 800afee:	6020      	str	r0, [r4, #0]
 800aff0:	4629      	mov	r1, r5
 800aff2:	4630      	mov	r0, r6
 800aff4:	f000 fb62 	bl	800b6bc <_sbrk_r>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d124      	bne.n	800b046 <_malloc_r+0x92>
 800affc:	230c      	movs	r3, #12
 800affe:	6033      	str	r3, [r6, #0]
 800b000:	4630      	mov	r0, r6
 800b002:	f001 f954 	bl	800c2ae <__malloc_unlock>
 800b006:	e7e4      	b.n	800afd2 <_malloc_r+0x1e>
 800b008:	680b      	ldr	r3, [r1, #0]
 800b00a:	1b5b      	subs	r3, r3, r5
 800b00c:	d418      	bmi.n	800b040 <_malloc_r+0x8c>
 800b00e:	2b0b      	cmp	r3, #11
 800b010:	d90f      	bls.n	800b032 <_malloc_r+0x7e>
 800b012:	600b      	str	r3, [r1, #0]
 800b014:	50cd      	str	r5, [r1, r3]
 800b016:	18cc      	adds	r4, r1, r3
 800b018:	4630      	mov	r0, r6
 800b01a:	f001 f948 	bl	800c2ae <__malloc_unlock>
 800b01e:	f104 000b 	add.w	r0, r4, #11
 800b022:	1d23      	adds	r3, r4, #4
 800b024:	f020 0007 	bic.w	r0, r0, #7
 800b028:	1ac3      	subs	r3, r0, r3
 800b02a:	d0d3      	beq.n	800afd4 <_malloc_r+0x20>
 800b02c:	425a      	negs	r2, r3
 800b02e:	50e2      	str	r2, [r4, r3]
 800b030:	e7d0      	b.n	800afd4 <_malloc_r+0x20>
 800b032:	428c      	cmp	r4, r1
 800b034:	684b      	ldr	r3, [r1, #4]
 800b036:	bf16      	itet	ne
 800b038:	6063      	strne	r3, [r4, #4]
 800b03a:	6013      	streq	r3, [r2, #0]
 800b03c:	460c      	movne	r4, r1
 800b03e:	e7eb      	b.n	800b018 <_malloc_r+0x64>
 800b040:	460c      	mov	r4, r1
 800b042:	6849      	ldr	r1, [r1, #4]
 800b044:	e7cc      	b.n	800afe0 <_malloc_r+0x2c>
 800b046:	1cc4      	adds	r4, r0, #3
 800b048:	f024 0403 	bic.w	r4, r4, #3
 800b04c:	42a0      	cmp	r0, r4
 800b04e:	d005      	beq.n	800b05c <_malloc_r+0xa8>
 800b050:	1a21      	subs	r1, r4, r0
 800b052:	4630      	mov	r0, r6
 800b054:	f000 fb32 	bl	800b6bc <_sbrk_r>
 800b058:	3001      	adds	r0, #1
 800b05a:	d0cf      	beq.n	800affc <_malloc_r+0x48>
 800b05c:	6025      	str	r5, [r4, #0]
 800b05e:	e7db      	b.n	800b018 <_malloc_r+0x64>
 800b060:	2400358c 	.word	0x2400358c
 800b064:	24003590 	.word	0x24003590

0800b068 <__cvt>:
 800b068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b06a:	ed2d 8b02 	vpush	{d8}
 800b06e:	eeb0 8b40 	vmov.f64	d8, d0
 800b072:	b085      	sub	sp, #20
 800b074:	4617      	mov	r7, r2
 800b076:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b078:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b07a:	ee18 2a90 	vmov	r2, s17
 800b07e:	f025 0520 	bic.w	r5, r5, #32
 800b082:	2a00      	cmp	r2, #0
 800b084:	bfb6      	itet	lt
 800b086:	222d      	movlt	r2, #45	; 0x2d
 800b088:	2200      	movge	r2, #0
 800b08a:	eeb1 8b40 	vneglt.f64	d8, d0
 800b08e:	2d46      	cmp	r5, #70	; 0x46
 800b090:	460c      	mov	r4, r1
 800b092:	701a      	strb	r2, [r3, #0]
 800b094:	d004      	beq.n	800b0a0 <__cvt+0x38>
 800b096:	2d45      	cmp	r5, #69	; 0x45
 800b098:	d100      	bne.n	800b09c <__cvt+0x34>
 800b09a:	3401      	adds	r4, #1
 800b09c:	2102      	movs	r1, #2
 800b09e:	e000      	b.n	800b0a2 <__cvt+0x3a>
 800b0a0:	2103      	movs	r1, #3
 800b0a2:	ab03      	add	r3, sp, #12
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	ab02      	add	r3, sp, #8
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	4633      	mov	r3, r6
 800b0ae:	eeb0 0b48 	vmov.f64	d0, d8
 800b0b2:	f000 fba1 	bl	800b7f8 <_dtoa_r>
 800b0b6:	2d47      	cmp	r5, #71	; 0x47
 800b0b8:	d101      	bne.n	800b0be <__cvt+0x56>
 800b0ba:	07fb      	lsls	r3, r7, #31
 800b0bc:	d51e      	bpl.n	800b0fc <__cvt+0x94>
 800b0be:	2d46      	cmp	r5, #70	; 0x46
 800b0c0:	eb00 0304 	add.w	r3, r0, r4
 800b0c4:	d10c      	bne.n	800b0e0 <__cvt+0x78>
 800b0c6:	7802      	ldrb	r2, [r0, #0]
 800b0c8:	2a30      	cmp	r2, #48	; 0x30
 800b0ca:	d107      	bne.n	800b0dc <__cvt+0x74>
 800b0cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d4:	bf1c      	itt	ne
 800b0d6:	f1c4 0401 	rsbne	r4, r4, #1
 800b0da:	6034      	strne	r4, [r6, #0]
 800b0dc:	6832      	ldr	r2, [r6, #0]
 800b0de:	4413      	add	r3, r2
 800b0e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e8:	d007      	beq.n	800b0fa <__cvt+0x92>
 800b0ea:	2130      	movs	r1, #48	; 0x30
 800b0ec:	9a03      	ldr	r2, [sp, #12]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d204      	bcs.n	800b0fc <__cvt+0x94>
 800b0f2:	1c54      	adds	r4, r2, #1
 800b0f4:	9403      	str	r4, [sp, #12]
 800b0f6:	7011      	strb	r1, [r2, #0]
 800b0f8:	e7f8      	b.n	800b0ec <__cvt+0x84>
 800b0fa:	9303      	str	r3, [sp, #12]
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b100:	1a1b      	subs	r3, r3, r0
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	b005      	add	sp, #20
 800b106:	ecbd 8b02 	vpop	{d8}
 800b10a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b10c <__exponent>:
 800b10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b10e:	2900      	cmp	r1, #0
 800b110:	4604      	mov	r4, r0
 800b112:	bfba      	itte	lt
 800b114:	4249      	neglt	r1, r1
 800b116:	232d      	movlt	r3, #45	; 0x2d
 800b118:	232b      	movge	r3, #43	; 0x2b
 800b11a:	2909      	cmp	r1, #9
 800b11c:	f804 2b02 	strb.w	r2, [r4], #2
 800b120:	7043      	strb	r3, [r0, #1]
 800b122:	dd20      	ble.n	800b166 <__exponent+0x5a>
 800b124:	f10d 0307 	add.w	r3, sp, #7
 800b128:	461f      	mov	r7, r3
 800b12a:	260a      	movs	r6, #10
 800b12c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b130:	fb06 1115 	mls	r1, r6, r5, r1
 800b134:	3130      	adds	r1, #48	; 0x30
 800b136:	2d09      	cmp	r5, #9
 800b138:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b13c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800b140:	4629      	mov	r1, r5
 800b142:	dc09      	bgt.n	800b158 <__exponent+0x4c>
 800b144:	3130      	adds	r1, #48	; 0x30
 800b146:	3b02      	subs	r3, #2
 800b148:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b14c:	42bb      	cmp	r3, r7
 800b14e:	4622      	mov	r2, r4
 800b150:	d304      	bcc.n	800b15c <__exponent+0x50>
 800b152:	1a10      	subs	r0, r2, r0
 800b154:	b003      	add	sp, #12
 800b156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b158:	4613      	mov	r3, r2
 800b15a:	e7e7      	b.n	800b12c <__exponent+0x20>
 800b15c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b160:	f804 2b01 	strb.w	r2, [r4], #1
 800b164:	e7f2      	b.n	800b14c <__exponent+0x40>
 800b166:	2330      	movs	r3, #48	; 0x30
 800b168:	4419      	add	r1, r3
 800b16a:	7083      	strb	r3, [r0, #2]
 800b16c:	1d02      	adds	r2, r0, #4
 800b16e:	70c1      	strb	r1, [r0, #3]
 800b170:	e7ef      	b.n	800b152 <__exponent+0x46>
 800b172:	0000      	movs	r0, r0
 800b174:	0000      	movs	r0, r0
	...

0800b178 <_printf_float>:
 800b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	b08d      	sub	sp, #52	; 0x34
 800b17e:	460c      	mov	r4, r1
 800b180:	4616      	mov	r6, r2
 800b182:	461f      	mov	r7, r3
 800b184:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b188:	4605      	mov	r5, r0
 800b18a:	f001 f881 	bl	800c290 <_localeconv_r>
 800b18e:	f8d0 b000 	ldr.w	fp, [r0]
 800b192:	4658      	mov	r0, fp
 800b194:	f7f5 f8a0 	bl	80002d8 <strlen>
 800b198:	2300      	movs	r3, #0
 800b19a:	930a      	str	r3, [sp, #40]	; 0x28
 800b19c:	f8d8 3000 	ldr.w	r3, [r8]
 800b1a0:	9005      	str	r0, [sp, #20]
 800b1a2:	3307      	adds	r3, #7
 800b1a4:	f023 0307 	bic.w	r3, r3, #7
 800b1a8:	f103 0108 	add.w	r1, r3, #8
 800b1ac:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b1b0:	6822      	ldr	r2, [r4, #0]
 800b1b2:	f8c8 1000 	str.w	r1, [r8]
 800b1b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b1ba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b1be:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800b448 <_printf_float+0x2d0>
 800b1c2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b1c6:	eeb0 6bc0 	vabs.f64	d6, d0
 800b1ca:	eeb4 6b47 	vcmp.f64	d6, d7
 800b1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1d2:	dd24      	ble.n	800b21e <_printf_float+0xa6>
 800b1d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1dc:	d502      	bpl.n	800b1e4 <_printf_float+0x6c>
 800b1de:	232d      	movs	r3, #45	; 0x2d
 800b1e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1e4:	499a      	ldr	r1, [pc, #616]	; (800b450 <_printf_float+0x2d8>)
 800b1e6:	4b9b      	ldr	r3, [pc, #620]	; (800b454 <_printf_float+0x2dc>)
 800b1e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b1ec:	bf8c      	ite	hi
 800b1ee:	4688      	movhi	r8, r1
 800b1f0:	4698      	movls	r8, r3
 800b1f2:	f022 0204 	bic.w	r2, r2, #4
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	6123      	str	r3, [r4, #16]
 800b1fa:	6022      	str	r2, [r4, #0]
 800b1fc:	f04f 0a00 	mov.w	sl, #0
 800b200:	9700      	str	r7, [sp, #0]
 800b202:	4633      	mov	r3, r6
 800b204:	aa0b      	add	r2, sp, #44	; 0x2c
 800b206:	4621      	mov	r1, r4
 800b208:	4628      	mov	r0, r5
 800b20a:	f000 f9e1 	bl	800b5d0 <_printf_common>
 800b20e:	3001      	adds	r0, #1
 800b210:	f040 8089 	bne.w	800b326 <_printf_float+0x1ae>
 800b214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b218:	b00d      	add	sp, #52	; 0x34
 800b21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21e:	eeb4 0b40 	vcmp.f64	d0, d0
 800b222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b226:	d702      	bvc.n	800b22e <_printf_float+0xb6>
 800b228:	498b      	ldr	r1, [pc, #556]	; (800b458 <_printf_float+0x2e0>)
 800b22a:	4b8c      	ldr	r3, [pc, #560]	; (800b45c <_printf_float+0x2e4>)
 800b22c:	e7dc      	b.n	800b1e8 <_printf_float+0x70>
 800b22e:	6861      	ldr	r1, [r4, #4]
 800b230:	1c4b      	adds	r3, r1, #1
 800b232:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b236:	ab0a      	add	r3, sp, #40	; 0x28
 800b238:	a809      	add	r0, sp, #36	; 0x24
 800b23a:	d13b      	bne.n	800b2b4 <_printf_float+0x13c>
 800b23c:	2106      	movs	r1, #6
 800b23e:	6061      	str	r1, [r4, #4]
 800b240:	f04f 0c00 	mov.w	ip, #0
 800b244:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b248:	e9cd 0900 	strd	r0, r9, [sp]
 800b24c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b250:	6022      	str	r2, [r4, #0]
 800b252:	6861      	ldr	r1, [r4, #4]
 800b254:	4628      	mov	r0, r5
 800b256:	f7ff ff07 	bl	800b068 <__cvt>
 800b25a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800b25e:	2b47      	cmp	r3, #71	; 0x47
 800b260:	4680      	mov	r8, r0
 800b262:	d109      	bne.n	800b278 <_printf_float+0x100>
 800b264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b266:	1cd8      	adds	r0, r3, #3
 800b268:	db02      	blt.n	800b270 <_printf_float+0xf8>
 800b26a:	6862      	ldr	r2, [r4, #4]
 800b26c:	4293      	cmp	r3, r2
 800b26e:	dd47      	ble.n	800b300 <_printf_float+0x188>
 800b270:	f1a9 0902 	sub.w	r9, r9, #2
 800b274:	fa5f f989 	uxtb.w	r9, r9
 800b278:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b27c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b27e:	d824      	bhi.n	800b2ca <_printf_float+0x152>
 800b280:	3901      	subs	r1, #1
 800b282:	464a      	mov	r2, r9
 800b284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b288:	9109      	str	r1, [sp, #36]	; 0x24
 800b28a:	f7ff ff3f 	bl	800b10c <__exponent>
 800b28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b290:	1813      	adds	r3, r2, r0
 800b292:	2a01      	cmp	r2, #1
 800b294:	4682      	mov	sl, r0
 800b296:	6123      	str	r3, [r4, #16]
 800b298:	dc02      	bgt.n	800b2a0 <_printf_float+0x128>
 800b29a:	6822      	ldr	r2, [r4, #0]
 800b29c:	07d1      	lsls	r1, r2, #31
 800b29e:	d501      	bpl.n	800b2a4 <_printf_float+0x12c>
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	6123      	str	r3, [r4, #16]
 800b2a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d0a9      	beq.n	800b200 <_printf_float+0x88>
 800b2ac:	232d      	movs	r3, #45	; 0x2d
 800b2ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2b2:	e7a5      	b.n	800b200 <_printf_float+0x88>
 800b2b4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800b2b8:	f000 8178 	beq.w	800b5ac <_printf_float+0x434>
 800b2bc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b2c0:	d1be      	bne.n	800b240 <_printf_float+0xc8>
 800b2c2:	2900      	cmp	r1, #0
 800b2c4:	d1bc      	bne.n	800b240 <_printf_float+0xc8>
 800b2c6:	2101      	movs	r1, #1
 800b2c8:	e7b9      	b.n	800b23e <_printf_float+0xc6>
 800b2ca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b2ce:	d119      	bne.n	800b304 <_printf_float+0x18c>
 800b2d0:	2900      	cmp	r1, #0
 800b2d2:	6863      	ldr	r3, [r4, #4]
 800b2d4:	dd0c      	ble.n	800b2f0 <_printf_float+0x178>
 800b2d6:	6121      	str	r1, [r4, #16]
 800b2d8:	b913      	cbnz	r3, 800b2e0 <_printf_float+0x168>
 800b2da:	6822      	ldr	r2, [r4, #0]
 800b2dc:	07d2      	lsls	r2, r2, #31
 800b2de:	d502      	bpl.n	800b2e6 <_printf_float+0x16e>
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	440b      	add	r3, r1
 800b2e4:	6123      	str	r3, [r4, #16]
 800b2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e8:	65a3      	str	r3, [r4, #88]	; 0x58
 800b2ea:	f04f 0a00 	mov.w	sl, #0
 800b2ee:	e7d9      	b.n	800b2a4 <_printf_float+0x12c>
 800b2f0:	b913      	cbnz	r3, 800b2f8 <_printf_float+0x180>
 800b2f2:	6822      	ldr	r2, [r4, #0]
 800b2f4:	07d0      	lsls	r0, r2, #31
 800b2f6:	d501      	bpl.n	800b2fc <_printf_float+0x184>
 800b2f8:	3302      	adds	r3, #2
 800b2fa:	e7f3      	b.n	800b2e4 <_printf_float+0x16c>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e7f1      	b.n	800b2e4 <_printf_float+0x16c>
 800b300:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b304:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b308:	4293      	cmp	r3, r2
 800b30a:	db05      	blt.n	800b318 <_printf_float+0x1a0>
 800b30c:	6822      	ldr	r2, [r4, #0]
 800b30e:	6123      	str	r3, [r4, #16]
 800b310:	07d1      	lsls	r1, r2, #31
 800b312:	d5e8      	bpl.n	800b2e6 <_printf_float+0x16e>
 800b314:	3301      	adds	r3, #1
 800b316:	e7e5      	b.n	800b2e4 <_printf_float+0x16c>
 800b318:	2b00      	cmp	r3, #0
 800b31a:	bfd4      	ite	le
 800b31c:	f1c3 0302 	rsble	r3, r3, #2
 800b320:	2301      	movgt	r3, #1
 800b322:	4413      	add	r3, r2
 800b324:	e7de      	b.n	800b2e4 <_printf_float+0x16c>
 800b326:	6823      	ldr	r3, [r4, #0]
 800b328:	055a      	lsls	r2, r3, #21
 800b32a:	d407      	bmi.n	800b33c <_printf_float+0x1c4>
 800b32c:	6923      	ldr	r3, [r4, #16]
 800b32e:	4642      	mov	r2, r8
 800b330:	4631      	mov	r1, r6
 800b332:	4628      	mov	r0, r5
 800b334:	47b8      	blx	r7
 800b336:	3001      	adds	r0, #1
 800b338:	d12a      	bne.n	800b390 <_printf_float+0x218>
 800b33a:	e76b      	b.n	800b214 <_printf_float+0x9c>
 800b33c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b340:	f240 80de 	bls.w	800b500 <_printf_float+0x388>
 800b344:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b348:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b350:	d133      	bne.n	800b3ba <_printf_float+0x242>
 800b352:	2301      	movs	r3, #1
 800b354:	4a42      	ldr	r2, [pc, #264]	; (800b460 <_printf_float+0x2e8>)
 800b356:	4631      	mov	r1, r6
 800b358:	4628      	mov	r0, r5
 800b35a:	47b8      	blx	r7
 800b35c:	3001      	adds	r0, #1
 800b35e:	f43f af59 	beq.w	800b214 <_printf_float+0x9c>
 800b362:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b366:	429a      	cmp	r2, r3
 800b368:	db02      	blt.n	800b370 <_printf_float+0x1f8>
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	07d8      	lsls	r0, r3, #31
 800b36e:	d50f      	bpl.n	800b390 <_printf_float+0x218>
 800b370:	9b05      	ldr	r3, [sp, #20]
 800b372:	465a      	mov	r2, fp
 800b374:	4631      	mov	r1, r6
 800b376:	4628      	mov	r0, r5
 800b378:	47b8      	blx	r7
 800b37a:	3001      	adds	r0, #1
 800b37c:	f43f af4a 	beq.w	800b214 <_printf_float+0x9c>
 800b380:	f04f 0800 	mov.w	r8, #0
 800b384:	f104 091a 	add.w	r9, r4, #26
 800b388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b38a:	3b01      	subs	r3, #1
 800b38c:	4543      	cmp	r3, r8
 800b38e:	dc09      	bgt.n	800b3a4 <_printf_float+0x22c>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	079b      	lsls	r3, r3, #30
 800b394:	f100 8105 	bmi.w	800b5a2 <_printf_float+0x42a>
 800b398:	68e0      	ldr	r0, [r4, #12]
 800b39a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b39c:	4298      	cmp	r0, r3
 800b39e:	bfb8      	it	lt
 800b3a0:	4618      	movlt	r0, r3
 800b3a2:	e739      	b.n	800b218 <_printf_float+0xa0>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	464a      	mov	r2, r9
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	47b8      	blx	r7
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	f43f af30 	beq.w	800b214 <_printf_float+0x9c>
 800b3b4:	f108 0801 	add.w	r8, r8, #1
 800b3b8:	e7e6      	b.n	800b388 <_printf_float+0x210>
 800b3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	dc2b      	bgt.n	800b418 <_printf_float+0x2a0>
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	4a27      	ldr	r2, [pc, #156]	; (800b460 <_printf_float+0x2e8>)
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	47b8      	blx	r7
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	f43f af22 	beq.w	800b214 <_printf_float+0x9c>
 800b3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d2:	b923      	cbnz	r3, 800b3de <_printf_float+0x266>
 800b3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d6:	b913      	cbnz	r3, 800b3de <_printf_float+0x266>
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	07d9      	lsls	r1, r3, #31
 800b3dc:	d5d8      	bpl.n	800b390 <_printf_float+0x218>
 800b3de:	9b05      	ldr	r3, [sp, #20]
 800b3e0:	465a      	mov	r2, fp
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	47b8      	blx	r7
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	f43f af13 	beq.w	800b214 <_printf_float+0x9c>
 800b3ee:	f04f 0900 	mov.w	r9, #0
 800b3f2:	f104 0a1a 	add.w	sl, r4, #26
 800b3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f8:	425b      	negs	r3, r3
 800b3fa:	454b      	cmp	r3, r9
 800b3fc:	dc01      	bgt.n	800b402 <_printf_float+0x28a>
 800b3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b400:	e795      	b.n	800b32e <_printf_float+0x1b6>
 800b402:	2301      	movs	r3, #1
 800b404:	4652      	mov	r2, sl
 800b406:	4631      	mov	r1, r6
 800b408:	4628      	mov	r0, r5
 800b40a:	47b8      	blx	r7
 800b40c:	3001      	adds	r0, #1
 800b40e:	f43f af01 	beq.w	800b214 <_printf_float+0x9c>
 800b412:	f109 0901 	add.w	r9, r9, #1
 800b416:	e7ee      	b.n	800b3f6 <_printf_float+0x27e>
 800b418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b41a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b41c:	429a      	cmp	r2, r3
 800b41e:	bfa8      	it	ge
 800b420:	461a      	movge	r2, r3
 800b422:	2a00      	cmp	r2, #0
 800b424:	4691      	mov	r9, r2
 800b426:	dd07      	ble.n	800b438 <_printf_float+0x2c0>
 800b428:	4613      	mov	r3, r2
 800b42a:	4631      	mov	r1, r6
 800b42c:	4642      	mov	r2, r8
 800b42e:	4628      	mov	r0, r5
 800b430:	47b8      	blx	r7
 800b432:	3001      	adds	r0, #1
 800b434:	f43f aeee 	beq.w	800b214 <_printf_float+0x9c>
 800b438:	f104 031a 	add.w	r3, r4, #26
 800b43c:	f04f 0a00 	mov.w	sl, #0
 800b440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b444:	9307      	str	r3, [sp, #28]
 800b446:	e017      	b.n	800b478 <_printf_float+0x300>
 800b448:	ffffffff 	.word	0xffffffff
 800b44c:	7fefffff 	.word	0x7fefffff
 800b450:	0800c9f0 	.word	0x0800c9f0
 800b454:	0800c9ec 	.word	0x0800c9ec
 800b458:	0800c9f8 	.word	0x0800c9f8
 800b45c:	0800c9f4 	.word	0x0800c9f4
 800b460:	0800c9fc 	.word	0x0800c9fc
 800b464:	2301      	movs	r3, #1
 800b466:	9a07      	ldr	r2, [sp, #28]
 800b468:	4631      	mov	r1, r6
 800b46a:	4628      	mov	r0, r5
 800b46c:	47b8      	blx	r7
 800b46e:	3001      	adds	r0, #1
 800b470:	f43f aed0 	beq.w	800b214 <_printf_float+0x9c>
 800b474:	f10a 0a01 	add.w	sl, sl, #1
 800b478:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b47a:	9306      	str	r3, [sp, #24]
 800b47c:	eba3 0309 	sub.w	r3, r3, r9
 800b480:	4553      	cmp	r3, sl
 800b482:	dcef      	bgt.n	800b464 <_printf_float+0x2ec>
 800b484:	9b06      	ldr	r3, [sp, #24]
 800b486:	4498      	add	r8, r3
 800b488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b48c:	429a      	cmp	r2, r3
 800b48e:	db15      	blt.n	800b4bc <_printf_float+0x344>
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	07da      	lsls	r2, r3, #31
 800b494:	d412      	bmi.n	800b4bc <_printf_float+0x344>
 800b496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b498:	9a06      	ldr	r2, [sp, #24]
 800b49a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b49c:	1a9a      	subs	r2, r3, r2
 800b49e:	eba3 0a01 	sub.w	sl, r3, r1
 800b4a2:	4592      	cmp	sl, r2
 800b4a4:	bfa8      	it	ge
 800b4a6:	4692      	movge	sl, r2
 800b4a8:	f1ba 0f00 	cmp.w	sl, #0
 800b4ac:	dc0e      	bgt.n	800b4cc <_printf_float+0x354>
 800b4ae:	f04f 0800 	mov.w	r8, #0
 800b4b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4b6:	f104 091a 	add.w	r9, r4, #26
 800b4ba:	e019      	b.n	800b4f0 <_printf_float+0x378>
 800b4bc:	9b05      	ldr	r3, [sp, #20]
 800b4be:	465a      	mov	r2, fp
 800b4c0:	4631      	mov	r1, r6
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	47b8      	blx	r7
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d1e5      	bne.n	800b496 <_printf_float+0x31e>
 800b4ca:	e6a3      	b.n	800b214 <_printf_float+0x9c>
 800b4cc:	4653      	mov	r3, sl
 800b4ce:	4642      	mov	r2, r8
 800b4d0:	4631      	mov	r1, r6
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	47b8      	blx	r7
 800b4d6:	3001      	adds	r0, #1
 800b4d8:	d1e9      	bne.n	800b4ae <_printf_float+0x336>
 800b4da:	e69b      	b.n	800b214 <_printf_float+0x9c>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	464a      	mov	r2, r9
 800b4e0:	4631      	mov	r1, r6
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	47b8      	blx	r7
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	f43f ae94 	beq.w	800b214 <_printf_float+0x9c>
 800b4ec:	f108 0801 	add.w	r8, r8, #1
 800b4f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4f4:	1a9b      	subs	r3, r3, r2
 800b4f6:	eba3 030a 	sub.w	r3, r3, sl
 800b4fa:	4543      	cmp	r3, r8
 800b4fc:	dcee      	bgt.n	800b4dc <_printf_float+0x364>
 800b4fe:	e747      	b.n	800b390 <_printf_float+0x218>
 800b500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b502:	2a01      	cmp	r2, #1
 800b504:	dc01      	bgt.n	800b50a <_printf_float+0x392>
 800b506:	07db      	lsls	r3, r3, #31
 800b508:	d539      	bpl.n	800b57e <_printf_float+0x406>
 800b50a:	2301      	movs	r3, #1
 800b50c:	4642      	mov	r2, r8
 800b50e:	4631      	mov	r1, r6
 800b510:	4628      	mov	r0, r5
 800b512:	47b8      	blx	r7
 800b514:	3001      	adds	r0, #1
 800b516:	f43f ae7d 	beq.w	800b214 <_printf_float+0x9c>
 800b51a:	9b05      	ldr	r3, [sp, #20]
 800b51c:	465a      	mov	r2, fp
 800b51e:	4631      	mov	r1, r6
 800b520:	4628      	mov	r0, r5
 800b522:	47b8      	blx	r7
 800b524:	3001      	adds	r0, #1
 800b526:	f108 0801 	add.w	r8, r8, #1
 800b52a:	f43f ae73 	beq.w	800b214 <_printf_float+0x9c>
 800b52e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b534:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b53c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b540:	d018      	beq.n	800b574 <_printf_float+0x3fc>
 800b542:	4642      	mov	r2, r8
 800b544:	4631      	mov	r1, r6
 800b546:	4628      	mov	r0, r5
 800b548:	47b8      	blx	r7
 800b54a:	3001      	adds	r0, #1
 800b54c:	d10e      	bne.n	800b56c <_printf_float+0x3f4>
 800b54e:	e661      	b.n	800b214 <_printf_float+0x9c>
 800b550:	2301      	movs	r3, #1
 800b552:	464a      	mov	r2, r9
 800b554:	4631      	mov	r1, r6
 800b556:	4628      	mov	r0, r5
 800b558:	47b8      	blx	r7
 800b55a:	3001      	adds	r0, #1
 800b55c:	f43f ae5a 	beq.w	800b214 <_printf_float+0x9c>
 800b560:	f108 0801 	add.w	r8, r8, #1
 800b564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b566:	3b01      	subs	r3, #1
 800b568:	4543      	cmp	r3, r8
 800b56a:	dcf1      	bgt.n	800b550 <_printf_float+0x3d8>
 800b56c:	4653      	mov	r3, sl
 800b56e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b572:	e6dd      	b.n	800b330 <_printf_float+0x1b8>
 800b574:	f04f 0800 	mov.w	r8, #0
 800b578:	f104 091a 	add.w	r9, r4, #26
 800b57c:	e7f2      	b.n	800b564 <_printf_float+0x3ec>
 800b57e:	2301      	movs	r3, #1
 800b580:	e7df      	b.n	800b542 <_printf_float+0x3ca>
 800b582:	2301      	movs	r3, #1
 800b584:	464a      	mov	r2, r9
 800b586:	4631      	mov	r1, r6
 800b588:	4628      	mov	r0, r5
 800b58a:	47b8      	blx	r7
 800b58c:	3001      	adds	r0, #1
 800b58e:	f43f ae41 	beq.w	800b214 <_printf_float+0x9c>
 800b592:	f108 0801 	add.w	r8, r8, #1
 800b596:	68e3      	ldr	r3, [r4, #12]
 800b598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b59a:	1a9b      	subs	r3, r3, r2
 800b59c:	4543      	cmp	r3, r8
 800b59e:	dcf0      	bgt.n	800b582 <_printf_float+0x40a>
 800b5a0:	e6fa      	b.n	800b398 <_printf_float+0x220>
 800b5a2:	f04f 0800 	mov.w	r8, #0
 800b5a6:	f104 0919 	add.w	r9, r4, #25
 800b5aa:	e7f4      	b.n	800b596 <_printf_float+0x41e>
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	f43f ae8a 	beq.w	800b2c6 <_printf_float+0x14e>
 800b5b2:	f04f 0c00 	mov.w	ip, #0
 800b5b6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b5ba:	e9cd 0900 	strd	r0, r9, [sp]
 800b5be:	6022      	str	r2, [r4, #0]
 800b5c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	f7ff fd4f 	bl	800b068 <__cvt>
 800b5ca:	4680      	mov	r8, r0
 800b5cc:	e64a      	b.n	800b264 <_printf_float+0xec>
 800b5ce:	bf00      	nop

0800b5d0 <_printf_common>:
 800b5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d4:	4691      	mov	r9, r2
 800b5d6:	461f      	mov	r7, r3
 800b5d8:	688a      	ldr	r2, [r1, #8]
 800b5da:	690b      	ldr	r3, [r1, #16]
 800b5dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	bfb8      	it	lt
 800b5e4:	4613      	movlt	r3, r2
 800b5e6:	f8c9 3000 	str.w	r3, [r9]
 800b5ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	460c      	mov	r4, r1
 800b5f2:	b112      	cbz	r2, 800b5fa <_printf_common+0x2a>
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	f8c9 3000 	str.w	r3, [r9]
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	0699      	lsls	r1, r3, #26
 800b5fe:	bf42      	ittt	mi
 800b600:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b604:	3302      	addmi	r3, #2
 800b606:	f8c9 3000 	strmi.w	r3, [r9]
 800b60a:	6825      	ldr	r5, [r4, #0]
 800b60c:	f015 0506 	ands.w	r5, r5, #6
 800b610:	d107      	bne.n	800b622 <_printf_common+0x52>
 800b612:	f104 0a19 	add.w	sl, r4, #25
 800b616:	68e3      	ldr	r3, [r4, #12]
 800b618:	f8d9 2000 	ldr.w	r2, [r9]
 800b61c:	1a9b      	subs	r3, r3, r2
 800b61e:	42ab      	cmp	r3, r5
 800b620:	dc28      	bgt.n	800b674 <_printf_common+0xa4>
 800b622:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b626:	6822      	ldr	r2, [r4, #0]
 800b628:	3300      	adds	r3, #0
 800b62a:	bf18      	it	ne
 800b62c:	2301      	movne	r3, #1
 800b62e:	0692      	lsls	r2, r2, #26
 800b630:	d42d      	bmi.n	800b68e <_printf_common+0xbe>
 800b632:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b636:	4639      	mov	r1, r7
 800b638:	4630      	mov	r0, r6
 800b63a:	47c0      	blx	r8
 800b63c:	3001      	adds	r0, #1
 800b63e:	d020      	beq.n	800b682 <_printf_common+0xb2>
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	68e5      	ldr	r5, [r4, #12]
 800b644:	f8d9 2000 	ldr.w	r2, [r9]
 800b648:	f003 0306 	and.w	r3, r3, #6
 800b64c:	2b04      	cmp	r3, #4
 800b64e:	bf08      	it	eq
 800b650:	1aad      	subeq	r5, r5, r2
 800b652:	68a3      	ldr	r3, [r4, #8]
 800b654:	6922      	ldr	r2, [r4, #16]
 800b656:	bf0c      	ite	eq
 800b658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b65c:	2500      	movne	r5, #0
 800b65e:	4293      	cmp	r3, r2
 800b660:	bfc4      	itt	gt
 800b662:	1a9b      	subgt	r3, r3, r2
 800b664:	18ed      	addgt	r5, r5, r3
 800b666:	f04f 0900 	mov.w	r9, #0
 800b66a:	341a      	adds	r4, #26
 800b66c:	454d      	cmp	r5, r9
 800b66e:	d11a      	bne.n	800b6a6 <_printf_common+0xd6>
 800b670:	2000      	movs	r0, #0
 800b672:	e008      	b.n	800b686 <_printf_common+0xb6>
 800b674:	2301      	movs	r3, #1
 800b676:	4652      	mov	r2, sl
 800b678:	4639      	mov	r1, r7
 800b67a:	4630      	mov	r0, r6
 800b67c:	47c0      	blx	r8
 800b67e:	3001      	adds	r0, #1
 800b680:	d103      	bne.n	800b68a <_printf_common+0xba>
 800b682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68a:	3501      	adds	r5, #1
 800b68c:	e7c3      	b.n	800b616 <_printf_common+0x46>
 800b68e:	18e1      	adds	r1, r4, r3
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	2030      	movs	r0, #48	; 0x30
 800b694:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b698:	4422      	add	r2, r4
 800b69a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b69e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6a2:	3302      	adds	r3, #2
 800b6a4:	e7c5      	b.n	800b632 <_printf_common+0x62>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	4622      	mov	r2, r4
 800b6aa:	4639      	mov	r1, r7
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	47c0      	blx	r8
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	d0e6      	beq.n	800b682 <_printf_common+0xb2>
 800b6b4:	f109 0901 	add.w	r9, r9, #1
 800b6b8:	e7d8      	b.n	800b66c <_printf_common+0x9c>
	...

0800b6bc <_sbrk_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	4c06      	ldr	r4, [pc, #24]	; (800b6d8 <_sbrk_r+0x1c>)
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	6023      	str	r3, [r4, #0]
 800b6c8:	f7fe ffb8 	bl	800a63c <_sbrk>
 800b6cc:	1c43      	adds	r3, r0, #1
 800b6ce:	d102      	bne.n	800b6d6 <_sbrk_r+0x1a>
 800b6d0:	6823      	ldr	r3, [r4, #0]
 800b6d2:	b103      	cbz	r3, 800b6d6 <_sbrk_r+0x1a>
 800b6d4:	602b      	str	r3, [r5, #0]
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	2400376c 	.word	0x2400376c

0800b6dc <quorem>:
 800b6dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	6903      	ldr	r3, [r0, #16]
 800b6e2:	690c      	ldr	r4, [r1, #16]
 800b6e4:	42a3      	cmp	r3, r4
 800b6e6:	4680      	mov	r8, r0
 800b6e8:	f2c0 8082 	blt.w	800b7f0 <quorem+0x114>
 800b6ec:	3c01      	subs	r4, #1
 800b6ee:	f101 0714 	add.w	r7, r1, #20
 800b6f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b6f6:	f100 0614 	add.w	r6, r0, #20
 800b6fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b6fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b702:	eb06 030c 	add.w	r3, r6, ip
 800b706:	3501      	adds	r5, #1
 800b708:	eb07 090c 	add.w	r9, r7, ip
 800b70c:	9301      	str	r3, [sp, #4]
 800b70e:	fbb0 f5f5 	udiv	r5, r0, r5
 800b712:	b395      	cbz	r5, 800b77a <quorem+0x9e>
 800b714:	f04f 0a00 	mov.w	sl, #0
 800b718:	4638      	mov	r0, r7
 800b71a:	46b6      	mov	lr, r6
 800b71c:	46d3      	mov	fp, sl
 800b71e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b722:	b293      	uxth	r3, r2
 800b724:	fb05 a303 	mla	r3, r5, r3, sl
 800b728:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	ebab 0303 	sub.w	r3, fp, r3
 800b732:	0c12      	lsrs	r2, r2, #16
 800b734:	f8de b000 	ldr.w	fp, [lr]
 800b738:	fb05 a202 	mla	r2, r5, r2, sl
 800b73c:	fa13 f38b 	uxtah	r3, r3, fp
 800b740:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b744:	fa1f fb82 	uxth.w	fp, r2
 800b748:	f8de 2000 	ldr.w	r2, [lr]
 800b74c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b750:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b754:	b29b      	uxth	r3, r3
 800b756:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b75a:	4581      	cmp	r9, r0
 800b75c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b760:	f84e 3b04 	str.w	r3, [lr], #4
 800b764:	d2db      	bcs.n	800b71e <quorem+0x42>
 800b766:	f856 300c 	ldr.w	r3, [r6, ip]
 800b76a:	b933      	cbnz	r3, 800b77a <quorem+0x9e>
 800b76c:	9b01      	ldr	r3, [sp, #4]
 800b76e:	3b04      	subs	r3, #4
 800b770:	429e      	cmp	r6, r3
 800b772:	461a      	mov	r2, r3
 800b774:	d330      	bcc.n	800b7d8 <quorem+0xfc>
 800b776:	f8c8 4010 	str.w	r4, [r8, #16]
 800b77a:	4640      	mov	r0, r8
 800b77c:	f000 ffae 	bl	800c6dc <__mcmp>
 800b780:	2800      	cmp	r0, #0
 800b782:	db25      	blt.n	800b7d0 <quorem+0xf4>
 800b784:	3501      	adds	r5, #1
 800b786:	4630      	mov	r0, r6
 800b788:	f04f 0c00 	mov.w	ip, #0
 800b78c:	f857 2b04 	ldr.w	r2, [r7], #4
 800b790:	f8d0 e000 	ldr.w	lr, [r0]
 800b794:	b293      	uxth	r3, r2
 800b796:	ebac 0303 	sub.w	r3, ip, r3
 800b79a:	0c12      	lsrs	r2, r2, #16
 800b79c:	fa13 f38e 	uxtah	r3, r3, lr
 800b7a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7ae:	45b9      	cmp	r9, r7
 800b7b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7b4:	f840 3b04 	str.w	r3, [r0], #4
 800b7b8:	d2e8      	bcs.n	800b78c <quorem+0xb0>
 800b7ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b7be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b7c2:	b92a      	cbnz	r2, 800b7d0 <quorem+0xf4>
 800b7c4:	3b04      	subs	r3, #4
 800b7c6:	429e      	cmp	r6, r3
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	d30b      	bcc.n	800b7e4 <quorem+0x108>
 800b7cc:	f8c8 4010 	str.w	r4, [r8, #16]
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	b003      	add	sp, #12
 800b7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d8:	6812      	ldr	r2, [r2, #0]
 800b7da:	3b04      	subs	r3, #4
 800b7dc:	2a00      	cmp	r2, #0
 800b7de:	d1ca      	bne.n	800b776 <quorem+0x9a>
 800b7e0:	3c01      	subs	r4, #1
 800b7e2:	e7c5      	b.n	800b770 <quorem+0x94>
 800b7e4:	6812      	ldr	r2, [r2, #0]
 800b7e6:	3b04      	subs	r3, #4
 800b7e8:	2a00      	cmp	r2, #0
 800b7ea:	d1ef      	bne.n	800b7cc <quorem+0xf0>
 800b7ec:	3c01      	subs	r4, #1
 800b7ee:	e7ea      	b.n	800b7c6 <quorem+0xea>
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	e7ee      	b.n	800b7d2 <quorem+0xf6>
 800b7f4:	0000      	movs	r0, r0
	...

0800b7f8 <_dtoa_r>:
 800b7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fc:	ec57 6b10 	vmov	r6, r7, d0
 800b800:	b095      	sub	sp, #84	; 0x54
 800b802:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b804:	9108      	str	r1, [sp, #32]
 800b806:	4604      	mov	r4, r0
 800b808:	920a      	str	r2, [sp, #40]	; 0x28
 800b80a:	9311      	str	r3, [sp, #68]	; 0x44
 800b80c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800b810:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b814:	b93d      	cbnz	r5, 800b826 <_dtoa_r+0x2e>
 800b816:	2010      	movs	r0, #16
 800b818:	f7ff fb5a 	bl	800aed0 <malloc>
 800b81c:	6260      	str	r0, [r4, #36]	; 0x24
 800b81e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b822:	6005      	str	r5, [r0, #0]
 800b824:	60c5      	str	r5, [r0, #12]
 800b826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b828:	6819      	ldr	r1, [r3, #0]
 800b82a:	b151      	cbz	r1, 800b842 <_dtoa_r+0x4a>
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	604a      	str	r2, [r1, #4]
 800b830:	2301      	movs	r3, #1
 800b832:	4093      	lsls	r3, r2
 800b834:	608b      	str	r3, [r1, #8]
 800b836:	4620      	mov	r0, r4
 800b838:	f000 fd6e 	bl	800c318 <_Bfree>
 800b83c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b83e:	2200      	movs	r2, #0
 800b840:	601a      	str	r2, [r3, #0]
 800b842:	1e3b      	subs	r3, r7, #0
 800b844:	bfb9      	ittee	lt
 800b846:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b84a:	9303      	strlt	r3, [sp, #12]
 800b84c:	2300      	movge	r3, #0
 800b84e:	f8c8 3000 	strge.w	r3, [r8]
 800b852:	9d03      	ldr	r5, [sp, #12]
 800b854:	4bac      	ldr	r3, [pc, #688]	; (800bb08 <_dtoa_r+0x310>)
 800b856:	bfbc      	itt	lt
 800b858:	2201      	movlt	r2, #1
 800b85a:	f8c8 2000 	strlt.w	r2, [r8]
 800b85e:	43ab      	bics	r3, r5
 800b860:	d11b      	bne.n	800b89a <_dtoa_r+0xa2>
 800b862:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b864:	f242 730f 	movw	r3, #9999	; 0x270f
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	9b02      	ldr	r3, [sp, #8]
 800b86c:	b923      	cbnz	r3, 800b878 <_dtoa_r+0x80>
 800b86e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b872:	2d00      	cmp	r5, #0
 800b874:	f000 84dd 	beq.w	800c232 <_dtoa_r+0xa3a>
 800b878:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b87a:	b953      	cbnz	r3, 800b892 <_dtoa_r+0x9a>
 800b87c:	4ba3      	ldr	r3, [pc, #652]	; (800bb0c <_dtoa_r+0x314>)
 800b87e:	e020      	b.n	800b8c2 <_dtoa_r+0xca>
 800b880:	4ba3      	ldr	r3, [pc, #652]	; (800bb10 <_dtoa_r+0x318>)
 800b882:	9304      	str	r3, [sp, #16]
 800b884:	3308      	adds	r3, #8
 800b886:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b888:	6013      	str	r3, [r2, #0]
 800b88a:	9804      	ldr	r0, [sp, #16]
 800b88c:	b015      	add	sp, #84	; 0x54
 800b88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b892:	4b9e      	ldr	r3, [pc, #632]	; (800bb0c <_dtoa_r+0x314>)
 800b894:	9304      	str	r3, [sp, #16]
 800b896:	3303      	adds	r3, #3
 800b898:	e7f5      	b.n	800b886 <_dtoa_r+0x8e>
 800b89a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b89e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b8aa:	d10c      	bne.n	800b8c6 <_dtoa_r+0xce>
 800b8ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	6013      	str	r3, [r2, #0]
 800b8b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f000 84b9 	beq.w	800c22c <_dtoa_r+0xa34>
 800b8ba:	4b96      	ldr	r3, [pc, #600]	; (800bb14 <_dtoa_r+0x31c>)
 800b8bc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b8be:	6013      	str	r3, [r2, #0]
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	9304      	str	r3, [sp, #16]
 800b8c4:	e7e1      	b.n	800b88a <_dtoa_r+0x92>
 800b8c6:	a913      	add	r1, sp, #76	; 0x4c
 800b8c8:	aa12      	add	r2, sp, #72	; 0x48
 800b8ca:	ed9d 0b04 	vldr	d0, [sp, #16]
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 ff7b 	bl	800c7ca <__d2b>
 800b8d4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800b8d8:	9001      	str	r0, [sp, #4]
 800b8da:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b8dc:	2e00      	cmp	r6, #0
 800b8de:	d046      	beq.n	800b96e <_dtoa_r+0x176>
 800b8e0:	9805      	ldr	r0, [sp, #20]
 800b8e2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800b8e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8ea:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800b8ee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b8f2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800b8f6:	2700      	movs	r7, #0
 800b8f8:	ee07 aa90 	vmov	s15, sl
 800b8fc:	ec43 2b16 	vmov	d6, r2, r3
 800b900:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b904:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800baf0 <_dtoa_r+0x2f8>
 800b908:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b90c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b910:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800baf8 <_dtoa_r+0x300>
 800b914:	eea7 6b04 	vfma.f64	d6, d7, d4
 800b918:	eeb0 7b46 	vmov.f64	d7, d6
 800b91c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800bb00 <_dtoa_r+0x308>
 800b920:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b924:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b928:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b930:	ee16 ba90 	vmov	fp, s13
 800b934:	d508      	bpl.n	800b948 <_dtoa_r+0x150>
 800b936:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b93a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b942:	bf18      	it	ne
 800b944:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800b948:	f1bb 0f16 	cmp.w	fp, #22
 800b94c:	d834      	bhi.n	800b9b8 <_dtoa_r+0x1c0>
 800b94e:	4b72      	ldr	r3, [pc, #456]	; (800bb18 <_dtoa_r+0x320>)
 800b950:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b954:	ed93 7b00 	vldr	d7, [r3]
 800b958:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b95c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b964:	dd01      	ble.n	800b96a <_dtoa_r+0x172>
 800b966:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b96a:	2300      	movs	r3, #0
 800b96c:	e025      	b.n	800b9ba <_dtoa_r+0x1c2>
 800b96e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b970:	eb01 0a03 	add.w	sl, r1, r3
 800b974:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800b978:	2b20      	cmp	r3, #32
 800b97a:	dd17      	ble.n	800b9ac <_dtoa_r+0x1b4>
 800b97c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b980:	9a02      	ldr	r2, [sp, #8]
 800b982:	409d      	lsls	r5, r3
 800b984:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800b988:	fa22 f303 	lsr.w	r3, r2, r3
 800b98c:	432b      	orrs	r3, r5
 800b98e:	ee07 3a90 	vmov	s15, r3
 800b992:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b996:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b99a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b99e:	9805      	ldr	r0, [sp, #20]
 800b9a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9a4:	2701      	movs	r7, #1
 800b9a6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800b9aa:	e7a5      	b.n	800b8f8 <_dtoa_r+0x100>
 800b9ac:	9a02      	ldr	r2, [sp, #8]
 800b9ae:	f1c3 0320 	rsb	r3, r3, #32
 800b9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b6:	e7ea      	b.n	800b98e <_dtoa_r+0x196>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	eba1 0a0a 	sub.w	sl, r1, sl
 800b9be:	9310      	str	r3, [sp, #64]	; 0x40
 800b9c0:	f1ba 0301 	subs.w	r3, sl, #1
 800b9c4:	9307      	str	r3, [sp, #28]
 800b9c6:	bf43      	ittte	mi
 800b9c8:	2300      	movmi	r3, #0
 800b9ca:	f1ca 0a01 	rsbmi	sl, sl, #1
 800b9ce:	9307      	strmi	r3, [sp, #28]
 800b9d0:	f04f 0a00 	movpl.w	sl, #0
 800b9d4:	f1bb 0f00 	cmp.w	fp, #0
 800b9d8:	db19      	blt.n	800ba0e <_dtoa_r+0x216>
 800b9da:	9b07      	ldr	r3, [sp, #28]
 800b9dc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b9e0:	445b      	add	r3, fp
 800b9e2:	9307      	str	r3, [sp, #28]
 800b9e4:	f04f 0800 	mov.w	r8, #0
 800b9e8:	9b08      	ldr	r3, [sp, #32]
 800b9ea:	2b09      	cmp	r3, #9
 800b9ec:	d866      	bhi.n	800babc <_dtoa_r+0x2c4>
 800b9ee:	2b05      	cmp	r3, #5
 800b9f0:	bfc4      	itt	gt
 800b9f2:	3b04      	subgt	r3, #4
 800b9f4:	9308      	strgt	r3, [sp, #32]
 800b9f6:	9b08      	ldr	r3, [sp, #32]
 800b9f8:	f1a3 0302 	sub.w	r3, r3, #2
 800b9fc:	bfcc      	ite	gt
 800b9fe:	2500      	movgt	r5, #0
 800ba00:	2501      	movle	r5, #1
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d866      	bhi.n	800bad4 <_dtoa_r+0x2dc>
 800ba06:	e8df f003 	tbb	[pc, r3]
 800ba0a:	5755      	.short	0x5755
 800ba0c:	4909      	.short	0x4909
 800ba0e:	2300      	movs	r3, #0
 800ba10:	ebaa 0a0b 	sub.w	sl, sl, fp
 800ba14:	f1cb 0800 	rsb	r8, fp, #0
 800ba18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba1a:	e7e5      	b.n	800b9e8 <_dtoa_r+0x1f0>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	dd59      	ble.n	800bada <_dtoa_r+0x2e2>
 800ba26:	9306      	str	r3, [sp, #24]
 800ba28:	4699      	mov	r9, r3
 800ba2a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	6072      	str	r2, [r6, #4]
 800ba30:	2204      	movs	r2, #4
 800ba32:	f102 0014 	add.w	r0, r2, #20
 800ba36:	4298      	cmp	r0, r3
 800ba38:	6871      	ldr	r1, [r6, #4]
 800ba3a:	d953      	bls.n	800bae4 <_dtoa_r+0x2ec>
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f000 fc37 	bl	800c2b0 <_Balloc>
 800ba42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba44:	6030      	str	r0, [r6, #0]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	9304      	str	r3, [sp, #16]
 800ba4a:	f1b9 0f0e 	cmp.w	r9, #14
 800ba4e:	f200 80c2 	bhi.w	800bbd6 <_dtoa_r+0x3de>
 800ba52:	2d00      	cmp	r5, #0
 800ba54:	f000 80bf 	beq.w	800bbd6 <_dtoa_r+0x3de>
 800ba58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba5c:	f1bb 0f00 	cmp.w	fp, #0
 800ba60:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800ba64:	f340 80e6 	ble.w	800bc34 <_dtoa_r+0x43c>
 800ba68:	4a2b      	ldr	r2, [pc, #172]	; (800bb18 <_dtoa_r+0x320>)
 800ba6a:	f00b 030f 	and.w	r3, fp, #15
 800ba6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba72:	ed93 7b00 	vldr	d7, [r3]
 800ba76:	ea4f 132b 	mov.w	r3, fp, asr #4
 800ba7a:	06da      	lsls	r2, r3, #27
 800ba7c:	f140 80d8 	bpl.w	800bc30 <_dtoa_r+0x438>
 800ba80:	4a26      	ldr	r2, [pc, #152]	; (800bb1c <_dtoa_r+0x324>)
 800ba82:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800ba86:	ed92 6b08 	vldr	d6, [r2, #32]
 800ba8a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ba8e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ba92:	f003 030f 	and.w	r3, r3, #15
 800ba96:	2203      	movs	r2, #3
 800ba98:	4920      	ldr	r1, [pc, #128]	; (800bb1c <_dtoa_r+0x324>)
 800ba9a:	e04a      	b.n	800bb32 <_dtoa_r+0x33a>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	9309      	str	r3, [sp, #36]	; 0x24
 800baa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa2:	445b      	add	r3, fp
 800baa4:	f103 0901 	add.w	r9, r3, #1
 800baa8:	9306      	str	r3, [sp, #24]
 800baaa:	464b      	mov	r3, r9
 800baac:	2b01      	cmp	r3, #1
 800baae:	bfb8      	it	lt
 800bab0:	2301      	movlt	r3, #1
 800bab2:	e7ba      	b.n	800ba2a <_dtoa_r+0x232>
 800bab4:	2300      	movs	r3, #0
 800bab6:	e7b2      	b.n	800ba1e <_dtoa_r+0x226>
 800bab8:	2300      	movs	r3, #0
 800baba:	e7f0      	b.n	800ba9e <_dtoa_r+0x2a6>
 800babc:	2501      	movs	r5, #1
 800babe:	2300      	movs	r3, #0
 800bac0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800bac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bac8:	9306      	str	r3, [sp, #24]
 800baca:	4699      	mov	r9, r3
 800bacc:	2200      	movs	r2, #0
 800bace:	2312      	movs	r3, #18
 800bad0:	920a      	str	r2, [sp, #40]	; 0x28
 800bad2:	e7aa      	b.n	800ba2a <_dtoa_r+0x232>
 800bad4:	2301      	movs	r3, #1
 800bad6:	9309      	str	r3, [sp, #36]	; 0x24
 800bad8:	e7f4      	b.n	800bac4 <_dtoa_r+0x2cc>
 800bada:	2301      	movs	r3, #1
 800badc:	9306      	str	r3, [sp, #24]
 800bade:	4699      	mov	r9, r3
 800bae0:	461a      	mov	r2, r3
 800bae2:	e7f5      	b.n	800bad0 <_dtoa_r+0x2d8>
 800bae4:	3101      	adds	r1, #1
 800bae6:	6071      	str	r1, [r6, #4]
 800bae8:	0052      	lsls	r2, r2, #1
 800baea:	e7a2      	b.n	800ba32 <_dtoa_r+0x23a>
 800baec:	f3af 8000 	nop.w
 800baf0:	636f4361 	.word	0x636f4361
 800baf4:	3fd287a7 	.word	0x3fd287a7
 800baf8:	8b60c8b3 	.word	0x8b60c8b3
 800bafc:	3fc68a28 	.word	0x3fc68a28
 800bb00:	509f79fb 	.word	0x509f79fb
 800bb04:	3fd34413 	.word	0x3fd34413
 800bb08:	7ff00000 	.word	0x7ff00000
 800bb0c:	0800ca07 	.word	0x0800ca07
 800bb10:	0800c9fe 	.word	0x0800c9fe
 800bb14:	0800c9fd 	.word	0x0800c9fd
 800bb18:	0800ca38 	.word	0x0800ca38
 800bb1c:	0800ca10 	.word	0x0800ca10
 800bb20:	07de      	lsls	r6, r3, #31
 800bb22:	d504      	bpl.n	800bb2e <_dtoa_r+0x336>
 800bb24:	ed91 6b00 	vldr	d6, [r1]
 800bb28:	3201      	adds	r2, #1
 800bb2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb2e:	105b      	asrs	r3, r3, #1
 800bb30:	3108      	adds	r1, #8
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1f4      	bne.n	800bb20 <_dtoa_r+0x328>
 800bb36:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bb3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bb3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f000 80a7 	beq.w	800bc98 <_dtoa_r+0x4a0>
 800bb4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bb4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb5a:	f140 809d 	bpl.w	800bc98 <_dtoa_r+0x4a0>
 800bb5e:	f1b9 0f00 	cmp.w	r9, #0
 800bb62:	f000 8099 	beq.w	800bc98 <_dtoa_r+0x4a0>
 800bb66:	9b06      	ldr	r3, [sp, #24]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	dd30      	ble.n	800bbce <_dtoa_r+0x3d6>
 800bb6c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800bb70:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb74:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb78:	9d06      	ldr	r5, [sp, #24]
 800bb7a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800bb7e:	3201      	adds	r2, #1
 800bb80:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bb84:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800bb88:	ee07 2a90 	vmov	s15, r2
 800bb8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bb90:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bb94:	ed8d 5b02 	vstr	d5, [sp, #8]
 800bb98:	9a03      	ldr	r2, [sp, #12]
 800bb9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb9e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800bba2:	2d00      	cmp	r5, #0
 800bba4:	d17b      	bne.n	800bc9e <_dtoa_r+0x4a6>
 800bba6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bbaa:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bbae:	ec41 0b17 	vmov	d7, r0, r1
 800bbb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbba:	f300 8253 	bgt.w	800c064 <_dtoa_r+0x86c>
 800bbbe:	eeb1 7b47 	vneg.f64	d7, d7
 800bbc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbca:	f100 8249 	bmi.w	800c060 <_dtoa_r+0x868>
 800bbce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bbd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bbd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f2c0 8119 	blt.w	800be10 <_dtoa_r+0x618>
 800bbde:	f1bb 0f0e 	cmp.w	fp, #14
 800bbe2:	f300 8115 	bgt.w	800be10 <_dtoa_r+0x618>
 800bbe6:	4bc3      	ldr	r3, [pc, #780]	; (800bef4 <_dtoa_r+0x6fc>)
 800bbe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bbec:	ed93 6b00 	vldr	d6, [r3]
 800bbf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f280 80ba 	bge.w	800bd6c <_dtoa_r+0x574>
 800bbf8:	f1b9 0f00 	cmp.w	r9, #0
 800bbfc:	f300 80b6 	bgt.w	800bd6c <_dtoa_r+0x574>
 800bc00:	f040 822d 	bne.w	800c05e <_dtoa_r+0x866>
 800bc04:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bc08:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bc0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc18:	464d      	mov	r5, r9
 800bc1a:	464f      	mov	r7, r9
 800bc1c:	f280 8204 	bge.w	800c028 <_dtoa_r+0x830>
 800bc20:	9b04      	ldr	r3, [sp, #16]
 800bc22:	9a04      	ldr	r2, [sp, #16]
 800bc24:	1c5e      	adds	r6, r3, #1
 800bc26:	2331      	movs	r3, #49	; 0x31
 800bc28:	7013      	strb	r3, [r2, #0]
 800bc2a:	f10b 0b01 	add.w	fp, fp, #1
 800bc2e:	e1ff      	b.n	800c030 <_dtoa_r+0x838>
 800bc30:	2202      	movs	r2, #2
 800bc32:	e731      	b.n	800ba98 <_dtoa_r+0x2a0>
 800bc34:	d02e      	beq.n	800bc94 <_dtoa_r+0x49c>
 800bc36:	f1cb 0300 	rsb	r3, fp, #0
 800bc3a:	4aae      	ldr	r2, [pc, #696]	; (800bef4 <_dtoa_r+0x6fc>)
 800bc3c:	f003 010f 	and.w	r1, r3, #15
 800bc40:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bc44:	ed92 7b00 	vldr	d7, [r2]
 800bc48:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800bc4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bc50:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bc54:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800bc58:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bc5c:	49a6      	ldr	r1, [pc, #664]	; (800bef8 <_dtoa_r+0x700>)
 800bc5e:	111b      	asrs	r3, r3, #4
 800bc60:	2000      	movs	r0, #0
 800bc62:	2202      	movs	r2, #2
 800bc64:	b93b      	cbnz	r3, 800bc76 <_dtoa_r+0x47e>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f43f af6b 	beq.w	800bb42 <_dtoa_r+0x34a>
 800bc6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc74:	e765      	b.n	800bb42 <_dtoa_r+0x34a>
 800bc76:	07dd      	lsls	r5, r3, #31
 800bc78:	d509      	bpl.n	800bc8e <_dtoa_r+0x496>
 800bc7a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800bc7e:	ed91 7b00 	vldr	d7, [r1]
 800bc82:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bc86:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bc8a:	3201      	adds	r2, #1
 800bc8c:	2001      	movs	r0, #1
 800bc8e:	105b      	asrs	r3, r3, #1
 800bc90:	3108      	adds	r1, #8
 800bc92:	e7e7      	b.n	800bc64 <_dtoa_r+0x46c>
 800bc94:	2202      	movs	r2, #2
 800bc96:	e754      	b.n	800bb42 <_dtoa_r+0x34a>
 800bc98:	465b      	mov	r3, fp
 800bc9a:	464d      	mov	r5, r9
 800bc9c:	e770      	b.n	800bb80 <_dtoa_r+0x388>
 800bc9e:	4a95      	ldr	r2, [pc, #596]	; (800bef4 <_dtoa_r+0x6fc>)
 800bca0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800bca4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcaa:	ec41 0b17 	vmov	d7, r0, r1
 800bcae:	b35a      	cbz	r2, 800bd08 <_dtoa_r+0x510>
 800bcb0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bcb4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bcb8:	9e04      	ldr	r6, [sp, #16]
 800bcba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bcbe:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bcc2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bcc6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bcca:	ee14 2a90 	vmov	r2, s9
 800bcce:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bcd2:	3230      	adds	r2, #48	; 0x30
 800bcd4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bcd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce0:	f806 2b01 	strb.w	r2, [r6], #1
 800bce4:	d43b      	bmi.n	800bd5e <_dtoa_r+0x566>
 800bce6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bcea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcf2:	d472      	bmi.n	800bdda <_dtoa_r+0x5e2>
 800bcf4:	9a04      	ldr	r2, [sp, #16]
 800bcf6:	1ab2      	subs	r2, r6, r2
 800bcf8:	4295      	cmp	r5, r2
 800bcfa:	f77f af68 	ble.w	800bbce <_dtoa_r+0x3d6>
 800bcfe:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bd02:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bd06:	e7de      	b.n	800bcc6 <_dtoa_r+0x4ce>
 800bd08:	9a04      	ldr	r2, [sp, #16]
 800bd0a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bd0e:	1956      	adds	r6, r2, r5
 800bd10:	4611      	mov	r1, r2
 800bd12:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bd16:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bd1a:	ee14 2a90 	vmov	r2, s9
 800bd1e:	3230      	adds	r2, #48	; 0x30
 800bd20:	f801 2b01 	strb.w	r2, [r1], #1
 800bd24:	42b1      	cmp	r1, r6
 800bd26:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bd2a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bd2e:	d11a      	bne.n	800bd66 <_dtoa_r+0x56e>
 800bd30:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bd34:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bd38:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bd3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd40:	dc4b      	bgt.n	800bdda <_dtoa_r+0x5e2>
 800bd42:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bd46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd4e:	f57f af3e 	bpl.w	800bbce <_dtoa_r+0x3d6>
 800bd52:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bd56:	2a30      	cmp	r2, #48	; 0x30
 800bd58:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800bd5c:	d001      	beq.n	800bd62 <_dtoa_r+0x56a>
 800bd5e:	469b      	mov	fp, r3
 800bd60:	e02a      	b.n	800bdb8 <_dtoa_r+0x5c0>
 800bd62:	460e      	mov	r6, r1
 800bd64:	e7f5      	b.n	800bd52 <_dtoa_r+0x55a>
 800bd66:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bd6a:	e7d4      	b.n	800bd16 <_dtoa_r+0x51e>
 800bd6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd70:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800bd74:	9e04      	ldr	r6, [sp, #16]
 800bd76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bd7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bd7e:	ee15 3a10 	vmov	r3, s10
 800bd82:	3330      	adds	r3, #48	; 0x30
 800bd84:	f806 3b01 	strb.w	r3, [r6], #1
 800bd88:	9b04      	ldr	r3, [sp, #16]
 800bd8a:	1af3      	subs	r3, r6, r3
 800bd8c:	4599      	cmp	r9, r3
 800bd8e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bd92:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bd96:	d133      	bne.n	800be00 <_dtoa_r+0x608>
 800bd98:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bd9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda4:	dc18      	bgt.n	800bdd8 <_dtoa_r+0x5e0>
 800bda6:	eeb4 7b46 	vcmp.f64	d7, d6
 800bdaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdae:	d103      	bne.n	800bdb8 <_dtoa_r+0x5c0>
 800bdb0:	ee15 3a10 	vmov	r3, s10
 800bdb4:	07db      	lsls	r3, r3, #31
 800bdb6:	d40f      	bmi.n	800bdd8 <_dtoa_r+0x5e0>
 800bdb8:	9901      	ldr	r1, [sp, #4]
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f000 faac 	bl	800c318 <_Bfree>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bdc4:	7033      	strb	r3, [r6, #0]
 800bdc6:	f10b 0301 	add.w	r3, fp, #1
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f43f ad5b 	beq.w	800b88a <_dtoa_r+0x92>
 800bdd4:	601e      	str	r6, [r3, #0]
 800bdd6:	e558      	b.n	800b88a <_dtoa_r+0x92>
 800bdd8:	465b      	mov	r3, fp
 800bdda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bdde:	2939      	cmp	r1, #57	; 0x39
 800bde0:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800bde4:	d106      	bne.n	800bdf4 <_dtoa_r+0x5fc>
 800bde6:	9904      	ldr	r1, [sp, #16]
 800bde8:	4291      	cmp	r1, r2
 800bdea:	d107      	bne.n	800bdfc <_dtoa_r+0x604>
 800bdec:	2230      	movs	r2, #48	; 0x30
 800bdee:	700a      	strb	r2, [r1, #0]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	460a      	mov	r2, r1
 800bdf4:	7811      	ldrb	r1, [r2, #0]
 800bdf6:	3101      	adds	r1, #1
 800bdf8:	7011      	strb	r1, [r2, #0]
 800bdfa:	e7b0      	b.n	800bd5e <_dtoa_r+0x566>
 800bdfc:	4616      	mov	r6, r2
 800bdfe:	e7ec      	b.n	800bdda <_dtoa_r+0x5e2>
 800be00:	ee27 7b04 	vmul.f64	d7, d7, d4
 800be04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be0c:	d1b3      	bne.n	800bd76 <_dtoa_r+0x57e>
 800be0e:	e7d3      	b.n	800bdb8 <_dtoa_r+0x5c0>
 800be10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be12:	2a00      	cmp	r2, #0
 800be14:	f000 808d 	beq.w	800bf32 <_dtoa_r+0x73a>
 800be18:	9a08      	ldr	r2, [sp, #32]
 800be1a:	2a01      	cmp	r2, #1
 800be1c:	dc72      	bgt.n	800bf04 <_dtoa_r+0x70c>
 800be1e:	2f00      	cmp	r7, #0
 800be20:	d06c      	beq.n	800befc <_dtoa_r+0x704>
 800be22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be26:	4645      	mov	r5, r8
 800be28:	4656      	mov	r6, sl
 800be2a:	9a07      	ldr	r2, [sp, #28]
 800be2c:	2101      	movs	r1, #1
 800be2e:	441a      	add	r2, r3
 800be30:	4620      	mov	r0, r4
 800be32:	449a      	add	sl, r3
 800be34:	9207      	str	r2, [sp, #28]
 800be36:	f000 fb0f 	bl	800c458 <__i2b>
 800be3a:	4607      	mov	r7, r0
 800be3c:	2e00      	cmp	r6, #0
 800be3e:	dd0b      	ble.n	800be58 <_dtoa_r+0x660>
 800be40:	9b07      	ldr	r3, [sp, #28]
 800be42:	2b00      	cmp	r3, #0
 800be44:	dd08      	ble.n	800be58 <_dtoa_r+0x660>
 800be46:	42b3      	cmp	r3, r6
 800be48:	9a07      	ldr	r2, [sp, #28]
 800be4a:	bfa8      	it	ge
 800be4c:	4633      	movge	r3, r6
 800be4e:	ebaa 0a03 	sub.w	sl, sl, r3
 800be52:	1af6      	subs	r6, r6, r3
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	9307      	str	r3, [sp, #28]
 800be58:	f1b8 0f00 	cmp.w	r8, #0
 800be5c:	d01d      	beq.n	800be9a <_dtoa_r+0x6a2>
 800be5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be60:	2b00      	cmp	r3, #0
 800be62:	d06a      	beq.n	800bf3a <_dtoa_r+0x742>
 800be64:	b18d      	cbz	r5, 800be8a <_dtoa_r+0x692>
 800be66:	4639      	mov	r1, r7
 800be68:	462a      	mov	r2, r5
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 fb94 	bl	800c598 <__pow5mult>
 800be70:	9a01      	ldr	r2, [sp, #4]
 800be72:	4601      	mov	r1, r0
 800be74:	4607      	mov	r7, r0
 800be76:	4620      	mov	r0, r4
 800be78:	f000 faf7 	bl	800c46a <__multiply>
 800be7c:	9901      	ldr	r1, [sp, #4]
 800be7e:	900c      	str	r0, [sp, #48]	; 0x30
 800be80:	4620      	mov	r0, r4
 800be82:	f000 fa49 	bl	800c318 <_Bfree>
 800be86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be88:	9301      	str	r3, [sp, #4]
 800be8a:	ebb8 0205 	subs.w	r2, r8, r5
 800be8e:	d004      	beq.n	800be9a <_dtoa_r+0x6a2>
 800be90:	9901      	ldr	r1, [sp, #4]
 800be92:	4620      	mov	r0, r4
 800be94:	f000 fb80 	bl	800c598 <__pow5mult>
 800be98:	9001      	str	r0, [sp, #4]
 800be9a:	2101      	movs	r1, #1
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 fadb 	bl	800c458 <__i2b>
 800bea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bea4:	4605      	mov	r5, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	f000 81ca 	beq.w	800c240 <_dtoa_r+0xa48>
 800beac:	461a      	mov	r2, r3
 800beae:	4601      	mov	r1, r0
 800beb0:	4620      	mov	r0, r4
 800beb2:	f000 fb71 	bl	800c598 <__pow5mult>
 800beb6:	9b08      	ldr	r3, [sp, #32]
 800beb8:	2b01      	cmp	r3, #1
 800beba:	4605      	mov	r5, r0
 800bebc:	dc44      	bgt.n	800bf48 <_dtoa_r+0x750>
 800bebe:	9b02      	ldr	r3, [sp, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d13c      	bne.n	800bf3e <_dtoa_r+0x746>
 800bec4:	9b03      	ldr	r3, [sp, #12]
 800bec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800beca:	2b00      	cmp	r3, #0
 800becc:	d137      	bne.n	800bf3e <_dtoa_r+0x746>
 800bece:	9b03      	ldr	r3, [sp, #12]
 800bed0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bed4:	0d1b      	lsrs	r3, r3, #20
 800bed6:	051b      	lsls	r3, r3, #20
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d033      	beq.n	800bf44 <_dtoa_r+0x74c>
 800bedc:	9b07      	ldr	r3, [sp, #28]
 800bede:	3301      	adds	r3, #1
 800bee0:	f10a 0a01 	add.w	sl, sl, #1
 800bee4:	9307      	str	r3, [sp, #28]
 800bee6:	f04f 0801 	mov.w	r8, #1
 800beea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beec:	bb73      	cbnz	r3, 800bf4c <_dtoa_r+0x754>
 800beee:	2001      	movs	r0, #1
 800bef0:	e034      	b.n	800bf5c <_dtoa_r+0x764>
 800bef2:	bf00      	nop
 800bef4:	0800ca38 	.word	0x0800ca38
 800bef8:	0800ca10 	.word	0x0800ca10
 800befc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800befe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf02:	e790      	b.n	800be26 <_dtoa_r+0x62e>
 800bf04:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 800bf08:	45a8      	cmp	r8, r5
 800bf0a:	bfbf      	itttt	lt
 800bf0c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800bf0e:	eba5 0808 	sublt.w	r8, r5, r8
 800bf12:	4443      	addlt	r3, r8
 800bf14:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800bf16:	bfb6      	itet	lt
 800bf18:	46a8      	movlt	r8, r5
 800bf1a:	eba8 0505 	subge.w	r5, r8, r5
 800bf1e:	2500      	movlt	r5, #0
 800bf20:	f1b9 0f00 	cmp.w	r9, #0
 800bf24:	bfb9      	ittee	lt
 800bf26:	ebaa 0609 	sublt.w	r6, sl, r9
 800bf2a:	2300      	movlt	r3, #0
 800bf2c:	4656      	movge	r6, sl
 800bf2e:	464b      	movge	r3, r9
 800bf30:	e77b      	b.n	800be2a <_dtoa_r+0x632>
 800bf32:	4645      	mov	r5, r8
 800bf34:	4656      	mov	r6, sl
 800bf36:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bf38:	e780      	b.n	800be3c <_dtoa_r+0x644>
 800bf3a:	4642      	mov	r2, r8
 800bf3c:	e7a8      	b.n	800be90 <_dtoa_r+0x698>
 800bf3e:	f04f 0800 	mov.w	r8, #0
 800bf42:	e7d2      	b.n	800beea <_dtoa_r+0x6f2>
 800bf44:	4698      	mov	r8, r3
 800bf46:	e7d0      	b.n	800beea <_dtoa_r+0x6f2>
 800bf48:	f04f 0800 	mov.w	r8, #0
 800bf4c:	692b      	ldr	r3, [r5, #16]
 800bf4e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800bf52:	6918      	ldr	r0, [r3, #16]
 800bf54:	f000 fa32 	bl	800c3bc <__hi0bits>
 800bf58:	f1c0 0020 	rsb	r0, r0, #32
 800bf5c:	9b07      	ldr	r3, [sp, #28]
 800bf5e:	4418      	add	r0, r3
 800bf60:	f010 001f 	ands.w	r0, r0, #31
 800bf64:	d047      	beq.n	800bff6 <_dtoa_r+0x7fe>
 800bf66:	f1c0 0320 	rsb	r3, r0, #32
 800bf6a:	2b04      	cmp	r3, #4
 800bf6c:	dd3b      	ble.n	800bfe6 <_dtoa_r+0x7ee>
 800bf6e:	9b07      	ldr	r3, [sp, #28]
 800bf70:	f1c0 001c 	rsb	r0, r0, #28
 800bf74:	4482      	add	sl, r0
 800bf76:	4406      	add	r6, r0
 800bf78:	4403      	add	r3, r0
 800bf7a:	9307      	str	r3, [sp, #28]
 800bf7c:	f1ba 0f00 	cmp.w	sl, #0
 800bf80:	dd05      	ble.n	800bf8e <_dtoa_r+0x796>
 800bf82:	4652      	mov	r2, sl
 800bf84:	9901      	ldr	r1, [sp, #4]
 800bf86:	4620      	mov	r0, r4
 800bf88:	f000 fb54 	bl	800c634 <__lshift>
 800bf8c:	9001      	str	r0, [sp, #4]
 800bf8e:	9b07      	ldr	r3, [sp, #28]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dd05      	ble.n	800bfa0 <_dtoa_r+0x7a8>
 800bf94:	4629      	mov	r1, r5
 800bf96:	461a      	mov	r2, r3
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f000 fb4b 	bl	800c634 <__lshift>
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfa2:	b353      	cbz	r3, 800bffa <_dtoa_r+0x802>
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	9801      	ldr	r0, [sp, #4]
 800bfa8:	f000 fb98 	bl	800c6dc <__mcmp>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	da24      	bge.n	800bffa <_dtoa_r+0x802>
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	220a      	movs	r2, #10
 800bfb4:	9901      	ldr	r1, [sp, #4]
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 f9c5 	bl	800c346 <__multadd>
 800bfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfbe:	9001      	str	r0, [sp, #4]
 800bfc0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f000 8142 	beq.w	800c24e <_dtoa_r+0xa56>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	4639      	mov	r1, r7
 800bfce:	220a      	movs	r2, #10
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f000 f9b8 	bl	800c346 <__multadd>
 800bfd6:	9b06      	ldr	r3, [sp, #24]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	4607      	mov	r7, r0
 800bfdc:	dc4b      	bgt.n	800c076 <_dtoa_r+0x87e>
 800bfde:	9b08      	ldr	r3, [sp, #32]
 800bfe0:	2b02      	cmp	r3, #2
 800bfe2:	dd48      	ble.n	800c076 <_dtoa_r+0x87e>
 800bfe4:	e011      	b.n	800c00a <_dtoa_r+0x812>
 800bfe6:	d0c9      	beq.n	800bf7c <_dtoa_r+0x784>
 800bfe8:	9a07      	ldr	r2, [sp, #28]
 800bfea:	331c      	adds	r3, #28
 800bfec:	441a      	add	r2, r3
 800bfee:	449a      	add	sl, r3
 800bff0:	441e      	add	r6, r3
 800bff2:	4613      	mov	r3, r2
 800bff4:	e7c1      	b.n	800bf7a <_dtoa_r+0x782>
 800bff6:	4603      	mov	r3, r0
 800bff8:	e7f6      	b.n	800bfe8 <_dtoa_r+0x7f0>
 800bffa:	f1b9 0f00 	cmp.w	r9, #0
 800bffe:	dc34      	bgt.n	800c06a <_dtoa_r+0x872>
 800c000:	9b08      	ldr	r3, [sp, #32]
 800c002:	2b02      	cmp	r3, #2
 800c004:	dd31      	ble.n	800c06a <_dtoa_r+0x872>
 800c006:	f8cd 9018 	str.w	r9, [sp, #24]
 800c00a:	9b06      	ldr	r3, [sp, #24]
 800c00c:	b963      	cbnz	r3, 800c028 <_dtoa_r+0x830>
 800c00e:	4629      	mov	r1, r5
 800c010:	2205      	movs	r2, #5
 800c012:	4620      	mov	r0, r4
 800c014:	f000 f997 	bl	800c346 <__multadd>
 800c018:	4601      	mov	r1, r0
 800c01a:	4605      	mov	r5, r0
 800c01c:	9801      	ldr	r0, [sp, #4]
 800c01e:	f000 fb5d 	bl	800c6dc <__mcmp>
 800c022:	2800      	cmp	r0, #0
 800c024:	f73f adfc 	bgt.w	800bc20 <_dtoa_r+0x428>
 800c028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c02a:	9e04      	ldr	r6, [sp, #16]
 800c02c:	ea6f 0b03 	mvn.w	fp, r3
 800c030:	f04f 0900 	mov.w	r9, #0
 800c034:	4629      	mov	r1, r5
 800c036:	4620      	mov	r0, r4
 800c038:	f000 f96e 	bl	800c318 <_Bfree>
 800c03c:	2f00      	cmp	r7, #0
 800c03e:	f43f aebb 	beq.w	800bdb8 <_dtoa_r+0x5c0>
 800c042:	f1b9 0f00 	cmp.w	r9, #0
 800c046:	d005      	beq.n	800c054 <_dtoa_r+0x85c>
 800c048:	45b9      	cmp	r9, r7
 800c04a:	d003      	beq.n	800c054 <_dtoa_r+0x85c>
 800c04c:	4649      	mov	r1, r9
 800c04e:	4620      	mov	r0, r4
 800c050:	f000 f962 	bl	800c318 <_Bfree>
 800c054:	4639      	mov	r1, r7
 800c056:	4620      	mov	r0, r4
 800c058:	f000 f95e 	bl	800c318 <_Bfree>
 800c05c:	e6ac      	b.n	800bdb8 <_dtoa_r+0x5c0>
 800c05e:	2500      	movs	r5, #0
 800c060:	462f      	mov	r7, r5
 800c062:	e7e1      	b.n	800c028 <_dtoa_r+0x830>
 800c064:	469b      	mov	fp, r3
 800c066:	462f      	mov	r7, r5
 800c068:	e5da      	b.n	800bc20 <_dtoa_r+0x428>
 800c06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c06c:	f8cd 9018 	str.w	r9, [sp, #24]
 800c070:	2b00      	cmp	r3, #0
 800c072:	f000 80f3 	beq.w	800c25c <_dtoa_r+0xa64>
 800c076:	2e00      	cmp	r6, #0
 800c078:	dd05      	ble.n	800c086 <_dtoa_r+0x88e>
 800c07a:	4639      	mov	r1, r7
 800c07c:	4632      	mov	r2, r6
 800c07e:	4620      	mov	r0, r4
 800c080:	f000 fad8 	bl	800c634 <__lshift>
 800c084:	4607      	mov	r7, r0
 800c086:	f1b8 0f00 	cmp.w	r8, #0
 800c08a:	d04c      	beq.n	800c126 <_dtoa_r+0x92e>
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 f90e 	bl	800c2b0 <_Balloc>
 800c094:	693a      	ldr	r2, [r7, #16]
 800c096:	3202      	adds	r2, #2
 800c098:	4606      	mov	r6, r0
 800c09a:	0092      	lsls	r2, r2, #2
 800c09c:	f107 010c 	add.w	r1, r7, #12
 800c0a0:	300c      	adds	r0, #12
 800c0a2:	f7fe ff25 	bl	800aef0 <memcpy>
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 fac2 	bl	800c634 <__lshift>
 800c0b0:	9b02      	ldr	r3, [sp, #8]
 800c0b2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c0b6:	f003 0301 	and.w	r3, r3, #1
 800c0ba:	46b9      	mov	r9, r7
 800c0bc:	9307      	str	r3, [sp, #28]
 800c0be:	4607      	mov	r7, r0
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	9801      	ldr	r0, [sp, #4]
 800c0c4:	f7ff fb0a 	bl	800b6dc <quorem>
 800c0c8:	4649      	mov	r1, r9
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c0d0:	9801      	ldr	r0, [sp, #4]
 800c0d2:	f000 fb03 	bl	800c6dc <__mcmp>
 800c0d6:	463a      	mov	r2, r7
 800c0d8:	9002      	str	r0, [sp, #8]
 800c0da:	4629      	mov	r1, r5
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f000 fb17 	bl	800c710 <__mdiff>
 800c0e2:	68c3      	ldr	r3, [r0, #12]
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	bb03      	cbnz	r3, 800c12a <_dtoa_r+0x932>
 800c0e8:	4601      	mov	r1, r0
 800c0ea:	9009      	str	r0, [sp, #36]	; 0x24
 800c0ec:	9801      	ldr	r0, [sp, #4]
 800c0ee:	f000 faf5 	bl	800c6dc <__mcmp>
 800c0f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c0fc:	f000 f90c 	bl	800c318 <_Bfree>
 800c100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c102:	b9a3      	cbnz	r3, 800c12e <_dtoa_r+0x936>
 800c104:	9a08      	ldr	r2, [sp, #32]
 800c106:	b992      	cbnz	r2, 800c12e <_dtoa_r+0x936>
 800c108:	9a07      	ldr	r2, [sp, #28]
 800c10a:	b982      	cbnz	r2, 800c12e <_dtoa_r+0x936>
 800c10c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c110:	d029      	beq.n	800c166 <_dtoa_r+0x96e>
 800c112:	9b02      	ldr	r3, [sp, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	dd01      	ble.n	800c11c <_dtoa_r+0x924>
 800c118:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800c11c:	f10a 0601 	add.w	r6, sl, #1
 800c120:	f88a 8000 	strb.w	r8, [sl]
 800c124:	e786      	b.n	800c034 <_dtoa_r+0x83c>
 800c126:	4638      	mov	r0, r7
 800c128:	e7c2      	b.n	800c0b0 <_dtoa_r+0x8b8>
 800c12a:	2301      	movs	r3, #1
 800c12c:	e7e3      	b.n	800c0f6 <_dtoa_r+0x8fe>
 800c12e:	9a02      	ldr	r2, [sp, #8]
 800c130:	2a00      	cmp	r2, #0
 800c132:	db04      	blt.n	800c13e <_dtoa_r+0x946>
 800c134:	d124      	bne.n	800c180 <_dtoa_r+0x988>
 800c136:	9a08      	ldr	r2, [sp, #32]
 800c138:	bb12      	cbnz	r2, 800c180 <_dtoa_r+0x988>
 800c13a:	9a07      	ldr	r2, [sp, #28]
 800c13c:	bb02      	cbnz	r2, 800c180 <_dtoa_r+0x988>
 800c13e:	2b00      	cmp	r3, #0
 800c140:	ddec      	ble.n	800c11c <_dtoa_r+0x924>
 800c142:	2201      	movs	r2, #1
 800c144:	9901      	ldr	r1, [sp, #4]
 800c146:	4620      	mov	r0, r4
 800c148:	f000 fa74 	bl	800c634 <__lshift>
 800c14c:	4629      	mov	r1, r5
 800c14e:	9001      	str	r0, [sp, #4]
 800c150:	f000 fac4 	bl	800c6dc <__mcmp>
 800c154:	2800      	cmp	r0, #0
 800c156:	dc03      	bgt.n	800c160 <_dtoa_r+0x968>
 800c158:	d1e0      	bne.n	800c11c <_dtoa_r+0x924>
 800c15a:	f018 0f01 	tst.w	r8, #1
 800c15e:	d0dd      	beq.n	800c11c <_dtoa_r+0x924>
 800c160:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c164:	d1d8      	bne.n	800c118 <_dtoa_r+0x920>
 800c166:	2339      	movs	r3, #57	; 0x39
 800c168:	f10a 0601 	add.w	r6, sl, #1
 800c16c:	f88a 3000 	strb.w	r3, [sl]
 800c170:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c174:	2b39      	cmp	r3, #57	; 0x39
 800c176:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800c17a:	d04c      	beq.n	800c216 <_dtoa_r+0xa1e>
 800c17c:	3301      	adds	r3, #1
 800c17e:	e051      	b.n	800c224 <_dtoa_r+0xa2c>
 800c180:	2b00      	cmp	r3, #0
 800c182:	f10a 0601 	add.w	r6, sl, #1
 800c186:	dd05      	ble.n	800c194 <_dtoa_r+0x99c>
 800c188:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c18c:	d0eb      	beq.n	800c166 <_dtoa_r+0x96e>
 800c18e:	f108 0801 	add.w	r8, r8, #1
 800c192:	e7c5      	b.n	800c120 <_dtoa_r+0x928>
 800c194:	9b04      	ldr	r3, [sp, #16]
 800c196:	9a06      	ldr	r2, [sp, #24]
 800c198:	f806 8c01 	strb.w	r8, [r6, #-1]
 800c19c:	1af3      	subs	r3, r6, r3
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d021      	beq.n	800c1e6 <_dtoa_r+0x9ee>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	220a      	movs	r2, #10
 800c1a6:	9901      	ldr	r1, [sp, #4]
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f000 f8cc 	bl	800c346 <__multadd>
 800c1ae:	45b9      	cmp	r9, r7
 800c1b0:	9001      	str	r0, [sp, #4]
 800c1b2:	f04f 0300 	mov.w	r3, #0
 800c1b6:	f04f 020a 	mov.w	r2, #10
 800c1ba:	4649      	mov	r1, r9
 800c1bc:	4620      	mov	r0, r4
 800c1be:	d105      	bne.n	800c1cc <_dtoa_r+0x9d4>
 800c1c0:	f000 f8c1 	bl	800c346 <__multadd>
 800c1c4:	4681      	mov	r9, r0
 800c1c6:	4607      	mov	r7, r0
 800c1c8:	46b2      	mov	sl, r6
 800c1ca:	e779      	b.n	800c0c0 <_dtoa_r+0x8c8>
 800c1cc:	f000 f8bb 	bl	800c346 <__multadd>
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	4681      	mov	r9, r0
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	220a      	movs	r2, #10
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 f8b4 	bl	800c346 <__multadd>
 800c1de:	4607      	mov	r7, r0
 800c1e0:	e7f2      	b.n	800c1c8 <_dtoa_r+0x9d0>
 800c1e2:	f04f 0900 	mov.w	r9, #0
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	9901      	ldr	r1, [sp, #4]
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f000 fa22 	bl	800c634 <__lshift>
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	9001      	str	r0, [sp, #4]
 800c1f4:	f000 fa72 	bl	800c6dc <__mcmp>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	dcb9      	bgt.n	800c170 <_dtoa_r+0x978>
 800c1fc:	d102      	bne.n	800c204 <_dtoa_r+0xa0c>
 800c1fe:	f018 0f01 	tst.w	r8, #1
 800c202:	d1b5      	bne.n	800c170 <_dtoa_r+0x978>
 800c204:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c208:	2b30      	cmp	r3, #48	; 0x30
 800c20a:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800c20e:	f47f af11 	bne.w	800c034 <_dtoa_r+0x83c>
 800c212:	4616      	mov	r6, r2
 800c214:	e7f6      	b.n	800c204 <_dtoa_r+0xa0c>
 800c216:	9b04      	ldr	r3, [sp, #16]
 800c218:	4293      	cmp	r3, r2
 800c21a:	d105      	bne.n	800c228 <_dtoa_r+0xa30>
 800c21c:	9a04      	ldr	r2, [sp, #16]
 800c21e:	f10b 0b01 	add.w	fp, fp, #1
 800c222:	2331      	movs	r3, #49	; 0x31
 800c224:	7013      	strb	r3, [r2, #0]
 800c226:	e705      	b.n	800c034 <_dtoa_r+0x83c>
 800c228:	4616      	mov	r6, r2
 800c22a:	e7a1      	b.n	800c170 <_dtoa_r+0x978>
 800c22c:	4b16      	ldr	r3, [pc, #88]	; (800c288 <_dtoa_r+0xa90>)
 800c22e:	f7ff bb48 	b.w	800b8c2 <_dtoa_r+0xca>
 800c232:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c234:	2b00      	cmp	r3, #0
 800c236:	f47f ab23 	bne.w	800b880 <_dtoa_r+0x88>
 800c23a:	4b14      	ldr	r3, [pc, #80]	; (800c28c <_dtoa_r+0xa94>)
 800c23c:	f7ff bb41 	b.w	800b8c2 <_dtoa_r+0xca>
 800c240:	9b08      	ldr	r3, [sp, #32]
 800c242:	2b01      	cmp	r3, #1
 800c244:	f77f ae3b 	ble.w	800bebe <_dtoa_r+0x6c6>
 800c248:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c24c:	e64f      	b.n	800beee <_dtoa_r+0x6f6>
 800c24e:	9b06      	ldr	r3, [sp, #24]
 800c250:	2b00      	cmp	r3, #0
 800c252:	dc03      	bgt.n	800c25c <_dtoa_r+0xa64>
 800c254:	9b08      	ldr	r3, [sp, #32]
 800c256:	2b02      	cmp	r3, #2
 800c258:	f73f aed7 	bgt.w	800c00a <_dtoa_r+0x812>
 800c25c:	9e04      	ldr	r6, [sp, #16]
 800c25e:	9801      	ldr	r0, [sp, #4]
 800c260:	4629      	mov	r1, r5
 800c262:	f7ff fa3b 	bl	800b6dc <quorem>
 800c266:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c26a:	f806 8b01 	strb.w	r8, [r6], #1
 800c26e:	9b04      	ldr	r3, [sp, #16]
 800c270:	9a06      	ldr	r2, [sp, #24]
 800c272:	1af3      	subs	r3, r6, r3
 800c274:	429a      	cmp	r2, r3
 800c276:	ddb4      	ble.n	800c1e2 <_dtoa_r+0x9ea>
 800c278:	2300      	movs	r3, #0
 800c27a:	220a      	movs	r2, #10
 800c27c:	9901      	ldr	r1, [sp, #4]
 800c27e:	4620      	mov	r0, r4
 800c280:	f000 f861 	bl	800c346 <__multadd>
 800c284:	9001      	str	r0, [sp, #4]
 800c286:	e7ea      	b.n	800c25e <_dtoa_r+0xa66>
 800c288:	0800c9fc 	.word	0x0800c9fc
 800c28c:	0800c9fe 	.word	0x0800c9fe

0800c290 <_localeconv_r>:
 800c290:	4b04      	ldr	r3, [pc, #16]	; (800c2a4 <_localeconv_r+0x14>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	6a18      	ldr	r0, [r3, #32]
 800c296:	4b04      	ldr	r3, [pc, #16]	; (800c2a8 <_localeconv_r+0x18>)
 800c298:	2800      	cmp	r0, #0
 800c29a:	bf08      	it	eq
 800c29c:	4618      	moveq	r0, r3
 800c29e:	30f0      	adds	r0, #240	; 0xf0
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	24000010 	.word	0x24000010
 800c2a8:	24000074 	.word	0x24000074

0800c2ac <__malloc_lock>:
 800c2ac:	4770      	bx	lr

0800c2ae <__malloc_unlock>:
 800c2ae:	4770      	bx	lr

0800c2b0 <_Balloc>:
 800c2b0:	b570      	push	{r4, r5, r6, lr}
 800c2b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	460e      	mov	r6, r1
 800c2b8:	b93d      	cbnz	r5, 800c2ca <_Balloc+0x1a>
 800c2ba:	2010      	movs	r0, #16
 800c2bc:	f7fe fe08 	bl	800aed0 <malloc>
 800c2c0:	6260      	str	r0, [r4, #36]	; 0x24
 800c2c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c2c6:	6005      	str	r5, [r0, #0]
 800c2c8:	60c5      	str	r5, [r0, #12]
 800c2ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c2cc:	68eb      	ldr	r3, [r5, #12]
 800c2ce:	b183      	cbz	r3, 800c2f2 <_Balloc+0x42>
 800c2d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c2d8:	b9b8      	cbnz	r0, 800c30a <_Balloc+0x5a>
 800c2da:	2101      	movs	r1, #1
 800c2dc:	fa01 f506 	lsl.w	r5, r1, r6
 800c2e0:	1d6a      	adds	r2, r5, #5
 800c2e2:	0092      	lsls	r2, r2, #2
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f000 fabf 	bl	800c868 <_calloc_r>
 800c2ea:	b160      	cbz	r0, 800c306 <_Balloc+0x56>
 800c2ec:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c2f0:	e00e      	b.n	800c310 <_Balloc+0x60>
 800c2f2:	2221      	movs	r2, #33	; 0x21
 800c2f4:	2104      	movs	r1, #4
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f000 fab6 	bl	800c868 <_calloc_r>
 800c2fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2fe:	60e8      	str	r0, [r5, #12]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1e4      	bne.n	800c2d0 <_Balloc+0x20>
 800c306:	2000      	movs	r0, #0
 800c308:	bd70      	pop	{r4, r5, r6, pc}
 800c30a:	6802      	ldr	r2, [r0, #0]
 800c30c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c310:	2300      	movs	r3, #0
 800c312:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c316:	e7f7      	b.n	800c308 <_Balloc+0x58>

0800c318 <_Bfree>:
 800c318:	b570      	push	{r4, r5, r6, lr}
 800c31a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c31c:	4606      	mov	r6, r0
 800c31e:	460d      	mov	r5, r1
 800c320:	b93c      	cbnz	r4, 800c332 <_Bfree+0x1a>
 800c322:	2010      	movs	r0, #16
 800c324:	f7fe fdd4 	bl	800aed0 <malloc>
 800c328:	6270      	str	r0, [r6, #36]	; 0x24
 800c32a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c32e:	6004      	str	r4, [r0, #0]
 800c330:	60c4      	str	r4, [r0, #12]
 800c332:	b13d      	cbz	r5, 800c344 <_Bfree+0x2c>
 800c334:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c336:	686a      	ldr	r2, [r5, #4]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c33e:	6029      	str	r1, [r5, #0]
 800c340:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c344:	bd70      	pop	{r4, r5, r6, pc}

0800c346 <__multadd>:
 800c346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c34a:	690d      	ldr	r5, [r1, #16]
 800c34c:	461f      	mov	r7, r3
 800c34e:	4606      	mov	r6, r0
 800c350:	460c      	mov	r4, r1
 800c352:	f101 0c14 	add.w	ip, r1, #20
 800c356:	2300      	movs	r3, #0
 800c358:	f8dc 0000 	ldr.w	r0, [ip]
 800c35c:	b281      	uxth	r1, r0
 800c35e:	fb02 7101 	mla	r1, r2, r1, r7
 800c362:	0c0f      	lsrs	r7, r1, #16
 800c364:	0c00      	lsrs	r0, r0, #16
 800c366:	fb02 7000 	mla	r0, r2, r0, r7
 800c36a:	b289      	uxth	r1, r1
 800c36c:	3301      	adds	r3, #1
 800c36e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c372:	429d      	cmp	r5, r3
 800c374:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c378:	f84c 1b04 	str.w	r1, [ip], #4
 800c37c:	dcec      	bgt.n	800c358 <__multadd+0x12>
 800c37e:	b1d7      	cbz	r7, 800c3b6 <__multadd+0x70>
 800c380:	68a3      	ldr	r3, [r4, #8]
 800c382:	42ab      	cmp	r3, r5
 800c384:	dc12      	bgt.n	800c3ac <__multadd+0x66>
 800c386:	6861      	ldr	r1, [r4, #4]
 800c388:	4630      	mov	r0, r6
 800c38a:	3101      	adds	r1, #1
 800c38c:	f7ff ff90 	bl	800c2b0 <_Balloc>
 800c390:	6922      	ldr	r2, [r4, #16]
 800c392:	3202      	adds	r2, #2
 800c394:	f104 010c 	add.w	r1, r4, #12
 800c398:	4680      	mov	r8, r0
 800c39a:	0092      	lsls	r2, r2, #2
 800c39c:	300c      	adds	r0, #12
 800c39e:	f7fe fda7 	bl	800aef0 <memcpy>
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f7ff ffb7 	bl	800c318 <_Bfree>
 800c3aa:	4644      	mov	r4, r8
 800c3ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3b0:	3501      	adds	r5, #1
 800c3b2:	615f      	str	r7, [r3, #20]
 800c3b4:	6125      	str	r5, [r4, #16]
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c3bc <__hi0bits>:
 800c3bc:	0c02      	lsrs	r2, r0, #16
 800c3be:	0412      	lsls	r2, r2, #16
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	b9b2      	cbnz	r2, 800c3f2 <__hi0bits+0x36>
 800c3c4:	0403      	lsls	r3, r0, #16
 800c3c6:	2010      	movs	r0, #16
 800c3c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c3cc:	bf04      	itt	eq
 800c3ce:	021b      	lsleq	r3, r3, #8
 800c3d0:	3008      	addeq	r0, #8
 800c3d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c3d6:	bf04      	itt	eq
 800c3d8:	011b      	lsleq	r3, r3, #4
 800c3da:	3004      	addeq	r0, #4
 800c3dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c3e0:	bf04      	itt	eq
 800c3e2:	009b      	lsleq	r3, r3, #2
 800c3e4:	3002      	addeq	r0, #2
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	db06      	blt.n	800c3f8 <__hi0bits+0x3c>
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	d503      	bpl.n	800c3f6 <__hi0bits+0x3a>
 800c3ee:	3001      	adds	r0, #1
 800c3f0:	4770      	bx	lr
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	e7e8      	b.n	800c3c8 <__hi0bits+0xc>
 800c3f6:	2020      	movs	r0, #32
 800c3f8:	4770      	bx	lr

0800c3fa <__lo0bits>:
 800c3fa:	6803      	ldr	r3, [r0, #0]
 800c3fc:	f013 0207 	ands.w	r2, r3, #7
 800c400:	4601      	mov	r1, r0
 800c402:	d00b      	beq.n	800c41c <__lo0bits+0x22>
 800c404:	07da      	lsls	r2, r3, #31
 800c406:	d423      	bmi.n	800c450 <__lo0bits+0x56>
 800c408:	0798      	lsls	r0, r3, #30
 800c40a:	bf49      	itett	mi
 800c40c:	085b      	lsrmi	r3, r3, #1
 800c40e:	089b      	lsrpl	r3, r3, #2
 800c410:	2001      	movmi	r0, #1
 800c412:	600b      	strmi	r3, [r1, #0]
 800c414:	bf5c      	itt	pl
 800c416:	600b      	strpl	r3, [r1, #0]
 800c418:	2002      	movpl	r0, #2
 800c41a:	4770      	bx	lr
 800c41c:	b298      	uxth	r0, r3
 800c41e:	b9a8      	cbnz	r0, 800c44c <__lo0bits+0x52>
 800c420:	0c1b      	lsrs	r3, r3, #16
 800c422:	2010      	movs	r0, #16
 800c424:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c428:	bf04      	itt	eq
 800c42a:	0a1b      	lsreq	r3, r3, #8
 800c42c:	3008      	addeq	r0, #8
 800c42e:	071a      	lsls	r2, r3, #28
 800c430:	bf04      	itt	eq
 800c432:	091b      	lsreq	r3, r3, #4
 800c434:	3004      	addeq	r0, #4
 800c436:	079a      	lsls	r2, r3, #30
 800c438:	bf04      	itt	eq
 800c43a:	089b      	lsreq	r3, r3, #2
 800c43c:	3002      	addeq	r0, #2
 800c43e:	07da      	lsls	r2, r3, #31
 800c440:	d402      	bmi.n	800c448 <__lo0bits+0x4e>
 800c442:	085b      	lsrs	r3, r3, #1
 800c444:	d006      	beq.n	800c454 <__lo0bits+0x5a>
 800c446:	3001      	adds	r0, #1
 800c448:	600b      	str	r3, [r1, #0]
 800c44a:	4770      	bx	lr
 800c44c:	4610      	mov	r0, r2
 800c44e:	e7e9      	b.n	800c424 <__lo0bits+0x2a>
 800c450:	2000      	movs	r0, #0
 800c452:	4770      	bx	lr
 800c454:	2020      	movs	r0, #32
 800c456:	4770      	bx	lr

0800c458 <__i2b>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	460c      	mov	r4, r1
 800c45c:	2101      	movs	r1, #1
 800c45e:	f7ff ff27 	bl	800c2b0 <_Balloc>
 800c462:	2201      	movs	r2, #1
 800c464:	6144      	str	r4, [r0, #20]
 800c466:	6102      	str	r2, [r0, #16]
 800c468:	bd10      	pop	{r4, pc}

0800c46a <__multiply>:
 800c46a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46e:	4614      	mov	r4, r2
 800c470:	690a      	ldr	r2, [r1, #16]
 800c472:	6923      	ldr	r3, [r4, #16]
 800c474:	429a      	cmp	r2, r3
 800c476:	bfb8      	it	lt
 800c478:	460b      	movlt	r3, r1
 800c47a:	4688      	mov	r8, r1
 800c47c:	bfbc      	itt	lt
 800c47e:	46a0      	movlt	r8, r4
 800c480:	461c      	movlt	r4, r3
 800c482:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c486:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c48a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c48e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c492:	eb07 0609 	add.w	r6, r7, r9
 800c496:	42b3      	cmp	r3, r6
 800c498:	bfb8      	it	lt
 800c49a:	3101      	addlt	r1, #1
 800c49c:	f7ff ff08 	bl	800c2b0 <_Balloc>
 800c4a0:	f100 0514 	add.w	r5, r0, #20
 800c4a4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c4a8:	462b      	mov	r3, r5
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	4573      	cmp	r3, lr
 800c4ae:	d316      	bcc.n	800c4de <__multiply+0x74>
 800c4b0:	f104 0214 	add.w	r2, r4, #20
 800c4b4:	f108 0114 	add.w	r1, r8, #20
 800c4b8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c4bc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	9b00      	ldr	r3, [sp, #0]
 800c4c4:	9201      	str	r2, [sp, #4]
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d80c      	bhi.n	800c4e4 <__multiply+0x7a>
 800c4ca:	2e00      	cmp	r6, #0
 800c4cc:	dd03      	ble.n	800c4d6 <__multiply+0x6c>
 800c4ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d05d      	beq.n	800c592 <__multiply+0x128>
 800c4d6:	6106      	str	r6, [r0, #16]
 800c4d8:	b003      	add	sp, #12
 800c4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4de:	f843 2b04 	str.w	r2, [r3], #4
 800c4e2:	e7e3      	b.n	800c4ac <__multiply+0x42>
 800c4e4:	f8b2 b000 	ldrh.w	fp, [r2]
 800c4e8:	f1bb 0f00 	cmp.w	fp, #0
 800c4ec:	d023      	beq.n	800c536 <__multiply+0xcc>
 800c4ee:	4689      	mov	r9, r1
 800c4f0:	46ac      	mov	ip, r5
 800c4f2:	f04f 0800 	mov.w	r8, #0
 800c4f6:	f859 4b04 	ldr.w	r4, [r9], #4
 800c4fa:	f8dc a000 	ldr.w	sl, [ip]
 800c4fe:	b2a3      	uxth	r3, r4
 800c500:	fa1f fa8a 	uxth.w	sl, sl
 800c504:	fb0b a303 	mla	r3, fp, r3, sl
 800c508:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c50c:	f8dc 4000 	ldr.w	r4, [ip]
 800c510:	4443      	add	r3, r8
 800c512:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c516:	fb0b 840a 	mla	r4, fp, sl, r8
 800c51a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c51e:	46e2      	mov	sl, ip
 800c520:	b29b      	uxth	r3, r3
 800c522:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c526:	454f      	cmp	r7, r9
 800c528:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c52c:	f84a 3b04 	str.w	r3, [sl], #4
 800c530:	d82b      	bhi.n	800c58a <__multiply+0x120>
 800c532:	f8cc 8004 	str.w	r8, [ip, #4]
 800c536:	9b01      	ldr	r3, [sp, #4]
 800c538:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c53c:	3204      	adds	r2, #4
 800c53e:	f1ba 0f00 	cmp.w	sl, #0
 800c542:	d020      	beq.n	800c586 <__multiply+0x11c>
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	4689      	mov	r9, r1
 800c548:	46a8      	mov	r8, r5
 800c54a:	f04f 0b00 	mov.w	fp, #0
 800c54e:	f8b9 c000 	ldrh.w	ip, [r9]
 800c552:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c556:	fb0a 440c 	mla	r4, sl, ip, r4
 800c55a:	445c      	add	r4, fp
 800c55c:	46c4      	mov	ip, r8
 800c55e:	b29b      	uxth	r3, r3
 800c560:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c564:	f84c 3b04 	str.w	r3, [ip], #4
 800c568:	f859 3b04 	ldr.w	r3, [r9], #4
 800c56c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c570:	0c1b      	lsrs	r3, r3, #16
 800c572:	fb0a b303 	mla	r3, sl, r3, fp
 800c576:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c57a:	454f      	cmp	r7, r9
 800c57c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c580:	d805      	bhi.n	800c58e <__multiply+0x124>
 800c582:	f8c8 3004 	str.w	r3, [r8, #4]
 800c586:	3504      	adds	r5, #4
 800c588:	e79b      	b.n	800c4c2 <__multiply+0x58>
 800c58a:	46d4      	mov	ip, sl
 800c58c:	e7b3      	b.n	800c4f6 <__multiply+0x8c>
 800c58e:	46e0      	mov	r8, ip
 800c590:	e7dd      	b.n	800c54e <__multiply+0xe4>
 800c592:	3e01      	subs	r6, #1
 800c594:	e799      	b.n	800c4ca <__multiply+0x60>
	...

0800c598 <__pow5mult>:
 800c598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c59c:	4615      	mov	r5, r2
 800c59e:	f012 0203 	ands.w	r2, r2, #3
 800c5a2:	4606      	mov	r6, r0
 800c5a4:	460f      	mov	r7, r1
 800c5a6:	d007      	beq.n	800c5b8 <__pow5mult+0x20>
 800c5a8:	3a01      	subs	r2, #1
 800c5aa:	4c21      	ldr	r4, [pc, #132]	; (800c630 <__pow5mult+0x98>)
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5b2:	f7ff fec8 	bl	800c346 <__multadd>
 800c5b6:	4607      	mov	r7, r0
 800c5b8:	10ad      	asrs	r5, r5, #2
 800c5ba:	d035      	beq.n	800c628 <__pow5mult+0x90>
 800c5bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c5be:	b93c      	cbnz	r4, 800c5d0 <__pow5mult+0x38>
 800c5c0:	2010      	movs	r0, #16
 800c5c2:	f7fe fc85 	bl	800aed0 <malloc>
 800c5c6:	6270      	str	r0, [r6, #36]	; 0x24
 800c5c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5cc:	6004      	str	r4, [r0, #0]
 800c5ce:	60c4      	str	r4, [r0, #12]
 800c5d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c5d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c5d8:	b94c      	cbnz	r4, 800c5ee <__pow5mult+0x56>
 800c5da:	f240 2171 	movw	r1, #625	; 0x271
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7ff ff3a 	bl	800c458 <__i2b>
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	6003      	str	r3, [r0, #0]
 800c5ee:	f04f 0800 	mov.w	r8, #0
 800c5f2:	07eb      	lsls	r3, r5, #31
 800c5f4:	d50a      	bpl.n	800c60c <__pow5mult+0x74>
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	4622      	mov	r2, r4
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	f7ff ff35 	bl	800c46a <__multiply>
 800c600:	4639      	mov	r1, r7
 800c602:	4681      	mov	r9, r0
 800c604:	4630      	mov	r0, r6
 800c606:	f7ff fe87 	bl	800c318 <_Bfree>
 800c60a:	464f      	mov	r7, r9
 800c60c:	106d      	asrs	r5, r5, #1
 800c60e:	d00b      	beq.n	800c628 <__pow5mult+0x90>
 800c610:	6820      	ldr	r0, [r4, #0]
 800c612:	b938      	cbnz	r0, 800c624 <__pow5mult+0x8c>
 800c614:	4622      	mov	r2, r4
 800c616:	4621      	mov	r1, r4
 800c618:	4630      	mov	r0, r6
 800c61a:	f7ff ff26 	bl	800c46a <__multiply>
 800c61e:	6020      	str	r0, [r4, #0]
 800c620:	f8c0 8000 	str.w	r8, [r0]
 800c624:	4604      	mov	r4, r0
 800c626:	e7e4      	b.n	800c5f2 <__pow5mult+0x5a>
 800c628:	4638      	mov	r0, r7
 800c62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c62e:	bf00      	nop
 800c630:	0800cb00 	.word	0x0800cb00

0800c634 <__lshift>:
 800c634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c638:	460c      	mov	r4, r1
 800c63a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c63e:	6923      	ldr	r3, [r4, #16]
 800c640:	6849      	ldr	r1, [r1, #4]
 800c642:	eb0a 0903 	add.w	r9, sl, r3
 800c646:	68a3      	ldr	r3, [r4, #8]
 800c648:	4607      	mov	r7, r0
 800c64a:	4616      	mov	r6, r2
 800c64c:	f109 0501 	add.w	r5, r9, #1
 800c650:	42ab      	cmp	r3, r5
 800c652:	db32      	blt.n	800c6ba <__lshift+0x86>
 800c654:	4638      	mov	r0, r7
 800c656:	f7ff fe2b 	bl	800c2b0 <_Balloc>
 800c65a:	2300      	movs	r3, #0
 800c65c:	4680      	mov	r8, r0
 800c65e:	f100 0114 	add.w	r1, r0, #20
 800c662:	461a      	mov	r2, r3
 800c664:	4553      	cmp	r3, sl
 800c666:	db2b      	blt.n	800c6c0 <__lshift+0x8c>
 800c668:	6920      	ldr	r0, [r4, #16]
 800c66a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c66e:	f104 0314 	add.w	r3, r4, #20
 800c672:	f016 021f 	ands.w	r2, r6, #31
 800c676:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c67a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c67e:	d025      	beq.n	800c6cc <__lshift+0x98>
 800c680:	f1c2 0e20 	rsb	lr, r2, #32
 800c684:	2000      	movs	r0, #0
 800c686:	681e      	ldr	r6, [r3, #0]
 800c688:	468a      	mov	sl, r1
 800c68a:	4096      	lsls	r6, r2
 800c68c:	4330      	orrs	r0, r6
 800c68e:	f84a 0b04 	str.w	r0, [sl], #4
 800c692:	f853 0b04 	ldr.w	r0, [r3], #4
 800c696:	459c      	cmp	ip, r3
 800c698:	fa20 f00e 	lsr.w	r0, r0, lr
 800c69c:	d814      	bhi.n	800c6c8 <__lshift+0x94>
 800c69e:	6048      	str	r0, [r1, #4]
 800c6a0:	b108      	cbz	r0, 800c6a6 <__lshift+0x72>
 800c6a2:	f109 0502 	add.w	r5, r9, #2
 800c6a6:	3d01      	subs	r5, #1
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f8c8 5010 	str.w	r5, [r8, #16]
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	f7ff fe32 	bl	800c318 <_Bfree>
 800c6b4:	4640      	mov	r0, r8
 800c6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ba:	3101      	adds	r1, #1
 800c6bc:	005b      	lsls	r3, r3, #1
 800c6be:	e7c7      	b.n	800c650 <__lshift+0x1c>
 800c6c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	e7cd      	b.n	800c664 <__lshift+0x30>
 800c6c8:	4651      	mov	r1, sl
 800c6ca:	e7dc      	b.n	800c686 <__lshift+0x52>
 800c6cc:	3904      	subs	r1, #4
 800c6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6d2:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6d6:	459c      	cmp	ip, r3
 800c6d8:	d8f9      	bhi.n	800c6ce <__lshift+0x9a>
 800c6da:	e7e4      	b.n	800c6a6 <__lshift+0x72>

0800c6dc <__mcmp>:
 800c6dc:	6903      	ldr	r3, [r0, #16]
 800c6de:	690a      	ldr	r2, [r1, #16]
 800c6e0:	1a9b      	subs	r3, r3, r2
 800c6e2:	b530      	push	{r4, r5, lr}
 800c6e4:	d10c      	bne.n	800c700 <__mcmp+0x24>
 800c6e6:	0092      	lsls	r2, r2, #2
 800c6e8:	3014      	adds	r0, #20
 800c6ea:	3114      	adds	r1, #20
 800c6ec:	1884      	adds	r4, r0, r2
 800c6ee:	4411      	add	r1, r2
 800c6f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c6f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c6f8:	4295      	cmp	r5, r2
 800c6fa:	d003      	beq.n	800c704 <__mcmp+0x28>
 800c6fc:	d305      	bcc.n	800c70a <__mcmp+0x2e>
 800c6fe:	2301      	movs	r3, #1
 800c700:	4618      	mov	r0, r3
 800c702:	bd30      	pop	{r4, r5, pc}
 800c704:	42a0      	cmp	r0, r4
 800c706:	d3f3      	bcc.n	800c6f0 <__mcmp+0x14>
 800c708:	e7fa      	b.n	800c700 <__mcmp+0x24>
 800c70a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c70e:	e7f7      	b.n	800c700 <__mcmp+0x24>

0800c710 <__mdiff>:
 800c710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c714:	460d      	mov	r5, r1
 800c716:	4607      	mov	r7, r0
 800c718:	4611      	mov	r1, r2
 800c71a:	4628      	mov	r0, r5
 800c71c:	4614      	mov	r4, r2
 800c71e:	f7ff ffdd 	bl	800c6dc <__mcmp>
 800c722:	1e06      	subs	r6, r0, #0
 800c724:	d108      	bne.n	800c738 <__mdiff+0x28>
 800c726:	4631      	mov	r1, r6
 800c728:	4638      	mov	r0, r7
 800c72a:	f7ff fdc1 	bl	800c2b0 <_Balloc>
 800c72e:	2301      	movs	r3, #1
 800c730:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c738:	bfa4      	itt	ge
 800c73a:	4623      	movge	r3, r4
 800c73c:	462c      	movge	r4, r5
 800c73e:	4638      	mov	r0, r7
 800c740:	6861      	ldr	r1, [r4, #4]
 800c742:	bfa6      	itte	ge
 800c744:	461d      	movge	r5, r3
 800c746:	2600      	movge	r6, #0
 800c748:	2601      	movlt	r6, #1
 800c74a:	f7ff fdb1 	bl	800c2b0 <_Balloc>
 800c74e:	692b      	ldr	r3, [r5, #16]
 800c750:	60c6      	str	r6, [r0, #12]
 800c752:	6926      	ldr	r6, [r4, #16]
 800c754:	f105 0914 	add.w	r9, r5, #20
 800c758:	f104 0214 	add.w	r2, r4, #20
 800c75c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c760:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c764:	f100 0514 	add.w	r5, r0, #20
 800c768:	f04f 0e00 	mov.w	lr, #0
 800c76c:	f852 ab04 	ldr.w	sl, [r2], #4
 800c770:	f859 4b04 	ldr.w	r4, [r9], #4
 800c774:	fa1e f18a 	uxtah	r1, lr, sl
 800c778:	b2a3      	uxth	r3, r4
 800c77a:	1ac9      	subs	r1, r1, r3
 800c77c:	0c23      	lsrs	r3, r4, #16
 800c77e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c782:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c786:	b289      	uxth	r1, r1
 800c788:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c78c:	45c8      	cmp	r8, r9
 800c78e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c792:	4694      	mov	ip, r2
 800c794:	f845 3b04 	str.w	r3, [r5], #4
 800c798:	d8e8      	bhi.n	800c76c <__mdiff+0x5c>
 800c79a:	45bc      	cmp	ip, r7
 800c79c:	d304      	bcc.n	800c7a8 <__mdiff+0x98>
 800c79e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c7a2:	b183      	cbz	r3, 800c7c6 <__mdiff+0xb6>
 800c7a4:	6106      	str	r6, [r0, #16]
 800c7a6:	e7c5      	b.n	800c734 <__mdiff+0x24>
 800c7a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c7ac:	fa1e f381 	uxtah	r3, lr, r1
 800c7b0:	141a      	asrs	r2, r3, #16
 800c7b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7bc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c7c0:	f845 3b04 	str.w	r3, [r5], #4
 800c7c4:	e7e9      	b.n	800c79a <__mdiff+0x8a>
 800c7c6:	3e01      	subs	r6, #1
 800c7c8:	e7e9      	b.n	800c79e <__mdiff+0x8e>

0800c7ca <__d2b>:
 800c7ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7ce:	460e      	mov	r6, r1
 800c7d0:	2101      	movs	r1, #1
 800c7d2:	ec59 8b10 	vmov	r8, r9, d0
 800c7d6:	4615      	mov	r5, r2
 800c7d8:	f7ff fd6a 	bl	800c2b0 <_Balloc>
 800c7dc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c7e0:	4607      	mov	r7, r0
 800c7e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7e6:	bb34      	cbnz	r4, 800c836 <__d2b+0x6c>
 800c7e8:	9301      	str	r3, [sp, #4]
 800c7ea:	f1b8 0300 	subs.w	r3, r8, #0
 800c7ee:	d027      	beq.n	800c840 <__d2b+0x76>
 800c7f0:	a802      	add	r0, sp, #8
 800c7f2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c7f6:	f7ff fe00 	bl	800c3fa <__lo0bits>
 800c7fa:	9900      	ldr	r1, [sp, #0]
 800c7fc:	b1f0      	cbz	r0, 800c83c <__d2b+0x72>
 800c7fe:	9a01      	ldr	r2, [sp, #4]
 800c800:	f1c0 0320 	rsb	r3, r0, #32
 800c804:	fa02 f303 	lsl.w	r3, r2, r3
 800c808:	430b      	orrs	r3, r1
 800c80a:	40c2      	lsrs	r2, r0
 800c80c:	617b      	str	r3, [r7, #20]
 800c80e:	9201      	str	r2, [sp, #4]
 800c810:	9b01      	ldr	r3, [sp, #4]
 800c812:	61bb      	str	r3, [r7, #24]
 800c814:	2b00      	cmp	r3, #0
 800c816:	bf14      	ite	ne
 800c818:	2102      	movne	r1, #2
 800c81a:	2101      	moveq	r1, #1
 800c81c:	6139      	str	r1, [r7, #16]
 800c81e:	b1c4      	cbz	r4, 800c852 <__d2b+0x88>
 800c820:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c824:	4404      	add	r4, r0
 800c826:	6034      	str	r4, [r6, #0]
 800c828:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c82c:	6028      	str	r0, [r5, #0]
 800c82e:	4638      	mov	r0, r7
 800c830:	b003      	add	sp, #12
 800c832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c83a:	e7d5      	b.n	800c7e8 <__d2b+0x1e>
 800c83c:	6179      	str	r1, [r7, #20]
 800c83e:	e7e7      	b.n	800c810 <__d2b+0x46>
 800c840:	a801      	add	r0, sp, #4
 800c842:	f7ff fdda 	bl	800c3fa <__lo0bits>
 800c846:	9b01      	ldr	r3, [sp, #4]
 800c848:	617b      	str	r3, [r7, #20]
 800c84a:	2101      	movs	r1, #1
 800c84c:	6139      	str	r1, [r7, #16]
 800c84e:	3020      	adds	r0, #32
 800c850:	e7e5      	b.n	800c81e <__d2b+0x54>
 800c852:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c856:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c85a:	6030      	str	r0, [r6, #0]
 800c85c:	6918      	ldr	r0, [r3, #16]
 800c85e:	f7ff fdad 	bl	800c3bc <__hi0bits>
 800c862:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c866:	e7e1      	b.n	800c82c <__d2b+0x62>

0800c868 <_calloc_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	fb02 f401 	mul.w	r4, r2, r1
 800c86e:	4621      	mov	r1, r4
 800c870:	f7fe fba0 	bl	800afb4 <_malloc_r>
 800c874:	4605      	mov	r5, r0
 800c876:	b118      	cbz	r0, 800c880 <_calloc_r+0x18>
 800c878:	4622      	mov	r2, r4
 800c87a:	2100      	movs	r1, #0
 800c87c:	f7fe fb43 	bl	800af06 <memset>
 800c880:	4628      	mov	r0, r5
 800c882:	bd38      	pop	{r3, r4, r5, pc}

0800c884 <__ascii_mbtowc>:
 800c884:	b082      	sub	sp, #8
 800c886:	b901      	cbnz	r1, 800c88a <__ascii_mbtowc+0x6>
 800c888:	a901      	add	r1, sp, #4
 800c88a:	b142      	cbz	r2, 800c89e <__ascii_mbtowc+0x1a>
 800c88c:	b14b      	cbz	r3, 800c8a2 <__ascii_mbtowc+0x1e>
 800c88e:	7813      	ldrb	r3, [r2, #0]
 800c890:	600b      	str	r3, [r1, #0]
 800c892:	7812      	ldrb	r2, [r2, #0]
 800c894:	1c10      	adds	r0, r2, #0
 800c896:	bf18      	it	ne
 800c898:	2001      	movne	r0, #1
 800c89a:	b002      	add	sp, #8
 800c89c:	4770      	bx	lr
 800c89e:	4610      	mov	r0, r2
 800c8a0:	e7fb      	b.n	800c89a <__ascii_mbtowc+0x16>
 800c8a2:	f06f 0001 	mvn.w	r0, #1
 800c8a6:	e7f8      	b.n	800c89a <__ascii_mbtowc+0x16>

0800c8a8 <__ascii_wctomb>:
 800c8a8:	b149      	cbz	r1, 800c8be <__ascii_wctomb+0x16>
 800c8aa:	2aff      	cmp	r2, #255	; 0xff
 800c8ac:	bf85      	ittet	hi
 800c8ae:	238a      	movhi	r3, #138	; 0x8a
 800c8b0:	6003      	strhi	r3, [r0, #0]
 800c8b2:	700a      	strbls	r2, [r1, #0]
 800c8b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c8b8:	bf98      	it	ls
 800c8ba:	2001      	movls	r0, #1
 800c8bc:	4770      	bx	lr
 800c8be:	4608      	mov	r0, r1
 800c8c0:	4770      	bx	lr
	...

0800c8c4 <_init>:
 800c8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c6:	bf00      	nop
 800c8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ca:	bc08      	pop	{r3}
 800c8cc:	469e      	mov	lr, r3
 800c8ce:	4770      	bx	lr

0800c8d0 <_fini>:
 800c8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d2:	bf00      	nop
 800c8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8d6:	bc08      	pop	{r3}
 800c8d8:	469e      	mov	lr, r3
 800c8da:	4770      	bx	lr
