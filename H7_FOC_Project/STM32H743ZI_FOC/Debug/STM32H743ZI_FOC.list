
STM32H743ZI_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca04  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800cca0  0800cca0  0001cca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfd8  0800cfd8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfd8  0800cfd8  0001cfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfe0  0800cfe0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800cfe0  0800cfe0  0001cfe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800cfec  0800cfec  0001cfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800cff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003590  240001e0  0800d1d8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24003770  0800d1d8  00023770  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005bc71  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008b57  00000000  00000000  0007be7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f00  00000000  00000000  000849d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cd0  00000000  00000000  000868d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003eaee  00000000  00000000  000885a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021f61  00000000  00000000  000c7096  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00183d03  00000000  00000000  000e8ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0026ccfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a60  00000000  00000000  0026cd78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001e0 	.word	0x240001e0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cc84 	.word	0x0800cc84

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001e4 	.word	0x240001e4
 80002d4:	0800cc84 	.word	0x0800cc84

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f001 ff71 	bl	80024d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005f2:	f002 ff09 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 80005f6:	4601      	mov	r1, r0
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <HAL_Init+0x60>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 030f 	and.w	r3, r3, #15
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <HAL_Init+0x64>)
 8000604:	5cd3      	ldrb	r3, [r2, r3]
 8000606:	f003 031f 	and.w	r3, r3, #31
 800060a:	fa21 f303 	lsr.w	r3, r1, r3
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <HAL_Init+0x68>)
 8000610:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */  
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_Init+0x68>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_Init+0x60>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f003 030f 	and.w	r3, r3, #15
 800061e:	490b      	ldr	r1, [pc, #44]	; (800064c <HAL_Init+0x64>)
 8000620:	5ccb      	ldrb	r3, [r1, r3]
 8000622:	f003 031f 	and.w	r3, r3, #31
 8000626:	fa22 f303 	lsr.w	r3, r2, r3
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <HAL_Init+0x6c>)
 800062c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 f812 	bl	8000658 <HAL_InitTick>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e002      	b.n	8000644 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800063e:	f00a f93f 	bl	800a8c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	bd80      	pop	{r7, pc}
 8000648:	58024400 	.word	0x58024400
 800064c:	0800cd7c 	.word	0x0800cd7c
 8000650:	24000008 	.word	0x24000008
 8000654:	2400000c 	.word	0x2400000c

08000658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_InitTick+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d101      	bne.n	800066c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	e021      	b.n	80006b0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <HAL_InitTick+0x64>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <HAL_InitTick+0x60>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	fbb3 f3f1 	udiv	r3, r3, r1
 800067e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f001 ff59 	bl	800253a <HAL_SYSTICK_Config>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e00e      	b.n	80006b0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b0f      	cmp	r3, #15
 8000696:	d80a      	bhi.n	80006ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000698:	2200      	movs	r2, #0
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	f04f 30ff 	mov.w	r0, #4294967295
 80006a0:	f001 ff23 	bl	80024ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <HAL_InitTick+0x68>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e000      	b.n	80006b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	24000004 	.word	0x24000004
 80006bc:	24000008 	.word	0x24000008
 80006c0:	24000000 	.word	0x24000000

080006c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_IncTick+0x20>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_IncTick+0x24>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <HAL_IncTick+0x24>)
 80006d6:	6013      	str	r3, [r2, #0]
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	24000004 	.word	0x24000004
 80006e8:	240001fc 	.word	0x240001fc

080006ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <HAL_GetTick+0x14>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	240001fc 	.word	0x240001fc

08000704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800070c:	f7ff ffee 	bl	80006ec <HAL_GetTick>
 8000710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800071c:	d005      	beq.n	800072a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_Delay+0x40>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4413      	add	r3, r2
 8000728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800072a:	bf00      	nop
 800072c:	f7ff ffde 	bl	80006ec <HAL_GetTick>
 8000730:	4602      	mov	r2, r0
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	429a      	cmp	r2, r3
 800073a:	d8f7      	bhi.n	800072c <HAL_Delay+0x28>
  {
  }
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	24000004 	.word	0x24000004

08000748 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <HAL_GetREVID+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	0c1b      	lsrs	r3, r3, #16
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	5c001000 	.word	0x5c001000

08000760 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800076c:	685a      	ldr	r2, [r3, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	43db      	mvns	r3, r3
 8000772:	401a      	ands	r2, r3
 8000774:	4904      	ldr	r1, [pc, #16]	; (8000788 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	4313      	orrs	r3, r2
 800077a:	604b      	str	r3, [r1, #4]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	58000400 	.word	0x58000400

0800078c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	431a      	orrs	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	609a      	str	r2, [r3, #8]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e000      	b.n	80007cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d101      	bne.n	80007f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80007ec:	2301      	movs	r3, #1
 80007ee:	e000      	b.n	80007f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	f003 031f 	and.w	r3, r3, #31
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689a      	ldr	r2, [r3, #8]
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000846:	4013      	ands	r3, r2
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	6093      	str	r3, [r2, #8]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	5fffffc0 	.word	0x5fffffc0

0800085c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800086c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000870:	d101      	bne.n	8000876 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000872:	2301      	movs	r3, #1
 8000874:	e000      	b.n	8000878 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689a      	ldr	r2, [r3, #8]
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000892:	4013      	ands	r3, r2
 8000894:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	6fffffc0 	.word	0x6fffffc0

080008ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008c0:	d101      	bne.n	80008c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80008c2:	2301      	movs	r3, #1
 80008c4:	e000      	b.n	80008c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <LL_ADC_Enable+0x24>)
 80008e2:	4013      	ands	r3, r2
 80008e4:	f043 0201 	orr.w	r2, r3, #1
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	7fffffc0 	.word	0x7fffffc0

080008fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	2b01      	cmp	r3, #1
 800090e:	d101      	bne.n	8000914 <LL_ADC_IsEnabled+0x18>
 8000910:	2301      	movs	r3, #1
 8000912:	e000      	b.n	8000916 <LL_ADC_IsEnabled+0x1a>
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	2b04      	cmp	r3, #4
 8000934:	d101      	bne.n	800093a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000936:	2301      	movs	r3, #1
 8000938:	e000      	b.n	800093c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f003 0308 	and.w	r3, r3, #8
 8000958:	2b08      	cmp	r3, #8
 800095a:	d101      	bne.n	8000960 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800095c:	2301      	movs	r3, #1
 800095e:	e000      	b.n	8000962 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d101      	bne.n	800098a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e18c      	b.n	8000ca4 <HAL_ADC_Init+0x334>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000994:	2b00      	cmp	r3, #0
 8000996:	d109      	bne.n	80009ac <HAL_ADC_Init+0x3c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f009 fc79 	bl	800a290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff53 	bl	800085c <LL_ADC_IsDeepPowerDownEnabled>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d004      	beq.n	80009c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */ 
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff39 	bl	8000838 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff6e 	bl	80008ac <LL_ADC_IsInternalRegulatorEnabled>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d113      	bne.n	80009fe <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff52 	bl	8000884 <LL_ADC_EnableInternalRegulator>
    
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009e0:	4b99      	ldr	r3, [pc, #612]	; (8000c48 <HAL_ADC_Init+0x2d8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	099b      	lsrs	r3, r3, #6
 80009e6:	4a99      	ldr	r2, [pc, #612]	; (8000c4c <HAL_ADC_Init+0x2dc>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	099b      	lsrs	r3, r3, #6
 80009ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80009f0:	e002      	b.n	80009f8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1f9      	bne.n	80009f2 <HAL_ADC_Init+0x82>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff52 	bl	80008ac <LL_ADC_IsInternalRegulatorEnabled>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10d      	bne.n	8000a2a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a12:	f043 0210 	orr.w	r2, r3, #16
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	f043 0201 	orr.w	r2, r3, #1
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	77fb      	strb	r3, [r7, #31]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ff77 	bl	8000922 <LL_ADC_REG_IsConversionOngoing>
 8000a34:	6178      	str	r0, [r7, #20]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a3a:	f003 0310 	and.w	r3, r3, #16
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8127 	bne.w	8000c92 <HAL_ADC_Init+0x322>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8123 	bne.w	8000c92 <HAL_ADC_Init+0x322>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a54:	f043 0202 	orr.w	r2, r3, #2
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff4b 	bl	80008fc <LL_ADC_IsEnabled>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d136      	bne.n	8000ada <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a77      	ldr	r2, [pc, #476]	; (8000c50 <HAL_ADC_Init+0x2e0>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d004      	beq.n	8000a80 <HAL_ADC_Init+0x110>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a76      	ldr	r2, [pc, #472]	; (8000c54 <HAL_ADC_Init+0x2e4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d10e      	bne.n	8000a9e <HAL_ADC_Init+0x12e>
 8000a80:	4873      	ldr	r0, [pc, #460]	; (8000c50 <HAL_ADC_Init+0x2e0>)
 8000a82:	f7ff ff3b 	bl	80008fc <LL_ADC_IsEnabled>
 8000a86:	4604      	mov	r4, r0
 8000a88:	4872      	ldr	r0, [pc, #456]	; (8000c54 <HAL_ADC_Init+0x2e4>)
 8000a8a:	f7ff ff37 	bl	80008fc <LL_ADC_IsEnabled>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4323      	orrs	r3, r4
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	bf0c      	ite	eq
 8000a96:	2301      	moveq	r3, #1
 8000a98:	2300      	movne	r3, #0
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	e008      	b.n	8000ab0 <HAL_ADC_Init+0x140>
 8000a9e:	486e      	ldr	r0, [pc, #440]	; (8000c58 <HAL_ADC_Init+0x2e8>)
 8000aa0:	f7ff ff2c 	bl	80008fc <LL_ADC_IsEnabled>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf0c      	ite	eq
 8000aaa:	2301      	moveq	r3, #1
 8000aac:	2300      	movne	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d012      	beq.n	8000ada <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a65      	ldr	r2, [pc, #404]	; (8000c50 <HAL_ADC_Init+0x2e0>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d004      	beq.n	8000ac8 <HAL_ADC_Init+0x158>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a64      	ldr	r2, [pc, #400]	; (8000c54 <HAL_ADC_Init+0x2e4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d101      	bne.n	8000acc <HAL_ADC_Init+0x15c>
 8000ac8:	4a64      	ldr	r2, [pc, #400]	; (8000c5c <HAL_ADC_Init+0x2ec>)
 8000aca:	e000      	b.n	8000ace <HAL_ADC_Init+0x15e>
 8000acc:	4a64      	ldr	r2, [pc, #400]	; (8000c60 <HAL_ADC_Init+0x2f0>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4610      	mov	r0, r2
 8000ad6:	f7ff fe59 	bl	800078c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000ada:	f7ff fe35 	bl	8000748 <HAL_GetREVID>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	f241 0303 	movw	r3, #4099	; 0x1003
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d914      	bls.n	8000b12 <HAL_ADC_Init+0x1a2>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2b10      	cmp	r3, #16
 8000aee:	d110      	bne.n	8000b12 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7d5b      	ldrb	r3, [r3, #21]
 8000af4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000afa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000b00:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7f1b      	ldrb	r3, [r3, #28]
 8000b06:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000b08:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b0a:	f043 030c 	orr.w	r3, r3, #12
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	e00d      	b.n	8000b2e <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7d5b      	ldrb	r3, [r3, #21]
 8000b16:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b1c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000b22:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7f1b      	ldrb	r3, [r3, #28]
 8000b28:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
    }
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	7f1b      	ldrb	r3, [r3, #28]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d106      	bne.n	8000b44 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	045b      	lsls	r3, r3, #17
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d009      	beq.n	8000b60 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b50:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b58:	4313      	orrs	r3, r2
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68da      	ldr	r2, [r3, #12]
 8000b66:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <HAL_ADC_Init+0x2f4>)
 8000b68:	4013      	ands	r3, r2
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	69b9      	ldr	r1, [r7, #24]
 8000b70:	430b      	orrs	r3, r1
 8000b72:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fed2 	bl	8000922 <LL_ADC_REG_IsConversionOngoing>
 8000b7e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fedf 	bl	8000948 <LL_ADC_INJ_IsConversionOngoing>
 8000b8a:	60f8      	str	r0, [r7, #12]
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d149      	bne.n	8000c26 <HAL_ADC_Init+0x2b6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d146      	bne.n	8000c26 <HAL_ADC_Init+0x2b6>
       )
    {
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7d1b      	ldrb	r3, [r3, #20]
 8000b9c:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement)  );
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <HAL_ADC_Init+0x2f8>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	6812      	ldr	r2, [r2, #0]
 8000bb4:	69b9      	ldr	r1, [r7, #24]
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	60d3      	str	r3, [r2, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d11a      	bne.n	8000bfa <HAL_ADC_Init+0x28a>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
        
      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc8:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	691a      	ldr	r2, [r3, #16]
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <HAL_ADC_Init+0x2fc>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000bd8:	0411      	lsls	r1, r2, #16
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bde:	4311      	orrs	r1, r2
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000be4:	4311      	orrs	r1, r2
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000bea:	430a      	orrs	r2, r1
 8000bec:	431a      	orrs	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 0201 	orr.w	r2, r2, #1
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	e007      	b.n	8000c0a <HAL_ADC_Init+0x29a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	691a      	ldr	r2, [r3, #16]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0201 	bic.w	r2, r2, #1
 8000c08:	611a      	str	r2, [r3, #16]
      }
      
      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 fb1f 	bl	8001264 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d120      	bne.n	8000c70 <HAL_ADC_Init+0x300>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f023 010f 	bic.w	r1, r3, #15
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	1e5a      	subs	r2, r3, #1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	631a      	str	r2, [r3, #48]	; 0x30
 8000c46:	e01b      	b.n	8000c80 <HAL_ADC_Init+0x310>
 8000c48:	24000008 	.word	0x24000008
 8000c4c:	053e2d63 	.word	0x053e2d63
 8000c50:	40022000 	.word	0x40022000
 8000c54:	40022100 	.word	0x40022100
 8000c58:	58026000 	.word	0x58026000
 8000c5c:	40022300 	.word	0x40022300
 8000c60:	58026300 	.word	0x58026300
 8000c64:	fff0c003 	.word	0xfff0c003
 8000c68:	ffffbffc 	.word	0xffffbffc
 8000c6c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 020f 	bic.w	r2, r2, #15
 8000c7e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c84:	f023 0303 	bic.w	r3, r3, #3
 8000c88:	f043 0201 	orr.w	r2, r3, #1
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	655a      	str	r2, [r3, #84]	; 0x54
 8000c90:	e007      	b.n	8000ca2 <HAL_ADC_Init+0x332>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c96:	f043 0210 	orr.w	r2, r3, #16
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3724      	adds	r7, #36	; 0x24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd90      	pop	{r4, r7, pc}

08000cac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a87      	ldr	r2, [pc, #540]	; (8000eec <HAL_ADC_IRQHandler+0x240>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d004      	beq.n	8000cdc <HAL_ADC_IRQHandler+0x30>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a86      	ldr	r2, [pc, #536]	; (8000ef0 <HAL_ADC_IRQHandler+0x244>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d101      	bne.n	8000ce0 <HAL_ADC_IRQHandler+0x34>
 8000cdc:	4b85      	ldr	r3, [pc, #532]	; (8000ef4 <HAL_ADC_IRQHandler+0x248>)
 8000cde:	e000      	b.n	8000ce2 <HAL_ADC_IRQHandler+0x36>
 8000ce0:	4b85      	ldr	r3, [pc, #532]	; (8000ef8 <HAL_ADC_IRQHandler+0x24c>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fd8b 	bl	80007fe <LL_ADC_GetMultimode>
 8000ce8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d017      	beq.n	8000d24 <HAL_ADC_IRQHandler+0x78>
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d012      	beq.n	8000d24 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d105      	bne.n	8000d16 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d0e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 fdf4 	bl	8001904 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2202      	movs	r2, #2
 8000d22:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d004      	beq.n	8000d38 <HAL_ADC_IRQHandler+0x8c>
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10a      	bne.n	8000d4e <HAL_ADC_IRQHandler+0xa2>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0308 	and.w	r3, r3, #8
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 8083 	beq.w	8000e4a <HAL_ADC_IRQHandler+0x19e>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d07d      	beq.n	8000e4a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d105      	bne.n	8000d66 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if(LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fd21 	bl	80007b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d062      	beq.n	8000e3c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a5d      	ldr	r2, [pc, #372]	; (8000ef0 <HAL_ADC_IRQHandler+0x244>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d002      	beq.n	8000d86 <HAL_ADC_IRQHandler+0xda>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	e000      	b.n	8000d88 <HAL_ADC_IRQHandler+0xdc>
 8000d86:	4b59      	ldr	r3, [pc, #356]	; (8000eec <HAL_ADC_IRQHandler+0x240>)
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d008      	beq.n	8000da2 <HAL_ADC_IRQHandler+0xf6>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <HAL_ADC_IRQHandler+0xf6>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2b05      	cmp	r3, #5
 8000d9a:	d002      	beq.n	8000da2 <HAL_ADC_IRQHandler+0xf6>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	2b09      	cmp	r3, #9
 8000da0:	d104      	bne.n	8000dac <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	623b      	str	r3, [r7, #32]
 8000daa:	e00c      	b.n	8000dc6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a4f      	ldr	r2, [pc, #316]	; (8000ef0 <HAL_ADC_IRQHandler+0x244>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d002      	beq.n	8000dbc <HAL_ADC_IRQHandler+0x110>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	e000      	b.n	8000dbe <HAL_ADC_IRQHandler+0x112>
 8000dbc:	4b4b      	ldr	r3, [pc, #300]	; (8000eec <HAL_ADC_IRQHandler+0x240>)
 8000dbe:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	623b      	str	r3, [r7, #32]
      }
      
      /* Carry on if continuous mode is disabled */
      if (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000dc6:	6a3b      	ldr	r3, [r7, #32]
 8000dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d135      	bne.n	8000e3c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	2b08      	cmp	r3, #8
 8000ddc:	d12e      	bne.n	8000e3c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fd9d 	bl	8000922 <LL_ADC_REG_IsConversionOngoing>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d11a      	bne.n	8000e24 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f022 020c 	bic.w	r2, r2, #12
 8000dfc:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	655a      	str	r2, [r3, #84]	; 0x54
            
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d112      	bne.n	8000e3c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e1a:	f043 0201 	orr.w	r2, r3, #1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	655a      	str	r2, [r3, #84]	; 0x54
 8000e22:	e00b      	b.n	8000e3c <HAL_ADC_IRQHandler+0x190>
            }           
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e28:	f043 0210 	orr.w	r2, r3, #16
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	655a      	str	r2, [r3, #84]	; 0x54
            
            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e34:	f043 0201 	orr.w	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f96f 	bl	8001120 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	f003 0320 	and.w	r3, r3, #32
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d004      	beq.n	8000e5e <HAL_ADC_IRQHandler+0x1b2>
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	f003 0320 	and.w	r3, r3, #32
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10b      	bne.n	8000e76 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )      
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 80a0 	beq.w	8000faa <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )      
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 809a 	beq.w	8000faa <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d105      	bne.n	8000e8e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e86:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fca0 	bl	80007d8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8000e98:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fc87 	bl	80007b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000ea4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <HAL_ADC_IRQHandler+0x244>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d002      	beq.n	8000eb6 <HAL_ADC_IRQHandler+0x20a>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	e000      	b.n	8000eb8 <HAL_ADC_IRQHandler+0x20c>
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_ADC_IRQHandler+0x240>)
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d008      	beq.n	8000ed2 <HAL_ADC_IRQHandler+0x226>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <HAL_ADC_IRQHandler+0x226>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2b06      	cmp	r3, #6
 8000eca:	d002      	beq.n	8000ed2 <HAL_ADC_IRQHandler+0x226>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	d104      	bne.n	8000edc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	623b      	str	r3, [r7, #32]
 8000eda:	e014      	b.n	8000f06 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a03      	ldr	r2, [pc, #12]	; (8000ef0 <HAL_ADC_IRQHandler+0x244>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00a      	beq.n	8000efc <HAL_ADC_IRQHandler+0x250>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	e008      	b.n	8000efe <HAL_ADC_IRQHandler+0x252>
 8000eec:	40022000 	.word	0x40022000
 8000ef0:	40022100 	.word	0x40022100
 8000ef4:	40022300 	.word	0x40022300
 8000ef8:	58026300 	.word	0x58026300
 8000efc:	4b84      	ldr	r3, [pc, #528]	; (8001110 <HAL_ADC_IRQHandler+0x464>)
 8000efe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10c      	bne.n	8000f26 <HAL_ADC_IRQHandler+0x27a>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d142      	bne.n	8000f9c <HAL_ADC_IRQHandler+0x2f0>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d03f      	beq.n	8000f9c <HAL_ADC_IRQHandler+0x2f0>
        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
         (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == 0UL)    )   )   )
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d13a      	bne.n	8000f9c <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f30:	2b40      	cmp	r3, #64	; 0x40
 8000f32:	d133      	bne.n	8000f9c <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8000f34:	6a3b      	ldr	r3, [r7, #32]
 8000f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d12e      	bne.n	8000f9c <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fd00 	bl	8000948 <LL_ADC_INJ_IsConversionOngoing>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d11a      	bne.n	8000f84 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000f5c:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d112      	bne.n	8000f9c <HAL_ADC_IRQHandler+0x2f0>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7a:	f043 0201 	orr.w	r2, r3, #1
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	655a      	str	r2, [r3, #84]	; 0x54
 8000f82:	e00b      	b.n	8000f9c <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f88:	f043 0210 	orr.w	r2, r3, #16
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	655a      	str	r2, [r3, #84]	; 0x54
          
            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f94:	f043 0201 	orr.w	r2, r3, #1
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of 
              sequence.    */    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 fc89 	bl	80018b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2260      	movs	r2, #96	; 0x60
 8000fa8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d011      	beq.n	8000fd8 <HAL_ADC_IRQHandler+0x32c>
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00c      	beq.n	8000fd8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f8b2 	bl	8001134 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d012      	beq.n	8001008 <HAL_ADC_IRQHandler+0x35c>
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00d      	beq.n	8001008 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 fc6f 	bl	80018dc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001006:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800100e:	2b00      	cmp	r3, #0
 8001010:	d012      	beq.n	8001038 <HAL_ADC_IRQHandler+0x38c>
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00d      	beq.n	8001038 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001020:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 fc61 	bl	80018f0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001036:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	2b00      	cmp	r3, #0
 8001040:	d043      	beq.n	80010ca <HAL_ADC_IRQHandler+0x41e>
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	2b00      	cmp	r3, #0
 800104a:	d03e      	beq.n	80010ca <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001054:	2301      	movs	r3, #1
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
 8001058:	e021      	b.n	800109e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d015      	beq.n	800108c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled, 
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a2a      	ldr	r2, [pc, #168]	; (8001110 <HAL_ADC_IRQHandler+0x464>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d004      	beq.n	8001074 <HAL_ADC_IRQHandler+0x3c8>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a29      	ldr	r2, [pc, #164]	; (8001114 <HAL_ADC_IRQHandler+0x468>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d101      	bne.n	8001078 <HAL_ADC_IRQHandler+0x3cc>
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <HAL_ADC_IRQHandler+0x46c>)
 8001076:	e000      	b.n	800107a <HAL_ADC_IRQHandler+0x3ce>
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <HAL_ADC_IRQHandler+0x470>)
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fbcd 	bl	800081a <LL_ADC_GetMultiDMATransfer>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00b      	beq.n	800109e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001086:	2301      	movs	r3, #1
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
 800108a:	e008      	b.n	800109e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_ADC_IRQHandler+0x3f2>
      {
        overrun_error = 1UL;
 800109a:	2301      	movs	r3, #1
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      }
    }
        
    if (overrun_error == 1UL)
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10e      	bne.n	80010c2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b4:	f043 0202 	orr.w	r2, r3, #2
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 f843 	bl	8001148 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2210      	movs	r2, #16
 80010c8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF)) 
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d018      	beq.n	8001106 <HAL_ADC_IRQHandler+0x45a>
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d013      	beq.n	8001106 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f043 0208 	orr.w	r2, r3, #8
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fe:	601a      	str	r2, [r3, #0]
    
    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 fbe1 	bl	80018c8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40022000 	.word	0x40022000
 8001114:	40022100 	.word	0x40022100
 8001118:	40022300 	.word	0x40022300
 800111c:	58026300 	.word	0x58026300

08001120 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fbc7 	bl	80008fc <LL_ADC_IsEnabled>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d167      	bne.n	8001244 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	4b35      	ldr	r3, [pc, #212]	; (8001250 <ADC_Enable+0xf4>)
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00d      	beq.n	800119e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001186:	f043 0210 	orr.w	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	f043 0201 	orr.w	r2, r3, #1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e053      	b.n	8001246 <ADC_Enable+0xea>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fb96 	bl	80008d4 <LL_ADC_Enable>
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80011a8:	f7ff faa0 	bl	80006ec <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]
    
    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a28      	ldr	r2, [pc, #160]	; (8001254 <ADC_Enable+0xf8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d004      	beq.n	80011c2 <ADC_Enable+0x66>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a26      	ldr	r2, [pc, #152]	; (8001258 <ADC_Enable+0xfc>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <ADC_Enable+0x6a>
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <ADC_Enable+0x100>)
 80011c4:	e000      	b.n	80011c8 <ADC_Enable+0x6c>
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <ADC_Enable+0x104>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fb18 	bl	80007fe <LL_ADC_GetMultimode>
 80011ce:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a20      	ldr	r2, [pc, #128]	; (8001258 <ADC_Enable+0xfc>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d002      	beq.n	80011e0 <ADC_Enable+0x84>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	e000      	b.n	80011e2 <ADC_Enable+0x86>
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <ADC_Enable+0xf8>)
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d025      	beq.n	8001236 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d129      	bne.n	8001244 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80011f0:	e021      	b.n	8001236 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fb80 	bl	80008fc <LL_ADC_IsEnabled>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d104      	bne.n	800120c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fb64 	bl	80008d4 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800120c:	f7ff fa6e 	bl	80006ec <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d90d      	bls.n	8001236 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121e:	f043 0210 	orr.w	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	f043 0201 	orr.w	r2, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e007      	b.n	8001246 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b01      	cmp	r3, #1
 8001242:	d1d6      	bne.n	80011f2 <ADC_Enable+0x96>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	8000003f 	.word	0x8000003f
 8001254:	40022000 	.word	0x40022000
 8001258:	40022100 	.word	0x40022100
 800125c:	40022300 	.word	0x40022300
 8001260:	58026300 	.word	0x58026300

08001264 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a73      	ldr	r2, [pc, #460]	; (8001440 <ADC_ConfigureBoostMode+0x1dc>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d004      	beq.n	8001280 <ADC_ConfigureBoostMode+0x1c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a72      	ldr	r2, [pc, #456]	; (8001444 <ADC_ConfigureBoostMode+0x1e0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d109      	bne.n	8001294 <ADC_ConfigureBoostMode+0x30>
 8001280:	4b71      	ldr	r3, [pc, #452]	; (8001448 <ADC_ConfigureBoostMode+0x1e4>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf14      	ite	ne
 800128c:	2301      	movne	r3, #1
 800128e:	2300      	moveq	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	e008      	b.n	80012a6 <ADC_ConfigureBoostMode+0x42>
 8001294:	4b6d      	ldr	r3, [pc, #436]	; (800144c <ADC_ConfigureBoostMode+0x1e8>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129c:	2b00      	cmp	r3, #0
 800129e:	bf14      	ite	ne
 80012a0:	2301      	movne	r3, #1
 80012a2:	2300      	moveq	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d01a      	beq.n	80012e0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80012aa:	f002 fa1f 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 80012ae:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012b8:	d006      	beq.n	80012c8 <ADC_ConfigureBoostMode+0x64>
 80012ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80012be:	d00b      	beq.n	80012d8 <ADC_ConfigureBoostMode+0x74>
 80012c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c4:	d000      	beq.n	80012c8 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80012c6:	e05d      	b.n	8001384 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	0c1b      	lsrs	r3, r3, #16
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d4:	60fb      	str	r3, [r7, #12]
        break;
 80012d6:	e055      	b.n	8001384 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	60fb      	str	r3, [r7, #12]
        break;
 80012de:	e051      	b.n	8001384 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80012e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012e4:	f003 f93a 	bl	800455c <HAL_RCCEx_GetPeriphCLKFreq>
 80012e8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80012f2:	d02a      	beq.n	800134a <ADC_ConfigureBoostMode+0xe6>
 80012f4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80012f8:	d813      	bhi.n	8001322 <ADC_ConfigureBoostMode+0xbe>
 80012fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80012fe:	d024      	beq.n	800134a <ADC_ConfigureBoostMode+0xe6>
 8001300:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001304:	d806      	bhi.n	8001314 <ADC_ConfigureBoostMode+0xb0>
 8001306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800130a:	d01e      	beq.n	800134a <ADC_ConfigureBoostMode+0xe6>
 800130c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001310:	d01b      	beq.n	800134a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8001312:	e037      	b.n	8001384 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001318:	d017      	beq.n	800134a <ADC_ConfigureBoostMode+0xe6>
 800131a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800131e:	d014      	beq.n	800134a <ADC_ConfigureBoostMode+0xe6>
        break;
 8001320:	e030      	b.n	8001384 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8001322:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001326:	d021      	beq.n	800136c <ADC_ConfigureBoostMode+0x108>
 8001328:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800132c:	d806      	bhi.n	800133c <ADC_ConfigureBoostMode+0xd8>
 800132e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001332:	d013      	beq.n	800135c <ADC_ConfigureBoostMode+0xf8>
 8001334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001338:	d014      	beq.n	8001364 <ADC_ConfigureBoostMode+0x100>
        break;
 800133a:	e023      	b.n	8001384 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800133c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001340:	d018      	beq.n	8001374 <ADC_ConfigureBoostMode+0x110>
 8001342:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001346:	d019      	beq.n	800137c <ADC_ConfigureBoostMode+0x118>
        break;
 8001348:	e01c      	b.n	8001384 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	0c9b      	lsrs	r3, r3, #18
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	60fb      	str	r3, [r7, #12]
        break;
 800135a:	e013      	b.n	8001384 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	60fb      	str	r3, [r7, #12]
      break;
 8001362:	e00f      	b.n	8001384 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	60fb      	str	r3, [r7, #12]
        break;
 800136a:	e00b      	b.n	8001384 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	099b      	lsrs	r3, r3, #6
 8001370:	60fb      	str	r3, [r7, #12]
        break;
 8001372:	e007      	b.n	8001384 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	09db      	lsrs	r3, r3, #7
 8001378:	60fb      	str	r3, [r7, #12]
        break;
 800137a:	e003      	b.n	8001384 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	60fb      	str	r3, [r7, #12]
        break;
 8001382:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001384:	f7ff f9e0 	bl	8000748 <HAL_GetREVID>
 8001388:	4602      	mov	r2, r0
 800138a:	f241 0303 	movw	r3, #4099	; 0x1003
 800138e:	429a      	cmp	r2, r3
 8001390:	d815      	bhi.n	80013be <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4a2e      	ldr	r2, [pc, #184]	; (8001450 <ADC_ConfigureBoostMode+0x1ec>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d908      	bls.n	80013ac <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013a8:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */ 
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 80013aa:	e044      	b.n	8001436 <ADC_ConfigureBoostMode+0x1d2>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013ba:	609a      	str	r2, [r3, #8]
}
 80013bc:	e03b      	b.n	8001436 <ADC_ConfigureBoostMode+0x1d2>
    if (freq <= 6250000UL)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4a24      	ldr	r2, [pc, #144]	; (8001454 <ADC_ConfigureBoostMode+0x1f0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d808      	bhi.n	80013d8 <ADC_ConfigureBoostMode+0x174>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013d4:	609a      	str	r2, [r3, #8]
}
 80013d6:	e02e      	b.n	8001436 <ADC_ConfigureBoostMode+0x1d2>
    else if((freq > 6250000UL) && (freq <= 12500000UL)) 
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <ADC_ConfigureBoostMode+0x1f0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d90e      	bls.n	80013fe <ADC_ConfigureBoostMode+0x19a>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <ADC_ConfigureBoostMode+0x1f4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d80a      	bhi.n	80013fe <ADC_ConfigureBoostMode+0x19a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	e01b      	b.n	8001436 <ADC_ConfigureBoostMode+0x1d2>
    else if((freq > 12500000UL) && (freq <= 25000000UL)) 
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4a15      	ldr	r2, [pc, #84]	; (8001458 <ADC_ConfigureBoostMode+0x1f4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d90e      	bls.n	8001424 <ADC_ConfigureBoostMode+0x1c0>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <ADC_ConfigureBoostMode+0x1f8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d80a      	bhi.n	8001424 <ADC_ConfigureBoostMode+0x1c0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	e008      	b.n	8001436 <ADC_ConfigureBoostMode+0x1d2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001432:	609a      	str	r2, [r3, #8]
}
 8001434:	e7ff      	b.n	8001436 <ADC_ConfigureBoostMode+0x1d2>
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40022000 	.word	0x40022000
 8001444:	40022100 	.word	0x40022100
 8001448:	40022300 	.word	0x40022300
 800144c:	58026300 	.word	0x58026300
 8001450:	01312d00 	.word	0x01312d00
 8001454:	005f5e10 	.word	0x005f5e10
 8001458:	00bebc20 	.word	0x00bebc20
 800145c:	017d7840 	.word	0x017d7840

08001460 <LL_ADC_SetCommonPathInternalCh>:
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	609a      	str	r2, [r3, #8]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_GetCommonPathInternalCh>:
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <LL_ADC_SetOffset>:
{
 80014a2:	b490      	push	{r4, r7}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3360      	adds	r3, #96	; 0x60
 80014b4:	461a      	mov	r2, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	430b      	orrs	r3, r1
 80014ce:	4313      	orrs	r3, r2
 80014d0:	6023      	str	r3, [r4, #0]
}
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc90      	pop	{r4, r7}
 80014da:	4770      	bx	lr

080014dc <LL_ADC_GetOffsetChannel>:
{
 80014dc:	b490      	push	{r4, r7}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3360      	adds	r3, #96	; 0x60
 80014ea:	461a      	mov	r2, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc90      	pop	{r4, r7}
 8001502:	4770      	bx	lr

08001504 <LL_ADC_SetOffsetSignedSaturation>:
{
 8001504:	b490      	push	{r4, r7}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3360      	adds	r3, #96	; 0x60
 8001514:	461a      	mov	r2, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4313      	orrs	r3, r2
 8001528:	6023      	str	r3, [r4, #0]
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bc90      	pop	{r4, r7}
 8001532:	4770      	bx	lr

08001534 <LL_ADC_INJ_GetTrigAuto>:
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_INJ_SetQueueMode>:
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <LL_ADC_INJ_SetQueueMode+0x28>)
 8001560:	4013      	ands	r3, r2
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60da      	str	r2, [r3, #12]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	7fdfffff 	.word	0x7fdfffff

0800157c <LL_ADC_SetChannelSamplingTime>:
{
 800157c:	b490      	push	{r4, r7}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3314      	adds	r3, #20
 800158c:	461a      	mov	r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	0e5b      	lsrs	r3, r3, #25
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	4413      	add	r3, r2
 800159a:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800159c:	6822      	ldr	r2, [r4, #0]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	0d1b      	lsrs	r3, r3, #20
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	2107      	movs	r1, #7
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	0d1b      	lsrs	r3, r3, #20
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	6023      	str	r3, [r4, #0]
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc90      	pop	{r4, r7}
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_SetChannelSingleDiff>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0318 	and.w	r3, r3, #24
 80015ee:	4908      	ldr	r1, [pc, #32]	; (8001610 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015f0:	40d9      	lsrs	r1, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	400b      	ands	r3, r1
 80015f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015fa:	431a      	orrs	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	000fffff 	.word	0x000fffff

08001614 <LL_ADC_GetMultimode>:
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 031f 	and.w	r3, r3, #31
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_IsEnabled>:
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <LL_ADC_IsEnabled+0x18>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <LL_ADC_IsEnabled+0x1a>
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_ADC_REG_IsConversionOngoing>:
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b04      	cmp	r3, #4
 8001668:	d101      	bne.n	800166e <LL_ADC_REG_IsConversionOngoing+0x18>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_INJ_StartConversion>:
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <LL_ADC_INJ_StartConversion+0x24>)
 800168a:	4013      	ands	r3, r2
 800168c:	f043 0208 	orr.w	r2, r3, #8
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	609a      	str	r2, [r3, #8]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	7fffffc0 	.word	0x7fffffc0

080016a4 <LL_ADC_INJ_IsConversionOngoing>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d101      	bne.n	80016bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a71      	ldr	r2, [pc, #452]	; (80018a0 <HAL_ADCEx_InjectedStart_IT+0x1d4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d004      	beq.n	80016e8 <HAL_ADCEx_InjectedStart_IT+0x1c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a70      	ldr	r2, [pc, #448]	; (80018a4 <HAL_ADCEx_InjectedStart_IT+0x1d8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d101      	bne.n	80016ec <HAL_ADCEx_InjectedStart_IT+0x20>
 80016e8:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <HAL_ADCEx_InjectedStart_IT+0x1dc>)
 80016ea:	e000      	b.n	80016ee <HAL_ADCEx_InjectedStart_IT+0x22>
 80016ec:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <HAL_ADCEx_InjectedStart_IT+0x1e0>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff90 	bl	8001614 <LL_ADC_GetMultimode>
 80016f4:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ffd2 	bl	80016a4 <LL_ADC_INJ_IsConversionOngoing>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8001706:	2302      	movs	r3, #2
 8001708:	e0c6      	b.n	8001898 <HAL_ADCEx_InjectedStart_IT+0x1cc>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.  
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means 
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001714:	613b      	str	r3, [r7, #16]
    
    if (   (READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10a      	bne.n	800173a <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d107      	bne.n	800173a <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG); 
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	f043 0220 	orr.w	r2, r3, #32
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0ae      	b.n	8001898 <HAL_ADCEx_InjectedStart_IT+0x1cc>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_ADCEx_InjectedStart_IT+0x7c>
 8001744:	2302      	movs	r3, #2
 8001746:	e0a7      	b.n	8001898 <HAL_ADCEx_InjectedStart_IT+0x1cc>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fd03 	bl	800115c <ADC_Enable>
 8001756:	4603      	mov	r3, r0
 8001758:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f040 8096 	bne.w	800188e <HAL_ADCEx_InjectedStart_IT+0x1c2>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);            
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	f023 0208 	bic.w	r2, r3, #8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	659a      	str	r2, [r3, #88]	; 0x58
 800177a:	e002      	b.n	8001782 <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	659a      	str	r2, [r3, #88]	; 0x58
      }
      
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001786:	4b4a      	ldr	r3, [pc, #296]	; (80018b0 <HAL_ADCEx_InjectedStart_IT+0x1e4>)
 8001788:	4013      	ands	r3, r2
 800178a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_INJ_BUSY);
      
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a43      	ldr	r2, [pc, #268]	; (80018a4 <HAL_ADCEx_InjectedStart_IT+0x1d8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d002      	beq.n	80017a2 <HAL_ADCEx_InjectedStart_IT+0xd6>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	e000      	b.n	80017a4 <HAL_ADCEx_InjectedStart_IT+0xd8>
 80017a2:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <HAL_ADCEx_InjectedStart_IT+0x1d4>)
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d002      	beq.n	80017b2 <HAL_ADCEx_InjectedStart_IT+0xe6>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d105      	bne.n	80017be <HAL_ADCEx_InjectedStart_IT+0xf2>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
      }
      
      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2260      	movs	r2, #96	; 0x60
 80017c4:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      
      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <HAL_ADCEx_InjectedStart_IT+0x120>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017ea:	605a      	str	r2, [r3, #4]
      }
      
      /* Enable ADC end of conversion interrupt */
      switch(hadc->Init.EOCSelection)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d110      	bne.n	8001816 <HAL_ADCEx_InjectedStart_IT+0x14a>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0220 	bic.w	r2, r2, #32
 8001802:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001812:	605a      	str	r2, [r3, #4]
          break;
 8001814:	e010      	b.n	8001838 <HAL_ADCEx_InjectedStart_IT+0x16c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);      
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001824:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0220 	orr.w	r2, r2, #32
 8001834:	605a      	str	r2, [r3, #4]
          break;
 8001836:	bf00      	nop
      /*    - ADC is enabled only (conversion is not started),                  */
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <HAL_ADCEx_InjectedStart_IT+0x1d8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d002      	beq.n	8001848 <HAL_ADCEx_InjectedStart_IT+0x17c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	e000      	b.n	800184a <HAL_ADCEx_InjectedStart_IT+0x17e>
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_ADCEx_InjectedStart_IT+0x1d4>)
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	4293      	cmp	r3, r2
 8001850:	d008      	beq.n	8001864 <HAL_ADCEx_InjectedStart_IT+0x198>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_ADCEx_InjectedStart_IT+0x198>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b06      	cmp	r3, #6
 800185c:	d002      	beq.n	8001864 <HAL_ADCEx_InjectedStart_IT+0x198>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b07      	cmp	r3, #7
 8001862:	d10d      	bne.n	8001880 <HAL_ADCEx_InjectedStart_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if(LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fe63 	bl	8001534 <LL_ADC_INJ_GetTrigAuto>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d110      	bne.n	8001896 <HAL_ADCEx_InjectedStart_IT+0x1ca>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff feff 	bl	800167c <LL_ADC_INJ_StartConversion>
        if(LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800187e:	e00a      	b.n	8001896 <HAL_ADCEx_InjectedStart_IT+0x1ca>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001884:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	655a      	str	r2, [r3, #84]	; 0x54
 800188c:	e003      	b.n	8001896 <HAL_ADCEx_InjectedStart_IT+0x1ca>
    
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    
    /* Return function status */
    return tmp_hal_status;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40022000 	.word	0x40022000
 80018a4:	40022100 	.word	0x40022100
 80018a8:	40022300 	.word	0x40022300
 80018ac:	58026300 	.word	0x58026300
 80018b0:	ffffcffe 	.word	0xffffcffe

080018b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef* hadc)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b0ab      	sub	sp, #172	; 0xac
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  
  /*  DISCEN and JAUTO bits can't be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (sConfigInjected->AutoInjectedConv == ENABLE)));  
  
  /* Verification of channel number */
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	4aa7      	ldr	r2, [pc, #668]	; (8001bd4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>)
 8001938:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
    }
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001940:	2b01      	cmp	r3, #1
 8001942:	d102      	bne.n	800194a <HAL_ADCEx_InjectedConfigChannel+0x32>
 8001944:	2302      	movs	r3, #2
 8001946:	f000 bcb6 	b.w	80022b6 <HAL_ADCEx_InjectedConfigChannel+0x99e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_ADCEx_InjectedConfigChannel+0x4a>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800195e:	2b01      	cmp	r3, #1
 8001960:	d130      	bne.n	80019c4 <HAL_ADCEx_InjectedConfigChannel+0xac>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b09      	cmp	r3, #9
 8001968:	d179      	bne.n	8001a5e <HAL_ADCEx_InjectedConfigChannel+0x146>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	2b00      	cmp	r3, #0
 8001970:	d010      	beq.n	8001994 <HAL_ADCEx_InjectedConfigChannel+0x7c>
      {
         tmp_JSQR_ContextQueueBeingBuilt = (  ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	0e9b      	lsrs	r3, r3, #26
 8001978:	025b      	lsls	r3, r3, #9
 800197a:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8001986:	431a      	orrs	r2, r3
                                            | sConfigInjected->ExternalTrigInjecConvEdge
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         tmp_JSQR_ContextQueueBeingBuilt = (  ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800198c:	4313      	orrs	r3, r2
 800198e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001992:	e007      	b.n	80019a4 <HAL_ADCEx_InjectedConfigChannel+0x8c>
                                           );
      }
      else
      {
         tmp_JSQR_ContextQueueBeingBuilt = ( ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0e9b      	lsrs	r3, r3, #26
 800199a:	025b      	lsls	r3, r3, #9
 800199c:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80019a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      }
      
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt); 
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019aa:	4b8b      	ldr	r3, [pc, #556]	; (8001bd8 <HAL_ADCEx_InjectedConfigChannel+0x2c0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80019b6:	430b      	orrs	r3, r1
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80019c2:	e04c      	b.n	8001a5e <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */
    
    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U) 
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11d      	bne.n	8001a08 <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	661a      	str	r2, [r3, #96]	; 0x60
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
       hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00d      	beq.n	80019fe <HAL_ADCEx_InjectedConfigChannel+0xe6>
      {
         tmp_JSQR_ContextQueueBeingBuilt = (  (sConfigInjected->InjectedNbrOfConversion - 1U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	1e5a      	subs	r2, r3, #1
                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80019f0:	431a      	orrs	r2, r3
                                            | sConfigInjected->ExternalTrigInjecConvEdge
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         tmp_JSQR_ContextQueueBeingBuilt = (  (sConfigInjected->InjectedNbrOfConversion - 1U)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80019fc:	e004      	b.n	8001a08 <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                           );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U) );
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);
    
    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	f003 021f 	and.w	r2, r3, #31
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001a22:	4313      	orrs	r3, r2
 8001a24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    
    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	661a      	str	r2, [r3, #96]	; 0x60
    
    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous  
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10a      	bne.n	8001a5e <HAL_ADCEx_InjectedConfigChannel+0x146>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue); 
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a4e:	4b62      	ldr	r3, [pc, #392]	; (8001bd8 <HAL_ADCEx_InjectedConfigChannel+0x2c0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	430b      	orrs	r3, r1
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fe1e 	bl	80016a4 <LL_ADC_INJ_IsConversionOngoing>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d14d      	bne.n	8001b0a <HAL_ADCEx_InjectedConfigChannel+0x1f2>
  {
  /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel) & 0x1FUL));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d108      	bne.n	8001a8c <HAL_ADCEx_InjectedConfigChannel+0x174>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0e9b      	lsrs	r3, r3, #26
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	2201      	movs	r2, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	e012      	b.n	8001ab2 <HAL_ADCEx_InjectedConfigChannel+0x19a>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	2201      	movs	r2, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	69d1      	ldr	r1, [r2, #28]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	430b      	orrs	r3, r1
 8001abe:	61d3      	str	r3, [r2, #28]
    
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d112      	bne.n	8001af0 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
    {                               
      MODIFY_REG(hadc->Instance->CFGR,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ada:	055a      	lsls	r2, r3, #21
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ae2:	051b      	lsls	r3, r3, #20
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	e00c      	b.n	8001b0a <HAL_ADCEx_InjectedConfigChannel+0x1f2>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001b00:	055a      	lsls	r2, r3, #21
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fda1 	bl	8001656 <LL_ADC_REG_IsConversionOngoing>
 8001b14:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fdc1 	bl	80016a4 <LL_ADC_INJ_IsConversionOngoing>
 8001b22:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  
  if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 81d8 	bne.w	8001ee0 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 81d3 	bne.w	8001ee0 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_ADCEx_InjectedConfigChannel+0x232>
       || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d116      	bne.n	8001b78 <HAL_ADCEx_InjectedConfigChannel+0x260>
    {
         if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d108      	bne.n	8001b66 <HAL_ADCEx_InjectedConfigChannel+0x24e>
         {
           SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);    
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001b62:	60da      	str	r2, [r3, #12]
         if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001b64:	e01f      	b.n	8001ba6 <HAL_ADCEx_InjectedConfigChannel+0x28e>
         }
         else
         {
           CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);    
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001b74:	60da      	str	r2, [r3, #12]
         if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001b76:	e016      	b.n	8001ba6 <HAL_ADCEx_InjectedConfigChannel+0x28e>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d109      	bne.n	8001b96 <HAL_ADCEx_InjectedConfigChannel+0x27e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	f043 0220 	orr.w	r2, r3, #32
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        tmp_hal_status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001b94:	e007      	b.n	8001ba6 <HAL_ADCEx_InjectedConfigChannel+0x28e>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO); 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001ba4:	60da      	str	r2, [r3, #12]
      }
    }
    
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d117      	bne.n	8001be0 <HAL_ADCEx_InjectedConfigChannel+0x2c8>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */
      
      /* Enable OverSampling mode */
       MODIFY_REG(hadc->Instance->CFGR2,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_ADCEx_InjectedConfigChannel+0x2c4>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0202 	orr.w	r2, r2, #2
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	e00e      	b.n	8001bf0 <HAL_ADCEx_InjectedConfigChannel+0x2d8>
 8001bd2:	bf00      	nop
 8001bd4:	47ff0000 	.word	0x47ff0000
 8001bd8:	04104000 	.word	0x04104000
 8001bdc:	fc00fe1d 	.word	0xfc00fe1d
                 );
    }
    else
    {
      /* Disable Regular OverSampling */
       CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0202 	bic.w	r2, r2, #2
 8001bee:	611a      	str	r2, [r3, #16]
    }
    
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6819      	ldr	r1, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f7ff fcbd 	bl	800157c <LL_ADC_SetChannelSamplingTime>
    
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8001c02:	4bac      	ldr	r3, [pc, #688]	; (8001eb4 <HAL_ADCEx_InjectedConfigChannel+0x59c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c0e:	d10b      	bne.n	8001c28 <HAL_ADCEx_InjectedConfigChannel+0x310>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	e01d      	b.n	8001c64 <HAL_ADCEx_InjectedConfigChannel+0x34c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10b      	bne.n	8001c4e <HAL_ADCEx_InjectedConfigChannel+0x336>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	e00a      	b.n	8001c64 <HAL_ADCEx_InjectedConfigChannel+0x34c>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    
    if(sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d019      	beq.n	8001ca4 <HAL_ADCEx_InjectedConfigChannel+0x38c>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel, tmpOffsetShifted);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6919      	ldr	r1, [r3, #16]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c80:	f7ff fc0f 	bl	80014a2 <LL_ADC_SetOffset>
       
      /* Set ADC selected offset signed saturation */
      LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber, (sConfigInjected->InjectedOffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6919      	ldr	r1, [r3, #16]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	7f1b      	ldrb	r3, [r3, #28]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d102      	bne.n	8001c9a <HAL_ADCEx_InjectedConfigChannel+0x382>
 8001c94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c98:	e000      	b.n	8001c9c <HAL_ADCEx_InjectedConfigChannel+0x384>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f7ff fc31 	bl	8001504 <LL_ADC_SetOffsetSignedSaturation>
 8001ca2:	e11d      	b.n	8001ee0 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fc16 	bl	80014dc <LL_ADC_GetOffsetChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_ADCEx_InjectedConfigChannel+0x3b8>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fc0b 	bl	80014dc <LL_ADC_GetOffsetChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	f003 021f 	and.w	r2, r3, #31
 8001cce:	e013      	b.n	8001cf8 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fc00 	bl	80014dc <LL_ADC_GetOffsetChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return(result);
 8001cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0e9b      	lsrs	r3, r3, #26
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	e009      	b.n	8001d24 <HAL_ADCEx_InjectedConfigChannel+0x40c>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 8001d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d107      	bne.n	8001d38 <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
       LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2300      	movs	r3, #0
 8001d32:	2100      	movs	r1, #0
 8001d34:	f7ff fbb5 	bl	80014a2 <LL_ADC_SetOffset>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fbcc 	bl	80014dc <LL_ADC_GetOffsetChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10a      	bne.n	8001d64 <HAL_ADCEx_InjectedConfigChannel+0x44c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2101      	movs	r1, #1
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fbc1 	bl	80014dc <LL_ADC_GetOffsetChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	0e9b      	lsrs	r3, r3, #26
 8001d5e:	f003 021f 	and.w	r2, r3, #31
 8001d62:	e00f      	b.n	8001d84 <HAL_ADCEx_InjectedConfigChannel+0x46c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fbb6 	bl	80014dc <LL_ADC_GetOffsetChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 8001d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_ADCEx_InjectedConfigChannel+0x484>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	e009      	b.n	8001db0 <HAL_ADCEx_InjectedConfigChannel+0x498>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	66bb      	str	r3, [r7, #104]	; 0x68
  return(result);
 8001daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d107      	bne.n	8001dc4 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
      {
       LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	f7ff fb6f 	bl	80014a2 <LL_ADC_SetOffset>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2102      	movs	r1, #2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fb86 	bl	80014dc <LL_ADC_GetOffsetChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10a      	bne.n	8001df0 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2102      	movs	r1, #2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fb7b 	bl	80014dc <LL_ADC_GetOffsetChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	f003 021f 	and.w	r2, r3, #31
 8001dee:	e00f      	b.n	8001e10 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2102      	movs	r1, #2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fb70 	bl	80014dc <LL_ADC_GetOffsetChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001e08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <HAL_ADCEx_InjectedConfigChannel+0x510>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0e9b      	lsrs	r3, r3, #26
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	e009      	b.n	8001e3c <HAL_ADCEx_InjectedConfigChannel+0x524>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8001e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d107      	bne.n	8001e50 <HAL_ADCEx_InjectedConfigChannel+0x538>
      {
       LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	f7ff fb29 	bl	80014a2 <LL_ADC_SetOffset>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2103      	movs	r1, #3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fb40 	bl	80014dc <LL_ADC_GetOffsetChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10a      	bne.n	8001e7c <HAL_ADCEx_InjectedConfigChannel+0x564>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2103      	movs	r1, #3
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fb35 	bl	80014dc <LL_ADC_GetOffsetChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	f003 021f 	and.w	r2, r3, #31
 8001e7a:	e00f      	b.n	8001e9c <HAL_ADCEx_InjectedConfigChannel+0x584>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2103      	movs	r1, #3
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fb2a 	bl	80014dc <LL_ADC_GetOffsetChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8001e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_ADCEx_InjectedConfigChannel+0x5a0>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0e9b      	lsrs	r3, r3, #26
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	e00b      	b.n	8001ecc <HAL_ADCEx_InjectedConfigChannel+0x5b4>
 8001eb4:	5c001000 	.word	0x5c001000
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d107      	bne.n	8001ee0 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
      {
       LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE); 
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2103      	movs	r1, #3
 8001edc:	f7ff fae1 	bl	80014a2 <LL_ADC_SetOffset>
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fba3 	bl	8001630 <LL_ADC_IsEnabled>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f040 81dc 	bne.w	80022aa <HAL_ADCEx_InjectedConfigChannel+0x992>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6819      	ldr	r1, [r3, #0]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f7ff fb64 	bl	80015cc <LL_ADC_SetChannelSingleDiff>
    
    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4aa9      	ldr	r2, [pc, #676]	; (80021b0 <HAL_ADCEx_InjectedConfigChannel+0x898>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	f040 80f6 	bne.w	80020fc <HAL_ADCEx_InjectedConfigChannel+0x7e4>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10b      	bne.n	8001f38 <HAL_ADCEx_InjectedConfigChannel+0x620>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	3301      	adds	r3, #1
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	bf94      	ite	ls
 8001f30:	2301      	movls	r3, #1
 8001f32:	2300      	movhi	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	e011      	b.n	8001f5c <HAL_ADCEx_InjectedConfigChannel+0x644>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8001f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2b09      	cmp	r3, #9
 8001f54:	bf94      	ite	ls
 8001f56:	2301      	movls	r3, #1
 8001f58:	2300      	movhi	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d061      	beq.n	8002024 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <HAL_ADCEx_InjectedConfigChannel+0x664>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0e9b      	lsrs	r3, r3, #26
 8001f72:	3301      	adds	r3, #1
 8001f74:	069b      	lsls	r3, r3, #26
 8001f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f7a:	e00d      	b.n	8001f98 <HAL_ADCEx_InjectedConfigChannel+0x680>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8001f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	069b      	lsls	r3, r3, #26
 8001f94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_ADCEx_InjectedConfigChannel+0x6a0>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e9b      	lsrs	r3, r3, #26
 8001faa:	3301      	adds	r3, #1
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	e00f      	b.n	8001fd8 <HAL_ADCEx_InjectedConfigChannel+0x6c0>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	ea42 0103 	orr.w	r1, r2, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10a      	bne.n	8001ffe <HAL_ADCEx_InjectedConfigChannel+0x6e6>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	051b      	lsls	r3, r3, #20
 8001ffc:	e010      	b.n	8002020 <HAL_ADCEx_InjectedConfigChannel+0x708>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	051b      	lsls	r3, r3, #20
 8002020:	430b      	orrs	r3, r1
 8002022:	e066      	b.n	80020f2 <HAL_ADCEx_InjectedConfigChannel+0x7da>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800202c:	2b00      	cmp	r3, #0
 800202e:	d107      	bne.n	8002040 <HAL_ADCEx_InjectedConfigChannel+0x728>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	3301      	adds	r3, #1
 8002038:	069b      	lsls	r3, r3, #26
 800203a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800203e:	e00d      	b.n	800205c <HAL_ADCEx_InjectedConfigChannel+0x744>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	623b      	str	r3, [r7, #32]
  return(result);
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	069b      	lsls	r3, r3, #26
 8002058:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_ADCEx_InjectedConfigChannel+0x764>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	3301      	adds	r3, #1
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	e00f      	b.n	800209c <HAL_ADCEx_InjectedConfigChannel+0x784>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	61bb      	str	r3, [r7, #24]
  return(result);
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	3301      	adds	r3, #1
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	ea42 0103 	orr.w	r1, r2, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10d      	bne.n	80020c8 <HAL_ADCEx_InjectedConfigChannel+0x7b0>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	3301      	adds	r3, #1
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	3b1e      	subs	r3, #30
 80020c0:	051b      	lsls	r3, r3, #20
 80020c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020c6:	e013      	b.n	80020f0 <HAL_ADCEx_InjectedConfigChannel+0x7d8>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	613b      	str	r3, [r7, #16]
  return(result);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	f003 021f 	and.w	r2, r3, #31
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	3b1e      	subs	r3, #30
 80020ea:	051b      	lsls	r3, r3, #20
 80020ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020f0:	430b      	orrs	r3, r1
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	6892      	ldr	r2, [r2, #8]
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7ff fa40 	bl	800157c <LL_ADC_SetChannelSamplingTime>
    /* internal measurement paths enable: If internal channel selected,       */
    /* enable dedicated internal buffers and path.                            */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */
    
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	f280 80d2 	bge.w	80022aa <HAL_ADCEx_InjectedConfigChannel+0x992>
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a2a      	ldr	r2, [pc, #168]	; (80021b4 <HAL_ADCEx_InjectedConfigChannel+0x89c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d004      	beq.n	800211a <HAL_ADCEx_InjectedConfigChannel+0x802>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a28      	ldr	r2, [pc, #160]	; (80021b8 <HAL_ADCEx_InjectedConfigChannel+0x8a0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d10e      	bne.n	8002138 <HAL_ADCEx_InjectedConfigChannel+0x820>
 800211a:	4826      	ldr	r0, [pc, #152]	; (80021b4 <HAL_ADCEx_InjectedConfigChannel+0x89c>)
 800211c:	f7ff fa88 	bl	8001630 <LL_ADC_IsEnabled>
 8002120:	4604      	mov	r4, r0
 8002122:	4825      	ldr	r0, [pc, #148]	; (80021b8 <HAL_ADCEx_InjectedConfigChannel+0x8a0>)
 8002124:	f7ff fa84 	bl	8001630 <LL_ADC_IsEnabled>
 8002128:	4603      	mov	r3, r0
 800212a:	4323      	orrs	r3, r4
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	e008      	b.n	800214a <HAL_ADCEx_InjectedConfigChannel+0x832>
 8002138:	4820      	ldr	r0, [pc, #128]	; (80021bc <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 800213a:	f7ff fa79 	bl	8001630 <LL_ADC_IsEnabled>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 80a4 	beq.w	8002298 <HAL_ADCEx_InjectedConfigChannel+0x980>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <HAL_ADCEx_InjectedConfigChannel+0x89c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_ADCEx_InjectedConfigChannel+0x84c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <HAL_ADCEx_InjectedConfigChannel+0x8a0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_ADCEx_InjectedConfigChannel+0x850>
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 8002166:	e000      	b.n	800216a <HAL_ADCEx_InjectedConfigChannel+0x852>
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff f98b 	bl	8001486 <LL_ADC_GetCommonPathInternalCh>
 8002170:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        
        /* If the requested internal measurement path has already been enabled, */
        /* bypass the configuration processing.                                 */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <HAL_ADCEx_InjectedConfigChannel+0x8b0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d140      	bne.n	8002200 <HAL_ADCEx_InjectedConfigChannel+0x8e8>
 800217e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d13a      	bne.n	8002200 <HAL_ADCEx_InjectedConfigChannel+0x8e8>
        {
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	f040 808a 	bne.w	80022aa <HAL_ADCEx_InjectedConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <HAL_ADCEx_InjectedConfigChannel+0x89c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_ADCEx_InjectedConfigChannel+0x892>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <HAL_ADCEx_InjectedConfigChannel+0x8a0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d110      	bne.n	80021cc <HAL_ADCEx_InjectedConfigChannel+0x8b4>
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 80021ac:	e00f      	b.n	80021ce <HAL_ADCEx_InjectedConfigChannel+0x8b6>
 80021ae:	bf00      	nop
 80021b0:	47ff0000 	.word	0x47ff0000
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40022100 	.word	0x40022100
 80021bc:	58026000 	.word	0x58026000
 80021c0:	40022300 	.word	0x40022300
 80021c4:	58026300 	.word	0x58026300
 80021c8:	cb840000 	.word	0xcb840000
 80021cc:	4a3c      	ldr	r2, [pc, #240]	; (80022c0 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80021ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021d6:	4619      	mov	r1, r3
 80021d8:	4610      	mov	r0, r2
 80021da:	f7ff f941 	bl	8001460 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021de:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	099b      	lsrs	r3, r3, #6
 80021e4:	4a38      	ldr	r2, [pc, #224]	; (80022c8 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	099b      	lsrs	r3, r3, #6
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
            while(wait_loop_index != 0UL)
 80021f0:	e002      	b.n	80021f8 <HAL_ADCEx_InjectedConfigChannel+0x8e0>
            {
              wait_loop_index--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
            while(wait_loop_index != 0UL)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f9      	bne.n	80021f2 <HAL_ADCEx_InjectedConfigChannel+0x8da>
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021fe:	e054      	b.n	80022aa <HAL_ADCEx_InjectedConfigChannel+0x992>
            }
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a31      	ldr	r2, [pc, #196]	; (80022cc <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d120      	bne.n	800224c <HAL_ADCEx_InjectedConfigChannel+0x934>
 800220a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800220e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d11a      	bne.n	800224c <HAL_ADCEx_InjectedConfigChannel+0x934>
        { 
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a2d      	ldr	r2, [pc, #180]	; (80022d0 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d144      	bne.n	80022aa <HAL_ADCEx_InjectedConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a2b      	ldr	r2, [pc, #172]	; (80022d4 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d004      	beq.n	8002234 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <HAL_ADCEx_InjectedConfigChannel+0x9c0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_ADCEx_InjectedConfigChannel+0x920>
 8002234:	4a29      	ldr	r2, [pc, #164]	; (80022dc <HAL_ADCEx_InjectedConfigChannel+0x9c4>)
 8002236:	e000      	b.n	800223a <HAL_ADCEx_InjectedConfigChannel+0x922>
 8002238:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 800223a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f7ff f90b 	bl	8001460 <LL_ADC_SetCommonPathInternalCh>
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800224a:	e02e      	b.n	80022aa <HAL_ADCEx_InjectedConfigChannel+0x992>
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a23      	ldr	r2, [pc, #140]	; (80022e0 <HAL_ADCEx_InjectedConfigChannel+0x9c8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d129      	bne.n	80022aa <HAL_ADCEx_InjectedConfigChannel+0x992>
 8002256:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d123      	bne.n	80022aa <HAL_ADCEx_InjectedConfigChannel+0x992>
        { 
          if (ADC_VREFINT_INSTANCE(hadc))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d11e      	bne.n	80022aa <HAL_ADCEx_InjectedConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_ADCEx_InjectedConfigChannel+0x968>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_ADCEx_InjectedConfigChannel+0x9c0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_ADCEx_InjectedConfigChannel+0x96c>
 8002280:	4a16      	ldr	r2, [pc, #88]	; (80022dc <HAL_ADCEx_InjectedConfigChannel+0x9c4>)
 8002282:	e000      	b.n	8002286 <HAL_ADCEx_InjectedConfigChannel+0x96e>
 8002284:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8002286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800228a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800228e:	4619      	mov	r1, r3
 8002290:	4610      	mov	r0, r2
 8002292:	f7ff f8e5 	bl	8001460 <LL_ADC_SetCommonPathInternalCh>
 8002296:	e008      	b.n	80022aa <HAL_ADCEx_InjectedConfigChannel+0x992>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	f043 0220 	orr.w	r2, r3, #32
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        tmp_hal_status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 80022b2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	37ac      	adds	r7, #172	; 0xac
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd90      	pop	{r4, r7, pc}
 80022be:	bf00      	nop
 80022c0:	58026300 	.word	0x58026300
 80022c4:	24000008 	.word	0x24000008
 80022c8:	053e2d63 	.word	0x053e2d63
 80022cc:	c7520000 	.word	0xc7520000
 80022d0:	58026000 	.word	0x58026000
 80022d4:	40022000 	.word	0x40022000
 80022d8:	40022100 	.word	0x40022100
 80022dc:	40022300 	.word	0x40022300
 80022e0:	cfb80000 	.word	0xcfb80000

080022e4 <HAL_ADCEx_DisableInjectedQueue>:
  *         conversion is ongoing. 
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef* hadc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f9b0 	bl	8001656 <LL_ADC_REG_IsConversionOngoing>
 80022f6:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff f9d1 	bl	80016a4 <LL_ADC_INJ_IsConversionOngoing>
 8002302:	60f8      	str	r0, [r7, #12]
  
  /* Parameter can be set only if no conversion is on-going */
  if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_ADCEx_DisableInjectedQueue+0x40>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_ADCEx_DisableInjectedQueue+0x40>
     )
  {
    LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff f919 	bl	8001550 <LL_ADC_INJ_SetQueueMode>
    tmp_hal_status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
 8002322:	e001      	b.n	8002328 <HAL_ADCEx_DisableInjectedQueue+0x44>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	75fb      	strb	r3, [r7, #23]
  }
  
  return tmp_hal_status;
 8002328:	7dfb      	ldrb	r3, [r7, #23]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <__NVIC_SetPriorityGrouping+0x40>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	4313      	orrs	r3, r2
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	; (8002374 <__NVIC_SetPriorityGrouping+0x40>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00
 8002378:	05fa0000 	.word	0x05fa0000

0800237c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4907      	ldr	r1, [pc, #28]	; (80023d0 <__NVIC_EnableIRQ+0x38>)
 80023b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	; (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	; (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
         );
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	; 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a0:	d301      	bcc.n	80024a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00f      	b.n	80024c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <SysTick_Config+0x40>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ae:	210f      	movs	r1, #15
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	f7ff ff8e 	bl	80023d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <SysTick_Config+0x40>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <SysTick_Config+0x40>)
 80024c0:	2207      	movs	r2, #7
 80024c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010

080024d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff29 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff40 	bl	800237c <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff90 	bl	8002428 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5f 	bl	80023d4 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff33 	bl	8002398 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa4 	bl	8002490 <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002562:	4b89      	ldr	r3, [pc, #548]	; (8002788 <HAL_GPIO_Init+0x234>)
 8002564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002566:	e194      	b.n	8002892 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2101      	movs	r1, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8186 	beq.w	800288c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x3c>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b12      	cmp	r3, #18
 800258e:	d123      	bne.n	80025d8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	08da      	lsrs	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3208      	adds	r2, #8
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	220f      	movs	r2, #15
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	69b9      	ldr	r1, [r7, #24]
 80025d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d00b      	beq.n	800262c <HAL_GPIO_Init+0xd8>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d007      	beq.n	800262c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002620:	2b11      	cmp	r3, #17
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b12      	cmp	r3, #18
 800262a:	d130      	bne.n	800268e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002662:	2201      	movs	r2, #1
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f003 0201 	and.w	r2, r3, #1
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80e0 	beq.w	800288c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026cc:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_GPIO_Init+0x238>)
 80026ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026d2:	4a2e      	ldr	r2, [pc, #184]	; (800278c <HAL_GPIO_Init+0x238>)
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026dc:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_GPIO_Init+0x238>)
 80026de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ea:	4a29      	ldr	r2, [pc, #164]	; (8002790 <HAL_GPIO_Init+0x23c>)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	3302      	adds	r3, #2
 80026f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	220f      	movs	r2, #15
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a20      	ldr	r2, [pc, #128]	; (8002794 <HAL_GPIO_Init+0x240>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d052      	beq.n	80027bc <HAL_GPIO_Init+0x268>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <HAL_GPIO_Init+0x244>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d031      	beq.n	8002782 <HAL_GPIO_Init+0x22e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_GPIO_Init+0x248>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02b      	beq.n	800277e <HAL_GPIO_Init+0x22a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <HAL_GPIO_Init+0x24c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d025      	beq.n	800277a <HAL_GPIO_Init+0x226>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <HAL_GPIO_Init+0x250>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01f      	beq.n	8002776 <HAL_GPIO_Init+0x222>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <HAL_GPIO_Init+0x254>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d019      	beq.n	8002772 <HAL_GPIO_Init+0x21e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <HAL_GPIO_Init+0x258>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0x21a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_GPIO_Init+0x25c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_GPIO_Init+0x216>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_GPIO_Init+0x260>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x212>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <HAL_GPIO_Init+0x264>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_GPIO_Init+0x20e>
 800275e:	2309      	movs	r3, #9
 8002760:	e02d      	b.n	80027be <HAL_GPIO_Init+0x26a>
 8002762:	230a      	movs	r3, #10
 8002764:	e02b      	b.n	80027be <HAL_GPIO_Init+0x26a>
 8002766:	2308      	movs	r3, #8
 8002768:	e029      	b.n	80027be <HAL_GPIO_Init+0x26a>
 800276a:	2307      	movs	r3, #7
 800276c:	e027      	b.n	80027be <HAL_GPIO_Init+0x26a>
 800276e:	2306      	movs	r3, #6
 8002770:	e025      	b.n	80027be <HAL_GPIO_Init+0x26a>
 8002772:	2305      	movs	r3, #5
 8002774:	e023      	b.n	80027be <HAL_GPIO_Init+0x26a>
 8002776:	2304      	movs	r3, #4
 8002778:	e021      	b.n	80027be <HAL_GPIO_Init+0x26a>
 800277a:	2303      	movs	r3, #3
 800277c:	e01f      	b.n	80027be <HAL_GPIO_Init+0x26a>
 800277e:	2302      	movs	r3, #2
 8002780:	e01d      	b.n	80027be <HAL_GPIO_Init+0x26a>
 8002782:	2301      	movs	r3, #1
 8002784:	e01b      	b.n	80027be <HAL_GPIO_Init+0x26a>
 8002786:	bf00      	nop
 8002788:	58000080 	.word	0x58000080
 800278c:	58024400 	.word	0x58024400
 8002790:	58000400 	.word	0x58000400
 8002794:	58020000 	.word	0x58020000
 8002798:	58020400 	.word	0x58020400
 800279c:	58020800 	.word	0x58020800
 80027a0:	58020c00 	.word	0x58020c00
 80027a4:	58021000 	.word	0x58021000
 80027a8:	58021400 	.word	0x58021400
 80027ac:	58021800 	.word	0x58021800
 80027b0:	58021c00 	.word	0x58021c00
 80027b4:	58022000 	.word	0x58022000
 80027b8:	58022400 	.word	0x58022400
 80027bc:	2300      	movs	r3, #0
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	f002 0203 	and.w	r2, r2, #3
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	4093      	lsls	r3, r2
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ce:	4938      	ldr	r1, [pc, #224]	; (80028b0 <HAL_GPIO_Init+0x35c>)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	3301      	adds	r3, #1
 8002890:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	f47f ae63 	bne.w	8002568 <HAL_GPIO_Init+0x14>
  }
}
 80028a2:	bf00      	nop
 80028a4:	3724      	adds	r7, #36	; 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	58000400 	.word	0x58000400

080028b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
 80028c0:	4613      	mov	r3, r2
 80028c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c4:	787b      	ldrb	r3, [r7, #1]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028d0:	e003      	b.n	80028da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	041a      	lsls	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	619a      	str	r2, [r3, #24]
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 80028f0:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_PWREx_ConfigSupply+0x6c>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d008      	beq.n	800290e <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028fc:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_PWREx_ConfigSupply+0x6c>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	429a      	cmp	r2, r3
 8002908:	d001      	beq.n	800290e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e01d      	b.n	800294a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <HAL_PWREx_ConfigSupply+0x6c>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f023 0207 	bic.w	r2, r3, #7
 8002916:	490f      	ldr	r1, [pc, #60]	; (8002954 <HAL_PWREx_ConfigSupply+0x6c>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4313      	orrs	r3, r2
 800291c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800291e:	f7fd fee5 	bl	80006ec <HAL_GetTick>
 8002922:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002924:	e009      	b.n	800293a <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8002926:	f7fd fee1 	bl	80006ec <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002934:	d901      	bls.n	800293a <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e007      	b.n	800294a <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_PWREx_ConfigSupply+0x6c>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002946:	d1ee      	bne.n	8002926 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	58024800 	.word	0x58024800

08002958 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e3a4      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8087 	beq.w	8002a86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002978:	4b9a      	ldr	r3, [pc, #616]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002982:	4b98      	ldr	r3, [pc, #608]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	2b10      	cmp	r3, #16
 800298c:	d007      	beq.n	800299e <HAL_RCC_OscConfig+0x46>
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	2b18      	cmp	r3, #24
 8002992:	d110      	bne.n	80029b6 <HAL_RCC_OscConfig+0x5e>
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d10b      	bne.n	80029b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299e:	4b91      	ldr	r3, [pc, #580]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d06c      	beq.n	8002a84 <HAL_RCC_OscConfig+0x12c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d168      	bne.n	8002a84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e37e      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x76>
 80029c0:	4b88      	ldr	r3, [pc, #544]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a87      	ldr	r2, [pc, #540]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	e02e      	b.n	8002a2c <HAL_RCC_OscConfig+0xd4>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x98>
 80029d6:	4b83      	ldr	r3, [pc, #524]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a82      	ldr	r2, [pc, #520]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 80029dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b80      	ldr	r3, [pc, #512]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a7f      	ldr	r2, [pc, #508]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 80029e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e01d      	b.n	8002a2c <HAL_RCC_OscConfig+0xd4>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0xbc>
 80029fa:	4b7a      	ldr	r3, [pc, #488]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a79      	ldr	r2, [pc, #484]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b77      	ldr	r3, [pc, #476]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a76      	ldr	r2, [pc, #472]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0xd4>
 8002a14:	4b73      	ldr	r3, [pc, #460]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a72      	ldr	r2, [pc, #456]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b70      	ldr	r3, [pc, #448]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a6f      	ldr	r2, [pc, #444]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fd fe5a 	bl	80006ec <HAL_GetTick>
 8002a38:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fd fe56 	bl	80006ec <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e332      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a4e:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0xe4>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fd fe46 	bl	80006ec <HAL_GetTick>
 8002a60:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fd fe42 	bl	80006ec <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e31e      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a76:	4b5b      	ldr	r3, [pc, #364]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x10c>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80b0 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a9c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a9e:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_RCC_OscConfig+0x162>
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b18      	cmp	r3, #24
 8002aae:	d149      	bne.n	8002b44 <HAL_RCC_OscConfig+0x1ec>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d144      	bne.n	8002b44 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aba:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x17a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e2f0      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ad2:	4b44      	ldr	r3, [pc, #272]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 0219 	bic.w	r2, r3, #25
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4941      	ldr	r1, [pc, #260]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fd fe02 	bl	80006ec <HAL_GetTick>
 8002ae8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aec:	f7fd fdfe 	bl	80006ec <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e2da      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002afe:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	f7fd fe1d 	bl	8000748 <HAL_GetREVID>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d80a      	bhi.n	8002b2e <HAL_RCC_OscConfig+0x1d6>
 8002b18:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	031b      	lsls	r3, r3, #12
 8002b26:	492f      	ldr	r1, [pc, #188]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b2c:	e062      	b.n	8002bf4 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2e:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	061b      	lsls	r3, r3, #24
 8002b3c:	4929      	ldr	r1, [pc, #164]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b42:	e057      	b.n	8002bf4 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d038      	beq.n	8002bbe <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 0219 	bic.w	r2, r3, #25
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4922      	ldr	r1, [pc, #136]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7fd fdc5 	bl	80006ec <HAL_GetTick>
 8002b62:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b66:	f7fd fdc1 	bl	80006ec <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e29d      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b78:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b84:	f7fd fde0 	bl	8000748 <HAL_GetREVID>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d80a      	bhi.n	8002ba8 <HAL_RCC_OscConfig+0x250>
 8002b92:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	031b      	lsls	r3, r3, #12
 8002ba0:	4910      	ldr	r1, [pc, #64]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
 8002ba6:	e025      	b.n	8002bf4 <HAL_RCC_OscConfig+0x29c>
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	490b      	ldr	r1, [pc, #44]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
 8002bbc:	e01a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_RCC_OscConfig+0x28c>)
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fd fd8f 	bl	80006ec <HAL_GetTick>
 8002bce:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7fd fd8b 	bl	80006ec <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d903      	bls.n	8002be8 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e267      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
 8002be4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002be8:	4ba0      	ldr	r3, [pc, #640]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ee      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 808f 	beq.w	8002d20 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c02:	4b9a      	ldr	r3, [pc, #616]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c0a:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c0c:	4b97      	ldr	r3, [pc, #604]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d007      	beq.n	8002c28 <HAL_RCC_OscConfig+0x2d0>
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b18      	cmp	r3, #24
 8002c1c:	d12d      	bne.n	8002c7a <HAL_RCC_OscConfig+0x322>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d128      	bne.n	8002c7a <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c28:	4b90      	ldr	r3, [pc, #576]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_OscConfig+0x2e8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e239      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c40:	f7fd fd82 	bl	8000748 <HAL_GetREVID>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d80a      	bhi.n	8002c64 <HAL_RCC_OscConfig+0x30c>
 8002c4e:	4b87      	ldr	r3, [pc, #540]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	069b      	lsls	r3, r3, #26
 8002c5c:	4983      	ldr	r1, [pc, #524]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c62:	e05d      	b.n	8002d20 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c64:	4b81      	ldr	r3, [pc, #516]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	497e      	ldr	r1, [pc, #504]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c78:	e052      	b.n	8002d20 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d035      	beq.n	8002cee <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c82:	4b7a      	ldr	r3, [pc, #488]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a79      	ldr	r2, [pc, #484]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fd fd2d 	bl	80006ec <HAL_GetTick>
 8002c92:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c96:	f7fd fd29 	bl	80006ec <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e205      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ca8:	4b70      	ldr	r3, [pc, #448]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cb4:	f7fd fd48 	bl	8000748 <HAL_GetREVID>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	f241 0303 	movw	r3, #4099	; 0x1003
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d80a      	bhi.n	8002cd8 <HAL_RCC_OscConfig+0x380>
 8002cc2:	4b6a      	ldr	r3, [pc, #424]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	069b      	lsls	r3, r3, #26
 8002cd0:	4966      	ldr	r1, [pc, #408]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
 8002cd6:	e023      	b.n	8002d20 <HAL_RCC_OscConfig+0x3c8>
 8002cd8:	4b64      	ldr	r3, [pc, #400]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	4961      	ldr	r1, [pc, #388]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60cb      	str	r3, [r1, #12]
 8002cec:	e018      	b.n	8002d20 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cee:	4b5f      	ldr	r3, [pc, #380]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a5e      	ldr	r2, [pc, #376]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fd fcf7 	bl	80006ec <HAL_GetTick>
 8002cfe:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d02:	f7fd fcf3 	bl	80006ec <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1cf      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d14:	4b55      	ldr	r3, [pc, #340]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d036      	beq.n	8002d9a <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d019      	beq.n	8002d68 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d34:	4b4d      	ldr	r3, [pc, #308]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d38:	4a4c      	ldr	r2, [pc, #304]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fd fcd4 	bl	80006ec <HAL_GetTick>
 8002d44:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fd fcd0 	bl	80006ec <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1ac      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d5a:	4b44      	ldr	r3, [pc, #272]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x3f0>
 8002d66:	e018      	b.n	8002d9a <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6c:	4a3f      	ldr	r2, [pc, #252]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fd fcba 	bl	80006ec <HAL_GetTick>
 8002d78:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7c:	f7fd fcb6 	bl	80006ec <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e192      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d036      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d019      	beq.n	8002de2 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dae:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2e      	ldr	r2, [pc, #184]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002db8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dba:	f7fd fc97 	bl	80006ec <HAL_GetTick>
 8002dbe:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dc2:	f7fd fc93 	bl	80006ec <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e16f      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dd4:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x46a>
 8002de0:	e018      	b.n	8002e14 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002de2:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a21      	ldr	r2, [pc, #132]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dee:	f7fd fc7d 	bl	80006ec <HAL_GetTick>
 8002df2:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002df6:	f7fd fc79 	bl	80006ec <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e155      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8086 	beq.w	8002f2e <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e22:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <HAL_RCC_OscConfig+0x518>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <HAL_RCC_OscConfig+0x518>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e2e:	f7fd fc5d 	bl	80006ec <HAL_GetTick>
 8002e32:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7fd fc59 	bl	80006ec <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	; 0x64
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e135      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_OscConfig+0x518>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d10b      	bne.n	8002e74 <HAL_RCC_OscConfig+0x51c>
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	4a02      	ldr	r2, [pc, #8]	; (8002e6c <HAL_RCC_OscConfig+0x514>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70
 8002e68:	e032      	b.n	8002ed0 <HAL_RCC_OscConfig+0x578>
 8002e6a:	bf00      	nop
 8002e6c:	58024400 	.word	0x58024400
 8002e70:	58024800 	.word	0x58024800
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10c      	bne.n	8002e96 <HAL_RCC_OscConfig+0x53e>
 8002e7c:	4b8f      	ldr	r3, [pc, #572]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a8e      	ldr	r2, [pc, #568]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
 8002e88:	4b8c      	ldr	r3, [pc, #560]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a8b      	ldr	r2, [pc, #556]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002e8e:	f023 0304 	bic.w	r3, r3, #4
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
 8002e94:	e01c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x578>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x560>
 8002e9e:	4b87      	ldr	r3, [pc, #540]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a86      	ldr	r2, [pc, #536]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eaa:	4b84      	ldr	r3, [pc, #528]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a83      	ldr	r2, [pc, #524]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0x578>
 8002eb8:	4b80      	ldr	r3, [pc, #512]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a7f      	ldr	r2, [pc, #508]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	4b7d      	ldr	r3, [pc, #500]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a7c      	ldr	r2, [pc, #496]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002eca:	f023 0304 	bic.w	r3, r3, #4
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fd fc08 	bl	80006ec <HAL_GetTick>
 8002edc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fd fc04 	bl	80006ec <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0de      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef6:	4b71      	ldr	r3, [pc, #452]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ee      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x588>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fd fbf2 	bl	80006ec <HAL_GetTick>
 8002f08:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fd fbee 	bl	80006ec <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e0c8      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f22:	4b66      	ldr	r3, [pc, #408]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ee      	bne.n	8002f0c <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80bd 	beq.w	80030b2 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f38:	4b60      	ldr	r3, [pc, #384]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f40:	2b18      	cmp	r3, #24
 8002f42:	f000 80b4 	beq.w	80030ae <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	f040 8095 	bne.w	800307a <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b5a      	ldr	r3, [pc, #360]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a59      	ldr	r2, [pc, #356]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fd fbc6 	bl	80006ec <HAL_GetTick>
 8002f60:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fd fbc2 	bl	80006ec <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e09e      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f76:	4b51      	ldr	r3, [pc, #324]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f82:	4b4e      	ldr	r3, [pc, #312]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f86:	4b4e      	ldr	r3, [pc, #312]	; (80030c0 <HAL_RCC_OscConfig+0x768>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f92:	0112      	lsls	r2, r2, #4
 8002f94:	430a      	orrs	r2, r1
 8002f96:	4949      	ldr	r1, [pc, #292]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	628b      	str	r3, [r1, #40]	; 0x28
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002faa:	3b01      	subs	r3, #1
 8002fac:	025b      	lsls	r3, r3, #9
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fcc:	493b      	ldr	r1, [pc, #236]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fd2:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	4a39      	ldr	r2, [pc, #228]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe2:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_RCC_OscConfig+0x76c>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fea:	00d2      	lsls	r2, r2, #3
 8002fec:	4933      	ldr	r1, [pc, #204]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ff2:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	f023 020c 	bic.w	r2, r3, #12
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	492f      	ldr	r1, [pc, #188]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8003000:	4313      	orrs	r3, r2
 8003002:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003004:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	f023 0202 	bic.w	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	492a      	ldr	r1, [pc, #168]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8003012:	4313      	orrs	r3, r2
 8003014:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003016:	4b29      	ldr	r3, [pc, #164]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	4a28      	ldr	r2, [pc, #160]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003022:	4b26      	ldr	r3, [pc, #152]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	4a25      	ldr	r2, [pc, #148]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8003028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800302e:	4b23      	ldr	r3, [pc, #140]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	4a22      	ldr	r2, [pc, #136]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8003034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 800304c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fd fb4b 	bl	80006ec <HAL_GetTick>
 8003056:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305a:	f7fd fb47 	bl	80006ec <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e023      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800306c:	4b13      	ldr	r3, [pc, #76]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x702>
 8003078:	e01b      	b.n	80030b2 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a0f      	ldr	r2, [pc, #60]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 8003080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fd fb31 	bl	80006ec <HAL_GetTick>
 800308a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308e:	f7fd fb2d 	bl	80006ec <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e009      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_OscConfig+0x764>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x736>
 80030ac:	e001      	b.n	80030b2 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3728      	adds	r7, #40	; 0x28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	58024400 	.word	0x58024400
 80030c0:	fffffc0c 	.word	0xfffffc0c
 80030c4:	ffff0007 	.word	0xffff0007

080030c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e18b      	b.n	80033f4 <HAL_RCC_ClockConfig+0x32c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b8a      	ldr	r3, [pc, #552]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b87      	ldr	r3, [pc, #540]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 020f 	bic.w	r2, r3, #15
 80030f2:	4985      	ldr	r1, [pc, #532]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b83      	ldr	r3, [pc, #524]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e173      	b.n	80033f4 <HAL_RCC_ClockConfig+0x32c>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	4b7b      	ldr	r3, [pc, #492]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003124:	429a      	cmp	r2, r3
 8003126:	d908      	bls.n	800313a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003128:	4b78      	ldr	r3, [pc, #480]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	4975      	ldr	r1, [pc, #468]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003136:	4313      	orrs	r3, r2
 8003138:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d010      	beq.n	8003168 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	4b70      	ldr	r3, [pc, #448]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003152:	429a      	cmp	r2, r3
 8003154:	d908      	bls.n	8003168 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003156:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	496a      	ldr	r1, [pc, #424]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003164:	4313      	orrs	r3, r2
 8003166:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b00      	cmp	r3, #0
 8003172:	d010      	beq.n	8003196 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	4b64      	ldr	r3, [pc, #400]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003180:	429a      	cmp	r2, r3
 8003182:	d908      	bls.n	8003196 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003184:	4b61      	ldr	r3, [pc, #388]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	495e      	ldr	r1, [pc, #376]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003192:	4313      	orrs	r3, r2
 8003194:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d908      	bls.n	80031c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031b2:	4b56      	ldr	r3, [pc, #344]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4953      	ldr	r1, [pc, #332]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	4b4d      	ldr	r3, [pc, #308]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	429a      	cmp	r2, r3
 80031de:	d908      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e0:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f023 020f 	bic.w	r2, r3, #15
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4947      	ldr	r1, [pc, #284]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d055      	beq.n	80032aa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031fe:	4b43      	ldr	r3, [pc, #268]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4940      	ldr	r1, [pc, #256]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800320c:	4313      	orrs	r3, r2
 800320e:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d107      	bne.n	8003228 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003218:	4b3c      	ldr	r3, [pc, #240]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d121      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0e5      	b.n	80033f4 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d107      	bne.n	8003240 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003230:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d115      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0d9      	b.n	80033f4 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003248:	4b30      	ldr	r3, [pc, #192]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0cd      	b.n	80033f4 <HAL_RCC_ClockConfig+0x32c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003258:	4b2c      	ldr	r3, [pc, #176]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0c5      	b.n	80033f4 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003268:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f023 0207 	bic.w	r2, r3, #7
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4925      	ldr	r1, [pc, #148]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003276:	4313      	orrs	r3, r2
 8003278:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7fd fa37 	bl	80006ec <HAL_GetTick>
 800327e:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003280:	e00a      	b.n	8003298 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003282:	f7fd fa33 	bl	80006ec <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0ad      	b.n	80033f4 <HAL_RCC_ClockConfig+0x32c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d1eb      	bne.n	8003282 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d208      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f023 020f 	bic.w	r2, r3, #15
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	490e      	ldr	r1, [pc, #56]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d214      	bcs.n	8003310 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 020f 	bic.w	r2, r3, #15
 80032ee:	4906      	ldr	r1, [pc, #24]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b04      	ldr	r3, [pc, #16]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e075      	b.n	80033f4 <HAL_RCC_ClockConfig+0x32c>
 8003308:	52002000 	.word	0x52002000
 800330c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003328:	429a      	cmp	r2, r3
 800332a:	d208      	bcs.n	800333e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800332c:	4b33      	ldr	r3, [pc, #204]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	4930      	ldr	r1, [pc, #192]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 800333a:	4313      	orrs	r3, r2
 800333c:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d010      	beq.n	800336c <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003356:	429a      	cmp	r2, r3
 8003358:	d208      	bcs.n	800336c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800335a:	4b28      	ldr	r3, [pc, #160]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	4925      	ldr	r1, [pc, #148]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 8003368:	4313      	orrs	r3, r2
 800336a:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	d010      	beq.n	800339a <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	4b1f      	ldr	r3, [pc, #124]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003384:	429a      	cmp	r2, r3
 8003386:	d208      	bcs.n	800339a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003388:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4919      	ldr	r1, [pc, #100]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 8003396:	4313      	orrs	r3, r2
 8003398:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d010      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d208      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	490e      	ldr	r1, [pc, #56]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033c8:	f000 f81e 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 80033cc:	4601      	mov	r1, r0
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_ClockConfig+0x334>)
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	4a09      	ldr	r2, [pc, #36]	; (8003400 <HAL_RCC_ClockConfig+0x338>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	fa21 f303 	lsr.w	r3, r1, r3
 80033e4:	4a07      	ldr	r2, [pc, #28]	; (8003404 <HAL_RCC_ClockConfig+0x33c>)
 80033e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 80033e8:	2000      	movs	r0, #0
 80033ea:	f7fd f935 	bl	8000658 <HAL_InitTick>
 80033ee:	4603      	mov	r3, r0
 80033f0:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80033f2:	7afb      	ldrb	r3, [r7, #11]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	58024400 	.word	0x58024400
 8003400:	0800cd7c 	.word	0x0800cd7c
 8003404:	24000008 	.word	0x24000008

08003408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800340e:	4baf      	ldr	r3, [pc, #700]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003416:	2b18      	cmp	r3, #24
 8003418:	f200 814e 	bhi.w	80036b8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800341c:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <HAL_RCC_GetSysClockFreq+0x1c>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003489 	.word	0x08003489
 8003428:	080036b9 	.word	0x080036b9
 800342c:	080036b9 	.word	0x080036b9
 8003430:	080036b9 	.word	0x080036b9
 8003434:	080036b9 	.word	0x080036b9
 8003438:	080036b9 	.word	0x080036b9
 800343c:	080036b9 	.word	0x080036b9
 8003440:	080036b9 	.word	0x080036b9
 8003444:	080034af 	.word	0x080034af
 8003448:	080036b9 	.word	0x080036b9
 800344c:	080036b9 	.word	0x080036b9
 8003450:	080036b9 	.word	0x080036b9
 8003454:	080036b9 	.word	0x080036b9
 8003458:	080036b9 	.word	0x080036b9
 800345c:	080036b9 	.word	0x080036b9
 8003460:	080036b9 	.word	0x080036b9
 8003464:	080034b5 	.word	0x080034b5
 8003468:	080036b9 	.word	0x080036b9
 800346c:	080036b9 	.word	0x080036b9
 8003470:	080036b9 	.word	0x080036b9
 8003474:	080036b9 	.word	0x080036b9
 8003478:	080036b9 	.word	0x080036b9
 800347c:	080036b9 	.word	0x080036b9
 8003480:	080036b9 	.word	0x080036b9
 8003484:	080034bb 	.word	0x080034bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003488:	4b90      	ldr	r3, [pc, #576]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003494:	4b8d      	ldr	r3, [pc, #564]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	08db      	lsrs	r3, r3, #3
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	4a8c      	ldr	r2, [pc, #560]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
 80034a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80034a6:	e10a      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034a8:	4b89      	ldr	r3, [pc, #548]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80034aa:	61bb      	str	r3, [r7, #24]
    break;
 80034ac:	e107      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034ae:	4b89      	ldr	r3, [pc, #548]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80034b0:	61bb      	str	r3, [r7, #24]
    break;
 80034b2:	e104      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80034b4:	4b88      	ldr	r3, [pc, #544]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80034b6:	61bb      	str	r3, [r7, #24]
    break;
 80034b8:	e101      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034ba:	4b84      	ldr	r3, [pc, #528]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034c4:	4b81      	ldr	r3, [pc, #516]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034d0:	4b7e      	ldr	r3, [pc, #504]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034da:	4b7c      	ldr	r3, [pc, #496]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034de:	08db      	lsrs	r3, r3, #3
 80034e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80da 	beq.w	80036b2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d05a      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x1b2>
 8003504:	2b01      	cmp	r3, #1
 8003506:	d302      	bcc.n	800350e <HAL_RCC_GetSysClockFreq+0x106>
 8003508:	2b02      	cmp	r3, #2
 800350a:	d078      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x1f6>
 800350c:	e099      	b.n	8003642 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800350e:	4b6f      	ldr	r3, [pc, #444]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02d      	beq.n	8003576 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800351a:	4b6c      	ldr	r3, [pc, #432]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	08db      	lsrs	r3, r3, #3
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	4a6a      	ldr	r2, [pc, #424]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003544:	4b61      	ldr	r3, [pc, #388]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354c:	ee07 3a90 	vmov	s15, r3
 8003550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003554:	ed97 6a02 	vldr	s12, [r7, #8]
 8003558:	eddf 5a60 	vldr	s11, [pc, #384]	; 80036dc <HAL_RCC_GetSysClockFreq+0x2d4>
 800355c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800356c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003570:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003574:	e087      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	ee07 3a90 	vmov	s15, r3
 800357c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003580:	eddf 6a57 	vldr	s13, [pc, #348]	; 80036e0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003590:	ee07 3a90 	vmov	s15, r3
 8003594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003598:	ed97 6a02 	vldr	s12, [r7, #8]
 800359c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80036dc <HAL_RCC_GetSysClockFreq+0x2d4>
 80035a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035b8:	e065      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	ee07 3a90 	vmov	s15, r3
 80035c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c4:	eddf 6a47 	vldr	s13, [pc, #284]	; 80036e4 <HAL_RCC_GetSysClockFreq+0x2dc>
 80035c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035cc:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80035e0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80036dc <HAL_RCC_GetSysClockFreq+0x2d4>
 80035e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035fc:	e043      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	ee07 3a90 	vmov	s15, r3
 8003604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003608:	eddf 6a37 	vldr	s13, [pc, #220]	; 80036e8 <HAL_RCC_GetSysClockFreq+0x2e0>
 800360c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003610:	4b2e      	ldr	r3, [pc, #184]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003620:	ed97 6a02 	vldr	s12, [r7, #8]
 8003624:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80036dc <HAL_RCC_GetSysClockFreq+0x2d4>
 8003628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003630:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003640:	e021      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	ee07 3a90 	vmov	s15, r3
 8003648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80036e4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003654:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003664:	ed97 6a02 	vldr	s12, [r7, #8]
 8003668:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80036dc <HAL_RCC_GetSysClockFreq+0x2d4>
 800366c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003680:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003684:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	0a5b      	lsrs	r3, r3, #9
 800368c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003690:	3301      	adds	r3, #1
 8003692:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800369e:	edd7 6a07 	vldr	s13, [r7, #28]
 80036a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036aa:	ee17 3a90 	vmov	r3, s15
 80036ae:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80036b0:	e005      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
    break;
 80036b6:	e002      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80036ba:	61bb      	str	r3, [r7, #24]
    break;
 80036bc:	bf00      	nop
  }

  return sysclockfreq;
 80036be:	69bb      	ldr	r3, [r7, #24]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3724      	adds	r7, #36	; 0x24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	58024400 	.word	0x58024400
 80036d0:	03d09000 	.word	0x03d09000
 80036d4:	003d0900 	.word	0x003d0900
 80036d8:	007a1200 	.word	0x007a1200
 80036dc:	46000000 	.word	0x46000000
 80036e0:	4c742400 	.word	0x4c742400
 80036e4:	4a742400 	.word	0x4a742400
 80036e8:	4af42400 	.word	0x4af42400

080036ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036f0:	f001 fd40 	bl	8005174 <HAL_RCCEx_GetD1SysClockFreq>
 80036f4:	4601      	mov	r1, r0
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_RCC_GetHCLKFreq+0x2c>)
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	4a07      	ldr	r2, [pc, #28]	; (800371c <HAL_RCC_GetHCLKFreq+0x30>)
 8003700:	5cd3      	ldrb	r3, [r2, r3]
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	fa21 f303 	lsr.w	r3, r1, r3
 800370a:	4a05      	ldr	r2, [pc, #20]	; (8003720 <HAL_RCC_GetHCLKFreq+0x34>)
 800370c:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <HAL_RCC_GetHCLKFreq+0x34>)
 8003710:	681b      	ldr	r3, [r3, #0]
}
 8003712:	4618      	mov	r0, r3
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	58024400 	.word	0x58024400
 800371c:	0800cd7c 	.word	0x0800cd7c
 8003720:	2400000c 	.word	0x2400000c

08003724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003728:	f7ff ffe0 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800372c:	4601      	mov	r1, r0
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	4a04      	ldr	r2, [pc, #16]	; (800374c <HAL_RCC_GetPCLK1Freq+0x28>)
 800373a:	5cd3      	ldrb	r3, [r2, r3]
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	bd80      	pop	{r7, pc}
 8003748:	58024400 	.word	0x58024400
 800374c:	0800cd7c 	.word	0x0800cd7c

08003750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003754:	f7ff ffca 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003758:	4601      	mov	r1, r0
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_GetPCLK2Freq+0x24>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	4a04      	ldr	r2, [pc, #16]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003766:	5cd3      	ldrb	r3, [r2, r3]
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	58024400 	.word	0x58024400
 8003778:	0800cd7c 	.word	0x0800cd7c

0800377c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003784:	2300      	movs	r3, #0
 8003786:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003788:	2300      	movs	r3, #0
 800378a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d03d      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800379c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a0:	d013      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80037a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a6:	d802      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x32>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80037ac:	e01f      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x72>
 80037ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037b2:	d013      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80037b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037b8:	d01c      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80037ba:	e018      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037bc:	4baf      	ldr	r3, [pc, #700]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	4aae      	ldr	r2, [pc, #696]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037c8:	e015      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2102      	movs	r1, #2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 fceb 	bl	80051ac <RCCEx_PLL2_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037da:	e00c      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3324      	adds	r3, #36	; 0x24
 80037e0:	2102      	movs	r1, #2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 fd94 	bl	8005310 <RCCEx_PLL3_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
      break;
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80037f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d109      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037fc:	4b9f      	ldr	r3, [pc, #636]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003808:	499c      	ldr	r1, [pc, #624]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800380a:	4313      	orrs	r3, r2
 800380c:	650b      	str	r3, [r1, #80]	; 0x50
 800380e:	e001      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d03d      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003824:	2b04      	cmp	r3, #4
 8003826:	d826      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003845 	.word	0x08003845
 8003834:	08003853 	.word	0x08003853
 8003838:	08003865 	.word	0x08003865
 800383c:	0800387d 	.word	0x0800387d
 8003840:	0800387d 	.word	0x0800387d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003844:	4b8d      	ldr	r3, [pc, #564]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	4a8c      	ldr	r2, [pc, #560]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800384a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003850:	e015      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fca7 	bl	80051ac <RCCEx_PLL2_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003862:	e00c      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3324      	adds	r3, #36	; 0x24
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f001 fd50 	bl	8005310 <RCCEx_PLL3_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003874:	e003      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	75fb      	strb	r3, [r7, #23]
      break;
 800387a:	e000      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800387c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800387e:	7dfb      	ldrb	r3, [r7, #23]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003884:	4b7d      	ldr	r3, [pc, #500]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	f023 0207 	bic.w	r2, r3, #7
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003890:	497a      	ldr	r1, [pc, #488]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003892:	4313      	orrs	r3, r2
 8003894:	650b      	str	r3, [r1, #80]	; 0x50
 8003896:	e001      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d03e      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	2b80      	cmp	r3, #128	; 0x80
 80038ae:	d01c      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80038b0:	2b80      	cmp	r3, #128	; 0x80
 80038b2:	d804      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x142>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d00d      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80038bc:	e01e      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80038be:	2bc0      	cmp	r3, #192	; 0xc0
 80038c0:	d01f      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80038c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c6:	d01e      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80038c8:	e018      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ca:	4b6c      	ldr	r3, [pc, #432]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	4a6b      	ldr	r2, [pc, #428]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038d6:	e017      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 fc64 	bl	80051ac <RCCEx_PLL2_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038e8:	e00e      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3324      	adds	r3, #36	; 0x24
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f001 fd0d 	bl	8005310 <RCCEx_PLL3_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038fa:	e005      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003900:	e002      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003902:	bf00      	nop
 8003904:	e000      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800390e:	4b5b      	ldr	r3, [pc, #364]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003912:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	4958      	ldr	r1, [pc, #352]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800391c:	4313      	orrs	r3, r2
 800391e:	650b      	str	r3, [r1, #80]	; 0x50
 8003920:	e001      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	2b00      	cmp	r3, #0
 8003930:	d044      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393c:	d01f      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003942:	d805      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800394c:	d00e      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800394e:	e01f      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003950:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003954:	d01f      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003956:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800395a:	d01e      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800395c:	e018      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	4a46      	ldr	r2, [pc, #280]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003968:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800396a:	e017      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f001 fc1a 	bl	80051ac <RCCEx_PLL2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800397c:	e00e      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3324      	adds	r3, #36	; 0x24
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f001 fcc3 	bl	8005310 <RCCEx_PLL3_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800398e:	e005      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
      break;
 8003994:	e002      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800399a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039a2:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039b0:	4932      	ldr	r1, [pc, #200]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	658b      	str	r3, [r1, #88]	; 0x58
 80039b6:	e001      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
 80039ba:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d044      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d2:	d01f      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80039d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d8:	d805      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80039de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e2:	d00e      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80039e4:	e01f      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80039e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039ea:	d01f      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039f0:	d01e      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039f2:	e018      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f4:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	4a20      	ldr	r2, [pc, #128]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a00:	e017      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 fbcf 	bl	80051ac <RCCEx_PLL2_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a12:	e00e      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3324      	adds	r3, #36	; 0x24
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f001 fc78 	bl	8005310 <RCCEx_PLL3_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a24:	e005      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2a:	e002      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003a2c:	bf00      	nop
 8003a2e:	e000      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10a      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a38:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a46:	490d      	ldr	r1, [pc, #52]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	658b      	str	r3, [r1, #88]	; 0x58
 8003a4c:	e001      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d035      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d00c      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d802      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01b      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003a6e:	e017      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d00c      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003a74:	2b30      	cmp	r3, #48	; 0x30
 8003a76:	d018      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003a78:	e012      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003a7a:	bf00      	nop
 8003a7c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a80:	4baf      	ldr	r3, [pc, #700]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	4aae      	ldr	r2, [pc, #696]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a8c:	e00e      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2102      	movs	r1, #2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fb89 	bl	80051ac <RCCEx_PLL2_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a9e:	e005      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa4:	e002      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ab2:	4ba3      	ldr	r3, [pc, #652]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abe:	49a0      	ldr	r1, [pc, #640]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ac4:	e001      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d042      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ade:	d01f      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae4:	d805      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aee:	d00e      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003af0:	e01f      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003af2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003af6:	d01f      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003afc:	d01e      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003afe:	e018      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b00:	4b8f      	ldr	r3, [pc, #572]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	4a8e      	ldr	r2, [pc, #568]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b0c:	e017      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fb49 	bl	80051ac <RCCEx_PLL2_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b1e:	e00e      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3324      	adds	r3, #36	; 0x24
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 fbf2 	bl	8005310 <RCCEx_PLL3_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b30:	e005      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
      break;
 8003b36:	e002      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003b38:	bf00      	nop
 8003b3a:	e000      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d109      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b44:	4b7e      	ldr	r3, [pc, #504]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b48:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b50:	497b      	ldr	r1, [pc, #492]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	650b      	str	r3, [r1, #80]	; 0x50
 8003b56:	e001      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d042      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b70:	d01b      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b76:	d805      	bhi.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d022      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b82:	e01b      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003b84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b88:	d01d      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003b8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b8e:	d01c      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003b90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b94:	d01b      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003b96:	e011      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 fb04 	bl	80051ac <RCCEx_PLL2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ba8:	e012      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3324      	adds	r3, #36	; 0x24
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 fbad 	bl	8005310 <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bba:	e009      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc0:	e006      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e004      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bd6:	4b5a      	ldr	r3, [pc, #360]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bda:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be2:	4957      	ldr	r1, [pc, #348]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	650b      	str	r3, [r1, #80]	; 0x50
 8003be8:	e001      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d044      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c04:	d01b      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c0a:	d805      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d022      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003c16:	e01b      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1c:	d01d      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c22:	d01c      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003c24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c28:	d01b      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003c2a:	e011      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	2101      	movs	r1, #1
 8003c32:	4618      	mov	r0, r3
 8003c34:	f001 faba 	bl	80051ac <RCCEx_PLL2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c3c:	e012      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3324      	adds	r3, #36	; 0x24
 8003c42:	2101      	movs	r1, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 fb63 	bl	8005310 <RCCEx_PLL3_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c4e:	e009      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	75fb      	strb	r3, [r7, #23]
      break;
 8003c54:	e006      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c56:	bf00      	nop
 8003c58:	e004      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e002      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c6a:	4b35      	ldr	r3, [pc, #212]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c78:	4931      	ldr	r1, [pc, #196]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c7e:	e001      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02d      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c98:	d005      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9e:	d009      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d013      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003ca4:	e00f      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	4a25      	ldr	r2, [pc, #148]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cb2:	e00c      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 fa76 	bl	80051ac <RCCEx_PLL2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce0:	4917      	ldr	r1, [pc, #92]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ce6:	e001      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d035      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d81b      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d45 	.word	0x08003d45
 8003d0c:	08003d19 	.word	0x08003d19
 8003d10:	08003d27 	.word	0x08003d27
 8003d14:	08003d45 	.word	0x08003d45
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d24:	e00f      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 fa3d 	bl	80051ac <RCCEx_PLL2_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d36:	e006      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3c:	e003      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003d3e:	bf00      	nop
 8003d40:	58024400 	.word	0x58024400
      break;
 8003d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d4c:	4bba      	ldr	r3, [pc, #744]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d50:	f023 0203 	bic.w	r2, r3, #3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	49b7      	ldr	r1, [pc, #732]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d5e:	e001      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8086 	beq.w	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d72:	4bb2      	ldr	r3, [pc, #712]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4ab1      	ldr	r2, [pc, #708]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d7e:	f7fc fcb5 	bl	80006ec <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d84:	e009      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d86:	f7fc fcb1 	bl	80006ec <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b64      	cmp	r3, #100	; 0x64
 8003d92:	d902      	bls.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	75fb      	strb	r3, [r7, #23]
        break;
 8003d98:	e005      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d9a:	4ba8      	ldr	r3, [pc, #672]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0ef      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d166      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003dac:	4ba2      	ldr	r3, [pc, #648]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003db6:	4053      	eors	r3, r2
 8003db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dc0:	4b9d      	ldr	r3, [pc, #628]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dca:	4b9b      	ldr	r3, [pc, #620]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	4a9a      	ldr	r2, [pc, #616]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd6:	4b98      	ldr	r3, [pc, #608]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	4a97      	ldr	r2, [pc, #604]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003de2:	4a95      	ldr	r2, [pc, #596]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df2:	d115      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fc fc7a 	bl	80006ec <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfc:	f7fc fc76 	bl	80006ec <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d902      	bls.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	75fb      	strb	r3, [r7, #23]
            break;
 8003e12:	e005      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e14:	4b88      	ldr	r3, [pc, #544]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ed      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d126      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e34:	d10d      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003e36:	4b80      	ldr	r3, [pc, #512]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e44:	0919      	lsrs	r1, r3, #4
 8003e46:	4b7e      	ldr	r3, [pc, #504]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003e48:	400b      	ands	r3, r1
 8003e4a:	497b      	ldr	r1, [pc, #492]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	610b      	str	r3, [r1, #16]
 8003e50:	e005      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003e52:	4b79      	ldr	r3, [pc, #484]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	4a78      	ldr	r2, [pc, #480]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e5c:	6113      	str	r3, [r2, #16]
 8003e5e:	4b76      	ldr	r3, [pc, #472]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6c:	4972      	ldr	r1, [pc, #456]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	670b      	str	r3, [r1, #112]	; 0x70
 8003e72:	e004      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	75bb      	strb	r3, [r7, #22]
 8003e78:	e001      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d07d      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8e:	2b28      	cmp	r3, #40	; 0x28
 8003e90:	d866      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003f67 	.word	0x08003f67
 8003e9c:	08003f61 	.word	0x08003f61
 8003ea0:	08003f61 	.word	0x08003f61
 8003ea4:	08003f61 	.word	0x08003f61
 8003ea8:	08003f61 	.word	0x08003f61
 8003eac:	08003f61 	.word	0x08003f61
 8003eb0:	08003f61 	.word	0x08003f61
 8003eb4:	08003f61 	.word	0x08003f61
 8003eb8:	08003f3d 	.word	0x08003f3d
 8003ebc:	08003f61 	.word	0x08003f61
 8003ec0:	08003f61 	.word	0x08003f61
 8003ec4:	08003f61 	.word	0x08003f61
 8003ec8:	08003f61 	.word	0x08003f61
 8003ecc:	08003f61 	.word	0x08003f61
 8003ed0:	08003f61 	.word	0x08003f61
 8003ed4:	08003f61 	.word	0x08003f61
 8003ed8:	08003f4f 	.word	0x08003f4f
 8003edc:	08003f61 	.word	0x08003f61
 8003ee0:	08003f61 	.word	0x08003f61
 8003ee4:	08003f61 	.word	0x08003f61
 8003ee8:	08003f61 	.word	0x08003f61
 8003eec:	08003f61 	.word	0x08003f61
 8003ef0:	08003f61 	.word	0x08003f61
 8003ef4:	08003f61 	.word	0x08003f61
 8003ef8:	08003f67 	.word	0x08003f67
 8003efc:	08003f61 	.word	0x08003f61
 8003f00:	08003f61 	.word	0x08003f61
 8003f04:	08003f61 	.word	0x08003f61
 8003f08:	08003f61 	.word	0x08003f61
 8003f0c:	08003f61 	.word	0x08003f61
 8003f10:	08003f61 	.word	0x08003f61
 8003f14:	08003f61 	.word	0x08003f61
 8003f18:	08003f67 	.word	0x08003f67
 8003f1c:	08003f61 	.word	0x08003f61
 8003f20:	08003f61 	.word	0x08003f61
 8003f24:	08003f61 	.word	0x08003f61
 8003f28:	08003f61 	.word	0x08003f61
 8003f2c:	08003f61 	.word	0x08003f61
 8003f30:	08003f61 	.word	0x08003f61
 8003f34:	08003f61 	.word	0x08003f61
 8003f38:	08003f67 	.word	0x08003f67
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	2101      	movs	r1, #1
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 f932 	bl	80051ac <RCCEx_PLL2_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f4c:	e00c      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3324      	adds	r3, #36	; 0x24
 8003f52:	2101      	movs	r1, #1
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 f9db 	bl	8005310 <RCCEx_PLL3_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f5e:	e003      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	75fb      	strb	r3, [r7, #23]
      break;
 8003f64:	e000      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f6e:	4b32      	ldr	r3, [pc, #200]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7a:	492f      	ldr	r1, [pc, #188]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	654b      	str	r3, [r1, #84]	; 0x54
 8003f80:	e001      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f82:	7dfb      	ldrb	r3, [r7, #23]
 8003f84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d037      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d820      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003f9a:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fe3 	.word	0x08003fe3
 8003fa4:	08003fb9 	.word	0x08003fb9
 8003fa8:	08003fcb 	.word	0x08003fcb
 8003fac:	08003fe3 	.word	0x08003fe3
 8003fb0:	08003fe3 	.word	0x08003fe3
 8003fb4:	08003fe3 	.word	0x08003fe3
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 f8f4 	bl	80051ac <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fc8:	e00c      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3324      	adds	r3, #36	; 0x24
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 f99d 	bl	8005310 <RCCEx_PLL3_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fda:	e003      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe0:	e000      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f023 0207 	bic.w	r2, r3, #7
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff6:	4910      	ldr	r1, [pc, #64]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	654b      	str	r3, [r1, #84]	; 0x54
 8003ffc:	e001      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
 8004000:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d040      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	2b05      	cmp	r3, #5
 8004016:	d827      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	0800406f 	.word	0x0800406f
 8004024:	08004045 	.word	0x08004045
 8004028:	08004057 	.word	0x08004057
 800402c:	0800406f 	.word	0x0800406f
 8004030:	0800406f 	.word	0x0800406f
 8004034:	0800406f 	.word	0x0800406f
 8004038:	58024400 	.word	0x58024400
 800403c:	58024800 	.word	0x58024800
 8004040:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	2101      	movs	r1, #1
 800404a:	4618      	mov	r0, r3
 800404c:	f001 f8ae 	bl	80051ac <RCCEx_PLL2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004054:	e00c      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3324      	adds	r3, #36	; 0x24
 800405a:	2101      	movs	r1, #1
 800405c:	4618      	mov	r0, r3
 800405e:	f001 f957 	bl	8005310 <RCCEx_PLL3_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004066:	e003      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	75fb      	strb	r3, [r7, #23]
      break;
 800406c:	e000      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800406e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004076:	4bb3      	ldr	r3, [pc, #716]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407a:	f023 0207 	bic.w	r2, r3, #7
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004084:	49af      	ldr	r1, [pc, #700]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004086:	4313      	orrs	r3, r2
 8004088:	658b      	str	r3, [r1, #88]	; 0x58
 800408a:	e001      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d044      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a6:	d01b      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80040a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ac:	d805      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d022      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80040b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x952>
 80040b8:	e01b      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040be:	d01d      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x980>
 80040c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c4:	d01c      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80040c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040ca:	d01b      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80040cc:	e011      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 f869 	bl	80051ac <RCCEx_PLL2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040de:	e012      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3324      	adds	r3, #36	; 0x24
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 f912 	bl	8005310 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040f0:	e009      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
      break;
 80040f6:	e006      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80040f8:	bf00      	nop
 80040fa:	e004      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80040fc:	bf00      	nop
 80040fe:	e002      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004100:	bf00      	nop
 8004102:	e000      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800410c:	4b8d      	ldr	r3, [pc, #564]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004110:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411a:	498a      	ldr	r1, [pc, #552]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800411c:	4313      	orrs	r3, r2
 800411e:	654b      	str	r3, [r1, #84]	; 0x54
 8004120:	e001      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d044      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800413c:	d01b      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800413e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004142:	d805      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004144:	2b00      	cmp	r3, #0
 8004146:	d022      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800414e:	e01b      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	d01d      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004156:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800415a:	d01c      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800415c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004160:	d01b      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004162:	e011      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f001 f81e 	bl	80051ac <RCCEx_PLL2_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004174:	e012      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3324      	adds	r3, #36	; 0x24
 800417a:	2102      	movs	r1, #2
 800417c:	4618      	mov	r0, r3
 800417e:	f001 f8c7 	bl	8005310 <RCCEx_PLL3_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004186:	e009      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	75fb      	strb	r3, [r7, #23]
      break;
 800418c:	e006      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800418e:	bf00      	nop
 8004190:	e004      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004192:	bf00      	nop
 8004194:	e002      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800419a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041a2:	4b68      	ldr	r3, [pc, #416]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041b0:	4964      	ldr	r1, [pc, #400]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	658b      	str	r3, [r1, #88]	; 0x58
 80041b6:	e001      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
 80041ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d044      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d2:	d01b      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80041d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d8:	d805      	bhi.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d022      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80041e4:	e01b      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80041e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ea:	d01d      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80041ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041f0:	d01c      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80041f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041f6:	d01b      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80041f8:	e011      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f000 ffd3 	bl	80051ac <RCCEx_PLL2_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800420a:	e012      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3324      	adds	r3, #36	; 0x24
 8004210:	2102      	movs	r1, #2
 8004212:	4618      	mov	r0, r3
 8004214:	f001 f87c 	bl	8005310 <RCCEx_PLL3_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800421c:	e009      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	75fb      	strb	r3, [r7, #23]
      break;
 8004222:	e006      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004224:	bf00      	nop
 8004226:	e004      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004228:	bf00      	nop
 800422a:	e002      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800422c:	bf00      	nop
 800422e:	e000      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004238:	4b42      	ldr	r3, [pc, #264]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004246:	493f      	ldr	r1, [pc, #252]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004248:	4313      	orrs	r3, r2
 800424a:	658b      	str	r3, [r1, #88]	; 0x58
 800424c:	e001      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	7dfb      	ldrb	r3, [r7, #23]
 8004250:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01b      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004268:	d10b      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3324      	adds	r3, #36	; 0x24
 800426e:	2102      	movs	r1, #2
 8004270:	4618      	mov	r0, r3
 8004272:	f001 f84d 	bl	8005310 <RCCEx_PLL3_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00c      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75bb      	strb	r3, [r7, #22]
 8004280:	e009      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004282:	4b30      	ldr	r3, [pc, #192]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004286:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004290:	492c      	ldr	r1, [pc, #176]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004292:	4313      	orrs	r3, r2
 8004294:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01b      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ac:	d10b      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3324      	adds	r3, #36	; 0x24
 80042b2:	2102      	movs	r1, #2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 f82b 	bl	8005310 <RCCEx_PLL3_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	75bb      	strb	r3, [r7, #22]
 80042c4:	e009      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042c6:	4b1f      	ldr	r3, [pc, #124]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d4:	491b      	ldr	r1, [pc, #108]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d032      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d00d      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80042f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f6:	d016      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d111      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f000 ff52 	bl	80051ac <RCCEx_PLL2_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800430c:	e00c      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3324      	adds	r3, #36	; 0x24
 8004312:	2102      	movs	r1, #2
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fffb 	bl	8005310 <RCCEx_PLL3_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800431e:	e003      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8004326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800433c:	4901      	ldr	r1, [pc, #4]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	658b      	str	r3, [r1, #88]	; 0x58
 8004342:	e003      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8004344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02f      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800435e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004362:	d00c      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004368:	d015      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800436a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436e:	d10f      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004370:	4b79      	ldr	r3, [pc, #484]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	4a78      	ldr	r2, [pc, #480]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800437c:	e00c      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3324      	adds	r3, #36	; 0x24
 8004382:	2101      	movs	r1, #1
 8004384:	4618      	mov	r0, r3
 8004386:	f000 ffc3 	bl	8005310 <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800438e:	e003      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	75fb      	strb	r3, [r7, #23]
      break;
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8004396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800439e:	4b6e      	ldr	r3, [pc, #440]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ac:	496a      	ldr	r1, [pc, #424]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	654b      	str	r3, [r1, #84]	; 0x54
 80043b2:	e001      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d029      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d007      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80043d2:	e00f      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d4:	4b60      	ldr	r3, [pc, #384]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	4a5f      	ldr	r2, [pc, #380]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80043da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043e0:	e00b      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3304      	adds	r3, #4
 80043e6:	2102      	movs	r1, #2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fedf 	bl	80051ac <RCCEx_PLL2_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	75fb      	strb	r3, [r7, #23]
      break;
 80043f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004400:	4b55      	ldr	r3, [pc, #340]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440c:	4952      	ldr	r1, [pc, #328]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004412:	e001      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3324      	adds	r3, #36	; 0x24
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f000 ff70 	bl	8005310 <RCCEx_PLL3_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02f      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444e:	d00c      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004454:	d802      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d011      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800445a:	e00d      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 800445c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004460:	d00f      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004466:	d00e      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8004468:	e006      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446a:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	4a3a      	ldr	r2, [pc, #232]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004476:	e007      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	75fb      	strb	r3, [r7, #23]
      break;
 800447c:	e004      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800448e:	4b32      	ldr	r3, [pc, #200]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800449a:	492f      	ldr	r1, [pc, #188]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800449c:	4313      	orrs	r3, r2
 800449e:	654b      	str	r3, [r1, #84]	; 0x54
 80044a0:	e001      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044b2:	4b29      	ldr	r3, [pc, #164]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4926      	ldr	r1, [pc, #152]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d009      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044d0:	4b21      	ldr	r3, [pc, #132]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044de:	491e      	ldr	r1, [pc, #120]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044f0:	4b19      	ldr	r3, [pc, #100]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80044f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044fc:	4916      	ldr	r1, [pc, #88]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800450e:	4b12      	ldr	r3, [pc, #72]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	4a11      	ldr	r2, [pc, #68]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004518:	6113      	str	r3, [r2, #16]
 800451a:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004524:	490c      	ldr	r1, [pc, #48]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004526:	4313      	orrs	r3, r2
 8004528:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	da08      	bge.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004536:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453e:	4906      	ldr	r1, [pc, #24]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004544:	7dbb      	ldrb	r3, [r7, #22]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	58024400 	.word	0x58024400

0800455c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b090      	sub	sp, #64	; 0x40
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d150      	bne.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800456c:	4ba1      	ldr	r3, [pc, #644]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800456e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	2b04      	cmp	r3, #4
 800457a:	d844      	bhi.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800457c:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	08004599 	.word	0x08004599
 8004588:	080045a9 	.word	0x080045a9
 800458c:	080045b9 	.word	0x080045b9
 8004590:	08004601 	.word	0x08004601
 8004594:	080045c9 	.word	0x080045c9
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fc9d 	bl	8004edc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045a6:	e1dc      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045a8:	f107 0318 	add.w	r3, r7, #24
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 f9fd 	bl	80049ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045b6:	e1d4      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fb41 	bl	8004c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045c6:	e1cc      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80045c8:	4b8a      	ldr	r3, [pc, #552]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80045ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045d0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80045d8:	4b87      	ldr	r3, [pc, #540]	; (80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80045da:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80045dc:	e1c1      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80045de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e4:	d102      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80045e6:	4b85      	ldr	r3, [pc, #532]	; (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045ea:	e1ba      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80045ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045f2:	d102      	bne.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80045f4:	4b82      	ldr	r3, [pc, #520]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045f8:	e1b3      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045fe:	e1b0      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004600:	4b80      	ldr	r3, [pc, #512]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004604:	e1ad      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800460a:	bf00      	nop
 800460c:	e1a9      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004614:	d14f      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004616:	4b77      	ldr	r3, [pc, #476]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800461e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d01c      	beq.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	d804      	bhi.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d00e      	beq.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004632:	e03c      	b.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8004634:	2bc0      	cmp	r3, #192	; 0xc0
 8004636:	d037      	beq.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463c:	d018      	beq.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800463e:	e036      	b.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fc49 	bl	8004edc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800464e:	e188      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004650:	f107 0318 	add.w	r3, r7, #24
 8004654:	4618      	mov	r0, r3
 8004656:	f000 f9a9 	bl	80049ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800465e:	e180      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004660:	f107 030c 	add.w	r3, r7, #12
 8004664:	4618      	mov	r0, r3
 8004666:	f000 faed 	bl	8004c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800466e:	e178      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004670:	4b60      	ldr	r3, [pc, #384]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004678:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467c:	2b00      	cmp	r3, #0
 800467e:	d102      	bne.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004680:	4b5d      	ldr	r3, [pc, #372]	; (80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004682:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004684:	e16d      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004688:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800468c:	d102      	bne.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800468e:	4b5b      	ldr	r3, [pc, #364]	; (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004692:	e166      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800469a:	d102      	bne.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800469c:	4b58      	ldr	r3, [pc, #352]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800469e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046a0:	e15f      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046a6:	e15c      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80046a8:	4b56      	ldr	r3, [pc, #344]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80046aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046ac:	e159      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046b2:	bf00      	nop
 80046b4:	e155      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046bc:	d153      	bne.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80046be:	4b4d      	ldr	r3, [pc, #308]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80046c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ce:	d01f      	beq.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80046d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d4:	d805      	bhi.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80046da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046de:	d00f      	beq.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80046e0:	e03d      	b.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80046e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046e6:	d037      	beq.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80046e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046ec:	d018      	beq.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80046ee:	e036      	b.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fbf1 	bl	8004edc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046fe:	e130      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004700:	f107 0318 	add.w	r3, r7, #24
 8004704:	4618      	mov	r0, r3
 8004706:	f000 f951 	bl	80049ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800470e:	e128      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004710:	f107 030c 	add.w	r3, r7, #12
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fa95 	bl	8004c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800471e:	e120      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004720:	4b34      	ldr	r3, [pc, #208]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004728:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800472a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472c:	2b00      	cmp	r3, #0
 800472e:	d102      	bne.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004730:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004732:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004734:	e115      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800473c:	d102      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800473e:	4b2f      	ldr	r3, [pc, #188]	; (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004740:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004742:	e10e      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800474a:	d102      	bne.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800474c:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800474e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004750:	e107      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004756:	e104      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004758:	4b2a      	ldr	r3, [pc, #168]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800475a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800475c:	e101      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004762:	bf00      	nop
 8004764:	e0fd      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800476c:	d15d      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800476e:	4b21      	ldr	r3, [pc, #132]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004776:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800477e:	d01f      	beq.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004784:	d805      	bhi.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800478a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800478e:	d00f      	beq.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8004790:	e047      	b.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8004792:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004796:	d041      	beq.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8004798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800479c:	d018      	beq.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800479e:	e040      	b.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fb99 	bl	8004edc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047ae:	e0d8      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047b0:	f107 0318 	add.w	r3, r7, #24
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 f8f9 	bl	80049ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047be:	e0d0      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047c0:	f107 030c 	add.w	r3, r7, #12
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fa3d 	bl	8004c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047ce:	e0c8      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80047d0:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80047d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047d8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80047e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80047e4:	e0bd      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ec:	d10c      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80047ee:	4b03      	ldr	r3, [pc, #12]	; (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80047f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047f2:	e0b6      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 80047f4:	58024400 	.word	0x58024400
 80047f8:	03d09000 	.word	0x03d09000
 80047fc:	003d0900 	.word	0x003d0900
 8004800:	007a1200 	.word	0x007a1200
 8004804:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800480e:	d102      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8004810:	4b56      	ldr	r3, [pc, #344]	; (800496c <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004814:	e0a5      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800481a:	e0a2      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800481c:	4b54      	ldr	r3, [pc, #336]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004820:	e09f      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004826:	bf00      	nop
 8004828:	e09b      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	d153      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004832:	4b50      	ldr	r3, [pc, #320]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8004834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004836:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800483a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004842:	d01f      	beq.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004848:	d805      	bhi.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004852:	d00f      	beq.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8004854:	e03d      	b.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8004856:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800485a:	d037      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800485c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004860:	d018      	beq.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004862:	e036      	b.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fb37 	bl	8004edc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004872:	e076      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004874:	f107 0318 	add.w	r3, r7, #24
 8004878:	4618      	mov	r0, r3
 800487a:	f000 f897 	bl	80049ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004882:	e06e      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	4618      	mov	r0, r3
 800488a:	f000 f9db 	bl	8004c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004892:	e066      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004894:	4b37      	ldr	r3, [pc, #220]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8004896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800489c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800489e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80048a4:	4b34      	ldr	r3, [pc, #208]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 80048a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80048a8:	e05b      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80048aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048b0:	d102      	bne.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80048b2:	4b32      	ldr	r3, [pc, #200]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x420>)
 80048b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048b6:	e054      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80048b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048be:	d102      	bne.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80048c0:	4b2a      	ldr	r3, [pc, #168]	; (800496c <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 80048c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048c4:	e04d      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048ca:	e04a      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80048cc:	4b28      	ldr	r3, [pc, #160]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x414>)
 80048ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048d0:	e047      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      default :
        {
          frequency = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048d6:	bf00      	nop
 80048d8:	e043      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048e0:	d13d      	bne.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80048e2:	4b24      	ldr	r3, [pc, #144]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f2:	d00c      	beq.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80048f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048f8:	d011      	beq.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d12b      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048fe:	f107 0318 	add.w	r3, r7, #24
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f852 	bl	80049ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800490c:	e029      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800490e:	f107 030c 	add.w	r3, r7, #12
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f996 	bl	8004c44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800491c:	e021      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x418>)
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004926:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492a:	2b00      	cmp	r3, #0
 800492c:	d102      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800492e:	4b12      	ldr	r3, [pc, #72]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 8004930:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004932:	e016      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800493a:	d102      	bne.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x420>)
 800493e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004940:	e00f      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004948:	d102      	bne.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <HAL_RCCEx_GetPeriphCLKFreq+0x410>)
 800494c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800494e:	e008      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
            frequency = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004954:	e005      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }

      default :
        {
          frequency = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800495a:	bf00      	nop
 800495c:	e001      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
        }
      }
    }
  else
    {
      frequency = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004964:	4618      	mov	r0, r3
 8004966:	3740      	adds	r7, #64	; 0x40
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	007a1200 	.word	0x007a1200
 8004970:	00bb8000 	.word	0x00bb8000
 8004974:	58024400 	.word	0x58024400
 8004978:	03d09000 	.word	0x03d09000
 800497c:	003d0900 	.word	0x003d0900

08004980 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004984:	f7fe feb2 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8004988:	4601      	mov	r1, r0
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	58024400 	.word	0x58024400
 80049a8:	0800cd7c 	.word	0x0800cd7c

080049ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b089      	sub	sp, #36	; 0x24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049b4:	4b9d      	ldr	r3, [pc, #628]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80049be:	4b9b      	ldr	r3, [pc, #620]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	0b1b      	lsrs	r3, r3, #12
 80049c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c8:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80049ca:	4b98      	ldr	r3, [pc, #608]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80049d4:	4b95      	ldr	r3, [pc, #596]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	08db      	lsrs	r3, r3, #3
 80049da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 810a 	beq.w	8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d05a      	beq.n	8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d302      	bcc.n	8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d078      	beq.n	8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004a06:	e099      	b.n	8004b3c <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a08:	4b88      	ldr	r3, [pc, #544]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d02d      	beq.n	8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a14:	4b85      	ldr	r3, [pc, #532]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	08db      	lsrs	r3, r3, #3
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	4a84      	ldr	r2, [pc, #528]	; (8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
 8004a24:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	ee07 3a90 	vmov	s15, r3
 8004a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3e:	4b7b      	ldr	r3, [pc, #492]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c34 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004a6e:	e087      	b.n	8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c38 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a82:	4b6a      	ldr	r3, [pc, #424]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c34 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ab2:	e065      	b.n	8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac6:	4b59      	ldr	r3, [pc, #356]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ada:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c34 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004af6:	e043      	b.n	8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0a:	4b48      	ldr	r3, [pc, #288]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c34 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b3a:	e021      	b.n	8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4e:	4b37      	ldr	r3, [pc, #220]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c34 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004b80:	4b2a      	ldr	r3, [pc, #168]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	0a5b      	lsrs	r3, r3, #9
 8004b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba6:	ee17 2a90 	vmov	r2, s15
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004bae:	4b1f      	ldr	r3, [pc, #124]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	0c1b      	lsrs	r3, r3, #16
 8004bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb8:	ee07 3a90 	vmov	s15, r3
 8004bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd4:	ee17 2a90 	vmov	r2, s15
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004bdc:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	0e1b      	lsrs	r3, r3, #24
 8004be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c02:	ee17 2a90 	vmov	r2, s15
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c0a:	e008      	b.n	8004c1e <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	609a      	str	r2, [r3, #8]
}
 8004c1e:	bf00      	nop
 8004c20:	3724      	adds	r7, #36	; 0x24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	03d09000 	.word	0x03d09000
 8004c34:	46000000 	.word	0x46000000
 8004c38:	4c742400 	.word	0x4c742400
 8004c3c:	4a742400 	.word	0x4a742400
 8004c40:	4af42400 	.word	0x4af42400

08004c44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	; 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c4c:	4b9d      	ldr	r3, [pc, #628]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004c56:	4b9b      	ldr	r3, [pc, #620]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	0d1b      	lsrs	r3, r3, #20
 8004c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c60:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8004c62:	4b98      	ldr	r3, [pc, #608]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6a:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004c6c:	4b95      	ldr	r3, [pc, #596]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c70:	08db      	lsrs	r3, r3, #3
 8004c72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	fb02 f303 	mul.w	r3, r2, r3
 8004c7c:	ee07 3a90 	vmov	s15, r3
 8004c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c84:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 810a 	beq.w	8004ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d05a      	beq.n	8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d302      	bcc.n	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d078      	beq.n	8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004c9e:	e099      	b.n	8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ca0:	4b88      	ldr	r3, [pc, #544]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d02d      	beq.n	8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cac:	4b85      	ldr	r3, [pc, #532]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	08db      	lsrs	r3, r3, #3
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	4a84      	ldr	r2, [pc, #528]	; (8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cbc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd6:	4b7b      	ldr	r3, [pc, #492]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004d06:	e087      	b.n	8004e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1a:	4b6a      	ldr	r3, [pc, #424]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d4a:	e065      	b.n	8004e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5e:	4b59      	ldr	r3, [pc, #356]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d8e:	e043      	b.n	8004e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004da2:	4b48      	ldr	r3, [pc, #288]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dd2:	e021      	b.n	8004e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de6:	4b37      	ldr	r3, [pc, #220]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dfa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004e18:	4b2a      	ldr	r3, [pc, #168]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	0a5b      	lsrs	r3, r3, #9
 8004e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3e:	ee17 2a90 	vmov	r2, s15
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004e46:	4b1f      	ldr	r3, [pc, #124]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	0c1b      	lsrs	r3, r3, #16
 8004e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6c:	ee17 2a90 	vmov	r2, s15
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004e74:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	0e1b      	lsrs	r3, r3, #24
 8004e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e9a:	ee17 2a90 	vmov	r2, s15
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	609a      	str	r2, [r3, #8]
}
 8004eb6:	bf00      	nop
 8004eb8:	3724      	adds	r7, #36	; 0x24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	58024400 	.word	0x58024400
 8004ec8:	03d09000 	.word	0x03d09000
 8004ecc:	46000000 	.word	0x46000000
 8004ed0:	4c742400 	.word	0x4c742400
 8004ed4:	4a742400 	.word	0x4a742400
 8004ed8:	4af42400 	.word	0x4af42400

08004edc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b089      	sub	sp, #36	; 0x24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ee4:	4b9d      	ldr	r3, [pc, #628]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004eee:	4b9b      	ldr	r3, [pc, #620]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	091b      	lsrs	r3, r3, #4
 8004ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004efa:	4b98      	ldr	r3, [pc, #608]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004f04:	4b95      	ldr	r3, [pc, #596]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f08:	08db      	lsrs	r3, r3, #3
 8004f0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	fb02 f303 	mul.w	r3, r2, r3
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 810a 	beq.w	800513c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d05a      	beq.n	8004fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d302      	bcc.n	8004f38 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d078      	beq.n	8005028 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8004f36:	e099      	b.n	800506c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f38:	4b88      	ldr	r3, [pc, #544]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d02d      	beq.n	8004fa0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f44:	4b85      	ldr	r3, [pc, #532]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	08db      	lsrs	r3, r3, #3
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	4a84      	ldr	r2, [pc, #528]	; (8005160 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
 8004f54:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6e:	4b7b      	ldr	r3, [pc, #492]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005164 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f9e:	e087      	b.n	80050b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005168 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8004fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb2:	4b6a      	ldr	r3, [pc, #424]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005164 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8004fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fe2:	e065      	b.n	80050b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800516c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8004ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff6:	4b59      	ldr	r3, [pc, #356]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005006:	ed97 6a03 	vldr	s12, [r7, #12]
 800500a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005164 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800500e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800501a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005022:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005026:	e043      	b.n	80050b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005170 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503a:	4b48      	ldr	r3, [pc, #288]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504a:	ed97 6a03 	vldr	s12, [r7, #12]
 800504e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005164 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800506a:	e021      	b.n	80050b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800516c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800507a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507e:	4b37      	ldr	r3, [pc, #220]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005092:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005164 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050ae:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80050b0:	4b2a      	ldr	r3, [pc, #168]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	0a5b      	lsrs	r3, r3, #9
 80050b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050d6:	ee17 2a90 	vmov	r2, s15
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80050de:	4b1f      	ldr	r3, [pc, #124]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	0c1b      	lsrs	r3, r3, #16
 80050e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e8:	ee07 3a90 	vmov	s15, r3
 80050ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80050fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005104:	ee17 2a90 	vmov	r2, s15
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800510c:	4b13      	ldr	r3, [pc, #76]	; (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005110:	0e1b      	lsrs	r3, r3, #24
 8005112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005122:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005126:	edd7 6a07 	vldr	s13, [r7, #28]
 800512a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800512e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005132:	ee17 2a90 	vmov	r2, s15
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800513a:	e008      	b.n	800514e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	609a      	str	r2, [r3, #8]
}
 800514e:	bf00      	nop
 8005150:	3724      	adds	r7, #36	; 0x24
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	58024400 	.word	0x58024400
 8005160:	03d09000 	.word	0x03d09000
 8005164:	46000000 	.word	0x46000000
 8005168:	4c742400 	.word	0x4c742400
 800516c:	4a742400 	.word	0x4a742400
 8005170:	4af42400 	.word	0x4af42400

08005174 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005178:	f7fe f946 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 800517c:	4601      	mov	r1, r0
 800517e:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	4a06      	ldr	r2, [pc, #24]	; (80051a4 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800518a:	5cd3      	ldrb	r3, [r2, r3]
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	fa21 f303 	lsr.w	r3, r1, r3
 8005194:	4a04      	ldr	r2, [pc, #16]	; (80051a8 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005196:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005198:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800519a:	681b      	ldr	r3, [r3, #0]
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	58024400 	.word	0x58024400
 80051a4:	0800cd7c 	.word	0x0800cd7c
 80051a8:	24000008 	.word	0x24000008

080051ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051ba:	4b53      	ldr	r3, [pc, #332]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d101      	bne.n	80051ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e099      	b.n	80052fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80051ca:	4b4f      	ldr	r3, [pc, #316]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a4e      	ldr	r2, [pc, #312]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80051d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d6:	f7fb fa89 	bl	80006ec <HAL_GetTick>
 80051da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051dc:	e008      	b.n	80051f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051de:	f7fb fa85 	bl	80006ec <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e086      	b.n	80052fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051f0:	4b45      	ldr	r3, [pc, #276]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1f0      	bne.n	80051de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80051fc:	4b42      	ldr	r3, [pc, #264]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	031b      	lsls	r3, r3, #12
 800520a:	493f      	ldr	r1, [pc, #252]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 800520c:	4313      	orrs	r3, r2
 800520e:	628b      	str	r3, [r1, #40]	; 0x28
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	3b01      	subs	r3, #1
 8005216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	3b01      	subs	r3, #1
 8005220:	025b      	lsls	r3, r3, #9
 8005222:	b29b      	uxth	r3, r3
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	3b01      	subs	r3, #1
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	3b01      	subs	r3, #1
 800523a:	061b      	lsls	r3, r3, #24
 800523c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005240:	4931      	ldr	r1, [pc, #196]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 8005242:	4313      	orrs	r3, r2
 8005244:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005246:	4b30      	ldr	r3, [pc, #192]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	492d      	ldr	r1, [pc, #180]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 8005254:	4313      	orrs	r3, r2
 8005256:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005258:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	f023 0220 	bic.w	r2, r3, #32
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	4928      	ldr	r1, [pc, #160]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 8005266:	4313      	orrs	r3, r2
 8005268:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800526a:	4b27      	ldr	r3, [pc, #156]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	4a26      	ldr	r2, [pc, #152]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 8005270:	f023 0310 	bic.w	r3, r3, #16
 8005274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005276:	4b24      	ldr	r3, [pc, #144]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 8005278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800527a:	4b24      	ldr	r3, [pc, #144]	; (800530c <RCCEx_PLL2_Config+0x160>)
 800527c:	4013      	ands	r3, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	69d2      	ldr	r2, [r2, #28]
 8005282:	00d2      	lsls	r2, r2, #3
 8005284:	4920      	ldr	r1, [pc, #128]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 8005286:	4313      	orrs	r3, r2
 8005288:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800528a:	4b1f      	ldr	r3, [pc, #124]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	4a1e      	ldr	r2, [pc, #120]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 8005290:	f043 0310 	orr.w	r3, r3, #16
 8005294:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800529c:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	4a19      	ldr	r2, [pc, #100]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80052a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052a8:	e00f      	b.n	80052ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d106      	bne.n	80052be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80052b0:	4b15      	ldr	r3, [pc, #84]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	4a14      	ldr	r2, [pc, #80]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80052b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052bc:	e005      	b.n	80052ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	4a11      	ldr	r2, [pc, #68]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80052c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80052ca:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a0e      	ldr	r2, [pc, #56]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80052d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d6:	f7fb fa09 	bl	80006ec <HAL_GetTick>
 80052da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052dc:	e008      	b.n	80052f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80052de:	f7fb fa05 	bl	80006ec <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e006      	b.n	80052fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <RCCEx_PLL2_Config+0x15c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f0      	beq.n	80052de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	58024400 	.word	0x58024400
 800530c:	ffff0007 	.word	0xffff0007

08005310 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800531e:	4b53      	ldr	r3, [pc, #332]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b03      	cmp	r3, #3
 8005328:	d101      	bne.n	800532e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e099      	b.n	8005462 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800532e:	4b4f      	ldr	r3, [pc, #316]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a4e      	ldr	r2, [pc, #312]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800533a:	f7fb f9d7 	bl	80006ec <HAL_GetTick>
 800533e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005340:	e008      	b.n	8005354 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005342:	f7fb f9d3 	bl	80006ec <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e086      	b.n	8005462 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005354:	4b45      	ldr	r3, [pc, #276]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1f0      	bne.n	8005342 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005360:	4b42      	ldr	r3, [pc, #264]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	051b      	lsls	r3, r3, #20
 800536e:	493f      	ldr	r1, [pc, #252]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005370:	4313      	orrs	r3, r2
 8005372:	628b      	str	r3, [r1, #40]	; 0x28
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	3b01      	subs	r3, #1
 800537a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	3b01      	subs	r3, #1
 8005384:	025b      	lsls	r3, r3, #9
 8005386:	b29b      	uxth	r3, r3
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	3b01      	subs	r3, #1
 8005390:	041b      	lsls	r3, r3, #16
 8005392:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	3b01      	subs	r3, #1
 800539e:	061b      	lsls	r3, r3, #24
 80053a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80053a4:	4931      	ldr	r1, [pc, #196]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80053aa:	4b30      	ldr	r3, [pc, #192]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	492d      	ldr	r1, [pc, #180]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80053bc:	4b2b      	ldr	r3, [pc, #172]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	4928      	ldr	r1, [pc, #160]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80053ce:	4b27      	ldr	r3, [pc, #156]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	4a26      	ldr	r2, [pc, #152]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 80053d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80053da:	4b24      	ldr	r3, [pc, #144]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 80053dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053de:	4b24      	ldr	r3, [pc, #144]	; (8005470 <RCCEx_PLL3_Config+0x160>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	69d2      	ldr	r2, [r2, #28]
 80053e6:	00d2      	lsls	r2, r2, #3
 80053e8:	4920      	ldr	r1, [pc, #128]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80053ee:	4b1f      	ldr	r3, [pc, #124]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	4a1e      	ldr	r2, [pc, #120]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 80053f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d106      	bne.n	800540e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005400:	4b1a      	ldr	r3, [pc, #104]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	4a19      	ldr	r2, [pc, #100]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005406:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800540a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800540c:	e00f      	b.n	800542e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d106      	bne.n	8005422 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005414:	4b15      	ldr	r3, [pc, #84]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	4a14      	ldr	r2, [pc, #80]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 800541a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800541e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005420:	e005      	b.n	800542e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005422:	4b12      	ldr	r3, [pc, #72]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	4a11      	ldr	r2, [pc, #68]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800542c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800542e:	4b0f      	ldr	r3, [pc, #60]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a0e      	ldr	r2, [pc, #56]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800543a:	f7fb f957 	bl	80006ec <HAL_GetTick>
 800543e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005440:	e008      	b.n	8005454 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005442:	f7fb f953 	bl	80006ec <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e006      	b.n	8005462 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <RCCEx_PLL3_Config+0x15c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f0      	beq.n	8005442 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	58024400 	.word	0x58024400
 8005470:	ffff0007 	.word	0xffff0007

08005474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e01d      	b.n	80054c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f005 fc4e 	bl	800ad3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f000 fc12 	bl	8005cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e01d      	b.n	8005518 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d106      	bne.n	80054f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f815 	bl	8005520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2202      	movs	r2, #2
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3304      	adds	r3, #4
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f000 fbe7 	bl	8005cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2201      	movs	r2, #1
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f001 f872 	bl	8006630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <HAL_TIM_PWM_Start+0x98>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <HAL_TIM_PWM_Start+0x4a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <HAL_TIM_PWM_Start+0x9c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00e      	beq.n	800557e <HAL_TIM_PWM_Start+0x4a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a1b      	ldr	r2, [pc, #108]	; (80055d4 <HAL_TIM_PWM_Start+0xa0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d009      	beq.n	800557e <HAL_TIM_PWM_Start+0x4a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a1a      	ldr	r2, [pc, #104]	; (80055d8 <HAL_TIM_PWM_Start+0xa4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d004      	beq.n	800557e <HAL_TIM_PWM_Start+0x4a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a18      	ldr	r2, [pc, #96]	; (80055dc <HAL_TIM_PWM_Start+0xa8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d101      	bne.n	8005582 <HAL_TIM_PWM_Start+0x4e>
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <HAL_TIM_PWM_Start+0x50>
 8005582:	2300      	movs	r3, #0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d007      	beq.n	8005598 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005596:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <HAL_TIM_PWM_Start+0xac>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b06      	cmp	r3, #6
 80055a8:	d00b      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x8e>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b0:	d007      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0201 	orr.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40010000 	.word	0x40010000
 80055d0:	40010400 	.word	0x40010400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40014400 	.word	0x40014400
 80055dc:	40014800 	.word	0x40014800
 80055e0:	00010007 	.word	0x00010007

080055e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d122      	bne.n	8005640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b02      	cmp	r3, #2
 8005606:	d11b      	bne.n	8005640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0202 	mvn.w	r2, #2
 8005610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fb3a 	bl	8005ca0 <HAL_TIM_IC_CaptureCallback>
 800562c:	e005      	b.n	800563a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fb2c 	bl	8005c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fb3d 	bl	8005cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b04      	cmp	r3, #4
 800564c:	d122      	bne.n	8005694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b04      	cmp	r3, #4
 800565a:	d11b      	bne.n	8005694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0204 	mvn.w	r2, #4
 8005664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fb10 	bl	8005ca0 <HAL_TIM_IC_CaptureCallback>
 8005680:	e005      	b.n	800568e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fb02 	bl	8005c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fb13 	bl	8005cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d122      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d11b      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0208 	mvn.w	r2, #8
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2204      	movs	r2, #4
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fae6 	bl	8005ca0 <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fad8 	bl	8005c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fae9 	bl	8005cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b10      	cmp	r3, #16
 80056f4:	d122      	bne.n	800573c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b10      	cmp	r3, #16
 8005702:	d11b      	bne.n	800573c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0210 	mvn.w	r2, #16
 800570c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2208      	movs	r2, #8
 8005712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fabc 	bl	8005ca0 <HAL_TIM_IC_CaptureCallback>
 8005728:	e005      	b.n	8005736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 faae 	bl	8005c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fabf 	bl	8005cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10e      	bne.n	8005768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d107      	bne.n	8005768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0201 	mvn.w	r2, #1
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa88 	bl	8005c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005772:	2b80      	cmp	r3, #128	; 0x80
 8005774:	d10e      	bne.n	8005794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	2b80      	cmp	r3, #128	; 0x80
 8005782:	d107      	bne.n	8005794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800578c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 f858 	bl	8006844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a2:	d10e      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ae:	2b80      	cmp	r3, #128	; 0x80
 80057b0:	d107      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 f84b 	bl	8006858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057cc:	2b40      	cmp	r3, #64	; 0x40
 80057ce:	d10e      	bne.n	80057ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d107      	bne.n	80057ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa6d 	bl	8005cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d10e      	bne.n	800581a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b20      	cmp	r3, #32
 8005808:	d107      	bne.n	800581a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f06f 0220 	mvn.w	r2, #32
 8005812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f001 f80b 	bl	8006830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800581a:	bf00      	nop
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800583a:	2302      	movs	r3, #2
 800583c:	e105      	b.n	8005a4a <HAL_TIM_PWM_ConfigChannel+0x226>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2202      	movs	r2, #2
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b14      	cmp	r3, #20
 8005852:	f200 80f0 	bhi.w	8005a36 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005856:	a201      	add	r2, pc, #4	; (adr r2, 800585c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585c:	080058b1 	.word	0x080058b1
 8005860:	08005a37 	.word	0x08005a37
 8005864:	08005a37 	.word	0x08005a37
 8005868:	08005a37 	.word	0x08005a37
 800586c:	080058f1 	.word	0x080058f1
 8005870:	08005a37 	.word	0x08005a37
 8005874:	08005a37 	.word	0x08005a37
 8005878:	08005a37 	.word	0x08005a37
 800587c:	08005933 	.word	0x08005933
 8005880:	08005a37 	.word	0x08005a37
 8005884:	08005a37 	.word	0x08005a37
 8005888:	08005a37 	.word	0x08005a37
 800588c:	08005973 	.word	0x08005973
 8005890:	08005a37 	.word	0x08005a37
 8005894:	08005a37 	.word	0x08005a37
 8005898:	08005a37 	.word	0x08005a37
 800589c:	080059b5 	.word	0x080059b5
 80058a0:	08005a37 	.word	0x08005a37
 80058a4:	08005a37 	.word	0x08005a37
 80058a8:	08005a37 	.word	0x08005a37
 80058ac:	080059f5 	.word	0x080059f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 faaa 	bl	8005e10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0208 	orr.w	r2, r2, #8
 80058ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0204 	bic.w	r2, r2, #4
 80058da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6999      	ldr	r1, [r3, #24]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	619a      	str	r2, [r3, #24]
      break;
 80058ee:	e0a3      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fb1a 	bl	8005f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800590a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6999      	ldr	r1, [r3, #24]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	021a      	lsls	r2, r3, #8
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	619a      	str	r2, [r3, #24]
      break;
 8005930:	e082      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fb83 	bl	8006044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0208 	orr.w	r2, r2, #8
 800594c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0204 	bic.w	r2, r2, #4
 800595c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69d9      	ldr	r1, [r3, #28]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	61da      	str	r2, [r3, #28]
      break;
 8005970:	e062      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fbe9 	bl	8006150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800598c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800599c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69d9      	ldr	r1, [r3, #28]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	021a      	lsls	r2, r3, #8
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	61da      	str	r2, [r3, #28]
      break;
 80059b2:	e041      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fc30 	bl	8006220 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0208 	orr.w	r2, r2, #8
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0204 	bic.w	r2, r2, #4
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059f2:	e021      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fc72 	bl	80062e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	021a      	lsls	r2, r3, #8
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a34:	e000      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005a36:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop

08005a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_TIM_ConfigClockSource+0x18>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e0b7      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x188>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4b57      	ldr	r3, [pc, #348]	; (8005be4 <HAL_TIM_ConfigClockSource+0x190>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b70      	cmp	r3, #112	; 0x70
 8005aa2:	d02e      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0xae>
 8005aa4:	2b70      	cmp	r3, #112	; 0x70
 8005aa6:	d812      	bhi.n	8005ace <HAL_TIM_ConfigClockSource+0x7a>
 8005aa8:	2b30      	cmp	r3, #48	; 0x30
 8005aaa:	f000 8084 	beq.w	8005bb6 <HAL_TIM_ConfigClockSource+0x162>
 8005aae:	2b30      	cmp	r3, #48	; 0x30
 8005ab0:	d806      	bhi.n	8005ac0 <HAL_TIM_ConfigClockSource+0x6c>
 8005ab2:	2b10      	cmp	r3, #16
 8005ab4:	d07f      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x162>
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d07d      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x162>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d07b      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005abe:	e084      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005ac0:	2b50      	cmp	r3, #80	; 0x50
 8005ac2:	d048      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x102>
 8005ac4:	2b60      	cmp	r3, #96	; 0x60
 8005ac6:	d056      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x122>
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d064      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005acc:	e07d      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005ace:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ad2:	d070      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x162>
 8005ad4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ad8:	d809      	bhi.n	8005aee <HAL_TIM_ConfigClockSource+0x9a>
 8005ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ade:	d027      	beq.n	8005b30 <HAL_TIM_ConfigClockSource+0xdc>
 8005ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ae4:	d067      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x162>
 8005ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aea:	d06d      	beq.n	8005bc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005aec:	e06d      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005aee:	4a3e      	ldr	r2, [pc, #248]	; (8005be8 <HAL_TIM_ConfigClockSource+0x194>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d060      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x162>
 8005af4:	4a3d      	ldr	r2, [pc, #244]	; (8005bec <HAL_TIM_ConfigClockSource+0x198>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d05d      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x162>
 8005afa:	4a3d      	ldr	r2, [pc, #244]	; (8005bf0 <HAL_TIM_ConfigClockSource+0x19c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d05a      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8005b00:	e063      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6899      	ldr	r1, [r3, #8]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f000 fd6d 	bl	80065f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	609a      	str	r2, [r3, #8]
      break;
 8005b2e:	e04c      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	6899      	ldr	r1, [r3, #8]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f000 fd56 	bl	80065f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b52:	609a      	str	r2, [r3, #8]
      break;
 8005b54:	e039      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6859      	ldr	r1, [r3, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f000 fcc6 	bl	80064f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2150      	movs	r1, #80	; 0x50
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fd20 	bl	80065b4 <TIM_ITRx_SetConfig>
      break;
 8005b74:	e029      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f000 fce5 	bl	8006552 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2160      	movs	r1, #96	; 0x60
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fd10 	bl	80065b4 <TIM_ITRx_SetConfig>
      break;
 8005b94:	e019      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f000 fca6 	bl	80064f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2140      	movs	r1, #64	; 0x40
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fd00 	bl	80065b4 <TIM_ITRx_SetConfig>
      break;
 8005bb4:	e009      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f000 fcf7 	bl	80065b4 <TIM_ITRx_SetConfig>
      break;
 8005bc6:	e000      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005bc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	ffceff88 	.word	0xffceff88
 8005be8:	00100030 	.word	0x00100030
 8005bec:	00100040 	.word	0x00100040
 8005bf0:	00100020 	.word	0x00100020

08005bf4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e031      	b.n	8005c70 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fbc4 	bl	80063ac <TIM_SlaveTimer_SetConfig>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e018      	b.n	8005c70 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c4c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c5c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a40      	ldr	r2, [pc, #256]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d00f      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3d      	ldr	r2, [pc, #244]	; (8005df4 <TIM_Base_SetConfig+0x118>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00b      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3c      	ldr	r2, [pc, #240]	; (8005df8 <TIM_Base_SetConfig+0x11c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d007      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a3b      	ldr	r2, [pc, #236]	; (8005dfc <TIM_Base_SetConfig+0x120>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a3a      	ldr	r2, [pc, #232]	; (8005e00 <TIM_Base_SetConfig+0x124>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d108      	bne.n	8005d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2f      	ldr	r2, [pc, #188]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01f      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3c:	d01b      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2c      	ldr	r2, [pc, #176]	; (8005df4 <TIM_Base_SetConfig+0x118>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d017      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a2b      	ldr	r2, [pc, #172]	; (8005df8 <TIM_Base_SetConfig+0x11c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d013      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a2a      	ldr	r2, [pc, #168]	; (8005dfc <TIM_Base_SetConfig+0x120>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00f      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a29      	ldr	r2, [pc, #164]	; (8005e00 <TIM_Base_SetConfig+0x124>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00b      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a28      	ldr	r2, [pc, #160]	; (8005e04 <TIM_Base_SetConfig+0x128>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d007      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a27      	ldr	r2, [pc, #156]	; (8005e08 <TIM_Base_SetConfig+0x12c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a26      	ldr	r2, [pc, #152]	; (8005e0c <TIM_Base_SetConfig+0x130>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d108      	bne.n	8005d88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a10      	ldr	r2, [pc, #64]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00f      	beq.n	8005dd4 <TIM_Base_SetConfig+0xf8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <TIM_Base_SetConfig+0x124>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00b      	beq.n	8005dd4 <TIM_Base_SetConfig+0xf8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a11      	ldr	r2, [pc, #68]	; (8005e04 <TIM_Base_SetConfig+0x128>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d007      	beq.n	8005dd4 <TIM_Base_SetConfig+0xf8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <TIM_Base_SetConfig+0x12c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_Base_SetConfig+0xf8>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a0f      	ldr	r2, [pc, #60]	; (8005e0c <TIM_Base_SetConfig+0x130>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d103      	bne.n	8005ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	615a      	str	r2, [r3, #20]
}
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	40000c00 	.word	0x40000c00
 8005e00:	40010400 	.word	0x40010400
 8005e04:	40014000 	.word	0x40014000
 8005e08:	40014400 	.word	0x40014400
 8005e0c:	40014800 	.word	0x40014800

08005e10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f023 0201 	bic.w	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4b37      	ldr	r3, [pc, #220]	; (8005f18 <TIM_OC1_SetConfig+0x108>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f023 0302 	bic.w	r3, r3, #2
 8005e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a2d      	ldr	r2, [pc, #180]	; (8005f1c <TIM_OC1_SetConfig+0x10c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00f      	beq.n	8005e8c <TIM_OC1_SetConfig+0x7c>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a2c      	ldr	r2, [pc, #176]	; (8005f20 <TIM_OC1_SetConfig+0x110>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00b      	beq.n	8005e8c <TIM_OC1_SetConfig+0x7c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a2b      	ldr	r2, [pc, #172]	; (8005f24 <TIM_OC1_SetConfig+0x114>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d007      	beq.n	8005e8c <TIM_OC1_SetConfig+0x7c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a2a      	ldr	r2, [pc, #168]	; (8005f28 <TIM_OC1_SetConfig+0x118>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_OC1_SetConfig+0x7c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a29      	ldr	r2, [pc, #164]	; (8005f2c <TIM_OC1_SetConfig+0x11c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d10c      	bne.n	8005ea6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f023 0308 	bic.w	r3, r3, #8
 8005e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f023 0304 	bic.w	r3, r3, #4
 8005ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <TIM_OC1_SetConfig+0x10c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00f      	beq.n	8005ece <TIM_OC1_SetConfig+0xbe>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a1b      	ldr	r2, [pc, #108]	; (8005f20 <TIM_OC1_SetConfig+0x110>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00b      	beq.n	8005ece <TIM_OC1_SetConfig+0xbe>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a1a      	ldr	r2, [pc, #104]	; (8005f24 <TIM_OC1_SetConfig+0x114>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d007      	beq.n	8005ece <TIM_OC1_SetConfig+0xbe>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a19      	ldr	r2, [pc, #100]	; (8005f28 <TIM_OC1_SetConfig+0x118>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d003      	beq.n	8005ece <TIM_OC1_SetConfig+0xbe>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <TIM_OC1_SetConfig+0x11c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d111      	bne.n	8005ef2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	621a      	str	r2, [r3, #32]
}
 8005f0c:	bf00      	nop
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	fffeff8f 	.word	0xfffeff8f
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40010400 	.word	0x40010400
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40014400 	.word	0x40014400
 8005f2c:	40014800 	.word	0x40014800

08005f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f023 0210 	bic.w	r2, r3, #16
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4b34      	ldr	r3, [pc, #208]	; (800602c <TIM_OC2_SetConfig+0xfc>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	021b      	lsls	r3, r3, #8
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f023 0320 	bic.w	r3, r3, #32
 8005f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a29      	ldr	r2, [pc, #164]	; (8006030 <TIM_OC2_SetConfig+0x100>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_OC2_SetConfig+0x68>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a28      	ldr	r2, [pc, #160]	; (8006034 <TIM_OC2_SetConfig+0x104>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d10d      	bne.n	8005fb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a1e      	ldr	r2, [pc, #120]	; (8006030 <TIM_OC2_SetConfig+0x100>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00f      	beq.n	8005fdc <TIM_OC2_SetConfig+0xac>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a1d      	ldr	r2, [pc, #116]	; (8006034 <TIM_OC2_SetConfig+0x104>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00b      	beq.n	8005fdc <TIM_OC2_SetConfig+0xac>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a1c      	ldr	r2, [pc, #112]	; (8006038 <TIM_OC2_SetConfig+0x108>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_OC2_SetConfig+0xac>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a1b      	ldr	r2, [pc, #108]	; (800603c <TIM_OC2_SetConfig+0x10c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_OC2_SetConfig+0xac>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <TIM_OC2_SetConfig+0x110>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d113      	bne.n	8006004 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	feff8fff 	.word	0xfeff8fff
 8006030:	40010000 	.word	0x40010000
 8006034:	40010400 	.word	0x40010400
 8006038:	40014000 	.word	0x40014000
 800603c:	40014400 	.word	0x40014400
 8006040:	40014800 	.word	0x40014800

08006044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0303 	bic.w	r3, r3, #3
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800608c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a27      	ldr	r2, [pc, #156]	; (800613c <TIM_OC3_SetConfig+0xf8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d003      	beq.n	80060aa <TIM_OC3_SetConfig+0x66>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a26      	ldr	r2, [pc, #152]	; (8006140 <TIM_OC3_SetConfig+0xfc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d10d      	bne.n	80060c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a1c      	ldr	r2, [pc, #112]	; (800613c <TIM_OC3_SetConfig+0xf8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00f      	beq.n	80060ee <TIM_OC3_SetConfig+0xaa>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <TIM_OC3_SetConfig+0xfc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00b      	beq.n	80060ee <TIM_OC3_SetConfig+0xaa>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a1a      	ldr	r2, [pc, #104]	; (8006144 <TIM_OC3_SetConfig+0x100>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d007      	beq.n	80060ee <TIM_OC3_SetConfig+0xaa>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a19      	ldr	r2, [pc, #100]	; (8006148 <TIM_OC3_SetConfig+0x104>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_OC3_SetConfig+0xaa>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a18      	ldr	r2, [pc, #96]	; (800614c <TIM_OC3_SetConfig+0x108>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d113      	bne.n	8006116 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	4313      	orrs	r3, r2
 8006108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	621a      	str	r2, [r3, #32]
}
 8006130:	bf00      	nop
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	40010000 	.word	0x40010000
 8006140:	40010400 	.word	0x40010400
 8006144:	40014000 	.word	0x40014000
 8006148:	40014400 	.word	0x40014400
 800614c:	40014800 	.word	0x40014800

08006150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800617e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	021b      	lsls	r3, r3, #8
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800619a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	031b      	lsls	r3, r3, #12
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a18      	ldr	r2, [pc, #96]	; (800620c <TIM_OC4_SetConfig+0xbc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00f      	beq.n	80061d0 <TIM_OC4_SetConfig+0x80>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a17      	ldr	r2, [pc, #92]	; (8006210 <TIM_OC4_SetConfig+0xc0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00b      	beq.n	80061d0 <TIM_OC4_SetConfig+0x80>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a16      	ldr	r2, [pc, #88]	; (8006214 <TIM_OC4_SetConfig+0xc4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d007      	beq.n	80061d0 <TIM_OC4_SetConfig+0x80>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a15      	ldr	r2, [pc, #84]	; (8006218 <TIM_OC4_SetConfig+0xc8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d003      	beq.n	80061d0 <TIM_OC4_SetConfig+0x80>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a14      	ldr	r2, [pc, #80]	; (800621c <TIM_OC4_SetConfig+0xcc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d109      	bne.n	80061e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	019b      	lsls	r3, r3, #6
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40010000 	.word	0x40010000
 8006210:	40010400 	.word	0x40010400
 8006214:	40014000 	.word	0x40014000
 8006218:	40014400 	.word	0x40014400
 800621c:	40014800 	.word	0x40014800

08006220 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006260:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	041b      	lsls	r3, r3, #16
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a17      	ldr	r2, [pc, #92]	; (80062d0 <TIM_OC5_SetConfig+0xb0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00f      	beq.n	8006296 <TIM_OC5_SetConfig+0x76>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a16      	ldr	r2, [pc, #88]	; (80062d4 <TIM_OC5_SetConfig+0xb4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00b      	beq.n	8006296 <TIM_OC5_SetConfig+0x76>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <TIM_OC5_SetConfig+0xb8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d007      	beq.n	8006296 <TIM_OC5_SetConfig+0x76>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a14      	ldr	r2, [pc, #80]	; (80062dc <TIM_OC5_SetConfig+0xbc>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_OC5_SetConfig+0x76>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a13      	ldr	r2, [pc, #76]	; (80062e0 <TIM_OC5_SetConfig+0xc0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d109      	bne.n	80062aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800629c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	021b      	lsls	r3, r3, #8
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	621a      	str	r2, [r3, #32]
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	40010000 	.word	0x40010000
 80062d4:	40010400 	.word	0x40010400
 80062d8:	40014000 	.word	0x40014000
 80062dc:	40014400 	.word	0x40014400
 80062e0:	40014800 	.word	0x40014800

080062e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	051b      	lsls	r3, r3, #20
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a18      	ldr	r2, [pc, #96]	; (8006398 <TIM_OC6_SetConfig+0xb4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00f      	beq.n	800635c <TIM_OC6_SetConfig+0x78>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a17      	ldr	r2, [pc, #92]	; (800639c <TIM_OC6_SetConfig+0xb8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00b      	beq.n	800635c <TIM_OC6_SetConfig+0x78>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a16      	ldr	r2, [pc, #88]	; (80063a0 <TIM_OC6_SetConfig+0xbc>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d007      	beq.n	800635c <TIM_OC6_SetConfig+0x78>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a15      	ldr	r2, [pc, #84]	; (80063a4 <TIM_OC6_SetConfig+0xc0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_OC6_SetConfig+0x78>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a14      	ldr	r2, [pc, #80]	; (80063a8 <TIM_OC6_SetConfig+0xc4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d109      	bne.n	8006370 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006362:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	029b      	lsls	r3, r3, #10
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	621a      	str	r2, [r3, #32]
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40010000 	.word	0x40010000
 800639c:	40010400 	.word	0x40010400
 80063a0:	40014000 	.word	0x40014000
 80063a4:	40014400 	.word	0x40014400
 80063a8:	40014800 	.word	0x40014800

080063ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	4b47      	ldr	r3, [pc, #284]	; (80064e0 <TIM_SlaveTimer_SetConfig+0x134>)
 80063c2:	4013      	ands	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4b44      	ldr	r3, [pc, #272]	; (80064e4 <TIM_SlaveTimer_SetConfig+0x138>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2b60      	cmp	r3, #96	; 0x60
 80063f0:	d065      	beq.n	80064be <TIM_SlaveTimer_SetConfig+0x112>
 80063f2:	2b60      	cmp	r3, #96	; 0x60
 80063f4:	d80f      	bhi.n	8006416 <TIM_SlaveTimer_SetConfig+0x6a>
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d06b      	beq.n	80064d2 <TIM_SlaveTimer_SetConfig+0x126>
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	d804      	bhi.n	8006408 <TIM_SlaveTimer_SetConfig+0x5c>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d067      	beq.n	80064d2 <TIM_SlaveTimer_SetConfig+0x126>
 8006402:	2b10      	cmp	r3, #16
 8006404:	d065      	beq.n	80064d2 <TIM_SlaveTimer_SetConfig+0x126>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006406:	e065      	b.n	80064d4 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 8006408:	2b40      	cmp	r3, #64	; 0x40
 800640a:	d025      	beq.n	8006458 <TIM_SlaveTimer_SetConfig+0xac>
 800640c:	2b50      	cmp	r3, #80	; 0x50
 800640e:	d04c      	beq.n	80064aa <TIM_SlaveTimer_SetConfig+0xfe>
 8006410:	2b30      	cmp	r3, #48	; 0x30
 8006412:	d05e      	beq.n	80064d2 <TIM_SlaveTimer_SetConfig+0x126>
      break;
 8006414:	e05e      	b.n	80064d4 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 8006416:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800641a:	d05a      	beq.n	80064d2 <TIM_SlaveTimer_SetConfig+0x126>
 800641c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006420:	d805      	bhi.n	800642e <TIM_SlaveTimer_SetConfig+0x82>
 8006422:	2b70      	cmp	r3, #112	; 0x70
 8006424:	d00d      	beq.n	8006442 <TIM_SlaveTimer_SetConfig+0x96>
 8006426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800642a:	d052      	beq.n	80064d2 <TIM_SlaveTimer_SetConfig+0x126>
      break;
 800642c:	e052      	b.n	80064d4 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 800642e:	4a2e      	ldr	r2, [pc, #184]	; (80064e8 <TIM_SlaveTimer_SetConfig+0x13c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d04e      	beq.n	80064d2 <TIM_SlaveTimer_SetConfig+0x126>
 8006434:	4a2d      	ldr	r2, [pc, #180]	; (80064ec <TIM_SlaveTimer_SetConfig+0x140>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d04b      	beq.n	80064d2 <TIM_SlaveTimer_SetConfig+0x126>
 800643a:	4a2d      	ldr	r2, [pc, #180]	; (80064f0 <TIM_SlaveTimer_SetConfig+0x144>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d048      	beq.n	80064d2 <TIM_SlaveTimer_SetConfig+0x126>
      break;
 8006440:	e048      	b.n	80064d4 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_ETR_SetConfig(htim->Instance,
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6818      	ldr	r0, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68d9      	ldr	r1, [r3, #12]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f000 f8cd 	bl	80065f0 <TIM_ETR_SetConfig>
      break;
 8006456:	e03d      	b.n	80064d4 <TIM_SlaveTimer_SetConfig+0x128>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b05      	cmp	r3, #5
 800645e:	d101      	bne.n	8006464 <TIM_SlaveTimer_SetConfig+0xb8>
        return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e038      	b.n	80064d6 <TIM_SlaveTimer_SetConfig+0x12a>
      tmpccer = htim->Instance->CCER;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6a1a      	ldr	r2, [r3, #32]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0201 	bic.w	r2, r2, #1
 800647a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800648a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	621a      	str	r2, [r3, #32]
      break;
 80064a8:	e014      	b.n	80064d4 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6818      	ldr	r0, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6899      	ldr	r1, [r3, #8]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	461a      	mov	r2, r3
 80064b8:	f000 f81c 	bl	80064f4 <TIM_TI1_ConfigInputStage>
      break;
 80064bc:	e00a      	b.n	80064d4 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6818      	ldr	r0, [r3, #0]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6899      	ldr	r1, [r3, #8]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	461a      	mov	r2, r3
 80064cc:	f000 f841 	bl	8006552 <TIM_TI2_ConfigInputStage>
      break;
 80064d0:	e000      	b.n	80064d4 <TIM_SlaveTimer_SetConfig+0x128>
      break;
 80064d2:	bf00      	nop
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	ffcfff8f 	.word	0xffcfff8f
 80064e4:	fffefff8 	.word	0xfffefff8
 80064e8:	00100030 	.word	0x00100030
 80064ec:	00100040 	.word	0x00100040
 80064f0:	00100020 	.word	0x00100020

080064f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	f023 0201 	bic.w	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800651e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f023 030a 	bic.w	r3, r3, #10
 8006530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006552:	b480      	push	{r7}
 8006554:	b087      	sub	sp, #28
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f023 0210 	bic.w	r2, r3, #16
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800657c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	031b      	lsls	r3, r3, #12
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800658e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	621a      	str	r2, [r3, #32]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	4b09      	ldr	r3, [pc, #36]	; (80065ec <TIM_ITRx_SetConfig+0x38>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	f043 0307 	orr.w	r3, r3, #7
 80065d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	609a      	str	r2, [r3, #8]
}
 80065de:	bf00      	nop
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	ffcfff8f 	.word	0xffcfff8f

080065f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800660a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	021a      	lsls	r2, r3, #8
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	431a      	orrs	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4313      	orrs	r3, r2
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	609a      	str	r2, [r3, #8]
}
 8006624:	bf00      	nop
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f003 031f 	and.w	r3, r3, #31
 8006642:	2201      	movs	r2, #1
 8006644:	fa02 f303 	lsl.w	r3, r2, r3
 8006648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a1a      	ldr	r2, [r3, #32]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	43db      	mvns	r3, r3
 8006652:	401a      	ands	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a1a      	ldr	r2, [r3, #32]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f003 031f 	and.w	r3, r3, #31
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	fa01 f303 	lsl.w	r3, r1, r3
 8006668:	431a      	orrs	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006690:	2302      	movs	r3, #2
 8006692:	e045      	b.n	8006720 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1c      	ldr	r2, [pc, #112]	; (800672c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d004      	beq.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1b      	ldr	r2, [pc, #108]	; (8006730 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d108      	bne.n	80066da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066f2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	40010000 	.word	0x40010000
 8006730:	40010400 	.word	0x40010400

08006734 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800674c:	2302      	movs	r3, #2
 800674e:	e065      	b.n	800681c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	4313      	orrs	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	041b      	lsls	r3, r3, #16
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a16      	ldr	r2, [pc, #88]	; (8006828 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d004      	beq.n	80067de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a14      	ldr	r2, [pc, #80]	; (800682c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d115      	bne.n	800680a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	051b      	lsls	r3, r3, #20
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40010000 	.word	0x40010000
 800682c:	40010400 	.word	0x40010400

08006830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e042      	b.n	8006904 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006884:	2b00      	cmp	r3, #0
 8006886:	d106      	bne.n	8006896 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f004 fb1b 	bl	800aecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2224      	movs	r2, #36	; 0x24
 800689a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f82e 	bl	8006910 <UART_SetConfig>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e022      	b.n	8006904 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f002 f99c 	bl	8008c04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068ea:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f002 fa23 	bl	8008d48 <UART_CheckIdleState>
 8006902:	4603      	mov	r3, r0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	0000      	movs	r0, r0
	...

08006910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006910:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006914:	b08e      	sub	sp, #56	; 0x38
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800691a:	2300      	movs	r3, #0
 800691c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006924:	2300      	movs	r3, #0
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	4313      	orrs	r3, r2
 800693e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006946:	4313      	orrs	r3, r2
 8006948:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	4bc1      	ldr	r3, [pc, #772]	; (8006c58 <UART_SetConfig+0x348>)
 8006952:	4013      	ands	r3, r2
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800695a:	430b      	orrs	r3, r1
 800695c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4ab7      	ldr	r2, [pc, #732]	; (8006c5c <UART_SetConfig+0x34c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d004      	beq.n	800698e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800698a:	4313      	orrs	r3, r2
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	4bb2      	ldr	r3, [pc, #712]	; (8006c60 <UART_SetConfig+0x350>)
 8006996:	4013      	ands	r3, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6812      	ldr	r2, [r2, #0]
 800699c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800699e:	430b      	orrs	r3, r1
 80069a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	f023 010f 	bic.w	r1, r3, #15
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4aa9      	ldr	r2, [pc, #676]	; (8006c64 <UART_SetConfig+0x354>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d177      	bne.n	8006ab2 <UART_SetConfig+0x1a2>
 80069c2:	4ba9      	ldr	r3, [pc, #676]	; (8006c68 <UART_SetConfig+0x358>)
 80069c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ca:	2b28      	cmp	r3, #40	; 0x28
 80069cc:	d86c      	bhi.n	8006aa8 <UART_SetConfig+0x198>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <UART_SetConfig+0xc4>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	08006a79 	.word	0x08006a79
 80069d8:	08006aa9 	.word	0x08006aa9
 80069dc:	08006aa9 	.word	0x08006aa9
 80069e0:	08006aa9 	.word	0x08006aa9
 80069e4:	08006aa9 	.word	0x08006aa9
 80069e8:	08006aa9 	.word	0x08006aa9
 80069ec:	08006aa9 	.word	0x08006aa9
 80069f0:	08006aa9 	.word	0x08006aa9
 80069f4:	08006a81 	.word	0x08006a81
 80069f8:	08006aa9 	.word	0x08006aa9
 80069fc:	08006aa9 	.word	0x08006aa9
 8006a00:	08006aa9 	.word	0x08006aa9
 8006a04:	08006aa9 	.word	0x08006aa9
 8006a08:	08006aa9 	.word	0x08006aa9
 8006a0c:	08006aa9 	.word	0x08006aa9
 8006a10:	08006aa9 	.word	0x08006aa9
 8006a14:	08006a89 	.word	0x08006a89
 8006a18:	08006aa9 	.word	0x08006aa9
 8006a1c:	08006aa9 	.word	0x08006aa9
 8006a20:	08006aa9 	.word	0x08006aa9
 8006a24:	08006aa9 	.word	0x08006aa9
 8006a28:	08006aa9 	.word	0x08006aa9
 8006a2c:	08006aa9 	.word	0x08006aa9
 8006a30:	08006aa9 	.word	0x08006aa9
 8006a34:	08006a91 	.word	0x08006a91
 8006a38:	08006aa9 	.word	0x08006aa9
 8006a3c:	08006aa9 	.word	0x08006aa9
 8006a40:	08006aa9 	.word	0x08006aa9
 8006a44:	08006aa9 	.word	0x08006aa9
 8006a48:	08006aa9 	.word	0x08006aa9
 8006a4c:	08006aa9 	.word	0x08006aa9
 8006a50:	08006aa9 	.word	0x08006aa9
 8006a54:	08006a99 	.word	0x08006a99
 8006a58:	08006aa9 	.word	0x08006aa9
 8006a5c:	08006aa9 	.word	0x08006aa9
 8006a60:	08006aa9 	.word	0x08006aa9
 8006a64:	08006aa9 	.word	0x08006aa9
 8006a68:	08006aa9 	.word	0x08006aa9
 8006a6c:	08006aa9 	.word	0x08006aa9
 8006a70:	08006aa9 	.word	0x08006aa9
 8006a74:	08006aa1 	.word	0x08006aa1
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a7e:	e233      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a86:	e22f      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a8e:	e22b      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a96:	e227      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006a98:	2320      	movs	r3, #32
 8006a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a9e:	e223      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa6:	e21f      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006aa8:	2380      	movs	r3, #128	; 0x80
 8006aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aae:	bf00      	nop
 8006ab0:	e21a      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a6d      	ldr	r2, [pc, #436]	; (8006c6c <UART_SetConfig+0x35c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d132      	bne.n	8006b22 <UART_SetConfig+0x212>
 8006abc:	4b6a      	ldr	r3, [pc, #424]	; (8006c68 <UART_SetConfig+0x358>)
 8006abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	2b05      	cmp	r3, #5
 8006ac6:	d827      	bhi.n	8006b18 <UART_SetConfig+0x208>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <UART_SetConfig+0x1c0>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006ae9 	.word	0x08006ae9
 8006ad4:	08006af1 	.word	0x08006af1
 8006ad8:	08006af9 	.word	0x08006af9
 8006adc:	08006b01 	.word	0x08006b01
 8006ae0:	08006b09 	.word	0x08006b09
 8006ae4:	08006b11 	.word	0x08006b11
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aee:	e1fb      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006af0:	2304      	movs	r3, #4
 8006af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006af6:	e1f7      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006af8:	2308      	movs	r3, #8
 8006afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006afe:	e1f3      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006b00:	2310      	movs	r3, #16
 8006b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b06:	e1ef      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006b08:	2320      	movs	r3, #32
 8006b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b0e:	e1eb      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006b10:	2340      	movs	r3, #64	; 0x40
 8006b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b16:	e1e7      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006b18:	2380      	movs	r3, #128	; 0x80
 8006b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b1e:	bf00      	nop
 8006b20:	e1e2      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a52      	ldr	r2, [pc, #328]	; (8006c70 <UART_SetConfig+0x360>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d132      	bne.n	8006b92 <UART_SetConfig+0x282>
 8006b2c:	4b4e      	ldr	r3, [pc, #312]	; (8006c68 <UART_SetConfig+0x358>)
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	2b05      	cmp	r3, #5
 8006b36:	d827      	bhi.n	8006b88 <UART_SetConfig+0x278>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x230>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b59 	.word	0x08006b59
 8006b44:	08006b61 	.word	0x08006b61
 8006b48:	08006b69 	.word	0x08006b69
 8006b4c:	08006b71 	.word	0x08006b71
 8006b50:	08006b79 	.word	0x08006b79
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b5e:	e1c3      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006b60:	2304      	movs	r3, #4
 8006b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b66:	e1bf      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006b68:	2308      	movs	r3, #8
 8006b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b6e:	e1bb      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006b70:	2310      	movs	r3, #16
 8006b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b76:	e1b7      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006b78:	2320      	movs	r3, #32
 8006b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b7e:	e1b3      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006b80:	2340      	movs	r3, #64	; 0x40
 8006b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b86:	e1af      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006b88:	2380      	movs	r3, #128	; 0x80
 8006b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b8e:	bf00      	nop
 8006b90:	e1aa      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a37      	ldr	r2, [pc, #220]	; (8006c74 <UART_SetConfig+0x364>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d132      	bne.n	8006c02 <UART_SetConfig+0x2f2>
 8006b9c:	4b32      	ldr	r3, [pc, #200]	; (8006c68 <UART_SetConfig+0x358>)
 8006b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	2b05      	cmp	r3, #5
 8006ba6:	d827      	bhi.n	8006bf8 <UART_SetConfig+0x2e8>
 8006ba8:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <UART_SetConfig+0x2a0>)
 8006baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bae:	bf00      	nop
 8006bb0:	08006bc9 	.word	0x08006bc9
 8006bb4:	08006bd1 	.word	0x08006bd1
 8006bb8:	08006bd9 	.word	0x08006bd9
 8006bbc:	08006be1 	.word	0x08006be1
 8006bc0:	08006be9 	.word	0x08006be9
 8006bc4:	08006bf1 	.word	0x08006bf1
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bce:	e18b      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006bd0:	2304      	movs	r3, #4
 8006bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bd6:	e187      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006bd8:	2308      	movs	r3, #8
 8006bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bde:	e183      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006be0:	2310      	movs	r3, #16
 8006be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006be6:	e17f      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006be8:	2320      	movs	r3, #32
 8006bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bee:	e17b      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006bf0:	2340      	movs	r3, #64	; 0x40
 8006bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bf6:	e177      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006bf8:	2380      	movs	r3, #128	; 0x80
 8006bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bfe:	bf00      	nop
 8006c00:	e172      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a1c      	ldr	r2, [pc, #112]	; (8006c78 <UART_SetConfig+0x368>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d144      	bne.n	8006c96 <UART_SetConfig+0x386>
 8006c0c:	4b16      	ldr	r3, [pc, #88]	; (8006c68 <UART_SetConfig+0x358>)
 8006c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	2b05      	cmp	r3, #5
 8006c16:	d839      	bhi.n	8006c8c <UART_SetConfig+0x37c>
 8006c18:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <UART_SetConfig+0x310>)
 8006c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1e:	bf00      	nop
 8006c20:	08006c39 	.word	0x08006c39
 8006c24:	08006c41 	.word	0x08006c41
 8006c28:	08006c49 	.word	0x08006c49
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c7d 	.word	0x08006c7d
 8006c34:	08006c85 	.word	0x08006c85
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c3e:	e153      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006c40:	2304      	movs	r3, #4
 8006c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c46:	e14f      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006c48:	2308      	movs	r3, #8
 8006c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c4e:	e14b      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006c50:	2310      	movs	r3, #16
 8006c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c56:	e147      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006c58:	cfff69f3 	.word	0xcfff69f3
 8006c5c:	58000c00 	.word	0x58000c00
 8006c60:	11fff4ff 	.word	0x11fff4ff
 8006c64:	40011000 	.word	0x40011000
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	40004400 	.word	0x40004400
 8006c70:	40004800 	.word	0x40004800
 8006c74:	40004c00 	.word	0x40004c00
 8006c78:	40005000 	.word	0x40005000
 8006c7c:	2320      	movs	r3, #32
 8006c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c82:	e131      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006c84:	2340      	movs	r3, #64	; 0x40
 8006c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c8a:	e12d      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006c8c:	2380      	movs	r3, #128	; 0x80
 8006c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c92:	bf00      	nop
 8006c94:	e128      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4ac3      	ldr	r2, [pc, #780]	; (8006fa8 <UART_SetConfig+0x698>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d178      	bne.n	8006d92 <UART_SetConfig+0x482>
 8006ca0:	4bc2      	ldr	r3, [pc, #776]	; (8006fac <UART_SetConfig+0x69c>)
 8006ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca8:	2b28      	cmp	r3, #40	; 0x28
 8006caa:	d86d      	bhi.n	8006d88 <UART_SetConfig+0x478>
 8006cac:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <UART_SetConfig+0x3a4>)
 8006cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb2:	bf00      	nop
 8006cb4:	08006d59 	.word	0x08006d59
 8006cb8:	08006d89 	.word	0x08006d89
 8006cbc:	08006d89 	.word	0x08006d89
 8006cc0:	08006d89 	.word	0x08006d89
 8006cc4:	08006d89 	.word	0x08006d89
 8006cc8:	08006d89 	.word	0x08006d89
 8006ccc:	08006d89 	.word	0x08006d89
 8006cd0:	08006d89 	.word	0x08006d89
 8006cd4:	08006d61 	.word	0x08006d61
 8006cd8:	08006d89 	.word	0x08006d89
 8006cdc:	08006d89 	.word	0x08006d89
 8006ce0:	08006d89 	.word	0x08006d89
 8006ce4:	08006d89 	.word	0x08006d89
 8006ce8:	08006d89 	.word	0x08006d89
 8006cec:	08006d89 	.word	0x08006d89
 8006cf0:	08006d89 	.word	0x08006d89
 8006cf4:	08006d69 	.word	0x08006d69
 8006cf8:	08006d89 	.word	0x08006d89
 8006cfc:	08006d89 	.word	0x08006d89
 8006d00:	08006d89 	.word	0x08006d89
 8006d04:	08006d89 	.word	0x08006d89
 8006d08:	08006d89 	.word	0x08006d89
 8006d0c:	08006d89 	.word	0x08006d89
 8006d10:	08006d89 	.word	0x08006d89
 8006d14:	08006d71 	.word	0x08006d71
 8006d18:	08006d89 	.word	0x08006d89
 8006d1c:	08006d89 	.word	0x08006d89
 8006d20:	08006d89 	.word	0x08006d89
 8006d24:	08006d89 	.word	0x08006d89
 8006d28:	08006d89 	.word	0x08006d89
 8006d2c:	08006d89 	.word	0x08006d89
 8006d30:	08006d89 	.word	0x08006d89
 8006d34:	08006d79 	.word	0x08006d79
 8006d38:	08006d89 	.word	0x08006d89
 8006d3c:	08006d89 	.word	0x08006d89
 8006d40:	08006d89 	.word	0x08006d89
 8006d44:	08006d89 	.word	0x08006d89
 8006d48:	08006d89 	.word	0x08006d89
 8006d4c:	08006d89 	.word	0x08006d89
 8006d50:	08006d89 	.word	0x08006d89
 8006d54:	08006d81 	.word	0x08006d81
 8006d58:	2301      	movs	r3, #1
 8006d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d5e:	e0c3      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006d60:	2304      	movs	r3, #4
 8006d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d66:	e0bf      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006d68:	2308      	movs	r3, #8
 8006d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d6e:	e0bb      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006d70:	2310      	movs	r3, #16
 8006d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d76:	e0b7      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006d78:	2320      	movs	r3, #32
 8006d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d7e:	e0b3      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006d80:	2340      	movs	r3, #64	; 0x40
 8006d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d86:	e0af      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006d88:	2380      	movs	r3, #128	; 0x80
 8006d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d8e:	bf00      	nop
 8006d90:	e0aa      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a86      	ldr	r2, [pc, #536]	; (8006fb0 <UART_SetConfig+0x6a0>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d132      	bne.n	8006e02 <UART_SetConfig+0x4f2>
 8006d9c:	4b83      	ldr	r3, [pc, #524]	; (8006fac <UART_SetConfig+0x69c>)
 8006d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	2b05      	cmp	r3, #5
 8006da6:	d827      	bhi.n	8006df8 <UART_SetConfig+0x4e8>
 8006da8:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <UART_SetConfig+0x4a0>)
 8006daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dae:	bf00      	nop
 8006db0:	08006dc9 	.word	0x08006dc9
 8006db4:	08006dd1 	.word	0x08006dd1
 8006db8:	08006dd9 	.word	0x08006dd9
 8006dbc:	08006de1 	.word	0x08006de1
 8006dc0:	08006de9 	.word	0x08006de9
 8006dc4:	08006df1 	.word	0x08006df1
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dce:	e08b      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dd6:	e087      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006dd8:	2308      	movs	r3, #8
 8006dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dde:	e083      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006de0:	2310      	movs	r3, #16
 8006de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006de6:	e07f      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006de8:	2320      	movs	r3, #32
 8006dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dee:	e07b      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006df0:	2340      	movs	r3, #64	; 0x40
 8006df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006df6:	e077      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006df8:	2380      	movs	r3, #128	; 0x80
 8006dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dfe:	bf00      	nop
 8006e00:	e072      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a6b      	ldr	r2, [pc, #428]	; (8006fb4 <UART_SetConfig+0x6a4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d132      	bne.n	8006e72 <UART_SetConfig+0x562>
 8006e0c:	4b67      	ldr	r3, [pc, #412]	; (8006fac <UART_SetConfig+0x69c>)
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e10:	f003 0307 	and.w	r3, r3, #7
 8006e14:	2b05      	cmp	r3, #5
 8006e16:	d827      	bhi.n	8006e68 <UART_SetConfig+0x558>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <UART_SetConfig+0x510>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e39 	.word	0x08006e39
 8006e24:	08006e41 	.word	0x08006e41
 8006e28:	08006e49 	.word	0x08006e49
 8006e2c:	08006e51 	.word	0x08006e51
 8006e30:	08006e59 	.word	0x08006e59
 8006e34:	08006e61 	.word	0x08006e61
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e3e:	e053      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006e40:	2304      	movs	r3, #4
 8006e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e46:	e04f      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006e48:	2308      	movs	r3, #8
 8006e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e4e:	e04b      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006e50:	2310      	movs	r3, #16
 8006e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e56:	e047      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006e58:	2320      	movs	r3, #32
 8006e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e5e:	e043      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006e60:	2340      	movs	r3, #64	; 0x40
 8006e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e66:	e03f      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006e68:	2380      	movs	r3, #128	; 0x80
 8006e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e6e:	bf00      	nop
 8006e70:	e03a      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a50      	ldr	r2, [pc, #320]	; (8006fb8 <UART_SetConfig+0x6a8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d132      	bne.n	8006ee2 <UART_SetConfig+0x5d2>
 8006e7c:	4b4b      	ldr	r3, [pc, #300]	; (8006fac <UART_SetConfig+0x69c>)
 8006e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	2b05      	cmp	r3, #5
 8006e86:	d827      	bhi.n	8006ed8 <UART_SetConfig+0x5c8>
 8006e88:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <UART_SetConfig+0x580>)
 8006e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8e:	bf00      	nop
 8006e90:	08006ea9 	.word	0x08006ea9
 8006e94:	08006eb1 	.word	0x08006eb1
 8006e98:	08006eb9 	.word	0x08006eb9
 8006e9c:	08006ec1 	.word	0x08006ec1
 8006ea0:	08006ec9 	.word	0x08006ec9
 8006ea4:	08006ed1 	.word	0x08006ed1
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eae:	e01b      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eb6:	e017      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006eb8:	2308      	movs	r3, #8
 8006eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ebe:	e013      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006ec0:	2310      	movs	r3, #16
 8006ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ec6:	e00f      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006ec8:	2320      	movs	r3, #32
 8006eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ece:	e00b      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006ed0:	2340      	movs	r3, #64	; 0x40
 8006ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ed6:	e007      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ede:	bf00      	nop
 8006ee0:	e002      	b.n	8006ee8 <UART_SetConfig+0x5d8>
 8006ee2:	2380      	movs	r3, #128	; 0x80
 8006ee4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a32      	ldr	r2, [pc, #200]	; (8006fb8 <UART_SetConfig+0x6a8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	f040 86f7 	bne.w	8007ce2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ef4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	f000 80c0 	beq.w	800707e <UART_SetConfig+0x76e>
 8006efe:	2b08      	cmp	r3, #8
 8006f00:	dc04      	bgt.n	8006f0c <UART_SetConfig+0x5fc>
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d00c      	beq.n	8006f20 <UART_SetConfig+0x610>
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d065      	beq.n	8006fd6 <UART_SetConfig+0x6c6>
 8006f0a:	e27a      	b.n	8007402 <UART_SetConfig+0xaf2>
 8006f0c:	2b20      	cmp	r3, #32
 8006f0e:	f000 81b0 	beq.w	8007272 <UART_SetConfig+0x962>
 8006f12:	2b40      	cmp	r3, #64	; 0x40
 8006f14:	f000 821e 	beq.w	8007354 <UART_SetConfig+0xa44>
 8006f18:	2b10      	cmp	r3, #16
 8006f1a:	f000 8104 	beq.w	8007126 <UART_SetConfig+0x816>
 8006f1e:	e270      	b.n	8007402 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006f20:	f7fd fd2e 	bl	8004980 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f24:	4602      	mov	r2, r0
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d04e      	beq.n	8006fcc <UART_SetConfig+0x6bc>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d048      	beq.n	8006fc8 <UART_SetConfig+0x6b8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d042      	beq.n	8006fc4 <UART_SetConfig+0x6b4>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d03c      	beq.n	8006fc0 <UART_SetConfig+0x6b0>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d036      	beq.n	8006fbc <UART_SetConfig+0x6ac>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	2b05      	cmp	r3, #5
 8006f54:	d026      	beq.n	8006fa4 <UART_SetConfig+0x694>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	2b06      	cmp	r3, #6
 8006f5c:	d020      	beq.n	8006fa0 <UART_SetConfig+0x690>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	2b07      	cmp	r3, #7
 8006f64:	d01a      	beq.n	8006f9c <UART_SetConfig+0x68c>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	2b08      	cmp	r3, #8
 8006f6c:	d014      	beq.n	8006f98 <UART_SetConfig+0x688>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	2b09      	cmp	r3, #9
 8006f74:	d00e      	beq.n	8006f94 <UART_SetConfig+0x684>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	2b0a      	cmp	r3, #10
 8006f7c:	d008      	beq.n	8006f90 <UART_SetConfig+0x680>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	2b0b      	cmp	r3, #11
 8006f84:	d102      	bne.n	8006f8c <UART_SetConfig+0x67c>
 8006f86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f8a:	e020      	b.n	8006fce <UART_SetConfig+0x6be>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e01e      	b.n	8006fce <UART_SetConfig+0x6be>
 8006f90:	2380      	movs	r3, #128	; 0x80
 8006f92:	e01c      	b.n	8006fce <UART_SetConfig+0x6be>
 8006f94:	2340      	movs	r3, #64	; 0x40
 8006f96:	e01a      	b.n	8006fce <UART_SetConfig+0x6be>
 8006f98:	2320      	movs	r3, #32
 8006f9a:	e018      	b.n	8006fce <UART_SetConfig+0x6be>
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	e016      	b.n	8006fce <UART_SetConfig+0x6be>
 8006fa0:	230c      	movs	r3, #12
 8006fa2:	e014      	b.n	8006fce <UART_SetConfig+0x6be>
 8006fa4:	230a      	movs	r3, #10
 8006fa6:	e012      	b.n	8006fce <UART_SetConfig+0x6be>
 8006fa8:	40011400 	.word	0x40011400
 8006fac:	58024400 	.word	0x58024400
 8006fb0:	40007800 	.word	0x40007800
 8006fb4:	40007c00 	.word	0x40007c00
 8006fb8:	58000c00 	.word	0x58000c00
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	e006      	b.n	8006fce <UART_SetConfig+0x6be>
 8006fc0:	2306      	movs	r3, #6
 8006fc2:	e004      	b.n	8006fce <UART_SetConfig+0x6be>
 8006fc4:	2304      	movs	r3, #4
 8006fc6:	e002      	b.n	8006fce <UART_SetConfig+0x6be>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e000      	b.n	8006fce <UART_SetConfig+0x6be>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fd4:	e219      	b.n	800740a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd6:	f107 0314 	add.w	r3, r7, #20
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fd fce6 	bl	80049ac <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d044      	beq.n	8007074 <UART_SetConfig+0x764>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d03e      	beq.n	8007070 <UART_SetConfig+0x760>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d038      	beq.n	800706c <UART_SetConfig+0x75c>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d032      	beq.n	8007068 <UART_SetConfig+0x758>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	2b04      	cmp	r3, #4
 8007008:	d02c      	beq.n	8007064 <UART_SetConfig+0x754>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	2b05      	cmp	r3, #5
 8007010:	d026      	beq.n	8007060 <UART_SetConfig+0x750>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	2b06      	cmp	r3, #6
 8007018:	d020      	beq.n	800705c <UART_SetConfig+0x74c>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	2b07      	cmp	r3, #7
 8007020:	d01a      	beq.n	8007058 <UART_SetConfig+0x748>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	2b08      	cmp	r3, #8
 8007028:	d014      	beq.n	8007054 <UART_SetConfig+0x744>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	2b09      	cmp	r3, #9
 8007030:	d00e      	beq.n	8007050 <UART_SetConfig+0x740>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	2b0a      	cmp	r3, #10
 8007038:	d008      	beq.n	800704c <UART_SetConfig+0x73c>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	2b0b      	cmp	r3, #11
 8007040:	d102      	bne.n	8007048 <UART_SetConfig+0x738>
 8007042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007046:	e016      	b.n	8007076 <UART_SetConfig+0x766>
 8007048:	2301      	movs	r3, #1
 800704a:	e014      	b.n	8007076 <UART_SetConfig+0x766>
 800704c:	2380      	movs	r3, #128	; 0x80
 800704e:	e012      	b.n	8007076 <UART_SetConfig+0x766>
 8007050:	2340      	movs	r3, #64	; 0x40
 8007052:	e010      	b.n	8007076 <UART_SetConfig+0x766>
 8007054:	2320      	movs	r3, #32
 8007056:	e00e      	b.n	8007076 <UART_SetConfig+0x766>
 8007058:	2310      	movs	r3, #16
 800705a:	e00c      	b.n	8007076 <UART_SetConfig+0x766>
 800705c:	230c      	movs	r3, #12
 800705e:	e00a      	b.n	8007076 <UART_SetConfig+0x766>
 8007060:	230a      	movs	r3, #10
 8007062:	e008      	b.n	8007076 <UART_SetConfig+0x766>
 8007064:	2308      	movs	r3, #8
 8007066:	e006      	b.n	8007076 <UART_SetConfig+0x766>
 8007068:	2306      	movs	r3, #6
 800706a:	e004      	b.n	8007076 <UART_SetConfig+0x766>
 800706c:	2304      	movs	r3, #4
 800706e:	e002      	b.n	8007076 <UART_SetConfig+0x766>
 8007070:	2302      	movs	r3, #2
 8007072:	e000      	b.n	8007076 <UART_SetConfig+0x766>
 8007074:	2301      	movs	r3, #1
 8007076:	fbb2 f3f3 	udiv	r3, r2, r3
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800707c:	e1c5      	b.n	800740a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800707e:	f107 0308 	add.w	r3, r7, #8
 8007082:	4618      	mov	r0, r3
 8007084:	f7fd fdde 	bl	8004c44 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	2b00      	cmp	r3, #0
 8007090:	d044      	beq.n	800711c <UART_SetConfig+0x80c>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	2b01      	cmp	r3, #1
 8007098:	d03e      	beq.n	8007118 <UART_SetConfig+0x808>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d038      	beq.n	8007114 <UART_SetConfig+0x804>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d032      	beq.n	8007110 <UART_SetConfig+0x800>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d02c      	beq.n	800710c <UART_SetConfig+0x7fc>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	2b05      	cmp	r3, #5
 80070b8:	d026      	beq.n	8007108 <UART_SetConfig+0x7f8>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	2b06      	cmp	r3, #6
 80070c0:	d020      	beq.n	8007104 <UART_SetConfig+0x7f4>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	2b07      	cmp	r3, #7
 80070c8:	d01a      	beq.n	8007100 <UART_SetConfig+0x7f0>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	2b08      	cmp	r3, #8
 80070d0:	d014      	beq.n	80070fc <UART_SetConfig+0x7ec>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	2b09      	cmp	r3, #9
 80070d8:	d00e      	beq.n	80070f8 <UART_SetConfig+0x7e8>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	2b0a      	cmp	r3, #10
 80070e0:	d008      	beq.n	80070f4 <UART_SetConfig+0x7e4>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	2b0b      	cmp	r3, #11
 80070e8:	d102      	bne.n	80070f0 <UART_SetConfig+0x7e0>
 80070ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070ee:	e016      	b.n	800711e <UART_SetConfig+0x80e>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e014      	b.n	800711e <UART_SetConfig+0x80e>
 80070f4:	2380      	movs	r3, #128	; 0x80
 80070f6:	e012      	b.n	800711e <UART_SetConfig+0x80e>
 80070f8:	2340      	movs	r3, #64	; 0x40
 80070fa:	e010      	b.n	800711e <UART_SetConfig+0x80e>
 80070fc:	2320      	movs	r3, #32
 80070fe:	e00e      	b.n	800711e <UART_SetConfig+0x80e>
 8007100:	2310      	movs	r3, #16
 8007102:	e00c      	b.n	800711e <UART_SetConfig+0x80e>
 8007104:	230c      	movs	r3, #12
 8007106:	e00a      	b.n	800711e <UART_SetConfig+0x80e>
 8007108:	230a      	movs	r3, #10
 800710a:	e008      	b.n	800711e <UART_SetConfig+0x80e>
 800710c:	2308      	movs	r3, #8
 800710e:	e006      	b.n	800711e <UART_SetConfig+0x80e>
 8007110:	2306      	movs	r3, #6
 8007112:	e004      	b.n	800711e <UART_SetConfig+0x80e>
 8007114:	2304      	movs	r3, #4
 8007116:	e002      	b.n	800711e <UART_SetConfig+0x80e>
 8007118:	2302      	movs	r3, #2
 800711a:	e000      	b.n	800711e <UART_SetConfig+0x80e>
 800711c:	2301      	movs	r3, #1
 800711e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007122:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007124:	e171      	b.n	800740a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007126:	4b7a      	ldr	r3, [pc, #488]	; (8007310 <UART_SetConfig+0xa00>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0320 	and.w	r3, r3, #32
 800712e:	2b00      	cmp	r3, #0
 8007130:	d054      	beq.n	80071dc <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007132:	4b77      	ldr	r3, [pc, #476]	; (8007310 <UART_SetConfig+0xa00>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	08db      	lsrs	r3, r3, #3
 8007138:	f003 0303 	and.w	r3, r3, #3
 800713c:	4a75      	ldr	r2, [pc, #468]	; (8007314 <UART_SetConfig+0xa04>)
 800713e:	40da      	lsrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	2b00      	cmp	r3, #0
 8007146:	d044      	beq.n	80071d2 <UART_SetConfig+0x8c2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	2b01      	cmp	r3, #1
 800714e:	d03e      	beq.n	80071ce <UART_SetConfig+0x8be>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	2b02      	cmp	r3, #2
 8007156:	d038      	beq.n	80071ca <UART_SetConfig+0x8ba>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	2b03      	cmp	r3, #3
 800715e:	d032      	beq.n	80071c6 <UART_SetConfig+0x8b6>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	2b04      	cmp	r3, #4
 8007166:	d02c      	beq.n	80071c2 <UART_SetConfig+0x8b2>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	2b05      	cmp	r3, #5
 800716e:	d026      	beq.n	80071be <UART_SetConfig+0x8ae>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	2b06      	cmp	r3, #6
 8007176:	d020      	beq.n	80071ba <UART_SetConfig+0x8aa>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	2b07      	cmp	r3, #7
 800717e:	d01a      	beq.n	80071b6 <UART_SetConfig+0x8a6>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	2b08      	cmp	r3, #8
 8007186:	d014      	beq.n	80071b2 <UART_SetConfig+0x8a2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	2b09      	cmp	r3, #9
 800718e:	d00e      	beq.n	80071ae <UART_SetConfig+0x89e>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	2b0a      	cmp	r3, #10
 8007196:	d008      	beq.n	80071aa <UART_SetConfig+0x89a>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	2b0b      	cmp	r3, #11
 800719e:	d102      	bne.n	80071a6 <UART_SetConfig+0x896>
 80071a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071a4:	e016      	b.n	80071d4 <UART_SetConfig+0x8c4>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e014      	b.n	80071d4 <UART_SetConfig+0x8c4>
 80071aa:	2380      	movs	r3, #128	; 0x80
 80071ac:	e012      	b.n	80071d4 <UART_SetConfig+0x8c4>
 80071ae:	2340      	movs	r3, #64	; 0x40
 80071b0:	e010      	b.n	80071d4 <UART_SetConfig+0x8c4>
 80071b2:	2320      	movs	r3, #32
 80071b4:	e00e      	b.n	80071d4 <UART_SetConfig+0x8c4>
 80071b6:	2310      	movs	r3, #16
 80071b8:	e00c      	b.n	80071d4 <UART_SetConfig+0x8c4>
 80071ba:	230c      	movs	r3, #12
 80071bc:	e00a      	b.n	80071d4 <UART_SetConfig+0x8c4>
 80071be:	230a      	movs	r3, #10
 80071c0:	e008      	b.n	80071d4 <UART_SetConfig+0x8c4>
 80071c2:	2308      	movs	r3, #8
 80071c4:	e006      	b.n	80071d4 <UART_SetConfig+0x8c4>
 80071c6:	2306      	movs	r3, #6
 80071c8:	e004      	b.n	80071d4 <UART_SetConfig+0x8c4>
 80071ca:	2304      	movs	r3, #4
 80071cc:	e002      	b.n	80071d4 <UART_SetConfig+0x8c4>
 80071ce:	2302      	movs	r3, #2
 80071d0:	e000      	b.n	80071d4 <UART_SetConfig+0x8c4>
 80071d2:	2301      	movs	r3, #1
 80071d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80071da:	e116      	b.n	800740a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d043      	beq.n	800726c <UART_SetConfig+0x95c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d03d      	beq.n	8007268 <UART_SetConfig+0x958>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d037      	beq.n	8007264 <UART_SetConfig+0x954>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d031      	beq.n	8007260 <UART_SetConfig+0x950>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	2b04      	cmp	r3, #4
 8007202:	d02b      	beq.n	800725c <UART_SetConfig+0x94c>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	2b05      	cmp	r3, #5
 800720a:	d025      	beq.n	8007258 <UART_SetConfig+0x948>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	2b06      	cmp	r3, #6
 8007212:	d01f      	beq.n	8007254 <UART_SetConfig+0x944>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	2b07      	cmp	r3, #7
 800721a:	d019      	beq.n	8007250 <UART_SetConfig+0x940>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	2b08      	cmp	r3, #8
 8007222:	d013      	beq.n	800724c <UART_SetConfig+0x93c>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	2b09      	cmp	r3, #9
 800722a:	d00d      	beq.n	8007248 <UART_SetConfig+0x938>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	2b0a      	cmp	r3, #10
 8007232:	d007      	beq.n	8007244 <UART_SetConfig+0x934>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	2b0b      	cmp	r3, #11
 800723a:	d101      	bne.n	8007240 <UART_SetConfig+0x930>
 800723c:	4b36      	ldr	r3, [pc, #216]	; (8007318 <UART_SetConfig+0xa08>)
 800723e:	e016      	b.n	800726e <UART_SetConfig+0x95e>
 8007240:	4b34      	ldr	r3, [pc, #208]	; (8007314 <UART_SetConfig+0xa04>)
 8007242:	e014      	b.n	800726e <UART_SetConfig+0x95e>
 8007244:	4b35      	ldr	r3, [pc, #212]	; (800731c <UART_SetConfig+0xa0c>)
 8007246:	e012      	b.n	800726e <UART_SetConfig+0x95e>
 8007248:	4b35      	ldr	r3, [pc, #212]	; (8007320 <UART_SetConfig+0xa10>)
 800724a:	e010      	b.n	800726e <UART_SetConfig+0x95e>
 800724c:	4b35      	ldr	r3, [pc, #212]	; (8007324 <UART_SetConfig+0xa14>)
 800724e:	e00e      	b.n	800726e <UART_SetConfig+0x95e>
 8007250:	4b35      	ldr	r3, [pc, #212]	; (8007328 <UART_SetConfig+0xa18>)
 8007252:	e00c      	b.n	800726e <UART_SetConfig+0x95e>
 8007254:	4b35      	ldr	r3, [pc, #212]	; (800732c <UART_SetConfig+0xa1c>)
 8007256:	e00a      	b.n	800726e <UART_SetConfig+0x95e>
 8007258:	4b35      	ldr	r3, [pc, #212]	; (8007330 <UART_SetConfig+0xa20>)
 800725a:	e008      	b.n	800726e <UART_SetConfig+0x95e>
 800725c:	4b35      	ldr	r3, [pc, #212]	; (8007334 <UART_SetConfig+0xa24>)
 800725e:	e006      	b.n	800726e <UART_SetConfig+0x95e>
 8007260:	4b35      	ldr	r3, [pc, #212]	; (8007338 <UART_SetConfig+0xa28>)
 8007262:	e004      	b.n	800726e <UART_SetConfig+0x95e>
 8007264:	4b35      	ldr	r3, [pc, #212]	; (800733c <UART_SetConfig+0xa2c>)
 8007266:	e002      	b.n	800726e <UART_SetConfig+0x95e>
 8007268:	4b35      	ldr	r3, [pc, #212]	; (8007340 <UART_SetConfig+0xa30>)
 800726a:	e000      	b.n	800726e <UART_SetConfig+0x95e>
 800726c:	4b29      	ldr	r3, [pc, #164]	; (8007314 <UART_SetConfig+0xa04>)
 800726e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007270:	e0cb      	b.n	800740a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	2b00      	cmp	r3, #0
 8007278:	d046      	beq.n	8007308 <UART_SetConfig+0x9f8>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	2b01      	cmp	r3, #1
 8007280:	d040      	beq.n	8007304 <UART_SetConfig+0x9f4>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2b02      	cmp	r3, #2
 8007288:	d03a      	beq.n	8007300 <UART_SetConfig+0x9f0>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	2b03      	cmp	r3, #3
 8007290:	d034      	beq.n	80072fc <UART_SetConfig+0x9ec>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	2b04      	cmp	r3, #4
 8007298:	d02e      	beq.n	80072f8 <UART_SetConfig+0x9e8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	2b05      	cmp	r3, #5
 80072a0:	d028      	beq.n	80072f4 <UART_SetConfig+0x9e4>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	2b06      	cmp	r3, #6
 80072a8:	d022      	beq.n	80072f0 <UART_SetConfig+0x9e0>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2b07      	cmp	r3, #7
 80072b0:	d01c      	beq.n	80072ec <UART_SetConfig+0x9dc>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d016      	beq.n	80072e8 <UART_SetConfig+0x9d8>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	2b09      	cmp	r3, #9
 80072c0:	d00f      	beq.n	80072e2 <UART_SetConfig+0x9d2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	2b0a      	cmp	r3, #10
 80072c8:	d008      	beq.n	80072dc <UART_SetConfig+0x9cc>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	2b0b      	cmp	r3, #11
 80072d0:	d102      	bne.n	80072d8 <UART_SetConfig+0x9c8>
 80072d2:	f643 5309 	movw	r3, #15625	; 0x3d09
 80072d6:	e018      	b.n	800730a <UART_SetConfig+0x9fa>
 80072d8:	4b13      	ldr	r3, [pc, #76]	; (8007328 <UART_SetConfig+0xa18>)
 80072da:	e016      	b.n	800730a <UART_SetConfig+0x9fa>
 80072dc:	f647 2312 	movw	r3, #31250	; 0x7a12
 80072e0:	e013      	b.n	800730a <UART_SetConfig+0x9fa>
 80072e2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80072e6:	e010      	b.n	800730a <UART_SetConfig+0x9fa>
 80072e8:	4b16      	ldr	r3, [pc, #88]	; (8007344 <UART_SetConfig+0xa34>)
 80072ea:	e00e      	b.n	800730a <UART_SetConfig+0x9fa>
 80072ec:	4b0a      	ldr	r3, [pc, #40]	; (8007318 <UART_SetConfig+0xa08>)
 80072ee:	e00c      	b.n	800730a <UART_SetConfig+0x9fa>
 80072f0:	4b15      	ldr	r3, [pc, #84]	; (8007348 <UART_SetConfig+0xa38>)
 80072f2:	e00a      	b.n	800730a <UART_SetConfig+0x9fa>
 80072f4:	4b15      	ldr	r3, [pc, #84]	; (800734c <UART_SetConfig+0xa3c>)
 80072f6:	e008      	b.n	800730a <UART_SetConfig+0x9fa>
 80072f8:	4b08      	ldr	r3, [pc, #32]	; (800731c <UART_SetConfig+0xa0c>)
 80072fa:	e006      	b.n	800730a <UART_SetConfig+0x9fa>
 80072fc:	4b14      	ldr	r3, [pc, #80]	; (8007350 <UART_SetConfig+0xa40>)
 80072fe:	e004      	b.n	800730a <UART_SetConfig+0x9fa>
 8007300:	4b07      	ldr	r3, [pc, #28]	; (8007320 <UART_SetConfig+0xa10>)
 8007302:	e002      	b.n	800730a <UART_SetConfig+0x9fa>
 8007304:	4b07      	ldr	r3, [pc, #28]	; (8007324 <UART_SetConfig+0xa14>)
 8007306:	e000      	b.n	800730a <UART_SetConfig+0x9fa>
 8007308:	4b07      	ldr	r3, [pc, #28]	; (8007328 <UART_SetConfig+0xa18>)
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800730c:	e07d      	b.n	800740a <UART_SetConfig+0xafa>
 800730e:	bf00      	nop
 8007310:	58024400 	.word	0x58024400
 8007314:	03d09000 	.word	0x03d09000
 8007318:	0003d090 	.word	0x0003d090
 800731c:	0007a120 	.word	0x0007a120
 8007320:	000f4240 	.word	0x000f4240
 8007324:	001e8480 	.word	0x001e8480
 8007328:	003d0900 	.word	0x003d0900
 800732c:	00516155 	.word	0x00516155
 8007330:	0061a800 	.word	0x0061a800
 8007334:	007a1200 	.word	0x007a1200
 8007338:	00a2c2aa 	.word	0x00a2c2aa
 800733c:	00f42400 	.word	0x00f42400
 8007340:	01e84800 	.word	0x01e84800
 8007344:	0001e848 	.word	0x0001e848
 8007348:	00051615 	.word	0x00051615
 800734c:	00061a80 	.word	0x00061a80
 8007350:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	d04e      	beq.n	80073fa <UART_SetConfig+0xaea>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	2b01      	cmp	r3, #1
 8007362:	d047      	beq.n	80073f4 <UART_SetConfig+0xae4>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	2b02      	cmp	r3, #2
 800736a:	d040      	beq.n	80073ee <UART_SetConfig+0xade>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	2b03      	cmp	r3, #3
 8007372:	d039      	beq.n	80073e8 <UART_SetConfig+0xad8>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	2b04      	cmp	r3, #4
 800737a:	d032      	beq.n	80073e2 <UART_SetConfig+0xad2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	2b05      	cmp	r3, #5
 8007382:	d02b      	beq.n	80073dc <UART_SetConfig+0xacc>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	2b06      	cmp	r3, #6
 800738a:	d024      	beq.n	80073d6 <UART_SetConfig+0xac6>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	2b07      	cmp	r3, #7
 8007392:	d01d      	beq.n	80073d0 <UART_SetConfig+0xac0>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b08      	cmp	r3, #8
 800739a:	d016      	beq.n	80073ca <UART_SetConfig+0xaba>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	2b09      	cmp	r3, #9
 80073a2:	d00f      	beq.n	80073c4 <UART_SetConfig+0xab4>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	2b0a      	cmp	r3, #10
 80073aa:	d008      	beq.n	80073be <UART_SetConfig+0xaae>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	2b0b      	cmp	r3, #11
 80073b2:	d101      	bne.n	80073b8 <UART_SetConfig+0xaa8>
 80073b4:	2380      	movs	r3, #128	; 0x80
 80073b6:	e022      	b.n	80073fe <UART_SetConfig+0xaee>
 80073b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073bc:	e01f      	b.n	80073fe <UART_SetConfig+0xaee>
 80073be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073c2:	e01c      	b.n	80073fe <UART_SetConfig+0xaee>
 80073c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073c8:	e019      	b.n	80073fe <UART_SetConfig+0xaee>
 80073ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ce:	e016      	b.n	80073fe <UART_SetConfig+0xaee>
 80073d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073d4:	e013      	b.n	80073fe <UART_SetConfig+0xaee>
 80073d6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80073da:	e010      	b.n	80073fe <UART_SetConfig+0xaee>
 80073dc:	f640 43cc 	movw	r3, #3276	; 0xccc
 80073e0:	e00d      	b.n	80073fe <UART_SetConfig+0xaee>
 80073e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073e6:	e00a      	b.n	80073fe <UART_SetConfig+0xaee>
 80073e8:	f241 5355 	movw	r3, #5461	; 0x1555
 80073ec:	e007      	b.n	80073fe <UART_SetConfig+0xaee>
 80073ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073f2:	e004      	b.n	80073fe <UART_SetConfig+0xaee>
 80073f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073f8:	e001      	b.n	80073fe <UART_SetConfig+0xaee>
 80073fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007400:	e003      	b.n	800740a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8007408:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	2b00      	cmp	r3, #0
 800740e:	f001 83e4 	beq.w	8008bda <UART_SetConfig+0x22ca>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	4613      	mov	r3, r2
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	4413      	add	r3, r2
 800741c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800741e:	429a      	cmp	r2, r3
 8007420:	d305      	bcc.n	800742e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	429a      	cmp	r2, r3
 800742c:	d904      	bls.n	8007438 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007434:	f001 bbd1 	b.w	8008bda <UART_SetConfig+0x22ca>
      }
      else
      {
        switch (clocksource)
 8007438:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800743c:	2b08      	cmp	r3, #8
 800743e:	f000 8153 	beq.w	80076e8 <UART_SetConfig+0xdd8>
 8007442:	2b08      	cmp	r3, #8
 8007444:	dc06      	bgt.n	8007454 <UART_SetConfig+0xb44>
 8007446:	2b02      	cmp	r3, #2
 8007448:	d00f      	beq.n	800746a <UART_SetConfig+0xb5a>
 800744a:	2b04      	cmp	r3, #4
 800744c:	f000 80ab 	beq.w	80075a6 <UART_SetConfig+0xc96>
 8007450:	f000 bc30 	b.w	8007cb4 <UART_SetConfig+0x13a4>
 8007454:	2b20      	cmp	r3, #32
 8007456:	f000 832d 	beq.w	8007ab4 <UART_SetConfig+0x11a4>
 800745a:	2b40      	cmp	r3, #64	; 0x40
 800745c:	f000 83a5 	beq.w	8007baa <UART_SetConfig+0x129a>
 8007460:	2b10      	cmp	r3, #16
 8007462:	f000 81e2 	beq.w	800782a <UART_SetConfig+0xf1a>
 8007466:	f000 bc25 	b.w	8007cb4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800746a:	f7fd fa89 	bl	8004980 <HAL_RCCEx_GetD3PCLK1Freq>
 800746e:	4603      	mov	r3, r0
 8007470:	4618      	mov	r0, r3
 8007472:	f04f 0100 	mov.w	r1, #0
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	2b00      	cmp	r3, #0
 800747c:	d067      	beq.n	800754e <UART_SetConfig+0xc3e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	2b01      	cmp	r3, #1
 8007484:	d05e      	beq.n	8007544 <UART_SetConfig+0xc34>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	2b02      	cmp	r3, #2
 800748c:	d055      	beq.n	800753a <UART_SetConfig+0xc2a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	2b03      	cmp	r3, #3
 8007494:	d04c      	beq.n	8007530 <UART_SetConfig+0xc20>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749a:	2b04      	cmp	r3, #4
 800749c:	d043      	beq.n	8007526 <UART_SetConfig+0xc16>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	2b05      	cmp	r3, #5
 80074a4:	d03a      	beq.n	800751c <UART_SetConfig+0xc0c>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	2b06      	cmp	r3, #6
 80074ac:	d031      	beq.n	8007512 <UART_SetConfig+0xc02>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	2b07      	cmp	r3, #7
 80074b4:	d028      	beq.n	8007508 <UART_SetConfig+0xbf8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	2b08      	cmp	r3, #8
 80074bc:	d01f      	beq.n	80074fe <UART_SetConfig+0xbee>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	2b09      	cmp	r3, #9
 80074c4:	d016      	beq.n	80074f4 <UART_SetConfig+0xbe4>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	2b0a      	cmp	r3, #10
 80074cc:	d00d      	beq.n	80074ea <UART_SetConfig+0xbda>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	2b0b      	cmp	r3, #11
 80074d4:	d104      	bne.n	80074e0 <UART_SetConfig+0xbd0>
 80074d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074da:	f04f 0400 	mov.w	r4, #0
 80074de:	e03a      	b.n	8007556 <UART_SetConfig+0xc46>
 80074e0:	f04f 0301 	mov.w	r3, #1
 80074e4:	f04f 0400 	mov.w	r4, #0
 80074e8:	e035      	b.n	8007556 <UART_SetConfig+0xc46>
 80074ea:	f04f 0380 	mov.w	r3, #128	; 0x80
 80074ee:	f04f 0400 	mov.w	r4, #0
 80074f2:	e030      	b.n	8007556 <UART_SetConfig+0xc46>
 80074f4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80074f8:	f04f 0400 	mov.w	r4, #0
 80074fc:	e02b      	b.n	8007556 <UART_SetConfig+0xc46>
 80074fe:	f04f 0320 	mov.w	r3, #32
 8007502:	f04f 0400 	mov.w	r4, #0
 8007506:	e026      	b.n	8007556 <UART_SetConfig+0xc46>
 8007508:	f04f 0310 	mov.w	r3, #16
 800750c:	f04f 0400 	mov.w	r4, #0
 8007510:	e021      	b.n	8007556 <UART_SetConfig+0xc46>
 8007512:	f04f 030c 	mov.w	r3, #12
 8007516:	f04f 0400 	mov.w	r4, #0
 800751a:	e01c      	b.n	8007556 <UART_SetConfig+0xc46>
 800751c:	f04f 030a 	mov.w	r3, #10
 8007520:	f04f 0400 	mov.w	r4, #0
 8007524:	e017      	b.n	8007556 <UART_SetConfig+0xc46>
 8007526:	f04f 0308 	mov.w	r3, #8
 800752a:	f04f 0400 	mov.w	r4, #0
 800752e:	e012      	b.n	8007556 <UART_SetConfig+0xc46>
 8007530:	f04f 0306 	mov.w	r3, #6
 8007534:	f04f 0400 	mov.w	r4, #0
 8007538:	e00d      	b.n	8007556 <UART_SetConfig+0xc46>
 800753a:	f04f 0304 	mov.w	r3, #4
 800753e:	f04f 0400 	mov.w	r4, #0
 8007542:	e008      	b.n	8007556 <UART_SetConfig+0xc46>
 8007544:	f04f 0302 	mov.w	r3, #2
 8007548:	f04f 0400 	mov.w	r4, #0
 800754c:	e003      	b.n	8007556 <UART_SetConfig+0xc46>
 800754e:	f04f 0301 	mov.w	r3, #1
 8007552:	f04f 0400 	mov.w	r4, #0
 8007556:	461a      	mov	r2, r3
 8007558:	4623      	mov	r3, r4
 800755a:	f7f8 fec5 	bl	80002e8 <__aeabi_uldivmod>
 800755e:	4603      	mov	r3, r0
 8007560:	460c      	mov	r4, r1
 8007562:	4619      	mov	r1, r3
 8007564:	4622      	mov	r2, r4
 8007566:	f04f 0300 	mov.w	r3, #0
 800756a:	f04f 0400 	mov.w	r4, #0
 800756e:	0214      	lsls	r4, r2, #8
 8007570:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007574:	020b      	lsls	r3, r1, #8
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6852      	ldr	r2, [r2, #4]
 800757a:	0852      	lsrs	r2, r2, #1
 800757c:	4611      	mov	r1, r2
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	eb13 0b01 	adds.w	fp, r3, r1
 8007586:	eb44 0c02 	adc.w	ip, r4, r2
 800758a:	4658      	mov	r0, fp
 800758c:	4661      	mov	r1, ip
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f04f 0400 	mov.w	r4, #0
 8007596:	461a      	mov	r2, r3
 8007598:	4623      	mov	r3, r4
 800759a:	f7f8 fea5 	bl	80002e8 <__aeabi_uldivmod>
 800759e:	4603      	mov	r3, r0
 80075a0:	460c      	mov	r4, r1
 80075a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80075a4:	e38a      	b.n	8007cbc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075a6:	f107 0314 	add.w	r3, r7, #20
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fd f9fe 	bl	80049ac <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f04f 0100 	mov.w	r1, #0
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d067      	beq.n	8007690 <UART_SetConfig+0xd80>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d05e      	beq.n	8007686 <UART_SetConfig+0xd76>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d055      	beq.n	800767c <UART_SetConfig+0xd6c>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d04c      	beq.n	8007672 <UART_SetConfig+0xd62>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d043      	beq.n	8007668 <UART_SetConfig+0xd58>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	2b05      	cmp	r3, #5
 80075e6:	d03a      	beq.n	800765e <UART_SetConfig+0xd4e>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	2b06      	cmp	r3, #6
 80075ee:	d031      	beq.n	8007654 <UART_SetConfig+0xd44>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	2b07      	cmp	r3, #7
 80075f6:	d028      	beq.n	800764a <UART_SetConfig+0xd3a>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	2b08      	cmp	r3, #8
 80075fe:	d01f      	beq.n	8007640 <UART_SetConfig+0xd30>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	2b09      	cmp	r3, #9
 8007606:	d016      	beq.n	8007636 <UART_SetConfig+0xd26>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	2b0a      	cmp	r3, #10
 800760e:	d00d      	beq.n	800762c <UART_SetConfig+0xd1c>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	2b0b      	cmp	r3, #11
 8007616:	d104      	bne.n	8007622 <UART_SetConfig+0xd12>
 8007618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800761c:	f04f 0400 	mov.w	r4, #0
 8007620:	e03a      	b.n	8007698 <UART_SetConfig+0xd88>
 8007622:	f04f 0301 	mov.w	r3, #1
 8007626:	f04f 0400 	mov.w	r4, #0
 800762a:	e035      	b.n	8007698 <UART_SetConfig+0xd88>
 800762c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007630:	f04f 0400 	mov.w	r4, #0
 8007634:	e030      	b.n	8007698 <UART_SetConfig+0xd88>
 8007636:	f04f 0340 	mov.w	r3, #64	; 0x40
 800763a:	f04f 0400 	mov.w	r4, #0
 800763e:	e02b      	b.n	8007698 <UART_SetConfig+0xd88>
 8007640:	f04f 0320 	mov.w	r3, #32
 8007644:	f04f 0400 	mov.w	r4, #0
 8007648:	e026      	b.n	8007698 <UART_SetConfig+0xd88>
 800764a:	f04f 0310 	mov.w	r3, #16
 800764e:	f04f 0400 	mov.w	r4, #0
 8007652:	e021      	b.n	8007698 <UART_SetConfig+0xd88>
 8007654:	f04f 030c 	mov.w	r3, #12
 8007658:	f04f 0400 	mov.w	r4, #0
 800765c:	e01c      	b.n	8007698 <UART_SetConfig+0xd88>
 800765e:	f04f 030a 	mov.w	r3, #10
 8007662:	f04f 0400 	mov.w	r4, #0
 8007666:	e017      	b.n	8007698 <UART_SetConfig+0xd88>
 8007668:	f04f 0308 	mov.w	r3, #8
 800766c:	f04f 0400 	mov.w	r4, #0
 8007670:	e012      	b.n	8007698 <UART_SetConfig+0xd88>
 8007672:	f04f 0306 	mov.w	r3, #6
 8007676:	f04f 0400 	mov.w	r4, #0
 800767a:	e00d      	b.n	8007698 <UART_SetConfig+0xd88>
 800767c:	f04f 0304 	mov.w	r3, #4
 8007680:	f04f 0400 	mov.w	r4, #0
 8007684:	e008      	b.n	8007698 <UART_SetConfig+0xd88>
 8007686:	f04f 0302 	mov.w	r3, #2
 800768a:	f04f 0400 	mov.w	r4, #0
 800768e:	e003      	b.n	8007698 <UART_SetConfig+0xd88>
 8007690:	f04f 0301 	mov.w	r3, #1
 8007694:	f04f 0400 	mov.w	r4, #0
 8007698:	461a      	mov	r2, r3
 800769a:	4623      	mov	r3, r4
 800769c:	f7f8 fe24 	bl	80002e8 <__aeabi_uldivmod>
 80076a0:	4603      	mov	r3, r0
 80076a2:	460c      	mov	r4, r1
 80076a4:	4619      	mov	r1, r3
 80076a6:	4622      	mov	r2, r4
 80076a8:	f04f 0300 	mov.w	r3, #0
 80076ac:	f04f 0400 	mov.w	r4, #0
 80076b0:	0214      	lsls	r4, r2, #8
 80076b2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80076b6:	020b      	lsls	r3, r1, #8
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6852      	ldr	r2, [r2, #4]
 80076bc:	0852      	lsrs	r2, r2, #1
 80076be:	4611      	mov	r1, r2
 80076c0:	f04f 0200 	mov.w	r2, #0
 80076c4:	eb13 0b01 	adds.w	fp, r3, r1
 80076c8:	eb44 0c02 	adc.w	ip, r4, r2
 80076cc:	4658      	mov	r0, fp
 80076ce:	4661      	mov	r1, ip
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f04f 0400 	mov.w	r4, #0
 80076d8:	461a      	mov	r2, r3
 80076da:	4623      	mov	r3, r4
 80076dc:	f7f8 fe04 	bl	80002e8 <__aeabi_uldivmod>
 80076e0:	4603      	mov	r3, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80076e6:	e2e9      	b.n	8007cbc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076e8:	f107 0308 	add.w	r3, r7, #8
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fd faa9 	bl	8004c44 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f04f 0100 	mov.w	r1, #0
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d067      	beq.n	80077d2 <UART_SetConfig+0xec2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	2b01      	cmp	r3, #1
 8007708:	d05e      	beq.n	80077c8 <UART_SetConfig+0xeb8>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	2b02      	cmp	r3, #2
 8007710:	d055      	beq.n	80077be <UART_SetConfig+0xeae>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	2b03      	cmp	r3, #3
 8007718:	d04c      	beq.n	80077b4 <UART_SetConfig+0xea4>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	2b04      	cmp	r3, #4
 8007720:	d043      	beq.n	80077aa <UART_SetConfig+0xe9a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	2b05      	cmp	r3, #5
 8007728:	d03a      	beq.n	80077a0 <UART_SetConfig+0xe90>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	2b06      	cmp	r3, #6
 8007730:	d031      	beq.n	8007796 <UART_SetConfig+0xe86>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	2b07      	cmp	r3, #7
 8007738:	d028      	beq.n	800778c <UART_SetConfig+0xe7c>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	2b08      	cmp	r3, #8
 8007740:	d01f      	beq.n	8007782 <UART_SetConfig+0xe72>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	2b09      	cmp	r3, #9
 8007748:	d016      	beq.n	8007778 <UART_SetConfig+0xe68>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	2b0a      	cmp	r3, #10
 8007750:	d00d      	beq.n	800776e <UART_SetConfig+0xe5e>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	2b0b      	cmp	r3, #11
 8007758:	d104      	bne.n	8007764 <UART_SetConfig+0xe54>
 800775a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800775e:	f04f 0400 	mov.w	r4, #0
 8007762:	e03a      	b.n	80077da <UART_SetConfig+0xeca>
 8007764:	f04f 0301 	mov.w	r3, #1
 8007768:	f04f 0400 	mov.w	r4, #0
 800776c:	e035      	b.n	80077da <UART_SetConfig+0xeca>
 800776e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007772:	f04f 0400 	mov.w	r4, #0
 8007776:	e030      	b.n	80077da <UART_SetConfig+0xeca>
 8007778:	f04f 0340 	mov.w	r3, #64	; 0x40
 800777c:	f04f 0400 	mov.w	r4, #0
 8007780:	e02b      	b.n	80077da <UART_SetConfig+0xeca>
 8007782:	f04f 0320 	mov.w	r3, #32
 8007786:	f04f 0400 	mov.w	r4, #0
 800778a:	e026      	b.n	80077da <UART_SetConfig+0xeca>
 800778c:	f04f 0310 	mov.w	r3, #16
 8007790:	f04f 0400 	mov.w	r4, #0
 8007794:	e021      	b.n	80077da <UART_SetConfig+0xeca>
 8007796:	f04f 030c 	mov.w	r3, #12
 800779a:	f04f 0400 	mov.w	r4, #0
 800779e:	e01c      	b.n	80077da <UART_SetConfig+0xeca>
 80077a0:	f04f 030a 	mov.w	r3, #10
 80077a4:	f04f 0400 	mov.w	r4, #0
 80077a8:	e017      	b.n	80077da <UART_SetConfig+0xeca>
 80077aa:	f04f 0308 	mov.w	r3, #8
 80077ae:	f04f 0400 	mov.w	r4, #0
 80077b2:	e012      	b.n	80077da <UART_SetConfig+0xeca>
 80077b4:	f04f 0306 	mov.w	r3, #6
 80077b8:	f04f 0400 	mov.w	r4, #0
 80077bc:	e00d      	b.n	80077da <UART_SetConfig+0xeca>
 80077be:	f04f 0304 	mov.w	r3, #4
 80077c2:	f04f 0400 	mov.w	r4, #0
 80077c6:	e008      	b.n	80077da <UART_SetConfig+0xeca>
 80077c8:	f04f 0302 	mov.w	r3, #2
 80077cc:	f04f 0400 	mov.w	r4, #0
 80077d0:	e003      	b.n	80077da <UART_SetConfig+0xeca>
 80077d2:	f04f 0301 	mov.w	r3, #1
 80077d6:	f04f 0400 	mov.w	r4, #0
 80077da:	461a      	mov	r2, r3
 80077dc:	4623      	mov	r3, r4
 80077de:	f7f8 fd83 	bl	80002e8 <__aeabi_uldivmod>
 80077e2:	4603      	mov	r3, r0
 80077e4:	460c      	mov	r4, r1
 80077e6:	4619      	mov	r1, r3
 80077e8:	4622      	mov	r2, r4
 80077ea:	f04f 0300 	mov.w	r3, #0
 80077ee:	f04f 0400 	mov.w	r4, #0
 80077f2:	0214      	lsls	r4, r2, #8
 80077f4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80077f8:	020b      	lsls	r3, r1, #8
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6852      	ldr	r2, [r2, #4]
 80077fe:	0852      	lsrs	r2, r2, #1
 8007800:	4611      	mov	r1, r2
 8007802:	f04f 0200 	mov.w	r2, #0
 8007806:	eb13 0b01 	adds.w	fp, r3, r1
 800780a:	eb44 0c02 	adc.w	ip, r4, r2
 800780e:	4658      	mov	r0, fp
 8007810:	4661      	mov	r1, ip
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f04f 0400 	mov.w	r4, #0
 800781a:	461a      	mov	r2, r3
 800781c:	4623      	mov	r3, r4
 800781e:	f7f8 fd63 	bl	80002e8 <__aeabi_uldivmod>
 8007822:	4603      	mov	r3, r0
 8007824:	460c      	mov	r4, r1
 8007826:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8007828:	e248      	b.n	8007cbc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800782a:	4b97      	ldr	r3, [pc, #604]	; (8007a88 <UART_SetConfig+0x1178>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 80a3 	beq.w	800797e <UART_SetConfig+0x106e>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007838:	4b93      	ldr	r3, [pc, #588]	; (8007a88 <UART_SetConfig+0x1178>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	08db      	lsrs	r3, r3, #3
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	4a92      	ldr	r2, [pc, #584]	; (8007a8c <UART_SetConfig+0x117c>)
 8007844:	fa22 f303 	lsr.w	r3, r2, r3
 8007848:	4618      	mov	r0, r3
 800784a:	f04f 0100 	mov.w	r1, #0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	2b00      	cmp	r3, #0
 8007854:	d067      	beq.n	8007926 <UART_SetConfig+0x1016>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	2b01      	cmp	r3, #1
 800785c:	d05e      	beq.n	800791c <UART_SetConfig+0x100c>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	2b02      	cmp	r3, #2
 8007864:	d055      	beq.n	8007912 <UART_SetConfig+0x1002>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	2b03      	cmp	r3, #3
 800786c:	d04c      	beq.n	8007908 <UART_SetConfig+0xff8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	2b04      	cmp	r3, #4
 8007874:	d043      	beq.n	80078fe <UART_SetConfig+0xfee>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	2b05      	cmp	r3, #5
 800787c:	d03a      	beq.n	80078f4 <UART_SetConfig+0xfe4>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	2b06      	cmp	r3, #6
 8007884:	d031      	beq.n	80078ea <UART_SetConfig+0xfda>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	2b07      	cmp	r3, #7
 800788c:	d028      	beq.n	80078e0 <UART_SetConfig+0xfd0>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	2b08      	cmp	r3, #8
 8007894:	d01f      	beq.n	80078d6 <UART_SetConfig+0xfc6>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	2b09      	cmp	r3, #9
 800789c:	d016      	beq.n	80078cc <UART_SetConfig+0xfbc>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	2b0a      	cmp	r3, #10
 80078a4:	d00d      	beq.n	80078c2 <UART_SetConfig+0xfb2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	2b0b      	cmp	r3, #11
 80078ac:	d104      	bne.n	80078b8 <UART_SetConfig+0xfa8>
 80078ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078b2:	f04f 0400 	mov.w	r4, #0
 80078b6:	e03a      	b.n	800792e <UART_SetConfig+0x101e>
 80078b8:	f04f 0301 	mov.w	r3, #1
 80078bc:	f04f 0400 	mov.w	r4, #0
 80078c0:	e035      	b.n	800792e <UART_SetConfig+0x101e>
 80078c2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80078c6:	f04f 0400 	mov.w	r4, #0
 80078ca:	e030      	b.n	800792e <UART_SetConfig+0x101e>
 80078cc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80078d0:	f04f 0400 	mov.w	r4, #0
 80078d4:	e02b      	b.n	800792e <UART_SetConfig+0x101e>
 80078d6:	f04f 0320 	mov.w	r3, #32
 80078da:	f04f 0400 	mov.w	r4, #0
 80078de:	e026      	b.n	800792e <UART_SetConfig+0x101e>
 80078e0:	f04f 0310 	mov.w	r3, #16
 80078e4:	f04f 0400 	mov.w	r4, #0
 80078e8:	e021      	b.n	800792e <UART_SetConfig+0x101e>
 80078ea:	f04f 030c 	mov.w	r3, #12
 80078ee:	f04f 0400 	mov.w	r4, #0
 80078f2:	e01c      	b.n	800792e <UART_SetConfig+0x101e>
 80078f4:	f04f 030a 	mov.w	r3, #10
 80078f8:	f04f 0400 	mov.w	r4, #0
 80078fc:	e017      	b.n	800792e <UART_SetConfig+0x101e>
 80078fe:	f04f 0308 	mov.w	r3, #8
 8007902:	f04f 0400 	mov.w	r4, #0
 8007906:	e012      	b.n	800792e <UART_SetConfig+0x101e>
 8007908:	f04f 0306 	mov.w	r3, #6
 800790c:	f04f 0400 	mov.w	r4, #0
 8007910:	e00d      	b.n	800792e <UART_SetConfig+0x101e>
 8007912:	f04f 0304 	mov.w	r3, #4
 8007916:	f04f 0400 	mov.w	r4, #0
 800791a:	e008      	b.n	800792e <UART_SetConfig+0x101e>
 800791c:	f04f 0302 	mov.w	r3, #2
 8007920:	f04f 0400 	mov.w	r4, #0
 8007924:	e003      	b.n	800792e <UART_SetConfig+0x101e>
 8007926:	f04f 0301 	mov.w	r3, #1
 800792a:	f04f 0400 	mov.w	r4, #0
 800792e:	461a      	mov	r2, r3
 8007930:	4623      	mov	r3, r4
 8007932:	f7f8 fcd9 	bl	80002e8 <__aeabi_uldivmod>
 8007936:	4603      	mov	r3, r0
 8007938:	460c      	mov	r4, r1
 800793a:	4619      	mov	r1, r3
 800793c:	4622      	mov	r2, r4
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	f04f 0400 	mov.w	r4, #0
 8007946:	0214      	lsls	r4, r2, #8
 8007948:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800794c:	020b      	lsls	r3, r1, #8
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6852      	ldr	r2, [r2, #4]
 8007952:	0852      	lsrs	r2, r2, #1
 8007954:	4611      	mov	r1, r2
 8007956:	f04f 0200 	mov.w	r2, #0
 800795a:	eb13 0b01 	adds.w	fp, r3, r1
 800795e:	eb44 0c02 	adc.w	ip, r4, r2
 8007962:	4658      	mov	r0, fp
 8007964:	4661      	mov	r1, ip
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f04f 0400 	mov.w	r4, #0
 800796e:	461a      	mov	r2, r3
 8007970:	4623      	mov	r3, r4
 8007972:	f7f8 fcb9 	bl	80002e8 <__aeabi_uldivmod>
 8007976:	4603      	mov	r3, r0
 8007978:	460c      	mov	r4, r1
 800797a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800797c:	e19e      	b.n	8007cbc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	2b00      	cmp	r3, #0
 8007984:	d05b      	beq.n	8007a3e <UART_SetConfig+0x112e>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	2b01      	cmp	r3, #1
 800798c:	d053      	beq.n	8007a36 <UART_SetConfig+0x1126>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	2b02      	cmp	r3, #2
 8007994:	d04b      	beq.n	8007a2e <UART_SetConfig+0x111e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	2b03      	cmp	r3, #3
 800799c:	d043      	beq.n	8007a26 <UART_SetConfig+0x1116>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d03b      	beq.n	8007a1e <UART_SetConfig+0x110e>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079aa:	2b05      	cmp	r3, #5
 80079ac:	d033      	beq.n	8007a16 <UART_SetConfig+0x1106>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	2b06      	cmp	r3, #6
 80079b4:	d02b      	beq.n	8007a0e <UART_SetConfig+0x10fe>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	2b07      	cmp	r3, #7
 80079bc:	d023      	beq.n	8007a06 <UART_SetConfig+0x10f6>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d01b      	beq.n	80079fe <UART_SetConfig+0x10ee>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	2b09      	cmp	r3, #9
 80079cc:	d013      	beq.n	80079f6 <UART_SetConfig+0x10e6>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	2b0a      	cmp	r3, #10
 80079d4:	d00b      	beq.n	80079ee <UART_SetConfig+0x10de>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	2b0b      	cmp	r3, #11
 80079dc:	d103      	bne.n	80079e6 <UART_SetConfig+0x10d6>
 80079de:	4b2b      	ldr	r3, [pc, #172]	; (8007a8c <UART_SetConfig+0x117c>)
 80079e0:	f04f 0400 	mov.w	r4, #0
 80079e4:	e02e      	b.n	8007a44 <UART_SetConfig+0x1134>
 80079e6:	4b2a      	ldr	r3, [pc, #168]	; (8007a90 <UART_SetConfig+0x1180>)
 80079e8:	f04f 0403 	mov.w	r4, #3
 80079ec:	e02a      	b.n	8007a44 <UART_SetConfig+0x1134>
 80079ee:	4b29      	ldr	r3, [pc, #164]	; (8007a94 <UART_SetConfig+0x1184>)
 80079f0:	f04f 0400 	mov.w	r4, #0
 80079f4:	e026      	b.n	8007a44 <UART_SetConfig+0x1134>
 80079f6:	4b28      	ldr	r3, [pc, #160]	; (8007a98 <UART_SetConfig+0x1188>)
 80079f8:	f04f 0400 	mov.w	r4, #0
 80079fc:	e022      	b.n	8007a44 <UART_SetConfig+0x1134>
 80079fe:	4b27      	ldr	r3, [pc, #156]	; (8007a9c <UART_SetConfig+0x118c>)
 8007a00:	f04f 0400 	mov.w	r4, #0
 8007a04:	e01e      	b.n	8007a44 <UART_SetConfig+0x1134>
 8007a06:	4b26      	ldr	r3, [pc, #152]	; (8007aa0 <UART_SetConfig+0x1190>)
 8007a08:	f04f 0400 	mov.w	r4, #0
 8007a0c:	e01a      	b.n	8007a44 <UART_SetConfig+0x1134>
 8007a0e:	a41a      	add	r4, pc, #104	; (adr r4, 8007a78 <UART_SetConfig+0x1168>)
 8007a10:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a14:	e016      	b.n	8007a44 <UART_SetConfig+0x1134>
 8007a16:	4b23      	ldr	r3, [pc, #140]	; (8007aa4 <UART_SetConfig+0x1194>)
 8007a18:	f04f 0400 	mov.w	r4, #0
 8007a1c:	e012      	b.n	8007a44 <UART_SetConfig+0x1134>
 8007a1e:	4b22      	ldr	r3, [pc, #136]	; (8007aa8 <UART_SetConfig+0x1198>)
 8007a20:	f04f 0400 	mov.w	r4, #0
 8007a24:	e00e      	b.n	8007a44 <UART_SetConfig+0x1134>
 8007a26:	a416      	add	r4, pc, #88	; (adr r4, 8007a80 <UART_SetConfig+0x1170>)
 8007a28:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a2c:	e00a      	b.n	8007a44 <UART_SetConfig+0x1134>
 8007a2e:	4b1f      	ldr	r3, [pc, #124]	; (8007aac <UART_SetConfig+0x119c>)
 8007a30:	f04f 0400 	mov.w	r4, #0
 8007a34:	e006      	b.n	8007a44 <UART_SetConfig+0x1134>
 8007a36:	4b1e      	ldr	r3, [pc, #120]	; (8007ab0 <UART_SetConfig+0x11a0>)
 8007a38:	f04f 0401 	mov.w	r4, #1
 8007a3c:	e002      	b.n	8007a44 <UART_SetConfig+0x1134>
 8007a3e:	4b14      	ldr	r3, [pc, #80]	; (8007a90 <UART_SetConfig+0x1180>)
 8007a40:	f04f 0403 	mov.w	r4, #3
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	6852      	ldr	r2, [r2, #4]
 8007a48:	0852      	lsrs	r2, r2, #1
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	eb13 0b01 	adds.w	fp, r3, r1
 8007a54:	eb44 0c02 	adc.w	ip, r4, r2
 8007a58:	4658      	mov	r0, fp
 8007a5a:	4661      	mov	r1, ip
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f04f 0400 	mov.w	r4, #0
 8007a64:	461a      	mov	r2, r3
 8007a66:	4623      	mov	r3, r4
 8007a68:	f7f8 fc3e 	bl	80002e8 <__aeabi_uldivmod>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	460c      	mov	r4, r1
 8007a70:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8007a72:	e123      	b.n	8007cbc <UART_SetConfig+0x13ac>
 8007a74:	f3af 8000 	nop.w
 8007a78:	51615500 	.word	0x51615500
 8007a7c:	00000000 	.word	0x00000000
 8007a80:	a2c2aa00 	.word	0xa2c2aa00
 8007a84:	00000000 	.word	0x00000000
 8007a88:	58024400 	.word	0x58024400
 8007a8c:	03d09000 	.word	0x03d09000
 8007a90:	d0900000 	.word	0xd0900000
 8007a94:	07a12000 	.word	0x07a12000
 8007a98:	0f424000 	.word	0x0f424000
 8007a9c:	1e848000 	.word	0x1e848000
 8007aa0:	3d090000 	.word	0x3d090000
 8007aa4:	61a80000 	.word	0x61a80000
 8007aa8:	7a120000 	.word	0x7a120000
 8007aac:	f4240000 	.word	0xf4240000
 8007ab0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d05b      	beq.n	8007b74 <UART_SetConfig+0x1264>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d053      	beq.n	8007b6c <UART_SetConfig+0x125c>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d04b      	beq.n	8007b64 <UART_SetConfig+0x1254>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d043      	beq.n	8007b5c <UART_SetConfig+0x124c>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	d03b      	beq.n	8007b54 <UART_SetConfig+0x1244>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	2b05      	cmp	r3, #5
 8007ae2:	d033      	beq.n	8007b4c <UART_SetConfig+0x123c>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	2b06      	cmp	r3, #6
 8007aea:	d02b      	beq.n	8007b44 <UART_SetConfig+0x1234>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	2b07      	cmp	r3, #7
 8007af2:	d023      	beq.n	8007b3c <UART_SetConfig+0x122c>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d01b      	beq.n	8007b34 <UART_SetConfig+0x1224>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	2b09      	cmp	r3, #9
 8007b02:	d013      	beq.n	8007b2c <UART_SetConfig+0x121c>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	2b0a      	cmp	r3, #10
 8007b0a:	d00b      	beq.n	8007b24 <UART_SetConfig+0x1214>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	2b0b      	cmp	r3, #11
 8007b12:	d103      	bne.n	8007b1c <UART_SetConfig+0x120c>
 8007b14:	4bc0      	ldr	r3, [pc, #768]	; (8007e18 <UART_SetConfig+0x1508>)
 8007b16:	f04f 0400 	mov.w	r4, #0
 8007b1a:	e02e      	b.n	8007b7a <UART_SetConfig+0x126a>
 8007b1c:	4bbf      	ldr	r3, [pc, #764]	; (8007e1c <UART_SetConfig+0x150c>)
 8007b1e:	f04f 0400 	mov.w	r4, #0
 8007b22:	e02a      	b.n	8007b7a <UART_SetConfig+0x126a>
 8007b24:	4bbe      	ldr	r3, [pc, #760]	; (8007e20 <UART_SetConfig+0x1510>)
 8007b26:	f04f 0400 	mov.w	r4, #0
 8007b2a:	e026      	b.n	8007b7a <UART_SetConfig+0x126a>
 8007b2c:	4bbd      	ldr	r3, [pc, #756]	; (8007e24 <UART_SetConfig+0x1514>)
 8007b2e:	f04f 0400 	mov.w	r4, #0
 8007b32:	e022      	b.n	8007b7a <UART_SetConfig+0x126a>
 8007b34:	4bbc      	ldr	r3, [pc, #752]	; (8007e28 <UART_SetConfig+0x1518>)
 8007b36:	f04f 0400 	mov.w	r4, #0
 8007b3a:	e01e      	b.n	8007b7a <UART_SetConfig+0x126a>
 8007b3c:	4bbb      	ldr	r3, [pc, #748]	; (8007e2c <UART_SetConfig+0x151c>)
 8007b3e:	f04f 0400 	mov.w	r4, #0
 8007b42:	e01a      	b.n	8007b7a <UART_SetConfig+0x126a>
 8007b44:	a4b0      	add	r4, pc, #704	; (adr r4, 8007e08 <UART_SetConfig+0x14f8>)
 8007b46:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007b4a:	e016      	b.n	8007b7a <UART_SetConfig+0x126a>
 8007b4c:	4bb8      	ldr	r3, [pc, #736]	; (8007e30 <UART_SetConfig+0x1520>)
 8007b4e:	f04f 0400 	mov.w	r4, #0
 8007b52:	e012      	b.n	8007b7a <UART_SetConfig+0x126a>
 8007b54:	4bb7      	ldr	r3, [pc, #732]	; (8007e34 <UART_SetConfig+0x1524>)
 8007b56:	f04f 0400 	mov.w	r4, #0
 8007b5a:	e00e      	b.n	8007b7a <UART_SetConfig+0x126a>
 8007b5c:	a4ac      	add	r4, pc, #688	; (adr r4, 8007e10 <UART_SetConfig+0x1500>)
 8007b5e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007b62:	e00a      	b.n	8007b7a <UART_SetConfig+0x126a>
 8007b64:	4bb4      	ldr	r3, [pc, #720]	; (8007e38 <UART_SetConfig+0x1528>)
 8007b66:	f04f 0400 	mov.w	r4, #0
 8007b6a:	e006      	b.n	8007b7a <UART_SetConfig+0x126a>
 8007b6c:	4bb3      	ldr	r3, [pc, #716]	; (8007e3c <UART_SetConfig+0x152c>)
 8007b6e:	f04f 0400 	mov.w	r4, #0
 8007b72:	e002      	b.n	8007b7a <UART_SetConfig+0x126a>
 8007b74:	4ba9      	ldr	r3, [pc, #676]	; (8007e1c <UART_SetConfig+0x150c>)
 8007b76:	f04f 0400 	mov.w	r4, #0
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6852      	ldr	r2, [r2, #4]
 8007b7e:	0852      	lsrs	r2, r2, #1
 8007b80:	4611      	mov	r1, r2
 8007b82:	f04f 0200 	mov.w	r2, #0
 8007b86:	eb13 0b01 	adds.w	fp, r3, r1
 8007b8a:	eb44 0c02 	adc.w	ip, r4, r2
 8007b8e:	4658      	mov	r0, fp
 8007b90:	4661      	mov	r1, ip
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f04f 0400 	mov.w	r4, #0
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	4623      	mov	r3, r4
 8007b9e:	f7f8 fba3 	bl	80002e8 <__aeabi_uldivmod>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8007ba8:	e088      	b.n	8007cbc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d064      	beq.n	8007c7c <UART_SetConfig+0x136c>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d05b      	beq.n	8007c72 <UART_SetConfig+0x1362>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d052      	beq.n	8007c68 <UART_SetConfig+0x1358>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d04a      	beq.n	8007c60 <UART_SetConfig+0x1350>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d041      	beq.n	8007c56 <UART_SetConfig+0x1346>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	2b05      	cmp	r3, #5
 8007bd8:	d039      	beq.n	8007c4e <UART_SetConfig+0x133e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	2b06      	cmp	r3, #6
 8007be0:	d031      	beq.n	8007c46 <UART_SetConfig+0x1336>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	2b07      	cmp	r3, #7
 8007be8:	d028      	beq.n	8007c3c <UART_SetConfig+0x132c>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d01f      	beq.n	8007c32 <UART_SetConfig+0x1322>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	2b09      	cmp	r3, #9
 8007bf8:	d016      	beq.n	8007c28 <UART_SetConfig+0x1318>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	2b0a      	cmp	r3, #10
 8007c00:	d00d      	beq.n	8007c1e <UART_SetConfig+0x130e>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	2b0b      	cmp	r3, #11
 8007c08:	d104      	bne.n	8007c14 <UART_SetConfig+0x1304>
 8007c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c0e:	f04f 0400 	mov.w	r4, #0
 8007c12:	e037      	b.n	8007c84 <UART_SetConfig+0x1374>
 8007c14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007c18:	f04f 0400 	mov.w	r4, #0
 8007c1c:	e032      	b.n	8007c84 <UART_SetConfig+0x1374>
 8007c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c22:	f04f 0400 	mov.w	r4, #0
 8007c26:	e02d      	b.n	8007c84 <UART_SetConfig+0x1374>
 8007c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c2c:	f04f 0400 	mov.w	r4, #0
 8007c30:	e028      	b.n	8007c84 <UART_SetConfig+0x1374>
 8007c32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c36:	f04f 0400 	mov.w	r4, #0
 8007c3a:	e023      	b.n	8007c84 <UART_SetConfig+0x1374>
 8007c3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c40:	f04f 0400 	mov.w	r4, #0
 8007c44:	e01e      	b.n	8007c84 <UART_SetConfig+0x1374>
 8007c46:	4b7e      	ldr	r3, [pc, #504]	; (8007e40 <UART_SetConfig+0x1530>)
 8007c48:	f04f 0400 	mov.w	r4, #0
 8007c4c:	e01a      	b.n	8007c84 <UART_SetConfig+0x1374>
 8007c4e:	4b7d      	ldr	r3, [pc, #500]	; (8007e44 <UART_SetConfig+0x1534>)
 8007c50:	f04f 0400 	mov.w	r4, #0
 8007c54:	e016      	b.n	8007c84 <UART_SetConfig+0x1374>
 8007c56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c5a:	f04f 0400 	mov.w	r4, #0
 8007c5e:	e011      	b.n	8007c84 <UART_SetConfig+0x1374>
 8007c60:	4b79      	ldr	r3, [pc, #484]	; (8007e48 <UART_SetConfig+0x1538>)
 8007c62:	f04f 0400 	mov.w	r4, #0
 8007c66:	e00d      	b.n	8007c84 <UART_SetConfig+0x1374>
 8007c68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c6c:	f04f 0400 	mov.w	r4, #0
 8007c70:	e008      	b.n	8007c84 <UART_SetConfig+0x1374>
 8007c72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c76:	f04f 0400 	mov.w	r4, #0
 8007c7a:	e003      	b.n	8007c84 <UART_SetConfig+0x1374>
 8007c7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007c80:	f04f 0400 	mov.w	r4, #0
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6852      	ldr	r2, [r2, #4]
 8007c88:	0852      	lsrs	r2, r2, #1
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	f04f 0200 	mov.w	r2, #0
 8007c90:	eb13 0b01 	adds.w	fp, r3, r1
 8007c94:	eb44 0c02 	adc.w	ip, r4, r2
 8007c98:	4658      	mov	r0, fp
 8007c9a:	4661      	mov	r1, ip
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f04f 0400 	mov.w	r4, #0
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	4623      	mov	r3, r4
 8007ca8:	f7f8 fb1e 	bl	80002e8 <__aeabi_uldivmod>
 8007cac:	4603      	mov	r3, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8007cb2:	e003      	b.n	8007cbc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8007cba:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cc2:	d309      	bcc.n	8007cd8 <UART_SetConfig+0x13c8>
 8007cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cca:	d205      	bcs.n	8007cd8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cd2:	60da      	str	r2, [r3, #12]
 8007cd4:	f000 bf81 	b.w	8008bda <UART_SetConfig+0x22ca>
        }
        else
        {
          ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cde:	f000 bf7c 	b.w	8008bda <UART_SetConfig+0x22ca>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cea:	f040 83d8 	bne.w	800849e <UART_SetConfig+0x1b8e>
  {
    switch (clocksource)
 8007cee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007cf2:	2b40      	cmp	r3, #64	; 0x40
 8007cf4:	f200 83b1 	bhi.w	800845a <UART_SetConfig+0x1b4a>
 8007cf8:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <UART_SetConfig+0x13f0>)
 8007cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfe:	bf00      	nop
 8007d00:	08007e4d 	.word	0x08007e4d
 8007d04:	08007f03 	.word	0x08007f03
 8007d08:	0800845b 	.word	0x0800845b
 8007d0c:	0800845b 	.word	0x0800845b
 8007d10:	08007fb9 	.word	0x08007fb9
 8007d14:	0800845b 	.word	0x0800845b
 8007d18:	0800845b 	.word	0x0800845b
 8007d1c:	0800845b 	.word	0x0800845b
 8007d20:	08008075 	.word	0x08008075
 8007d24:	0800845b 	.word	0x0800845b
 8007d28:	0800845b 	.word	0x0800845b
 8007d2c:	0800845b 	.word	0x0800845b
 8007d30:	0800845b 	.word	0x0800845b
 8007d34:	0800845b 	.word	0x0800845b
 8007d38:	0800845b 	.word	0x0800845b
 8007d3c:	0800845b 	.word	0x0800845b
 8007d40:	08008131 	.word	0x08008131
 8007d44:	0800845b 	.word	0x0800845b
 8007d48:	0800845b 	.word	0x0800845b
 8007d4c:	0800845b 	.word	0x0800845b
 8007d50:	0800845b 	.word	0x0800845b
 8007d54:	0800845b 	.word	0x0800845b
 8007d58:	0800845b 	.word	0x0800845b
 8007d5c:	0800845b 	.word	0x0800845b
 8007d60:	0800845b 	.word	0x0800845b
 8007d64:	0800845b 	.word	0x0800845b
 8007d68:	0800845b 	.word	0x0800845b
 8007d6c:	0800845b 	.word	0x0800845b
 8007d70:	0800845b 	.word	0x0800845b
 8007d74:	0800845b 	.word	0x0800845b
 8007d78:	0800845b 	.word	0x0800845b
 8007d7c:	0800845b 	.word	0x0800845b
 8007d80:	080082a3 	.word	0x080082a3
 8007d84:	0800845b 	.word	0x0800845b
 8007d88:	0800845b 	.word	0x0800845b
 8007d8c:	0800845b 	.word	0x0800845b
 8007d90:	0800845b 	.word	0x0800845b
 8007d94:	0800845b 	.word	0x0800845b
 8007d98:	0800845b 	.word	0x0800845b
 8007d9c:	0800845b 	.word	0x0800845b
 8007da0:	0800845b 	.word	0x0800845b
 8007da4:	0800845b 	.word	0x0800845b
 8007da8:	0800845b 	.word	0x0800845b
 8007dac:	0800845b 	.word	0x0800845b
 8007db0:	0800845b 	.word	0x0800845b
 8007db4:	0800845b 	.word	0x0800845b
 8007db8:	0800845b 	.word	0x0800845b
 8007dbc:	0800845b 	.word	0x0800845b
 8007dc0:	0800845b 	.word	0x0800845b
 8007dc4:	0800845b 	.word	0x0800845b
 8007dc8:	0800845b 	.word	0x0800845b
 8007dcc:	0800845b 	.word	0x0800845b
 8007dd0:	0800845b 	.word	0x0800845b
 8007dd4:	0800845b 	.word	0x0800845b
 8007dd8:	0800845b 	.word	0x0800845b
 8007ddc:	0800845b 	.word	0x0800845b
 8007de0:	0800845b 	.word	0x0800845b
 8007de4:	0800845b 	.word	0x0800845b
 8007de8:	0800845b 	.word	0x0800845b
 8007dec:	0800845b 	.word	0x0800845b
 8007df0:	0800845b 	.word	0x0800845b
 8007df4:	0800845b 	.word	0x0800845b
 8007df8:	0800845b 	.word	0x0800845b
 8007dfc:	0800845b 	.word	0x0800845b
 8007e00:	08008399 	.word	0x08008399
 8007e04:	f3af 8000 	nop.w
 8007e08:	05161500 	.word	0x05161500
 8007e0c:	00000000 	.word	0x00000000
 8007e10:	0a2c2a00 	.word	0x0a2c2a00
 8007e14:	00000000 	.word	0x00000000
 8007e18:	003d0900 	.word	0x003d0900
 8007e1c:	3d090000 	.word	0x3d090000
 8007e20:	007a1200 	.word	0x007a1200
 8007e24:	00f42400 	.word	0x00f42400
 8007e28:	01e84800 	.word	0x01e84800
 8007e2c:	03d09000 	.word	0x03d09000
 8007e30:	061a8000 	.word	0x061a8000
 8007e34:	07a12000 	.word	0x07a12000
 8007e38:	0f424000 	.word	0x0f424000
 8007e3c:	1e848000 	.word	0x1e848000
 8007e40:	000aaa00 	.word	0x000aaa00
 8007e44:	000ccc00 	.word	0x000ccc00
 8007e48:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4c:	f7fb fc6a 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8007e50:	4602      	mov	r2, r0
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d044      	beq.n	8007ee4 <UART_SetConfig+0x15d4>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d03e      	beq.n	8007ee0 <UART_SetConfig+0x15d0>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d038      	beq.n	8007edc <UART_SetConfig+0x15cc>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d032      	beq.n	8007ed8 <UART_SetConfig+0x15c8>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d02c      	beq.n	8007ed4 <UART_SetConfig+0x15c4>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	2b05      	cmp	r3, #5
 8007e80:	d026      	beq.n	8007ed0 <UART_SetConfig+0x15c0>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	2b06      	cmp	r3, #6
 8007e88:	d020      	beq.n	8007ecc <UART_SetConfig+0x15bc>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	2b07      	cmp	r3, #7
 8007e90:	d01a      	beq.n	8007ec8 <UART_SetConfig+0x15b8>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d014      	beq.n	8007ec4 <UART_SetConfig+0x15b4>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9e:	2b09      	cmp	r3, #9
 8007ea0:	d00e      	beq.n	8007ec0 <UART_SetConfig+0x15b0>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea6:	2b0a      	cmp	r3, #10
 8007ea8:	d008      	beq.n	8007ebc <UART_SetConfig+0x15ac>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	2b0b      	cmp	r3, #11
 8007eb0:	d102      	bne.n	8007eb8 <UART_SetConfig+0x15a8>
 8007eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007eb6:	e016      	b.n	8007ee6 <UART_SetConfig+0x15d6>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e014      	b.n	8007ee6 <UART_SetConfig+0x15d6>
 8007ebc:	2380      	movs	r3, #128	; 0x80
 8007ebe:	e012      	b.n	8007ee6 <UART_SetConfig+0x15d6>
 8007ec0:	2340      	movs	r3, #64	; 0x40
 8007ec2:	e010      	b.n	8007ee6 <UART_SetConfig+0x15d6>
 8007ec4:	2320      	movs	r3, #32
 8007ec6:	e00e      	b.n	8007ee6 <UART_SetConfig+0x15d6>
 8007ec8:	2310      	movs	r3, #16
 8007eca:	e00c      	b.n	8007ee6 <UART_SetConfig+0x15d6>
 8007ecc:	230c      	movs	r3, #12
 8007ece:	e00a      	b.n	8007ee6 <UART_SetConfig+0x15d6>
 8007ed0:	230a      	movs	r3, #10
 8007ed2:	e008      	b.n	8007ee6 <UART_SetConfig+0x15d6>
 8007ed4:	2308      	movs	r3, #8
 8007ed6:	e006      	b.n	8007ee6 <UART_SetConfig+0x15d6>
 8007ed8:	2306      	movs	r3, #6
 8007eda:	e004      	b.n	8007ee6 <UART_SetConfig+0x15d6>
 8007edc:	2304      	movs	r3, #4
 8007ede:	e002      	b.n	8007ee6 <UART_SetConfig+0x15d6>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e000      	b.n	8007ee6 <UART_SetConfig+0x15d6>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eea:	005a      	lsls	r2, r3, #1
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	085b      	lsrs	r3, r3, #1
 8007ef2:	441a      	add	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f00:	e2af      	b.n	8008462 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f02:	f7fb fc25 	bl	8003750 <HAL_RCC_GetPCLK2Freq>
 8007f06:	4602      	mov	r2, r0
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d044      	beq.n	8007f9a <UART_SetConfig+0x168a>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d03e      	beq.n	8007f96 <UART_SetConfig+0x1686>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d038      	beq.n	8007f92 <UART_SetConfig+0x1682>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d032      	beq.n	8007f8e <UART_SetConfig+0x167e>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d02c      	beq.n	8007f8a <UART_SetConfig+0x167a>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	2b05      	cmp	r3, #5
 8007f36:	d026      	beq.n	8007f86 <UART_SetConfig+0x1676>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	2b06      	cmp	r3, #6
 8007f3e:	d020      	beq.n	8007f82 <UART_SetConfig+0x1672>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	2b07      	cmp	r3, #7
 8007f46:	d01a      	beq.n	8007f7e <UART_SetConfig+0x166e>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d014      	beq.n	8007f7a <UART_SetConfig+0x166a>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	2b09      	cmp	r3, #9
 8007f56:	d00e      	beq.n	8007f76 <UART_SetConfig+0x1666>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	2b0a      	cmp	r3, #10
 8007f5e:	d008      	beq.n	8007f72 <UART_SetConfig+0x1662>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	2b0b      	cmp	r3, #11
 8007f66:	d102      	bne.n	8007f6e <UART_SetConfig+0x165e>
 8007f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f6c:	e016      	b.n	8007f9c <UART_SetConfig+0x168c>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e014      	b.n	8007f9c <UART_SetConfig+0x168c>
 8007f72:	2380      	movs	r3, #128	; 0x80
 8007f74:	e012      	b.n	8007f9c <UART_SetConfig+0x168c>
 8007f76:	2340      	movs	r3, #64	; 0x40
 8007f78:	e010      	b.n	8007f9c <UART_SetConfig+0x168c>
 8007f7a:	2320      	movs	r3, #32
 8007f7c:	e00e      	b.n	8007f9c <UART_SetConfig+0x168c>
 8007f7e:	2310      	movs	r3, #16
 8007f80:	e00c      	b.n	8007f9c <UART_SetConfig+0x168c>
 8007f82:	230c      	movs	r3, #12
 8007f84:	e00a      	b.n	8007f9c <UART_SetConfig+0x168c>
 8007f86:	230a      	movs	r3, #10
 8007f88:	e008      	b.n	8007f9c <UART_SetConfig+0x168c>
 8007f8a:	2308      	movs	r3, #8
 8007f8c:	e006      	b.n	8007f9c <UART_SetConfig+0x168c>
 8007f8e:	2306      	movs	r3, #6
 8007f90:	e004      	b.n	8007f9c <UART_SetConfig+0x168c>
 8007f92:	2304      	movs	r3, #4
 8007f94:	e002      	b.n	8007f9c <UART_SetConfig+0x168c>
 8007f96:	2302      	movs	r3, #2
 8007f98:	e000      	b.n	8007f9c <UART_SetConfig+0x168c>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa0:	005a      	lsls	r2, r3, #1
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	085b      	lsrs	r3, r3, #1
 8007fa8:	441a      	add	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fb6:	e254      	b.n	8008462 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fb8:	f107 0314 	add.w	r3, r7, #20
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fc fcf5 	bl	80049ac <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d044      	beq.n	8008056 <UART_SetConfig+0x1746>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d03e      	beq.n	8008052 <UART_SetConfig+0x1742>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d038      	beq.n	800804e <UART_SetConfig+0x173e>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d032      	beq.n	800804a <UART_SetConfig+0x173a>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d02c      	beq.n	8008046 <UART_SetConfig+0x1736>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	2b05      	cmp	r3, #5
 8007ff2:	d026      	beq.n	8008042 <UART_SetConfig+0x1732>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff8:	2b06      	cmp	r3, #6
 8007ffa:	d020      	beq.n	800803e <UART_SetConfig+0x172e>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	2b07      	cmp	r3, #7
 8008002:	d01a      	beq.n	800803a <UART_SetConfig+0x172a>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	2b08      	cmp	r3, #8
 800800a:	d014      	beq.n	8008036 <UART_SetConfig+0x1726>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b09      	cmp	r3, #9
 8008012:	d00e      	beq.n	8008032 <UART_SetConfig+0x1722>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	2b0a      	cmp	r3, #10
 800801a:	d008      	beq.n	800802e <UART_SetConfig+0x171e>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	2b0b      	cmp	r3, #11
 8008022:	d102      	bne.n	800802a <UART_SetConfig+0x171a>
 8008024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008028:	e016      	b.n	8008058 <UART_SetConfig+0x1748>
 800802a:	2301      	movs	r3, #1
 800802c:	e014      	b.n	8008058 <UART_SetConfig+0x1748>
 800802e:	2380      	movs	r3, #128	; 0x80
 8008030:	e012      	b.n	8008058 <UART_SetConfig+0x1748>
 8008032:	2340      	movs	r3, #64	; 0x40
 8008034:	e010      	b.n	8008058 <UART_SetConfig+0x1748>
 8008036:	2320      	movs	r3, #32
 8008038:	e00e      	b.n	8008058 <UART_SetConfig+0x1748>
 800803a:	2310      	movs	r3, #16
 800803c:	e00c      	b.n	8008058 <UART_SetConfig+0x1748>
 800803e:	230c      	movs	r3, #12
 8008040:	e00a      	b.n	8008058 <UART_SetConfig+0x1748>
 8008042:	230a      	movs	r3, #10
 8008044:	e008      	b.n	8008058 <UART_SetConfig+0x1748>
 8008046:	2308      	movs	r3, #8
 8008048:	e006      	b.n	8008058 <UART_SetConfig+0x1748>
 800804a:	2306      	movs	r3, #6
 800804c:	e004      	b.n	8008058 <UART_SetConfig+0x1748>
 800804e:	2304      	movs	r3, #4
 8008050:	e002      	b.n	8008058 <UART_SetConfig+0x1748>
 8008052:	2302      	movs	r3, #2
 8008054:	e000      	b.n	8008058 <UART_SetConfig+0x1748>
 8008056:	2301      	movs	r3, #1
 8008058:	fbb2 f3f3 	udiv	r3, r2, r3
 800805c:	005a      	lsls	r2, r3, #1
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	085b      	lsrs	r3, r3, #1
 8008064:	441a      	add	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	fbb2 f3f3 	udiv	r3, r2, r3
 800806e:	b29b      	uxth	r3, r3
 8008070:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008072:	e1f6      	b.n	8008462 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008074:	f107 0308 	add.w	r3, r7, #8
 8008078:	4618      	mov	r0, r3
 800807a:	f7fc fde3 	bl	8004c44 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	2b00      	cmp	r3, #0
 8008086:	d044      	beq.n	8008112 <UART_SetConfig+0x1802>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	2b01      	cmp	r3, #1
 800808e:	d03e      	beq.n	800810e <UART_SetConfig+0x17fe>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	2b02      	cmp	r3, #2
 8008096:	d038      	beq.n	800810a <UART_SetConfig+0x17fa>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	2b03      	cmp	r3, #3
 800809e:	d032      	beq.n	8008106 <UART_SetConfig+0x17f6>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	d02c      	beq.n	8008102 <UART_SetConfig+0x17f2>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	2b05      	cmp	r3, #5
 80080ae:	d026      	beq.n	80080fe <UART_SetConfig+0x17ee>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	2b06      	cmp	r3, #6
 80080b6:	d020      	beq.n	80080fa <UART_SetConfig+0x17ea>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	2b07      	cmp	r3, #7
 80080be:	d01a      	beq.n	80080f6 <UART_SetConfig+0x17e6>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d014      	beq.n	80080f2 <UART_SetConfig+0x17e2>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	2b09      	cmp	r3, #9
 80080ce:	d00e      	beq.n	80080ee <UART_SetConfig+0x17de>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	2b0a      	cmp	r3, #10
 80080d6:	d008      	beq.n	80080ea <UART_SetConfig+0x17da>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	2b0b      	cmp	r3, #11
 80080de:	d102      	bne.n	80080e6 <UART_SetConfig+0x17d6>
 80080e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080e4:	e016      	b.n	8008114 <UART_SetConfig+0x1804>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e014      	b.n	8008114 <UART_SetConfig+0x1804>
 80080ea:	2380      	movs	r3, #128	; 0x80
 80080ec:	e012      	b.n	8008114 <UART_SetConfig+0x1804>
 80080ee:	2340      	movs	r3, #64	; 0x40
 80080f0:	e010      	b.n	8008114 <UART_SetConfig+0x1804>
 80080f2:	2320      	movs	r3, #32
 80080f4:	e00e      	b.n	8008114 <UART_SetConfig+0x1804>
 80080f6:	2310      	movs	r3, #16
 80080f8:	e00c      	b.n	8008114 <UART_SetConfig+0x1804>
 80080fa:	230c      	movs	r3, #12
 80080fc:	e00a      	b.n	8008114 <UART_SetConfig+0x1804>
 80080fe:	230a      	movs	r3, #10
 8008100:	e008      	b.n	8008114 <UART_SetConfig+0x1804>
 8008102:	2308      	movs	r3, #8
 8008104:	e006      	b.n	8008114 <UART_SetConfig+0x1804>
 8008106:	2306      	movs	r3, #6
 8008108:	e004      	b.n	8008114 <UART_SetConfig+0x1804>
 800810a:	2304      	movs	r3, #4
 800810c:	e002      	b.n	8008114 <UART_SetConfig+0x1804>
 800810e:	2302      	movs	r3, #2
 8008110:	e000      	b.n	8008114 <UART_SetConfig+0x1804>
 8008112:	2301      	movs	r3, #1
 8008114:	fbb2 f3f3 	udiv	r3, r2, r3
 8008118:	005a      	lsls	r2, r3, #1
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	085b      	lsrs	r3, r3, #1
 8008120:	441a      	add	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	fbb2 f3f3 	udiv	r3, r2, r3
 800812a:	b29b      	uxth	r3, r3
 800812c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800812e:	e198      	b.n	8008462 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008130:	4b87      	ldr	r3, [pc, #540]	; (8008350 <UART_SetConfig+0x1a40>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0320 	and.w	r3, r3, #32
 8008138:	2b00      	cmp	r3, #0
 800813a:	d05e      	beq.n	80081fa <UART_SetConfig+0x18ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800813c:	4b84      	ldr	r3, [pc, #528]	; (8008350 <UART_SetConfig+0x1a40>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	08db      	lsrs	r3, r3, #3
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	4a83      	ldr	r2, [pc, #524]	; (8008354 <UART_SetConfig+0x1a44>)
 8008148:	40da      	lsrs	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	2b00      	cmp	r3, #0
 8008150:	d044      	beq.n	80081dc <UART_SetConfig+0x18cc>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	2b01      	cmp	r3, #1
 8008158:	d03e      	beq.n	80081d8 <UART_SetConfig+0x18c8>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	2b02      	cmp	r3, #2
 8008160:	d038      	beq.n	80081d4 <UART_SetConfig+0x18c4>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008166:	2b03      	cmp	r3, #3
 8008168:	d032      	beq.n	80081d0 <UART_SetConfig+0x18c0>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	2b04      	cmp	r3, #4
 8008170:	d02c      	beq.n	80081cc <UART_SetConfig+0x18bc>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	2b05      	cmp	r3, #5
 8008178:	d026      	beq.n	80081c8 <UART_SetConfig+0x18b8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	2b06      	cmp	r3, #6
 8008180:	d020      	beq.n	80081c4 <UART_SetConfig+0x18b4>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	2b07      	cmp	r3, #7
 8008188:	d01a      	beq.n	80081c0 <UART_SetConfig+0x18b0>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818e:	2b08      	cmp	r3, #8
 8008190:	d014      	beq.n	80081bc <UART_SetConfig+0x18ac>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	2b09      	cmp	r3, #9
 8008198:	d00e      	beq.n	80081b8 <UART_SetConfig+0x18a8>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	2b0a      	cmp	r3, #10
 80081a0:	d008      	beq.n	80081b4 <UART_SetConfig+0x18a4>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	2b0b      	cmp	r3, #11
 80081a8:	d102      	bne.n	80081b0 <UART_SetConfig+0x18a0>
 80081aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081ae:	e016      	b.n	80081de <UART_SetConfig+0x18ce>
 80081b0:	2301      	movs	r3, #1
 80081b2:	e014      	b.n	80081de <UART_SetConfig+0x18ce>
 80081b4:	2380      	movs	r3, #128	; 0x80
 80081b6:	e012      	b.n	80081de <UART_SetConfig+0x18ce>
 80081b8:	2340      	movs	r3, #64	; 0x40
 80081ba:	e010      	b.n	80081de <UART_SetConfig+0x18ce>
 80081bc:	2320      	movs	r3, #32
 80081be:	e00e      	b.n	80081de <UART_SetConfig+0x18ce>
 80081c0:	2310      	movs	r3, #16
 80081c2:	e00c      	b.n	80081de <UART_SetConfig+0x18ce>
 80081c4:	230c      	movs	r3, #12
 80081c6:	e00a      	b.n	80081de <UART_SetConfig+0x18ce>
 80081c8:	230a      	movs	r3, #10
 80081ca:	e008      	b.n	80081de <UART_SetConfig+0x18ce>
 80081cc:	2308      	movs	r3, #8
 80081ce:	e006      	b.n	80081de <UART_SetConfig+0x18ce>
 80081d0:	2306      	movs	r3, #6
 80081d2:	e004      	b.n	80081de <UART_SetConfig+0x18ce>
 80081d4:	2304      	movs	r3, #4
 80081d6:	e002      	b.n	80081de <UART_SetConfig+0x18ce>
 80081d8:	2302      	movs	r3, #2
 80081da:	e000      	b.n	80081de <UART_SetConfig+0x18ce>
 80081dc:	2301      	movs	r3, #1
 80081de:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e2:	005a      	lsls	r2, r3, #1
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	085b      	lsrs	r3, r3, #1
 80081ea:	441a      	add	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80081f8:	e133      	b.n	8008462 <UART_SetConfig+0x1b52>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d043      	beq.n	800828a <UART_SetConfig+0x197a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	2b01      	cmp	r3, #1
 8008208:	d03d      	beq.n	8008286 <UART_SetConfig+0x1976>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	2b02      	cmp	r3, #2
 8008210:	d037      	beq.n	8008282 <UART_SetConfig+0x1972>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	2b03      	cmp	r3, #3
 8008218:	d031      	beq.n	800827e <UART_SetConfig+0x196e>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	2b04      	cmp	r3, #4
 8008220:	d02b      	beq.n	800827a <UART_SetConfig+0x196a>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	2b05      	cmp	r3, #5
 8008228:	d025      	beq.n	8008276 <UART_SetConfig+0x1966>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	2b06      	cmp	r3, #6
 8008230:	d01f      	beq.n	8008272 <UART_SetConfig+0x1962>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	2b07      	cmp	r3, #7
 8008238:	d019      	beq.n	800826e <UART_SetConfig+0x195e>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	2b08      	cmp	r3, #8
 8008240:	d013      	beq.n	800826a <UART_SetConfig+0x195a>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	2b09      	cmp	r3, #9
 8008248:	d00d      	beq.n	8008266 <UART_SetConfig+0x1956>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	2b0a      	cmp	r3, #10
 8008250:	d007      	beq.n	8008262 <UART_SetConfig+0x1952>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2b0b      	cmp	r3, #11
 8008258:	d101      	bne.n	800825e <UART_SetConfig+0x194e>
 800825a:	4b3f      	ldr	r3, [pc, #252]	; (8008358 <UART_SetConfig+0x1a48>)
 800825c:	e016      	b.n	800828c <UART_SetConfig+0x197c>
 800825e:	4b3f      	ldr	r3, [pc, #252]	; (800835c <UART_SetConfig+0x1a4c>)
 8008260:	e014      	b.n	800828c <UART_SetConfig+0x197c>
 8008262:	4b3f      	ldr	r3, [pc, #252]	; (8008360 <UART_SetConfig+0x1a50>)
 8008264:	e012      	b.n	800828c <UART_SetConfig+0x197c>
 8008266:	4b3f      	ldr	r3, [pc, #252]	; (8008364 <UART_SetConfig+0x1a54>)
 8008268:	e010      	b.n	800828c <UART_SetConfig+0x197c>
 800826a:	4b3f      	ldr	r3, [pc, #252]	; (8008368 <UART_SetConfig+0x1a58>)
 800826c:	e00e      	b.n	800828c <UART_SetConfig+0x197c>
 800826e:	4b3f      	ldr	r3, [pc, #252]	; (800836c <UART_SetConfig+0x1a5c>)
 8008270:	e00c      	b.n	800828c <UART_SetConfig+0x197c>
 8008272:	4b3f      	ldr	r3, [pc, #252]	; (8008370 <UART_SetConfig+0x1a60>)
 8008274:	e00a      	b.n	800828c <UART_SetConfig+0x197c>
 8008276:	4b3f      	ldr	r3, [pc, #252]	; (8008374 <UART_SetConfig+0x1a64>)
 8008278:	e008      	b.n	800828c <UART_SetConfig+0x197c>
 800827a:	4b3f      	ldr	r3, [pc, #252]	; (8008378 <UART_SetConfig+0x1a68>)
 800827c:	e006      	b.n	800828c <UART_SetConfig+0x197c>
 800827e:	4b3f      	ldr	r3, [pc, #252]	; (800837c <UART_SetConfig+0x1a6c>)
 8008280:	e004      	b.n	800828c <UART_SetConfig+0x197c>
 8008282:	4b3f      	ldr	r3, [pc, #252]	; (8008380 <UART_SetConfig+0x1a70>)
 8008284:	e002      	b.n	800828c <UART_SetConfig+0x197c>
 8008286:	4b33      	ldr	r3, [pc, #204]	; (8008354 <UART_SetConfig+0x1a44>)
 8008288:	e000      	b.n	800828c <UART_SetConfig+0x197c>
 800828a:	4b34      	ldr	r3, [pc, #208]	; (800835c <UART_SetConfig+0x1a4c>)
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	6852      	ldr	r2, [r2, #4]
 8008290:	0852      	lsrs	r2, r2, #1
 8008292:	441a      	add	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	fbb2 f3f3 	udiv	r3, r2, r3
 800829c:	b29b      	uxth	r3, r3
 800829e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082a0:	e0df      	b.n	8008462 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d045      	beq.n	8008336 <UART_SetConfig+0x1a26>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d03f      	beq.n	8008332 <UART_SetConfig+0x1a22>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d039      	beq.n	800832e <UART_SetConfig+0x1a1e>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d033      	beq.n	800832a <UART_SetConfig+0x1a1a>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	d02d      	beq.n	8008326 <UART_SetConfig+0x1a16>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	2b05      	cmp	r3, #5
 80082d0:	d027      	beq.n	8008322 <UART_SetConfig+0x1a12>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	2b06      	cmp	r3, #6
 80082d8:	d021      	beq.n	800831e <UART_SetConfig+0x1a0e>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	2b07      	cmp	r3, #7
 80082e0:	d01b      	beq.n	800831a <UART_SetConfig+0x1a0a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e6:	2b08      	cmp	r3, #8
 80082e8:	d015      	beq.n	8008316 <UART_SetConfig+0x1a06>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	2b09      	cmp	r3, #9
 80082f0:	d00f      	beq.n	8008312 <UART_SetConfig+0x1a02>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f6:	2b0a      	cmp	r3, #10
 80082f8:	d008      	beq.n	800830c <UART_SetConfig+0x19fc>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	2b0b      	cmp	r3, #11
 8008300:	d102      	bne.n	8008308 <UART_SetConfig+0x19f8>
 8008302:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008306:	e017      	b.n	8008338 <UART_SetConfig+0x1a28>
 8008308:	4b18      	ldr	r3, [pc, #96]	; (800836c <UART_SetConfig+0x1a5c>)
 800830a:	e015      	b.n	8008338 <UART_SetConfig+0x1a28>
 800830c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008310:	e012      	b.n	8008338 <UART_SetConfig+0x1a28>
 8008312:	4b1c      	ldr	r3, [pc, #112]	; (8008384 <UART_SetConfig+0x1a74>)
 8008314:	e010      	b.n	8008338 <UART_SetConfig+0x1a28>
 8008316:	4b1c      	ldr	r3, [pc, #112]	; (8008388 <UART_SetConfig+0x1a78>)
 8008318:	e00e      	b.n	8008338 <UART_SetConfig+0x1a28>
 800831a:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <UART_SetConfig+0x1a48>)
 800831c:	e00c      	b.n	8008338 <UART_SetConfig+0x1a28>
 800831e:	4b1b      	ldr	r3, [pc, #108]	; (800838c <UART_SetConfig+0x1a7c>)
 8008320:	e00a      	b.n	8008338 <UART_SetConfig+0x1a28>
 8008322:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <UART_SetConfig+0x1a80>)
 8008324:	e008      	b.n	8008338 <UART_SetConfig+0x1a28>
 8008326:	4b0e      	ldr	r3, [pc, #56]	; (8008360 <UART_SetConfig+0x1a50>)
 8008328:	e006      	b.n	8008338 <UART_SetConfig+0x1a28>
 800832a:	4b1a      	ldr	r3, [pc, #104]	; (8008394 <UART_SetConfig+0x1a84>)
 800832c:	e004      	b.n	8008338 <UART_SetConfig+0x1a28>
 800832e:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <UART_SetConfig+0x1a54>)
 8008330:	e002      	b.n	8008338 <UART_SetConfig+0x1a28>
 8008332:	4b0d      	ldr	r3, [pc, #52]	; (8008368 <UART_SetConfig+0x1a58>)
 8008334:	e000      	b.n	8008338 <UART_SetConfig+0x1a28>
 8008336:	4b0d      	ldr	r3, [pc, #52]	; (800836c <UART_SetConfig+0x1a5c>)
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	6852      	ldr	r2, [r2, #4]
 800833c:	0852      	lsrs	r2, r2, #1
 800833e:	441a      	add	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	fbb2 f3f3 	udiv	r3, r2, r3
 8008348:	b29b      	uxth	r3, r3
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800834c:	e089      	b.n	8008462 <UART_SetConfig+0x1b52>
 800834e:	bf00      	nop
 8008350:	58024400 	.word	0x58024400
 8008354:	03d09000 	.word	0x03d09000
 8008358:	0007a120 	.word	0x0007a120
 800835c:	07a12000 	.word	0x07a12000
 8008360:	000f4240 	.word	0x000f4240
 8008364:	001e8480 	.word	0x001e8480
 8008368:	003d0900 	.word	0x003d0900
 800836c:	007a1200 	.word	0x007a1200
 8008370:	00a2c2aa 	.word	0x00a2c2aa
 8008374:	00c35000 	.word	0x00c35000
 8008378:	00f42400 	.word	0x00f42400
 800837c:	01458554 	.word	0x01458554
 8008380:	01e84800 	.word	0x01e84800
 8008384:	0001e848 	.word	0x0001e848
 8008388:	0003d090 	.word	0x0003d090
 800838c:	000a2c2a 	.word	0x000a2c2a
 8008390:	000c3500 	.word	0x000c3500
 8008394:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	2b00      	cmp	r3, #0
 800839e:	d04f      	beq.n	8008440 <UART_SetConfig+0x1b30>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d048      	beq.n	800843a <UART_SetConfig+0x1b2a>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d041      	beq.n	8008434 <UART_SetConfig+0x1b24>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d03a      	beq.n	800842e <UART_SetConfig+0x1b1e>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d033      	beq.n	8008428 <UART_SetConfig+0x1b18>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	2b05      	cmp	r3, #5
 80083c6:	d02c      	beq.n	8008422 <UART_SetConfig+0x1b12>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b06      	cmp	r3, #6
 80083ce:	d025      	beq.n	800841c <UART_SetConfig+0x1b0c>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d4:	2b07      	cmp	r3, #7
 80083d6:	d01e      	beq.n	8008416 <UART_SetConfig+0x1b06>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d017      	beq.n	8008410 <UART_SetConfig+0x1b00>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	2b09      	cmp	r3, #9
 80083e6:	d010      	beq.n	800840a <UART_SetConfig+0x1afa>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	2b0a      	cmp	r3, #10
 80083ee:	d009      	beq.n	8008404 <UART_SetConfig+0x1af4>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	2b0b      	cmp	r3, #11
 80083f6:	d102      	bne.n	80083fe <UART_SetConfig+0x1aee>
 80083f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083fc:	e022      	b.n	8008444 <UART_SetConfig+0x1b34>
 80083fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008402:	e01f      	b.n	8008444 <UART_SetConfig+0x1b34>
 8008404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008408:	e01c      	b.n	8008444 <UART_SetConfig+0x1b34>
 800840a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800840e:	e019      	b.n	8008444 <UART_SetConfig+0x1b34>
 8008410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008414:	e016      	b.n	8008444 <UART_SetConfig+0x1b34>
 8008416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800841a:	e013      	b.n	8008444 <UART_SetConfig+0x1b34>
 800841c:	f241 5354 	movw	r3, #5460	; 0x1554
 8008420:	e010      	b.n	8008444 <UART_SetConfig+0x1b34>
 8008422:	f641 1398 	movw	r3, #6552	; 0x1998
 8008426:	e00d      	b.n	8008444 <UART_SetConfig+0x1b34>
 8008428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800842c:	e00a      	b.n	8008444 <UART_SetConfig+0x1b34>
 800842e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008432:	e007      	b.n	8008444 <UART_SetConfig+0x1b34>
 8008434:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008438:	e004      	b.n	8008444 <UART_SetConfig+0x1b34>
 800843a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800843e:	e001      	b.n	8008444 <UART_SetConfig+0x1b34>
 8008440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	6852      	ldr	r2, [r2, #4]
 8008448:	0852      	lsrs	r2, r2, #1
 800844a:	441a      	add	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	fbb2 f3f3 	udiv	r3, r2, r3
 8008454:	b29b      	uxth	r3, r3
 8008456:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008458:	e003      	b.n	8008462 <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8008460:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	2b0f      	cmp	r3, #15
 8008466:	d916      	bls.n	8008496 <UART_SetConfig+0x1b86>
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800846e:	d212      	bcs.n	8008496 <UART_SetConfig+0x1b86>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	b29b      	uxth	r3, r3
 8008474:	f023 030f 	bic.w	r3, r3, #15
 8008478:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	085b      	lsrs	r3, r3, #1
 800847e:	b29b      	uxth	r3, r3
 8008480:	f003 0307 	and.w	r3, r3, #7
 8008484:	b29a      	uxth	r2, r3
 8008486:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008488:	4313      	orrs	r3, r2
 800848a:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008492:	60da      	str	r2, [r3, #12]
 8008494:	e3a1      	b.n	8008bda <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800849c:	e39d      	b.n	8008bda <UART_SetConfig+0x22ca>
    }
  }
  else
  {
    switch (clocksource)
 800849e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084a2:	2b40      	cmp	r3, #64	; 0x40
 80084a4:	f200 8386 	bhi.w	8008bb4 <UART_SetConfig+0x22a4>
 80084a8:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <UART_SetConfig+0x1ba0>)
 80084aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ae:	bf00      	nop
 80084b0:	080085b5 	.word	0x080085b5
 80084b4:	08008669 	.word	0x08008669
 80084b8:	08008bb5 	.word	0x08008bb5
 80084bc:	08008bb5 	.word	0x08008bb5
 80084c0:	0800871d 	.word	0x0800871d
 80084c4:	08008bb5 	.word	0x08008bb5
 80084c8:	08008bb5 	.word	0x08008bb5
 80084cc:	08008bb5 	.word	0x08008bb5
 80084d0:	080087d7 	.word	0x080087d7
 80084d4:	08008bb5 	.word	0x08008bb5
 80084d8:	08008bb5 	.word	0x08008bb5
 80084dc:	08008bb5 	.word	0x08008bb5
 80084e0:	08008bb5 	.word	0x08008bb5
 80084e4:	08008bb5 	.word	0x08008bb5
 80084e8:	08008bb5 	.word	0x08008bb5
 80084ec:	08008bb5 	.word	0x08008bb5
 80084f0:	08008891 	.word	0x08008891
 80084f4:	08008bb5 	.word	0x08008bb5
 80084f8:	08008bb5 	.word	0x08008bb5
 80084fc:	08008bb5 	.word	0x08008bb5
 8008500:	08008bb5 	.word	0x08008bb5
 8008504:	08008bb5 	.word	0x08008bb5
 8008508:	08008bb5 	.word	0x08008bb5
 800850c:	08008bb5 	.word	0x08008bb5
 8008510:	08008bb5 	.word	0x08008bb5
 8008514:	08008bb5 	.word	0x08008bb5
 8008518:	08008bb5 	.word	0x08008bb5
 800851c:	08008bb5 	.word	0x08008bb5
 8008520:	08008bb5 	.word	0x08008bb5
 8008524:	08008bb5 	.word	0x08008bb5
 8008528:	08008bb5 	.word	0x08008bb5
 800852c:	08008bb5 	.word	0x08008bb5
 8008530:	08008a01 	.word	0x08008a01
 8008534:	08008bb5 	.word	0x08008bb5
 8008538:	08008bb5 	.word	0x08008bb5
 800853c:	08008bb5 	.word	0x08008bb5
 8008540:	08008bb5 	.word	0x08008bb5
 8008544:	08008bb5 	.word	0x08008bb5
 8008548:	08008bb5 	.word	0x08008bb5
 800854c:	08008bb5 	.word	0x08008bb5
 8008550:	08008bb5 	.word	0x08008bb5
 8008554:	08008bb5 	.word	0x08008bb5
 8008558:	08008bb5 	.word	0x08008bb5
 800855c:	08008bb5 	.word	0x08008bb5
 8008560:	08008bb5 	.word	0x08008bb5
 8008564:	08008bb5 	.word	0x08008bb5
 8008568:	08008bb5 	.word	0x08008bb5
 800856c:	08008bb5 	.word	0x08008bb5
 8008570:	08008bb5 	.word	0x08008bb5
 8008574:	08008bb5 	.word	0x08008bb5
 8008578:	08008bb5 	.word	0x08008bb5
 800857c:	08008bb5 	.word	0x08008bb5
 8008580:	08008bb5 	.word	0x08008bb5
 8008584:	08008bb5 	.word	0x08008bb5
 8008588:	08008bb5 	.word	0x08008bb5
 800858c:	08008bb5 	.word	0x08008bb5
 8008590:	08008bb5 	.word	0x08008bb5
 8008594:	08008bb5 	.word	0x08008bb5
 8008598:	08008bb5 	.word	0x08008bb5
 800859c:	08008bb5 	.word	0x08008bb5
 80085a0:	08008bb5 	.word	0x08008bb5
 80085a4:	08008bb5 	.word	0x08008bb5
 80085a8:	08008bb5 	.word	0x08008bb5
 80085ac:	08008bb5 	.word	0x08008bb5
 80085b0:	08008af5 	.word	0x08008af5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b4:	f7fb f8b6 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 80085b8:	4602      	mov	r2, r0
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d044      	beq.n	800864c <UART_SetConfig+0x1d3c>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d03e      	beq.n	8008648 <UART_SetConfig+0x1d38>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d038      	beq.n	8008644 <UART_SetConfig+0x1d34>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d032      	beq.n	8008640 <UART_SetConfig+0x1d30>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d02c      	beq.n	800863c <UART_SetConfig+0x1d2c>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	2b05      	cmp	r3, #5
 80085e8:	d026      	beq.n	8008638 <UART_SetConfig+0x1d28>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	2b06      	cmp	r3, #6
 80085f0:	d020      	beq.n	8008634 <UART_SetConfig+0x1d24>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	2b07      	cmp	r3, #7
 80085f8:	d01a      	beq.n	8008630 <UART_SetConfig+0x1d20>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	2b08      	cmp	r3, #8
 8008600:	d014      	beq.n	800862c <UART_SetConfig+0x1d1c>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008606:	2b09      	cmp	r3, #9
 8008608:	d00e      	beq.n	8008628 <UART_SetConfig+0x1d18>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	2b0a      	cmp	r3, #10
 8008610:	d008      	beq.n	8008624 <UART_SetConfig+0x1d14>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	2b0b      	cmp	r3, #11
 8008618:	d102      	bne.n	8008620 <UART_SetConfig+0x1d10>
 800861a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800861e:	e016      	b.n	800864e <UART_SetConfig+0x1d3e>
 8008620:	2301      	movs	r3, #1
 8008622:	e014      	b.n	800864e <UART_SetConfig+0x1d3e>
 8008624:	2380      	movs	r3, #128	; 0x80
 8008626:	e012      	b.n	800864e <UART_SetConfig+0x1d3e>
 8008628:	2340      	movs	r3, #64	; 0x40
 800862a:	e010      	b.n	800864e <UART_SetConfig+0x1d3e>
 800862c:	2320      	movs	r3, #32
 800862e:	e00e      	b.n	800864e <UART_SetConfig+0x1d3e>
 8008630:	2310      	movs	r3, #16
 8008632:	e00c      	b.n	800864e <UART_SetConfig+0x1d3e>
 8008634:	230c      	movs	r3, #12
 8008636:	e00a      	b.n	800864e <UART_SetConfig+0x1d3e>
 8008638:	230a      	movs	r3, #10
 800863a:	e008      	b.n	800864e <UART_SetConfig+0x1d3e>
 800863c:	2308      	movs	r3, #8
 800863e:	e006      	b.n	800864e <UART_SetConfig+0x1d3e>
 8008640:	2306      	movs	r3, #6
 8008642:	e004      	b.n	800864e <UART_SetConfig+0x1d3e>
 8008644:	2304      	movs	r3, #4
 8008646:	e002      	b.n	800864e <UART_SetConfig+0x1d3e>
 8008648:	2302      	movs	r3, #2
 800864a:	e000      	b.n	800864e <UART_SetConfig+0x1d3e>
 800864c:	2301      	movs	r3, #1
 800864e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	085b      	lsrs	r3, r3, #1
 8008658:	441a      	add	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008662:	b29b      	uxth	r3, r3
 8008664:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008666:	e2a9      	b.n	8008bbc <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008668:	f7fb f872 	bl	8003750 <HAL_RCC_GetPCLK2Freq>
 800866c:	4602      	mov	r2, r0
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	2b00      	cmp	r3, #0
 8008674:	d044      	beq.n	8008700 <UART_SetConfig+0x1df0>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867a:	2b01      	cmp	r3, #1
 800867c:	d03e      	beq.n	80086fc <UART_SetConfig+0x1dec>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	2b02      	cmp	r3, #2
 8008684:	d038      	beq.n	80086f8 <UART_SetConfig+0x1de8>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	2b03      	cmp	r3, #3
 800868c:	d032      	beq.n	80086f4 <UART_SetConfig+0x1de4>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	2b04      	cmp	r3, #4
 8008694:	d02c      	beq.n	80086f0 <UART_SetConfig+0x1de0>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	2b05      	cmp	r3, #5
 800869c:	d026      	beq.n	80086ec <UART_SetConfig+0x1ddc>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	2b06      	cmp	r3, #6
 80086a4:	d020      	beq.n	80086e8 <UART_SetConfig+0x1dd8>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	2b07      	cmp	r3, #7
 80086ac:	d01a      	beq.n	80086e4 <UART_SetConfig+0x1dd4>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	d014      	beq.n	80086e0 <UART_SetConfig+0x1dd0>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ba:	2b09      	cmp	r3, #9
 80086bc:	d00e      	beq.n	80086dc <UART_SetConfig+0x1dcc>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c2:	2b0a      	cmp	r3, #10
 80086c4:	d008      	beq.n	80086d8 <UART_SetConfig+0x1dc8>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ca:	2b0b      	cmp	r3, #11
 80086cc:	d102      	bne.n	80086d4 <UART_SetConfig+0x1dc4>
 80086ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086d2:	e016      	b.n	8008702 <UART_SetConfig+0x1df2>
 80086d4:	2301      	movs	r3, #1
 80086d6:	e014      	b.n	8008702 <UART_SetConfig+0x1df2>
 80086d8:	2380      	movs	r3, #128	; 0x80
 80086da:	e012      	b.n	8008702 <UART_SetConfig+0x1df2>
 80086dc:	2340      	movs	r3, #64	; 0x40
 80086de:	e010      	b.n	8008702 <UART_SetConfig+0x1df2>
 80086e0:	2320      	movs	r3, #32
 80086e2:	e00e      	b.n	8008702 <UART_SetConfig+0x1df2>
 80086e4:	2310      	movs	r3, #16
 80086e6:	e00c      	b.n	8008702 <UART_SetConfig+0x1df2>
 80086e8:	230c      	movs	r3, #12
 80086ea:	e00a      	b.n	8008702 <UART_SetConfig+0x1df2>
 80086ec:	230a      	movs	r3, #10
 80086ee:	e008      	b.n	8008702 <UART_SetConfig+0x1df2>
 80086f0:	2308      	movs	r3, #8
 80086f2:	e006      	b.n	8008702 <UART_SetConfig+0x1df2>
 80086f4:	2306      	movs	r3, #6
 80086f6:	e004      	b.n	8008702 <UART_SetConfig+0x1df2>
 80086f8:	2304      	movs	r3, #4
 80086fa:	e002      	b.n	8008702 <UART_SetConfig+0x1df2>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e000      	b.n	8008702 <UART_SetConfig+0x1df2>
 8008700:	2301      	movs	r3, #1
 8008702:	fbb2 f2f3 	udiv	r2, r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	085b      	lsrs	r3, r3, #1
 800870c:	441a      	add	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	fbb2 f3f3 	udiv	r3, r2, r3
 8008716:	b29b      	uxth	r3, r3
 8008718:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800871a:	e24f      	b.n	8008bbc <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800871c:	f107 0314 	add.w	r3, r7, #20
 8008720:	4618      	mov	r0, r3
 8008722:	f7fc f943 	bl	80049ac <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2b00      	cmp	r3, #0
 800872e:	d044      	beq.n	80087ba <UART_SetConfig+0x1eaa>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	2b01      	cmp	r3, #1
 8008736:	d03e      	beq.n	80087b6 <UART_SetConfig+0x1ea6>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	2b02      	cmp	r3, #2
 800873e:	d038      	beq.n	80087b2 <UART_SetConfig+0x1ea2>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2b03      	cmp	r3, #3
 8008746:	d032      	beq.n	80087ae <UART_SetConfig+0x1e9e>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	2b04      	cmp	r3, #4
 800874e:	d02c      	beq.n	80087aa <UART_SetConfig+0x1e9a>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	2b05      	cmp	r3, #5
 8008756:	d026      	beq.n	80087a6 <UART_SetConfig+0x1e96>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b06      	cmp	r3, #6
 800875e:	d020      	beq.n	80087a2 <UART_SetConfig+0x1e92>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b07      	cmp	r3, #7
 8008766:	d01a      	beq.n	800879e <UART_SetConfig+0x1e8e>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2b08      	cmp	r3, #8
 800876e:	d014      	beq.n	800879a <UART_SetConfig+0x1e8a>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	2b09      	cmp	r3, #9
 8008776:	d00e      	beq.n	8008796 <UART_SetConfig+0x1e86>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	2b0a      	cmp	r3, #10
 800877e:	d008      	beq.n	8008792 <UART_SetConfig+0x1e82>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	2b0b      	cmp	r3, #11
 8008786:	d102      	bne.n	800878e <UART_SetConfig+0x1e7e>
 8008788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800878c:	e016      	b.n	80087bc <UART_SetConfig+0x1eac>
 800878e:	2301      	movs	r3, #1
 8008790:	e014      	b.n	80087bc <UART_SetConfig+0x1eac>
 8008792:	2380      	movs	r3, #128	; 0x80
 8008794:	e012      	b.n	80087bc <UART_SetConfig+0x1eac>
 8008796:	2340      	movs	r3, #64	; 0x40
 8008798:	e010      	b.n	80087bc <UART_SetConfig+0x1eac>
 800879a:	2320      	movs	r3, #32
 800879c:	e00e      	b.n	80087bc <UART_SetConfig+0x1eac>
 800879e:	2310      	movs	r3, #16
 80087a0:	e00c      	b.n	80087bc <UART_SetConfig+0x1eac>
 80087a2:	230c      	movs	r3, #12
 80087a4:	e00a      	b.n	80087bc <UART_SetConfig+0x1eac>
 80087a6:	230a      	movs	r3, #10
 80087a8:	e008      	b.n	80087bc <UART_SetConfig+0x1eac>
 80087aa:	2308      	movs	r3, #8
 80087ac:	e006      	b.n	80087bc <UART_SetConfig+0x1eac>
 80087ae:	2306      	movs	r3, #6
 80087b0:	e004      	b.n	80087bc <UART_SetConfig+0x1eac>
 80087b2:	2304      	movs	r3, #4
 80087b4:	e002      	b.n	80087bc <UART_SetConfig+0x1eac>
 80087b6:	2302      	movs	r3, #2
 80087b8:	e000      	b.n	80087bc <UART_SetConfig+0x1eac>
 80087ba:	2301      	movs	r3, #1
 80087bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	085b      	lsrs	r3, r3, #1
 80087c6:	441a      	add	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087d4:	e1f2      	b.n	8008bbc <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087d6:	f107 0308 	add.w	r3, r7, #8
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fc fa32 	bl	8004c44 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d044      	beq.n	8008874 <UART_SetConfig+0x1f64>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d03e      	beq.n	8008870 <UART_SetConfig+0x1f60>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d038      	beq.n	800886c <UART_SetConfig+0x1f5c>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d032      	beq.n	8008868 <UART_SetConfig+0x1f58>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	2b04      	cmp	r3, #4
 8008808:	d02c      	beq.n	8008864 <UART_SetConfig+0x1f54>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	2b05      	cmp	r3, #5
 8008810:	d026      	beq.n	8008860 <UART_SetConfig+0x1f50>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008816:	2b06      	cmp	r3, #6
 8008818:	d020      	beq.n	800885c <UART_SetConfig+0x1f4c>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	2b07      	cmp	r3, #7
 8008820:	d01a      	beq.n	8008858 <UART_SetConfig+0x1f48>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	2b08      	cmp	r3, #8
 8008828:	d014      	beq.n	8008854 <UART_SetConfig+0x1f44>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	2b09      	cmp	r3, #9
 8008830:	d00e      	beq.n	8008850 <UART_SetConfig+0x1f40>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	2b0a      	cmp	r3, #10
 8008838:	d008      	beq.n	800884c <UART_SetConfig+0x1f3c>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	2b0b      	cmp	r3, #11
 8008840:	d102      	bne.n	8008848 <UART_SetConfig+0x1f38>
 8008842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008846:	e016      	b.n	8008876 <UART_SetConfig+0x1f66>
 8008848:	2301      	movs	r3, #1
 800884a:	e014      	b.n	8008876 <UART_SetConfig+0x1f66>
 800884c:	2380      	movs	r3, #128	; 0x80
 800884e:	e012      	b.n	8008876 <UART_SetConfig+0x1f66>
 8008850:	2340      	movs	r3, #64	; 0x40
 8008852:	e010      	b.n	8008876 <UART_SetConfig+0x1f66>
 8008854:	2320      	movs	r3, #32
 8008856:	e00e      	b.n	8008876 <UART_SetConfig+0x1f66>
 8008858:	2310      	movs	r3, #16
 800885a:	e00c      	b.n	8008876 <UART_SetConfig+0x1f66>
 800885c:	230c      	movs	r3, #12
 800885e:	e00a      	b.n	8008876 <UART_SetConfig+0x1f66>
 8008860:	230a      	movs	r3, #10
 8008862:	e008      	b.n	8008876 <UART_SetConfig+0x1f66>
 8008864:	2308      	movs	r3, #8
 8008866:	e006      	b.n	8008876 <UART_SetConfig+0x1f66>
 8008868:	2306      	movs	r3, #6
 800886a:	e004      	b.n	8008876 <UART_SetConfig+0x1f66>
 800886c:	2304      	movs	r3, #4
 800886e:	e002      	b.n	8008876 <UART_SetConfig+0x1f66>
 8008870:	2302      	movs	r3, #2
 8008872:	e000      	b.n	8008876 <UART_SetConfig+0x1f66>
 8008874:	2301      	movs	r3, #1
 8008876:	fbb2 f2f3 	udiv	r2, r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	085b      	lsrs	r3, r3, #1
 8008880:	441a      	add	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	fbb2 f3f3 	udiv	r3, r2, r3
 800888a:	b29b      	uxth	r3, r3
 800888c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800888e:	e195      	b.n	8008bbc <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008890:	4b87      	ldr	r3, [pc, #540]	; (8008ab0 <UART_SetConfig+0x21a0>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0320 	and.w	r3, r3, #32
 8008898:	2b00      	cmp	r3, #0
 800889a:	d05d      	beq.n	8008958 <UART_SetConfig+0x2048>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800889c:	4b84      	ldr	r3, [pc, #528]	; (8008ab0 <UART_SetConfig+0x21a0>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	08db      	lsrs	r3, r3, #3
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	4a83      	ldr	r2, [pc, #524]	; (8008ab4 <UART_SetConfig+0x21a4>)
 80088a8:	40da      	lsrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d044      	beq.n	800893c <UART_SetConfig+0x202c>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d03e      	beq.n	8008938 <UART_SetConfig+0x2028>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d038      	beq.n	8008934 <UART_SetConfig+0x2024>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d032      	beq.n	8008930 <UART_SetConfig+0x2020>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d02c      	beq.n	800892c <UART_SetConfig+0x201c>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	2b05      	cmp	r3, #5
 80088d8:	d026      	beq.n	8008928 <UART_SetConfig+0x2018>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	2b06      	cmp	r3, #6
 80088e0:	d020      	beq.n	8008924 <UART_SetConfig+0x2014>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	2b07      	cmp	r3, #7
 80088e8:	d01a      	beq.n	8008920 <UART_SetConfig+0x2010>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d014      	beq.n	800891c <UART_SetConfig+0x200c>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	2b09      	cmp	r3, #9
 80088f8:	d00e      	beq.n	8008918 <UART_SetConfig+0x2008>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	2b0a      	cmp	r3, #10
 8008900:	d008      	beq.n	8008914 <UART_SetConfig+0x2004>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	2b0b      	cmp	r3, #11
 8008908:	d102      	bne.n	8008910 <UART_SetConfig+0x2000>
 800890a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800890e:	e016      	b.n	800893e <UART_SetConfig+0x202e>
 8008910:	2301      	movs	r3, #1
 8008912:	e014      	b.n	800893e <UART_SetConfig+0x202e>
 8008914:	2380      	movs	r3, #128	; 0x80
 8008916:	e012      	b.n	800893e <UART_SetConfig+0x202e>
 8008918:	2340      	movs	r3, #64	; 0x40
 800891a:	e010      	b.n	800893e <UART_SetConfig+0x202e>
 800891c:	2320      	movs	r3, #32
 800891e:	e00e      	b.n	800893e <UART_SetConfig+0x202e>
 8008920:	2310      	movs	r3, #16
 8008922:	e00c      	b.n	800893e <UART_SetConfig+0x202e>
 8008924:	230c      	movs	r3, #12
 8008926:	e00a      	b.n	800893e <UART_SetConfig+0x202e>
 8008928:	230a      	movs	r3, #10
 800892a:	e008      	b.n	800893e <UART_SetConfig+0x202e>
 800892c:	2308      	movs	r3, #8
 800892e:	e006      	b.n	800893e <UART_SetConfig+0x202e>
 8008930:	2306      	movs	r3, #6
 8008932:	e004      	b.n	800893e <UART_SetConfig+0x202e>
 8008934:	2304      	movs	r3, #4
 8008936:	e002      	b.n	800893e <UART_SetConfig+0x202e>
 8008938:	2302      	movs	r3, #2
 800893a:	e000      	b.n	800893e <UART_SetConfig+0x202e>
 800893c:	2301      	movs	r3, #1
 800893e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	085b      	lsrs	r3, r3, #1
 8008948:	441a      	add	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008952:	b29b      	uxth	r3, r3
 8008954:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008956:	e131      	b.n	8008bbc <UART_SetConfig+0x22ac>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d043      	beq.n	80089e8 <UART_SetConfig+0x20d8>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	2b01      	cmp	r3, #1
 8008966:	d03d      	beq.n	80089e4 <UART_SetConfig+0x20d4>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	2b02      	cmp	r3, #2
 800896e:	d037      	beq.n	80089e0 <UART_SetConfig+0x20d0>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	2b03      	cmp	r3, #3
 8008976:	d031      	beq.n	80089dc <UART_SetConfig+0x20cc>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897c:	2b04      	cmp	r3, #4
 800897e:	d02b      	beq.n	80089d8 <UART_SetConfig+0x20c8>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	2b05      	cmp	r3, #5
 8008986:	d025      	beq.n	80089d4 <UART_SetConfig+0x20c4>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	2b06      	cmp	r3, #6
 800898e:	d01f      	beq.n	80089d0 <UART_SetConfig+0x20c0>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	2b07      	cmp	r3, #7
 8008996:	d019      	beq.n	80089cc <UART_SetConfig+0x20bc>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	2b08      	cmp	r3, #8
 800899e:	d013      	beq.n	80089c8 <UART_SetConfig+0x20b8>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	2b09      	cmp	r3, #9
 80089a6:	d00d      	beq.n	80089c4 <UART_SetConfig+0x20b4>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	2b0a      	cmp	r3, #10
 80089ae:	d007      	beq.n	80089c0 <UART_SetConfig+0x20b0>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	2b0b      	cmp	r3, #11
 80089b6:	d101      	bne.n	80089bc <UART_SetConfig+0x20ac>
 80089b8:	4b3f      	ldr	r3, [pc, #252]	; (8008ab8 <UART_SetConfig+0x21a8>)
 80089ba:	e016      	b.n	80089ea <UART_SetConfig+0x20da>
 80089bc:	4b3d      	ldr	r3, [pc, #244]	; (8008ab4 <UART_SetConfig+0x21a4>)
 80089be:	e014      	b.n	80089ea <UART_SetConfig+0x20da>
 80089c0:	4b3e      	ldr	r3, [pc, #248]	; (8008abc <UART_SetConfig+0x21ac>)
 80089c2:	e012      	b.n	80089ea <UART_SetConfig+0x20da>
 80089c4:	4b3e      	ldr	r3, [pc, #248]	; (8008ac0 <UART_SetConfig+0x21b0>)
 80089c6:	e010      	b.n	80089ea <UART_SetConfig+0x20da>
 80089c8:	4b3e      	ldr	r3, [pc, #248]	; (8008ac4 <UART_SetConfig+0x21b4>)
 80089ca:	e00e      	b.n	80089ea <UART_SetConfig+0x20da>
 80089cc:	4b3e      	ldr	r3, [pc, #248]	; (8008ac8 <UART_SetConfig+0x21b8>)
 80089ce:	e00c      	b.n	80089ea <UART_SetConfig+0x20da>
 80089d0:	4b3e      	ldr	r3, [pc, #248]	; (8008acc <UART_SetConfig+0x21bc>)
 80089d2:	e00a      	b.n	80089ea <UART_SetConfig+0x20da>
 80089d4:	4b3e      	ldr	r3, [pc, #248]	; (8008ad0 <UART_SetConfig+0x21c0>)
 80089d6:	e008      	b.n	80089ea <UART_SetConfig+0x20da>
 80089d8:	4b3e      	ldr	r3, [pc, #248]	; (8008ad4 <UART_SetConfig+0x21c4>)
 80089da:	e006      	b.n	80089ea <UART_SetConfig+0x20da>
 80089dc:	4b3e      	ldr	r3, [pc, #248]	; (8008ad8 <UART_SetConfig+0x21c8>)
 80089de:	e004      	b.n	80089ea <UART_SetConfig+0x20da>
 80089e0:	4b3e      	ldr	r3, [pc, #248]	; (8008adc <UART_SetConfig+0x21cc>)
 80089e2:	e002      	b.n	80089ea <UART_SetConfig+0x20da>
 80089e4:	4b3e      	ldr	r3, [pc, #248]	; (8008ae0 <UART_SetConfig+0x21d0>)
 80089e6:	e000      	b.n	80089ea <UART_SetConfig+0x20da>
 80089e8:	4b32      	ldr	r3, [pc, #200]	; (8008ab4 <UART_SetConfig+0x21a4>)
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	6852      	ldr	r2, [r2, #4]
 80089ee:	0852      	lsrs	r2, r2, #1
 80089f0:	441a      	add	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089fe:	e0dd      	b.n	8008bbc <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d046      	beq.n	8008a96 <UART_SetConfig+0x2186>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d040      	beq.n	8008a92 <UART_SetConfig+0x2182>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d03a      	beq.n	8008a8e <UART_SetConfig+0x217e>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d034      	beq.n	8008a8a <UART_SetConfig+0x217a>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d02e      	beq.n	8008a86 <UART_SetConfig+0x2176>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2c:	2b05      	cmp	r3, #5
 8008a2e:	d028      	beq.n	8008a82 <UART_SetConfig+0x2172>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	2b06      	cmp	r3, #6
 8008a36:	d022      	beq.n	8008a7e <UART_SetConfig+0x216e>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	2b07      	cmp	r3, #7
 8008a3e:	d01c      	beq.n	8008a7a <UART_SetConfig+0x216a>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d016      	beq.n	8008a76 <UART_SetConfig+0x2166>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2b09      	cmp	r3, #9
 8008a4e:	d00f      	beq.n	8008a70 <UART_SetConfig+0x2160>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	2b0a      	cmp	r3, #10
 8008a56:	d008      	beq.n	8008a6a <UART_SetConfig+0x215a>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	2b0b      	cmp	r3, #11
 8008a5e:	d102      	bne.n	8008a66 <UART_SetConfig+0x2156>
 8008a60:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008a64:	e018      	b.n	8008a98 <UART_SetConfig+0x2188>
 8008a66:	4b18      	ldr	r3, [pc, #96]	; (8008ac8 <UART_SetConfig+0x21b8>)
 8008a68:	e016      	b.n	8008a98 <UART_SetConfig+0x2188>
 8008a6a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008a6e:	e013      	b.n	8008a98 <UART_SetConfig+0x2188>
 8008a70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008a74:	e010      	b.n	8008a98 <UART_SetConfig+0x2188>
 8008a76:	4b1b      	ldr	r3, [pc, #108]	; (8008ae4 <UART_SetConfig+0x21d4>)
 8008a78:	e00e      	b.n	8008a98 <UART_SetConfig+0x2188>
 8008a7a:	4b0f      	ldr	r3, [pc, #60]	; (8008ab8 <UART_SetConfig+0x21a8>)
 8008a7c:	e00c      	b.n	8008a98 <UART_SetConfig+0x2188>
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <UART_SetConfig+0x21d8>)
 8008a80:	e00a      	b.n	8008a98 <UART_SetConfig+0x2188>
 8008a82:	4b1a      	ldr	r3, [pc, #104]	; (8008aec <UART_SetConfig+0x21dc>)
 8008a84:	e008      	b.n	8008a98 <UART_SetConfig+0x2188>
 8008a86:	4b0d      	ldr	r3, [pc, #52]	; (8008abc <UART_SetConfig+0x21ac>)
 8008a88:	e006      	b.n	8008a98 <UART_SetConfig+0x2188>
 8008a8a:	4b19      	ldr	r3, [pc, #100]	; (8008af0 <UART_SetConfig+0x21e0>)
 8008a8c:	e004      	b.n	8008a98 <UART_SetConfig+0x2188>
 8008a8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ac0 <UART_SetConfig+0x21b0>)
 8008a90:	e002      	b.n	8008a98 <UART_SetConfig+0x2188>
 8008a92:	4b0c      	ldr	r3, [pc, #48]	; (8008ac4 <UART_SetConfig+0x21b4>)
 8008a94:	e000      	b.n	8008a98 <UART_SetConfig+0x2188>
 8008a96:	4b0c      	ldr	r3, [pc, #48]	; (8008ac8 <UART_SetConfig+0x21b8>)
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	6852      	ldr	r2, [r2, #4]
 8008a9c:	0852      	lsrs	r2, r2, #1
 8008a9e:	441a      	add	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aac:	e086      	b.n	8008bbc <UART_SetConfig+0x22ac>
 8008aae:	bf00      	nop
 8008ab0:	58024400 	.word	0x58024400
 8008ab4:	03d09000 	.word	0x03d09000
 8008ab8:	0003d090 	.word	0x0003d090
 8008abc:	0007a120 	.word	0x0007a120
 8008ac0:	000f4240 	.word	0x000f4240
 8008ac4:	001e8480 	.word	0x001e8480
 8008ac8:	003d0900 	.word	0x003d0900
 8008acc:	00516155 	.word	0x00516155
 8008ad0:	0061a800 	.word	0x0061a800
 8008ad4:	007a1200 	.word	0x007a1200
 8008ad8:	00a2c2aa 	.word	0x00a2c2aa
 8008adc:	00f42400 	.word	0x00f42400
 8008ae0:	01e84800 	.word	0x01e84800
 8008ae4:	0001e848 	.word	0x0001e848
 8008ae8:	00051615 	.word	0x00051615
 8008aec:	00061a80 	.word	0x00061a80
 8008af0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d04e      	beq.n	8008b9a <UART_SetConfig+0x228a>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d047      	beq.n	8008b94 <UART_SetConfig+0x2284>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d040      	beq.n	8008b8e <UART_SetConfig+0x227e>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d039      	beq.n	8008b88 <UART_SetConfig+0x2278>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	d032      	beq.n	8008b82 <UART_SetConfig+0x2272>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	2b05      	cmp	r3, #5
 8008b22:	d02b      	beq.n	8008b7c <UART_SetConfig+0x226c>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	2b06      	cmp	r3, #6
 8008b2a:	d024      	beq.n	8008b76 <UART_SetConfig+0x2266>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	2b07      	cmp	r3, #7
 8008b32:	d01d      	beq.n	8008b70 <UART_SetConfig+0x2260>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d016      	beq.n	8008b6a <UART_SetConfig+0x225a>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b09      	cmp	r3, #9
 8008b42:	d00f      	beq.n	8008b64 <UART_SetConfig+0x2254>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	2b0a      	cmp	r3, #10
 8008b4a:	d008      	beq.n	8008b5e <UART_SetConfig+0x224e>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	2b0b      	cmp	r3, #11
 8008b52:	d101      	bne.n	8008b58 <UART_SetConfig+0x2248>
 8008b54:	2380      	movs	r3, #128	; 0x80
 8008b56:	e022      	b.n	8008b9e <UART_SetConfig+0x228e>
 8008b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b5c:	e01f      	b.n	8008b9e <UART_SetConfig+0x228e>
 8008b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b62:	e01c      	b.n	8008b9e <UART_SetConfig+0x228e>
 8008b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b68:	e019      	b.n	8008b9e <UART_SetConfig+0x228e>
 8008b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b6e:	e016      	b.n	8008b9e <UART_SetConfig+0x228e>
 8008b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b74:	e013      	b.n	8008b9e <UART_SetConfig+0x228e>
 8008b76:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008b7a:	e010      	b.n	8008b9e <UART_SetConfig+0x228e>
 8008b7c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008b80:	e00d      	b.n	8008b9e <UART_SetConfig+0x228e>
 8008b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b86:	e00a      	b.n	8008b9e <UART_SetConfig+0x228e>
 8008b88:	f241 5355 	movw	r3, #5461	; 0x1555
 8008b8c:	e007      	b.n	8008b9e <UART_SetConfig+0x228e>
 8008b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b92:	e004      	b.n	8008b9e <UART_SetConfig+0x228e>
 8008b94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b98:	e001      	b.n	8008b9e <UART_SetConfig+0x228e>
 8008b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	6852      	ldr	r2, [r2, #4]
 8008ba2:	0852      	lsrs	r2, r2, #1
 8008ba4:	441a      	add	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bb2:	e003      	b.n	8008bbc <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8008bba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbe:	2b0f      	cmp	r3, #15
 8008bc0:	d908      	bls.n	8008bd4 <UART_SetConfig+0x22c4>
 8008bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc8:	d204      	bcs.n	8008bd4 <UART_SetConfig+0x22c4>
    {
      huart->Instance->BRR = usartdiv;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bd0:	60da      	str	r2, [r3, #12]
 8008bd2:	e002      	b.n	8008bda <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008bf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3738      	adds	r7, #56	; 0x38
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00a      	beq.n	8008c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00a      	beq.n	8008c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c76:	f003 0308 	and.w	r3, r3, #8
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c98:	f003 0310 	and.w	r3, r3, #16
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00a      	beq.n	8008cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d01a      	beq.n	8008d1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d02:	d10a      	bne.n	8008d1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00a      	beq.n	8008d3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	605a      	str	r2, [r3, #4]
  }
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008d58:	f7f7 fcc8 	bl	80006ec <HAL_GetTick>
 8008d5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0308 	and.w	r3, r3, #8
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d10e      	bne.n	8008d8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f82c 	bl	8008dd8 <UART_WaitOnFlagUntilTimeout>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e022      	b.n	8008dd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d10e      	bne.n	8008db6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f816 	bl	8008dd8 <UART_WaitOnFlagUntilTimeout>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e00c      	b.n	8008dd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2220      	movs	r2, #32
 8008dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	4613      	mov	r3, r2
 8008de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de8:	e02c      	b.n	8008e44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d028      	beq.n	8008e44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008df2:	f7f7 fc7b 	bl	80006ec <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d302      	bcc.n	8008e08 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d11d      	bne.n	8008e44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e16:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689a      	ldr	r2, [r3, #8]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0201 	bic.w	r2, r2, #1
 8008e26:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2220      	movs	r2, #32
 8008e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e00f      	b.n	8008e64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	69da      	ldr	r2, [r3, #28]
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	bf0c      	ite	eq
 8008e54:	2301      	moveq	r3, #1
 8008e56:	2300      	movne	r3, #0
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d0c3      	beq.n	8008dea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d101      	bne.n	8008e82 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e7e:	2302      	movs	r3, #2
 8008e80:	e027      	b.n	8008ed2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2224      	movs	r2, #36	; 0x24
 8008e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0201 	bic.w	r2, r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008eb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d101      	bne.n	8008ef6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e02d      	b.n	8008f52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2224      	movs	r2, #36	; 0x24
 8008f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0201 	bic.w	r2, r2, #1
 8008f1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f850 	bl	8008fd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2220      	movs	r2, #32
 8008f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d101      	bne.n	8008f72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f6e:	2302      	movs	r3, #2
 8008f70:	e02d      	b.n	8008fce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2224      	movs	r2, #36	; 0x24
 8008f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f022 0201 	bic.w	r2, r2, #1
 8008f98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	430a      	orrs	r2, r1
 8008fac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f812 	bl	8008fd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b089      	sub	sp, #36	; 0x24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008fe0:	4a2f      	ldr	r2, [pc, #188]	; (80090a0 <UARTEx_SetNbDataToProcess+0xc8>)
 8008fe2:	f107 0314 	add.w	r3, r7, #20
 8008fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fea:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008fee:	4a2d      	ldr	r2, [pc, #180]	; (80090a4 <UARTEx_SetNbDataToProcess+0xcc>)
 8008ff0:	f107 030c 	add.w	r3, r7, #12
 8008ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ff8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009000:	2b00      	cmp	r3, #0
 8009002:	d108      	bne.n	8009016 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009014:	e03d      	b.n	8009092 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009016:	2308      	movs	r3, #8
 8009018:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800901a:	2308      	movs	r3, #8
 800901c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	0e5b      	lsrs	r3, r3, #25
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	0f5b      	lsrs	r3, r3, #29
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800903e:	7fbb      	ldrb	r3, [r7, #30]
 8009040:	7f3a      	ldrb	r2, [r7, #28]
 8009042:	f107 0120 	add.w	r1, r7, #32
 8009046:	440a      	add	r2, r1
 8009048:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800904c:	fb02 f303 	mul.w	r3, r2, r3
 8009050:	7f3a      	ldrb	r2, [r7, #28]
 8009052:	f107 0120 	add.w	r1, r7, #32
 8009056:	440a      	add	r2, r1
 8009058:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800905c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009060:	b29a      	uxth	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009068:	7ffb      	ldrb	r3, [r7, #31]
 800906a:	7f7a      	ldrb	r2, [r7, #29]
 800906c:	f107 0120 	add.w	r1, r7, #32
 8009070:	440a      	add	r2, r1
 8009072:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009076:	fb02 f303 	mul.w	r3, r2, r3
 800907a:	7f7a      	ldrb	r2, [r7, #29]
 800907c:	f107 0120 	add.w	r1, r7, #32
 8009080:	440a      	add	r2, r1
 8009082:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009086:	fb93 f3f2 	sdiv	r3, r3, r2
 800908a:	b29a      	uxth	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009092:	bf00      	nop
 8009094:	3724      	adds	r7, #36	; 0x24
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	0800cca0 	.word	0x0800cca0
 80090a4:	0800cca8 	.word	0x0800cca8

080090a8 <_ZN3PIDC1Ev>:
 * OutPut()でFloatを取り出せば速度型のPID制御が簡単にできるはず。
 */

#include "PID.hpp"

PID::PID(){
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	4a04      	ldr	r2, [pc, #16]	; (80090c4 <_ZN3PIDC1Ev+0x1c>)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	601a      	str	r2, [r3, #0]

}
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	0800cce4 	.word	0x0800cce4

080090c8 <_ZN3PIDD1Ev>:
	// TODO Auto-generated constructor stub

	mError.fill(0);
}

PID::~PID() {
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	4a04      	ldr	r2, [pc, #16]	; (80090e4 <_ZN3PIDD1Ev+0x1c>)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4618      	mov	r0, r3
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	0800cce4 	.word	0x0800cce4

080090e8 <_ZN3PIDD0Ev>:
PID::~PID() {
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
}
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff ffe9 	bl	80090c8 <_ZN3PIDD1Ev>
 80090f6:	2128      	movs	r1, #40	; 0x28
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f002 f89b 	bl	800b234 <_ZdlPvj>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <_ZN7ArgCtrlC1Ev>:
 *      Author: watashi
 */

#include "ArgCtrl.hpp"

ArgCtrl::ArgCtrl() {
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	4a0c      	ldr	r2, [pc, #48]	; (8009144 <_ZN7ArgCtrlC1Ev+0x3c>)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mArg = 0;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f04f 0200 	mov.w	r2, #0
 800911c:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f04f 0200 	mov.w	r2, #0
 8009124:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f04f 0200 	mov.w	r2, #0
 8009134:	611a      	str	r2, [r3, #16]
}
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4618      	mov	r0, r3
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	0800ccf4 	.word	0x0800ccf4

08009148 <_ZN7ArgCtrlD1Ev>:

ArgCtrl::~ArgCtrl() {
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	4a0c      	ldr	r2, [pc, #48]	; (8009184 <_ZN7ArgCtrlD1Ev+0x3c>)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	mArg = 0;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f04f 0200 	mov.w	r2, #0
 800915c:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f04f 0200 	mov.w	r2, #0
 8009164:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f04f 0200 	mov.w	r2, #0
 800916c:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f04f 0200 	mov.w	r2, #0
 8009174:	611a      	str	r2, [r3, #16]
}
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4618      	mov	r0, r3
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr
 8009184:	0800ccf4 	.word	0x0800ccf4

08009188 <_ZN7ArgCtrlD0Ev>:
ArgCtrl::~ArgCtrl() {
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
}
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff ffd9 	bl	8009148 <_ZN7ArgCtrlD1Ev>
 8009196:	211c      	movs	r1, #28
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f002 f84b 	bl	800b234 <_ZdlPvj>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <_ZN9DebugCtrlC1Ev>:
 *      Author: watashi
 */

#include "DebugCtrl.hpp"

DebugCtrl::DebugCtrl() {
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	4a0b      	ldr	r2, [pc, #44]	; (80091e0 <_ZN9DebugCtrlC1Ev+0x38>)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	3304      	adds	r3, #4
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 f918 	bl	80093f0 <_ZN9DebugInfoC1Ev>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3314      	adds	r3, #20
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 f991 	bl	80094ec <_ZN13DebugInfoTinyC1Ev>
	// TODO Auto-generated constructor stub
	mDebugStatus = 0;
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	f642 5320 	movw	r3, #11552	; 0x2d20
 80091d0:	4413      	add	r3, r2
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
}
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	0800cd04 	.word	0x0800cd04

080091e4 <_ZN9DebugCtrlD1Ev>:

DebugCtrl::~DebugCtrl() {
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	4a08      	ldr	r2, [pc, #32]	; (8009210 <_ZN9DebugCtrlD1Ev+0x2c>)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	3314      	adds	r3, #20
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 f98c 	bl	8009514 <_ZN13DebugInfoTinyD1Ev>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	3304      	adds	r3, #4
 8009200:	4618      	mov	r0, r3
 8009202:	f000 f909 	bl	8009418 <_ZN9DebugInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	0800cd04 	.word	0x0800cd04

08009214 <_ZN9DebugCtrlD0Ev>:
DebugCtrl::~DebugCtrl() {
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
}
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7ff ffe1 	bl	80091e4 <_ZN9DebugCtrlD1Ev>
 8009222:	f642 5124 	movw	r1, #11556	; 0x2d24
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f002 f804 	bl	800b234 <_ZdlPvj>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
 8009236:	b5b0      	push	{r4, r5, r7, lr}
 8009238:	b082      	sub	sp, #8
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681c      	ldr	r4, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	685d      	ldr	r5, [r3, #4]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4618      	mov	r0, r3
 800924a:	f000 f835 	bl	80092b8 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 800924e:	4603      	mov	r3, r0
 8009250:	461a      	mov	r2, r3
 8009252:	4629      	mov	r1, r5
 8009254:	4620      	mov	r0, r4
 8009256:	f000 f83a 	bl	80092ce <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4618      	mov	r0, r3
 800925e:	f000 f811 	bl	8009284 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bdb0      	pop	{r4, r5, r7, pc}

0800926c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>:
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f838 	bl	80092ea <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6819      	ldr	r1, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	461a      	mov	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	119b      	asrs	r3, r3, #6
 800929e:	461a      	mov	r2, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f82e 	bl	8009302 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7ff ffdf 	bl	800926c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>:
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4618      	mov	r0, r3
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>:
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	607a      	str	r2, [r7, #4]
 80092da:	68b9      	ldr	r1, [r7, #8]
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 f823 	bl	8009328 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>
 80092e2:	bf00      	nop
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>:
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b082      	sub	sp, #8
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f825 	bl	8009342 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>:
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	607a      	str	r2, [r7, #4]
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d005      	beq.n	8009320 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j+0x1e>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	68b9      	ldr	r1, [r7, #8]
 800931a:	4618      	mov	r0, r3
 800931c:	f000 f81c 	bl	8009358 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>
 8009320:	bf00      	nop
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>:
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f829 	bl	800938c <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>:
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>:
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	68b9      	ldr	r1, [r7, #8]
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 f827 	bl	80093bc <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>
 800936e:	bf00      	nop
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>:
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>:
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	429a      	cmp	r2, r3
 800939c:	d00a      	beq.n	80093b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0x28>
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7ff ffe9 	bl	8009376 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 80093a4:	4603      	mov	r3, r0
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 f815 	bl	80093d6 <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3340      	adds	r3, #64	; 0x40
 80093b0:	607b      	str	r3, [r7, #4]
 80093b2:	e7f0      	b.n	8009396 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0xa>
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>:
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	68b8      	ldr	r0, [r7, #8]
 80093ca:	f001 ff35 	bl	800b238 <_ZdlPv>
 80093ce:	bf00      	nop
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>:
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b082      	sub	sp, #8
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	4798      	blx	r3
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <_ZN9DebugInfoC1Ev>:

DebugInfo::SendMotorData::~SendMotorData(){
	//destructor
}

DebugInfo::DebugInfo() {
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	4a06      	ldr	r2, [pc, #24]	; (8009414 <_ZN9DebugInfoC1Ev+0x24>)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3304      	adds	r3, #4
 8009402:	4618      	mov	r0, r3
 8009404:	f000 f82c 	bl	8009460 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
	// TODO Auto-generated constructor stub
}
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	0800cd14 	.word	0x0800cd14

08009418 <_ZN9DebugInfoD1Ev>:

DebugInfo::~DebugInfo() {
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	4a06      	ldr	r2, [pc, #24]	; (800943c <_ZN9DebugInfoD1Ev+0x24>)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3304      	adds	r3, #4
 800942a:	4618      	mov	r0, r3
 800942c:	f7ff ff03 	bl	8009236 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
	// TODO Auto-generated destructor stub
}
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	0800cd14 	.word	0x0800cd14

08009440 <_ZN9DebugInfoD0Ev>:
DebugInfo::~DebugInfo() {
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
}
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7ff ffe5 	bl	8009418 <_ZN9DebugInfoD1Ev>
 800944e:	2110      	movs	r1, #16
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f001 feef 	bl	800b234 <_ZdlPvj>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4618      	mov	r0, r3
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4618      	mov	r0, r3
 800946c:	f000 f805 	bl	800947a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
 800947a:	b580      	push	{r7, lr}
 800947c:	b082      	sub	sp, #8
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4618      	mov	r0, r3
 8009486:	f000 f805 	bl	8009494 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>:
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f80e 	bl	80094be <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	609a      	str	r2, [r3, #8]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4618      	mov	r0, r3
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>:
 80094be:	b580      	push	{r7, lr}
 80094c0:	b082      	sub	sp, #8
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f805 	bl	80094d6 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>:
 80094d6:	b480      	push	{r7}
 80094d8:	b083      	sub	sp, #12
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <_ZN13DebugInfoTinyC1Ev>:
 * 読み出しがVector型であるのは(float型でないのは)データの個数の変化に対応するため。
 *(配列のfor使って調理してください(にっこり))
 */
#include "DebugInfoTiny.hpp"

DebugInfoTiny::DebugInfoTiny() {
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	4a06      	ldr	r2, [pc, #24]	; (8009510 <_ZN13DebugInfoTinyC1Ev+0x24>)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mCNT = 0;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	605a      	str	r2, [r3, #4]
}
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4618      	mov	r0, r3
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	0800cd24 	.word	0x0800cd24

08009514 <_ZN13DebugInfoTinyD1Ev>:

DebugInfoTiny::~DebugInfoTiny() {
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	4a04      	ldr	r2, [pc, #16]	; (8009530 <_ZN13DebugInfoTinyD1Ev+0x1c>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	0800cd24 	.word	0x0800cd24

08009534 <_ZN13DebugInfoTinyD0Ev>:
DebugInfoTiny::~DebugInfoTiny() {
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
}
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff ffe9 	bl	8009514 <_ZN13DebugInfoTinyD1Ev>
 8009542:	f642 5108 	movw	r1, #11528	; 0x2d08
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f001 fe74 	bl	800b234 <_ZdlPvj>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4618      	mov	r0, r3
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <_ZN3PWMC1Ev>:

#include "STM32SystemPack.h"
#include "paramsetting.h"


class PWM {
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	609a      	str	r2, [r3, #8]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4618      	mov	r0, r3
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
	...

08009574 <_ZN9MotorCtrlC1Ev>:
#include "MotorCtrl.hpp"

extern TIM_HandleTypeDef htim1;
extern ADC_HandleTypeDef hadc3;

MotorCtrl::MotorCtrl() {
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	4a25      	ldr	r2, [pc, #148]	; (8009614 <_ZN9MotorCtrlC1Ev+0xa0>)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	605a      	str	r2, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3358      	adds	r3, #88	; 0x58
 800958c:	4618      	mov	r0, r3
 800958e:	f000 f8bd 	bl	800970c <_ZN8ObserverC1Ev>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009598:	4618      	mov	r0, r3
 800959a:	f7ff ffdc 	bl	8009556 <_ZN3PWMC1Ev>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff ffd6 	bl	8009556 <_ZN3PWMC1Ev>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7ff ffd0 	bl	8009556 <_ZN3PWMC1Ev>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff ffca 	bl	8009556 <_ZN3PWMC1Ev>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7ff fd6d 	bl	80090a8 <_ZN3PIDC1Ev>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7ff fd67 	bl	80090a8 <_ZN3PIDC1Ev>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7ff fd61 	bl	80090a8 <_ZN3PIDC1Ev>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff fd5b 	bl	80090a8 <_ZN3PIDC1Ev>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff fd85 	bl	8009108 <_ZN7ArgCtrlC1Ev>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff fdcf 	bl	80091a8 <_ZN9DebugCtrlC1Ev>
	// TODO Auto-generated constructor stub

}
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	0800cd34 	.word	0x0800cd34

08009618 <_ZN9MotorCtrlD1Ev>:

MotorCtrl::~MotorCtrl() {
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	4a18      	ldr	r2, [pc, #96]	; (8009684 <_ZN9MotorCtrlD1Ev+0x6c>)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff fdd9 	bl	80091e4 <_ZN9DebugCtrlD1Ev>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8009638:	4618      	mov	r0, r3
 800963a:	f7ff fd85 	bl	8009148 <_ZN7ArgCtrlD1Ev>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009644:	4618      	mov	r0, r3
 8009646:	f7ff fd3f 	bl	80090c8 <_ZN3PIDD1Ev>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8009650:	4618      	mov	r0, r3
 8009652:	f7ff fd39 	bl	80090c8 <_ZN3PIDD1Ev>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800965c:	4618      	mov	r0, r3
 800965e:	f7ff fd33 	bl	80090c8 <_ZN3PIDD1Ev>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009668:	4618      	mov	r0, r3
 800966a:	f7ff fd2d 	bl	80090c8 <_ZN3PIDD1Ev>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3358      	adds	r3, #88	; 0x58
 8009672:	4618      	mov	r0, r3
 8009674:	f000 f862 	bl	800973c <_ZN8ObserverD1Ev>
	// TODO Auto-generated destructor stub
}
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	0800cd34 	.word	0x0800cd34

08009688 <_ZN9MotorCtrlD0Ev>:
MotorCtrl::~MotorCtrl() {
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
}
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff ffc1 	bl	8009618 <_ZN9MotorCtrlD1Ev>
 8009696:	f642 7164 	movw	r1, #12132	; 0x2f64
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 fdca 	bl	800b234 <_ZdlPvj>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <_ZN6EMFObsC1Ev>:
 *      Author: watashi
 */

#include "EMFObs.hpp"

EMFObs::EMFObs() {
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	4a04      	ldr	r2, [pc, #16]	; (80096c8 <_ZN6EMFObsC1Ev+0x1c>)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	0800cd44 	.word	0x0800cd44

080096cc <_ZN6EMFObsD1Ev>:

EMFObs::~EMFObs() {
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	4a04      	ldr	r2, [pc, #16]	; (80096e8 <_ZN6EMFObsD1Ev+0x1c>)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4618      	mov	r0, r3
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	0800cd44 	.word	0x0800cd44

080096ec <_ZN6EMFObsD0Ev>:
EMFObs::~EMFObs() {
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
}
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7ff ffe9 	bl	80096cc <_ZN6EMFObsD1Ev>
 80096fa:	218c      	movs	r1, #140	; 0x8c
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f001 fd99 	bl	800b234 <_ZdlPvj>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4618      	mov	r0, r3
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <_ZN8ObserverC1Ev>:
 *      Author: watashi
 */

#include "Observer.hpp"

Observer::Observer() {
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	4a08      	ldr	r2, [pc, #32]	; (8009738 <_ZN8ObserverC1Ev+0x2c>)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	3304      	adds	r3, #4
 800971e:	4618      	mov	r0, r3
 8009720:	f7ff ffc4 	bl	80096ac <_ZN6EMFObsC1Ev>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3390      	adds	r3, #144	; 0x90
 8009728:	4618      	mov	r0, r3
 800972a:	f000 f82f 	bl	800978c <_ZN4PII2C1Ev>
	// TODO Auto-generated constructor stub
}
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	0800cd54 	.word	0x0800cd54

0800973c <_ZN8ObserverD1Ev>:

Observer::~Observer() {
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	4a08      	ldr	r2, [pc, #32]	; (8009768 <_ZN8ObserverD1Ev+0x2c>)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	3390      	adds	r3, #144	; 0x90
 800974e:	4618      	mov	r0, r3
 8009750:	f000 f82c 	bl	80097ac <_ZN4PII2D1Ev>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3304      	adds	r3, #4
 8009758:	4618      	mov	r0, r3
 800975a:	f7ff ffb7 	bl	80096cc <_ZN6EMFObsD1Ev>
	// TODO Auto-generated destructor stub
}
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4618      	mov	r0, r3
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	0800cd54 	.word	0x0800cd54

0800976c <_ZN8ObserverD0Ev>:
Observer::~Observer() {
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
}
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff ffe1 	bl	800973c <_ZN8ObserverD1Ev>
 800977a:	21f8      	movs	r1, #248	; 0xf8
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 fd59 	bl	800b234 <_ZdlPvj>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <_ZN4PII2C1Ev>:
 *      Author: watashi
 */

#include "PII2.hpp"

PII2::PII2() {
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	4a04      	ldr	r2, [pc, #16]	; (80097a8 <_ZN4PII2C1Ev+0x1c>)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4618      	mov	r0, r3
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	0800cd64 	.word	0x0800cd64

080097ac <_ZN4PII2D1Ev>:

PII2::~PII2() {
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	4a04      	ldr	r2, [pc, #16]	; (80097c8 <_ZN4PII2D1Ev+0x1c>)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	0800cd64 	.word	0x0800cd64

080097cc <_ZN4PII2D0Ev>:
PII2::~PII2() {
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
}
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff ffe9 	bl	80097ac <_ZN4PII2D1Ev>
 80097da:	214c      	movs	r1, #76	; 0x4c
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f001 fd29 	bl	800b234 <_ZdlPvj>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80097f2:	4b21      	ldr	r3, [pc, #132]	; (8009878 <_DoInit+0x8c>)
 80097f4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2203      	movs	r2, #3
 80097fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2203      	movs	r2, #3
 8009800:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a1d      	ldr	r2, [pc, #116]	; (800987c <_DoInit+0x90>)
 8009806:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a1d      	ldr	r2, [pc, #116]	; (8009880 <_DoInit+0x94>)
 800980c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009814:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a14      	ldr	r2, [pc, #80]	; (800987c <_DoInit+0x90>)
 800982c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a14      	ldr	r2, [pc, #80]	; (8009884 <_DoInit+0x98>)
 8009832:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2210      	movs	r2, #16
 8009838:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	3307      	adds	r3, #7
 8009850:	4a0d      	ldr	r2, [pc, #52]	; (8009888 <_DoInit+0x9c>)
 8009852:	6810      	ldr	r0, [r2, #0]
 8009854:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a0c      	ldr	r2, [pc, #48]	; (800988c <_DoInit+0xa0>)
 800985a:	6810      	ldr	r0, [r2, #0]
 800985c:	6018      	str	r0, [r3, #0]
 800985e:	8891      	ldrh	r1, [r2, #4]
 8009860:	7992      	ldrb	r2, [r2, #6]
 8009862:	8099      	strh	r1, [r3, #4]
 8009864:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	719a      	strb	r2, [r3, #6]
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr
 8009878:	24003594 	.word	0x24003594
 800987c:	0800ccb0 	.word	0x0800ccb0
 8009880:	24000200 	.word	0x24000200
 8009884:	24000600 	.word	0x24000600
 8009888:	0800ccbc 	.word	0x0800ccbc
 800988c:	0800ccc0 	.word	0x0800ccc0

08009890 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800989c:	2300      	movs	r3, #0
 800989e:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d905      	bls.n	80098c0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	3b01      	subs	r3, #1
 80098bc:	61fb      	str	r3, [r7, #28]
 80098be:	e007      	b.n	80098d0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	689a      	ldr	r2, [r3, #8]
 80098c4:	6939      	ldr	r1, [r7, #16]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	1acb      	subs	r3, r1, r3
 80098ca:	4413      	add	r3, r2
 80098cc:	3b01      	subs	r3, #1
 80098ce:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	69fa      	ldr	r2, [r7, #28]
 80098da:	4293      	cmp	r3, r2
 80098dc:	bf28      	it	cs
 80098de:	4613      	movcs	r3, r2
 80098e0:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4293      	cmp	r3, r2
 80098e8:	bf28      	it	cs
 80098ea:	4613      	movcs	r3, r2
 80098ec:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	685a      	ldr	r2, [r3, #4]
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	4413      	add	r3, r2
 80098f6:	69fa      	ldr	r2, [r7, #28]
 80098f8:	68b9      	ldr	r1, [r7, #8]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f001 fcd8 	bl	800b2b0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8009900:	69ba      	ldr	r2, [r7, #24]
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	4413      	add	r3, r2
 8009906:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	4413      	add	r3, r2
 800990e:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	4413      	add	r3, r2
 800991e:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	429a      	cmp	r2, r3
 8009928:	d101      	bne.n	800992e <_WriteBlocking+0x9e>
      WrOff = 0u;
 800992a:	2300      	movs	r3, #0
 800992c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1b5      	bne.n	80098a6 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800993a:	69bb      	ldr	r3, [r7, #24]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3720      	adds	r7, #32
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8009944:	b580      	push	{r7, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	689a      	ldr	r2, [r3, #8]
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8009960:	69ba      	ldr	r2, [r7, #24]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	429a      	cmp	r2, r3
 8009966:	d90e      	bls.n	8009986 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	4413      	add	r3, r2
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	68b9      	ldr	r1, [r7, #8]
 8009974:	4618      	mov	r0, r3
 8009976:	f001 fc9b 	bl	800b2b0 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 800997a:	69fa      	ldr	r2, [r7, #28]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	441a      	add	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8009984:	e01a      	b.n	80099bc <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	4413      	add	r3, r2
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	68b9      	ldr	r1, [r7, #8]
 8009996:	4618      	mov	r0, r3
 8009998:	f001 fc8a 	bl	800b2b0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6858      	ldr	r0, [r3, #4]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	4413      	add	r3, r2
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4619      	mov	r1, r3
 80099b2:	f001 fc7d 	bl	800b2b0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	60da      	str	r2, [r3, #12]
}
 80099bc:	bf00      	nop
 80099be:	3720      	adds	r7, #32
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d808      	bhi.n	80099f2 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	689a      	ldr	r2, [r3, #8]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	1ad2      	subs	r2, r2, r3
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	4413      	add	r3, r2
 80099ec:	3b01      	subs	r3, #1
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	e004      	b.n	80099fc <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	3b01      	subs	r3, #1
 80099fa:	617b      	str	r3, [r7, #20]
  }
  return r;
 80099fc:	697b      	ldr	r3, [r7, #20]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	371c      	adds	r7, #28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
	...

08009a0c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	4613      	mov	r3, r2
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	4413      	add	r3, r2
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	4a1e      	ldr	r2, [pc, #120]	; (8009aa4 <SEGGER_RTT_WriteNoLock+0x98>)
 8009a2a:	4413      	add	r3, r2
 8009a2c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d017      	beq.n	8009a66 <SEGGER_RTT_WriteNoLock+0x5a>
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d302      	bcc.n	8009a40 <SEGGER_RTT_WriteNoLock+0x34>
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d023      	beq.n	8009a86 <SEGGER_RTT_WriteNoLock+0x7a>
 8009a3e:	e029      	b.n	8009a94 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009a40:	6978      	ldr	r0, [r7, #20]
 8009a42:	f7ff ffbf 	bl	80099c4 <_GetAvailWriteSpace>
 8009a46:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8009a48:	693a      	ldr	r2, [r7, #16]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d202      	bcs.n	8009a56 <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8009a50:	2300      	movs	r3, #0
 8009a52:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8009a54:	e021      	b.n	8009a9a <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	69b9      	ldr	r1, [r7, #24]
 8009a5e:	6978      	ldr	r0, [r7, #20]
 8009a60:	f7ff ff70 	bl	8009944 <_WriteNoCheck>
    break;
 8009a64:	e019      	b.n	8009a9a <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009a66:	6978      	ldr	r0, [r7, #20]
 8009a68:	f7ff ffac 	bl	80099c4 <_GetAvailWriteSpace>
 8009a6c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	4293      	cmp	r3, r2
 8009a74:	bf28      	it	cs
 8009a76:	4613      	movcs	r3, r2
 8009a78:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8009a7a:	69fa      	ldr	r2, [r7, #28]
 8009a7c:	69b9      	ldr	r1, [r7, #24]
 8009a7e:	6978      	ldr	r0, [r7, #20]
 8009a80:	f7ff ff60 	bl	8009944 <_WriteNoCheck>
    break;
 8009a84:	e009      	b.n	8009a9a <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	69b9      	ldr	r1, [r7, #24]
 8009a8a:	6978      	ldr	r0, [r7, #20]
 8009a8c:	f7ff ff00 	bl	8009890 <_WriteBlocking>
 8009a90:	61f8      	str	r0, [r7, #28]
    break;
 8009a92:	e002      	b.n	8009a9a <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8009a94:	2300      	movs	r3, #0
 8009a96:	61fb      	str	r3, [r7, #28]
    break;
 8009a98:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8009a9a:	69fb      	ldr	r3, [r7, #28]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3720      	adds	r7, #32
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	24003594 	.word	0x24003594

08009aa8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8009ab4:	4b0d      	ldr	r3, [pc, #52]	; (8009aec <SEGGER_RTT_Write+0x44>)
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <SEGGER_RTT_Write+0x18>
 8009abc:	f7ff fe96 	bl	80097ec <_DoInit>
  SEGGER_RTT_LOCK();
 8009ac0:	f3ef 8311 	mrs	r3, BASEPRI
 8009ac4:	f04f 0120 	mov.w	r1, #32
 8009ac8:	f381 8811 	msr	BASEPRI, r1
 8009acc:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	68b9      	ldr	r1, [r7, #8]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f7ff ff9a 	bl	8009a0c <SEGGER_RTT_WriteNoLock>
 8009ad8:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8009ae0:	693b      	ldr	r3, [r7, #16]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3718      	adds	r7, #24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	24003594 	.word	0x24003594

08009af0 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	460b      	mov	r3, r1
 8009afa:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	1c5a      	adds	r2, r3, #1
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d80e      	bhi.n	8009b2c <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	4413      	add	r3, r2
 8009b16:	78fa      	ldrb	r2, [r7, #3]
 8009b18:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689a      	ldr	r2, [r3, #8]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d115      	bne.n	8009b64 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6918      	ldr	r0, [r3, #16]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6819      	ldr	r1, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	461a      	mov	r2, r3
 8009b46:	f7ff ffaf 	bl	8009aa8 <SEGGER_RTT_Write>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d004      	beq.n	8009b5e <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8009b5c:	e002      	b.n	8009b64 <_StoreChar+0x74>
      p->Cnt = 0u;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	609a      	str	r2, [r3, #8]
}
 8009b64:	bf00      	nop
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08a      	sub	sp, #40	; 0x28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8009b82:	2301      	movs	r3, #1
 8009b84:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8009b86:	e007      	b.n	8009b98 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8009b88:	6a3a      	ldr	r2, [r7, #32]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b90:	623b      	str	r3, [r7, #32]
    Width++;
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	3301      	adds	r3, #1
 8009b96:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8009b98:	6a3a      	ldr	r2, [r7, #32]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d2f3      	bcs.n	8009b88 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d901      	bls.n	8009bac <_PrintUnsigned+0x40>
    Width = NumDigits;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8009bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d125      	bne.n	8009c02 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d022      	beq.n	8009c02 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8009bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bbe:	f003 0302 	and.w	r3, r3, #2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d005      	beq.n	8009bd2 <_PrintUnsigned+0x66>
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d102      	bne.n	8009bd2 <_PrintUnsigned+0x66>
        c = '0';
 8009bcc:	2330      	movs	r3, #48	; 0x30
 8009bce:	76fb      	strb	r3, [r7, #27]
 8009bd0:	e001      	b.n	8009bd6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8009bd2:	2320      	movs	r3, #32
 8009bd4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009bd6:	e00b      	b.n	8009bf0 <_PrintUnsigned+0x84>
        FieldWidth--;
 8009bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8009bde:	7efb      	ldrb	r3, [r7, #27]
 8009be0:	4619      	mov	r1, r3
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f7ff ff84 	bl	8009af0 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	db07      	blt.n	8009c00 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d005      	beq.n	8009c02 <_PrintUnsigned+0x96>
 8009bf6:	69fa      	ldr	r2, [r7, #28]
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d3ec      	bcc.n	8009bd8 <_PrintUnsigned+0x6c>
 8009bfe:	e000      	b.n	8009c02 <_PrintUnsigned+0x96>
          break;
 8009c00:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	db55      	blt.n	8009cb6 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d903      	bls.n	8009c18 <_PrintUnsigned+0xac>
        NumDigits--;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	603b      	str	r3, [r7, #0]
 8009c16:	e009      	b.n	8009c2c <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c20:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d200      	bcs.n	8009c2c <_PrintUnsigned+0xc0>
          break;
 8009c2a:	e005      	b.n	8009c38 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	fb02 f303 	mul.w	r3, r2, r3
 8009c34:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8009c36:	e7e8      	b.n	8009c0a <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c40:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c46:	fb02 f303 	mul.w	r3, r2, r3
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8009c50:	4a1b      	ldr	r2, [pc, #108]	; (8009cc0 <_PrintUnsigned+0x154>)
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	4413      	add	r3, r2
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	4619      	mov	r1, r3
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f7ff ff48 	bl	8009af0 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	db08      	blt.n	8009c7a <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8009c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c70:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1df      	bne.n	8009c38 <_PrintUnsigned+0xcc>
 8009c78:	e000      	b.n	8009c7c <_PrintUnsigned+0x110>
        break;
 8009c7a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8009c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d017      	beq.n	8009cb6 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d014      	beq.n	8009cb6 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009c8c:	e00a      	b.n	8009ca4 <_PrintUnsigned+0x138>
          FieldWidth--;
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	3b01      	subs	r3, #1
 8009c92:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8009c94:	2120      	movs	r1, #32
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f7ff ff2a 	bl	8009af0 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	db07      	blt.n	8009cb4 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <_PrintUnsigned+0x14a>
 8009caa:	69fa      	ldr	r2, [r7, #28]
 8009cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d3ed      	bcc.n	8009c8e <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8009cb2:	e000      	b.n	8009cb6 <_PrintUnsigned+0x14a>
            break;
 8009cb4:	bf00      	nop
}
 8009cb6:	bf00      	nop
 8009cb8:	3728      	adds	r7, #40	; 0x28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	0800cd6c 	.word	0x0800cd6c

08009cc4 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
 8009cd0:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bfb8      	it	lt
 8009cd8:	425b      	neglt	r3, r3
 8009cda:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8009ce0:	e007      	b.n	8009cf2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8009cea:	613b      	str	r3, [r7, #16]
    Width++;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	daf3      	bge.n	8009ce2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d901      	bls.n	8009d06 <_PrintInt+0x42>
    Width = NumDigits;
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00a      	beq.n	8009d22 <_PrintInt+0x5e>
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	db04      	blt.n	8009d1c <_PrintInt+0x58>
 8009d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d14:	f003 0304 	and.w	r3, r3, #4
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <_PrintInt+0x5e>
    FieldWidth--;
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	f003 0302 	and.w	r3, r3, #2
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <_PrintInt+0x6e>
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d01c      	beq.n	8009d6c <_PrintInt+0xa8>
 8009d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d117      	bne.n	8009d6c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d014      	beq.n	8009d6c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009d42:	e00a      	b.n	8009d5a <_PrintInt+0x96>
        FieldWidth--;
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	3b01      	subs	r3, #1
 8009d48:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8009d4a:	2120      	movs	r1, #32
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff fecf 	bl	8009af0 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	db07      	blt.n	8009d6a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d005      	beq.n	8009d6c <_PrintInt+0xa8>
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d3ed      	bcc.n	8009d44 <_PrintInt+0x80>
 8009d68:	e000      	b.n	8009d6c <_PrintInt+0xa8>
          break;
 8009d6a:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	db4a      	blt.n	8009e0a <_PrintInt+0x146>
    if (v < 0) {
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	da07      	bge.n	8009d8a <_PrintInt+0xc6>
      v = -v;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	425b      	negs	r3, r3
 8009d7e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8009d80:	212d      	movs	r1, #45	; 0x2d
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7ff feb4 	bl	8009af0 <_StoreChar>
 8009d88:	e008      	b.n	8009d9c <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	f003 0304 	and.w	r3, r3, #4
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8009d94:	212b      	movs	r1, #43	; 0x2b
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f7ff feaa 	bl	8009af0 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	db32      	blt.n	8009e0a <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	f003 0302 	and.w	r3, r3, #2
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d01f      	beq.n	8009dee <_PrintInt+0x12a>
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d11a      	bne.n	8009dee <_PrintInt+0x12a>
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d117      	bne.n	8009dee <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d014      	beq.n	8009dee <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009dc4:	e00a      	b.n	8009ddc <_PrintInt+0x118>
            FieldWidth--;
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8009dcc:	2130      	movs	r1, #48	; 0x30
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f7ff fe8e 	bl	8009af0 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	db07      	blt.n	8009dec <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d005      	beq.n	8009dee <_PrintInt+0x12a>
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d3ed      	bcc.n	8009dc6 <_PrintInt+0x102>
 8009dea:	e000      	b.n	8009dee <_PrintInt+0x12a>
              break;
 8009dec:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	db09      	blt.n	8009e0a <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8009df6:	68b9      	ldr	r1, [r7, #8]
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	9301      	str	r3, [sp, #4]
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff feb1 	bl	8009b6c <_PrintUnsigned>
      }
    }
  }
}
 8009e0a:	bf00      	nop
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b0a2      	sub	sp, #136	; 0x88
 8009e18:	af02      	add	r7, sp, #8
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8009e20:	f107 0310 	add.w	r3, r7, #16
 8009e24:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8009e26:	2340      	movs	r3, #64	; 0x40
 8009e28:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	3301      	adds	r3, #1
 8009e42:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8009e44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 8161 	beq.w	800a110 <SEGGER_RTT_vprintf+0x2fc>
      break;
    }
    if (c == '%') {
 8009e4e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009e52:	2b25      	cmp	r3, #37	; 0x25
 8009e54:	f040 814f 	bne.w	800a0f6 <SEGGER_RTT_vprintf+0x2e2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8009e68:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009e6c:	3b23      	subs	r3, #35	; 0x23
 8009e6e:	2b0d      	cmp	r3, #13
 8009e70:	d83e      	bhi.n	8009ef0 <SEGGER_RTT_vprintf+0xdc>
 8009e72:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <SEGGER_RTT_vprintf+0x64>)
 8009e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e78:	08009ee1 	.word	0x08009ee1
 8009e7c:	08009ef1 	.word	0x08009ef1
 8009e80:	08009ef1 	.word	0x08009ef1
 8009e84:	08009ef1 	.word	0x08009ef1
 8009e88:	08009ef1 	.word	0x08009ef1
 8009e8c:	08009ef1 	.word	0x08009ef1
 8009e90:	08009ef1 	.word	0x08009ef1
 8009e94:	08009ef1 	.word	0x08009ef1
 8009e98:	08009ed1 	.word	0x08009ed1
 8009e9c:	08009ef1 	.word	0x08009ef1
 8009ea0:	08009eb1 	.word	0x08009eb1
 8009ea4:	08009ef1 	.word	0x08009ef1
 8009ea8:	08009ef1 	.word	0x08009ef1
 8009eac:	08009ec1 	.word	0x08009ec1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8009eb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009eb2:	f043 0301 	orr.w	r3, r3, #1
 8009eb6:	673b      	str	r3, [r7, #112]	; 0x70
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	60bb      	str	r3, [r7, #8]
 8009ebe:	e01a      	b.n	8009ef6 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8009ec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ec2:	f043 0302 	orr.w	r3, r3, #2
 8009ec6:	673b      	str	r3, [r7, #112]	; 0x70
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	60bb      	str	r3, [r7, #8]
 8009ece:	e012      	b.n	8009ef6 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8009ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ed2:	f043 0304 	orr.w	r3, r3, #4
 8009ed6:	673b      	str	r3, [r7, #112]	; 0x70
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	3301      	adds	r3, #1
 8009edc:	60bb      	str	r3, [r7, #8]
 8009ede:	e00a      	b.n	8009ef6 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8009ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ee2:	f043 0308 	orr.w	r3, r3, #8
 8009ee6:	673b      	str	r3, [r7, #112]	; 0x70
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	3301      	adds	r3, #1
 8009eec:	60bb      	str	r3, [r7, #8]
 8009eee:	e002      	b.n	8009ef6 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ef4:	bf00      	nop
        }
      } while (v);
 8009ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1b1      	bne.n	8009e60 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8009efc:	2300      	movs	r3, #0
 8009efe:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 8009f08:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f0c:	2b2f      	cmp	r3, #47	; 0x2f
 8009f0e:	d912      	bls.n	8009f36 <SEGGER_RTT_vprintf+0x122>
 8009f10:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f14:	2b39      	cmp	r3, #57	; 0x39
 8009f16:	d80e      	bhi.n	8009f36 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8009f1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f20:	4613      	mov	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	461a      	mov	r2, r3
 8009f2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f2e:	4413      	add	r3, r2
 8009f30:	3b30      	subs	r3, #48	; 0x30
 8009f32:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8009f34:	e7e4      	b.n	8009f00 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8009f36:	2300      	movs	r3, #0
 8009f38:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8009f42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f46:	2b2e      	cmp	r3, #46	; 0x2e
 8009f48:	d11d      	bne.n	8009f86 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8009f58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f5c:	2b2f      	cmp	r3, #47	; 0x2f
 8009f5e:	d912      	bls.n	8009f86 <SEGGER_RTT_vprintf+0x172>
 8009f60:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f64:	2b39      	cmp	r3, #57	; 0x39
 8009f66:	d80e      	bhi.n	8009f86 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8009f6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009f70:	4613      	mov	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f7e:	4413      	add	r3, r2
 8009f80:	3b30      	subs	r3, #48	; 0x30
 8009f82:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8009f84:	e7e4      	b.n	8009f50 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8009f8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f92:	2b6c      	cmp	r3, #108	; 0x6c
 8009f94:	d003      	beq.n	8009f9e <SEGGER_RTT_vprintf+0x18a>
 8009f96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f9a:	2b68      	cmp	r3, #104	; 0x68
 8009f9c:	d107      	bne.n	8009fae <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8009fac:	e7ef      	b.n	8009f8e <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8009fae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009fb2:	2b64      	cmp	r3, #100	; 0x64
 8009fb4:	d028      	beq.n	800a008 <SEGGER_RTT_vprintf+0x1f4>
 8009fb6:	2b64      	cmp	r3, #100	; 0x64
 8009fb8:	dc07      	bgt.n	8009fca <SEGGER_RTT_vprintf+0x1b6>
 8009fba:	2b58      	cmp	r3, #88	; 0x58
 8009fbc:	d04a      	beq.n	800a054 <SEGGER_RTT_vprintf+0x240>
 8009fbe:	2b63      	cmp	r3, #99	; 0x63
 8009fc0:	d00f      	beq.n	8009fe2 <SEGGER_RTT_vprintf+0x1ce>
 8009fc2:	2b25      	cmp	r3, #37	; 0x25
 8009fc4:	f000 808c 	beq.w	800a0e0 <SEGGER_RTT_vprintf+0x2cc>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8009fc8:	e091      	b.n	800a0ee <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8009fca:	2b73      	cmp	r3, #115	; 0x73
 8009fcc:	d055      	beq.n	800a07a <SEGGER_RTT_vprintf+0x266>
 8009fce:	2b73      	cmp	r3, #115	; 0x73
 8009fd0:	dc02      	bgt.n	8009fd8 <SEGGER_RTT_vprintf+0x1c4>
 8009fd2:	2b70      	cmp	r3, #112	; 0x70
 8009fd4:	d071      	beq.n	800a0ba <SEGGER_RTT_vprintf+0x2a6>
        break;
 8009fd6:	e08a      	b.n	800a0ee <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8009fd8:	2b75      	cmp	r3, #117	; 0x75
 8009fda:	d028      	beq.n	800a02e <SEGGER_RTT_vprintf+0x21a>
 8009fdc:	2b78      	cmp	r3, #120	; 0x78
 8009fde:	d039      	beq.n	800a054 <SEGGER_RTT_vprintf+0x240>
        break;
 8009fe0:	e085      	b.n	800a0ee <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	1d19      	adds	r1, r3, #4
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	6011      	str	r1, [r2, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8009ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ff2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8009ff6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8009ffa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009ffe:	4611      	mov	r1, r2
 800a000:	4618      	mov	r0, r3
 800a002:	f7ff fd75 	bl	8009af0 <_StoreChar>
        break;
 800a006:	e072      	b.n	800a0ee <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	1d19      	adds	r1, r3, #4
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	6011      	str	r1, [r2, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800a016:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800a01a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a01c:	9301      	str	r3, [sp, #4]
 800a01e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a024:	220a      	movs	r2, #10
 800a026:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a028:	f7ff fe4c 	bl	8009cc4 <_PrintInt>
        break;
 800a02c:	e05f      	b.n	800a0ee <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	1d19      	adds	r1, r3, #4
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	6011      	str	r1, [r2, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800a03c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a03e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800a042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a044:	9301      	str	r3, [sp, #4]
 800a046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a04c:	220a      	movs	r2, #10
 800a04e:	f7ff fd8d 	bl	8009b6c <_PrintUnsigned>
        break;
 800a052:	e04c      	b.n	800a0ee <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	1d19      	adds	r1, r3, #4
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	6011      	str	r1, [r2, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800a062:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a064:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800a068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a072:	2210      	movs	r2, #16
 800a074:	f7ff fd7a 	bl	8009b6c <_PrintUnsigned>
        break;
 800a078:	e039      	b.n	800a0ee <SEGGER_RTT_vprintf+0x2da>
          const char * s = va_arg(*pParamList, const char *);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	1d19      	adds	r1, r3, #4
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	6011      	str	r1, [r2, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	66bb      	str	r3, [r7, #104]	; 0x68
            c = *s;
 800a088:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 800a090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a092:	3301      	adds	r3, #1
 800a094:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 800a096:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <SEGGER_RTT_vprintf+0x2a2>
           _StoreChar(&BufferDesc, c);
 800a09e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a0a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff fd21 	bl	8009af0 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 800a0ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dae9      	bge.n	800a088 <SEGGER_RTT_vprintf+0x274>
        break;
 800a0b4:	e01b      	b.n	800a0ee <SEGGER_RTT_vprintf+0x2da>
              break;
 800a0b6:	bf00      	nop
        break;
 800a0b8:	e019      	b.n	800a0ee <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	1d19      	adds	r1, r3, #4
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	6011      	str	r1, [r2, #0]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800a0c8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a0ca:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	2308      	movs	r3, #8
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	2210      	movs	r2, #16
 800a0da:	f7ff fd47 	bl	8009b6c <_PrintUnsigned>
        break;
 800a0de:	e006      	b.n	800a0ee <SEGGER_RTT_vprintf+0x2da>
        _StoreChar(&BufferDesc, '%');
 800a0e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a0e4:	2125      	movs	r1, #37	; 0x25
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff fd02 	bl	8009af0 <_StoreChar>
        break;
 800a0ec:	bf00      	nop
      }
      sFormat++;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	60bb      	str	r3, [r7, #8]
 800a0f4:	e007      	b.n	800a106 <SEGGER_RTT_vprintf+0x2f2>
    } else {
      _StoreChar(&BufferDesc, c);
 800a0f6:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a0fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a0fe:	4611      	mov	r1, r2
 800a100:	4618      	mov	r0, r3
 800a102:	f7ff fcf5 	bl	8009af0 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800a106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f6bf ae94 	bge.w	8009e36 <SEGGER_RTT_vprintf+0x22>
 800a10e:	e000      	b.n	800a112 <SEGGER_RTT_vprintf+0x2fe>
      break;
 800a110:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 800a112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a114:	2b00      	cmp	r3, #0
 800a116:	dd0d      	ble.n	800a134 <SEGGER_RTT_vprintf+0x320>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 800a118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d006      	beq.n	800a12c <SEGGER_RTT_vprintf+0x318>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 800a11e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a120:	f107 0310 	add.w	r3, r7, #16
 800a124:	4619      	mov	r1, r3
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f7ff fcbe 	bl	8009aa8 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 800a12c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a12e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a130:	4413      	add	r3, r2
 800a132:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 800a134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800a136:	4618      	mov	r0, r3
 800a138:	3780      	adds	r7, #128	; 0x80
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop

0800a140 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 800a140:	b40e      	push	{r1, r2, r3}
 800a142:	b580      	push	{r7, lr}
 800a144:	b085      	sub	sp, #20
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 800a14a:	f107 0320 	add.w	r3, r7, #32
 800a14e:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800a150:	f107 0308 	add.w	r3, r7, #8
 800a154:	461a      	mov	r2, r3
 800a156:	69f9      	ldr	r1, [r7, #28]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff fe5b 	bl	8009e14 <SEGGER_RTT_vprintf>
 800a15e:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 800a160:	68fb      	ldr	r3, [r7, #12]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a16c:	b003      	add	sp, #12
 800a16e:	4770      	bx	lr

0800a170 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b090      	sub	sp, #64	; 0x40
 800a174:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a176:	463b      	mov	r3, r7
 800a178:	2240      	movs	r2, #64	; 0x40
 800a17a:	2100      	movs	r1, #0
 800a17c:	4618      	mov	r0, r3
 800a17e:	f001 f8a2 	bl	800b2c6 <memset>

  /** Common config 
  */
  hadc3.Instance = ADC3;
 800a182:	4b3f      	ldr	r3, [pc, #252]	; (800a280 <MX_ADC3_Init+0x110>)
 800a184:	4a3f      	ldr	r2, [pc, #252]	; (800a284 <MX_ADC3_Init+0x114>)
 800a186:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 800a188:	4b3d      	ldr	r3, [pc, #244]	; (800a280 <MX_ADC3_Init+0x110>)
 800a18a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800a18e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800a190:	4b3b      	ldr	r3, [pc, #236]	; (800a280 <MX_ADC3_Init+0x110>)
 800a192:	2200      	movs	r2, #0
 800a194:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a196:	4b3a      	ldr	r3, [pc, #232]	; (800a280 <MX_ADC3_Init+0x110>)
 800a198:	2201      	movs	r2, #1
 800a19a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a19c:	4b38      	ldr	r3, [pc, #224]	; (800a280 <MX_ADC3_Init+0x110>)
 800a19e:	2204      	movs	r2, #4
 800a1a0:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800a1a2:	4b37      	ldr	r3, [pc, #220]	; (800a280 <MX_ADC3_Init+0x110>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800a1a8:	4b35      	ldr	r3, [pc, #212]	; (800a280 <MX_ADC3_Init+0x110>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800a1ae:	4b34      	ldr	r3, [pc, #208]	; (800a280 <MX_ADC3_Init+0x110>)
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800a1b4:	4b32      	ldr	r3, [pc, #200]	; (800a280 <MX_ADC3_Init+0x110>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800a1ba:	4b31      	ldr	r3, [pc, #196]	; (800a280 <MX_ADC3_Init+0x110>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a1c0:	4b2f      	ldr	r3, [pc, #188]	; (800a280 <MX_ADC3_Init+0x110>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.OversamplingMode = DISABLE;
 800a1c6:	4b2e      	ldr	r3, [pc, #184]	; (800a280 <MX_ADC3_Init+0x110>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800a1ce:	482c      	ldr	r0, [pc, #176]	; (800a280 <MX_ADC3_Init+0x110>)
 800a1d0:	f7f6 fbce 	bl	8000970 <HAL_ADC_Init>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800a1da:	f000 fb69 	bl	800a8b0 <Error_Handler>
  }
  /** Disable Injected Queue 
  */
  HAL_ADCEx_DisableInjectedQueue(&hadc3);
 800a1de:	4828      	ldr	r0, [pc, #160]	; (800a280 <MX_ADC3_Init+0x110>)
 800a1e0:	f7f8 f880 	bl	80022e4 <HAL_ADCEx_DisableInjectedQueue>
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800a1e4:	4b28      	ldr	r3, [pc, #160]	; (800a288 <MX_ADC3_Init+0x118>)
 800a1e6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800a1e8:	2309      	movs	r3, #9
 800a1ea:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800a1f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a1f4:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800a1f6:	2304      	movs	r3, #4
 800a1f8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedLeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800a1fe:	2300      	movs	r3, #0
 800a200:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800a202:	2303      	movs	r3, #3
 800a204:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a206:	2300      	movs	r3, #0
 800a208:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a20c:	2300      	movs	r3, #0
 800a20e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800a212:	2300      	movs	r3, #0
 800a214:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO2;
 800a218:	23a0      	movs	r3, #160	; 0xa0
 800a21a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800a21c:	2380      	movs	r3, #128	; 0x80
 800a21e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800a220:	2300      	movs	r3, #0
 800a222:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a226:	463b      	mov	r3, r7
 800a228:	4619      	mov	r1, r3
 800a22a:	4815      	ldr	r0, [pc, #84]	; (800a280 <MX_ADC3_Init+0x110>)
 800a22c:	f7f7 fb74 	bl	8001918 <HAL_ADCEx_InjectedConfigChannel>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 800a236:	f000 fb3b 	bl	800a8b0 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800a23a:	2301      	movs	r3, #1
 800a23c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800a23e:	f240 130f 	movw	r3, #271	; 0x10f
 800a242:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a244:	463b      	mov	r3, r7
 800a246:	4619      	mov	r1, r3
 800a248:	480d      	ldr	r0, [pc, #52]	; (800a280 <MX_ADC3_Init+0x110>)
 800a24a:	f7f7 fb65 	bl	8001918 <HAL_ADCEx_InjectedConfigChannel>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d001      	beq.n	800a258 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 800a254:	f000 fb2c 	bl	800a8b0 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800a258:	4b0c      	ldr	r3, [pc, #48]	; (800a28c <MX_ADC3_Init+0x11c>)
 800a25a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800a25c:	f240 2315 	movw	r3, #533	; 0x215
 800a260:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a262:	463b      	mov	r3, r7
 800a264:	4619      	mov	r1, r3
 800a266:	4806      	ldr	r0, [pc, #24]	; (800a280 <MX_ADC3_Init+0x110>)
 800a268:	f7f7 fb56 	bl	8001918 <HAL_ADCEx_InjectedConfigChannel>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800a272:	f000 fb1d 	bl	800a8b0 <Error_Handler>
  }

}
 800a276:	bf00      	nop
 800a278:	3740      	adds	r7, #64	; 0x40
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	2400363c 	.word	0x2400363c
 800a284:	58026000 	.word	0x58026000
 800a288:	04300002 	.word	0x04300002
 800a28c:	19200040 	.word	0x19200040

0800a290 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b08a      	sub	sp, #40	; 0x28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a298:	f107 0314 	add.w	r3, r7, #20
 800a29c:	2200      	movs	r2, #0
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	605a      	str	r2, [r3, #4]
 800a2a2:	609a      	str	r2, [r3, #8]
 800a2a4:	60da      	str	r2, [r3, #12]
 800a2a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a2a      	ldr	r2, [pc, #168]	; (800a358 <HAL_ADC_MspInit+0xc8>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d14d      	bne.n	800a34e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800a2b2:	4b2a      	ldr	r3, [pc, #168]	; (800a35c <HAL_ADC_MspInit+0xcc>)
 800a2b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2b8:	4a28      	ldr	r2, [pc, #160]	; (800a35c <HAL_ADC_MspInit+0xcc>)
 800a2ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a2c2:	4b26      	ldr	r3, [pc, #152]	; (800a35c <HAL_ADC_MspInit+0xcc>)
 800a2c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a2cc:	613b      	str	r3, [r7, #16]
 800a2ce:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a2d0:	4b22      	ldr	r3, [pc, #136]	; (800a35c <HAL_ADC_MspInit+0xcc>)
 800a2d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2d6:	4a21      	ldr	r2, [pc, #132]	; (800a35c <HAL_ADC_MspInit+0xcc>)
 800a2d8:	f043 0320 	orr.w	r3, r3, #32
 800a2dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a2e0:	4b1e      	ldr	r3, [pc, #120]	; (800a35c <HAL_ADC_MspInit+0xcc>)
 800a2e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2ee:	4b1b      	ldr	r3, [pc, #108]	; (800a35c <HAL_ADC_MspInit+0xcc>)
 800a2f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2f4:	4a19      	ldr	r2, [pc, #100]	; (800a35c <HAL_ADC_MspInit+0xcc>)
 800a2f6:	f043 0304 	orr.w	r3, r3, #4
 800a2fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a2fe:	4b17      	ldr	r3, [pc, #92]	; (800a35c <HAL_ADC_MspInit+0xcc>)
 800a300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	60bb      	str	r3, [r7, #8]
 800a30a:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration    
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a30c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a312:	2303      	movs	r3, #3
 800a314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a316:	2300      	movs	r3, #0
 800a318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a31a:	f107 0314 	add.w	r3, r7, #20
 800a31e:	4619      	mov	r1, r3
 800a320:	480f      	ldr	r0, [pc, #60]	; (800a360 <HAL_ADC_MspInit+0xd0>)
 800a322:	f7f8 f917 	bl	8002554 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800a326:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800a32a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a32e:	f7f6 fa17 	bl	8000760 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800a332:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800a336:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800a33a:	f7f6 fa11 	bl	8000760 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800a33e:	2200      	movs	r2, #0
 800a340:	2100      	movs	r1, #0
 800a342:	207f      	movs	r0, #127	; 0x7f
 800a344:	f7f8 f8d1 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800a348:	207f      	movs	r0, #127	; 0x7f
 800a34a:	f7f8 f8e8 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800a34e:	bf00      	nop
 800a350:	3728      	adds	r7, #40	; 0x28
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	58026000 	.word	0x58026000
 800a35c:	58024400 	.word	0x58024400
 800a360:	58021400 	.word	0x58021400

0800a364 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b08e      	sub	sp, #56	; 0x38
 800a368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a36a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a36e:	2200      	movs	r2, #0
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	605a      	str	r2, [r3, #4]
 800a374:	609a      	str	r2, [r3, #8]
 800a376:	60da      	str	r2, [r3, #12]
 800a378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a37a:	4b99      	ldr	r3, [pc, #612]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a37c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a380:	4a97      	ldr	r2, [pc, #604]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a382:	f043 0304 	orr.w	r3, r3, #4
 800a386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a38a:	4b95      	ldr	r3, [pc, #596]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a38c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	623b      	str	r3, [r7, #32]
 800a396:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a398:	4b91      	ldr	r3, [pc, #580]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a39a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a39e:	4a90      	ldr	r2, [pc, #576]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a3a0:	f043 0320 	orr.w	r3, r3, #32
 800a3a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a3a8:	4b8d      	ldr	r3, [pc, #564]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a3aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3ae:	f003 0320 	and.w	r3, r3, #32
 800a3b2:	61fb      	str	r3, [r7, #28]
 800a3b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a3b6:	4b8a      	ldr	r3, [pc, #552]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a3b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3bc:	4a88      	ldr	r2, [pc, #544]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a3be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a3c6:	4b86      	ldr	r3, [pc, #536]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a3c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3d0:	61bb      	str	r3, [r7, #24]
 800a3d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3d4:	4b82      	ldr	r3, [pc, #520]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a3d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3da:	4a81      	ldr	r2, [pc, #516]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a3dc:	f043 0301 	orr.w	r3, r3, #1
 800a3e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a3e4:	4b7e      	ldr	r3, [pc, #504]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a3e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3f2:	4b7b      	ldr	r3, [pc, #492]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a3f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3f8:	4a79      	ldr	r2, [pc, #484]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a3fa:	f043 0302 	orr.w	r3, r3, #2
 800a3fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a402:	4b77      	ldr	r3, [pc, #476]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a408:	f003 0302 	and.w	r3, r3, #2
 800a40c:	613b      	str	r3, [r7, #16]
 800a40e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a410:	4b73      	ldr	r3, [pc, #460]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a416:	4a72      	ldr	r2, [pc, #456]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a418:	f043 0310 	orr.w	r3, r3, #16
 800a41c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a420:	4b6f      	ldr	r3, [pc, #444]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a426:	f003 0310 	and.w	r3, r3, #16
 800a42a:	60fb      	str	r3, [r7, #12]
 800a42c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a42e:	4b6c      	ldr	r3, [pc, #432]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a434:	4a6a      	ldr	r2, [pc, #424]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a436:	f043 0308 	orr.w	r3, r3, #8
 800a43a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a43e:	4b68      	ldr	r3, [pc, #416]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a444:	f003 0308 	and.w	r3, r3, #8
 800a448:	60bb      	str	r3, [r7, #8]
 800a44a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a44c:	4b64      	ldr	r3, [pc, #400]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a44e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a452:	4a63      	ldr	r2, [pc, #396]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a45c:	4b60      	ldr	r3, [pc, #384]	; (800a5e0 <MX_GPIO_Init+0x27c>)
 800a45e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a466:	607b      	str	r3, [r7, #4]
 800a468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800a46a:	2200      	movs	r2, #0
 800a46c:	f244 0181 	movw	r1, #16513	; 0x4081
 800a470:	485c      	ldr	r0, [pc, #368]	; (800a5e4 <MX_GPIO_Init+0x280>)
 800a472:	f7f8 fa1f 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800a476:	2200      	movs	r2, #0
 800a478:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a47c:	485a      	ldr	r0, [pc, #360]	; (800a5e8 <MX_GPIO_Init+0x284>)
 800a47e:	f7f8 fa19 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800a482:	2200      	movs	r2, #0
 800a484:	2102      	movs	r1, #2
 800a486:	4859      	ldr	r0, [pc, #356]	; (800a5ec <MX_GPIO_Init+0x288>)
 800a488:	f7f8 fa14 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a48c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a492:	2300      	movs	r3, #0
 800a494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a496:	2300      	movs	r3, #0
 800a498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a49a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a49e:	4619      	mov	r1, r3
 800a4a0:	4853      	ldr	r0, [pc, #332]	; (800a5f0 <MX_GPIO_Init+0x28c>)
 800a4a2:	f7f8 f857 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a4a6:	2332      	movs	r3, #50	; 0x32
 800a4a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a4b6:	230b      	movs	r3, #11
 800a4b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4be:	4619      	mov	r1, r3
 800a4c0:	484b      	ldr	r0, [pc, #300]	; (800a5f0 <MX_GPIO_Init+0x28c>)
 800a4c2:	f7f8 f847 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a4c6:	2386      	movs	r3, #134	; 0x86
 800a4c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a4d6:	230b      	movs	r3, #11
 800a4d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4de:	4619      	mov	r1, r3
 800a4e0:	4844      	ldr	r0, [pc, #272]	; (800a5f4 <MX_GPIO_Init+0x290>)
 800a4e2:	f7f8 f837 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800a4e6:	f244 0301 	movw	r3, #16385	; 0x4001
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4839      	ldr	r0, [pc, #228]	; (800a5e4 <MX_GPIO_Init+0x280>)
 800a500:	f7f8 f828 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a50a:	2302      	movs	r3, #2
 800a50c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a50e:	2300      	movs	r3, #0
 800a510:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a512:	2300      	movs	r3, #0
 800a514:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a516:	230b      	movs	r3, #11
 800a518:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a51a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a51e:	4619      	mov	r1, r3
 800a520:	4830      	ldr	r0, [pc, #192]	; (800a5e4 <MX_GPIO_Init+0x280>)
 800a522:	f7f8 f817 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800a526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a52a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a52c:	2301      	movs	r3, #1
 800a52e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a530:	2300      	movs	r3, #0
 800a532:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a534:	2300      	movs	r3, #0
 800a536:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800a538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a53c:	4619      	mov	r1, r3
 800a53e:	482a      	ldr	r0, [pc, #168]	; (800a5e8 <MX_GPIO_Init+0x284>)
 800a540:	f7f8 f808 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800a544:	2380      	movs	r3, #128	; 0x80
 800a546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a548:	4b2b      	ldr	r3, [pc, #172]	; (800a5f8 <MX_GPIO_Init+0x294>)
 800a54a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a54c:	2300      	movs	r3, #0
 800a54e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800a550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a554:	4619      	mov	r1, r3
 800a556:	4829      	ldr	r0, [pc, #164]	; (800a5fc <MX_GPIO_Init+0x298>)
 800a558:	f7f7 fffc 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800a55c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a562:	2302      	movs	r3, #2
 800a564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a566:	2300      	movs	r3, #0
 800a568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a56a:	2300      	movs	r3, #0
 800a56c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800a56e:	230a      	movs	r3, #10
 800a570:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a576:	4619      	mov	r1, r3
 800a578:	481e      	ldr	r0, [pc, #120]	; (800a5f4 <MX_GPIO_Init+0x290>)
 800a57a:	f7f7 ffeb 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800a57e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a584:	2302      	movs	r3, #2
 800a586:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a588:	2300      	movs	r3, #0
 800a58a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a58c:	2300      	movs	r3, #0
 800a58e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a590:	230b      	movs	r3, #11
 800a592:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a598:	4619      	mov	r1, r3
 800a59a:	4818      	ldr	r0, [pc, #96]	; (800a5fc <MX_GPIO_Init+0x298>)
 800a59c:	f7f7 ffda 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a5a0:	2380      	movs	r3, #128	; 0x80
 800a5a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	480b      	ldr	r0, [pc, #44]	; (800a5e4 <MX_GPIO_Init+0x280>)
 800a5b8:	f7f7 ffcc 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800a5bc:	2302      	movs	r3, #2
 800a5be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800a5cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	4806      	ldr	r0, [pc, #24]	; (800a5ec <MX_GPIO_Init+0x288>)
 800a5d4:	f7f7 ffbe 	bl	8002554 <HAL_GPIO_Init>

}
 800a5d8:	bf00      	nop
 800a5da:	3738      	adds	r7, #56	; 0x38
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	58024400 	.word	0x58024400
 800a5e4:	58020400 	.word	0x58020400
 800a5e8:	58020c00 	.word	0x58020c00
 800a5ec:	58021000 	.word	0x58021000
 800a5f0:	58020800 	.word	0x58020800
 800a5f4:	58020000 	.word	0x58020000
 800a5f8:	11110000 	.word	0x11110000
 800a5fc:	58021800 	.word	0x58021800

0800a600 <SCB_EnableICache>:
{
 800a600:	b480      	push	{r7}
 800a602:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a604:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a608:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a60c:	4b0b      	ldr	r3, [pc, #44]	; (800a63c <SCB_EnableICache+0x3c>)
 800a60e:	2200      	movs	r2, #0
 800a610:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a614:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a618:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a61c:	4b07      	ldr	r3, [pc, #28]	; (800a63c <SCB_EnableICache+0x3c>)
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	4a06      	ldr	r2, [pc, #24]	; (800a63c <SCB_EnableICache+0x3c>)
 800a622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a626:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a628:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a62c:	f3bf 8f6f 	isb	sy
}
 800a630:	bf00      	nop
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	e000ed00 	.word	0xe000ed00

0800a640 <SCB_EnableDCache>:
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800a646:	4b1d      	ldr	r3, [pc, #116]	; (800a6bc <SCB_EnableDCache+0x7c>)
 800a648:	2200      	movs	r2, #0
 800a64a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800a64e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800a652:	4b1a      	ldr	r3, [pc, #104]	; (800a6bc <SCB_EnableDCache+0x7c>)
 800a654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a658:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	0b5b      	lsrs	r3, r3, #13
 800a65e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a662:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	08db      	lsrs	r3, r3, #3
 800a668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a66c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	015a      	lsls	r2, r3, #5
 800a672:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800a676:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a67c:	490f      	ldr	r1, [pc, #60]	; (800a6bc <SCB_EnableDCache+0x7c>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	1e5a      	subs	r2, r3, #1
 800a688:	60ba      	str	r2, [r7, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1ef      	bne.n	800a66e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	1e5a      	subs	r2, r3, #1
 800a692:	60fa      	str	r2, [r7, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1e5      	bne.n	800a664 <SCB_EnableDCache+0x24>
 800a698:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800a69c:	4b07      	ldr	r3, [pc, #28]	; (800a6bc <SCB_EnableDCache+0x7c>)
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	4a06      	ldr	r2, [pc, #24]	; (800a6bc <SCB_EnableDCache+0x7c>)
 800a6a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6a6:	6153      	str	r3, [r2, #20]
 800a6a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a6ac:	f3bf 8f6f 	isb	sy
}
 800a6b0:	bf00      	nop
 800a6b2:	3714      	adds	r7, #20
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr
 800a6bc:	e000ed00 	.word	0xe000ed00

0800a6c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800a6c4:	f7ff ff9c 	bl	800a600 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800a6c8:	f7ff ffba 	bl	800a640 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a6cc:	f7f5 ff8c 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a6d0:	f000 f80c 	bl	800a6ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a6d4:	f7ff fe46 	bl	800a364 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800a6d8:	f000 fbac 	bl	800ae34 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 800a6dc:	f7ff fd48 	bl	800a170 <MX_ADC3_Init>
  MX_TIM1_Init();
 800a6e0:	f000 fa3e 	bl	800ab60 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
cppWrapper();
 800a6e4:	f000 fd6e 	bl	800b1c4 <cppWrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a6e8:	e7fe      	b.n	800a6e8 <main+0x28>
	...

0800a6ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b0cc      	sub	sp, #304	; 0x130
 800a6f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a6f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a6f6:	224c      	movs	r2, #76	; 0x4c
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 fde3 	bl	800b2c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a700:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a704:	2220      	movs	r2, #32
 800a706:	2100      	movs	r1, #0
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 fddc 	bl	800b2c6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a70e:	f107 0308 	add.w	r3, r7, #8
 800a712:	4618      	mov	r0, r3
 800a714:	23bc      	movs	r3, #188	; 0xbc
 800a716:	461a      	mov	r2, r3
 800a718:	2100      	movs	r1, #0
 800a71a:	f000 fdd4 	bl	800b2c6 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a71e:	2002      	movs	r0, #2
 800a720:	f7f8 f8e2 	bl	80028e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a724:	1d3b      	adds	r3, r7, #4
 800a726:	2200      	movs	r2, #0
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	4b5d      	ldr	r3, [pc, #372]	; (800a8a0 <SystemClock_Config+0x1b4>)
 800a72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72e:	4a5c      	ldr	r2, [pc, #368]	; (800a8a0 <SystemClock_Config+0x1b4>)
 800a730:	f023 0301 	bic.w	r3, r3, #1
 800a734:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a736:	4b5a      	ldr	r3, [pc, #360]	; (800a8a0 <SystemClock_Config+0x1b4>)
 800a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73a:	f003 0201 	and.w	r2, r3, #1
 800a73e:	1d3b      	adds	r3, r7, #4
 800a740:	601a      	str	r2, [r3, #0]
 800a742:	4b58      	ldr	r3, [pc, #352]	; (800a8a4 <SystemClock_Config+0x1b8>)
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	4a57      	ldr	r2, [pc, #348]	; (800a8a4 <SystemClock_Config+0x1b8>)
 800a748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a74c:	6193      	str	r3, [r2, #24]
 800a74e:	4b55      	ldr	r3, [pc, #340]	; (800a8a4 <SystemClock_Config+0x1b8>)
 800a750:	699b      	ldr	r3, [r3, #24]
 800a752:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800a756:	1d3b      	adds	r3, r7, #4
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	1d3b      	adds	r3, r7, #4
 800a75c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a75e:	bf00      	nop
 800a760:	4b50      	ldr	r3, [pc, #320]	; (800a8a4 <SystemClock_Config+0x1b8>)
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a76c:	d1f8      	bne.n	800a760 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800a76e:	4b4e      	ldr	r3, [pc, #312]	; (800a8a8 <SystemClock_Config+0x1bc>)
 800a770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a772:	4a4d      	ldr	r2, [pc, #308]	; (800a8a8 <SystemClock_Config+0x1bc>)
 800a774:	f023 0303 	bic.w	r3, r3, #3
 800a778:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a77a:	2302      	movs	r3, #2
 800a77c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800a780:	2301      	movs	r3, #1
 800a782:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a786:	2320      	movs	r3, #32
 800a788:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a78c:	2302      	movs	r3, #2
 800a78e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a792:	2300      	movs	r3, #0
 800a794:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a798:	2304      	movs	r3, #4
 800a79a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 50;
 800a79e:	2332      	movs	r3, #50	; 0x32
 800a7a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a7a4:	2302      	movs	r3, #2
 800a7a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a7aa:	2304      	movs	r3, #4
 800a7ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800a7b6:	230c      	movs	r3, #12
 800a7b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a7c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7f8 f8c3 	bl	8002958 <HAL_RCC_OscConfig>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d001      	beq.n	800a7dc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800a7d8:	f000 f86a 	bl	800a8b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a7dc:	233f      	movs	r3, #63	; 0x3f
 800a7de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a7ee:	2308      	movs	r3, #8
 800a7f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a7f4:	2340      	movs	r3, #64	; 0x40
 800a7f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a7fa:	2340      	movs	r3, #64	; 0x40
 800a7fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a804:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a808:	2340      	movs	r3, #64	; 0x40
 800a80a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a80e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a812:	2102      	movs	r1, #2
 800a814:	4618      	mov	r0, r3
 800a816:	f7f8 fc57 	bl	80030c8 <HAL_RCC_ClockConfig>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <SystemClock_Config+0x138>
  {
    Error_Handler();
 800a820:	f000 f846 	bl	800a8b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC;
 800a824:	f107 0308 	add.w	r3, r7, #8
 800a828:	4a20      	ldr	r2, [pc, #128]	; (800a8ac <SystemClock_Config+0x1c0>)
 800a82a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800a82c:	f107 0308 	add.w	r3, r7, #8
 800a830:	2204      	movs	r2, #4
 800a832:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800a834:	f107 0308 	add.w	r3, r7, #8
 800a838:	2209      	movs	r2, #9
 800a83a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800a83c:	f107 0308 	add.w	r3, r7, #8
 800a840:	2201      	movs	r2, #1
 800a842:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800a844:	f107 0308 	add.w	r3, r7, #8
 800a848:	2202      	movs	r2, #2
 800a84a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800a84c:	f107 0308 	add.w	r3, r7, #8
 800a850:	2202      	movs	r2, #2
 800a852:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800a854:	f107 0308 	add.w	r3, r7, #8
 800a858:	22c0      	movs	r2, #192	; 0xc0
 800a85a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800a85c:	f107 0308 	add.w	r3, r7, #8
 800a860:	2220      	movs	r2, #32
 800a862:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800a864:	f107 0308 	add.w	r3, r7, #8
 800a868:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800a86c:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800a86e:	f107 0308 	add.w	r3, r7, #8
 800a872:	2200      	movs	r2, #0
 800a874:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800a876:	f107 0308 	add.w	r3, r7, #8
 800a87a:	2200      	movs	r2, #0
 800a87c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a880:	f107 0308 	add.w	r3, r7, #8
 800a884:	4618      	mov	r0, r3
 800a886:	f7f8 ff79 	bl	800377c <HAL_RCCEx_PeriphCLKConfig>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <SystemClock_Config+0x1a8>
  {
    Error_Handler();
 800a890:	f000 f80e 	bl	800a8b0 <Error_Handler>
  }
}
 800a894:	bf00      	nop
 800a896:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	58000400 	.word	0x58000400
 800a8a4:	58024800 	.word	0x58024800
 800a8a8:	58024400 	.word	0x58024400
 800a8ac:	00080002 	.word	0x00080002

0800a8b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a8b4:	bf00      	nop
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
	...

0800a8c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8c6:	4b0a      	ldr	r3, [pc, #40]	; (800a8f0 <HAL_MspInit+0x30>)
 800a8c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a8cc:	4a08      	ldr	r2, [pc, #32]	; (800a8f0 <HAL_MspInit+0x30>)
 800a8ce:	f043 0302 	orr.w	r3, r3, #2
 800a8d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a8d6:	4b06      	ldr	r3, [pc, #24]	; (800a8f0 <HAL_MspInit+0x30>)
 800a8d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	607b      	str	r3, [r7, #4]
 800a8e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	58024400 	.word	0x58024400

0800a8f4 <LL_ADC_IsActiveFlag_JEOS>:
  * @rmtoll ISR      JEOS           LL_ADC_IsActiveFlag_JEOS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOS(ADC_TypeDef *ADCx)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS)) ? 1UL : 0UL);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a904:	2b40      	cmp	r3, #64	; 0x40
 800a906:	d101      	bne.n	800a90c <LL_ADC_IsActiveFlag_JEOS+0x18>
 800a908:	2301      	movs	r3, #1
 800a90a:	e000      	b.n	800a90e <LL_ADC_IsActiveFlag_JEOS+0x1a>
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a91a:	b480      	push	{r7}
 800a91c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a91e:	bf00      	nop
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a928:	b480      	push	{r7}
 800a92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a92c:	e7fe      	b.n	800a92c <HardFault_Handler+0x4>

0800a92e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a92e:	b480      	push	{r7}
 800a930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a932:	e7fe      	b.n	800a932 <MemManage_Handler+0x4>

0800a934 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a934:	b480      	push	{r7}
 800a936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a938:	e7fe      	b.n	800a938 <BusFault_Handler+0x4>

0800a93a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a93a:	b480      	push	{r7}
 800a93c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a93e:	e7fe      	b.n	800a93e <UsageFault_Handler+0x4>

0800a940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a940:	b480      	push	{r7}
 800a942:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a944:	bf00      	nop
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a94e:	b480      	push	{r7}
 800a950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a952:	bf00      	nop
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a960:	bf00      	nop
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a96e:	f7f5 fea9 	bl	80006c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a972:	bf00      	nop
 800a974:	bd80      	pop	{r7, pc}
	...

0800a978 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a97c:	4802      	ldr	r0, [pc, #8]	; (800a988 <TIM1_BRK_IRQHandler+0x10>)
 800a97e:	f7fa fe31 	bl	80055e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800a982:	bf00      	nop
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	240036a0 	.word	0x240036a0

0800a98c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
//	HighFreqTask();
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a990:	4802      	ldr	r0, [pc, #8]	; (800a99c <TIM1_UP_IRQHandler+0x10>)
 800a992:	f7fa fe27 	bl	80055e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800a996:	bf00      	nop
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	240036a0 	.word	0x240036a0

0800a9a0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a9a4:	4802      	ldr	r0, [pc, #8]	; (800a9b0 <TIM1_TRG_COM_IRQHandler+0x10>)
 800a9a6:	f7fa fe1d 	bl	80055e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800a9aa:	bf00      	nop
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	240036a0 	.word	0x240036a0

0800a9b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a9b8:	4802      	ldr	r0, [pc, #8]	; (800a9c4 <TIM1_CC_IRQHandler+0x10>)
 800a9ba:	f7fa fe13 	bl	80055e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800a9be:	bf00      	nop
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	240036a0 	.word	0x240036a0

0800a9c8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
//	uint32_t reg_status = ADC3 -> ISR;
//	uint32_t new_reg = ( ADC3 -> ISR | 0b00000000100 ) ;

	//ADC3 -> ISR = ADC3 -> ISR | LL_ADC_FLAG_EOS;

	if(ADC3 -> ISR && LL_ADC_FLAG_JEOC ) {
 800a9ce:	4b19      	ldr	r3, [pc, #100]	; (800aa34 <ADC3_IRQHandler+0x6c>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d01a      	beq.n	800aa0c <ADC3_IRQHandler+0x44>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	2180      	movs	r1, #128	; 0x80
 800a9da:	4817      	ldr	r0, [pc, #92]	; (800aa38 <ADC3_IRQHandler+0x70>)
 800a9dc:	f7f7 ff6a 	bl	80028b4 <HAL_GPIO_WritePin>
		for(int i=0; i<250000; i++)asm("NOP");
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	607b      	str	r3, [r7, #4]
 800a9e4:	e003      	b.n	800a9ee <ADC3_IRQHandler+0x26>
 800a9e6:	bf00      	nop
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	607b      	str	r3, [r7, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a12      	ldr	r2, [pc, #72]	; (800aa3c <ADC3_IRQHandler+0x74>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	ddf7      	ble.n	800a9e6 <ADC3_IRQHandler+0x1e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	2180      	movs	r1, #128	; 0x80
 800a9fa:	480f      	ldr	r0, [pc, #60]	; (800aa38 <ADC3_IRQHandler+0x70>)
 800a9fc:	f7f7 ff5a 	bl	80028b4 <HAL_GPIO_WritePin>

		ADC3 -> ISR &= ~(LL_ADC_FLAG_JEOC);
 800aa00:	4b0c      	ldr	r3, [pc, #48]	; (800aa34 <ADC3_IRQHandler+0x6c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a0b      	ldr	r2, [pc, #44]	; (800aa34 <ADC3_IRQHandler+0x6c>)
 800aa06:	f023 0320 	bic.w	r3, r3, #32
 800aa0a:	6013      	str	r3, [r2, #0]

	}


	if(LL_ADC_IsActiveFlag_JEOS(ADC3)) {
 800aa0c:	4809      	ldr	r0, [pc, #36]	; (800aa34 <ADC3_IRQHandler+0x6c>)
 800aa0e:	f7ff ff71 	bl	800a8f4 <LL_ADC_IsActiveFlag_JEOS>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d005      	beq.n	800aa24 <ADC3_IRQHandler+0x5c>
		ADC3 -> ISR &= ~(uint32_t)( LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JQOVF );
 800aa18:	4b06      	ldr	r3, [pc, #24]	; (800aa34 <ADC3_IRQHandler+0x6c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a05      	ldr	r2, [pc, #20]	; (800aa34 <ADC3_IRQHandler+0x6c>)
 800aa1e:	f423 6388 	bic.w	r3, r3, #1088	; 0x440
 800aa22:	6013      	str	r3, [r2, #0]
		//各インジェクト変換の終了（JEOC）

	}
	//HAL_ADC
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800aa24:	4806      	ldr	r0, [pc, #24]	; (800aa40 <ADC3_IRQHandler+0x78>)
 800aa26:	f7f6 f941 	bl	8000cac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */
  asm("NOP");
 800aa2a:	bf00      	nop
  /* USER CODE END ADC3_IRQn 1 */
}
 800aa2c:	bf00      	nop
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	58026000 	.word	0x58026000
 800aa38:	58020400 	.word	0x58020400
 800aa3c:	0003d08f 	.word	0x0003d08f
 800aa40:	2400363c 	.word	0x2400363c

0800aa44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800aa4c:	4b11      	ldr	r3, [pc, #68]	; (800aa94 <_sbrk+0x50>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d102      	bne.n	800aa5a <_sbrk+0x16>
		heap_end = &end;
 800aa54:	4b0f      	ldr	r3, [pc, #60]	; (800aa94 <_sbrk+0x50>)
 800aa56:	4a10      	ldr	r2, [pc, #64]	; (800aa98 <_sbrk+0x54>)
 800aa58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800aa5a:	4b0e      	ldr	r3, [pc, #56]	; (800aa94 <_sbrk+0x50>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800aa60:	4b0c      	ldr	r3, [pc, #48]	; (800aa94 <_sbrk+0x50>)
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4413      	add	r3, r2
 800aa68:	466a      	mov	r2, sp
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d907      	bls.n	800aa7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800aa6e:	f000 fbe5 	bl	800b23c <__errno>
 800aa72:	4602      	mov	r2, r0
 800aa74:	230c      	movs	r3, #12
 800aa76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800aa78:	f04f 33ff 	mov.w	r3, #4294967295
 800aa7c:	e006      	b.n	800aa8c <_sbrk+0x48>
	}

	heap_end += incr;
 800aa7e:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <_sbrk+0x50>)
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4413      	add	r3, r2
 800aa86:	4a03      	ldr	r2, [pc, #12]	; (800aa94 <_sbrk+0x50>)
 800aa88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	24000610 	.word	0x24000610
 800aa98:	24003770 	.word	0x24003770

0800aa9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800aaa0:	4b29      	ldr	r3, [pc, #164]	; (800ab48 <SystemInit+0xac>)
 800aaa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa6:	4a28      	ldr	r2, [pc, #160]	; (800ab48 <SystemInit+0xac>)
 800aaa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aaac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800aab0:	4b26      	ldr	r3, [pc, #152]	; (800ab4c <SystemInit+0xb0>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a25      	ldr	r2, [pc, #148]	; (800ab4c <SystemInit+0xb0>)
 800aab6:	f043 0301 	orr.w	r3, r3, #1
 800aaba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800aabc:	4b23      	ldr	r3, [pc, #140]	; (800ab4c <SystemInit+0xb0>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800aac2:	4b22      	ldr	r3, [pc, #136]	; (800ab4c <SystemInit+0xb0>)
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	4921      	ldr	r1, [pc, #132]	; (800ab4c <SystemInit+0xb0>)
 800aac8:	4b21      	ldr	r3, [pc, #132]	; (800ab50 <SystemInit+0xb4>)
 800aaca:	4013      	ands	r3, r2
 800aacc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800aace:	4b1f      	ldr	r3, [pc, #124]	; (800ab4c <SystemInit+0xb0>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800aad4:	4b1d      	ldr	r3, [pc, #116]	; (800ab4c <SystemInit+0xb0>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800aada:	4b1c      	ldr	r3, [pc, #112]	; (800ab4c <SystemInit+0xb0>)
 800aadc:	2200      	movs	r2, #0
 800aade:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800aae0:	4b1a      	ldr	r3, [pc, #104]	; (800ab4c <SystemInit+0xb0>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800aae6:	4b19      	ldr	r3, [pc, #100]	; (800ab4c <SystemInit+0xb0>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800aaec:	4b17      	ldr	r3, [pc, #92]	; (800ab4c <SystemInit+0xb0>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800aaf2:	4b16      	ldr	r3, [pc, #88]	; (800ab4c <SystemInit+0xb0>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800aaf8:	4b14      	ldr	r3, [pc, #80]	; (800ab4c <SystemInit+0xb0>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800aafe:	4b13      	ldr	r3, [pc, #76]	; (800ab4c <SystemInit+0xb0>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800ab04:	4b11      	ldr	r3, [pc, #68]	; (800ab4c <SystemInit+0xb0>)
 800ab06:	2200      	movs	r2, #0
 800ab08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800ab0a:	4b10      	ldr	r3, [pc, #64]	; (800ab4c <SystemInit+0xb0>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ab10:	4b0e      	ldr	r3, [pc, #56]	; (800ab4c <SystemInit+0xb0>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a0d      	ldr	r2, [pc, #52]	; (800ab4c <SystemInit+0xb0>)
 800ab16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800ab1c:	4b0b      	ldr	r3, [pc, #44]	; (800ab4c <SystemInit+0xb0>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800ab22:	4b0c      	ldr	r3, [pc, #48]	; (800ab54 <SystemInit+0xb8>)
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	4b0c      	ldr	r3, [pc, #48]	; (800ab58 <SystemInit+0xbc>)
 800ab28:	4013      	ands	r3, r2
 800ab2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab2e:	d202      	bcs.n	800ab36 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800ab30:	4b0a      	ldr	r3, [pc, #40]	; (800ab5c <SystemInit+0xc0>)
 800ab32:	2201      	movs	r2, #1
 800ab34:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ab36:	4b04      	ldr	r3, [pc, #16]	; (800ab48 <SystemInit+0xac>)
 800ab38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab3c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800ab3e:	bf00      	nop
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	e000ed00 	.word	0xe000ed00
 800ab4c:	58024400 	.word	0x58024400
 800ab50:	eaf6ed7f 	.word	0xeaf6ed7f
 800ab54:	5c001000 	.word	0x5c001000
 800ab58:	ffff0000 	.word	0xffff0000
 800ab5c:	51008108 	.word	0x51008108

0800ab60 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b09e      	sub	sp, #120	; 0x78
 800ab64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ab66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	605a      	str	r2, [r3, #4]
 800ab70:	609a      	str	r2, [r3, #8]
 800ab72:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800ab74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	605a      	str	r2, [r3, #4]
 800ab7e:	609a      	str	r2, [r3, #8]
 800ab80:	60da      	str	r2, [r3, #12]
 800ab82:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]
 800ab8c:	605a      	str	r2, [r3, #4]
 800ab8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ab90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab94:	2200      	movs	r2, #0
 800ab96:	601a      	str	r2, [r3, #0]
 800ab98:	605a      	str	r2, [r3, #4]
 800ab9a:	609a      	str	r2, [r3, #8]
 800ab9c:	60da      	str	r2, [r3, #12]
 800ab9e:	611a      	str	r2, [r3, #16]
 800aba0:	615a      	str	r2, [r3, #20]
 800aba2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800aba4:	463b      	mov	r3, r7
 800aba6:	222c      	movs	r2, #44	; 0x2c
 800aba8:	2100      	movs	r1, #0
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 fb8b 	bl	800b2c6 <memset>

  htim1.Instance = TIM1;
 800abb0:	4b60      	ldr	r3, [pc, #384]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800abb2:	4a61      	ldr	r2, [pc, #388]	; (800ad38 <MX_TIM1_Init+0x1d8>)
 800abb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50000;
 800abb6:	4b5f      	ldr	r3, [pc, #380]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800abb8:	f24c 3250 	movw	r2, #50000	; 0xc350
 800abbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800abbe:	4b5d      	ldr	r3, [pc, #372]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800abc0:	2220      	movs	r2, #32
 800abc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD_COUNT;
 800abc4:	4b5b      	ldr	r3, [pc, #364]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800abc6:	f242 7210 	movw	r2, #10000	; 0x2710
 800abca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800abcc:	4b59      	ldr	r3, [pc, #356]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800abce:	2200      	movs	r2, #0
 800abd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800abd2:	4b58      	ldr	r3, [pc, #352]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800abd8:	4b56      	ldr	r3, [pc, #344]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800abda:	2200      	movs	r2, #0
 800abdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800abde:	4855      	ldr	r0, [pc, #340]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800abe0:	f7fa fc48 	bl	8005474 <HAL_TIM_Base_Init>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800abea:	f7ff fe61 	bl	800a8b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800abee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abf2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800abf4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800abf8:	4619      	mov	r1, r3
 800abfa:	484e      	ldr	r0, [pc, #312]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800abfc:	f7fa ff2a 	bl	8005a54 <HAL_TIM_ConfigClockSource>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800ac06:	f7ff fe53 	bl	800a8b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800ac0a:	484a      	ldr	r0, [pc, #296]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800ac0c:	f7fa fc5d 	bl	80054ca <HAL_TIM_PWM_Init>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800ac16:	f7ff fe4b 	bl	800a8b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800ac22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ac26:	4619      	mov	r1, r3
 800ac28:	4842      	ldr	r0, [pc, #264]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800ac2a:	f7fa ffe3 	bl	8005bf4 <HAL_TIM_SlaveConfigSynchro>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 800ac34:	f7ff fe3c 	bl	800a8b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800ac38:	2320      	movs	r3, #32
 800ac3a:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC4REF;
 800ac3c:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 800ac40:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac42:	2300      	movs	r3, #0
 800ac44:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ac46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	4839      	ldr	r0, [pc, #228]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800ac4e:	f7fb fd15 	bl	800667c <HAL_TIMEx_MasterConfigSynchronization>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800ac58:	f7ff fe2a 	bl	800a8b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ac5c:	2360      	movs	r3, #96	; 0x60
 800ac5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ac64:	2300      	movs	r3, #0
 800ac66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ac70:	2300      	movs	r3, #0
 800ac72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ac74:	2300      	movs	r3, #0
 800ac76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ac78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	4619      	mov	r1, r3
 800ac80:	482c      	ldr	r0, [pc, #176]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800ac82:	f7fa fdcf 	bl	8005824 <HAL_TIM_PWM_ConfigChannel>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800ac8c:	f7ff fe10 	bl	800a8b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ac90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac94:	2204      	movs	r2, #4
 800ac96:	4619      	mov	r1, r3
 800ac98:	4826      	ldr	r0, [pc, #152]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800ac9a:	f7fa fdc3 	bl	8005824 <HAL_TIM_PWM_ConfigChannel>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d001      	beq.n	800aca8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800aca4:	f7ff fe04 	bl	800a8b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800aca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acac:	2208      	movs	r2, #8
 800acae:	4619      	mov	r1, r3
 800acb0:	4820      	ldr	r0, [pc, #128]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800acb2:	f7fa fdb7 	bl	8005824 <HAL_TIM_PWM_ConfigChannel>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d001      	beq.n	800acc0 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 800acbc:	f7ff fdf8 	bl	800a8b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800acc0:	2370      	movs	r3, #112	; 0x70
 800acc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 9900;
 800acc4:	f242 63ac 	movw	r3, #9900	; 0x26ac
 800acc8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800acca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acce:	220c      	movs	r2, #12
 800acd0:	4619      	mov	r1, r3
 800acd2:	4818      	ldr	r0, [pc, #96]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800acd4:	f7fa fda6 	bl	8005824 <HAL_TIM_PWM_ConfigChannel>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 800acde:	f7ff fde7 	bl	800a8b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ace2:	2300      	movs	r3, #0
 800ace4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ace6:	2300      	movs	r3, #0
 800ace8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800acea:	2300      	movs	r3, #0
 800acec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800acf2:	2300      	movs	r3, #0
 800acf4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800acf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800acfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800ad00:	2300      	movs	r3, #0
 800ad02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800ad04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800ad12:	463b      	mov	r3, r7
 800ad14:	4619      	mov	r1, r3
 800ad16:	4807      	ldr	r0, [pc, #28]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800ad18:	f7fb fd0c 	bl	8006734 <HAL_TIMEx_ConfigBreakDeadTime>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <MX_TIM1_Init+0x1c6>
  {
    Error_Handler();
 800ad22:	f7ff fdc5 	bl	800a8b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800ad26:	4803      	ldr	r0, [pc, #12]	; (800ad34 <MX_TIM1_Init+0x1d4>)
 800ad28:	f000 f848 	bl	800adbc <HAL_TIM_MspPostInit>

}
 800ad2c:	bf00      	nop
 800ad2e:	3778      	adds	r7, #120	; 0x78
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	240036a0 	.word	0x240036a0
 800ad38:	40010000 	.word	0x40010000

0800ad3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a1a      	ldr	r2, [pc, #104]	; (800adb4 <HAL_TIM_Base_MspInit+0x78>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d12e      	bne.n	800adac <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ad4e:	4b1a      	ldr	r3, [pc, #104]	; (800adb8 <HAL_TIM_Base_MspInit+0x7c>)
 800ad50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ad54:	4a18      	ldr	r2, [pc, #96]	; (800adb8 <HAL_TIM_Base_MspInit+0x7c>)
 800ad56:	f043 0301 	orr.w	r3, r3, #1
 800ad5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ad5e:	4b16      	ldr	r3, [pc, #88]	; (800adb8 <HAL_TIM_Base_MspInit+0x7c>)
 800ad60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ad64:	f003 0301 	and.w	r3, r3, #1
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	2100      	movs	r1, #0
 800ad70:	2018      	movs	r0, #24
 800ad72:	f7f7 fbba 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800ad76:	2018      	movs	r0, #24
 800ad78:	f7f7 fbd1 	bl	800251e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	2100      	movs	r1, #0
 800ad80:	2019      	movs	r0, #25
 800ad82:	f7f7 fbb2 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800ad86:	2019      	movs	r0, #25
 800ad88:	f7f7 fbc9 	bl	800251e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	2100      	movs	r1, #0
 800ad90:	201a      	movs	r0, #26
 800ad92:	f7f7 fbaa 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800ad96:	201a      	movs	r0, #26
 800ad98:	f7f7 fbc1 	bl	800251e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2100      	movs	r1, #0
 800ada0:	201b      	movs	r0, #27
 800ada2:	f7f7 fba2 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800ada6:	201b      	movs	r0, #27
 800ada8:	f7f7 fbb9 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800adac:	bf00      	nop
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	40010000 	.word	0x40010000
 800adb8:	58024400 	.word	0x58024400

0800adbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b088      	sub	sp, #32
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adc4:	f107 030c 	add.w	r3, r7, #12
 800adc8:	2200      	movs	r2, #0
 800adca:	601a      	str	r2, [r3, #0]
 800adcc:	605a      	str	r2, [r3, #4]
 800adce:	609a      	str	r2, [r3, #8]
 800add0:	60da      	str	r2, [r3, #12]
 800add2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a13      	ldr	r2, [pc, #76]	; (800ae28 <HAL_TIM_MspPostInit+0x6c>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d11f      	bne.n	800ae1e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800adde:	4b13      	ldr	r3, [pc, #76]	; (800ae2c <HAL_TIM_MspPostInit+0x70>)
 800ade0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ade4:	4a11      	ldr	r2, [pc, #68]	; (800ae2c <HAL_TIM_MspPostInit+0x70>)
 800ade6:	f043 0310 	orr.w	r3, r3, #16
 800adea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800adee:	4b0f      	ldr	r3, [pc, #60]	; (800ae2c <HAL_TIM_MspPostInit+0x70>)
 800adf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800adf4:	f003 0310 	and.w	r3, r3, #16
 800adf8:	60bb      	str	r3, [r7, #8]
 800adfa:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800adfc:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800ae00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae02:	2302      	movs	r3, #2
 800ae04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ae12:	f107 030c 	add.w	r3, r7, #12
 800ae16:	4619      	mov	r1, r3
 800ae18:	4805      	ldr	r0, [pc, #20]	; (800ae30 <HAL_TIM_MspPostInit+0x74>)
 800ae1a:	f7f7 fb9b 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800ae1e:	bf00      	nop
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	40010000 	.word	0x40010000
 800ae2c:	58024400 	.word	0x58024400
 800ae30:	58021000 	.word	0x58021000

0800ae34 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800ae38:	4b22      	ldr	r3, [pc, #136]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae3a:	4a23      	ldr	r2, [pc, #140]	; (800aec8 <MX_USART3_UART_Init+0x94>)
 800ae3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800ae3e:	4b21      	ldr	r3, [pc, #132]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ae44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ae46:	4b1f      	ldr	r3, [pc, #124]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ae4c:	4b1d      	ldr	r3, [pc, #116]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ae52:	4b1c      	ldr	r3, [pc, #112]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ae58:	4b1a      	ldr	r3, [pc, #104]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae5a:	220c      	movs	r2, #12
 800ae5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ae5e:	4b19      	ldr	r3, [pc, #100]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae60:	2200      	movs	r2, #0
 800ae62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ae64:	4b17      	ldr	r3, [pc, #92]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae66:	2200      	movs	r2, #0
 800ae68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ae6a:	4b16      	ldr	r3, [pc, #88]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ae70:	4b14      	ldr	r3, [pc, #80]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ae76:	4b13      	ldr	r3, [pc, #76]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ae7c:	4811      	ldr	r0, [pc, #68]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae7e:	f7fb fcf5 	bl	800686c <HAL_UART_Init>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800ae88:	f7ff fd12 	bl	800a8b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	480d      	ldr	r0, [pc, #52]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800ae90:	f7fe f825 	bl	8008ede <HAL_UARTEx_SetTxFifoThreshold>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800ae9a:	f7ff fd09 	bl	800a8b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ae9e:	2100      	movs	r1, #0
 800aea0:	4808      	ldr	r0, [pc, #32]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800aea2:	f7fe f85a 	bl	8008f5a <HAL_UARTEx_SetRxFifoThreshold>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d001      	beq.n	800aeb0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800aeac:	f7ff fd00 	bl	800a8b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800aeb0:	4804      	ldr	r0, [pc, #16]	; (800aec4 <MX_USART3_UART_Init+0x90>)
 800aeb2:	f7fd ffdb 	bl	8008e6c <HAL_UARTEx_DisableFifoMode>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800aebc:	f7ff fcf8 	bl	800a8b0 <Error_Handler>
  }

}
 800aec0:	bf00      	nop
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	240036e0 	.word	0x240036e0
 800aec8:	40004800 	.word	0x40004800

0800aecc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08a      	sub	sp, #40	; 0x28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aed4:	f107 0314 	add.w	r3, r7, #20
 800aed8:	2200      	movs	r2, #0
 800aeda:	601a      	str	r2, [r3, #0]
 800aedc:	605a      	str	r2, [r3, #4]
 800aede:	609a      	str	r2, [r3, #8]
 800aee0:	60da      	str	r2, [r3, #12]
 800aee2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a1a      	ldr	r2, [pc, #104]	; (800af54 <HAL_UART_MspInit+0x88>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d12e      	bne.n	800af4c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800aeee:	4b1a      	ldr	r3, [pc, #104]	; (800af58 <HAL_UART_MspInit+0x8c>)
 800aef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aef4:	4a18      	ldr	r2, [pc, #96]	; (800af58 <HAL_UART_MspInit+0x8c>)
 800aef6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aefa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800aefe:	4b16      	ldr	r3, [pc, #88]	; (800af58 <HAL_UART_MspInit+0x8c>)
 800af00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800af04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af08:	613b      	str	r3, [r7, #16]
 800af0a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800af0c:	4b12      	ldr	r3, [pc, #72]	; (800af58 <HAL_UART_MspInit+0x8c>)
 800af0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af12:	4a11      	ldr	r2, [pc, #68]	; (800af58 <HAL_UART_MspInit+0x8c>)
 800af14:	f043 0308 	orr.w	r3, r3, #8
 800af18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800af1c:	4b0e      	ldr	r3, [pc, #56]	; (800af58 <HAL_UART_MspInit+0x8c>)
 800af1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af22:	f003 0308 	and.w	r3, r3, #8
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800af2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800af2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af30:	2302      	movs	r3, #2
 800af32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af34:	2300      	movs	r3, #0
 800af36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af38:	2300      	movs	r3, #0
 800af3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800af3c:	2307      	movs	r3, #7
 800af3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800af40:	f107 0314 	add.w	r3, r7, #20
 800af44:	4619      	mov	r1, r3
 800af46:	4805      	ldr	r0, [pc, #20]	; (800af5c <HAL_UART_MspInit+0x90>)
 800af48:	f7f7 fb04 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800af4c:	bf00      	nop
 800af4e:	3728      	adds	r7, #40	; 0x28
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	40004800 	.word	0x40004800
 800af58:	58024400 	.word	0x58024400
 800af5c:	58020c00 	.word	0x58020c00

0800af60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800af60:	f8df d034 	ldr.w	sp, [pc, #52]	; 800af98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800af64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800af66:	e003      	b.n	800af70 <LoopCopyDataInit>

0800af68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800af68:	4b0c      	ldr	r3, [pc, #48]	; (800af9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800af6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800af6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800af6e:	3104      	adds	r1, #4

0800af70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800af70:	480b      	ldr	r0, [pc, #44]	; (800afa0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800af72:	4b0c      	ldr	r3, [pc, #48]	; (800afa4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800af74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800af76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800af78:	d3f6      	bcc.n	800af68 <CopyDataInit>
  ldr  r2, =_sbss
 800af7a:	4a0b      	ldr	r2, [pc, #44]	; (800afa8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800af7c:	e002      	b.n	800af84 <LoopFillZerobss>

0800af7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800af7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800af80:	f842 3b04 	str.w	r3, [r2], #4

0800af84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800af84:	4b09      	ldr	r3, [pc, #36]	; (800afac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800af86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800af88:	d3f9      	bcc.n	800af7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800af8a:	f7ff fd87 	bl	800aa9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800af8e:	f000 f95b 	bl	800b248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800af92:	f7ff fb95 	bl	800a6c0 <main>
  bx  lr    
 800af96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800af98:	2407ffff 	.word	0x2407ffff
  ldr  r3, =_sidata
 800af9c:	0800cff8 	.word	0x0800cff8
  ldr  r0, =_sdata
 800afa0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800afa4:	240001e0 	.word	0x240001e0
  ldr  r2, =_sbss
 800afa8:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 800afac:	24003770 	.word	0x24003770

0800afb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800afb0:	e7fe      	b.n	800afb0 <ADC_IRQHandler>
	...

0800afb4 <_ZN8GPIOCtrlC1EP12GPIO_TypeDefm>:
 *      Author: Nakamura(Yutaka)
 */

#include "GPIOCtrl.hpp"

GPIOCtrl::GPIOCtrl( GPIO_TypeDef *pGPIOx, uint32_t pPinMask)
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
:mGPIOx(pGPIOx), mPinMask(pPinMask), mGPIOStatus(GPIO_OFF) {
 800afc0:	4a09      	ldr	r2, [pc, #36]	; (800afe8 <_ZN8GPIOCtrlC1EP12GPIO_TypeDefm+0x34>)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	605a      	str	r2, [r3, #4]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	609a      	str	r2, [r3, #8]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	731a      	strb	r2, [r3, #12]
	OFF();
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f000 f827 	bl	800b02c <_ZN8GPIOCtrl3OFFEv>
}
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	0800cd94 	.word	0x0800cd94

0800afec <_ZN8GPIOCtrlD1Ev>:

GPIOCtrl::~GPIOCtrl() {
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	4a04      	ldr	r2, [pc, #16]	; (800b008 <_ZN8GPIOCtrlD1Ev+0x1c>)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	601a      	str	r2, [r3, #0]
}
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4618      	mov	r0, r3
 800affe:	370c      	adds	r7, #12
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	0800cd94 	.word	0x0800cd94

0800b00c <_ZN8GPIOCtrlD0Ev>:
GPIOCtrl::~GPIOCtrl() {
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
}
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7ff ffe9 	bl	800afec <_ZN8GPIOCtrlD1Ev>
 800b01a:	2110      	movs	r1, #16
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 f909 	bl	800b234 <_ZdlPvj>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4618      	mov	r0, r3
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <_ZN8GPIOCtrl3OFFEv>:

void GPIOCtrl::OFF() {
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
	mGPIOStatus = GPIO_OFF;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	731a      	strb	r2, [r3, #12]
	HAL_GPIO_WritePin(mGPIOx, mPinMask, GPIO_PIN_RESET);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6858      	ldr	r0, [r3, #4]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	b29b      	uxth	r3, r3
 800b044:	2200      	movs	r2, #0
 800b046:	4619      	mov	r1, r3
 800b048:	f7f7 fc34 	bl	80028b4 <HAL_GPIO_WritePin>
	//LL_GPIO_ResetOutputPin(mGPIOx, mPinMask);
}
 800b04c:	bf00      	nop
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <_ZN10SystemTest9StartTestEv>:

SystemTest::~SystemTest() {
	// TODO Auto-generated destructor stub
}

void SystemTest::StartTest() {
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af02      	add	r7, sp, #8

	 // HAL_ADC_Start_IT(&hadc3);

	  //HAL_ADC_Start(&hadc3);
	  //ADCInit::ADC3Enable();
	  HAL_ADCEx_InjectedStart_IT(&hadc3);
 800b05a:	481e      	ldr	r0, [pc, #120]	; (800b0d4 <_ZN10SystemTest9StartTestEv+0x80>)
 800b05c:	f7f6 fb36 	bl	80016cc <HAL_ADCEx_InjectedStart_IT>

	  asm("NOP");
 800b060:	bf00      	nop

		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 5000);
 800b062:	4b1d      	ldr	r3, [pc, #116]	; (800b0d8 <_ZN10SystemTest9StartTestEv+0x84>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f241 3288 	movw	r2, #5000	; 0x1388
 800b06a:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 2500);
 800b06c:	4b1a      	ldr	r3, [pc, #104]	; (800b0d8 <_ZN10SystemTest9StartTestEv+0x84>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b074:	639a      	str	r2, [r3, #56]	; 0x38
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1250);
 800b076:	4b18      	ldr	r3, [pc, #96]	; (800b0d8 <_ZN10SystemTest9StartTestEv+0x84>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b07e:	63da      	str	r2, [r3, #60]	; 0x3c
		// __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 5000);

		 asm("NOP");
 800b080:	bf00      	nop
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800b082:	2100      	movs	r1, #0
 800b084:	4814      	ldr	r0, [pc, #80]	; (800b0d8 <_ZN10SystemTest9StartTestEv+0x84>)
 800b086:	f7fa fa55 	bl	8005534 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800b08a:	2104      	movs	r1, #4
 800b08c:	4812      	ldr	r0, [pc, #72]	; (800b0d8 <_ZN10SystemTest9StartTestEv+0x84>)
 800b08e:	f7fa fa51 	bl	8005534 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800b092:	2108      	movs	r1, #8
 800b094:	4810      	ldr	r0, [pc, #64]	; (800b0d8 <_ZN10SystemTest9StartTestEv+0x84>)
 800b096:	f7fa fa4d 	bl	8005534 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800b09a:	210c      	movs	r1, #12
 800b09c:	480e      	ldr	r0, [pc, #56]	; (800b0d8 <_ZN10SystemTest9StartTestEv+0x84>)
 800b09e:	f7fa fa49 	bl	8005534 <HAL_TIM_PWM_Start>


			while(1){
				HAL_Delay(100);
 800b0a2:	2064      	movs	r0, #100	; 0x64
 800b0a4:	f7f5 fb2e 	bl	8000704 <HAL_Delay>
				int adc_u = ADC3 -> JDR1;
 800b0a8:	4b0c      	ldr	r3, [pc, #48]	; (800b0dc <_ZN10SystemTest9StartTestEv+0x88>)
 800b0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0ae:	60fb      	str	r3, [r7, #12]
				int adc_v = ADC3 -> JDR2;
 800b0b0:	4b0a      	ldr	r3, [pc, #40]	; (800b0dc <_ZN10SystemTest9StartTestEv+0x88>)
 800b0b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0b6:	60bb      	str	r3, [r7, #8]
				int adc_w = ADC3 -> JDR3;
 800b0b8:	4b08      	ldr	r3, [pc, #32]	; (800b0dc <_ZN10SystemTest9StartTestEv+0x88>)
 800b0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0be:	607b      	str	r3, [r7, #4]
				SEGGER_RTT_printf(0, "adcVal:%d,%d,%d\n" ,adc_u, adc_v, adc_w);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	4905      	ldr	r1, [pc, #20]	; (800b0e0 <_ZN10SystemTest9StartTestEv+0x8c>)
 800b0ca:	2000      	movs	r0, #0
 800b0cc:	f7ff f838 	bl	800a140 <SEGGER_RTT_printf>
			}
 800b0d0:	e7e7      	b.n	800b0a2 <_ZN10SystemTest9StartTestEv+0x4e>
 800b0d2:	bf00      	nop
 800b0d4:	2400363c 	.word	0x2400363c
 800b0d8:	240036a0 	.word	0x240036a0
 800b0dc:	58026000 	.word	0x58026000
 800b0e0:	0800ccc8 	.word	0x0800ccc8

0800b0e4 <_ZN4DeusC1Ev>:

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
}


Deus::Deus() {
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	4a06      	ldr	r2, [pc, #24]	; (800b108 <_ZN4DeusC1Ev+0x24>)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	601a      	str	r2, [r3, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fe fa3c 	bl	8009574 <_ZN9MotorCtrlC1Ev>
//		  if((htim->Instance == TIM1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {
//		    // タイムアウト処理
//		  }
//	}

}
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4618      	mov	r0, r3
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	0800cda4 	.word	0x0800cda4

0800b10c <_ZN4DeusD1Ev>:

Deus::~Deus() {
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	4a06      	ldr	r2, [pc, #24]	; (800b130 <_ZN4DeusD1Ev+0x24>)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	601a      	str	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3304      	adds	r3, #4
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fe fa7a 	bl	8009618 <_ZN9MotorCtrlD1Ev>
	// TODO Auto-generated destructor stub
}
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4618      	mov	r0, r3
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	0800cda4 	.word	0x0800cda4

0800b134 <_ZN4DeusD0Ev>:
Deus::~Deus() {
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
}
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f7ff ffe5 	bl	800b10c <_ZN4DeusD1Ev>
 800b142:	f642 7168 	movw	r1, #12136	; 0x2f68
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f874 	bl	800b234 <_ZdlPvj>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <_Z41__static_initialization_and_destruction_0ii>:
//		myGPIO0.Toggle();
//		myGPIO1.Toggle();
//		myGPIO2.Toggle();
//		HAL_Delay(1000);
//	}
}
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d10a      	bne.n	800b17e <_Z41__static_initialization_and_destruction_0ii+0x26>
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b16e:	4293      	cmp	r3, r2
 800b170:	d105      	bne.n	800b17e <_Z41__static_initialization_and_destruction_0ii+0x26>
	GPIOCtrl myGPIO2(GPIOB, GPIO_PIN_14);
 800b172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b176:	4909      	ldr	r1, [pc, #36]	; (800b19c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800b178:	4809      	ldr	r0, [pc, #36]	; (800b1a0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800b17a:	f7ff ff1b 	bl	800afb4 <_ZN8GPIOCtrlC1EP12GPIO_TypeDefm>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d107      	bne.n	800b194 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d102      	bne.n	800b194 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800b18e:	4804      	ldr	r0, [pc, #16]	; (800b1a0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800b190:	f7ff ff2c 	bl	800afec <_ZN8GPIOCtrlD1Ev>
}
 800b194:	bf00      	nop
 800b196:	3708      	adds	r7, #8
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}
 800b19c:	58020400 	.word	0x58020400
 800b1a0:	24000614 	.word	0x24000614

0800b1a4 <_GLOBAL__sub_I_myGPIO2>:
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b1ac:	2001      	movs	r0, #1
 800b1ae:	f7ff ffd3 	bl	800b158 <_Z41__static_initialization_and_destruction_0ii>
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <_GLOBAL__sub_D_myGPIO2>:
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b1bc:	2000      	movs	r0, #0
 800b1be:	f7ff ffcb 	bl	800b158 <_Z41__static_initialization_and_destruction_0ii>
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <cppWrapper>:


Deus Bosatsu;


void cppWrapper(void){
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	af00      	add	r7, sp, #0
	SystemTest::StartTest();
 800b1c8:	f7ff ff44 	bl	800b054 <_ZN10SystemTest9StartTestEv>
	//Bosatsu.Ctrl();

}
 800b1cc:	bf00      	nop
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <_Z41__static_initialization_and_destruction_0ii>:

void HighFreqTask(void){
	Bosatsu.HFTask();

}
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d107      	bne.n	800b1f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d102      	bne.n	800b1f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
Deus Bosatsu;
 800b1ea:	4809      	ldr	r0, [pc, #36]	; (800b210 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b1ec:	f7ff ff7a 	bl	800b0e4 <_ZN4DeusC1Ev>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d107      	bne.n	800b206 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d102      	bne.n	800b206 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b200:	4803      	ldr	r0, [pc, #12]	; (800b210 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b202:	f7ff ff83 	bl	800b10c <_ZN4DeusD1Ev>
}
 800b206:	bf00      	nop
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	24000624 	.word	0x24000624

0800b214 <_GLOBAL__sub_I_Bosatsu>:
 800b214:	b580      	push	{r7, lr}
 800b216:	af00      	add	r7, sp, #0
 800b218:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b21c:	2001      	movs	r0, #1
 800b21e:	f7ff ffd7 	bl	800b1d0 <_Z41__static_initialization_and_destruction_0ii>
 800b222:	bd80      	pop	{r7, pc}

0800b224 <_GLOBAL__sub_D_Bosatsu>:
 800b224:	b580      	push	{r7, lr}
 800b226:	af00      	add	r7, sp, #0
 800b228:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b22c:	2000      	movs	r0, #0
 800b22e:	f7ff ffcf 	bl	800b1d0 <_Z41__static_initialization_and_destruction_0ii>
 800b232:	bd80      	pop	{r7, pc}

0800b234 <_ZdlPvj>:
 800b234:	f000 b800 	b.w	800b238 <_ZdlPv>

0800b238 <_ZdlPv>:
 800b238:	f000 b832 	b.w	800b2a0 <free>

0800b23c <__errno>:
 800b23c:	4b01      	ldr	r3, [pc, #4]	; (800b244 <__errno+0x8>)
 800b23e:	6818      	ldr	r0, [r3, #0]
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	24000010 	.word	0x24000010

0800b248 <__libc_init_array>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	4e0d      	ldr	r6, [pc, #52]	; (800b280 <__libc_init_array+0x38>)
 800b24c:	4c0d      	ldr	r4, [pc, #52]	; (800b284 <__libc_init_array+0x3c>)
 800b24e:	1ba4      	subs	r4, r4, r6
 800b250:	10a4      	asrs	r4, r4, #2
 800b252:	2500      	movs	r5, #0
 800b254:	42a5      	cmp	r5, r4
 800b256:	d109      	bne.n	800b26c <__libc_init_array+0x24>
 800b258:	4e0b      	ldr	r6, [pc, #44]	; (800b288 <__libc_init_array+0x40>)
 800b25a:	4c0c      	ldr	r4, [pc, #48]	; (800b28c <__libc_init_array+0x44>)
 800b25c:	f001 fd12 	bl	800cc84 <_init>
 800b260:	1ba4      	subs	r4, r4, r6
 800b262:	10a4      	asrs	r4, r4, #2
 800b264:	2500      	movs	r5, #0
 800b266:	42a5      	cmp	r5, r4
 800b268:	d105      	bne.n	800b276 <__libc_init_array+0x2e>
 800b26a:	bd70      	pop	{r4, r5, r6, pc}
 800b26c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b270:	4798      	blx	r3
 800b272:	3501      	adds	r5, #1
 800b274:	e7ee      	b.n	800b254 <__libc_init_array+0xc>
 800b276:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b27a:	4798      	blx	r3
 800b27c:	3501      	adds	r5, #1
 800b27e:	e7f2      	b.n	800b266 <__libc_init_array+0x1e>
 800b280:	0800cfe0 	.word	0x0800cfe0
 800b284:	0800cfe0 	.word	0x0800cfe0
 800b288:	0800cfe0 	.word	0x0800cfe0
 800b28c:	0800cfec 	.word	0x0800cfec

0800b290 <malloc>:
 800b290:	4b02      	ldr	r3, [pc, #8]	; (800b29c <malloc+0xc>)
 800b292:	4601      	mov	r1, r0
 800b294:	6818      	ldr	r0, [r3, #0]
 800b296:	f000 b86d 	b.w	800b374 <_malloc_r>
 800b29a:	bf00      	nop
 800b29c:	24000010 	.word	0x24000010

0800b2a0 <free>:
 800b2a0:	4b02      	ldr	r3, [pc, #8]	; (800b2ac <free+0xc>)
 800b2a2:	4601      	mov	r1, r0
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	f000 b817 	b.w	800b2d8 <_free_r>
 800b2aa:	bf00      	nop
 800b2ac:	24000010 	.word	0x24000010

0800b2b0 <memcpy>:
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	1e43      	subs	r3, r0, #1
 800b2b4:	440a      	add	r2, r1
 800b2b6:	4291      	cmp	r1, r2
 800b2b8:	d100      	bne.n	800b2bc <memcpy+0xc>
 800b2ba:	bd10      	pop	{r4, pc}
 800b2bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2c4:	e7f7      	b.n	800b2b6 <memcpy+0x6>

0800b2c6 <memset>:
 800b2c6:	4402      	add	r2, r0
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d100      	bne.n	800b2d0 <memset+0xa>
 800b2ce:	4770      	bx	lr
 800b2d0:	f803 1b01 	strb.w	r1, [r3], #1
 800b2d4:	e7f9      	b.n	800b2ca <memset+0x4>
	...

0800b2d8 <_free_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4605      	mov	r5, r0
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	d045      	beq.n	800b36c <_free_r+0x94>
 800b2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e4:	1f0c      	subs	r4, r1, #4
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	bfb8      	it	lt
 800b2ea:	18e4      	addlt	r4, r4, r3
 800b2ec:	f001 f9be 	bl	800c66c <__malloc_lock>
 800b2f0:	4a1f      	ldr	r2, [pc, #124]	; (800b370 <_free_r+0x98>)
 800b2f2:	6813      	ldr	r3, [r2, #0]
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	b933      	cbnz	r3, 800b306 <_free_r+0x2e>
 800b2f8:	6063      	str	r3, [r4, #4]
 800b2fa:	6014      	str	r4, [r2, #0]
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b302:	f001 b9b4 	b.w	800c66e <__malloc_unlock>
 800b306:	42a3      	cmp	r3, r4
 800b308:	d90c      	bls.n	800b324 <_free_r+0x4c>
 800b30a:	6821      	ldr	r1, [r4, #0]
 800b30c:	1862      	adds	r2, r4, r1
 800b30e:	4293      	cmp	r3, r2
 800b310:	bf04      	itt	eq
 800b312:	681a      	ldreq	r2, [r3, #0]
 800b314:	685b      	ldreq	r3, [r3, #4]
 800b316:	6063      	str	r3, [r4, #4]
 800b318:	bf04      	itt	eq
 800b31a:	1852      	addeq	r2, r2, r1
 800b31c:	6022      	streq	r2, [r4, #0]
 800b31e:	6004      	str	r4, [r0, #0]
 800b320:	e7ec      	b.n	800b2fc <_free_r+0x24>
 800b322:	4613      	mov	r3, r2
 800b324:	685a      	ldr	r2, [r3, #4]
 800b326:	b10a      	cbz	r2, 800b32c <_free_r+0x54>
 800b328:	42a2      	cmp	r2, r4
 800b32a:	d9fa      	bls.n	800b322 <_free_r+0x4a>
 800b32c:	6819      	ldr	r1, [r3, #0]
 800b32e:	1858      	adds	r0, r3, r1
 800b330:	42a0      	cmp	r0, r4
 800b332:	d10b      	bne.n	800b34c <_free_r+0x74>
 800b334:	6820      	ldr	r0, [r4, #0]
 800b336:	4401      	add	r1, r0
 800b338:	1858      	adds	r0, r3, r1
 800b33a:	4282      	cmp	r2, r0
 800b33c:	6019      	str	r1, [r3, #0]
 800b33e:	d1dd      	bne.n	800b2fc <_free_r+0x24>
 800b340:	6810      	ldr	r0, [r2, #0]
 800b342:	6852      	ldr	r2, [r2, #4]
 800b344:	605a      	str	r2, [r3, #4]
 800b346:	4401      	add	r1, r0
 800b348:	6019      	str	r1, [r3, #0]
 800b34a:	e7d7      	b.n	800b2fc <_free_r+0x24>
 800b34c:	d902      	bls.n	800b354 <_free_r+0x7c>
 800b34e:	230c      	movs	r3, #12
 800b350:	602b      	str	r3, [r5, #0]
 800b352:	e7d3      	b.n	800b2fc <_free_r+0x24>
 800b354:	6820      	ldr	r0, [r4, #0]
 800b356:	1821      	adds	r1, r4, r0
 800b358:	428a      	cmp	r2, r1
 800b35a:	bf04      	itt	eq
 800b35c:	6811      	ldreq	r1, [r2, #0]
 800b35e:	6852      	ldreq	r2, [r2, #4]
 800b360:	6062      	str	r2, [r4, #4]
 800b362:	bf04      	itt	eq
 800b364:	1809      	addeq	r1, r1, r0
 800b366:	6021      	streq	r1, [r4, #0]
 800b368:	605c      	str	r4, [r3, #4]
 800b36a:	e7c7      	b.n	800b2fc <_free_r+0x24>
 800b36c:	bd38      	pop	{r3, r4, r5, pc}
 800b36e:	bf00      	nop
 800b370:	2400358c 	.word	0x2400358c

0800b374 <_malloc_r>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	1ccd      	adds	r5, r1, #3
 800b378:	f025 0503 	bic.w	r5, r5, #3
 800b37c:	3508      	adds	r5, #8
 800b37e:	2d0c      	cmp	r5, #12
 800b380:	bf38      	it	cc
 800b382:	250c      	movcc	r5, #12
 800b384:	2d00      	cmp	r5, #0
 800b386:	4606      	mov	r6, r0
 800b388:	db01      	blt.n	800b38e <_malloc_r+0x1a>
 800b38a:	42a9      	cmp	r1, r5
 800b38c:	d903      	bls.n	800b396 <_malloc_r+0x22>
 800b38e:	230c      	movs	r3, #12
 800b390:	6033      	str	r3, [r6, #0]
 800b392:	2000      	movs	r0, #0
 800b394:	bd70      	pop	{r4, r5, r6, pc}
 800b396:	f001 f969 	bl	800c66c <__malloc_lock>
 800b39a:	4a21      	ldr	r2, [pc, #132]	; (800b420 <_malloc_r+0xac>)
 800b39c:	6814      	ldr	r4, [r2, #0]
 800b39e:	4621      	mov	r1, r4
 800b3a0:	b991      	cbnz	r1, 800b3c8 <_malloc_r+0x54>
 800b3a2:	4c20      	ldr	r4, [pc, #128]	; (800b424 <_malloc_r+0xb0>)
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	b91b      	cbnz	r3, 800b3b0 <_malloc_r+0x3c>
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f000 fb67 	bl	800ba7c <_sbrk_r>
 800b3ae:	6020      	str	r0, [r4, #0]
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f000 fb62 	bl	800ba7c <_sbrk_r>
 800b3b8:	1c43      	adds	r3, r0, #1
 800b3ba:	d124      	bne.n	800b406 <_malloc_r+0x92>
 800b3bc:	230c      	movs	r3, #12
 800b3be:	6033      	str	r3, [r6, #0]
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f001 f954 	bl	800c66e <__malloc_unlock>
 800b3c6:	e7e4      	b.n	800b392 <_malloc_r+0x1e>
 800b3c8:	680b      	ldr	r3, [r1, #0]
 800b3ca:	1b5b      	subs	r3, r3, r5
 800b3cc:	d418      	bmi.n	800b400 <_malloc_r+0x8c>
 800b3ce:	2b0b      	cmp	r3, #11
 800b3d0:	d90f      	bls.n	800b3f2 <_malloc_r+0x7e>
 800b3d2:	600b      	str	r3, [r1, #0]
 800b3d4:	50cd      	str	r5, [r1, r3]
 800b3d6:	18cc      	adds	r4, r1, r3
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f001 f948 	bl	800c66e <__malloc_unlock>
 800b3de:	f104 000b 	add.w	r0, r4, #11
 800b3e2:	1d23      	adds	r3, r4, #4
 800b3e4:	f020 0007 	bic.w	r0, r0, #7
 800b3e8:	1ac3      	subs	r3, r0, r3
 800b3ea:	d0d3      	beq.n	800b394 <_malloc_r+0x20>
 800b3ec:	425a      	negs	r2, r3
 800b3ee:	50e2      	str	r2, [r4, r3]
 800b3f0:	e7d0      	b.n	800b394 <_malloc_r+0x20>
 800b3f2:	428c      	cmp	r4, r1
 800b3f4:	684b      	ldr	r3, [r1, #4]
 800b3f6:	bf16      	itet	ne
 800b3f8:	6063      	strne	r3, [r4, #4]
 800b3fa:	6013      	streq	r3, [r2, #0]
 800b3fc:	460c      	movne	r4, r1
 800b3fe:	e7eb      	b.n	800b3d8 <_malloc_r+0x64>
 800b400:	460c      	mov	r4, r1
 800b402:	6849      	ldr	r1, [r1, #4]
 800b404:	e7cc      	b.n	800b3a0 <_malloc_r+0x2c>
 800b406:	1cc4      	adds	r4, r0, #3
 800b408:	f024 0403 	bic.w	r4, r4, #3
 800b40c:	42a0      	cmp	r0, r4
 800b40e:	d005      	beq.n	800b41c <_malloc_r+0xa8>
 800b410:	1a21      	subs	r1, r4, r0
 800b412:	4630      	mov	r0, r6
 800b414:	f000 fb32 	bl	800ba7c <_sbrk_r>
 800b418:	3001      	adds	r0, #1
 800b41a:	d0cf      	beq.n	800b3bc <_malloc_r+0x48>
 800b41c:	6025      	str	r5, [r4, #0]
 800b41e:	e7db      	b.n	800b3d8 <_malloc_r+0x64>
 800b420:	2400358c 	.word	0x2400358c
 800b424:	24003590 	.word	0x24003590

0800b428 <__cvt>:
 800b428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b42a:	ed2d 8b02 	vpush	{d8}
 800b42e:	eeb0 8b40 	vmov.f64	d8, d0
 800b432:	b085      	sub	sp, #20
 800b434:	4617      	mov	r7, r2
 800b436:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b438:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b43a:	ee18 2a90 	vmov	r2, s17
 800b43e:	f025 0520 	bic.w	r5, r5, #32
 800b442:	2a00      	cmp	r2, #0
 800b444:	bfb6      	itet	lt
 800b446:	222d      	movlt	r2, #45	; 0x2d
 800b448:	2200      	movge	r2, #0
 800b44a:	eeb1 8b40 	vneglt.f64	d8, d0
 800b44e:	2d46      	cmp	r5, #70	; 0x46
 800b450:	460c      	mov	r4, r1
 800b452:	701a      	strb	r2, [r3, #0]
 800b454:	d004      	beq.n	800b460 <__cvt+0x38>
 800b456:	2d45      	cmp	r5, #69	; 0x45
 800b458:	d100      	bne.n	800b45c <__cvt+0x34>
 800b45a:	3401      	adds	r4, #1
 800b45c:	2102      	movs	r1, #2
 800b45e:	e000      	b.n	800b462 <__cvt+0x3a>
 800b460:	2103      	movs	r1, #3
 800b462:	ab03      	add	r3, sp, #12
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	ab02      	add	r3, sp, #8
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	4622      	mov	r2, r4
 800b46c:	4633      	mov	r3, r6
 800b46e:	eeb0 0b48 	vmov.f64	d0, d8
 800b472:	f000 fba1 	bl	800bbb8 <_dtoa_r>
 800b476:	2d47      	cmp	r5, #71	; 0x47
 800b478:	d101      	bne.n	800b47e <__cvt+0x56>
 800b47a:	07fb      	lsls	r3, r7, #31
 800b47c:	d51e      	bpl.n	800b4bc <__cvt+0x94>
 800b47e:	2d46      	cmp	r5, #70	; 0x46
 800b480:	eb00 0304 	add.w	r3, r0, r4
 800b484:	d10c      	bne.n	800b4a0 <__cvt+0x78>
 800b486:	7802      	ldrb	r2, [r0, #0]
 800b488:	2a30      	cmp	r2, #48	; 0x30
 800b48a:	d107      	bne.n	800b49c <__cvt+0x74>
 800b48c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b494:	bf1c      	itt	ne
 800b496:	f1c4 0401 	rsbne	r4, r4, #1
 800b49a:	6034      	strne	r4, [r6, #0]
 800b49c:	6832      	ldr	r2, [r6, #0]
 800b49e:	4413      	add	r3, r2
 800b4a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a8:	d007      	beq.n	800b4ba <__cvt+0x92>
 800b4aa:	2130      	movs	r1, #48	; 0x30
 800b4ac:	9a03      	ldr	r2, [sp, #12]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d204      	bcs.n	800b4bc <__cvt+0x94>
 800b4b2:	1c54      	adds	r4, r2, #1
 800b4b4:	9403      	str	r4, [sp, #12]
 800b4b6:	7011      	strb	r1, [r2, #0]
 800b4b8:	e7f8      	b.n	800b4ac <__cvt+0x84>
 800b4ba:	9303      	str	r3, [sp, #12]
 800b4bc:	9b03      	ldr	r3, [sp, #12]
 800b4be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4c0:	1a1b      	subs	r3, r3, r0
 800b4c2:	6013      	str	r3, [r2, #0]
 800b4c4:	b005      	add	sp, #20
 800b4c6:	ecbd 8b02 	vpop	{d8}
 800b4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4cc <__exponent>:
 800b4cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4ce:	2900      	cmp	r1, #0
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	bfba      	itte	lt
 800b4d4:	4249      	neglt	r1, r1
 800b4d6:	232d      	movlt	r3, #45	; 0x2d
 800b4d8:	232b      	movge	r3, #43	; 0x2b
 800b4da:	2909      	cmp	r1, #9
 800b4dc:	f804 2b02 	strb.w	r2, [r4], #2
 800b4e0:	7043      	strb	r3, [r0, #1]
 800b4e2:	dd20      	ble.n	800b526 <__exponent+0x5a>
 800b4e4:	f10d 0307 	add.w	r3, sp, #7
 800b4e8:	461f      	mov	r7, r3
 800b4ea:	260a      	movs	r6, #10
 800b4ec:	fb91 f5f6 	sdiv	r5, r1, r6
 800b4f0:	fb06 1115 	mls	r1, r6, r5, r1
 800b4f4:	3130      	adds	r1, #48	; 0x30
 800b4f6:	2d09      	cmp	r5, #9
 800b4f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b4fc:	f103 32ff 	add.w	r2, r3, #4294967295
 800b500:	4629      	mov	r1, r5
 800b502:	dc09      	bgt.n	800b518 <__exponent+0x4c>
 800b504:	3130      	adds	r1, #48	; 0x30
 800b506:	3b02      	subs	r3, #2
 800b508:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b50c:	42bb      	cmp	r3, r7
 800b50e:	4622      	mov	r2, r4
 800b510:	d304      	bcc.n	800b51c <__exponent+0x50>
 800b512:	1a10      	subs	r0, r2, r0
 800b514:	b003      	add	sp, #12
 800b516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b518:	4613      	mov	r3, r2
 800b51a:	e7e7      	b.n	800b4ec <__exponent+0x20>
 800b51c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b520:	f804 2b01 	strb.w	r2, [r4], #1
 800b524:	e7f2      	b.n	800b50c <__exponent+0x40>
 800b526:	2330      	movs	r3, #48	; 0x30
 800b528:	4419      	add	r1, r3
 800b52a:	7083      	strb	r3, [r0, #2]
 800b52c:	1d02      	adds	r2, r0, #4
 800b52e:	70c1      	strb	r1, [r0, #3]
 800b530:	e7ef      	b.n	800b512 <__exponent+0x46>
 800b532:	0000      	movs	r0, r0
 800b534:	0000      	movs	r0, r0
	...

0800b538 <_printf_float>:
 800b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	b08d      	sub	sp, #52	; 0x34
 800b53e:	460c      	mov	r4, r1
 800b540:	4616      	mov	r6, r2
 800b542:	461f      	mov	r7, r3
 800b544:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b548:	4605      	mov	r5, r0
 800b54a:	f001 f881 	bl	800c650 <_localeconv_r>
 800b54e:	f8d0 b000 	ldr.w	fp, [r0]
 800b552:	4658      	mov	r0, fp
 800b554:	f7f4 fec0 	bl	80002d8 <strlen>
 800b558:	2300      	movs	r3, #0
 800b55a:	930a      	str	r3, [sp, #40]	; 0x28
 800b55c:	f8d8 3000 	ldr.w	r3, [r8]
 800b560:	9005      	str	r0, [sp, #20]
 800b562:	3307      	adds	r3, #7
 800b564:	f023 0307 	bic.w	r3, r3, #7
 800b568:	f103 0108 	add.w	r1, r3, #8
 800b56c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b570:	6822      	ldr	r2, [r4, #0]
 800b572:	f8c8 1000 	str.w	r1, [r8]
 800b576:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b57a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b57e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800b808 <_printf_float+0x2d0>
 800b582:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b586:	eeb0 6bc0 	vabs.f64	d6, d0
 800b58a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b592:	dd24      	ble.n	800b5de <_printf_float+0xa6>
 800b594:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59c:	d502      	bpl.n	800b5a4 <_printf_float+0x6c>
 800b59e:	232d      	movs	r3, #45	; 0x2d
 800b5a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5a4:	499a      	ldr	r1, [pc, #616]	; (800b810 <_printf_float+0x2d8>)
 800b5a6:	4b9b      	ldr	r3, [pc, #620]	; (800b814 <_printf_float+0x2dc>)
 800b5a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b5ac:	bf8c      	ite	hi
 800b5ae:	4688      	movhi	r8, r1
 800b5b0:	4698      	movls	r8, r3
 800b5b2:	f022 0204 	bic.w	r2, r2, #4
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	6123      	str	r3, [r4, #16]
 800b5ba:	6022      	str	r2, [r4, #0]
 800b5bc:	f04f 0a00 	mov.w	sl, #0
 800b5c0:	9700      	str	r7, [sp, #0]
 800b5c2:	4633      	mov	r3, r6
 800b5c4:	aa0b      	add	r2, sp, #44	; 0x2c
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	f000 f9e1 	bl	800b990 <_printf_common>
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	f040 8089 	bne.w	800b6e6 <_printf_float+0x1ae>
 800b5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d8:	b00d      	add	sp, #52	; 0x34
 800b5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5de:	eeb4 0b40 	vcmp.f64	d0, d0
 800b5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5e6:	d702      	bvc.n	800b5ee <_printf_float+0xb6>
 800b5e8:	498b      	ldr	r1, [pc, #556]	; (800b818 <_printf_float+0x2e0>)
 800b5ea:	4b8c      	ldr	r3, [pc, #560]	; (800b81c <_printf_float+0x2e4>)
 800b5ec:	e7dc      	b.n	800b5a8 <_printf_float+0x70>
 800b5ee:	6861      	ldr	r1, [r4, #4]
 800b5f0:	1c4b      	adds	r3, r1, #1
 800b5f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b5f6:	ab0a      	add	r3, sp, #40	; 0x28
 800b5f8:	a809      	add	r0, sp, #36	; 0x24
 800b5fa:	d13b      	bne.n	800b674 <_printf_float+0x13c>
 800b5fc:	2106      	movs	r1, #6
 800b5fe:	6061      	str	r1, [r4, #4]
 800b600:	f04f 0c00 	mov.w	ip, #0
 800b604:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b608:	e9cd 0900 	strd	r0, r9, [sp]
 800b60c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b610:	6022      	str	r2, [r4, #0]
 800b612:	6861      	ldr	r1, [r4, #4]
 800b614:	4628      	mov	r0, r5
 800b616:	f7ff ff07 	bl	800b428 <__cvt>
 800b61a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800b61e:	2b47      	cmp	r3, #71	; 0x47
 800b620:	4680      	mov	r8, r0
 800b622:	d109      	bne.n	800b638 <_printf_float+0x100>
 800b624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b626:	1cd8      	adds	r0, r3, #3
 800b628:	db02      	blt.n	800b630 <_printf_float+0xf8>
 800b62a:	6862      	ldr	r2, [r4, #4]
 800b62c:	4293      	cmp	r3, r2
 800b62e:	dd47      	ble.n	800b6c0 <_printf_float+0x188>
 800b630:	f1a9 0902 	sub.w	r9, r9, #2
 800b634:	fa5f f989 	uxtb.w	r9, r9
 800b638:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b63c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b63e:	d824      	bhi.n	800b68a <_printf_float+0x152>
 800b640:	3901      	subs	r1, #1
 800b642:	464a      	mov	r2, r9
 800b644:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b648:	9109      	str	r1, [sp, #36]	; 0x24
 800b64a:	f7ff ff3f 	bl	800b4cc <__exponent>
 800b64e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b650:	1813      	adds	r3, r2, r0
 800b652:	2a01      	cmp	r2, #1
 800b654:	4682      	mov	sl, r0
 800b656:	6123      	str	r3, [r4, #16]
 800b658:	dc02      	bgt.n	800b660 <_printf_float+0x128>
 800b65a:	6822      	ldr	r2, [r4, #0]
 800b65c:	07d1      	lsls	r1, r2, #31
 800b65e:	d501      	bpl.n	800b664 <_printf_float+0x12c>
 800b660:	3301      	adds	r3, #1
 800b662:	6123      	str	r3, [r4, #16]
 800b664:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d0a9      	beq.n	800b5c0 <_printf_float+0x88>
 800b66c:	232d      	movs	r3, #45	; 0x2d
 800b66e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b672:	e7a5      	b.n	800b5c0 <_printf_float+0x88>
 800b674:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800b678:	f000 8178 	beq.w	800b96c <_printf_float+0x434>
 800b67c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b680:	d1be      	bne.n	800b600 <_printf_float+0xc8>
 800b682:	2900      	cmp	r1, #0
 800b684:	d1bc      	bne.n	800b600 <_printf_float+0xc8>
 800b686:	2101      	movs	r1, #1
 800b688:	e7b9      	b.n	800b5fe <_printf_float+0xc6>
 800b68a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b68e:	d119      	bne.n	800b6c4 <_printf_float+0x18c>
 800b690:	2900      	cmp	r1, #0
 800b692:	6863      	ldr	r3, [r4, #4]
 800b694:	dd0c      	ble.n	800b6b0 <_printf_float+0x178>
 800b696:	6121      	str	r1, [r4, #16]
 800b698:	b913      	cbnz	r3, 800b6a0 <_printf_float+0x168>
 800b69a:	6822      	ldr	r2, [r4, #0]
 800b69c:	07d2      	lsls	r2, r2, #31
 800b69e:	d502      	bpl.n	800b6a6 <_printf_float+0x16e>
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	440b      	add	r3, r1
 800b6a4:	6123      	str	r3, [r4, #16]
 800b6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6a8:	65a3      	str	r3, [r4, #88]	; 0x58
 800b6aa:	f04f 0a00 	mov.w	sl, #0
 800b6ae:	e7d9      	b.n	800b664 <_printf_float+0x12c>
 800b6b0:	b913      	cbnz	r3, 800b6b8 <_printf_float+0x180>
 800b6b2:	6822      	ldr	r2, [r4, #0]
 800b6b4:	07d0      	lsls	r0, r2, #31
 800b6b6:	d501      	bpl.n	800b6bc <_printf_float+0x184>
 800b6b8:	3302      	adds	r3, #2
 800b6ba:	e7f3      	b.n	800b6a4 <_printf_float+0x16c>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e7f1      	b.n	800b6a4 <_printf_float+0x16c>
 800b6c0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b6c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	db05      	blt.n	800b6d8 <_printf_float+0x1a0>
 800b6cc:	6822      	ldr	r2, [r4, #0]
 800b6ce:	6123      	str	r3, [r4, #16]
 800b6d0:	07d1      	lsls	r1, r2, #31
 800b6d2:	d5e8      	bpl.n	800b6a6 <_printf_float+0x16e>
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	e7e5      	b.n	800b6a4 <_printf_float+0x16c>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	bfd4      	ite	le
 800b6dc:	f1c3 0302 	rsble	r3, r3, #2
 800b6e0:	2301      	movgt	r3, #1
 800b6e2:	4413      	add	r3, r2
 800b6e4:	e7de      	b.n	800b6a4 <_printf_float+0x16c>
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	055a      	lsls	r2, r3, #21
 800b6ea:	d407      	bmi.n	800b6fc <_printf_float+0x1c4>
 800b6ec:	6923      	ldr	r3, [r4, #16]
 800b6ee:	4642      	mov	r2, r8
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	47b8      	blx	r7
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	d12a      	bne.n	800b750 <_printf_float+0x218>
 800b6fa:	e76b      	b.n	800b5d4 <_printf_float+0x9c>
 800b6fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b700:	f240 80de 	bls.w	800b8c0 <_printf_float+0x388>
 800b704:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b708:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b710:	d133      	bne.n	800b77a <_printf_float+0x242>
 800b712:	2301      	movs	r3, #1
 800b714:	4a42      	ldr	r2, [pc, #264]	; (800b820 <_printf_float+0x2e8>)
 800b716:	4631      	mov	r1, r6
 800b718:	4628      	mov	r0, r5
 800b71a:	47b8      	blx	r7
 800b71c:	3001      	adds	r0, #1
 800b71e:	f43f af59 	beq.w	800b5d4 <_printf_float+0x9c>
 800b722:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b726:	429a      	cmp	r2, r3
 800b728:	db02      	blt.n	800b730 <_printf_float+0x1f8>
 800b72a:	6823      	ldr	r3, [r4, #0]
 800b72c:	07d8      	lsls	r0, r3, #31
 800b72e:	d50f      	bpl.n	800b750 <_printf_float+0x218>
 800b730:	9b05      	ldr	r3, [sp, #20]
 800b732:	465a      	mov	r2, fp
 800b734:	4631      	mov	r1, r6
 800b736:	4628      	mov	r0, r5
 800b738:	47b8      	blx	r7
 800b73a:	3001      	adds	r0, #1
 800b73c:	f43f af4a 	beq.w	800b5d4 <_printf_float+0x9c>
 800b740:	f04f 0800 	mov.w	r8, #0
 800b744:	f104 091a 	add.w	r9, r4, #26
 800b748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b74a:	3b01      	subs	r3, #1
 800b74c:	4543      	cmp	r3, r8
 800b74e:	dc09      	bgt.n	800b764 <_printf_float+0x22c>
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	079b      	lsls	r3, r3, #30
 800b754:	f100 8105 	bmi.w	800b962 <_printf_float+0x42a>
 800b758:	68e0      	ldr	r0, [r4, #12]
 800b75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b75c:	4298      	cmp	r0, r3
 800b75e:	bfb8      	it	lt
 800b760:	4618      	movlt	r0, r3
 800b762:	e739      	b.n	800b5d8 <_printf_float+0xa0>
 800b764:	2301      	movs	r3, #1
 800b766:	464a      	mov	r2, r9
 800b768:	4631      	mov	r1, r6
 800b76a:	4628      	mov	r0, r5
 800b76c:	47b8      	blx	r7
 800b76e:	3001      	adds	r0, #1
 800b770:	f43f af30 	beq.w	800b5d4 <_printf_float+0x9c>
 800b774:	f108 0801 	add.w	r8, r8, #1
 800b778:	e7e6      	b.n	800b748 <_printf_float+0x210>
 800b77a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	dc2b      	bgt.n	800b7d8 <_printf_float+0x2a0>
 800b780:	2301      	movs	r3, #1
 800b782:	4a27      	ldr	r2, [pc, #156]	; (800b820 <_printf_float+0x2e8>)
 800b784:	4631      	mov	r1, r6
 800b786:	4628      	mov	r0, r5
 800b788:	47b8      	blx	r7
 800b78a:	3001      	adds	r0, #1
 800b78c:	f43f af22 	beq.w	800b5d4 <_printf_float+0x9c>
 800b790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b792:	b923      	cbnz	r3, 800b79e <_printf_float+0x266>
 800b794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b796:	b913      	cbnz	r3, 800b79e <_printf_float+0x266>
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	07d9      	lsls	r1, r3, #31
 800b79c:	d5d8      	bpl.n	800b750 <_printf_float+0x218>
 800b79e:	9b05      	ldr	r3, [sp, #20]
 800b7a0:	465a      	mov	r2, fp
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	47b8      	blx	r7
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	f43f af13 	beq.w	800b5d4 <_printf_float+0x9c>
 800b7ae:	f04f 0900 	mov.w	r9, #0
 800b7b2:	f104 0a1a 	add.w	sl, r4, #26
 800b7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b8:	425b      	negs	r3, r3
 800b7ba:	454b      	cmp	r3, r9
 800b7bc:	dc01      	bgt.n	800b7c2 <_printf_float+0x28a>
 800b7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c0:	e795      	b.n	800b6ee <_printf_float+0x1b6>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	4652      	mov	r2, sl
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	47b8      	blx	r7
 800b7cc:	3001      	adds	r0, #1
 800b7ce:	f43f af01 	beq.w	800b5d4 <_printf_float+0x9c>
 800b7d2:	f109 0901 	add.w	r9, r9, #1
 800b7d6:	e7ee      	b.n	800b7b6 <_printf_float+0x27e>
 800b7d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	bfa8      	it	ge
 800b7e0:	461a      	movge	r2, r3
 800b7e2:	2a00      	cmp	r2, #0
 800b7e4:	4691      	mov	r9, r2
 800b7e6:	dd07      	ble.n	800b7f8 <_printf_float+0x2c0>
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	4642      	mov	r2, r8
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	47b8      	blx	r7
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	f43f aeee 	beq.w	800b5d4 <_printf_float+0x9c>
 800b7f8:	f104 031a 	add.w	r3, r4, #26
 800b7fc:	f04f 0a00 	mov.w	sl, #0
 800b800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b804:	9307      	str	r3, [sp, #28]
 800b806:	e017      	b.n	800b838 <_printf_float+0x300>
 800b808:	ffffffff 	.word	0xffffffff
 800b80c:	7fefffff 	.word	0x7fefffff
 800b810:	0800cdb0 	.word	0x0800cdb0
 800b814:	0800cdac 	.word	0x0800cdac
 800b818:	0800cdb8 	.word	0x0800cdb8
 800b81c:	0800cdb4 	.word	0x0800cdb4
 800b820:	0800cdbc 	.word	0x0800cdbc
 800b824:	2301      	movs	r3, #1
 800b826:	9a07      	ldr	r2, [sp, #28]
 800b828:	4631      	mov	r1, r6
 800b82a:	4628      	mov	r0, r5
 800b82c:	47b8      	blx	r7
 800b82e:	3001      	adds	r0, #1
 800b830:	f43f aed0 	beq.w	800b5d4 <_printf_float+0x9c>
 800b834:	f10a 0a01 	add.w	sl, sl, #1
 800b838:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b83a:	9306      	str	r3, [sp, #24]
 800b83c:	eba3 0309 	sub.w	r3, r3, r9
 800b840:	4553      	cmp	r3, sl
 800b842:	dcef      	bgt.n	800b824 <_printf_float+0x2ec>
 800b844:	9b06      	ldr	r3, [sp, #24]
 800b846:	4498      	add	r8, r3
 800b848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b84c:	429a      	cmp	r2, r3
 800b84e:	db15      	blt.n	800b87c <_printf_float+0x344>
 800b850:	6823      	ldr	r3, [r4, #0]
 800b852:	07da      	lsls	r2, r3, #31
 800b854:	d412      	bmi.n	800b87c <_printf_float+0x344>
 800b856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b858:	9a06      	ldr	r2, [sp, #24]
 800b85a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b85c:	1a9a      	subs	r2, r3, r2
 800b85e:	eba3 0a01 	sub.w	sl, r3, r1
 800b862:	4592      	cmp	sl, r2
 800b864:	bfa8      	it	ge
 800b866:	4692      	movge	sl, r2
 800b868:	f1ba 0f00 	cmp.w	sl, #0
 800b86c:	dc0e      	bgt.n	800b88c <_printf_float+0x354>
 800b86e:	f04f 0800 	mov.w	r8, #0
 800b872:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b876:	f104 091a 	add.w	r9, r4, #26
 800b87a:	e019      	b.n	800b8b0 <_printf_float+0x378>
 800b87c:	9b05      	ldr	r3, [sp, #20]
 800b87e:	465a      	mov	r2, fp
 800b880:	4631      	mov	r1, r6
 800b882:	4628      	mov	r0, r5
 800b884:	47b8      	blx	r7
 800b886:	3001      	adds	r0, #1
 800b888:	d1e5      	bne.n	800b856 <_printf_float+0x31e>
 800b88a:	e6a3      	b.n	800b5d4 <_printf_float+0x9c>
 800b88c:	4653      	mov	r3, sl
 800b88e:	4642      	mov	r2, r8
 800b890:	4631      	mov	r1, r6
 800b892:	4628      	mov	r0, r5
 800b894:	47b8      	blx	r7
 800b896:	3001      	adds	r0, #1
 800b898:	d1e9      	bne.n	800b86e <_printf_float+0x336>
 800b89a:	e69b      	b.n	800b5d4 <_printf_float+0x9c>
 800b89c:	2301      	movs	r3, #1
 800b89e:	464a      	mov	r2, r9
 800b8a0:	4631      	mov	r1, r6
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	47b8      	blx	r7
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	f43f ae94 	beq.w	800b5d4 <_printf_float+0x9c>
 800b8ac:	f108 0801 	add.w	r8, r8, #1
 800b8b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8b4:	1a9b      	subs	r3, r3, r2
 800b8b6:	eba3 030a 	sub.w	r3, r3, sl
 800b8ba:	4543      	cmp	r3, r8
 800b8bc:	dcee      	bgt.n	800b89c <_printf_float+0x364>
 800b8be:	e747      	b.n	800b750 <_printf_float+0x218>
 800b8c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8c2:	2a01      	cmp	r2, #1
 800b8c4:	dc01      	bgt.n	800b8ca <_printf_float+0x392>
 800b8c6:	07db      	lsls	r3, r3, #31
 800b8c8:	d539      	bpl.n	800b93e <_printf_float+0x406>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	4642      	mov	r2, r8
 800b8ce:	4631      	mov	r1, r6
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	47b8      	blx	r7
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	f43f ae7d 	beq.w	800b5d4 <_printf_float+0x9c>
 800b8da:	9b05      	ldr	r3, [sp, #20]
 800b8dc:	465a      	mov	r2, fp
 800b8de:	4631      	mov	r1, r6
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	47b8      	blx	r7
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	f108 0801 	add.w	r8, r8, #1
 800b8ea:	f43f ae73 	beq.w	800b5d4 <_printf_float+0x9c>
 800b8ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b8f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8fc:	f103 33ff 	add.w	r3, r3, #4294967295
 800b900:	d018      	beq.n	800b934 <_printf_float+0x3fc>
 800b902:	4642      	mov	r2, r8
 800b904:	4631      	mov	r1, r6
 800b906:	4628      	mov	r0, r5
 800b908:	47b8      	blx	r7
 800b90a:	3001      	adds	r0, #1
 800b90c:	d10e      	bne.n	800b92c <_printf_float+0x3f4>
 800b90e:	e661      	b.n	800b5d4 <_printf_float+0x9c>
 800b910:	2301      	movs	r3, #1
 800b912:	464a      	mov	r2, r9
 800b914:	4631      	mov	r1, r6
 800b916:	4628      	mov	r0, r5
 800b918:	47b8      	blx	r7
 800b91a:	3001      	adds	r0, #1
 800b91c:	f43f ae5a 	beq.w	800b5d4 <_printf_float+0x9c>
 800b920:	f108 0801 	add.w	r8, r8, #1
 800b924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b926:	3b01      	subs	r3, #1
 800b928:	4543      	cmp	r3, r8
 800b92a:	dcf1      	bgt.n	800b910 <_printf_float+0x3d8>
 800b92c:	4653      	mov	r3, sl
 800b92e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b932:	e6dd      	b.n	800b6f0 <_printf_float+0x1b8>
 800b934:	f04f 0800 	mov.w	r8, #0
 800b938:	f104 091a 	add.w	r9, r4, #26
 800b93c:	e7f2      	b.n	800b924 <_printf_float+0x3ec>
 800b93e:	2301      	movs	r3, #1
 800b940:	e7df      	b.n	800b902 <_printf_float+0x3ca>
 800b942:	2301      	movs	r3, #1
 800b944:	464a      	mov	r2, r9
 800b946:	4631      	mov	r1, r6
 800b948:	4628      	mov	r0, r5
 800b94a:	47b8      	blx	r7
 800b94c:	3001      	adds	r0, #1
 800b94e:	f43f ae41 	beq.w	800b5d4 <_printf_float+0x9c>
 800b952:	f108 0801 	add.w	r8, r8, #1
 800b956:	68e3      	ldr	r3, [r4, #12]
 800b958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b95a:	1a9b      	subs	r3, r3, r2
 800b95c:	4543      	cmp	r3, r8
 800b95e:	dcf0      	bgt.n	800b942 <_printf_float+0x40a>
 800b960:	e6fa      	b.n	800b758 <_printf_float+0x220>
 800b962:	f04f 0800 	mov.w	r8, #0
 800b966:	f104 0919 	add.w	r9, r4, #25
 800b96a:	e7f4      	b.n	800b956 <_printf_float+0x41e>
 800b96c:	2900      	cmp	r1, #0
 800b96e:	f43f ae8a 	beq.w	800b686 <_printf_float+0x14e>
 800b972:	f04f 0c00 	mov.w	ip, #0
 800b976:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b97a:	e9cd 0900 	strd	r0, r9, [sp]
 800b97e:	6022      	str	r2, [r4, #0]
 800b980:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b984:	4628      	mov	r0, r5
 800b986:	f7ff fd4f 	bl	800b428 <__cvt>
 800b98a:	4680      	mov	r8, r0
 800b98c:	e64a      	b.n	800b624 <_printf_float+0xec>
 800b98e:	bf00      	nop

0800b990 <_printf_common>:
 800b990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b994:	4691      	mov	r9, r2
 800b996:	461f      	mov	r7, r3
 800b998:	688a      	ldr	r2, [r1, #8]
 800b99a:	690b      	ldr	r3, [r1, #16]
 800b99c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	bfb8      	it	lt
 800b9a4:	4613      	movlt	r3, r2
 800b9a6:	f8c9 3000 	str.w	r3, [r9]
 800b9aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	460c      	mov	r4, r1
 800b9b2:	b112      	cbz	r2, 800b9ba <_printf_common+0x2a>
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	f8c9 3000 	str.w	r3, [r9]
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	0699      	lsls	r1, r3, #26
 800b9be:	bf42      	ittt	mi
 800b9c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b9c4:	3302      	addmi	r3, #2
 800b9c6:	f8c9 3000 	strmi.w	r3, [r9]
 800b9ca:	6825      	ldr	r5, [r4, #0]
 800b9cc:	f015 0506 	ands.w	r5, r5, #6
 800b9d0:	d107      	bne.n	800b9e2 <_printf_common+0x52>
 800b9d2:	f104 0a19 	add.w	sl, r4, #25
 800b9d6:	68e3      	ldr	r3, [r4, #12]
 800b9d8:	f8d9 2000 	ldr.w	r2, [r9]
 800b9dc:	1a9b      	subs	r3, r3, r2
 800b9de:	42ab      	cmp	r3, r5
 800b9e0:	dc28      	bgt.n	800ba34 <_printf_common+0xa4>
 800b9e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b9e6:	6822      	ldr	r2, [r4, #0]
 800b9e8:	3300      	adds	r3, #0
 800b9ea:	bf18      	it	ne
 800b9ec:	2301      	movne	r3, #1
 800b9ee:	0692      	lsls	r2, r2, #26
 800b9f0:	d42d      	bmi.n	800ba4e <_printf_common+0xbe>
 800b9f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9f6:	4639      	mov	r1, r7
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	47c0      	blx	r8
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	d020      	beq.n	800ba42 <_printf_common+0xb2>
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	68e5      	ldr	r5, [r4, #12]
 800ba04:	f8d9 2000 	ldr.w	r2, [r9]
 800ba08:	f003 0306 	and.w	r3, r3, #6
 800ba0c:	2b04      	cmp	r3, #4
 800ba0e:	bf08      	it	eq
 800ba10:	1aad      	subeq	r5, r5, r2
 800ba12:	68a3      	ldr	r3, [r4, #8]
 800ba14:	6922      	ldr	r2, [r4, #16]
 800ba16:	bf0c      	ite	eq
 800ba18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba1c:	2500      	movne	r5, #0
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	bfc4      	itt	gt
 800ba22:	1a9b      	subgt	r3, r3, r2
 800ba24:	18ed      	addgt	r5, r5, r3
 800ba26:	f04f 0900 	mov.w	r9, #0
 800ba2a:	341a      	adds	r4, #26
 800ba2c:	454d      	cmp	r5, r9
 800ba2e:	d11a      	bne.n	800ba66 <_printf_common+0xd6>
 800ba30:	2000      	movs	r0, #0
 800ba32:	e008      	b.n	800ba46 <_printf_common+0xb6>
 800ba34:	2301      	movs	r3, #1
 800ba36:	4652      	mov	r2, sl
 800ba38:	4639      	mov	r1, r7
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	47c0      	blx	r8
 800ba3e:	3001      	adds	r0, #1
 800ba40:	d103      	bne.n	800ba4a <_printf_common+0xba>
 800ba42:	f04f 30ff 	mov.w	r0, #4294967295
 800ba46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba4a:	3501      	adds	r5, #1
 800ba4c:	e7c3      	b.n	800b9d6 <_printf_common+0x46>
 800ba4e:	18e1      	adds	r1, r4, r3
 800ba50:	1c5a      	adds	r2, r3, #1
 800ba52:	2030      	movs	r0, #48	; 0x30
 800ba54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba58:	4422      	add	r2, r4
 800ba5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba62:	3302      	adds	r3, #2
 800ba64:	e7c5      	b.n	800b9f2 <_printf_common+0x62>
 800ba66:	2301      	movs	r3, #1
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4639      	mov	r1, r7
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	47c0      	blx	r8
 800ba70:	3001      	adds	r0, #1
 800ba72:	d0e6      	beq.n	800ba42 <_printf_common+0xb2>
 800ba74:	f109 0901 	add.w	r9, r9, #1
 800ba78:	e7d8      	b.n	800ba2c <_printf_common+0x9c>
	...

0800ba7c <_sbrk_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4c06      	ldr	r4, [pc, #24]	; (800ba98 <_sbrk_r+0x1c>)
 800ba80:	2300      	movs	r3, #0
 800ba82:	4605      	mov	r5, r0
 800ba84:	4608      	mov	r0, r1
 800ba86:	6023      	str	r3, [r4, #0]
 800ba88:	f7fe ffdc 	bl	800aa44 <_sbrk>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	d102      	bne.n	800ba96 <_sbrk_r+0x1a>
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	b103      	cbz	r3, 800ba96 <_sbrk_r+0x1a>
 800ba94:	602b      	str	r3, [r5, #0]
 800ba96:	bd38      	pop	{r3, r4, r5, pc}
 800ba98:	2400376c 	.word	0x2400376c

0800ba9c <quorem>:
 800ba9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa0:	6903      	ldr	r3, [r0, #16]
 800baa2:	690c      	ldr	r4, [r1, #16]
 800baa4:	42a3      	cmp	r3, r4
 800baa6:	4680      	mov	r8, r0
 800baa8:	f2c0 8082 	blt.w	800bbb0 <quorem+0x114>
 800baac:	3c01      	subs	r4, #1
 800baae:	f101 0714 	add.w	r7, r1, #20
 800bab2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bab6:	f100 0614 	add.w	r6, r0, #20
 800baba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800babe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bac2:	eb06 030c 	add.w	r3, r6, ip
 800bac6:	3501      	adds	r5, #1
 800bac8:	eb07 090c 	add.w	r9, r7, ip
 800bacc:	9301      	str	r3, [sp, #4]
 800bace:	fbb0 f5f5 	udiv	r5, r0, r5
 800bad2:	b395      	cbz	r5, 800bb3a <quorem+0x9e>
 800bad4:	f04f 0a00 	mov.w	sl, #0
 800bad8:	4638      	mov	r0, r7
 800bada:	46b6      	mov	lr, r6
 800badc:	46d3      	mov	fp, sl
 800bade:	f850 2b04 	ldr.w	r2, [r0], #4
 800bae2:	b293      	uxth	r3, r2
 800bae4:	fb05 a303 	mla	r3, r5, r3, sl
 800bae8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800baec:	b29b      	uxth	r3, r3
 800baee:	ebab 0303 	sub.w	r3, fp, r3
 800baf2:	0c12      	lsrs	r2, r2, #16
 800baf4:	f8de b000 	ldr.w	fp, [lr]
 800baf8:	fb05 a202 	mla	r2, r5, r2, sl
 800bafc:	fa13 f38b 	uxtah	r3, r3, fp
 800bb00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bb04:	fa1f fb82 	uxth.w	fp, r2
 800bb08:	f8de 2000 	ldr.w	r2, [lr]
 800bb0c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bb10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb1a:	4581      	cmp	r9, r0
 800bb1c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bb20:	f84e 3b04 	str.w	r3, [lr], #4
 800bb24:	d2db      	bcs.n	800bade <quorem+0x42>
 800bb26:	f856 300c 	ldr.w	r3, [r6, ip]
 800bb2a:	b933      	cbnz	r3, 800bb3a <quorem+0x9e>
 800bb2c:	9b01      	ldr	r3, [sp, #4]
 800bb2e:	3b04      	subs	r3, #4
 800bb30:	429e      	cmp	r6, r3
 800bb32:	461a      	mov	r2, r3
 800bb34:	d330      	bcc.n	800bb98 <quorem+0xfc>
 800bb36:	f8c8 4010 	str.w	r4, [r8, #16]
 800bb3a:	4640      	mov	r0, r8
 800bb3c:	f000 ffae 	bl	800ca9c <__mcmp>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	db25      	blt.n	800bb90 <quorem+0xf4>
 800bb44:	3501      	adds	r5, #1
 800bb46:	4630      	mov	r0, r6
 800bb48:	f04f 0c00 	mov.w	ip, #0
 800bb4c:	f857 2b04 	ldr.w	r2, [r7], #4
 800bb50:	f8d0 e000 	ldr.w	lr, [r0]
 800bb54:	b293      	uxth	r3, r2
 800bb56:	ebac 0303 	sub.w	r3, ip, r3
 800bb5a:	0c12      	lsrs	r2, r2, #16
 800bb5c:	fa13 f38e 	uxtah	r3, r3, lr
 800bb60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bb64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb6e:	45b9      	cmp	r9, r7
 800bb70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb74:	f840 3b04 	str.w	r3, [r0], #4
 800bb78:	d2e8      	bcs.n	800bb4c <quorem+0xb0>
 800bb7a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bb7e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bb82:	b92a      	cbnz	r2, 800bb90 <quorem+0xf4>
 800bb84:	3b04      	subs	r3, #4
 800bb86:	429e      	cmp	r6, r3
 800bb88:	461a      	mov	r2, r3
 800bb8a:	d30b      	bcc.n	800bba4 <quorem+0x108>
 800bb8c:	f8c8 4010 	str.w	r4, [r8, #16]
 800bb90:	4628      	mov	r0, r5
 800bb92:	b003      	add	sp, #12
 800bb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb98:	6812      	ldr	r2, [r2, #0]
 800bb9a:	3b04      	subs	r3, #4
 800bb9c:	2a00      	cmp	r2, #0
 800bb9e:	d1ca      	bne.n	800bb36 <quorem+0x9a>
 800bba0:	3c01      	subs	r4, #1
 800bba2:	e7c5      	b.n	800bb30 <quorem+0x94>
 800bba4:	6812      	ldr	r2, [r2, #0]
 800bba6:	3b04      	subs	r3, #4
 800bba8:	2a00      	cmp	r2, #0
 800bbaa:	d1ef      	bne.n	800bb8c <quorem+0xf0>
 800bbac:	3c01      	subs	r4, #1
 800bbae:	e7ea      	b.n	800bb86 <quorem+0xea>
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	e7ee      	b.n	800bb92 <quorem+0xf6>
 800bbb4:	0000      	movs	r0, r0
	...

0800bbb8 <_dtoa_r>:
 800bbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbc:	ec57 6b10 	vmov	r6, r7, d0
 800bbc0:	b095      	sub	sp, #84	; 0x54
 800bbc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bbc4:	9108      	str	r1, [sp, #32]
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	920a      	str	r2, [sp, #40]	; 0x28
 800bbca:	9311      	str	r3, [sp, #68]	; 0x44
 800bbcc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800bbd0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bbd4:	b93d      	cbnz	r5, 800bbe6 <_dtoa_r+0x2e>
 800bbd6:	2010      	movs	r0, #16
 800bbd8:	f7ff fb5a 	bl	800b290 <malloc>
 800bbdc:	6260      	str	r0, [r4, #36]	; 0x24
 800bbde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bbe2:	6005      	str	r5, [r0, #0]
 800bbe4:	60c5      	str	r5, [r0, #12]
 800bbe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbe8:	6819      	ldr	r1, [r3, #0]
 800bbea:	b151      	cbz	r1, 800bc02 <_dtoa_r+0x4a>
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	604a      	str	r2, [r1, #4]
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	4093      	lsls	r3, r2
 800bbf4:	608b      	str	r3, [r1, #8]
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f000 fd6e 	bl	800c6d8 <_Bfree>
 800bbfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbfe:	2200      	movs	r2, #0
 800bc00:	601a      	str	r2, [r3, #0]
 800bc02:	1e3b      	subs	r3, r7, #0
 800bc04:	bfb9      	ittee	lt
 800bc06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bc0a:	9303      	strlt	r3, [sp, #12]
 800bc0c:	2300      	movge	r3, #0
 800bc0e:	f8c8 3000 	strge.w	r3, [r8]
 800bc12:	9d03      	ldr	r5, [sp, #12]
 800bc14:	4bac      	ldr	r3, [pc, #688]	; (800bec8 <_dtoa_r+0x310>)
 800bc16:	bfbc      	itt	lt
 800bc18:	2201      	movlt	r2, #1
 800bc1a:	f8c8 2000 	strlt.w	r2, [r8]
 800bc1e:	43ab      	bics	r3, r5
 800bc20:	d11b      	bne.n	800bc5a <_dtoa_r+0xa2>
 800bc22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc24:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc28:	6013      	str	r3, [r2, #0]
 800bc2a:	9b02      	ldr	r3, [sp, #8]
 800bc2c:	b923      	cbnz	r3, 800bc38 <_dtoa_r+0x80>
 800bc2e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bc32:	2d00      	cmp	r5, #0
 800bc34:	f000 84dd 	beq.w	800c5f2 <_dtoa_r+0xa3a>
 800bc38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc3a:	b953      	cbnz	r3, 800bc52 <_dtoa_r+0x9a>
 800bc3c:	4ba3      	ldr	r3, [pc, #652]	; (800becc <_dtoa_r+0x314>)
 800bc3e:	e020      	b.n	800bc82 <_dtoa_r+0xca>
 800bc40:	4ba3      	ldr	r3, [pc, #652]	; (800bed0 <_dtoa_r+0x318>)
 800bc42:	9304      	str	r3, [sp, #16]
 800bc44:	3308      	adds	r3, #8
 800bc46:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bc48:	6013      	str	r3, [r2, #0]
 800bc4a:	9804      	ldr	r0, [sp, #16]
 800bc4c:	b015      	add	sp, #84	; 0x54
 800bc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc52:	4b9e      	ldr	r3, [pc, #632]	; (800becc <_dtoa_r+0x314>)
 800bc54:	9304      	str	r3, [sp, #16]
 800bc56:	3303      	adds	r3, #3
 800bc58:	e7f5      	b.n	800bc46 <_dtoa_r+0x8e>
 800bc5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc66:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bc6a:	d10c      	bne.n	800bc86 <_dtoa_r+0xce>
 800bc6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc6e:	2301      	movs	r3, #1
 800bc70:	6013      	str	r3, [r2, #0]
 800bc72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 84b9 	beq.w	800c5ec <_dtoa_r+0xa34>
 800bc7a:	4b96      	ldr	r3, [pc, #600]	; (800bed4 <_dtoa_r+0x31c>)
 800bc7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bc7e:	6013      	str	r3, [r2, #0]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	9304      	str	r3, [sp, #16]
 800bc84:	e7e1      	b.n	800bc4a <_dtoa_r+0x92>
 800bc86:	a913      	add	r1, sp, #76	; 0x4c
 800bc88:	aa12      	add	r2, sp, #72	; 0x48
 800bc8a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f000 ff7b 	bl	800cb8a <__d2b>
 800bc94:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800bc98:	9001      	str	r0, [sp, #4]
 800bc9a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bc9c:	2e00      	cmp	r6, #0
 800bc9e:	d046      	beq.n	800bd2e <_dtoa_r+0x176>
 800bca0:	9805      	ldr	r0, [sp, #20]
 800bca2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800bca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcaa:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800bcae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bcb2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800bcb6:	2700      	movs	r7, #0
 800bcb8:	ee07 aa90 	vmov	s15, sl
 800bcbc:	ec43 2b16 	vmov	d6, r2, r3
 800bcc0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800bcc4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800beb0 <_dtoa_r+0x2f8>
 800bcc8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bccc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bcd0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800beb8 <_dtoa_r+0x300>
 800bcd4:	eea7 6b04 	vfma.f64	d6, d7, d4
 800bcd8:	eeb0 7b46 	vmov.f64	d7, d6
 800bcdc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800bec0 <_dtoa_r+0x308>
 800bce0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bce4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bce8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcf0:	ee16 ba90 	vmov	fp, s13
 800bcf4:	d508      	bpl.n	800bd08 <_dtoa_r+0x150>
 800bcf6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bcfa:	eeb4 6b47 	vcmp.f64	d6, d7
 800bcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd02:	bf18      	it	ne
 800bd04:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800bd08:	f1bb 0f16 	cmp.w	fp, #22
 800bd0c:	d834      	bhi.n	800bd78 <_dtoa_r+0x1c0>
 800bd0e:	4b72      	ldr	r3, [pc, #456]	; (800bed8 <_dtoa_r+0x320>)
 800bd10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd14:	ed93 7b00 	vldr	d7, [r3]
 800bd18:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bd1c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd24:	dd01      	ble.n	800bd2a <_dtoa_r+0x172>
 800bd26:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	e025      	b.n	800bd7a <_dtoa_r+0x1c2>
 800bd2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd30:	eb01 0a03 	add.w	sl, r1, r3
 800bd34:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800bd38:	2b20      	cmp	r3, #32
 800bd3a:	dd17      	ble.n	800bd6c <_dtoa_r+0x1b4>
 800bd3c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800bd40:	9a02      	ldr	r2, [sp, #8]
 800bd42:	409d      	lsls	r5, r3
 800bd44:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800bd48:	fa22 f303 	lsr.w	r3, r2, r3
 800bd4c:	432b      	orrs	r3, r5
 800bd4e:	ee07 3a90 	vmov	s15, r3
 800bd52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bd56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd5a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bd5e:	9805      	ldr	r0, [sp, #20]
 800bd60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd64:	2701      	movs	r7, #1
 800bd66:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800bd6a:	e7a5      	b.n	800bcb8 <_dtoa_r+0x100>
 800bd6c:	9a02      	ldr	r2, [sp, #8]
 800bd6e:	f1c3 0320 	rsb	r3, r3, #32
 800bd72:	fa02 f303 	lsl.w	r3, r2, r3
 800bd76:	e7ea      	b.n	800bd4e <_dtoa_r+0x196>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	eba1 0a0a 	sub.w	sl, r1, sl
 800bd7e:	9310      	str	r3, [sp, #64]	; 0x40
 800bd80:	f1ba 0301 	subs.w	r3, sl, #1
 800bd84:	9307      	str	r3, [sp, #28]
 800bd86:	bf43      	ittte	mi
 800bd88:	2300      	movmi	r3, #0
 800bd8a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800bd8e:	9307      	strmi	r3, [sp, #28]
 800bd90:	f04f 0a00 	movpl.w	sl, #0
 800bd94:	f1bb 0f00 	cmp.w	fp, #0
 800bd98:	db19      	blt.n	800bdce <_dtoa_r+0x216>
 800bd9a:	9b07      	ldr	r3, [sp, #28]
 800bd9c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bda0:	445b      	add	r3, fp
 800bda2:	9307      	str	r3, [sp, #28]
 800bda4:	f04f 0800 	mov.w	r8, #0
 800bda8:	9b08      	ldr	r3, [sp, #32]
 800bdaa:	2b09      	cmp	r3, #9
 800bdac:	d866      	bhi.n	800be7c <_dtoa_r+0x2c4>
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	bfc4      	itt	gt
 800bdb2:	3b04      	subgt	r3, #4
 800bdb4:	9308      	strgt	r3, [sp, #32]
 800bdb6:	9b08      	ldr	r3, [sp, #32]
 800bdb8:	f1a3 0302 	sub.w	r3, r3, #2
 800bdbc:	bfcc      	ite	gt
 800bdbe:	2500      	movgt	r5, #0
 800bdc0:	2501      	movle	r5, #1
 800bdc2:	2b03      	cmp	r3, #3
 800bdc4:	d866      	bhi.n	800be94 <_dtoa_r+0x2dc>
 800bdc6:	e8df f003 	tbb	[pc, r3]
 800bdca:	5755      	.short	0x5755
 800bdcc:	4909      	.short	0x4909
 800bdce:	2300      	movs	r3, #0
 800bdd0:	ebaa 0a0b 	sub.w	sl, sl, fp
 800bdd4:	f1cb 0800 	rsb	r8, fp, #0
 800bdd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdda:	e7e5      	b.n	800bda8 <_dtoa_r+0x1f0>
 800bddc:	2301      	movs	r3, #1
 800bdde:	9309      	str	r3, [sp, #36]	; 0x24
 800bde0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	dd59      	ble.n	800be9a <_dtoa_r+0x2e2>
 800bde6:	9306      	str	r3, [sp, #24]
 800bde8:	4699      	mov	r9, r3
 800bdea:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bdec:	2200      	movs	r2, #0
 800bdee:	6072      	str	r2, [r6, #4]
 800bdf0:	2204      	movs	r2, #4
 800bdf2:	f102 0014 	add.w	r0, r2, #20
 800bdf6:	4298      	cmp	r0, r3
 800bdf8:	6871      	ldr	r1, [r6, #4]
 800bdfa:	d953      	bls.n	800bea4 <_dtoa_r+0x2ec>
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f000 fc37 	bl	800c670 <_Balloc>
 800be02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be04:	6030      	str	r0, [r6, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	9304      	str	r3, [sp, #16]
 800be0a:	f1b9 0f0e 	cmp.w	r9, #14
 800be0e:	f200 80c2 	bhi.w	800bf96 <_dtoa_r+0x3de>
 800be12:	2d00      	cmp	r5, #0
 800be14:	f000 80bf 	beq.w	800bf96 <_dtoa_r+0x3de>
 800be18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be1c:	f1bb 0f00 	cmp.w	fp, #0
 800be20:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800be24:	f340 80e6 	ble.w	800bff4 <_dtoa_r+0x43c>
 800be28:	4a2b      	ldr	r2, [pc, #172]	; (800bed8 <_dtoa_r+0x320>)
 800be2a:	f00b 030f 	and.w	r3, fp, #15
 800be2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800be32:	ed93 7b00 	vldr	d7, [r3]
 800be36:	ea4f 132b 	mov.w	r3, fp, asr #4
 800be3a:	06da      	lsls	r2, r3, #27
 800be3c:	f140 80d8 	bpl.w	800bff0 <_dtoa_r+0x438>
 800be40:	4a26      	ldr	r2, [pc, #152]	; (800bedc <_dtoa_r+0x324>)
 800be42:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800be46:	ed92 6b08 	vldr	d6, [r2, #32]
 800be4a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800be4e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800be52:	f003 030f 	and.w	r3, r3, #15
 800be56:	2203      	movs	r2, #3
 800be58:	4920      	ldr	r1, [pc, #128]	; (800bedc <_dtoa_r+0x324>)
 800be5a:	e04a      	b.n	800bef2 <_dtoa_r+0x33a>
 800be5c:	2301      	movs	r3, #1
 800be5e:	9309      	str	r3, [sp, #36]	; 0x24
 800be60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be62:	445b      	add	r3, fp
 800be64:	f103 0901 	add.w	r9, r3, #1
 800be68:	9306      	str	r3, [sp, #24]
 800be6a:	464b      	mov	r3, r9
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	bfb8      	it	lt
 800be70:	2301      	movlt	r3, #1
 800be72:	e7ba      	b.n	800bdea <_dtoa_r+0x232>
 800be74:	2300      	movs	r3, #0
 800be76:	e7b2      	b.n	800bdde <_dtoa_r+0x226>
 800be78:	2300      	movs	r3, #0
 800be7a:	e7f0      	b.n	800be5e <_dtoa_r+0x2a6>
 800be7c:	2501      	movs	r5, #1
 800be7e:	2300      	movs	r3, #0
 800be80:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800be84:	f04f 33ff 	mov.w	r3, #4294967295
 800be88:	9306      	str	r3, [sp, #24]
 800be8a:	4699      	mov	r9, r3
 800be8c:	2200      	movs	r2, #0
 800be8e:	2312      	movs	r3, #18
 800be90:	920a      	str	r2, [sp, #40]	; 0x28
 800be92:	e7aa      	b.n	800bdea <_dtoa_r+0x232>
 800be94:	2301      	movs	r3, #1
 800be96:	9309      	str	r3, [sp, #36]	; 0x24
 800be98:	e7f4      	b.n	800be84 <_dtoa_r+0x2cc>
 800be9a:	2301      	movs	r3, #1
 800be9c:	9306      	str	r3, [sp, #24]
 800be9e:	4699      	mov	r9, r3
 800bea0:	461a      	mov	r2, r3
 800bea2:	e7f5      	b.n	800be90 <_dtoa_r+0x2d8>
 800bea4:	3101      	adds	r1, #1
 800bea6:	6071      	str	r1, [r6, #4]
 800bea8:	0052      	lsls	r2, r2, #1
 800beaa:	e7a2      	b.n	800bdf2 <_dtoa_r+0x23a>
 800beac:	f3af 8000 	nop.w
 800beb0:	636f4361 	.word	0x636f4361
 800beb4:	3fd287a7 	.word	0x3fd287a7
 800beb8:	8b60c8b3 	.word	0x8b60c8b3
 800bebc:	3fc68a28 	.word	0x3fc68a28
 800bec0:	509f79fb 	.word	0x509f79fb
 800bec4:	3fd34413 	.word	0x3fd34413
 800bec8:	7ff00000 	.word	0x7ff00000
 800becc:	0800cdc7 	.word	0x0800cdc7
 800bed0:	0800cdbe 	.word	0x0800cdbe
 800bed4:	0800cdbd 	.word	0x0800cdbd
 800bed8:	0800cdf8 	.word	0x0800cdf8
 800bedc:	0800cdd0 	.word	0x0800cdd0
 800bee0:	07de      	lsls	r6, r3, #31
 800bee2:	d504      	bpl.n	800beee <_dtoa_r+0x336>
 800bee4:	ed91 6b00 	vldr	d6, [r1]
 800bee8:	3201      	adds	r2, #1
 800beea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800beee:	105b      	asrs	r3, r3, #1
 800bef0:	3108      	adds	r1, #8
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1f4      	bne.n	800bee0 <_dtoa_r+0x328>
 800bef6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800befa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800befe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f000 80a7 	beq.w	800c058 <_dtoa_r+0x4a0>
 800bf0a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bf0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1a:	f140 809d 	bpl.w	800c058 <_dtoa_r+0x4a0>
 800bf1e:	f1b9 0f00 	cmp.w	r9, #0
 800bf22:	f000 8099 	beq.w	800c058 <_dtoa_r+0x4a0>
 800bf26:	9b06      	ldr	r3, [sp, #24]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	dd30      	ble.n	800bf8e <_dtoa_r+0x3d6>
 800bf2c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800bf30:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf34:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf38:	9d06      	ldr	r5, [sp, #24]
 800bf3a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bf3e:	3201      	adds	r2, #1
 800bf40:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bf44:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800bf48:	ee07 2a90 	vmov	s15, r2
 800bf4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bf50:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bf54:	ed8d 5b02 	vstr	d5, [sp, #8]
 800bf58:	9a03      	ldr	r2, [sp, #12]
 800bf5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf5e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800bf62:	2d00      	cmp	r5, #0
 800bf64:	d17b      	bne.n	800c05e <_dtoa_r+0x4a6>
 800bf66:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bf6a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bf6e:	ec41 0b17 	vmov	d7, r0, r1
 800bf72:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf7a:	f300 8253 	bgt.w	800c424 <_dtoa_r+0x86c>
 800bf7e:	eeb1 7b47 	vneg.f64	d7, d7
 800bf82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf8a:	f100 8249 	bmi.w	800c420 <_dtoa_r+0x868>
 800bf8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bf92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f2c0 8119 	blt.w	800c1d0 <_dtoa_r+0x618>
 800bf9e:	f1bb 0f0e 	cmp.w	fp, #14
 800bfa2:	f300 8115 	bgt.w	800c1d0 <_dtoa_r+0x618>
 800bfa6:	4bc3      	ldr	r3, [pc, #780]	; (800c2b4 <_dtoa_r+0x6fc>)
 800bfa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bfac:	ed93 6b00 	vldr	d6, [r3]
 800bfb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f280 80ba 	bge.w	800c12c <_dtoa_r+0x574>
 800bfb8:	f1b9 0f00 	cmp.w	r9, #0
 800bfbc:	f300 80b6 	bgt.w	800c12c <_dtoa_r+0x574>
 800bfc0:	f040 822d 	bne.w	800c41e <_dtoa_r+0x866>
 800bfc4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bfc8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bfcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bfd0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd8:	464d      	mov	r5, r9
 800bfda:	464f      	mov	r7, r9
 800bfdc:	f280 8204 	bge.w	800c3e8 <_dtoa_r+0x830>
 800bfe0:	9b04      	ldr	r3, [sp, #16]
 800bfe2:	9a04      	ldr	r2, [sp, #16]
 800bfe4:	1c5e      	adds	r6, r3, #1
 800bfe6:	2331      	movs	r3, #49	; 0x31
 800bfe8:	7013      	strb	r3, [r2, #0]
 800bfea:	f10b 0b01 	add.w	fp, fp, #1
 800bfee:	e1ff      	b.n	800c3f0 <_dtoa_r+0x838>
 800bff0:	2202      	movs	r2, #2
 800bff2:	e731      	b.n	800be58 <_dtoa_r+0x2a0>
 800bff4:	d02e      	beq.n	800c054 <_dtoa_r+0x49c>
 800bff6:	f1cb 0300 	rsb	r3, fp, #0
 800bffa:	4aae      	ldr	r2, [pc, #696]	; (800c2b4 <_dtoa_r+0x6fc>)
 800bffc:	f003 010f 	and.w	r1, r3, #15
 800c000:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c004:	ed92 7b00 	vldr	d7, [r2]
 800c008:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800c00c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c010:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c014:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800c018:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c01c:	49a6      	ldr	r1, [pc, #664]	; (800c2b8 <_dtoa_r+0x700>)
 800c01e:	111b      	asrs	r3, r3, #4
 800c020:	2000      	movs	r0, #0
 800c022:	2202      	movs	r2, #2
 800c024:	b93b      	cbnz	r3, 800c036 <_dtoa_r+0x47e>
 800c026:	2800      	cmp	r0, #0
 800c028:	f43f af6b 	beq.w	800bf02 <_dtoa_r+0x34a>
 800c02c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c034:	e765      	b.n	800bf02 <_dtoa_r+0x34a>
 800c036:	07dd      	lsls	r5, r3, #31
 800c038:	d509      	bpl.n	800c04e <_dtoa_r+0x496>
 800c03a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800c03e:	ed91 7b00 	vldr	d7, [r1]
 800c042:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c046:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c04a:	3201      	adds	r2, #1
 800c04c:	2001      	movs	r0, #1
 800c04e:	105b      	asrs	r3, r3, #1
 800c050:	3108      	adds	r1, #8
 800c052:	e7e7      	b.n	800c024 <_dtoa_r+0x46c>
 800c054:	2202      	movs	r2, #2
 800c056:	e754      	b.n	800bf02 <_dtoa_r+0x34a>
 800c058:	465b      	mov	r3, fp
 800c05a:	464d      	mov	r5, r9
 800c05c:	e770      	b.n	800bf40 <_dtoa_r+0x388>
 800c05e:	4a95      	ldr	r2, [pc, #596]	; (800c2b4 <_dtoa_r+0x6fc>)
 800c060:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800c064:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c06a:	ec41 0b17 	vmov	d7, r0, r1
 800c06e:	b35a      	cbz	r2, 800c0c8 <_dtoa_r+0x510>
 800c070:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c074:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c078:	9e04      	ldr	r6, [sp, #16]
 800c07a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c07e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c082:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c086:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c08a:	ee14 2a90 	vmov	r2, s9
 800c08e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c092:	3230      	adds	r2, #48	; 0x30
 800c094:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c098:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a0:	f806 2b01 	strb.w	r2, [r6], #1
 800c0a4:	d43b      	bmi.n	800c11e <_dtoa_r+0x566>
 800c0a6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c0aa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b2:	d472      	bmi.n	800c19a <_dtoa_r+0x5e2>
 800c0b4:	9a04      	ldr	r2, [sp, #16]
 800c0b6:	1ab2      	subs	r2, r6, r2
 800c0b8:	4295      	cmp	r5, r2
 800c0ba:	f77f af68 	ble.w	800bf8e <_dtoa_r+0x3d6>
 800c0be:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c0c2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c0c6:	e7de      	b.n	800c086 <_dtoa_r+0x4ce>
 800c0c8:	9a04      	ldr	r2, [sp, #16]
 800c0ca:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c0ce:	1956      	adds	r6, r2, r5
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c0d6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c0da:	ee14 2a90 	vmov	r2, s9
 800c0de:	3230      	adds	r2, #48	; 0x30
 800c0e0:	f801 2b01 	strb.w	r2, [r1], #1
 800c0e4:	42b1      	cmp	r1, r6
 800c0e6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c0ea:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c0ee:	d11a      	bne.n	800c126 <_dtoa_r+0x56e>
 800c0f0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c0f4:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c0f8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c100:	dc4b      	bgt.n	800c19a <_dtoa_r+0x5e2>
 800c102:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c106:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c10e:	f57f af3e 	bpl.w	800bf8e <_dtoa_r+0x3d6>
 800c112:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c116:	2a30      	cmp	r2, #48	; 0x30
 800c118:	f106 31ff 	add.w	r1, r6, #4294967295
 800c11c:	d001      	beq.n	800c122 <_dtoa_r+0x56a>
 800c11e:	469b      	mov	fp, r3
 800c120:	e02a      	b.n	800c178 <_dtoa_r+0x5c0>
 800c122:	460e      	mov	r6, r1
 800c124:	e7f5      	b.n	800c112 <_dtoa_r+0x55a>
 800c126:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c12a:	e7d4      	b.n	800c0d6 <_dtoa_r+0x51e>
 800c12c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c130:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c134:	9e04      	ldr	r6, [sp, #16]
 800c136:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c13a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c13e:	ee15 3a10 	vmov	r3, s10
 800c142:	3330      	adds	r3, #48	; 0x30
 800c144:	f806 3b01 	strb.w	r3, [r6], #1
 800c148:	9b04      	ldr	r3, [sp, #16]
 800c14a:	1af3      	subs	r3, r6, r3
 800c14c:	4599      	cmp	r9, r3
 800c14e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c152:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c156:	d133      	bne.n	800c1c0 <_dtoa_r+0x608>
 800c158:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c15c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c164:	dc18      	bgt.n	800c198 <_dtoa_r+0x5e0>
 800c166:	eeb4 7b46 	vcmp.f64	d7, d6
 800c16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c16e:	d103      	bne.n	800c178 <_dtoa_r+0x5c0>
 800c170:	ee15 3a10 	vmov	r3, s10
 800c174:	07db      	lsls	r3, r3, #31
 800c176:	d40f      	bmi.n	800c198 <_dtoa_r+0x5e0>
 800c178:	9901      	ldr	r1, [sp, #4]
 800c17a:	4620      	mov	r0, r4
 800c17c:	f000 faac 	bl	800c6d8 <_Bfree>
 800c180:	2300      	movs	r3, #0
 800c182:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c184:	7033      	strb	r3, [r6, #0]
 800c186:	f10b 0301 	add.w	r3, fp, #1
 800c18a:	6013      	str	r3, [r2, #0]
 800c18c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f43f ad5b 	beq.w	800bc4a <_dtoa_r+0x92>
 800c194:	601e      	str	r6, [r3, #0]
 800c196:	e558      	b.n	800bc4a <_dtoa_r+0x92>
 800c198:	465b      	mov	r3, fp
 800c19a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c19e:	2939      	cmp	r1, #57	; 0x39
 800c1a0:	f106 32ff 	add.w	r2, r6, #4294967295
 800c1a4:	d106      	bne.n	800c1b4 <_dtoa_r+0x5fc>
 800c1a6:	9904      	ldr	r1, [sp, #16]
 800c1a8:	4291      	cmp	r1, r2
 800c1aa:	d107      	bne.n	800c1bc <_dtoa_r+0x604>
 800c1ac:	2230      	movs	r2, #48	; 0x30
 800c1ae:	700a      	strb	r2, [r1, #0]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	460a      	mov	r2, r1
 800c1b4:	7811      	ldrb	r1, [r2, #0]
 800c1b6:	3101      	adds	r1, #1
 800c1b8:	7011      	strb	r1, [r2, #0]
 800c1ba:	e7b0      	b.n	800c11e <_dtoa_r+0x566>
 800c1bc:	4616      	mov	r6, r2
 800c1be:	e7ec      	b.n	800c19a <_dtoa_r+0x5e2>
 800c1c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c1c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1cc:	d1b3      	bne.n	800c136 <_dtoa_r+0x57e>
 800c1ce:	e7d3      	b.n	800c178 <_dtoa_r+0x5c0>
 800c1d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1d2:	2a00      	cmp	r2, #0
 800c1d4:	f000 808d 	beq.w	800c2f2 <_dtoa_r+0x73a>
 800c1d8:	9a08      	ldr	r2, [sp, #32]
 800c1da:	2a01      	cmp	r2, #1
 800c1dc:	dc72      	bgt.n	800c2c4 <_dtoa_r+0x70c>
 800c1de:	2f00      	cmp	r7, #0
 800c1e0:	d06c      	beq.n	800c2bc <_dtoa_r+0x704>
 800c1e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c1e6:	4645      	mov	r5, r8
 800c1e8:	4656      	mov	r6, sl
 800c1ea:	9a07      	ldr	r2, [sp, #28]
 800c1ec:	2101      	movs	r1, #1
 800c1ee:	441a      	add	r2, r3
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	449a      	add	sl, r3
 800c1f4:	9207      	str	r2, [sp, #28]
 800c1f6:	f000 fb0f 	bl	800c818 <__i2b>
 800c1fa:	4607      	mov	r7, r0
 800c1fc:	2e00      	cmp	r6, #0
 800c1fe:	dd0b      	ble.n	800c218 <_dtoa_r+0x660>
 800c200:	9b07      	ldr	r3, [sp, #28]
 800c202:	2b00      	cmp	r3, #0
 800c204:	dd08      	ble.n	800c218 <_dtoa_r+0x660>
 800c206:	42b3      	cmp	r3, r6
 800c208:	9a07      	ldr	r2, [sp, #28]
 800c20a:	bfa8      	it	ge
 800c20c:	4633      	movge	r3, r6
 800c20e:	ebaa 0a03 	sub.w	sl, sl, r3
 800c212:	1af6      	subs	r6, r6, r3
 800c214:	1ad3      	subs	r3, r2, r3
 800c216:	9307      	str	r3, [sp, #28]
 800c218:	f1b8 0f00 	cmp.w	r8, #0
 800c21c:	d01d      	beq.n	800c25a <_dtoa_r+0x6a2>
 800c21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c220:	2b00      	cmp	r3, #0
 800c222:	d06a      	beq.n	800c2fa <_dtoa_r+0x742>
 800c224:	b18d      	cbz	r5, 800c24a <_dtoa_r+0x692>
 800c226:	4639      	mov	r1, r7
 800c228:	462a      	mov	r2, r5
 800c22a:	4620      	mov	r0, r4
 800c22c:	f000 fb94 	bl	800c958 <__pow5mult>
 800c230:	9a01      	ldr	r2, [sp, #4]
 800c232:	4601      	mov	r1, r0
 800c234:	4607      	mov	r7, r0
 800c236:	4620      	mov	r0, r4
 800c238:	f000 faf7 	bl	800c82a <__multiply>
 800c23c:	9901      	ldr	r1, [sp, #4]
 800c23e:	900c      	str	r0, [sp, #48]	; 0x30
 800c240:	4620      	mov	r0, r4
 800c242:	f000 fa49 	bl	800c6d8 <_Bfree>
 800c246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	ebb8 0205 	subs.w	r2, r8, r5
 800c24e:	d004      	beq.n	800c25a <_dtoa_r+0x6a2>
 800c250:	9901      	ldr	r1, [sp, #4]
 800c252:	4620      	mov	r0, r4
 800c254:	f000 fb80 	bl	800c958 <__pow5mult>
 800c258:	9001      	str	r0, [sp, #4]
 800c25a:	2101      	movs	r1, #1
 800c25c:	4620      	mov	r0, r4
 800c25e:	f000 fadb 	bl	800c818 <__i2b>
 800c262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c264:	4605      	mov	r5, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 81ca 	beq.w	800c600 <_dtoa_r+0xa48>
 800c26c:	461a      	mov	r2, r3
 800c26e:	4601      	mov	r1, r0
 800c270:	4620      	mov	r0, r4
 800c272:	f000 fb71 	bl	800c958 <__pow5mult>
 800c276:	9b08      	ldr	r3, [sp, #32]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	4605      	mov	r5, r0
 800c27c:	dc44      	bgt.n	800c308 <_dtoa_r+0x750>
 800c27e:	9b02      	ldr	r3, [sp, #8]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d13c      	bne.n	800c2fe <_dtoa_r+0x746>
 800c284:	9b03      	ldr	r3, [sp, #12]
 800c286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d137      	bne.n	800c2fe <_dtoa_r+0x746>
 800c28e:	9b03      	ldr	r3, [sp, #12]
 800c290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c294:	0d1b      	lsrs	r3, r3, #20
 800c296:	051b      	lsls	r3, r3, #20
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d033      	beq.n	800c304 <_dtoa_r+0x74c>
 800c29c:	9b07      	ldr	r3, [sp, #28]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	f10a 0a01 	add.w	sl, sl, #1
 800c2a4:	9307      	str	r3, [sp, #28]
 800c2a6:	f04f 0801 	mov.w	r8, #1
 800c2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2ac:	bb73      	cbnz	r3, 800c30c <_dtoa_r+0x754>
 800c2ae:	2001      	movs	r0, #1
 800c2b0:	e034      	b.n	800c31c <_dtoa_r+0x764>
 800c2b2:	bf00      	nop
 800c2b4:	0800cdf8 	.word	0x0800cdf8
 800c2b8:	0800cdd0 	.word	0x0800cdd0
 800c2bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c2c2:	e790      	b.n	800c1e6 <_dtoa_r+0x62e>
 800c2c4:	f109 35ff 	add.w	r5, r9, #4294967295
 800c2c8:	45a8      	cmp	r8, r5
 800c2ca:	bfbf      	itttt	lt
 800c2cc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800c2ce:	eba5 0808 	sublt.w	r8, r5, r8
 800c2d2:	4443      	addlt	r3, r8
 800c2d4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800c2d6:	bfb6      	itet	lt
 800c2d8:	46a8      	movlt	r8, r5
 800c2da:	eba8 0505 	subge.w	r5, r8, r5
 800c2de:	2500      	movlt	r5, #0
 800c2e0:	f1b9 0f00 	cmp.w	r9, #0
 800c2e4:	bfb9      	ittee	lt
 800c2e6:	ebaa 0609 	sublt.w	r6, sl, r9
 800c2ea:	2300      	movlt	r3, #0
 800c2ec:	4656      	movge	r6, sl
 800c2ee:	464b      	movge	r3, r9
 800c2f0:	e77b      	b.n	800c1ea <_dtoa_r+0x632>
 800c2f2:	4645      	mov	r5, r8
 800c2f4:	4656      	mov	r6, sl
 800c2f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c2f8:	e780      	b.n	800c1fc <_dtoa_r+0x644>
 800c2fa:	4642      	mov	r2, r8
 800c2fc:	e7a8      	b.n	800c250 <_dtoa_r+0x698>
 800c2fe:	f04f 0800 	mov.w	r8, #0
 800c302:	e7d2      	b.n	800c2aa <_dtoa_r+0x6f2>
 800c304:	4698      	mov	r8, r3
 800c306:	e7d0      	b.n	800c2aa <_dtoa_r+0x6f2>
 800c308:	f04f 0800 	mov.w	r8, #0
 800c30c:	692b      	ldr	r3, [r5, #16]
 800c30e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c312:	6918      	ldr	r0, [r3, #16]
 800c314:	f000 fa32 	bl	800c77c <__hi0bits>
 800c318:	f1c0 0020 	rsb	r0, r0, #32
 800c31c:	9b07      	ldr	r3, [sp, #28]
 800c31e:	4418      	add	r0, r3
 800c320:	f010 001f 	ands.w	r0, r0, #31
 800c324:	d047      	beq.n	800c3b6 <_dtoa_r+0x7fe>
 800c326:	f1c0 0320 	rsb	r3, r0, #32
 800c32a:	2b04      	cmp	r3, #4
 800c32c:	dd3b      	ble.n	800c3a6 <_dtoa_r+0x7ee>
 800c32e:	9b07      	ldr	r3, [sp, #28]
 800c330:	f1c0 001c 	rsb	r0, r0, #28
 800c334:	4482      	add	sl, r0
 800c336:	4406      	add	r6, r0
 800c338:	4403      	add	r3, r0
 800c33a:	9307      	str	r3, [sp, #28]
 800c33c:	f1ba 0f00 	cmp.w	sl, #0
 800c340:	dd05      	ble.n	800c34e <_dtoa_r+0x796>
 800c342:	4652      	mov	r2, sl
 800c344:	9901      	ldr	r1, [sp, #4]
 800c346:	4620      	mov	r0, r4
 800c348:	f000 fb54 	bl	800c9f4 <__lshift>
 800c34c:	9001      	str	r0, [sp, #4]
 800c34e:	9b07      	ldr	r3, [sp, #28]
 800c350:	2b00      	cmp	r3, #0
 800c352:	dd05      	ble.n	800c360 <_dtoa_r+0x7a8>
 800c354:	4629      	mov	r1, r5
 800c356:	461a      	mov	r2, r3
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 fb4b 	bl	800c9f4 <__lshift>
 800c35e:	4605      	mov	r5, r0
 800c360:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c362:	b353      	cbz	r3, 800c3ba <_dtoa_r+0x802>
 800c364:	4629      	mov	r1, r5
 800c366:	9801      	ldr	r0, [sp, #4]
 800c368:	f000 fb98 	bl	800ca9c <__mcmp>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	da24      	bge.n	800c3ba <_dtoa_r+0x802>
 800c370:	2300      	movs	r3, #0
 800c372:	220a      	movs	r2, #10
 800c374:	9901      	ldr	r1, [sp, #4]
 800c376:	4620      	mov	r0, r4
 800c378:	f000 f9c5 	bl	800c706 <__multadd>
 800c37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c37e:	9001      	str	r0, [sp, #4]
 800c380:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c384:	2b00      	cmp	r3, #0
 800c386:	f000 8142 	beq.w	800c60e <_dtoa_r+0xa56>
 800c38a:	2300      	movs	r3, #0
 800c38c:	4639      	mov	r1, r7
 800c38e:	220a      	movs	r2, #10
 800c390:	4620      	mov	r0, r4
 800c392:	f000 f9b8 	bl	800c706 <__multadd>
 800c396:	9b06      	ldr	r3, [sp, #24]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	4607      	mov	r7, r0
 800c39c:	dc4b      	bgt.n	800c436 <_dtoa_r+0x87e>
 800c39e:	9b08      	ldr	r3, [sp, #32]
 800c3a0:	2b02      	cmp	r3, #2
 800c3a2:	dd48      	ble.n	800c436 <_dtoa_r+0x87e>
 800c3a4:	e011      	b.n	800c3ca <_dtoa_r+0x812>
 800c3a6:	d0c9      	beq.n	800c33c <_dtoa_r+0x784>
 800c3a8:	9a07      	ldr	r2, [sp, #28]
 800c3aa:	331c      	adds	r3, #28
 800c3ac:	441a      	add	r2, r3
 800c3ae:	449a      	add	sl, r3
 800c3b0:	441e      	add	r6, r3
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	e7c1      	b.n	800c33a <_dtoa_r+0x782>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	e7f6      	b.n	800c3a8 <_dtoa_r+0x7f0>
 800c3ba:	f1b9 0f00 	cmp.w	r9, #0
 800c3be:	dc34      	bgt.n	800c42a <_dtoa_r+0x872>
 800c3c0:	9b08      	ldr	r3, [sp, #32]
 800c3c2:	2b02      	cmp	r3, #2
 800c3c4:	dd31      	ble.n	800c42a <_dtoa_r+0x872>
 800c3c6:	f8cd 9018 	str.w	r9, [sp, #24]
 800c3ca:	9b06      	ldr	r3, [sp, #24]
 800c3cc:	b963      	cbnz	r3, 800c3e8 <_dtoa_r+0x830>
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	2205      	movs	r2, #5
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f000 f997 	bl	800c706 <__multadd>
 800c3d8:	4601      	mov	r1, r0
 800c3da:	4605      	mov	r5, r0
 800c3dc:	9801      	ldr	r0, [sp, #4]
 800c3de:	f000 fb5d 	bl	800ca9c <__mcmp>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	f73f adfc 	bgt.w	800bfe0 <_dtoa_r+0x428>
 800c3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ea:	9e04      	ldr	r6, [sp, #16]
 800c3ec:	ea6f 0b03 	mvn.w	fp, r3
 800c3f0:	f04f 0900 	mov.w	r9, #0
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 f96e 	bl	800c6d8 <_Bfree>
 800c3fc:	2f00      	cmp	r7, #0
 800c3fe:	f43f aebb 	beq.w	800c178 <_dtoa_r+0x5c0>
 800c402:	f1b9 0f00 	cmp.w	r9, #0
 800c406:	d005      	beq.n	800c414 <_dtoa_r+0x85c>
 800c408:	45b9      	cmp	r9, r7
 800c40a:	d003      	beq.n	800c414 <_dtoa_r+0x85c>
 800c40c:	4649      	mov	r1, r9
 800c40e:	4620      	mov	r0, r4
 800c410:	f000 f962 	bl	800c6d8 <_Bfree>
 800c414:	4639      	mov	r1, r7
 800c416:	4620      	mov	r0, r4
 800c418:	f000 f95e 	bl	800c6d8 <_Bfree>
 800c41c:	e6ac      	b.n	800c178 <_dtoa_r+0x5c0>
 800c41e:	2500      	movs	r5, #0
 800c420:	462f      	mov	r7, r5
 800c422:	e7e1      	b.n	800c3e8 <_dtoa_r+0x830>
 800c424:	469b      	mov	fp, r3
 800c426:	462f      	mov	r7, r5
 800c428:	e5da      	b.n	800bfe0 <_dtoa_r+0x428>
 800c42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c42c:	f8cd 9018 	str.w	r9, [sp, #24]
 800c430:	2b00      	cmp	r3, #0
 800c432:	f000 80f3 	beq.w	800c61c <_dtoa_r+0xa64>
 800c436:	2e00      	cmp	r6, #0
 800c438:	dd05      	ble.n	800c446 <_dtoa_r+0x88e>
 800c43a:	4639      	mov	r1, r7
 800c43c:	4632      	mov	r2, r6
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 fad8 	bl	800c9f4 <__lshift>
 800c444:	4607      	mov	r7, r0
 800c446:	f1b8 0f00 	cmp.w	r8, #0
 800c44a:	d04c      	beq.n	800c4e6 <_dtoa_r+0x92e>
 800c44c:	6879      	ldr	r1, [r7, #4]
 800c44e:	4620      	mov	r0, r4
 800c450:	f000 f90e 	bl	800c670 <_Balloc>
 800c454:	693a      	ldr	r2, [r7, #16]
 800c456:	3202      	adds	r2, #2
 800c458:	4606      	mov	r6, r0
 800c45a:	0092      	lsls	r2, r2, #2
 800c45c:	f107 010c 	add.w	r1, r7, #12
 800c460:	300c      	adds	r0, #12
 800c462:	f7fe ff25 	bl	800b2b0 <memcpy>
 800c466:	2201      	movs	r2, #1
 800c468:	4631      	mov	r1, r6
 800c46a:	4620      	mov	r0, r4
 800c46c:	f000 fac2 	bl	800c9f4 <__lshift>
 800c470:	9b02      	ldr	r3, [sp, #8]
 800c472:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	46b9      	mov	r9, r7
 800c47c:	9307      	str	r3, [sp, #28]
 800c47e:	4607      	mov	r7, r0
 800c480:	4629      	mov	r1, r5
 800c482:	9801      	ldr	r0, [sp, #4]
 800c484:	f7ff fb0a 	bl	800ba9c <quorem>
 800c488:	4649      	mov	r1, r9
 800c48a:	4606      	mov	r6, r0
 800c48c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c490:	9801      	ldr	r0, [sp, #4]
 800c492:	f000 fb03 	bl	800ca9c <__mcmp>
 800c496:	463a      	mov	r2, r7
 800c498:	9002      	str	r0, [sp, #8]
 800c49a:	4629      	mov	r1, r5
 800c49c:	4620      	mov	r0, r4
 800c49e:	f000 fb17 	bl	800cad0 <__mdiff>
 800c4a2:	68c3      	ldr	r3, [r0, #12]
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	bb03      	cbnz	r3, 800c4ea <_dtoa_r+0x932>
 800c4a8:	4601      	mov	r1, r0
 800c4aa:	9009      	str	r0, [sp, #36]	; 0x24
 800c4ac:	9801      	ldr	r0, [sp, #4]
 800c4ae:	f000 faf5 	bl	800ca9c <__mcmp>
 800c4b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c4bc:	f000 f90c 	bl	800c6d8 <_Bfree>
 800c4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4c2:	b9a3      	cbnz	r3, 800c4ee <_dtoa_r+0x936>
 800c4c4:	9a08      	ldr	r2, [sp, #32]
 800c4c6:	b992      	cbnz	r2, 800c4ee <_dtoa_r+0x936>
 800c4c8:	9a07      	ldr	r2, [sp, #28]
 800c4ca:	b982      	cbnz	r2, 800c4ee <_dtoa_r+0x936>
 800c4cc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c4d0:	d029      	beq.n	800c526 <_dtoa_r+0x96e>
 800c4d2:	9b02      	ldr	r3, [sp, #8]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	dd01      	ble.n	800c4dc <_dtoa_r+0x924>
 800c4d8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800c4dc:	f10a 0601 	add.w	r6, sl, #1
 800c4e0:	f88a 8000 	strb.w	r8, [sl]
 800c4e4:	e786      	b.n	800c3f4 <_dtoa_r+0x83c>
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	e7c2      	b.n	800c470 <_dtoa_r+0x8b8>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e7e3      	b.n	800c4b6 <_dtoa_r+0x8fe>
 800c4ee:	9a02      	ldr	r2, [sp, #8]
 800c4f0:	2a00      	cmp	r2, #0
 800c4f2:	db04      	blt.n	800c4fe <_dtoa_r+0x946>
 800c4f4:	d124      	bne.n	800c540 <_dtoa_r+0x988>
 800c4f6:	9a08      	ldr	r2, [sp, #32]
 800c4f8:	bb12      	cbnz	r2, 800c540 <_dtoa_r+0x988>
 800c4fa:	9a07      	ldr	r2, [sp, #28]
 800c4fc:	bb02      	cbnz	r2, 800c540 <_dtoa_r+0x988>
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	ddec      	ble.n	800c4dc <_dtoa_r+0x924>
 800c502:	2201      	movs	r2, #1
 800c504:	9901      	ldr	r1, [sp, #4]
 800c506:	4620      	mov	r0, r4
 800c508:	f000 fa74 	bl	800c9f4 <__lshift>
 800c50c:	4629      	mov	r1, r5
 800c50e:	9001      	str	r0, [sp, #4]
 800c510:	f000 fac4 	bl	800ca9c <__mcmp>
 800c514:	2800      	cmp	r0, #0
 800c516:	dc03      	bgt.n	800c520 <_dtoa_r+0x968>
 800c518:	d1e0      	bne.n	800c4dc <_dtoa_r+0x924>
 800c51a:	f018 0f01 	tst.w	r8, #1
 800c51e:	d0dd      	beq.n	800c4dc <_dtoa_r+0x924>
 800c520:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c524:	d1d8      	bne.n	800c4d8 <_dtoa_r+0x920>
 800c526:	2339      	movs	r3, #57	; 0x39
 800c528:	f10a 0601 	add.w	r6, sl, #1
 800c52c:	f88a 3000 	strb.w	r3, [sl]
 800c530:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c534:	2b39      	cmp	r3, #57	; 0x39
 800c536:	f106 32ff 	add.w	r2, r6, #4294967295
 800c53a:	d04c      	beq.n	800c5d6 <_dtoa_r+0xa1e>
 800c53c:	3301      	adds	r3, #1
 800c53e:	e051      	b.n	800c5e4 <_dtoa_r+0xa2c>
 800c540:	2b00      	cmp	r3, #0
 800c542:	f10a 0601 	add.w	r6, sl, #1
 800c546:	dd05      	ble.n	800c554 <_dtoa_r+0x99c>
 800c548:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c54c:	d0eb      	beq.n	800c526 <_dtoa_r+0x96e>
 800c54e:	f108 0801 	add.w	r8, r8, #1
 800c552:	e7c5      	b.n	800c4e0 <_dtoa_r+0x928>
 800c554:	9b04      	ldr	r3, [sp, #16]
 800c556:	9a06      	ldr	r2, [sp, #24]
 800c558:	f806 8c01 	strb.w	r8, [r6, #-1]
 800c55c:	1af3      	subs	r3, r6, r3
 800c55e:	4293      	cmp	r3, r2
 800c560:	d021      	beq.n	800c5a6 <_dtoa_r+0x9ee>
 800c562:	2300      	movs	r3, #0
 800c564:	220a      	movs	r2, #10
 800c566:	9901      	ldr	r1, [sp, #4]
 800c568:	4620      	mov	r0, r4
 800c56a:	f000 f8cc 	bl	800c706 <__multadd>
 800c56e:	45b9      	cmp	r9, r7
 800c570:	9001      	str	r0, [sp, #4]
 800c572:	f04f 0300 	mov.w	r3, #0
 800c576:	f04f 020a 	mov.w	r2, #10
 800c57a:	4649      	mov	r1, r9
 800c57c:	4620      	mov	r0, r4
 800c57e:	d105      	bne.n	800c58c <_dtoa_r+0x9d4>
 800c580:	f000 f8c1 	bl	800c706 <__multadd>
 800c584:	4681      	mov	r9, r0
 800c586:	4607      	mov	r7, r0
 800c588:	46b2      	mov	sl, r6
 800c58a:	e779      	b.n	800c480 <_dtoa_r+0x8c8>
 800c58c:	f000 f8bb 	bl	800c706 <__multadd>
 800c590:	4639      	mov	r1, r7
 800c592:	4681      	mov	r9, r0
 800c594:	2300      	movs	r3, #0
 800c596:	220a      	movs	r2, #10
 800c598:	4620      	mov	r0, r4
 800c59a:	f000 f8b4 	bl	800c706 <__multadd>
 800c59e:	4607      	mov	r7, r0
 800c5a0:	e7f2      	b.n	800c588 <_dtoa_r+0x9d0>
 800c5a2:	f04f 0900 	mov.w	r9, #0
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	9901      	ldr	r1, [sp, #4]
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f000 fa22 	bl	800c9f4 <__lshift>
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	9001      	str	r0, [sp, #4]
 800c5b4:	f000 fa72 	bl	800ca9c <__mcmp>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	dcb9      	bgt.n	800c530 <_dtoa_r+0x978>
 800c5bc:	d102      	bne.n	800c5c4 <_dtoa_r+0xa0c>
 800c5be:	f018 0f01 	tst.w	r8, #1
 800c5c2:	d1b5      	bne.n	800c530 <_dtoa_r+0x978>
 800c5c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c5c8:	2b30      	cmp	r3, #48	; 0x30
 800c5ca:	f106 32ff 	add.w	r2, r6, #4294967295
 800c5ce:	f47f af11 	bne.w	800c3f4 <_dtoa_r+0x83c>
 800c5d2:	4616      	mov	r6, r2
 800c5d4:	e7f6      	b.n	800c5c4 <_dtoa_r+0xa0c>
 800c5d6:	9b04      	ldr	r3, [sp, #16]
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d105      	bne.n	800c5e8 <_dtoa_r+0xa30>
 800c5dc:	9a04      	ldr	r2, [sp, #16]
 800c5de:	f10b 0b01 	add.w	fp, fp, #1
 800c5e2:	2331      	movs	r3, #49	; 0x31
 800c5e4:	7013      	strb	r3, [r2, #0]
 800c5e6:	e705      	b.n	800c3f4 <_dtoa_r+0x83c>
 800c5e8:	4616      	mov	r6, r2
 800c5ea:	e7a1      	b.n	800c530 <_dtoa_r+0x978>
 800c5ec:	4b16      	ldr	r3, [pc, #88]	; (800c648 <_dtoa_r+0xa90>)
 800c5ee:	f7ff bb48 	b.w	800bc82 <_dtoa_r+0xca>
 800c5f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f47f ab23 	bne.w	800bc40 <_dtoa_r+0x88>
 800c5fa:	4b14      	ldr	r3, [pc, #80]	; (800c64c <_dtoa_r+0xa94>)
 800c5fc:	f7ff bb41 	b.w	800bc82 <_dtoa_r+0xca>
 800c600:	9b08      	ldr	r3, [sp, #32]
 800c602:	2b01      	cmp	r3, #1
 800c604:	f77f ae3b 	ble.w	800c27e <_dtoa_r+0x6c6>
 800c608:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c60c:	e64f      	b.n	800c2ae <_dtoa_r+0x6f6>
 800c60e:	9b06      	ldr	r3, [sp, #24]
 800c610:	2b00      	cmp	r3, #0
 800c612:	dc03      	bgt.n	800c61c <_dtoa_r+0xa64>
 800c614:	9b08      	ldr	r3, [sp, #32]
 800c616:	2b02      	cmp	r3, #2
 800c618:	f73f aed7 	bgt.w	800c3ca <_dtoa_r+0x812>
 800c61c:	9e04      	ldr	r6, [sp, #16]
 800c61e:	9801      	ldr	r0, [sp, #4]
 800c620:	4629      	mov	r1, r5
 800c622:	f7ff fa3b 	bl	800ba9c <quorem>
 800c626:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c62a:	f806 8b01 	strb.w	r8, [r6], #1
 800c62e:	9b04      	ldr	r3, [sp, #16]
 800c630:	9a06      	ldr	r2, [sp, #24]
 800c632:	1af3      	subs	r3, r6, r3
 800c634:	429a      	cmp	r2, r3
 800c636:	ddb4      	ble.n	800c5a2 <_dtoa_r+0x9ea>
 800c638:	2300      	movs	r3, #0
 800c63a:	220a      	movs	r2, #10
 800c63c:	9901      	ldr	r1, [sp, #4]
 800c63e:	4620      	mov	r0, r4
 800c640:	f000 f861 	bl	800c706 <__multadd>
 800c644:	9001      	str	r0, [sp, #4]
 800c646:	e7ea      	b.n	800c61e <_dtoa_r+0xa66>
 800c648:	0800cdbc 	.word	0x0800cdbc
 800c64c:	0800cdbe 	.word	0x0800cdbe

0800c650 <_localeconv_r>:
 800c650:	4b04      	ldr	r3, [pc, #16]	; (800c664 <_localeconv_r+0x14>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6a18      	ldr	r0, [r3, #32]
 800c656:	4b04      	ldr	r3, [pc, #16]	; (800c668 <_localeconv_r+0x18>)
 800c658:	2800      	cmp	r0, #0
 800c65a:	bf08      	it	eq
 800c65c:	4618      	moveq	r0, r3
 800c65e:	30f0      	adds	r0, #240	; 0xf0
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	24000010 	.word	0x24000010
 800c668:	24000074 	.word	0x24000074

0800c66c <__malloc_lock>:
 800c66c:	4770      	bx	lr

0800c66e <__malloc_unlock>:
 800c66e:	4770      	bx	lr

0800c670 <_Balloc>:
 800c670:	b570      	push	{r4, r5, r6, lr}
 800c672:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c674:	4604      	mov	r4, r0
 800c676:	460e      	mov	r6, r1
 800c678:	b93d      	cbnz	r5, 800c68a <_Balloc+0x1a>
 800c67a:	2010      	movs	r0, #16
 800c67c:	f7fe fe08 	bl	800b290 <malloc>
 800c680:	6260      	str	r0, [r4, #36]	; 0x24
 800c682:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c686:	6005      	str	r5, [r0, #0]
 800c688:	60c5      	str	r5, [r0, #12]
 800c68a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c68c:	68eb      	ldr	r3, [r5, #12]
 800c68e:	b183      	cbz	r3, 800c6b2 <_Balloc+0x42>
 800c690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c698:	b9b8      	cbnz	r0, 800c6ca <_Balloc+0x5a>
 800c69a:	2101      	movs	r1, #1
 800c69c:	fa01 f506 	lsl.w	r5, r1, r6
 800c6a0:	1d6a      	adds	r2, r5, #5
 800c6a2:	0092      	lsls	r2, r2, #2
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f000 fabf 	bl	800cc28 <_calloc_r>
 800c6aa:	b160      	cbz	r0, 800c6c6 <_Balloc+0x56>
 800c6ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c6b0:	e00e      	b.n	800c6d0 <_Balloc+0x60>
 800c6b2:	2221      	movs	r2, #33	; 0x21
 800c6b4:	2104      	movs	r1, #4
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f000 fab6 	bl	800cc28 <_calloc_r>
 800c6bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6be:	60e8      	str	r0, [r5, #12]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1e4      	bne.n	800c690 <_Balloc+0x20>
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	bd70      	pop	{r4, r5, r6, pc}
 800c6ca:	6802      	ldr	r2, [r0, #0]
 800c6cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6d6:	e7f7      	b.n	800c6c8 <_Balloc+0x58>

0800c6d8 <_Bfree>:
 800c6d8:	b570      	push	{r4, r5, r6, lr}
 800c6da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c6dc:	4606      	mov	r6, r0
 800c6de:	460d      	mov	r5, r1
 800c6e0:	b93c      	cbnz	r4, 800c6f2 <_Bfree+0x1a>
 800c6e2:	2010      	movs	r0, #16
 800c6e4:	f7fe fdd4 	bl	800b290 <malloc>
 800c6e8:	6270      	str	r0, [r6, #36]	; 0x24
 800c6ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6ee:	6004      	str	r4, [r0, #0]
 800c6f0:	60c4      	str	r4, [r0, #12]
 800c6f2:	b13d      	cbz	r5, 800c704 <_Bfree+0x2c>
 800c6f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c6f6:	686a      	ldr	r2, [r5, #4]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6fe:	6029      	str	r1, [r5, #0]
 800c700:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c704:	bd70      	pop	{r4, r5, r6, pc}

0800c706 <__multadd>:
 800c706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c70a:	690d      	ldr	r5, [r1, #16]
 800c70c:	461f      	mov	r7, r3
 800c70e:	4606      	mov	r6, r0
 800c710:	460c      	mov	r4, r1
 800c712:	f101 0c14 	add.w	ip, r1, #20
 800c716:	2300      	movs	r3, #0
 800c718:	f8dc 0000 	ldr.w	r0, [ip]
 800c71c:	b281      	uxth	r1, r0
 800c71e:	fb02 7101 	mla	r1, r2, r1, r7
 800c722:	0c0f      	lsrs	r7, r1, #16
 800c724:	0c00      	lsrs	r0, r0, #16
 800c726:	fb02 7000 	mla	r0, r2, r0, r7
 800c72a:	b289      	uxth	r1, r1
 800c72c:	3301      	adds	r3, #1
 800c72e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c732:	429d      	cmp	r5, r3
 800c734:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c738:	f84c 1b04 	str.w	r1, [ip], #4
 800c73c:	dcec      	bgt.n	800c718 <__multadd+0x12>
 800c73e:	b1d7      	cbz	r7, 800c776 <__multadd+0x70>
 800c740:	68a3      	ldr	r3, [r4, #8]
 800c742:	42ab      	cmp	r3, r5
 800c744:	dc12      	bgt.n	800c76c <__multadd+0x66>
 800c746:	6861      	ldr	r1, [r4, #4]
 800c748:	4630      	mov	r0, r6
 800c74a:	3101      	adds	r1, #1
 800c74c:	f7ff ff90 	bl	800c670 <_Balloc>
 800c750:	6922      	ldr	r2, [r4, #16]
 800c752:	3202      	adds	r2, #2
 800c754:	f104 010c 	add.w	r1, r4, #12
 800c758:	4680      	mov	r8, r0
 800c75a:	0092      	lsls	r2, r2, #2
 800c75c:	300c      	adds	r0, #12
 800c75e:	f7fe fda7 	bl	800b2b0 <memcpy>
 800c762:	4621      	mov	r1, r4
 800c764:	4630      	mov	r0, r6
 800c766:	f7ff ffb7 	bl	800c6d8 <_Bfree>
 800c76a:	4644      	mov	r4, r8
 800c76c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c770:	3501      	adds	r5, #1
 800c772:	615f      	str	r7, [r3, #20]
 800c774:	6125      	str	r5, [r4, #16]
 800c776:	4620      	mov	r0, r4
 800c778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c77c <__hi0bits>:
 800c77c:	0c02      	lsrs	r2, r0, #16
 800c77e:	0412      	lsls	r2, r2, #16
 800c780:	4603      	mov	r3, r0
 800c782:	b9b2      	cbnz	r2, 800c7b2 <__hi0bits+0x36>
 800c784:	0403      	lsls	r3, r0, #16
 800c786:	2010      	movs	r0, #16
 800c788:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c78c:	bf04      	itt	eq
 800c78e:	021b      	lsleq	r3, r3, #8
 800c790:	3008      	addeq	r0, #8
 800c792:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c796:	bf04      	itt	eq
 800c798:	011b      	lsleq	r3, r3, #4
 800c79a:	3004      	addeq	r0, #4
 800c79c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c7a0:	bf04      	itt	eq
 800c7a2:	009b      	lsleq	r3, r3, #2
 800c7a4:	3002      	addeq	r0, #2
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	db06      	blt.n	800c7b8 <__hi0bits+0x3c>
 800c7aa:	005b      	lsls	r3, r3, #1
 800c7ac:	d503      	bpl.n	800c7b6 <__hi0bits+0x3a>
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	4770      	bx	lr
 800c7b2:	2000      	movs	r0, #0
 800c7b4:	e7e8      	b.n	800c788 <__hi0bits+0xc>
 800c7b6:	2020      	movs	r0, #32
 800c7b8:	4770      	bx	lr

0800c7ba <__lo0bits>:
 800c7ba:	6803      	ldr	r3, [r0, #0]
 800c7bc:	f013 0207 	ands.w	r2, r3, #7
 800c7c0:	4601      	mov	r1, r0
 800c7c2:	d00b      	beq.n	800c7dc <__lo0bits+0x22>
 800c7c4:	07da      	lsls	r2, r3, #31
 800c7c6:	d423      	bmi.n	800c810 <__lo0bits+0x56>
 800c7c8:	0798      	lsls	r0, r3, #30
 800c7ca:	bf49      	itett	mi
 800c7cc:	085b      	lsrmi	r3, r3, #1
 800c7ce:	089b      	lsrpl	r3, r3, #2
 800c7d0:	2001      	movmi	r0, #1
 800c7d2:	600b      	strmi	r3, [r1, #0]
 800c7d4:	bf5c      	itt	pl
 800c7d6:	600b      	strpl	r3, [r1, #0]
 800c7d8:	2002      	movpl	r0, #2
 800c7da:	4770      	bx	lr
 800c7dc:	b298      	uxth	r0, r3
 800c7de:	b9a8      	cbnz	r0, 800c80c <__lo0bits+0x52>
 800c7e0:	0c1b      	lsrs	r3, r3, #16
 800c7e2:	2010      	movs	r0, #16
 800c7e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c7e8:	bf04      	itt	eq
 800c7ea:	0a1b      	lsreq	r3, r3, #8
 800c7ec:	3008      	addeq	r0, #8
 800c7ee:	071a      	lsls	r2, r3, #28
 800c7f0:	bf04      	itt	eq
 800c7f2:	091b      	lsreq	r3, r3, #4
 800c7f4:	3004      	addeq	r0, #4
 800c7f6:	079a      	lsls	r2, r3, #30
 800c7f8:	bf04      	itt	eq
 800c7fa:	089b      	lsreq	r3, r3, #2
 800c7fc:	3002      	addeq	r0, #2
 800c7fe:	07da      	lsls	r2, r3, #31
 800c800:	d402      	bmi.n	800c808 <__lo0bits+0x4e>
 800c802:	085b      	lsrs	r3, r3, #1
 800c804:	d006      	beq.n	800c814 <__lo0bits+0x5a>
 800c806:	3001      	adds	r0, #1
 800c808:	600b      	str	r3, [r1, #0]
 800c80a:	4770      	bx	lr
 800c80c:	4610      	mov	r0, r2
 800c80e:	e7e9      	b.n	800c7e4 <__lo0bits+0x2a>
 800c810:	2000      	movs	r0, #0
 800c812:	4770      	bx	lr
 800c814:	2020      	movs	r0, #32
 800c816:	4770      	bx	lr

0800c818 <__i2b>:
 800c818:	b510      	push	{r4, lr}
 800c81a:	460c      	mov	r4, r1
 800c81c:	2101      	movs	r1, #1
 800c81e:	f7ff ff27 	bl	800c670 <_Balloc>
 800c822:	2201      	movs	r2, #1
 800c824:	6144      	str	r4, [r0, #20]
 800c826:	6102      	str	r2, [r0, #16]
 800c828:	bd10      	pop	{r4, pc}

0800c82a <__multiply>:
 800c82a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82e:	4614      	mov	r4, r2
 800c830:	690a      	ldr	r2, [r1, #16]
 800c832:	6923      	ldr	r3, [r4, #16]
 800c834:	429a      	cmp	r2, r3
 800c836:	bfb8      	it	lt
 800c838:	460b      	movlt	r3, r1
 800c83a:	4688      	mov	r8, r1
 800c83c:	bfbc      	itt	lt
 800c83e:	46a0      	movlt	r8, r4
 800c840:	461c      	movlt	r4, r3
 800c842:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c846:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c84a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c84e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c852:	eb07 0609 	add.w	r6, r7, r9
 800c856:	42b3      	cmp	r3, r6
 800c858:	bfb8      	it	lt
 800c85a:	3101      	addlt	r1, #1
 800c85c:	f7ff ff08 	bl	800c670 <_Balloc>
 800c860:	f100 0514 	add.w	r5, r0, #20
 800c864:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c868:	462b      	mov	r3, r5
 800c86a:	2200      	movs	r2, #0
 800c86c:	4573      	cmp	r3, lr
 800c86e:	d316      	bcc.n	800c89e <__multiply+0x74>
 800c870:	f104 0214 	add.w	r2, r4, #20
 800c874:	f108 0114 	add.w	r1, r8, #20
 800c878:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c87c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	9b00      	ldr	r3, [sp, #0]
 800c884:	9201      	str	r2, [sp, #4]
 800c886:	4293      	cmp	r3, r2
 800c888:	d80c      	bhi.n	800c8a4 <__multiply+0x7a>
 800c88a:	2e00      	cmp	r6, #0
 800c88c:	dd03      	ble.n	800c896 <__multiply+0x6c>
 800c88e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c892:	2b00      	cmp	r3, #0
 800c894:	d05d      	beq.n	800c952 <__multiply+0x128>
 800c896:	6106      	str	r6, [r0, #16]
 800c898:	b003      	add	sp, #12
 800c89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c89e:	f843 2b04 	str.w	r2, [r3], #4
 800c8a2:	e7e3      	b.n	800c86c <__multiply+0x42>
 800c8a4:	f8b2 b000 	ldrh.w	fp, [r2]
 800c8a8:	f1bb 0f00 	cmp.w	fp, #0
 800c8ac:	d023      	beq.n	800c8f6 <__multiply+0xcc>
 800c8ae:	4689      	mov	r9, r1
 800c8b0:	46ac      	mov	ip, r5
 800c8b2:	f04f 0800 	mov.w	r8, #0
 800c8b6:	f859 4b04 	ldr.w	r4, [r9], #4
 800c8ba:	f8dc a000 	ldr.w	sl, [ip]
 800c8be:	b2a3      	uxth	r3, r4
 800c8c0:	fa1f fa8a 	uxth.w	sl, sl
 800c8c4:	fb0b a303 	mla	r3, fp, r3, sl
 800c8c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c8cc:	f8dc 4000 	ldr.w	r4, [ip]
 800c8d0:	4443      	add	r3, r8
 800c8d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c8d6:	fb0b 840a 	mla	r4, fp, sl, r8
 800c8da:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c8de:	46e2      	mov	sl, ip
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c8e6:	454f      	cmp	r7, r9
 800c8e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c8ec:	f84a 3b04 	str.w	r3, [sl], #4
 800c8f0:	d82b      	bhi.n	800c94a <__multiply+0x120>
 800c8f2:	f8cc 8004 	str.w	r8, [ip, #4]
 800c8f6:	9b01      	ldr	r3, [sp, #4]
 800c8f8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c8fc:	3204      	adds	r2, #4
 800c8fe:	f1ba 0f00 	cmp.w	sl, #0
 800c902:	d020      	beq.n	800c946 <__multiply+0x11c>
 800c904:	682b      	ldr	r3, [r5, #0]
 800c906:	4689      	mov	r9, r1
 800c908:	46a8      	mov	r8, r5
 800c90a:	f04f 0b00 	mov.w	fp, #0
 800c90e:	f8b9 c000 	ldrh.w	ip, [r9]
 800c912:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c916:	fb0a 440c 	mla	r4, sl, ip, r4
 800c91a:	445c      	add	r4, fp
 800c91c:	46c4      	mov	ip, r8
 800c91e:	b29b      	uxth	r3, r3
 800c920:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c924:	f84c 3b04 	str.w	r3, [ip], #4
 800c928:	f859 3b04 	ldr.w	r3, [r9], #4
 800c92c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c930:	0c1b      	lsrs	r3, r3, #16
 800c932:	fb0a b303 	mla	r3, sl, r3, fp
 800c936:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c93a:	454f      	cmp	r7, r9
 800c93c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c940:	d805      	bhi.n	800c94e <__multiply+0x124>
 800c942:	f8c8 3004 	str.w	r3, [r8, #4]
 800c946:	3504      	adds	r5, #4
 800c948:	e79b      	b.n	800c882 <__multiply+0x58>
 800c94a:	46d4      	mov	ip, sl
 800c94c:	e7b3      	b.n	800c8b6 <__multiply+0x8c>
 800c94e:	46e0      	mov	r8, ip
 800c950:	e7dd      	b.n	800c90e <__multiply+0xe4>
 800c952:	3e01      	subs	r6, #1
 800c954:	e799      	b.n	800c88a <__multiply+0x60>
	...

0800c958 <__pow5mult>:
 800c958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c95c:	4615      	mov	r5, r2
 800c95e:	f012 0203 	ands.w	r2, r2, #3
 800c962:	4606      	mov	r6, r0
 800c964:	460f      	mov	r7, r1
 800c966:	d007      	beq.n	800c978 <__pow5mult+0x20>
 800c968:	3a01      	subs	r2, #1
 800c96a:	4c21      	ldr	r4, [pc, #132]	; (800c9f0 <__pow5mult+0x98>)
 800c96c:	2300      	movs	r3, #0
 800c96e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c972:	f7ff fec8 	bl	800c706 <__multadd>
 800c976:	4607      	mov	r7, r0
 800c978:	10ad      	asrs	r5, r5, #2
 800c97a:	d035      	beq.n	800c9e8 <__pow5mult+0x90>
 800c97c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c97e:	b93c      	cbnz	r4, 800c990 <__pow5mult+0x38>
 800c980:	2010      	movs	r0, #16
 800c982:	f7fe fc85 	bl	800b290 <malloc>
 800c986:	6270      	str	r0, [r6, #36]	; 0x24
 800c988:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c98c:	6004      	str	r4, [r0, #0]
 800c98e:	60c4      	str	r4, [r0, #12]
 800c990:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c994:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c998:	b94c      	cbnz	r4, 800c9ae <__pow5mult+0x56>
 800c99a:	f240 2171 	movw	r1, #625	; 0x271
 800c99e:	4630      	mov	r0, r6
 800c9a0:	f7ff ff3a 	bl	800c818 <__i2b>
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	6003      	str	r3, [r0, #0]
 800c9ae:	f04f 0800 	mov.w	r8, #0
 800c9b2:	07eb      	lsls	r3, r5, #31
 800c9b4:	d50a      	bpl.n	800c9cc <__pow5mult+0x74>
 800c9b6:	4639      	mov	r1, r7
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f7ff ff35 	bl	800c82a <__multiply>
 800c9c0:	4639      	mov	r1, r7
 800c9c2:	4681      	mov	r9, r0
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	f7ff fe87 	bl	800c6d8 <_Bfree>
 800c9ca:	464f      	mov	r7, r9
 800c9cc:	106d      	asrs	r5, r5, #1
 800c9ce:	d00b      	beq.n	800c9e8 <__pow5mult+0x90>
 800c9d0:	6820      	ldr	r0, [r4, #0]
 800c9d2:	b938      	cbnz	r0, 800c9e4 <__pow5mult+0x8c>
 800c9d4:	4622      	mov	r2, r4
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	4630      	mov	r0, r6
 800c9da:	f7ff ff26 	bl	800c82a <__multiply>
 800c9de:	6020      	str	r0, [r4, #0]
 800c9e0:	f8c0 8000 	str.w	r8, [r0]
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	e7e4      	b.n	800c9b2 <__pow5mult+0x5a>
 800c9e8:	4638      	mov	r0, r7
 800c9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ee:	bf00      	nop
 800c9f0:	0800cec0 	.word	0x0800cec0

0800c9f4 <__lshift>:
 800c9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9f8:	460c      	mov	r4, r1
 800c9fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9fe:	6923      	ldr	r3, [r4, #16]
 800ca00:	6849      	ldr	r1, [r1, #4]
 800ca02:	eb0a 0903 	add.w	r9, sl, r3
 800ca06:	68a3      	ldr	r3, [r4, #8]
 800ca08:	4607      	mov	r7, r0
 800ca0a:	4616      	mov	r6, r2
 800ca0c:	f109 0501 	add.w	r5, r9, #1
 800ca10:	42ab      	cmp	r3, r5
 800ca12:	db32      	blt.n	800ca7a <__lshift+0x86>
 800ca14:	4638      	mov	r0, r7
 800ca16:	f7ff fe2b 	bl	800c670 <_Balloc>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	4680      	mov	r8, r0
 800ca1e:	f100 0114 	add.w	r1, r0, #20
 800ca22:	461a      	mov	r2, r3
 800ca24:	4553      	cmp	r3, sl
 800ca26:	db2b      	blt.n	800ca80 <__lshift+0x8c>
 800ca28:	6920      	ldr	r0, [r4, #16]
 800ca2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca2e:	f104 0314 	add.w	r3, r4, #20
 800ca32:	f016 021f 	ands.w	r2, r6, #31
 800ca36:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca3a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca3e:	d025      	beq.n	800ca8c <__lshift+0x98>
 800ca40:	f1c2 0e20 	rsb	lr, r2, #32
 800ca44:	2000      	movs	r0, #0
 800ca46:	681e      	ldr	r6, [r3, #0]
 800ca48:	468a      	mov	sl, r1
 800ca4a:	4096      	lsls	r6, r2
 800ca4c:	4330      	orrs	r0, r6
 800ca4e:	f84a 0b04 	str.w	r0, [sl], #4
 800ca52:	f853 0b04 	ldr.w	r0, [r3], #4
 800ca56:	459c      	cmp	ip, r3
 800ca58:	fa20 f00e 	lsr.w	r0, r0, lr
 800ca5c:	d814      	bhi.n	800ca88 <__lshift+0x94>
 800ca5e:	6048      	str	r0, [r1, #4]
 800ca60:	b108      	cbz	r0, 800ca66 <__lshift+0x72>
 800ca62:	f109 0502 	add.w	r5, r9, #2
 800ca66:	3d01      	subs	r5, #1
 800ca68:	4638      	mov	r0, r7
 800ca6a:	f8c8 5010 	str.w	r5, [r8, #16]
 800ca6e:	4621      	mov	r1, r4
 800ca70:	f7ff fe32 	bl	800c6d8 <_Bfree>
 800ca74:	4640      	mov	r0, r8
 800ca76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca7a:	3101      	adds	r1, #1
 800ca7c:	005b      	lsls	r3, r3, #1
 800ca7e:	e7c7      	b.n	800ca10 <__lshift+0x1c>
 800ca80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ca84:	3301      	adds	r3, #1
 800ca86:	e7cd      	b.n	800ca24 <__lshift+0x30>
 800ca88:	4651      	mov	r1, sl
 800ca8a:	e7dc      	b.n	800ca46 <__lshift+0x52>
 800ca8c:	3904      	subs	r1, #4
 800ca8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca92:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca96:	459c      	cmp	ip, r3
 800ca98:	d8f9      	bhi.n	800ca8e <__lshift+0x9a>
 800ca9a:	e7e4      	b.n	800ca66 <__lshift+0x72>

0800ca9c <__mcmp>:
 800ca9c:	6903      	ldr	r3, [r0, #16]
 800ca9e:	690a      	ldr	r2, [r1, #16]
 800caa0:	1a9b      	subs	r3, r3, r2
 800caa2:	b530      	push	{r4, r5, lr}
 800caa4:	d10c      	bne.n	800cac0 <__mcmp+0x24>
 800caa6:	0092      	lsls	r2, r2, #2
 800caa8:	3014      	adds	r0, #20
 800caaa:	3114      	adds	r1, #20
 800caac:	1884      	adds	r4, r0, r2
 800caae:	4411      	add	r1, r2
 800cab0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cab4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cab8:	4295      	cmp	r5, r2
 800caba:	d003      	beq.n	800cac4 <__mcmp+0x28>
 800cabc:	d305      	bcc.n	800caca <__mcmp+0x2e>
 800cabe:	2301      	movs	r3, #1
 800cac0:	4618      	mov	r0, r3
 800cac2:	bd30      	pop	{r4, r5, pc}
 800cac4:	42a0      	cmp	r0, r4
 800cac6:	d3f3      	bcc.n	800cab0 <__mcmp+0x14>
 800cac8:	e7fa      	b.n	800cac0 <__mcmp+0x24>
 800caca:	f04f 33ff 	mov.w	r3, #4294967295
 800cace:	e7f7      	b.n	800cac0 <__mcmp+0x24>

0800cad0 <__mdiff>:
 800cad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad4:	460d      	mov	r5, r1
 800cad6:	4607      	mov	r7, r0
 800cad8:	4611      	mov	r1, r2
 800cada:	4628      	mov	r0, r5
 800cadc:	4614      	mov	r4, r2
 800cade:	f7ff ffdd 	bl	800ca9c <__mcmp>
 800cae2:	1e06      	subs	r6, r0, #0
 800cae4:	d108      	bne.n	800caf8 <__mdiff+0x28>
 800cae6:	4631      	mov	r1, r6
 800cae8:	4638      	mov	r0, r7
 800caea:	f7ff fdc1 	bl	800c670 <_Balloc>
 800caee:	2301      	movs	r3, #1
 800caf0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800caf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf8:	bfa4      	itt	ge
 800cafa:	4623      	movge	r3, r4
 800cafc:	462c      	movge	r4, r5
 800cafe:	4638      	mov	r0, r7
 800cb00:	6861      	ldr	r1, [r4, #4]
 800cb02:	bfa6      	itte	ge
 800cb04:	461d      	movge	r5, r3
 800cb06:	2600      	movge	r6, #0
 800cb08:	2601      	movlt	r6, #1
 800cb0a:	f7ff fdb1 	bl	800c670 <_Balloc>
 800cb0e:	692b      	ldr	r3, [r5, #16]
 800cb10:	60c6      	str	r6, [r0, #12]
 800cb12:	6926      	ldr	r6, [r4, #16]
 800cb14:	f105 0914 	add.w	r9, r5, #20
 800cb18:	f104 0214 	add.w	r2, r4, #20
 800cb1c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cb20:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cb24:	f100 0514 	add.w	r5, r0, #20
 800cb28:	f04f 0e00 	mov.w	lr, #0
 800cb2c:	f852 ab04 	ldr.w	sl, [r2], #4
 800cb30:	f859 4b04 	ldr.w	r4, [r9], #4
 800cb34:	fa1e f18a 	uxtah	r1, lr, sl
 800cb38:	b2a3      	uxth	r3, r4
 800cb3a:	1ac9      	subs	r1, r1, r3
 800cb3c:	0c23      	lsrs	r3, r4, #16
 800cb3e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cb42:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cb46:	b289      	uxth	r1, r1
 800cb48:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cb4c:	45c8      	cmp	r8, r9
 800cb4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cb52:	4694      	mov	ip, r2
 800cb54:	f845 3b04 	str.w	r3, [r5], #4
 800cb58:	d8e8      	bhi.n	800cb2c <__mdiff+0x5c>
 800cb5a:	45bc      	cmp	ip, r7
 800cb5c:	d304      	bcc.n	800cb68 <__mdiff+0x98>
 800cb5e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cb62:	b183      	cbz	r3, 800cb86 <__mdiff+0xb6>
 800cb64:	6106      	str	r6, [r0, #16]
 800cb66:	e7c5      	b.n	800caf4 <__mdiff+0x24>
 800cb68:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cb6c:	fa1e f381 	uxtah	r3, lr, r1
 800cb70:	141a      	asrs	r2, r3, #16
 800cb72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb7c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cb80:	f845 3b04 	str.w	r3, [r5], #4
 800cb84:	e7e9      	b.n	800cb5a <__mdiff+0x8a>
 800cb86:	3e01      	subs	r6, #1
 800cb88:	e7e9      	b.n	800cb5e <__mdiff+0x8e>

0800cb8a <__d2b>:
 800cb8a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb8e:	460e      	mov	r6, r1
 800cb90:	2101      	movs	r1, #1
 800cb92:	ec59 8b10 	vmov	r8, r9, d0
 800cb96:	4615      	mov	r5, r2
 800cb98:	f7ff fd6a 	bl	800c670 <_Balloc>
 800cb9c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cba0:	4607      	mov	r7, r0
 800cba2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cba6:	bb34      	cbnz	r4, 800cbf6 <__d2b+0x6c>
 800cba8:	9301      	str	r3, [sp, #4]
 800cbaa:	f1b8 0300 	subs.w	r3, r8, #0
 800cbae:	d027      	beq.n	800cc00 <__d2b+0x76>
 800cbb0:	a802      	add	r0, sp, #8
 800cbb2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cbb6:	f7ff fe00 	bl	800c7ba <__lo0bits>
 800cbba:	9900      	ldr	r1, [sp, #0]
 800cbbc:	b1f0      	cbz	r0, 800cbfc <__d2b+0x72>
 800cbbe:	9a01      	ldr	r2, [sp, #4]
 800cbc0:	f1c0 0320 	rsb	r3, r0, #32
 800cbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc8:	430b      	orrs	r3, r1
 800cbca:	40c2      	lsrs	r2, r0
 800cbcc:	617b      	str	r3, [r7, #20]
 800cbce:	9201      	str	r2, [sp, #4]
 800cbd0:	9b01      	ldr	r3, [sp, #4]
 800cbd2:	61bb      	str	r3, [r7, #24]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	bf14      	ite	ne
 800cbd8:	2102      	movne	r1, #2
 800cbda:	2101      	moveq	r1, #1
 800cbdc:	6139      	str	r1, [r7, #16]
 800cbde:	b1c4      	cbz	r4, 800cc12 <__d2b+0x88>
 800cbe0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cbe4:	4404      	add	r4, r0
 800cbe6:	6034      	str	r4, [r6, #0]
 800cbe8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cbec:	6028      	str	r0, [r5, #0]
 800cbee:	4638      	mov	r0, r7
 800cbf0:	b003      	add	sp, #12
 800cbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbfa:	e7d5      	b.n	800cba8 <__d2b+0x1e>
 800cbfc:	6179      	str	r1, [r7, #20]
 800cbfe:	e7e7      	b.n	800cbd0 <__d2b+0x46>
 800cc00:	a801      	add	r0, sp, #4
 800cc02:	f7ff fdda 	bl	800c7ba <__lo0bits>
 800cc06:	9b01      	ldr	r3, [sp, #4]
 800cc08:	617b      	str	r3, [r7, #20]
 800cc0a:	2101      	movs	r1, #1
 800cc0c:	6139      	str	r1, [r7, #16]
 800cc0e:	3020      	adds	r0, #32
 800cc10:	e7e5      	b.n	800cbde <__d2b+0x54>
 800cc12:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cc16:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc1a:	6030      	str	r0, [r6, #0]
 800cc1c:	6918      	ldr	r0, [r3, #16]
 800cc1e:	f7ff fdad 	bl	800c77c <__hi0bits>
 800cc22:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cc26:	e7e1      	b.n	800cbec <__d2b+0x62>

0800cc28 <_calloc_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	fb02 f401 	mul.w	r4, r2, r1
 800cc2e:	4621      	mov	r1, r4
 800cc30:	f7fe fba0 	bl	800b374 <_malloc_r>
 800cc34:	4605      	mov	r5, r0
 800cc36:	b118      	cbz	r0, 800cc40 <_calloc_r+0x18>
 800cc38:	4622      	mov	r2, r4
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	f7fe fb43 	bl	800b2c6 <memset>
 800cc40:	4628      	mov	r0, r5
 800cc42:	bd38      	pop	{r3, r4, r5, pc}

0800cc44 <__ascii_mbtowc>:
 800cc44:	b082      	sub	sp, #8
 800cc46:	b901      	cbnz	r1, 800cc4a <__ascii_mbtowc+0x6>
 800cc48:	a901      	add	r1, sp, #4
 800cc4a:	b142      	cbz	r2, 800cc5e <__ascii_mbtowc+0x1a>
 800cc4c:	b14b      	cbz	r3, 800cc62 <__ascii_mbtowc+0x1e>
 800cc4e:	7813      	ldrb	r3, [r2, #0]
 800cc50:	600b      	str	r3, [r1, #0]
 800cc52:	7812      	ldrb	r2, [r2, #0]
 800cc54:	1c10      	adds	r0, r2, #0
 800cc56:	bf18      	it	ne
 800cc58:	2001      	movne	r0, #1
 800cc5a:	b002      	add	sp, #8
 800cc5c:	4770      	bx	lr
 800cc5e:	4610      	mov	r0, r2
 800cc60:	e7fb      	b.n	800cc5a <__ascii_mbtowc+0x16>
 800cc62:	f06f 0001 	mvn.w	r0, #1
 800cc66:	e7f8      	b.n	800cc5a <__ascii_mbtowc+0x16>

0800cc68 <__ascii_wctomb>:
 800cc68:	b149      	cbz	r1, 800cc7e <__ascii_wctomb+0x16>
 800cc6a:	2aff      	cmp	r2, #255	; 0xff
 800cc6c:	bf85      	ittet	hi
 800cc6e:	238a      	movhi	r3, #138	; 0x8a
 800cc70:	6003      	strhi	r3, [r0, #0]
 800cc72:	700a      	strbls	r2, [r1, #0]
 800cc74:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc78:	bf98      	it	ls
 800cc7a:	2001      	movls	r0, #1
 800cc7c:	4770      	bx	lr
 800cc7e:	4608      	mov	r0, r1
 800cc80:	4770      	bx	lr
	...

0800cc84 <_init>:
 800cc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc86:	bf00      	nop
 800cc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc8a:	bc08      	pop	{r3}
 800cc8c:	469e      	mov	lr, r3
 800cc8e:	4770      	bx	lr

0800cc90 <_fini>:
 800cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc92:	bf00      	nop
 800cc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc96:	bc08      	pop	{r3}
 800cc98:	469e      	mov	lr, r3
 800cc9a:	4770      	bx	lr
