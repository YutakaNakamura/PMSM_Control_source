
STM32H743ZI_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b594  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800b830  0800b830  0001b830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb68  0800bb68  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb68  0800bb68  0001bb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb70  0800bb70  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800bb70  0800bb70  0001bb70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800bb7c  0800bb7c  0001bb7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800bb88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003590  240001e0  0800bd68  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24003770  0800bd68  00023770  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005b214  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008ad7  00000000  00000000  0007b422  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f30  00000000  00000000  00083f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d00  00000000  00000000  00085e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003eaa1  00000000  00000000  00087b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022002  00000000  00000000  000c65d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00183c34  00000000  00000000  000e85d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0026c207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b30  00000000  00000000  0026c284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001e0 	.word	0x240001e0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b814 	.word	0x0800b814

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001e4 	.word	0x240001e4
 80002d4:	0800b814 	.word	0x0800b814

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 fc79 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005f2:	f001 fc11 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 80005f6:	4601      	mov	r1, r0
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <HAL_Init+0x60>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 030f 	and.w	r3, r3, #15
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <HAL_Init+0x64>)
 8000604:	5cd3      	ldrb	r3, [r2, r3]
 8000606:	f003 031f 	and.w	r3, r3, #31
 800060a:	fa21 f303 	lsr.w	r3, r1, r3
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <HAL_Init+0x68>)
 8000610:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */  
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_Init+0x68>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_Init+0x60>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f003 030f 	and.w	r3, r3, #15
 800061e:	490b      	ldr	r1, [pc, #44]	; (800064c <HAL_Init+0x64>)
 8000620:	5ccb      	ldrb	r3, [r1, r3]
 8000622:	f003 031f 	and.w	r3, r3, #31
 8000626:	fa22 f303 	lsr.w	r3, r2, r3
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <HAL_Init+0x6c>)
 800062c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 f812 	bl	8000658 <HAL_InitTick>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e002      	b.n	8000644 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800063e:	f008 ff6d 	bl	800951c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	bd80      	pop	{r7, pc}
 8000648:	58024400 	.word	0x58024400
 800064c:	0800b91c 	.word	0x0800b91c
 8000650:	24000008 	.word	0x24000008
 8000654:	2400000c 	.word	0x2400000c

08000658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_InitTick+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d101      	bne.n	800066c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	e021      	b.n	80006b0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <HAL_InitTick+0x64>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <HAL_InitTick+0x60>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	fbb3 f3f1 	udiv	r3, r3, r1
 800067e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fc61 	bl	8000f4a <HAL_SYSTICK_Config>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e00e      	b.n	80006b0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b0f      	cmp	r3, #15
 8000696:	d80a      	bhi.n	80006ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000698:	2200      	movs	r2, #0
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	f04f 30ff 	mov.w	r0, #4294967295
 80006a0:	f000 fc2b 	bl	8000efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <HAL_InitTick+0x68>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e000      	b.n	80006b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	24000004 	.word	0x24000004
 80006bc:	24000008 	.word	0x24000008
 80006c0:	24000000 	.word	0x24000000

080006c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_IncTick+0x20>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_IncTick+0x24>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <HAL_IncTick+0x24>)
 80006d6:	6013      	str	r3, [r2, #0]
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	24000004 	.word	0x24000004
 80006e8:	240001fc 	.word	0x240001fc

080006ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <HAL_GetTick+0x14>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	240001fc 	.word	0x240001fc

08000704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800070c:	f7ff ffee 	bl	80006ec <HAL_GetTick>
 8000710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800071c:	d005      	beq.n	800072a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_Delay+0x40>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4413      	add	r3, r2
 8000728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800072a:	bf00      	nop
 800072c:	f7ff ffde 	bl	80006ec <HAL_GetTick>
 8000730:	4602      	mov	r2, r0
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	429a      	cmp	r2, r3
 800073a:	d8f7      	bhi.n	800072c <HAL_Delay+0x28>
  {
  }
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	24000004 	.word	0x24000004

08000748 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <HAL_GetREVID+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	0c1b      	lsrs	r3, r3, #16
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	5c001000 	.word	0x5c001000

08000760 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000770:	2b00      	cmp	r3, #0
 8000772:	d101      	bne.n	8000778 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000774:	2301      	movs	r3, #1
 8000776:	e000      	b.n	800077a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800079a:	2301      	movs	r3, #1
 800079c:	e000      	b.n	80007a0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f003 031f 	and.w	r3, r3, #31
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80007d8:	4618      	mov	r0, r3
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d101      	bne.n	80007fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80007f8:	2301      	movs	r3, #1
 80007fa:	e000      	b.n	80007fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	2b08      	cmp	r3, #8
 800081c:	d101      	bne.n	8000822 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800081e:	2301      	movs	r3, #1
 8000820:	e000      	b.n	8000824 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000822:	2300      	movs	r3, #0
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a87      	ldr	r2, [pc, #540]	; (8000a70 <HAL_ADC_IRQHandler+0x240>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d004      	beq.n	8000860 <HAL_ADC_IRQHandler+0x30>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a86      	ldr	r2, [pc, #536]	; (8000a74 <HAL_ADC_IRQHandler+0x244>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d101      	bne.n	8000864 <HAL_ADC_IRQHandler+0x34>
 8000860:	4b85      	ldr	r3, [pc, #532]	; (8000a78 <HAL_ADC_IRQHandler+0x248>)
 8000862:	e000      	b.n	8000866 <HAL_ADC_IRQHandler+0x36>
 8000864:	4b85      	ldr	r3, [pc, #532]	; (8000a7c <HAL_ADC_IRQHandler+0x24c>)
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ffa0 	bl	80007ac <LL_ADC_GetMultimode>
 800086c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	f003 0302 	and.w	r3, r3, #2
 8000874:	2b00      	cmp	r3, #0
 8000876:	d017      	beq.n	80008a8 <HAL_ADC_IRQHandler+0x78>
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	2b00      	cmp	r3, #0
 8000880:	d012      	beq.n	80008a8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	2b00      	cmp	r3, #0
 800088c:	d105      	bne.n	800089a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000892:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f000 fa48 	bl	8000d30 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2202      	movs	r2, #2
 80008a6:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d004      	beq.n	80008bc <HAL_ADC_IRQHandler+0x8c>
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d10a      	bne.n	80008d2 <HAL_ADC_IRQHandler+0xa2>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	f003 0308 	and.w	r3, r3, #8
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f000 8083 	beq.w	80009ce <HAL_ADC_IRQHandler+0x19e>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d07d      	beq.n	80009ce <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d105      	bne.n	80008ea <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if(LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff36 	bl	8000760 <LL_ADC_REG_IsTriggerSourceSWStart>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d062      	beq.n	80009c0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a5d      	ldr	r2, [pc, #372]	; (8000a74 <HAL_ADC_IRQHandler+0x244>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d002      	beq.n	800090a <HAL_ADC_IRQHandler+0xda>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	e000      	b.n	800090c <HAL_ADC_IRQHandler+0xdc>
 800090a:	4b59      	ldr	r3, [pc, #356]	; (8000a70 <HAL_ADC_IRQHandler+0x240>)
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	4293      	cmp	r3, r2
 8000912:	d008      	beq.n	8000926 <HAL_ADC_IRQHandler+0xf6>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d005      	beq.n	8000926 <HAL_ADC_IRQHandler+0xf6>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	2b05      	cmp	r3, #5
 800091e:	d002      	beq.n	8000926 <HAL_ADC_IRQHandler+0xf6>
           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	2b09      	cmp	r3, #9
 8000924:	d104      	bne.n	8000930 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	623b      	str	r3, [r7, #32]
 800092e:	e00c      	b.n	800094a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a4f      	ldr	r2, [pc, #316]	; (8000a74 <HAL_ADC_IRQHandler+0x244>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d002      	beq.n	8000940 <HAL_ADC_IRQHandler+0x110>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	e000      	b.n	8000942 <HAL_ADC_IRQHandler+0x112>
 8000940:	4b4b      	ldr	r3, [pc, #300]	; (8000a70 <HAL_ADC_IRQHandler+0x240>)
 8000942:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	623b      	str	r3, [r7, #32]
      }
      
      /* Carry on if continuous mode is disabled */
      if (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000950:	2b00      	cmp	r3, #0
 8000952:	d135      	bne.n	80009c0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	2b08      	cmp	r3, #8
 8000960:	d12e      	bne.n	80009c0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff3c 	bl	80007e4 <LL_ADC_REG_IsConversionOngoing>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d11a      	bne.n	80009a8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f022 020c 	bic.w	r2, r2, #12
 8000980:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000986:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	655a      	str	r2, [r3, #84]	; 0x54
            
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d112      	bne.n	80009c0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800099e:	f043 0201 	orr.w	r2, r3, #1
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	655a      	str	r2, [r3, #84]	; 0x54
 80009a6:	e00b      	b.n	80009c0 <HAL_ADC_IRQHandler+0x190>
            }           
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009ac:	f043 0210 	orr.w	r2, r3, #16
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	655a      	str	r2, [r3, #84]	; 0x54
            
            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b8:	f043 0201 	orr.w	r2, r3, #1
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 f96f 	bl	8000ca4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
  }
  
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	f003 0320 	and.w	r3, r3, #32
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d004      	beq.n	80009e2 <HAL_ADC_IRQHandler+0x1b2>
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d10b      	bne.n	80009fa <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )      
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	f000 80a0 	beq.w	8000b2e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )      
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f000 809a 	beq.w	8000b2e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d105      	bne.n	8000a12 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a0a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff feb5 	bl	8000786 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8000a1c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe9c 	bl	8000760 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000a28:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <HAL_ADC_IRQHandler+0x244>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d002      	beq.n	8000a3a <HAL_ADC_IRQHandler+0x20a>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	e000      	b.n	8000a3c <HAL_ADC_IRQHandler+0x20c>
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_ADC_IRQHandler+0x240>)
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	6812      	ldr	r2, [r2, #0]
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d008      	beq.n	8000a56 <HAL_ADC_IRQHandler+0x226>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d005      	beq.n	8000a56 <HAL_ADC_IRQHandler+0x226>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	2b06      	cmp	r3, #6
 8000a4e:	d002      	beq.n	8000a56 <HAL_ADC_IRQHandler+0x226>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	d104      	bne.n	8000a60 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	623b      	str	r3, [r7, #32]
 8000a5e:	e014      	b.n	8000a8a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a03      	ldr	r2, [pc, #12]	; (8000a74 <HAL_ADC_IRQHandler+0x244>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d00a      	beq.n	8000a80 <HAL_ADC_IRQHandler+0x250>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	e008      	b.n	8000a82 <HAL_ADC_IRQHandler+0x252>
 8000a70:	40022000 	.word	0x40022000
 8000a74:	40022100 	.word	0x40022100
 8000a78:	40022300 	.word	0x40022300
 8000a7c:	58026300 	.word	0x58026300
 8000a80:	4b84      	ldr	r3, [pc, #528]	; (8000c94 <HAL_ADC_IRQHandler+0x464>)
 8000a82:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d10c      	bne.n	8000aaa <HAL_ADC_IRQHandler+0x27a>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000a90:	6a3b      	ldr	r3, [r7, #32]
 8000a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d142      	bne.n	8000b20 <HAL_ADC_IRQHandler+0x2f0>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d03f      	beq.n	8000b20 <HAL_ADC_IRQHandler+0x2f0>
        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
         (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == 0UL)    )   )   )
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d13a      	bne.n	8000b20 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab4:	2b40      	cmp	r3, #64	; 0x40
 8000ab6:	d133      	bne.n	8000b20 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d12e      	bne.n	8000b20 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fe9f 	bl	800080a <LL_ADC_INJ_IsConversionOngoing>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d11a      	bne.n	8000b08 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000ae0:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d112      	bne.n	8000b20 <HAL_ADC_IRQHandler+0x2f0>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000afe:	f043 0201 	orr.w	r2, r3, #1
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	655a      	str	r2, [r3, #84]	; 0x54
 8000b06:	e00b      	b.n	8000b20 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b0c:	f043 0210 	orr.w	r2, r3, #16
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	655a      	str	r2, [r3, #84]	; 0x54
          
            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b18:	f043 0201 	orr.w	r2, r3, #1
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of 
              sequence.    */    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 f8dd 	bl	8000ce0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2260      	movs	r2, #96	; 0x60
 8000b2c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d011      	beq.n	8000b5c <HAL_ADC_IRQHandler+0x32c>
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d00c      	beq.n	8000b5c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f8b2 	bl	8000cb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d012      	beq.n	8000b8c <HAL_ADC_IRQHandler+0x35c>
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00d      	beq.n	8000b8c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f8c3 	bl	8000d08 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b8a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d012      	beq.n	8000bbc <HAL_ADC_IRQHandler+0x38c>
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00d      	beq.n	8000bbc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ba4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 f8b5 	bl	8000d1c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bba:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d043      	beq.n	8000c4e <HAL_ADC_IRQHandler+0x41e>
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d03e      	beq.n	8000c4e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
 8000bdc:	e021      	b.n	8000c22 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d015      	beq.n	8000c10 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled, 
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a2a      	ldr	r2, [pc, #168]	; (8000c94 <HAL_ADC_IRQHandler+0x464>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d004      	beq.n	8000bf8 <HAL_ADC_IRQHandler+0x3c8>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a29      	ldr	r2, [pc, #164]	; (8000c98 <HAL_ADC_IRQHandler+0x468>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d101      	bne.n	8000bfc <HAL_ADC_IRQHandler+0x3cc>
 8000bf8:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <HAL_ADC_IRQHandler+0x46c>)
 8000bfa:	e000      	b.n	8000bfe <HAL_ADC_IRQHandler+0x3ce>
 8000bfc:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <HAL_ADC_IRQHandler+0x470>)
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fde2 	bl	80007c8 <LL_ADC_GetMultiDMATransfer>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00b      	beq.n	8000c22 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c0e:	e008      	b.n	8000c22 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_ADC_IRQHandler+0x3f2>
      {
        overrun_error = 1UL;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      }
    }
        
    if (overrun_error == 1UL)
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d10e      	bne.n	8000c46 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c38:	f043 0202 	orr.w	r2, r3, #2
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 f843 	bl	8000ccc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2210      	movs	r2, #16
 8000c4c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF)) 
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d018      	beq.n	8000c8a <HAL_ADC_IRQHandler+0x45a>
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d013      	beq.n	8000c8a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c66:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	f043 0208 	orr.w	r2, r3, #8
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c82:	601a      	str	r2, [r3, #0]
    
    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f835 	bl	8000cf4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40022000 	.word	0x40022000
 8000c98:	40022100 	.word	0x40022100
 8000c9c:	40022300 	.word	0x40022300
 8000ca0:	58026300 	.word	0x58026300

08000ca4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef* hadc)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <__NVIC_SetPriorityGrouping+0x40>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x40>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00
 8000d88:	05fa0000 	.word	0x05fa0000

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff29 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff40 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff90 	bl	8000e38 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5f 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff33 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa4 	bl	8000ea0 <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f72:	4b89      	ldr	r3, [pc, #548]	; (8001198 <HAL_GPIO_Init+0x234>)
 8000f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f76:	e194      	b.n	80012a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8186 	beq.w	800129c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x3c>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b12      	cmp	r3, #18
 8000f9e:	d123      	bne.n	8000fe8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	69b9      	ldr	r1, [r7, #24]
 8000fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0203 	and.w	r2, r3, #3
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d00b      	beq.n	800103c <HAL_GPIO_Init+0xd8>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d007      	beq.n	800103c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001030:	2b11      	cmp	r3, #17
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b12      	cmp	r3, #18
 800103a:	d130      	bne.n	800109e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001072:	2201      	movs	r2, #1
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	f003 0201 	and.w	r2, r3, #1
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80e0 	beq.w	800129c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <HAL_GPIO_Init+0x238>)
 80010de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010e2:	4a2e      	ldr	r2, [pc, #184]	; (800119c <HAL_GPIO_Init+0x238>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <HAL_GPIO_Init+0x238>)
 80010ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <HAL_GPIO_Init+0x23c>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a20      	ldr	r2, [pc, #128]	; (80011a4 <HAL_GPIO_Init+0x240>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d052      	beq.n	80011cc <HAL_GPIO_Init+0x268>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_GPIO_Init+0x244>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d031      	beq.n	8001192 <HAL_GPIO_Init+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_GPIO_Init+0x248>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d02b      	beq.n	800118e <HAL_GPIO_Init+0x22a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_GPIO_Init+0x24c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d025      	beq.n	800118a <HAL_GPIO_Init+0x226>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <HAL_GPIO_Init+0x250>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d01f      	beq.n	8001186 <HAL_GPIO_Init+0x222>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <HAL_GPIO_Init+0x254>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x21e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <HAL_GPIO_Init+0x258>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x21a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_GPIO_Init+0x25c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x216>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <HAL_GPIO_Init+0x260>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x212>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_GPIO_Init+0x264>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x20e>
 800116e:	2309      	movs	r3, #9
 8001170:	e02d      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001172:	230a      	movs	r3, #10
 8001174:	e02b      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001176:	2308      	movs	r3, #8
 8001178:	e029      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800117a:	2307      	movs	r3, #7
 800117c:	e027      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800117e:	2306      	movs	r3, #6
 8001180:	e025      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001182:	2305      	movs	r3, #5
 8001184:	e023      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001186:	2304      	movs	r3, #4
 8001188:	e021      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800118a:	2303      	movs	r3, #3
 800118c:	e01f      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800118e:	2302      	movs	r3, #2
 8001190:	e01d      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001192:	2301      	movs	r3, #1
 8001194:	e01b      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001196:	bf00      	nop
 8001198:	58000080 	.word	0x58000080
 800119c:	58024400 	.word	0x58024400
 80011a0:	58000400 	.word	0x58000400
 80011a4:	58020000 	.word	0x58020000
 80011a8:	58020400 	.word	0x58020400
 80011ac:	58020800 	.word	0x58020800
 80011b0:	58020c00 	.word	0x58020c00
 80011b4:	58021000 	.word	0x58021000
 80011b8:	58021400 	.word	0x58021400
 80011bc:	58021800 	.word	0x58021800
 80011c0:	58021c00 	.word	0x58021c00
 80011c4:	58022000 	.word	0x58022000
 80011c8:	58022400 	.word	0x58022400
 80011cc:	2300      	movs	r3, #0
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	f002 0203 	and.w	r2, r2, #3
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	4093      	lsls	r3, r2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011de:	4938      	ldr	r1, [pc, #224]	; (80012c0 <HAL_GPIO_Init+0x35c>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800126e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	3301      	adds	r3, #1
 80012a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f47f ae63 	bne.w	8000f78 <HAL_GPIO_Init+0x14>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	58000400 	.word	0x58000400

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_PWREx_ConfigSupply+0x6c>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b04      	cmp	r3, #4
 800130a:	d008      	beq.n	800131e <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_PWREx_ConfigSupply+0x6c>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	429a      	cmp	r2, r3
 8001318:	d001      	beq.n	800131e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e01d      	b.n	800135a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_PWREx_ConfigSupply+0x6c>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f023 0207 	bic.w	r2, r3, #7
 8001326:	490f      	ldr	r1, [pc, #60]	; (8001364 <HAL_PWREx_ConfigSupply+0x6c>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4313      	orrs	r3, r2
 800132c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800132e:	f7ff f9dd 	bl	80006ec <HAL_GetTick>
 8001332:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8001334:	e009      	b.n	800134a <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8001336:	f7ff f9d9 	bl	80006ec <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001344:	d901      	bls.n	800134a <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e007      	b.n	800135a <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_PWREx_ConfigSupply+0x6c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001356:	d1ee      	bne.n	8001336 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	58024800 	.word	0x58024800

08001368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e3a4      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8087 	beq.w	8001496 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001388:	4b9a      	ldr	r3, [pc, #616]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001392:	4b98      	ldr	r3, [pc, #608]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	2b10      	cmp	r3, #16
 800139c:	d007      	beq.n	80013ae <HAL_RCC_OscConfig+0x46>
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	2b18      	cmp	r3, #24
 80013a2:	d110      	bne.n	80013c6 <HAL_RCC_OscConfig+0x5e>
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d10b      	bne.n	80013c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ae:	4b91      	ldr	r3, [pc, #580]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d06c      	beq.n	8001494 <HAL_RCC_OscConfig+0x12c>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d168      	bne.n	8001494 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e37e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x76>
 80013d0:	4b88      	ldr	r3, [pc, #544]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a87      	ldr	r2, [pc, #540]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80013d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e02e      	b.n	800143c <HAL_RCC_OscConfig+0xd4>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x98>
 80013e6:	4b83      	ldr	r3, [pc, #524]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a82      	ldr	r2, [pc, #520]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80013ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b80      	ldr	r3, [pc, #512]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7f      	ldr	r2, [pc, #508]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80013f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e01d      	b.n	800143c <HAL_RCC_OscConfig+0xd4>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0xbc>
 800140a:	4b7a      	ldr	r3, [pc, #488]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a79      	ldr	r2, [pc, #484]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b77      	ldr	r3, [pc, #476]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a76      	ldr	r2, [pc, #472]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0xd4>
 8001424:	4b73      	ldr	r3, [pc, #460]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a72      	ldr	r2, [pc, #456]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b70      	ldr	r3, [pc, #448]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a6f      	ldr	r2, [pc, #444]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff f952 	bl	80006ec <HAL_GetTick>
 8001448:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff f94e 	bl	80006ec <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e332      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800145e:	4b65      	ldr	r3, [pc, #404]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0xe4>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff f93e 	bl	80006ec <HAL_GetTick>
 8001470:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff f93a 	bl	80006ec <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	; 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e31e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001486:	4b5b      	ldr	r3, [pc, #364]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x10c>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 80b0 	beq.w	8001604 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a4:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014ac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014ae:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <HAL_RCC_OscConfig+0x162>
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b18      	cmp	r3, #24
 80014be:	d149      	bne.n	8001554 <HAL_RCC_OscConfig+0x1ec>
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d144      	bne.n	8001554 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ca:	4b4a      	ldr	r3, [pc, #296]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_RCC_OscConfig+0x17a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e2f0      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014e2:	4b44      	ldr	r3, [pc, #272]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 0219 	bic.w	r2, r3, #25
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	4941      	ldr	r1, [pc, #260]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff f8fa 	bl	80006ec <HAL_GetTick>
 80014f8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff f8f6 	bl	80006ec <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e2da      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151a:	f7ff f915 	bl	8000748 <HAL_GetREVID>
 800151e:	4602      	mov	r2, r0
 8001520:	f241 0303 	movw	r3, #4099	; 0x1003
 8001524:	429a      	cmp	r2, r3
 8001526:	d80a      	bhi.n	800153e <HAL_RCC_OscConfig+0x1d6>
 8001528:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	031b      	lsls	r3, r3, #12
 8001536:	492f      	ldr	r1, [pc, #188]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153c:	e062      	b.n	8001604 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	061b      	lsls	r3, r3, #24
 800154c:	4929      	ldr	r1, [pc, #164]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 800154e:	4313      	orrs	r3, r2
 8001550:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001552:	e057      	b.n	8001604 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d038      	beq.n	80015ce <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 0219 	bic.w	r2, r3, #25
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4922      	ldr	r1, [pc, #136]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff f8bd 	bl	80006ec <HAL_GetTick>
 8001572:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff f8b9 	bl	80006ec <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e29d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001594:	f7ff f8d8 	bl	8000748 <HAL_GetREVID>
 8001598:	4602      	mov	r2, r0
 800159a:	f241 0303 	movw	r3, #4099	; 0x1003
 800159e:	429a      	cmp	r2, r3
 80015a0:	d80a      	bhi.n	80015b8 <HAL_RCC_OscConfig+0x250>
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	031b      	lsls	r3, r3, #12
 80015b0:	4910      	ldr	r1, [pc, #64]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
 80015b6:	e025      	b.n	8001604 <HAL_RCC_OscConfig+0x29c>
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	061b      	lsls	r3, r3, #24
 80015c6:	490b      	ldr	r1, [pc, #44]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
 80015cc:	e01a      	b.n	8001604 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_RCC_OscConfig+0x28c>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff f887 	bl	80006ec <HAL_GetTick>
 80015de:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015e0:	e00a      	b.n	80015f8 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff f883 	bl	80006ec <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d903      	bls.n	80015f8 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e267      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
 80015f4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015f8:	4ba0      	ldr	r3, [pc, #640]	; (800187c <HAL_RCC_OscConfig+0x514>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1ee      	bne.n	80015e2 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 808f 	beq.w	8001730 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001612:	4b9a      	ldr	r3, [pc, #616]	; (800187c <HAL_RCC_OscConfig+0x514>)
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800161a:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800161c:	4b97      	ldr	r3, [pc, #604]	; (800187c <HAL_RCC_OscConfig+0x514>)
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2b08      	cmp	r3, #8
 8001626:	d007      	beq.n	8001638 <HAL_RCC_OscConfig+0x2d0>
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	2b18      	cmp	r3, #24
 800162c:	d12d      	bne.n	800168a <HAL_RCC_OscConfig+0x322>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b01      	cmp	r3, #1
 8001636:	d128      	bne.n	800168a <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001638:	4b90      	ldr	r3, [pc, #576]	; (800187c <HAL_RCC_OscConfig+0x514>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_OscConfig+0x2e8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	2b80      	cmp	r3, #128	; 0x80
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e239      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001650:	f7ff f87a 	bl	8000748 <HAL_GetREVID>
 8001654:	4602      	mov	r2, r0
 8001656:	f241 0303 	movw	r3, #4099	; 0x1003
 800165a:	429a      	cmp	r2, r3
 800165c:	d80a      	bhi.n	8001674 <HAL_RCC_OscConfig+0x30c>
 800165e:	4b87      	ldr	r3, [pc, #540]	; (800187c <HAL_RCC_OscConfig+0x514>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	069b      	lsls	r3, r3, #26
 800166c:	4983      	ldr	r1, [pc, #524]	; (800187c <HAL_RCC_OscConfig+0x514>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001672:	e05d      	b.n	8001730 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001674:	4b81      	ldr	r3, [pc, #516]	; (800187c <HAL_RCC_OscConfig+0x514>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	061b      	lsls	r3, r3, #24
 8001682:	497e      	ldr	r1, [pc, #504]	; (800187c <HAL_RCC_OscConfig+0x514>)
 8001684:	4313      	orrs	r3, r2
 8001686:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001688:	e052      	b.n	8001730 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d035      	beq.n	80016fe <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001692:	4b7a      	ldr	r3, [pc, #488]	; (800187c <HAL_RCC_OscConfig+0x514>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a79      	ldr	r2, [pc, #484]	; (800187c <HAL_RCC_OscConfig+0x514>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169e:	f7ff f825 	bl	80006ec <HAL_GetTick>
 80016a2:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80016a6:	f7ff f821 	bl	80006ec <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e205      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016b8:	4b70      	ldr	r3, [pc, #448]	; (800187c <HAL_RCC_OscConfig+0x514>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016c4:	f7ff f840 	bl	8000748 <HAL_GetREVID>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f241 0303 	movw	r3, #4099	; 0x1003
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d80a      	bhi.n	80016e8 <HAL_RCC_OscConfig+0x380>
 80016d2:	4b6a      	ldr	r3, [pc, #424]	; (800187c <HAL_RCC_OscConfig+0x514>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	069b      	lsls	r3, r3, #26
 80016e0:	4966      	ldr	r1, [pc, #408]	; (800187c <HAL_RCC_OscConfig+0x514>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
 80016e6:	e023      	b.n	8001730 <HAL_RCC_OscConfig+0x3c8>
 80016e8:	4b64      	ldr	r3, [pc, #400]	; (800187c <HAL_RCC_OscConfig+0x514>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	061b      	lsls	r3, r3, #24
 80016f6:	4961      	ldr	r1, [pc, #388]	; (800187c <HAL_RCC_OscConfig+0x514>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60cb      	str	r3, [r1, #12]
 80016fc:	e018      	b.n	8001730 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80016fe:	4b5f      	ldr	r3, [pc, #380]	; (800187c <HAL_RCC_OscConfig+0x514>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a5e      	ldr	r2, [pc, #376]	; (800187c <HAL_RCC_OscConfig+0x514>)
 8001704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7fe ffef 	bl	80006ec <HAL_GetTick>
 800170e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001712:	f7fe ffeb 	bl	80006ec <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1cf      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001724:	4b55      	ldr	r3, [pc, #340]	; (800187c <HAL_RCC_OscConfig+0x514>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d036      	beq.n	80017aa <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d019      	beq.n	8001778 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001744:	4b4d      	ldr	r3, [pc, #308]	; (800187c <HAL_RCC_OscConfig+0x514>)
 8001746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001748:	4a4c      	ldr	r2, [pc, #304]	; (800187c <HAL_RCC_OscConfig+0x514>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7fe ffcc 	bl	80006ec <HAL_GetTick>
 8001754:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001758:	f7fe ffc8 	bl	80006ec <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1ac      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800176a:	4b44      	ldr	r3, [pc, #272]	; (800187c <HAL_RCC_OscConfig+0x514>)
 800176c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x3f0>
 8001776:	e018      	b.n	80017aa <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001778:	4b40      	ldr	r3, [pc, #256]	; (800187c <HAL_RCC_OscConfig+0x514>)
 800177a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177c:	4a3f      	ldr	r2, [pc, #252]	; (800187c <HAL_RCC_OscConfig+0x514>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7fe ffb2 	bl	80006ec <HAL_GetTick>
 8001788:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178c:	f7fe ffae 	bl	80006ec <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e192      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <HAL_RCC_OscConfig+0x514>)
 80017a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0320 	and.w	r3, r3, #32
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d036      	beq.n	8001824 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d019      	beq.n	80017f2 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017be:	4b2f      	ldr	r3, [pc, #188]	; (800187c <HAL_RCC_OscConfig+0x514>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a2e      	ldr	r2, [pc, #184]	; (800187c <HAL_RCC_OscConfig+0x514>)
 80017c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017ca:	f7fe ff8f 	bl	80006ec <HAL_GetTick>
 80017ce:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80017d2:	f7fe ff8b 	bl	80006ec <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e16f      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_RCC_OscConfig+0x514>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x46a>
 80017f0:	e018      	b.n	8001824 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_RCC_OscConfig+0x514>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a21      	ldr	r2, [pc, #132]	; (800187c <HAL_RCC_OscConfig+0x514>)
 80017f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017fe:	f7fe ff75 	bl	80006ec <HAL_GetTick>
 8001802:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001806:	f7fe ff71 	bl	80006ec <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e155      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_RCC_OscConfig+0x514>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8086 	beq.w	800193e <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_RCC_OscConfig+0x518>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_RCC_OscConfig+0x518>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800183e:	f7fe ff55 	bl	80006ec <HAL_GetTick>
 8001842:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001846:	f7fe ff51 	bl	80006ec <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b64      	cmp	r3, #100	; 0x64
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e135      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_RCC_OscConfig+0x518>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10b      	bne.n	8001884 <HAL_RCC_OscConfig+0x51c>
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_RCC_OscConfig+0x514>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	4a02      	ldr	r2, [pc, #8]	; (800187c <HAL_RCC_OscConfig+0x514>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	e032      	b.n	80018e0 <HAL_RCC_OscConfig+0x578>
 800187a:	bf00      	nop
 800187c:	58024400 	.word	0x58024400
 8001880:	58024800 	.word	0x58024800
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x53e>
 800188c:	4b8f      	ldr	r3, [pc, #572]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a8e      	ldr	r2, [pc, #568]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
 8001898:	4b8c      	ldr	r3, [pc, #560]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	4a8b      	ldr	r2, [pc, #556]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 800189e:	f023 0304 	bic.w	r3, r3, #4
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70
 80018a4:	e01c      	b.n	80018e0 <HAL_RCC_OscConfig+0x578>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x560>
 80018ae:	4b87      	ldr	r3, [pc, #540]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a86      	ldr	r2, [pc, #536]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	4b84      	ldr	r3, [pc, #528]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a83      	ldr	r2, [pc, #524]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0x578>
 80018c8:	4b80      	ldr	r3, [pc, #512]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	4a7f      	ldr	r2, [pc, #508]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	6713      	str	r3, [r2, #112]	; 0x70
 80018d4:	4b7d      	ldr	r3, [pc, #500]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	4a7c      	ldr	r2, [pc, #496]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80018da:	f023 0304 	bic.w	r3, r3, #4
 80018de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d015      	beq.n	8001914 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7fe ff00 	bl	80006ec <HAL_GetTick>
 80018ec:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7fe fefc 	bl	80006ec <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e0de      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001906:	4b71      	ldr	r3, [pc, #452]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0ee      	beq.n	80018f0 <HAL_RCC_OscConfig+0x588>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7fe feea 	bl	80006ec <HAL_GetTick>
 8001918:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800191a:	e00a      	b.n	8001932 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191c:	f7fe fee6 	bl	80006ec <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e0c8      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001932:	4b66      	ldr	r3, [pc, #408]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ee      	bne.n	800191c <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80bd 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001948:	4b60      	ldr	r3, [pc, #384]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001950:	2b18      	cmp	r3, #24
 8001952:	f000 80b4 	beq.w	8001abe <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	2b02      	cmp	r3, #2
 800195c:	f040 8095 	bne.w	8001a8a <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001960:	4b5a      	ldr	r3, [pc, #360]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a59      	ldr	r2, [pc, #356]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800196a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7fe febe 	bl	80006ec <HAL_GetTick>
 8001970:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001974:	f7fe feba 	bl	80006ec <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e09e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001986:	4b51      	ldr	r3, [pc, #324]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001992:	4b4e      	ldr	r3, [pc, #312]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001996:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <HAL_RCC_OscConfig+0x768>)
 8001998:	4013      	ands	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	430a      	orrs	r2, r1
 80019a6:	4949      	ldr	r1, [pc, #292]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	628b      	str	r3, [r1, #40]	; 0x28
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	3b01      	subs	r3, #1
 80019b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ba:	3b01      	subs	r3, #1
 80019bc:	025b      	lsls	r3, r3, #9
 80019be:	b29b      	uxth	r3, r3
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	3b01      	subs	r3, #1
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d4:	3b01      	subs	r3, #1
 80019d6:	061b      	lsls	r3, r3, #24
 80019d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80019dc:	493b      	ldr	r1, [pc, #236]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	4a39      	ldr	r2, [pc, #228]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80019f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f2:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019fa:	00d2      	lsls	r2, r2, #3
 80019fc:	4933      	ldr	r1, [pc, #204]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a02:	4b32      	ldr	r3, [pc, #200]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	f023 020c 	bic.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	492f      	ldr	r1, [pc, #188]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a14:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	f023 0202 	bic.w	r2, r3, #2
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	492a      	ldr	r1, [pc, #168]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a26:	4b29      	ldr	r3, [pc, #164]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	4a28      	ldr	r2, [pc, #160]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	4a22      	ldr	r2, [pc, #136]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7fe fe43 	bl	80006ec <HAL_GetTick>
 8001a66:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7fe fe3f 	bl	80006ec <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e023      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x702>
 8001a88:	e01b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7fe fe29 	bl	80006ec <HAL_GetTick>
 8001a9a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7fe fe25 	bl	80006ec <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e009      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_RCC_OscConfig+0x764>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x736>
 8001abc:	e001      	b.n	8001ac2 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	58024400 	.word	0x58024400
 8001ad0:	fffffc0c 	.word	0xfffffc0c
 8001ad4:	ffff0007 	.word	0xffff0007

08001ad8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e18b      	b.n	8001e04 <HAL_RCC_ClockConfig+0x32c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aec:	4b8a      	ldr	r3, [pc, #552]	; (8001d18 <HAL_RCC_ClockConfig+0x240>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d910      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b87      	ldr	r3, [pc, #540]	; (8001d18 <HAL_RCC_ClockConfig+0x240>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 020f 	bic.w	r2, r3, #15
 8001b02:	4985      	ldr	r1, [pc, #532]	; (8001d18 <HAL_RCC_ClockConfig+0x240>)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b83      	ldr	r3, [pc, #524]	; (8001d18 <HAL_RCC_ClockConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e173      	b.n	8001e04 <HAL_RCC_ClockConfig+0x32c>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d010      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	4b7b      	ldr	r3, [pc, #492]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d908      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b38:	4b78      	ldr	r3, [pc, #480]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	4975      	ldr	r1, [pc, #468]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d010      	beq.n	8001b78 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	4b70      	ldr	r3, [pc, #448]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d908      	bls.n	8001b78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b66:	4b6d      	ldr	r3, [pc, #436]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	496a      	ldr	r1, [pc, #424]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699a      	ldr	r2, [r3, #24]
 8001b88:	4b64      	ldr	r3, [pc, #400]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d908      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b94:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	495e      	ldr	r1, [pc, #376]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d010      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d908      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001bc2:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4953      	ldr	r1, [pc, #332]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d010      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d908      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf0:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f023 020f 	bic.w	r2, r3, #15
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4947      	ldr	r1, [pc, #284]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d055      	beq.n	8001cba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c0e:	4b43      	ldr	r3, [pc, #268]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4940      	ldr	r1, [pc, #256]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c28:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d121      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0e5      	b.n	8001e04 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d107      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d115      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0d9      	b.n	8001e04 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d107      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0cd      	b.n	8001e04 <HAL_RCC_ClockConfig+0x32c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c68:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0c5      	b.n	8001e04 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	f023 0207 	bic.w	r2, r3, #7
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4925      	ldr	r1, [pc, #148]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8a:	f7fe fd2f 	bl	80006ec <HAL_GetTick>
 8001c8e:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c92:	f7fe fd2b 	bl	80006ec <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0ad      	b.n	8001e04 <HAL_RCC_ClockConfig+0x32c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d1eb      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d010      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d208      	bcs.n	8001ce8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f023 020f 	bic.w	r2, r3, #15
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	490e      	ldr	r1, [pc, #56]	; (8001d1c <HAL_RCC_ClockConfig+0x244>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_ClockConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d214      	bcs.n	8001d20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_RCC_ClockConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 020f 	bic.w	r2, r3, #15
 8001cfe:	4906      	ldr	r1, [pc, #24]	; (8001d18 <HAL_RCC_ClockConfig+0x240>)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <HAL_RCC_ClockConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e075      	b.n	8001e04 <HAL_RCC_ClockConfig+0x32c>
 8001d18:	52002000 	.word	0x52002000
 8001d1c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d010      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d208      	bcs.n	8001d4e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	4930      	ldr	r1, [pc, #192]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d010      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d208      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	4925      	ldr	r1, [pc, #148]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d010      	beq.n	8001daa <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d208      	bcs.n	8001daa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4919      	ldr	r1, [pc, #100]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d208      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	490e      	ldr	r1, [pc, #56]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dd8:	f000 f81e 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001ddc:	4601      	mov	r1, r0
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_ClockConfig+0x334>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	4a09      	ldr	r2, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x338>)
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	fa21 f303 	lsr.w	r3, r1, r3
 8001df4:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <HAL_RCC_ClockConfig+0x33c>)
 8001df6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7fe fc2d 	bl	8000658 <HAL_InitTick>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001e02:	7afb      	ldrb	r3, [r7, #11]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	0800b91c 	.word	0x0800b91c
 8001e14:	24000008 	.word	0x24000008

08001e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e1e:	4baf      	ldr	r3, [pc, #700]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e26:	2b18      	cmp	r3, #24
 8001e28:	f200 814e 	bhi.w	80020c8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001e2c:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e32:	bf00      	nop
 8001e34:	08001e99 	.word	0x08001e99
 8001e38:	080020c9 	.word	0x080020c9
 8001e3c:	080020c9 	.word	0x080020c9
 8001e40:	080020c9 	.word	0x080020c9
 8001e44:	080020c9 	.word	0x080020c9
 8001e48:	080020c9 	.word	0x080020c9
 8001e4c:	080020c9 	.word	0x080020c9
 8001e50:	080020c9 	.word	0x080020c9
 8001e54:	08001ebf 	.word	0x08001ebf
 8001e58:	080020c9 	.word	0x080020c9
 8001e5c:	080020c9 	.word	0x080020c9
 8001e60:	080020c9 	.word	0x080020c9
 8001e64:	080020c9 	.word	0x080020c9
 8001e68:	080020c9 	.word	0x080020c9
 8001e6c:	080020c9 	.word	0x080020c9
 8001e70:	080020c9 	.word	0x080020c9
 8001e74:	08001ec5 	.word	0x08001ec5
 8001e78:	080020c9 	.word	0x080020c9
 8001e7c:	080020c9 	.word	0x080020c9
 8001e80:	080020c9 	.word	0x080020c9
 8001e84:	080020c9 	.word	0x080020c9
 8001e88:	080020c9 	.word	0x080020c9
 8001e8c:	080020c9 	.word	0x080020c9
 8001e90:	080020c9 	.word	0x080020c9
 8001e94:	08001ecb 	.word	0x08001ecb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e98:	4b90      	ldr	r3, [pc, #576]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d009      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ea4:	4b8d      	ldr	r3, [pc, #564]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	08db      	lsrs	r3, r3, #3
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	4a8c      	ldr	r2, [pc, #560]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001eb6:	e10a      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001eb8:	4b89      	ldr	r3, [pc, #548]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001eba:	61bb      	str	r3, [r7, #24]
    break;
 8001ebc:	e107      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001ec0:	61bb      	str	r3, [r7, #24]
    break;
 8001ec2:	e104      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001ec4:	4b88      	ldr	r3, [pc, #544]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001ec6:	61bb      	str	r3, [r7, #24]
    break;
 8001ec8:	e101      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001eca:	4b84      	ldr	r3, [pc, #528]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001ed4:	4b81      	ldr	r3, [pc, #516]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ede:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ee0:	4b7e      	ldr	r3, [pc, #504]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001eea:	4b7c      	ldr	r3, [pc, #496]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eee:	08db      	lsrs	r3, r3, #3
 8001ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f02:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80da 	beq.w	80020c2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d05a      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0x1b2>
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d302      	bcc.n	8001f1e <HAL_RCC_GetSysClockFreq+0x106>
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d078      	beq.n	800200e <HAL_RCC_GetSysClockFreq+0x1f6>
 8001f1c:	e099      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f1e:	4b6f      	ldr	r3, [pc, #444]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d02d      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f2a:	4b6c      	ldr	r3, [pc, #432]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	08db      	lsrs	r3, r3, #3
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	4a6a      	ldr	r2, [pc, #424]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f54:	4b61      	ldr	r3, [pc, #388]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f64:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f68:	eddf 5a60 	vldr	s11, [pc, #384]	; 80020ec <HAL_RCC_GetSysClockFreq+0x2d4>
 8001f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f80:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001f84:	e087      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f90:	eddf 6a57 	vldr	s13, [pc, #348]	; 80020f0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8001f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fac:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80020ec <HAL_RCC_GetSysClockFreq+0x2d4>
 8001fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fc8:	e065      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd4:	eddf 6a47 	vldr	s13, [pc, #284]	; 80020f4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fec:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ff0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80020ec <HAL_RCC_GetSysClockFreq+0x2d4>
 8001ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ffc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002008:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800200c:	e043      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002018:	eddf 6a37 	vldr	s13, [pc, #220]	; 80020f8 <HAL_RCC_GetSysClockFreq+0x2e0>
 800201c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002020:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002030:	ed97 6a02 	vldr	s12, [r7, #8]
 8002034:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80020ec <HAL_RCC_GetSysClockFreq+0x2d4>
 8002038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800203c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002050:	e021      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80020f4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002064:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002074:	ed97 6a02 	vldr	s12, [r7, #8]
 8002078:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80020ec <HAL_RCC_GetSysClockFreq+0x2d4>
 800207c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800208c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002090:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002094:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	0a5b      	lsrs	r3, r3, #9
 800209c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020a0:	3301      	adds	r3, #1
 80020a2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	ee07 3a90 	vmov	s15, r3
 80020aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80020b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ba:	ee17 3a90 	vmov	r3, s15
 80020be:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80020c0:	e005      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
    break;
 80020c6:	e002      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80020ca:	61bb      	str	r3, [r7, #24]
    break;
 80020cc:	bf00      	nop
  }

  return sysclockfreq;
 80020ce:	69bb      	ldr	r3, [r7, #24]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3724      	adds	r7, #36	; 0x24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	58024400 	.word	0x58024400
 80020e0:	03d09000 	.word	0x03d09000
 80020e4:	003d0900 	.word	0x003d0900
 80020e8:	007a1200 	.word	0x007a1200
 80020ec:	46000000 	.word	0x46000000
 80020f0:	4c742400 	.word	0x4c742400
 80020f4:	4a742400 	.word	0x4a742400
 80020f8:	4af42400 	.word	0x4af42400

080020fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002100:	f001 f9e2 	bl	80034c8 <HAL_RCCEx_GetD1SysClockFreq>
 8002104:	4601      	mov	r1, r0
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_RCC_GetHCLKFreq+0x30>)
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	fa21 f303 	lsr.w	r3, r1, r3
 800211a:	4a05      	ldr	r2, [pc, #20]	; (8002130 <HAL_RCC_GetHCLKFreq+0x34>)
 800211c:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <HAL_RCC_GetHCLKFreq+0x34>)
 8002120:	681b      	ldr	r3, [r3, #0]
}
 8002122:	4618      	mov	r0, r3
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	58024400 	.word	0x58024400
 800212c:	0800b91c 	.word	0x0800b91c
 8002130:	2400000c 	.word	0x2400000c

08002134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002138:	f7ff ffe0 	bl	80020fc <HAL_RCC_GetHCLKFreq>
 800213c:	4601      	mov	r1, r0
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4a04      	ldr	r2, [pc, #16]	; (800215c <HAL_RCC_GetPCLK1Freq+0x28>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002154:	4618      	mov	r0, r3
 8002156:	bd80      	pop	{r7, pc}
 8002158:	58024400 	.word	0x58024400
 800215c:	0800b91c 	.word	0x0800b91c

08002160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002164:	f7ff ffca 	bl	80020fc <HAL_RCC_GetHCLKFreq>
 8002168:	4601      	mov	r1, r0
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	58024400 	.word	0x58024400
 8002188:	0800b91c 	.word	0x0800b91c

0800218c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002194:	2300      	movs	r3, #0
 8002196:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002198:	2300      	movs	r3, #0
 800219a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d03d      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021b0:	d013      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80021b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021b6:	d802      	bhi.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x32>
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80021bc:	e01f      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x72>
 80021be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021c2:	d013      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x60>
 80021c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80021c8:	d01c      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80021ca:	e018      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021cc:	4baf      	ldr	r3, [pc, #700]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	4aae      	ldr	r2, [pc, #696]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021d8:	e015      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3304      	adds	r3, #4
 80021de:	2102      	movs	r1, #2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f001 f98d 	bl	8003500 <RCCEx_PLL2_Config>
 80021e6:	4603      	mov	r3, r0
 80021e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021ea:	e00c      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3324      	adds	r3, #36	; 0x24
 80021f0:	2102      	movs	r1, #2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f001 fa36 	bl	8003664 <RCCEx_PLL3_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021fc:	e003      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	75fb      	strb	r3, [r7, #23]
      break;
 8002202:	e000      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800220c:	4b9f      	ldr	r3, [pc, #636]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800220e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002218:	499c      	ldr	r1, [pc, #624]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800221a:	4313      	orrs	r3, r2
 800221c:	650b      	str	r3, [r1, #80]	; 0x50
 800221e:	e001      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d03d      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	2b04      	cmp	r3, #4
 8002236:	d826      	bhi.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002238:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223e:	bf00      	nop
 8002240:	08002255 	.word	0x08002255
 8002244:	08002263 	.word	0x08002263
 8002248:	08002275 	.word	0x08002275
 800224c:	0800228d 	.word	0x0800228d
 8002250:	0800228d 	.word	0x0800228d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002254:	4b8d      	ldr	r3, [pc, #564]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	4a8c      	ldr	r2, [pc, #560]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800225a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002260:	e015      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f001 f949 	bl	8003500 <RCCEx_PLL2_Config>
 800226e:	4603      	mov	r3, r0
 8002270:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002272:	e00c      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3324      	adds	r3, #36	; 0x24
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f001 f9f2 	bl	8003664 <RCCEx_PLL3_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002284:	e003      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
      break;
 800228a:	e000      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800228c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800228e:	7dfb      	ldrb	r3, [r7, #23]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002294:	4b7d      	ldr	r3, [pc, #500]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002298:	f023 0207 	bic.w	r2, r3, #7
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	497a      	ldr	r1, [pc, #488]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	650b      	str	r3, [r1, #80]	; 0x50
 80022a6:	e001      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
 80022aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d03e      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	2b80      	cmp	r3, #128	; 0x80
 80022be:	d01c      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80022c0:	2b80      	cmp	r3, #128	; 0x80
 80022c2:	d804      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x142>
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d00d      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80022cc:	e01e      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x180>
 80022ce:	2bc0      	cmp	r3, #192	; 0xc0
 80022d0:	d01f      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80022d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d6:	d01e      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80022d8:	e018      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022da:	4b6c      	ldr	r3, [pc, #432]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	4a6b      	ldr	r2, [pc, #428]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80022e6:	e017      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f001 f906 	bl	8003500 <RCCEx_PLL2_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80022f8:	e00e      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3324      	adds	r3, #36	; 0x24
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f001 f9af 	bl	8003664 <RCCEx_PLL3_Config>
 8002306:	4603      	mov	r3, r0
 8002308:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800230a:	e005      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	75fb      	strb	r3, [r7, #23]
      break;
 8002310:	e002      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002312:	bf00      	nop
 8002314:	e000      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002318:	7dfb      	ldrb	r3, [r7, #23]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800231e:	4b5b      	ldr	r3, [pc, #364]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002322:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	4958      	ldr	r1, [pc, #352]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800232c:	4313      	orrs	r3, r2
 800232e:	650b      	str	r3, [r1, #80]	; 0x50
 8002330:	e001      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233e:	2b00      	cmp	r3, #0
 8002340:	d044      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234c:	d01f      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800234e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002352:	d805      	bhi.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002358:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800235c:	d00e      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800235e:	e01f      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002360:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002364:	d01f      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002366:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800236a:	d01e      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800236c:	e018      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800236e:	4b47      	ldr	r3, [pc, #284]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	4a46      	ldr	r2, [pc, #280]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002378:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800237a:	e017      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3304      	adds	r3, #4
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f001 f8bc 	bl	8003500 <RCCEx_PLL2_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800238c:	e00e      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3324      	adds	r3, #36	; 0x24
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f001 f965 	bl	8003664 <RCCEx_PLL3_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800239e:	e005      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	75fb      	strb	r3, [r7, #23]
      break;
 80023a4:	e002      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80023a6:	bf00      	nop
 80023a8:	e000      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80023aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ac:	7dfb      	ldrb	r3, [r7, #23]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80023b2:	4b36      	ldr	r3, [pc, #216]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80023c0:	4932      	ldr	r1, [pc, #200]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	658b      	str	r3, [r1, #88]	; 0x58
 80023c6:	e001      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d044      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80023de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023e2:	d01f      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80023e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023e8:	d805      	bhi.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80023ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f2:	d00e      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80023f4:	e01f      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80023f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023fa:	d01f      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80023fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002400:	d01e      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002402:	e018      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	4a20      	ldr	r2, [pc, #128]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800240a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800240e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002410:	e017      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f001 f871 	bl	8003500 <RCCEx_PLL2_Config>
 800241e:	4603      	mov	r3, r0
 8002420:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002422:	e00e      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3324      	adds	r3, #36	; 0x24
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f001 f91a 	bl	8003664 <RCCEx_PLL3_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002434:	e005      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
      break;
 800243a:	e002      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800243c:	bf00      	nop
 800243e:	e000      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002442:	7dfb      	ldrb	r3, [r7, #23]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002456:	490d      	ldr	r1, [pc, #52]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002458:	4313      	orrs	r3, r2
 800245a:	658b      	str	r3, [r1, #88]	; 0x58
 800245c:	e001      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d035      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002472:	2b10      	cmp	r3, #16
 8002474:	d00c      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002476:	2b10      	cmp	r3, #16
 8002478:	d802      	bhi.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01b      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800247e:	e017      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002480:	2b20      	cmp	r3, #32
 8002482:	d00c      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002484:	2b30      	cmp	r3, #48	; 0x30
 8002486:	d018      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002488:	e012      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800248a:	bf00      	nop
 800248c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002490:	4baf      	ldr	r3, [pc, #700]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	4aae      	ldr	r2, [pc, #696]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800249c:	e00e      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2102      	movs	r1, #2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 f82b 	bl	8003500 <RCCEx_PLL2_Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80024ae:	e005      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	75fb      	strb	r3, [r7, #23]
      break;
 80024b4:	e002      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80024ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80024c2:	4ba3      	ldr	r3, [pc, #652]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ce:	49a0      	ldr	r1, [pc, #640]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80024d4:	e001      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d042      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ee:	d01f      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80024f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f4:	d805      	bhi.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80024fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fe:	d00e      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002500:	e01f      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002502:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002506:	d01f      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800250c:	d01e      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800250e:	e018      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002510:	4b8f      	ldr	r3, [pc, #572]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	4a8e      	ldr	r2, [pc, #568]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800251c:	e017      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3304      	adds	r3, #4
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f000 ffeb 	bl	8003500 <RCCEx_PLL2_Config>
 800252a:	4603      	mov	r3, r0
 800252c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800252e:	e00e      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3324      	adds	r3, #36	; 0x24
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f001 f894 	bl	8003664 <RCCEx_PLL3_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002540:	e005      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
      break;
 8002546:	e002      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002548:	bf00      	nop
 800254a:	e000      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800254c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002554:	4b7e      	ldr	r3, [pc, #504]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002558:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	497b      	ldr	r1, [pc, #492]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	650b      	str	r3, [r1, #80]	; 0x50
 8002566:	e001      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d042      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002580:	d01b      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002586:	d805      	bhi.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002588:	2b00      	cmp	r3, #0
 800258a:	d022      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002592:	e01b      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002598:	d01d      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800259a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800259e:	d01c      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80025a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025a4:	d01b      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x452>
 80025a6:	e011      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3304      	adds	r3, #4
 80025ac:	2101      	movs	r1, #1
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 ffa6 	bl	8003500 <RCCEx_PLL2_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80025b8:	e012      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3324      	adds	r3, #36	; 0x24
 80025be:	2101      	movs	r1, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 f84f 	bl	8003664 <RCCEx_PLL3_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80025ca:	e009      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	75fb      	strb	r3, [r7, #23]
      break;
 80025d0:	e006      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80025d2:	bf00      	nop
 80025d4:	e004      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80025d6:	bf00      	nop
 80025d8:	e002      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80025da:	bf00      	nop
 80025dc:	e000      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80025de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80025e6:	4b5a      	ldr	r3, [pc, #360]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	4957      	ldr	r1, [pc, #348]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	650b      	str	r3, [r1, #80]	; 0x50
 80025f8:	e001      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d044      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002614:	d01b      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800261a:	d805      	bhi.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800261c:	2b00      	cmp	r3, #0
 800261e:	d022      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002620:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002626:	e01b      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262c:	d01d      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800262e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002632:	d01c      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002634:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002638:	d01b      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800263a:	e011      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	2101      	movs	r1, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f000 ff5c 	bl	8003500 <RCCEx_PLL2_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800264c:	e012      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3324      	adds	r3, #36	; 0x24
 8002652:	2101      	movs	r1, #1
 8002654:	4618      	mov	r0, r3
 8002656:	f001 f805 	bl	8003664 <RCCEx_PLL3_Config>
 800265a:	4603      	mov	r3, r0
 800265c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800265e:	e009      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	75fb      	strb	r3, [r7, #23]
      break;
 8002664:	e006      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002666:	bf00      	nop
 8002668:	e004      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800266a:	bf00      	nop
 800266c:	e002      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800267a:	4b35      	ldr	r3, [pc, #212]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002688:	4931      	ldr	r1, [pc, #196]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	658b      	str	r3, [r1, #88]	; 0x58
 800268e:	e001      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d02d      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026a8:	d005      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80026aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ae:	d009      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80026b4:	e00f      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	4a25      	ldr	r2, [pc, #148]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80026c2:	e00c      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3304      	adds	r3, #4
 80026c8:	2101      	movs	r1, #1
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 ff18 	bl	8003500 <RCCEx_PLL2_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80026d4:	e003      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
      break;
 80026da:	e000      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80026dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80026e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f0:	4917      	ldr	r1, [pc, #92]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	650b      	str	r3, [r1, #80]	; 0x50
 80026f6:	e001      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d035      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	2b03      	cmp	r3, #3
 800270e:	d81b      	bhi.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002710:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002716:	bf00      	nop
 8002718:	08002755 	.word	0x08002755
 800271c:	08002729 	.word	0x08002729
 8002720:	08002737 	.word	0x08002737
 8002724:	08002755 	.word	0x08002755
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	4a08      	ldr	r2, [pc, #32]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800272e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002732:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002734:	e00f      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3304      	adds	r3, #4
 800273a:	2102      	movs	r1, #2
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fedf 	bl	8003500 <RCCEx_PLL2_Config>
 8002742:	4603      	mov	r3, r0
 8002744:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002746:	e006      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	75fb      	strb	r3, [r7, #23]
      break;
 800274c:	e003      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800274e:	bf00      	nop
 8002750:	58024400 	.word	0x58024400
      break;
 8002754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002756:	7dfb      	ldrb	r3, [r7, #23]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800275c:	4bba      	ldr	r3, [pc, #744]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002760:	f023 0203 	bic.w	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	49b7      	ldr	r1, [pc, #732]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800276a:	4313      	orrs	r3, r2
 800276c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800276e:	e001      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002770:	7dfb      	ldrb	r3, [r7, #23]
 8002772:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8086 	beq.w	800288e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002782:	4bb2      	ldr	r3, [pc, #712]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4ab1      	ldr	r2, [pc, #708]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800278e:	f7fd ffad 	bl	80006ec <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002794:	e009      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002796:	f7fd ffa9 	bl	80006ec <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b64      	cmp	r3, #100	; 0x64
 80027a2:	d902      	bls.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	75fb      	strb	r3, [r7, #23]
        break;
 80027a8:	e005      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027aa:	4ba8      	ldr	r3, [pc, #672]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0ef      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d166      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80027bc:	4ba2      	ldr	r3, [pc, #648]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80027be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027c6:	4053      	eors	r3, r2
 80027c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027d0:	4b9d      	ldr	r3, [pc, #628]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027da:	4b9b      	ldr	r3, [pc, #620]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	4a9a      	ldr	r2, [pc, #616]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027e6:	4b98      	ldr	r3, [pc, #608]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a97      	ldr	r2, [pc, #604]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80027f2:	4a95      	ldr	r2, [pc, #596]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002802:	d115      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fd ff72 	bl	80006ec <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800280a:	e00b      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7fd ff6e 	bl	80006ec <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d902      	bls.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	75fb      	strb	r3, [r7, #23]
            break;
 8002822:	e005      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002824:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ed      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d126      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800283c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002844:	d10d      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002846:	4b80      	ldr	r3, [pc, #512]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002854:	0919      	lsrs	r1, r3, #4
 8002856:	4b7e      	ldr	r3, [pc, #504]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002858:	400b      	ands	r3, r1
 800285a:	497b      	ldr	r1, [pc, #492]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800285c:	4313      	orrs	r3, r2
 800285e:	610b      	str	r3, [r1, #16]
 8002860:	e005      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002862:	4b79      	ldr	r3, [pc, #484]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	4a78      	ldr	r2, [pc, #480]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002868:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800286c:	6113      	str	r3, [r2, #16]
 800286e:	4b76      	ldr	r3, [pc, #472]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002870:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287c:	4972      	ldr	r1, [pc, #456]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	670b      	str	r3, [r1, #112]	; 0x70
 8002882:	e004      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002884:	7dfb      	ldrb	r3, [r7, #23]
 8002886:	75bb      	strb	r3, [r7, #22]
 8002888:	e001      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d07d      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800289e:	2b28      	cmp	r3, #40	; 0x28
 80028a0:	d866      	bhi.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80028a2:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80028a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a8:	08002977 	.word	0x08002977
 80028ac:	08002971 	.word	0x08002971
 80028b0:	08002971 	.word	0x08002971
 80028b4:	08002971 	.word	0x08002971
 80028b8:	08002971 	.word	0x08002971
 80028bc:	08002971 	.word	0x08002971
 80028c0:	08002971 	.word	0x08002971
 80028c4:	08002971 	.word	0x08002971
 80028c8:	0800294d 	.word	0x0800294d
 80028cc:	08002971 	.word	0x08002971
 80028d0:	08002971 	.word	0x08002971
 80028d4:	08002971 	.word	0x08002971
 80028d8:	08002971 	.word	0x08002971
 80028dc:	08002971 	.word	0x08002971
 80028e0:	08002971 	.word	0x08002971
 80028e4:	08002971 	.word	0x08002971
 80028e8:	0800295f 	.word	0x0800295f
 80028ec:	08002971 	.word	0x08002971
 80028f0:	08002971 	.word	0x08002971
 80028f4:	08002971 	.word	0x08002971
 80028f8:	08002971 	.word	0x08002971
 80028fc:	08002971 	.word	0x08002971
 8002900:	08002971 	.word	0x08002971
 8002904:	08002971 	.word	0x08002971
 8002908:	08002977 	.word	0x08002977
 800290c:	08002971 	.word	0x08002971
 8002910:	08002971 	.word	0x08002971
 8002914:	08002971 	.word	0x08002971
 8002918:	08002971 	.word	0x08002971
 800291c:	08002971 	.word	0x08002971
 8002920:	08002971 	.word	0x08002971
 8002924:	08002971 	.word	0x08002971
 8002928:	08002977 	.word	0x08002977
 800292c:	08002971 	.word	0x08002971
 8002930:	08002971 	.word	0x08002971
 8002934:	08002971 	.word	0x08002971
 8002938:	08002971 	.word	0x08002971
 800293c:	08002971 	.word	0x08002971
 8002940:	08002971 	.word	0x08002971
 8002944:	08002971 	.word	0x08002971
 8002948:	08002977 	.word	0x08002977
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fdd4 	bl	8003500 <RCCEx_PLL2_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800295c:	e00c      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3324      	adds	r3, #36	; 0x24
 8002962:	2101      	movs	r1, #1
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fe7d 	bl	8003664 <RCCEx_PLL3_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800296e:	e003      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	75fb      	strb	r3, [r7, #23]
      break;
 8002974:	e000      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800297e:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800298a:	492f      	ldr	r1, [pc, #188]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	654b      	str	r3, [r1, #84]	; 0x54
 8002990:	e001      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d037      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a6:	2b05      	cmp	r3, #5
 80029a8:	d820      	bhi.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x860>
 80029aa:	a201      	add	r2, pc, #4	; (adr r2, 80029b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80029ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b0:	080029f3 	.word	0x080029f3
 80029b4:	080029c9 	.word	0x080029c9
 80029b8:	080029db 	.word	0x080029db
 80029bc:	080029f3 	.word	0x080029f3
 80029c0:	080029f3 	.word	0x080029f3
 80029c4:	080029f3 	.word	0x080029f3
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fd96 	bl	8003500 <RCCEx_PLL2_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80029d8:	e00c      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3324      	adds	r3, #36	; 0x24
 80029de:	2101      	movs	r1, #1
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fe3f 	bl	8003664 <RCCEx_PLL3_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80029ea:	e003      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	75fb      	strb	r3, [r7, #23]
      break;
 80029f0:	e000      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80029f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a06:	4910      	ldr	r1, [pc, #64]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	654b      	str	r3, [r1, #84]	; 0x54
 8002a0c:	e001      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
 8002a10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d040      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	2b05      	cmp	r3, #5
 8002a26:	d827      	bhi.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a7f 	.word	0x08002a7f
 8002a34:	08002a55 	.word	0x08002a55
 8002a38:	08002a67 	.word	0x08002a67
 8002a3c:	08002a7f 	.word	0x08002a7f
 8002a40:	08002a7f 	.word	0x08002a7f
 8002a44:	08002a7f 	.word	0x08002a7f
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	58024800 	.word	0x58024800
 8002a50:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	2101      	movs	r1, #1
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fd50 	bl	8003500 <RCCEx_PLL2_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002a64:	e00c      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3324      	adds	r3, #36	; 0x24
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fdf9 	bl	8003664 <RCCEx_PLL3_Config>
 8002a72:	4603      	mov	r3, r0
 8002a74:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002a76:	e003      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a7c:	e000      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10a      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a86:	4bb3      	ldr	r3, [pc, #716]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	f023 0207 	bic.w	r2, r3, #7
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	49af      	ldr	r1, [pc, #700]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	658b      	str	r3, [r1, #88]	; 0x58
 8002a9a:	e001      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d044      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ab6:	d01b      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002abc:	d805      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d022      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002ac8:	e01b      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ace:	d01d      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad4:	d01c      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002ad6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ada:	d01b      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002adc:	e011      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fd0b 	bl	8003500 <RCCEx_PLL2_Config>
 8002aea:	4603      	mov	r3, r0
 8002aec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002aee:	e012      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3324      	adds	r3, #36	; 0x24
 8002af4:	2102      	movs	r1, #2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fdb4 	bl	8003664 <RCCEx_PLL3_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002b00:	e009      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
      break;
 8002b06:	e006      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002b08:	bf00      	nop
 8002b0a:	e004      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002b0c:	bf00      	nop
 8002b0e:	e002      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b1c:	4b8d      	ldr	r3, [pc, #564]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b2a:	498a      	ldr	r1, [pc, #552]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	654b      	str	r3, [r1, #84]	; 0x54
 8002b30:	e001      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
 8002b34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d044      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b4c:	d01b      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b52:	d805      	bhi.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d022      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002b5e:	e01b      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b64:	d01d      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002b66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002b6a:	d01c      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002b6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b70:	d01b      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002b72:	e011      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fcc0 	bl	8003500 <RCCEx_PLL2_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002b84:	e012      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3324      	adds	r3, #36	; 0x24
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fd69 	bl	8003664 <RCCEx_PLL3_Config>
 8002b92:	4603      	mov	r3, r0
 8002b94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002b96:	e009      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b9c:	e006      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e004      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e002      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e000      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bb2:	4b68      	ldr	r3, [pc, #416]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bc0:	4964      	ldr	r1, [pc, #400]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	658b      	str	r3, [r1, #88]	; 0x58
 8002bc6:	e001      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d044      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be2:	d01b      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be8:	d805      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d022      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002bf4:	e01b      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfa:	d01d      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002bfc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c00:	d01c      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002c02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c06:	d01b      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002c08:	e011      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fc75 	bl	8003500 <RCCEx_PLL2_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002c1a:	e012      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3324      	adds	r3, #36	; 0x24
 8002c20:	2102      	movs	r1, #2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fd1e 	bl	8003664 <RCCEx_PLL3_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002c2c:	e009      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
      break;
 8002c32:	e006      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002c34:	bf00      	nop
 8002c36:	e004      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002c38:	bf00      	nop
 8002c3a:	e002      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002c3c:	bf00      	nop
 8002c3e:	e000      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002c48:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c56:	493f      	ldr	r1, [pc, #252]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	658b      	str	r3, [r1, #88]	; 0x58
 8002c5c:	e001      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01b      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c78:	d10b      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3324      	adds	r3, #36	; 0x24
 8002c7e:	2102      	movs	r1, #2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fcef 	bl	8003664 <RCCEx_PLL3_Config>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00c      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	75bb      	strb	r3, [r7, #22]
 8002c90:	e009      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002c92:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca0:	492c      	ldr	r1, [pc, #176]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01b      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3324      	adds	r3, #36	; 0x24
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fccd 	bl	8003664 <RCCEx_PLL3_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00c      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	75bb      	strb	r3, [r7, #22]
 8002cd4:	e009      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce4:	491b      	ldr	r1, [pc, #108]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d032      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d00:	d00d      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8002d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d06:	d016      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d111      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fbf4 	bl	8003500 <RCCEx_PLL2_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002d1c:	e00c      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3324      	adds	r3, #36	; 0x24
 8002d22:	2102      	movs	r1, #2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fc9d 	bl	8003664 <RCCEx_PLL3_Config>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002d2e:	e003      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	75fb      	strb	r3, [r7, #23]
      break;
 8002d34:	e000      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8002d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d4c:	4901      	ldr	r1, [pc, #4]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	658b      	str	r3, [r1, #88]	; 0x58
 8002d52:	e003      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8002d54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d02f      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d72:	d00c      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8002d74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d78:	d015      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d7e:	d10f      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d80:	4b79      	ldr	r3, [pc, #484]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	4a78      	ldr	r2, [pc, #480]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002d8c:	e00c      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3324      	adds	r3, #36	; 0x24
 8002d92:	2101      	movs	r1, #1
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fc65 	bl	8003664 <RCCEx_PLL3_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002d9e:	e003      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	75fb      	strb	r3, [r7, #23]
      break;
 8002da4:	e000      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8002da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dae:	4b6e      	ldr	r3, [pc, #440]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dbc:	496a      	ldr	r1, [pc, #424]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	654b      	str	r3, [r1, #84]	; 0x54
 8002dc2:	e001      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d029      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de0:	d007      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8002de2:	e00f      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002de4:	4b60      	ldr	r3, [pc, #384]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	4a5f      	ldr	r2, [pc, #380]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002df0:	e00b      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2102      	movs	r1, #2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fb81 	bl	8003500 <RCCEx_PLL2_Config>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002e02:	e002      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	75fb      	strb	r3, [r7, #23]
      break;
 8002e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002e10:	4b55      	ldr	r3, [pc, #340]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1c:	4952      	ldr	r1, [pc, #328]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e22:	e001      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3324      	adds	r3, #36	; 0x24
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fc12 	bl	8003664 <RCCEx_PLL3_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d02f      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5e:	d00c      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8002e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e64:	d802      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d011      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8002e6a:	e00d      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e70:	d00f      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8002e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e76:	d00e      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8002e78:	e006      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	4a3a      	ldr	r2, [pc, #232]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002e86:	e007      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e8c:	e004      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002e8e:	bf00      	nop
 8002e90:	e002      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002e92:	bf00      	nop
 8002e94:	e000      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e9e:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eaa:	492f      	ldr	r1, [pc, #188]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	654b      	str	r3, [r1, #84]	; 0x54
 8002eb0:	e001      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4926      	ldr	r1, [pc, #152]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002eee:	491e      	ldr	r1, [pc, #120]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f0c:	4916      	ldr	r1, [pc, #88]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f1e:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f28:	6113      	str	r3, [r2, #16]
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f34:	490c      	ldr	r1, [pc, #48]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	da08      	bge.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4e:	4906      	ldr	r1, [pc, #24]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8002f54:	7dbb      	ldrb	r3, [r7, #22]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	58024400 	.word	0x58024400

08002f6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002f70:	f7ff f8c4 	bl	80020fc <HAL_RCC_GetHCLKFreq>
 8002f74:	4601      	mov	r1, r0
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002f82:	5cd3      	ldrb	r3, [r2, r3]
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	58024400 	.word	0x58024400
 8002f94:	0800b91c 	.word	0x0800b91c

08002f98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	; 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fa0:	4b9d      	ldr	r3, [pc, #628]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002faa:	4b9b      	ldr	r3, [pc, #620]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	0b1b      	lsrs	r3, r3, #12
 8002fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb4:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002fb6:	4b98      	ldr	r3, [pc, #608]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002fc0:	4b95      	ldr	r3, [pc, #596]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc4:	08db      	lsrs	r3, r3, #3
 8002fc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	fb02 f303 	mul.w	r3, r2, r3
 8002fd0:	ee07 3a90 	vmov	s15, r3
 8002fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 810a 	beq.w	80031f8 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d05a      	beq.n	80030a0 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d302      	bcc.n	8002ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d078      	beq.n	80030e4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8002ff2:	e099      	b.n	8003128 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ff4:	4b88      	ldr	r3, [pc, #544]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d02d      	beq.n	800305c <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003000:	4b85      	ldr	r3, [pc, #532]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	08db      	lsrs	r3, r3, #3
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	4a84      	ldr	r2, [pc, #528]	; (800321c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
 8003010:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302a:	4b7b      	ldr	r3, [pc, #492]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303a:	ed97 6a03 	vldr	s12, [r7, #12]
 800303e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003220 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800304e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800305a:	e087      	b.n	800316c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003066:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003224 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800306a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800306e:	4b6a      	ldr	r3, [pc, #424]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003082:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003220 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800308e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800309e:	e065      	b.n	800316c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80030ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030b2:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80030c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003220 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80030ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80030e2:	e043      	b.n	800316c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800322c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80030f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f6:	4b48      	ldr	r3, [pc, #288]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003106:	ed97 6a03 	vldr	s12, [r7, #12]
 800310a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003220 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800310e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800311a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003126:	e021      	b.n	800316c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003228 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313a:	4b37      	ldr	r3, [pc, #220]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314a:	ed97 6a03 	vldr	s12, [r7, #12]
 800314e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003220 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800315a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800315e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003166:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800316a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800316c:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	0a5b      	lsrs	r3, r3, #9
 8003172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003186:	edd7 6a07 	vldr	s13, [r7, #28]
 800318a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800318e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003192:	ee17 2a90 	vmov	r2, s15
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800319a:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	0c1b      	lsrs	r3, r3, #16
 80031a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80031b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031c0:	ee17 2a90 	vmov	r2, s15
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80031c8:	4b13      	ldr	r3, [pc, #76]	; (8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	0e1b      	lsrs	r3, r3, #24
 80031ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80031e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ee:	ee17 2a90 	vmov	r2, s15
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80031f6:	e008      	b.n	800320a <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
}
 800320a:	bf00      	nop
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	58024400 	.word	0x58024400
 800321c:	03d09000 	.word	0x03d09000
 8003220:	46000000 	.word	0x46000000
 8003224:	4c742400 	.word	0x4c742400
 8003228:	4a742400 	.word	0x4a742400
 800322c:	4af42400 	.word	0x4af42400

08003230 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	; 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003238:	4b9d      	ldr	r3, [pc, #628]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003242:	4b9b      	ldr	r3, [pc, #620]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	0d1b      	lsrs	r3, r3, #20
 8003248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800324c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800324e:	4b98      	ldr	r3, [pc, #608]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003258:	4b95      	ldr	r3, [pc, #596]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800325a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325c:	08db      	lsrs	r3, r3, #3
 800325e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	ee07 3a90 	vmov	s15, r3
 800326c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003270:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 810a 	beq.w	8003490 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d05a      	beq.n	8003338 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8003282:	2b01      	cmp	r3, #1
 8003284:	d302      	bcc.n	800328c <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8003286:	2b02      	cmp	r3, #2
 8003288:	d078      	beq.n	800337c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800328a:	e099      	b.n	80033c0 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800328c:	4b88      	ldr	r3, [pc, #544]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d02d      	beq.n	80032f4 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003298:	4b85      	ldr	r3, [pc, #532]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	08db      	lsrs	r3, r3, #3
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	4a84      	ldr	r2, [pc, #528]	; (80034b4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
 80032a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	ee07 3a90 	vmov	s15, r3
 80032b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c2:	4b7b      	ldr	r3, [pc, #492]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80032d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80032da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80032f2:	e087      	b.n	8003404 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80034bc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003306:	4b6a      	ldr	r3, [pc, #424]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003316:	ed97 6a03 	vldr	s12, [r7, #12]
 800331a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800331e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800332a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003336:	e065      	b.n	8003404 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003342:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80034c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334a:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335a:	ed97 6a03 	vldr	s12, [r7, #12]
 800335e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800336e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800337a:	e043      	b.n	8003404 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003386:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800338a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338e:	4b48      	ldr	r3, [pc, #288]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339e:	ed97 6a03 	vldr	s12, [r7, #12]
 80033a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80033a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033be:	e021      	b.n	8003404 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80034c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80033ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d2:	4b37      	ldr	r3, [pc, #220]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80033e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80033ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003402:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	0a5b      	lsrs	r3, r3, #9
 800340a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800341a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800341e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800342a:	ee17 2a90 	vmov	r2, s15
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003432:	4b1f      	ldr	r3, [pc, #124]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800343c:	ee07 3a90 	vmov	s15, r3
 8003440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003448:	ee37 7a87 	vadd.f32	s14, s15, s14
 800344c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003458:	ee17 2a90 	vmov	r2, s15
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003460:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	0e1b      	lsrs	r3, r3, #24
 8003466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800347a:	edd7 6a07 	vldr	s13, [r7, #28]
 800347e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003486:	ee17 2a90 	vmov	r2, s15
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800348e:	e008      	b.n	80034a2 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
}
 80034a2:	bf00      	nop
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	58024400 	.word	0x58024400
 80034b4:	03d09000 	.word	0x03d09000
 80034b8:	46000000 	.word	0x46000000
 80034bc:	4c742400 	.word	0x4c742400
 80034c0:	4a742400 	.word	0x4a742400
 80034c4:	4af42400 	.word	0x4af42400

080034c8 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034cc:	f7fe fca4 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 80034d0:	4601      	mov	r1, r0
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	4a06      	ldr	r2, [pc, #24]	; (80034f8 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 80034de:	5cd3      	ldrb	r3, [r2, r3]
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	fa21 f303 	lsr.w	r3, r1, r3
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80034ea:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80034ec:	4b03      	ldr	r3, [pc, #12]	; (80034fc <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80034ee:	681b      	ldr	r3, [r3, #0]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	58024400 	.word	0x58024400
 80034f8:	0800b91c 	.word	0x0800b91c
 80034fc:	24000008 	.word	0x24000008

08003500 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800350e:	4b53      	ldr	r3, [pc, #332]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b03      	cmp	r3, #3
 8003518:	d101      	bne.n	800351e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e099      	b.n	8003652 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800351e:	4b4f      	ldr	r3, [pc, #316]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a4e      	ldr	r2, [pc, #312]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003524:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800352a:	f7fd f8df 	bl	80006ec <HAL_GetTick>
 800352e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003530:	e008      	b.n	8003544 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003532:	f7fd f8db 	bl	80006ec <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e086      	b.n	8003652 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003544:	4b45      	ldr	r3, [pc, #276]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f0      	bne.n	8003532 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003550:	4b42      	ldr	r3, [pc, #264]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	031b      	lsls	r3, r3, #12
 800355e:	493f      	ldr	r1, [pc, #252]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003560:	4313      	orrs	r3, r2
 8003562:	628b      	str	r3, [r1, #40]	; 0x28
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	3b01      	subs	r3, #1
 800356a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	3b01      	subs	r3, #1
 8003574:	025b      	lsls	r3, r3, #9
 8003576:	b29b      	uxth	r3, r3
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	3b01      	subs	r3, #1
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	3b01      	subs	r3, #1
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003594:	4931      	ldr	r1, [pc, #196]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003596:	4313      	orrs	r3, r2
 8003598:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800359a:	4b30      	ldr	r3, [pc, #192]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	492d      	ldr	r1, [pc, #180]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80035ac:	4b2b      	ldr	r3, [pc, #172]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	f023 0220 	bic.w	r2, r3, #32
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	4928      	ldr	r1, [pc, #160]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80035be:	4b27      	ldr	r3, [pc, #156]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	4a26      	ldr	r2, [pc, #152]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 80035c4:	f023 0310 	bic.w	r3, r3, #16
 80035c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80035ca:	4b24      	ldr	r3, [pc, #144]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 80035cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ce:	4b24      	ldr	r3, [pc, #144]	; (8003660 <RCCEx_PLL2_Config+0x160>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	69d2      	ldr	r2, [r2, #28]
 80035d6:	00d2      	lsls	r2, r2, #3
 80035d8:	4920      	ldr	r1, [pc, #128]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80035de:	4b1f      	ldr	r3, [pc, #124]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	4a1e      	ldr	r2, [pc, #120]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 80035e4:	f043 0310 	orr.w	r3, r3, #16
 80035e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	4a19      	ldr	r2, [pc, #100]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 80035f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035fc:	e00f      	b.n	800361e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d106      	bne.n	8003612 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003604:	4b15      	ldr	r3, [pc, #84]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	4a14      	ldr	r2, [pc, #80]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 800360a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800360e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003610:	e005      	b.n	800361e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	4a11      	ldr	r2, [pc, #68]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800361c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a0e      	ldr	r2, [pc, #56]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003624:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362a:	f7fd f85f 	bl	80006ec <HAL_GetTick>
 800362e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003630:	e008      	b.n	8003644 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003632:	f7fd f85b 	bl	80006ec <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e006      	b.n	8003652 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <RCCEx_PLL2_Config+0x15c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	58024400 	.word	0x58024400
 8003660:	ffff0007 	.word	0xffff0007

08003664 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003672:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b03      	cmp	r3, #3
 800367c:	d101      	bne.n	8003682 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e099      	b.n	80037b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003682:	4b4f      	ldr	r3, [pc, #316]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a4e      	ldr	r2, [pc, #312]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368e:	f7fd f82d 	bl	80006ec <HAL_GetTick>
 8003692:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003694:	e008      	b.n	80036a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003696:	f7fd f829 	bl	80006ec <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e086      	b.n	80037b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036a8:	4b45      	ldr	r3, [pc, #276]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80036b4:	4b42      	ldr	r3, [pc, #264]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	051b      	lsls	r3, r3, #20
 80036c2:	493f      	ldr	r1, [pc, #252]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	628b      	str	r3, [r1, #40]	; 0x28
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	025b      	lsls	r3, r3, #9
 80036da:	b29b      	uxth	r3, r3
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	041b      	lsls	r3, r3, #16
 80036e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	061b      	lsls	r3, r3, #24
 80036f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036f8:	4931      	ldr	r1, [pc, #196]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80036fe:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	492d      	ldr	r1, [pc, #180]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800370c:	4313      	orrs	r3, r2
 800370e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	4928      	ldr	r1, [pc, #160]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800371e:	4313      	orrs	r3, r2
 8003720:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003722:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	4a26      	ldr	r2, [pc, #152]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800372c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800372e:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <RCCEx_PLL3_Config+0x160>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	69d2      	ldr	r2, [r2, #28]
 800373a:	00d2      	lsls	r2, r2, #3
 800373c:	4920      	ldr	r1, [pc, #128]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800373e:	4313      	orrs	r3, r2
 8003740:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003742:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003754:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800375a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800375e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003760:	e00f      	b.n	8003782 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d106      	bne.n	8003776 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003768:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	4a14      	ldr	r2, [pc, #80]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800376e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003772:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003774:	e005      	b.n	8003782 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	4a11      	ldr	r2, [pc, #68]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800377c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003780:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003782:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a0e      	ldr	r2, [pc, #56]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378e:	f7fc ffad 	bl	80006ec <HAL_GetTick>
 8003792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003794:	e008      	b.n	80037a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003796:	f7fc ffa9 	bl	80006ec <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e006      	b.n	80037b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <RCCEx_PLL3_Config+0x15c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	58024400 	.word	0x58024400
 80037c4:	ffff0007 	.word	0xffff0007

080037c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e01d      	b.n	8003816 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f006 f888 	bl	8009904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	4619      	mov	r1, r3
 8003806:	4610      	mov	r0, r2
 8003808:	f000 fc3e 	bl	8004088 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <HAL_TIM_Base_Start_IT+0x50>)
 8003840:	4013      	ands	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b06      	cmp	r3, #6
 8003848:	d00b      	beq.n	8003862 <HAL_TIM_Base_Start_IT+0x42>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d007      	beq.n	8003862 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	00010007 	.word	0x00010007

08003874 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e01d      	b.n	80038c2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f815 	bl	80038ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f000 fbe8 	bl	8004088 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2201      	movs	r2, #1
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 f872 	bl	80049dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <HAL_TIM_PWM_Start+0x98>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_TIM_PWM_Start+0x4a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1d      	ldr	r2, [pc, #116]	; (800397c <HAL_TIM_PWM_Start+0x9c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00e      	beq.n	800392a <HAL_TIM_PWM_Start+0x4a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1b      	ldr	r2, [pc, #108]	; (8003980 <HAL_TIM_PWM_Start+0xa0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_TIM_PWM_Start+0x4a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1a      	ldr	r2, [pc, #104]	; (8003984 <HAL_TIM_PWM_Start+0xa4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_TIM_PWM_Start+0x4a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a18      	ldr	r2, [pc, #96]	; (8003988 <HAL_TIM_PWM_Start+0xa8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d101      	bne.n	800392e <HAL_TIM_PWM_Start+0x4e>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_TIM_PWM_Start+0x50>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003942:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_TIM_PWM_Start+0xac>)
 800394c:	4013      	ands	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b06      	cmp	r3, #6
 8003954:	d00b      	beq.n	800396e <HAL_TIM_PWM_Start+0x8e>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d007      	beq.n	800396e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0201 	orr.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40010000 	.word	0x40010000
 800397c:	40010400 	.word	0x40010400
 8003980:	40014000 	.word	0x40014000
 8003984:	40014400 	.word	0x40014400
 8003988:	40014800 	.word	0x40014800
 800398c:	00010007 	.word	0x00010007

08003990 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d122      	bne.n	80039ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d11b      	bne.n	80039ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0202 	mvn.w	r2, #2
 80039bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fb3a 	bl	800404c <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fb2c 	bl	8004038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fb3d 	bl	8004060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d122      	bne.n	8003a40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d11b      	bne.n	8003a40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0204 	mvn.w	r2, #4
 8003a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fb10 	bl	800404c <HAL_TIM_IC_CaptureCallback>
 8003a2c:	e005      	b.n	8003a3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fb02 	bl	8004038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fb13 	bl	8004060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d122      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d11b      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0208 	mvn.w	r2, #8
 8003a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2204      	movs	r2, #4
 8003a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fae6 	bl	800404c <HAL_TIM_IC_CaptureCallback>
 8003a80:	e005      	b.n	8003a8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fad8 	bl	8004038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fae9 	bl	8004060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d122      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d11b      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0210 	mvn.w	r2, #16
 8003ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2208      	movs	r2, #8
 8003abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fabc 	bl	800404c <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 faae 	bl	8004038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fabf 	bl	8004060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d10e      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0201 	mvn.w	r2, #1
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fa88 	bl	8004024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b80      	cmp	r3, #128	; 0x80
 8003b20:	d10e      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d107      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f001 f858 	bl	8004bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4e:	d10e      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b80      	cmp	r3, #128	; 0x80
 8003b5c:	d107      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f001 f84b 	bl	8004c04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d10e      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d107      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fa6d 	bl	8004074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d10e      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f06f 0220 	mvn.w	r2, #32
 8003bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f001 f80b 	bl	8004bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e105      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b14      	cmp	r3, #20
 8003bfe:	f200 80f0 	bhi.w	8003de2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c5d 	.word	0x08003c5d
 8003c0c:	08003de3 	.word	0x08003de3
 8003c10:	08003de3 	.word	0x08003de3
 8003c14:	08003de3 	.word	0x08003de3
 8003c18:	08003c9d 	.word	0x08003c9d
 8003c1c:	08003de3 	.word	0x08003de3
 8003c20:	08003de3 	.word	0x08003de3
 8003c24:	08003de3 	.word	0x08003de3
 8003c28:	08003cdf 	.word	0x08003cdf
 8003c2c:	08003de3 	.word	0x08003de3
 8003c30:	08003de3 	.word	0x08003de3
 8003c34:	08003de3 	.word	0x08003de3
 8003c38:	08003d1f 	.word	0x08003d1f
 8003c3c:	08003de3 	.word	0x08003de3
 8003c40:	08003de3 	.word	0x08003de3
 8003c44:	08003de3 	.word	0x08003de3
 8003c48:	08003d61 	.word	0x08003d61
 8003c4c:	08003de3 	.word	0x08003de3
 8003c50:	08003de3 	.word	0x08003de3
 8003c54:	08003de3 	.word	0x08003de3
 8003c58:	08003da1 	.word	0x08003da1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 faaa 	bl	80041bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0208 	orr.w	r2, r2, #8
 8003c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0204 	bic.w	r2, r2, #4
 8003c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6999      	ldr	r1, [r3, #24]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	619a      	str	r2, [r3, #24]
      break;
 8003c9a:	e0a3      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fb1a 	bl	80042dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6999      	ldr	r1, [r3, #24]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	021a      	lsls	r2, r3, #8
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	619a      	str	r2, [r3, #24]
      break;
 8003cdc:	e082      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fb83 	bl	80043f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0208 	orr.w	r2, r2, #8
 8003cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0204 	bic.w	r2, r2, #4
 8003d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69d9      	ldr	r1, [r3, #28]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	61da      	str	r2, [r3, #28]
      break;
 8003d1c:	e062      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fbe9 	bl	80044fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69d9      	ldr	r1, [r3, #28]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	021a      	lsls	r2, r3, #8
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	61da      	str	r2, [r3, #28]
      break;
 8003d5e:	e041      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fc30 	bl	80045cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0208 	orr.w	r2, r2, #8
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0204 	bic.w	r2, r2, #4
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d9e:	e021      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fc72 	bl	8004690 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	021a      	lsls	r2, r3, #8
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003de0:	e000      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003de2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop

08003e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_TIM_ConfigClockSource+0x18>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e0b7      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x188>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4b57      	ldr	r3, [pc, #348]	; (8003f90 <HAL_TIM_ConfigClockSource+0x190>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b70      	cmp	r3, #112	; 0x70
 8003e4e:	d02e      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0xae>
 8003e50:	2b70      	cmp	r3, #112	; 0x70
 8003e52:	d812      	bhi.n	8003e7a <HAL_TIM_ConfigClockSource+0x7a>
 8003e54:	2b30      	cmp	r3, #48	; 0x30
 8003e56:	f000 8084 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x162>
 8003e5a:	2b30      	cmp	r3, #48	; 0x30
 8003e5c:	d806      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x6c>
 8003e5e:	2b10      	cmp	r3, #16
 8003e60:	d07f      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x162>
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d07d      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x162>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d07b      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003e6a:	e084      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003e6c:	2b50      	cmp	r3, #80	; 0x50
 8003e6e:	d048      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0x102>
 8003e70:	2b60      	cmp	r3, #96	; 0x60
 8003e72:	d056      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x122>
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d064      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8003e78:	e07d      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003e7a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e7e:	d070      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x162>
 8003e80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e84:	d809      	bhi.n	8003e9a <HAL_TIM_ConfigClockSource+0x9a>
 8003e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8a:	d027      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0xdc>
 8003e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e90:	d067      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x162>
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e96:	d06d      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e98:	e06d      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003e9a:	4a3e      	ldr	r2, [pc, #248]	; (8003f94 <HAL_TIM_ConfigClockSource+0x194>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d060      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x162>
 8003ea0:	4a3d      	ldr	r2, [pc, #244]	; (8003f98 <HAL_TIM_ConfigClockSource+0x198>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d05d      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x162>
 8003ea6:	4a3d      	ldr	r2, [pc, #244]	; (8003f9c <HAL_TIM_ConfigClockSource+0x19c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d05a      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8003eac:	e063      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6899      	ldr	r1, [r3, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f000 fd6d 	bl	800499c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ed0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	609a      	str	r2, [r3, #8]
      break;
 8003eda:	e04c      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f000 fd56 	bl	800499c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003efe:	609a      	str	r2, [r3, #8]
      break;
 8003f00:	e039      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f000 fcc6 	bl	80048a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2150      	movs	r1, #80	; 0x50
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fd20 	bl	8004960 <TIM_ITRx_SetConfig>
      break;
 8003f20:	e029      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 fce5 	bl	80048fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2160      	movs	r1, #96	; 0x60
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fd10 	bl	8004960 <TIM_ITRx_SetConfig>
      break;
 8003f40:	e019      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f000 fca6 	bl	80048a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2140      	movs	r1, #64	; 0x40
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fd00 	bl	8004960 <TIM_ITRx_SetConfig>
      break;
 8003f60:	e009      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f000 fcf7 	bl	8004960 <TIM_ITRx_SetConfig>
      break;
 8003f72:	e000      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003f74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	ffceff88 	.word	0xffceff88
 8003f94:	00100030 	.word	0x00100030
 8003f98:	00100040 	.word	0x00100040
 8003f9c:	00100020 	.word	0x00100020

08003fa0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e031      	b.n	800401c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003fc8:	6839      	ldr	r1, [r7, #0]
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fbc4 	bl	8004758 <TIM_SlaveTimer_SetConfig>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e018      	b.n	800401c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004008:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a40      	ldr	r2, [pc, #256]	; (800419c <TIM_Base_SetConfig+0x114>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d013      	beq.n	80040c8 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a6:	d00f      	beq.n	80040c8 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3d      	ldr	r2, [pc, #244]	; (80041a0 <TIM_Base_SetConfig+0x118>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00b      	beq.n	80040c8 <TIM_Base_SetConfig+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a3c      	ldr	r2, [pc, #240]	; (80041a4 <TIM_Base_SetConfig+0x11c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d007      	beq.n	80040c8 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a3b      	ldr	r2, [pc, #236]	; (80041a8 <TIM_Base_SetConfig+0x120>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_Base_SetConfig+0x40>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a3a      	ldr	r2, [pc, #232]	; (80041ac <TIM_Base_SetConfig+0x124>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d108      	bne.n	80040da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a2f      	ldr	r2, [pc, #188]	; (800419c <TIM_Base_SetConfig+0x114>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d01f      	beq.n	8004122 <TIM_Base_SetConfig+0x9a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e8:	d01b      	beq.n	8004122 <TIM_Base_SetConfig+0x9a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2c      	ldr	r2, [pc, #176]	; (80041a0 <TIM_Base_SetConfig+0x118>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d017      	beq.n	8004122 <TIM_Base_SetConfig+0x9a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2b      	ldr	r2, [pc, #172]	; (80041a4 <TIM_Base_SetConfig+0x11c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <TIM_Base_SetConfig+0x9a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2a      	ldr	r2, [pc, #168]	; (80041a8 <TIM_Base_SetConfig+0x120>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00f      	beq.n	8004122 <TIM_Base_SetConfig+0x9a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a29      	ldr	r2, [pc, #164]	; (80041ac <TIM_Base_SetConfig+0x124>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00b      	beq.n	8004122 <TIM_Base_SetConfig+0x9a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a28      	ldr	r2, [pc, #160]	; (80041b0 <TIM_Base_SetConfig+0x128>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d007      	beq.n	8004122 <TIM_Base_SetConfig+0x9a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a27      	ldr	r2, [pc, #156]	; (80041b4 <TIM_Base_SetConfig+0x12c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d003      	beq.n	8004122 <TIM_Base_SetConfig+0x9a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a26      	ldr	r2, [pc, #152]	; (80041b8 <TIM_Base_SetConfig+0x130>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d108      	bne.n	8004134 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a10      	ldr	r2, [pc, #64]	; (800419c <TIM_Base_SetConfig+0x114>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00f      	beq.n	8004180 <TIM_Base_SetConfig+0xf8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <TIM_Base_SetConfig+0x124>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00b      	beq.n	8004180 <TIM_Base_SetConfig+0xf8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <TIM_Base_SetConfig+0x128>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <TIM_Base_SetConfig+0xf8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a10      	ldr	r2, [pc, #64]	; (80041b4 <TIM_Base_SetConfig+0x12c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_Base_SetConfig+0xf8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a0f      	ldr	r2, [pc, #60]	; (80041b8 <TIM_Base_SetConfig+0x130>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d103      	bne.n	8004188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	615a      	str	r2, [r3, #20]
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40010000 	.word	0x40010000
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40000c00 	.word	0x40000c00
 80041ac:	40010400 	.word	0x40010400
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40014400 	.word	0x40014400
 80041b8:	40014800 	.word	0x40014800

080041bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f023 0201 	bic.w	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4b37      	ldr	r3, [pc, #220]	; (80042c4 <TIM_OC1_SetConfig+0x108>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f023 0302 	bic.w	r3, r3, #2
 8004204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a2d      	ldr	r2, [pc, #180]	; (80042c8 <TIM_OC1_SetConfig+0x10c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00f      	beq.n	8004238 <TIM_OC1_SetConfig+0x7c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <TIM_OC1_SetConfig+0x110>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00b      	beq.n	8004238 <TIM_OC1_SetConfig+0x7c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a2b      	ldr	r2, [pc, #172]	; (80042d0 <TIM_OC1_SetConfig+0x114>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d007      	beq.n	8004238 <TIM_OC1_SetConfig+0x7c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <TIM_OC1_SetConfig+0x118>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_OC1_SetConfig+0x7c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <TIM_OC1_SetConfig+0x11c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d10c      	bne.n	8004252 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f023 0308 	bic.w	r3, r3, #8
 800423e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f023 0304 	bic.w	r3, r3, #4
 8004250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <TIM_OC1_SetConfig+0x10c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00f      	beq.n	800427a <TIM_OC1_SetConfig+0xbe>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <TIM_OC1_SetConfig+0x110>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00b      	beq.n	800427a <TIM_OC1_SetConfig+0xbe>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a1a      	ldr	r2, [pc, #104]	; (80042d0 <TIM_OC1_SetConfig+0x114>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d007      	beq.n	800427a <TIM_OC1_SetConfig+0xbe>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <TIM_OC1_SetConfig+0x118>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_OC1_SetConfig+0xbe>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <TIM_OC1_SetConfig+0x11c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d111      	bne.n	800429e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	621a      	str	r2, [r3, #32]
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	fffeff8f 	.word	0xfffeff8f
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40010400 	.word	0x40010400
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40014400 	.word	0x40014400
 80042d8:	40014800 	.word	0x40014800

080042dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f023 0210 	bic.w	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <TIM_OC2_SetConfig+0xfc>)
 8004308:	4013      	ands	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0320 	bic.w	r3, r3, #32
 8004326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a29      	ldr	r2, [pc, #164]	; (80043dc <TIM_OC2_SetConfig+0x100>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_OC2_SetConfig+0x68>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a28      	ldr	r2, [pc, #160]	; (80043e0 <TIM_OC2_SetConfig+0x104>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d10d      	bne.n	8004360 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800435e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <TIM_OC2_SetConfig+0x100>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00f      	beq.n	8004388 <TIM_OC2_SetConfig+0xac>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <TIM_OC2_SetConfig+0x104>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00b      	beq.n	8004388 <TIM_OC2_SetConfig+0xac>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a1c      	ldr	r2, [pc, #112]	; (80043e4 <TIM_OC2_SetConfig+0x108>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d007      	beq.n	8004388 <TIM_OC2_SetConfig+0xac>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <TIM_OC2_SetConfig+0x10c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_OC2_SetConfig+0xac>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a1a      	ldr	r2, [pc, #104]	; (80043ec <TIM_OC2_SetConfig+0x110>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d113      	bne.n	80043b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800438e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004396:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	feff8fff 	.word	0xfeff8fff
 80043dc:	40010000 	.word	0x40010000
 80043e0:	40010400 	.word	0x40010400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40014400 	.word	0x40014400
 80043ec:	40014800 	.word	0x40014800

080043f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a27      	ldr	r2, [pc, #156]	; (80044e8 <TIM_OC3_SetConfig+0xf8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d003      	beq.n	8004456 <TIM_OC3_SetConfig+0x66>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a26      	ldr	r2, [pc, #152]	; (80044ec <TIM_OC3_SetConfig+0xfc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d10d      	bne.n	8004472 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800445c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a1c      	ldr	r2, [pc, #112]	; (80044e8 <TIM_OC3_SetConfig+0xf8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00f      	beq.n	800449a <TIM_OC3_SetConfig+0xaa>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <TIM_OC3_SetConfig+0xfc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00b      	beq.n	800449a <TIM_OC3_SetConfig+0xaa>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a1a      	ldr	r2, [pc, #104]	; (80044f0 <TIM_OC3_SetConfig+0x100>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d007      	beq.n	800449a <TIM_OC3_SetConfig+0xaa>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <TIM_OC3_SetConfig+0x104>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d003      	beq.n	800449a <TIM_OC3_SetConfig+0xaa>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <TIM_OC3_SetConfig+0x108>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d113      	bne.n	80044c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40010000 	.word	0x40010000
 80044ec:	40010400 	.word	0x40010400
 80044f0:	40014000 	.word	0x40014000
 80044f4:	40014400 	.word	0x40014400
 80044f8:	40014800 	.word	0x40014800

080044fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	031b      	lsls	r3, r3, #12
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <TIM_OC4_SetConfig+0xbc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00f      	beq.n	800457c <TIM_OC4_SetConfig+0x80>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <TIM_OC4_SetConfig+0xc0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00b      	beq.n	800457c <TIM_OC4_SetConfig+0x80>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a16      	ldr	r2, [pc, #88]	; (80045c0 <TIM_OC4_SetConfig+0xc4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <TIM_OC4_SetConfig+0x80>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <TIM_OC4_SetConfig+0xc8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_OC4_SetConfig+0x80>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <TIM_OC4_SetConfig+0xcc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d109      	bne.n	8004590 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	019b      	lsls	r3, r3, #6
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40010000 	.word	0x40010000
 80045bc:	40010400 	.word	0x40010400
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800

080045cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800460c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a17      	ldr	r2, [pc, #92]	; (800467c <TIM_OC5_SetConfig+0xb0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00f      	beq.n	8004642 <TIM_OC5_SetConfig+0x76>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a16      	ldr	r2, [pc, #88]	; (8004680 <TIM_OC5_SetConfig+0xb4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00b      	beq.n	8004642 <TIM_OC5_SetConfig+0x76>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a15      	ldr	r2, [pc, #84]	; (8004684 <TIM_OC5_SetConfig+0xb8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d007      	beq.n	8004642 <TIM_OC5_SetConfig+0x76>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a14      	ldr	r2, [pc, #80]	; (8004688 <TIM_OC5_SetConfig+0xbc>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d003      	beq.n	8004642 <TIM_OC5_SetConfig+0x76>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a13      	ldr	r2, [pc, #76]	; (800468c <TIM_OC5_SetConfig+0xc0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d109      	bne.n	8004656 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004648:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	621a      	str	r2, [r3, #32]
}
 8004670:	bf00      	nop
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	40010000 	.word	0x40010000
 8004680:	40010400 	.word	0x40010400
 8004684:	40014000 	.word	0x40014000
 8004688:	40014400 	.word	0x40014400
 800468c:	40014800 	.word	0x40014800

08004690 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	051b      	lsls	r3, r3, #20
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a18      	ldr	r2, [pc, #96]	; (8004744 <TIM_OC6_SetConfig+0xb4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00f      	beq.n	8004708 <TIM_OC6_SetConfig+0x78>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a17      	ldr	r2, [pc, #92]	; (8004748 <TIM_OC6_SetConfig+0xb8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00b      	beq.n	8004708 <TIM_OC6_SetConfig+0x78>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a16      	ldr	r2, [pc, #88]	; (800474c <TIM_OC6_SetConfig+0xbc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <TIM_OC6_SetConfig+0x78>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a15      	ldr	r2, [pc, #84]	; (8004750 <TIM_OC6_SetConfig+0xc0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_OC6_SetConfig+0x78>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a14      	ldr	r2, [pc, #80]	; (8004754 <TIM_OC6_SetConfig+0xc4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d109      	bne.n	800471c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800470e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	029b      	lsls	r3, r3, #10
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40010000 	.word	0x40010000
 8004748:	40010400 	.word	0x40010400
 800474c:	40014000 	.word	0x40014000
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800

08004758 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4b47      	ldr	r3, [pc, #284]	; (800488c <TIM_SlaveTimer_SetConfig+0x134>)
 800476e:	4013      	ands	r3, r2
 8004770:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4b44      	ldr	r3, [pc, #272]	; (8004890 <TIM_SlaveTimer_SetConfig+0x138>)
 8004780:	4013      	ands	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b60      	cmp	r3, #96	; 0x60
 800479c:	d065      	beq.n	800486a <TIM_SlaveTimer_SetConfig+0x112>
 800479e:	2b60      	cmp	r3, #96	; 0x60
 80047a0:	d80f      	bhi.n	80047c2 <TIM_SlaveTimer_SetConfig+0x6a>
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d06b      	beq.n	800487e <TIM_SlaveTimer_SetConfig+0x126>
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d804      	bhi.n	80047b4 <TIM_SlaveTimer_SetConfig+0x5c>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d067      	beq.n	800487e <TIM_SlaveTimer_SetConfig+0x126>
 80047ae:	2b10      	cmp	r3, #16
 80047b0:	d065      	beq.n	800487e <TIM_SlaveTimer_SetConfig+0x126>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80047b2:	e065      	b.n	8004880 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d025      	beq.n	8004804 <TIM_SlaveTimer_SetConfig+0xac>
 80047b8:	2b50      	cmp	r3, #80	; 0x50
 80047ba:	d04c      	beq.n	8004856 <TIM_SlaveTimer_SetConfig+0xfe>
 80047bc:	2b30      	cmp	r3, #48	; 0x30
 80047be:	d05e      	beq.n	800487e <TIM_SlaveTimer_SetConfig+0x126>
      break;
 80047c0:	e05e      	b.n	8004880 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 80047c2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80047c6:	d05a      	beq.n	800487e <TIM_SlaveTimer_SetConfig+0x126>
 80047c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80047cc:	d805      	bhi.n	80047da <TIM_SlaveTimer_SetConfig+0x82>
 80047ce:	2b70      	cmp	r3, #112	; 0x70
 80047d0:	d00d      	beq.n	80047ee <TIM_SlaveTimer_SetConfig+0x96>
 80047d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d6:	d052      	beq.n	800487e <TIM_SlaveTimer_SetConfig+0x126>
      break;
 80047d8:	e052      	b.n	8004880 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 80047da:	4a2e      	ldr	r2, [pc, #184]	; (8004894 <TIM_SlaveTimer_SetConfig+0x13c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d04e      	beq.n	800487e <TIM_SlaveTimer_SetConfig+0x126>
 80047e0:	4a2d      	ldr	r2, [pc, #180]	; (8004898 <TIM_SlaveTimer_SetConfig+0x140>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d04b      	beq.n	800487e <TIM_SlaveTimer_SetConfig+0x126>
 80047e6:	4a2d      	ldr	r2, [pc, #180]	; (800489c <TIM_SlaveTimer_SetConfig+0x144>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d048      	beq.n	800487e <TIM_SlaveTimer_SetConfig+0x126>
      break;
 80047ec:	e048      	b.n	8004880 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_ETR_SetConfig(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68d9      	ldr	r1, [r3, #12]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f000 f8cd 	bl	800499c <TIM_ETR_SetConfig>
      break;
 8004802:	e03d      	b.n	8004880 <TIM_SlaveTimer_SetConfig+0x128>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b05      	cmp	r3, #5
 800480a:	d101      	bne.n	8004810 <TIM_SlaveTimer_SetConfig+0xb8>
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e038      	b.n	8004882 <TIM_SlaveTimer_SetConfig+0x12a>
      tmpccer = htim->Instance->CCER;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6a1a      	ldr	r2, [r3, #32]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004836:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	621a      	str	r2, [r3, #32]
      break;
 8004854:	e014      	b.n	8004880 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6899      	ldr	r1, [r3, #8]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	461a      	mov	r2, r3
 8004864:	f000 f81c 	bl	80048a0 <TIM_TI1_ConfigInputStage>
      break;
 8004868:	e00a      	b.n	8004880 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6899      	ldr	r1, [r3, #8]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	461a      	mov	r2, r3
 8004878:	f000 f841 	bl	80048fe <TIM_TI2_ConfigInputStage>
      break;
 800487c:	e000      	b.n	8004880 <TIM_SlaveTimer_SetConfig+0x128>
      break;
 800487e:	bf00      	nop
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	ffcfff8f 	.word	0xffcfff8f
 8004890:	fffefff8 	.word	0xfffefff8
 8004894:	00100030 	.word	0x00100030
 8004898:	00100040 	.word	0x00100040
 800489c:	00100020 	.word	0x00100020

080048a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f023 0201 	bic.w	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 030a 	bic.w	r3, r3, #10
 80048dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048fe:	b480      	push	{r7}
 8004900:	b087      	sub	sp, #28
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	f023 0210 	bic.w	r2, r3, #16
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004928:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	031b      	lsls	r3, r3, #12
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800493a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
	...

08004960 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4b09      	ldr	r3, [pc, #36]	; (8004998 <TIM_ITRx_SetConfig+0x38>)
 8004974:	4013      	ands	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	f043 0307 	orr.w	r3, r3, #7
 8004982:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	609a      	str	r2, [r3, #8]
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	ffcfff8f 	.word	0xffcfff8f

0800499c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	021a      	lsls	r2, r3, #8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	431a      	orrs	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	609a      	str	r2, [r3, #8]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	2201      	movs	r2, #1
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a1a      	ldr	r2, [r3, #32]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	401a      	ands	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1a      	ldr	r2, [r3, #32]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	fa01 f303 	lsl.w	r3, r1, r3
 8004a14:	431a      	orrs	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	621a      	str	r2, [r3, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e045      	b.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d108      	bne.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a9e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40010000 	.word	0x40010000
 8004adc:	40010400 	.word	0x40010400

08004ae0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e065      	b.n	8004bc8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d004      	beq.n	8004b8a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d115      	bne.n	8004bb6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	051b      	lsls	r3, r3, #20
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40010400 	.word	0x40010400

08004bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e042      	b.n	8004cb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f004 ff29 	bl	8009a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2224      	movs	r2, #36	; 0x24
 8004c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0201 	bic.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f82c 	bl	8004cb8 <UART_SetConfig>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e022      	b.n	8004cb0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f002 f99a 	bl	8006fac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c96:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f002 fa21 	bl	80070f0 <UART_CheckIdleState>
 8004cae:	4603      	mov	r3, r0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004cbc:	b08e      	sub	sp, #56	; 0x38
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4bc1      	ldr	r3, [pc, #772]	; (8005000 <UART_SetConfig+0x348>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d02:	430b      	orrs	r3, r1
 8004d04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4ab7      	ldr	r2, [pc, #732]	; (8005004 <UART_SetConfig+0x34c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d32:	4313      	orrs	r3, r2
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	4bb2      	ldr	r3, [pc, #712]	; (8005008 <UART_SetConfig+0x350>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d46:	430b      	orrs	r3, r1
 8004d48:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	f023 010f 	bic.w	r1, r3, #15
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4aa9      	ldr	r2, [pc, #676]	; (800500c <UART_SetConfig+0x354>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d177      	bne.n	8004e5a <UART_SetConfig+0x1a2>
 8004d6a:	4ba9      	ldr	r3, [pc, #676]	; (8005010 <UART_SetConfig+0x358>)
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d72:	2b28      	cmp	r3, #40	; 0x28
 8004d74:	d86c      	bhi.n	8004e50 <UART_SetConfig+0x198>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <UART_SetConfig+0xc4>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004e21 	.word	0x08004e21
 8004d80:	08004e51 	.word	0x08004e51
 8004d84:	08004e51 	.word	0x08004e51
 8004d88:	08004e51 	.word	0x08004e51
 8004d8c:	08004e51 	.word	0x08004e51
 8004d90:	08004e51 	.word	0x08004e51
 8004d94:	08004e51 	.word	0x08004e51
 8004d98:	08004e51 	.word	0x08004e51
 8004d9c:	08004e29 	.word	0x08004e29
 8004da0:	08004e51 	.word	0x08004e51
 8004da4:	08004e51 	.word	0x08004e51
 8004da8:	08004e51 	.word	0x08004e51
 8004dac:	08004e51 	.word	0x08004e51
 8004db0:	08004e51 	.word	0x08004e51
 8004db4:	08004e51 	.word	0x08004e51
 8004db8:	08004e51 	.word	0x08004e51
 8004dbc:	08004e31 	.word	0x08004e31
 8004dc0:	08004e51 	.word	0x08004e51
 8004dc4:	08004e51 	.word	0x08004e51
 8004dc8:	08004e51 	.word	0x08004e51
 8004dcc:	08004e51 	.word	0x08004e51
 8004dd0:	08004e51 	.word	0x08004e51
 8004dd4:	08004e51 	.word	0x08004e51
 8004dd8:	08004e51 	.word	0x08004e51
 8004ddc:	08004e39 	.word	0x08004e39
 8004de0:	08004e51 	.word	0x08004e51
 8004de4:	08004e51 	.word	0x08004e51
 8004de8:	08004e51 	.word	0x08004e51
 8004dec:	08004e51 	.word	0x08004e51
 8004df0:	08004e51 	.word	0x08004e51
 8004df4:	08004e51 	.word	0x08004e51
 8004df8:	08004e51 	.word	0x08004e51
 8004dfc:	08004e41 	.word	0x08004e41
 8004e00:	08004e51 	.word	0x08004e51
 8004e04:	08004e51 	.word	0x08004e51
 8004e08:	08004e51 	.word	0x08004e51
 8004e0c:	08004e51 	.word	0x08004e51
 8004e10:	08004e51 	.word	0x08004e51
 8004e14:	08004e51 	.word	0x08004e51
 8004e18:	08004e51 	.word	0x08004e51
 8004e1c:	08004e49 	.word	0x08004e49
 8004e20:	2301      	movs	r3, #1
 8004e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e26:	e233      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e2e:	e22f      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004e30:	2308      	movs	r3, #8
 8004e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e36:	e22b      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004e38:	2310      	movs	r3, #16
 8004e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e3e:	e227      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004e40:	2320      	movs	r3, #32
 8004e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e46:	e223      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004e48:	2340      	movs	r3, #64	; 0x40
 8004e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e4e:	e21f      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e56:	bf00      	nop
 8004e58:	e21a      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a6d      	ldr	r2, [pc, #436]	; (8005014 <UART_SetConfig+0x35c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d132      	bne.n	8004eca <UART_SetConfig+0x212>
 8004e64:	4b6a      	ldr	r3, [pc, #424]	; (8005010 <UART_SetConfig+0x358>)
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	2b05      	cmp	r3, #5
 8004e6e:	d827      	bhi.n	8004ec0 <UART_SetConfig+0x208>
 8004e70:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <UART_SetConfig+0x1c0>)
 8004e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e76:	bf00      	nop
 8004e78:	08004e91 	.word	0x08004e91
 8004e7c:	08004e99 	.word	0x08004e99
 8004e80:	08004ea1 	.word	0x08004ea1
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	08004eb1 	.word	0x08004eb1
 8004e8c:	08004eb9 	.word	0x08004eb9
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e96:	e1fb      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e9e:	e1f7      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ea6:	e1f3      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eae:	e1ef      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eb6:	e1eb      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004eb8:	2340      	movs	r3, #64	; 0x40
 8004eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ebe:	e1e7      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ec6:	bf00      	nop
 8004ec8:	e1e2      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a52      	ldr	r2, [pc, #328]	; (8005018 <UART_SetConfig+0x360>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d132      	bne.n	8004f3a <UART_SetConfig+0x282>
 8004ed4:	4b4e      	ldr	r3, [pc, #312]	; (8005010 <UART_SetConfig+0x358>)
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	2b05      	cmp	r3, #5
 8004ede:	d827      	bhi.n	8004f30 <UART_SetConfig+0x278>
 8004ee0:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <UART_SetConfig+0x230>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004f01 	.word	0x08004f01
 8004eec:	08004f09 	.word	0x08004f09
 8004ef0:	08004f11 	.word	0x08004f11
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f21 	.word	0x08004f21
 8004efc:	08004f29 	.word	0x08004f29
 8004f00:	2300      	movs	r3, #0
 8004f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f06:	e1c3      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f0e:	e1bf      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f16:	e1bb      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f1e:	e1b7      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004f20:	2320      	movs	r3, #32
 8004f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f26:	e1b3      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004f28:	2340      	movs	r3, #64	; 0x40
 8004f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f2e:	e1af      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f36:	bf00      	nop
 8004f38:	e1aa      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a37      	ldr	r2, [pc, #220]	; (800501c <UART_SetConfig+0x364>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d132      	bne.n	8004faa <UART_SetConfig+0x2f2>
 8004f44:	4b32      	ldr	r3, [pc, #200]	; (8005010 <UART_SetConfig+0x358>)
 8004f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	2b05      	cmp	r3, #5
 8004f4e:	d827      	bhi.n	8004fa0 <UART_SetConfig+0x2e8>
 8004f50:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <UART_SetConfig+0x2a0>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f71 	.word	0x08004f71
 8004f5c:	08004f79 	.word	0x08004f79
 8004f60:	08004f81 	.word	0x08004f81
 8004f64:	08004f89 	.word	0x08004f89
 8004f68:	08004f91 	.word	0x08004f91
 8004f6c:	08004f99 	.word	0x08004f99
 8004f70:	2300      	movs	r3, #0
 8004f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f76:	e18b      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004f78:	2304      	movs	r3, #4
 8004f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f7e:	e187      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004f80:	2308      	movs	r3, #8
 8004f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f86:	e183      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004f88:	2310      	movs	r3, #16
 8004f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f8e:	e17f      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004f90:	2320      	movs	r3, #32
 8004f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f96:	e17b      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004f98:	2340      	movs	r3, #64	; 0x40
 8004f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f9e:	e177      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fa6:	bf00      	nop
 8004fa8:	e172      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <UART_SetConfig+0x368>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d144      	bne.n	800503e <UART_SetConfig+0x386>
 8004fb4:	4b16      	ldr	r3, [pc, #88]	; (8005010 <UART_SetConfig+0x358>)
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	d839      	bhi.n	8005034 <UART_SetConfig+0x37c>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0x310>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004fe1 	.word	0x08004fe1
 8004fcc:	08004fe9 	.word	0x08004fe9
 8004fd0:	08004ff1 	.word	0x08004ff1
 8004fd4:	08004ff9 	.word	0x08004ff9
 8004fd8:	08005025 	.word	0x08005025
 8004fdc:	0800502d 	.word	0x0800502d
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fe6:	e153      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fee:	e14f      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004ff0:	2308      	movs	r3, #8
 8004ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ff6:	e14b      	b.n	8005290 <UART_SetConfig+0x5d8>
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ffe:	e147      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005000:	cfff69f3 	.word	0xcfff69f3
 8005004:	58000c00 	.word	0x58000c00
 8005008:	11fff4ff 	.word	0x11fff4ff
 800500c:	40011000 	.word	0x40011000
 8005010:	58024400 	.word	0x58024400
 8005014:	40004400 	.word	0x40004400
 8005018:	40004800 	.word	0x40004800
 800501c:	40004c00 	.word	0x40004c00
 8005020:	40005000 	.word	0x40005000
 8005024:	2320      	movs	r3, #32
 8005026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800502a:	e131      	b.n	8005290 <UART_SetConfig+0x5d8>
 800502c:	2340      	movs	r3, #64	; 0x40
 800502e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005032:	e12d      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800503a:	bf00      	nop
 800503c:	e128      	b.n	8005290 <UART_SetConfig+0x5d8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4ac3      	ldr	r2, [pc, #780]	; (8005350 <UART_SetConfig+0x698>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d178      	bne.n	800513a <UART_SetConfig+0x482>
 8005048:	4bc2      	ldr	r3, [pc, #776]	; (8005354 <UART_SetConfig+0x69c>)
 800504a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005050:	2b28      	cmp	r3, #40	; 0x28
 8005052:	d86d      	bhi.n	8005130 <UART_SetConfig+0x478>
 8005054:	a201      	add	r2, pc, #4	; (adr r2, 800505c <UART_SetConfig+0x3a4>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	08005101 	.word	0x08005101
 8005060:	08005131 	.word	0x08005131
 8005064:	08005131 	.word	0x08005131
 8005068:	08005131 	.word	0x08005131
 800506c:	08005131 	.word	0x08005131
 8005070:	08005131 	.word	0x08005131
 8005074:	08005131 	.word	0x08005131
 8005078:	08005131 	.word	0x08005131
 800507c:	08005109 	.word	0x08005109
 8005080:	08005131 	.word	0x08005131
 8005084:	08005131 	.word	0x08005131
 8005088:	08005131 	.word	0x08005131
 800508c:	08005131 	.word	0x08005131
 8005090:	08005131 	.word	0x08005131
 8005094:	08005131 	.word	0x08005131
 8005098:	08005131 	.word	0x08005131
 800509c:	08005111 	.word	0x08005111
 80050a0:	08005131 	.word	0x08005131
 80050a4:	08005131 	.word	0x08005131
 80050a8:	08005131 	.word	0x08005131
 80050ac:	08005131 	.word	0x08005131
 80050b0:	08005131 	.word	0x08005131
 80050b4:	08005131 	.word	0x08005131
 80050b8:	08005131 	.word	0x08005131
 80050bc:	08005119 	.word	0x08005119
 80050c0:	08005131 	.word	0x08005131
 80050c4:	08005131 	.word	0x08005131
 80050c8:	08005131 	.word	0x08005131
 80050cc:	08005131 	.word	0x08005131
 80050d0:	08005131 	.word	0x08005131
 80050d4:	08005131 	.word	0x08005131
 80050d8:	08005131 	.word	0x08005131
 80050dc:	08005121 	.word	0x08005121
 80050e0:	08005131 	.word	0x08005131
 80050e4:	08005131 	.word	0x08005131
 80050e8:	08005131 	.word	0x08005131
 80050ec:	08005131 	.word	0x08005131
 80050f0:	08005131 	.word	0x08005131
 80050f4:	08005131 	.word	0x08005131
 80050f8:	08005131 	.word	0x08005131
 80050fc:	08005129 	.word	0x08005129
 8005100:	2301      	movs	r3, #1
 8005102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005106:	e0c3      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005108:	2304      	movs	r3, #4
 800510a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800510e:	e0bf      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005110:	2308      	movs	r3, #8
 8005112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005116:	e0bb      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005118:	2310      	movs	r3, #16
 800511a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800511e:	e0b7      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005120:	2320      	movs	r3, #32
 8005122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005126:	e0b3      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005128:	2340      	movs	r3, #64	; 0x40
 800512a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800512e:	e0af      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005136:	bf00      	nop
 8005138:	e0aa      	b.n	8005290 <UART_SetConfig+0x5d8>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a86      	ldr	r2, [pc, #536]	; (8005358 <UART_SetConfig+0x6a0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d132      	bne.n	80051aa <UART_SetConfig+0x4f2>
 8005144:	4b83      	ldr	r3, [pc, #524]	; (8005354 <UART_SetConfig+0x69c>)
 8005146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	2b05      	cmp	r3, #5
 800514e:	d827      	bhi.n	80051a0 <UART_SetConfig+0x4e8>
 8005150:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <UART_SetConfig+0x4a0>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	08005171 	.word	0x08005171
 800515c:	08005179 	.word	0x08005179
 8005160:	08005181 	.word	0x08005181
 8005164:	08005189 	.word	0x08005189
 8005168:	08005191 	.word	0x08005191
 800516c:	08005199 	.word	0x08005199
 8005170:	2300      	movs	r3, #0
 8005172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005176:	e08b      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005178:	2304      	movs	r3, #4
 800517a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800517e:	e087      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005180:	2308      	movs	r3, #8
 8005182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005186:	e083      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005188:	2310      	movs	r3, #16
 800518a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800518e:	e07f      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005190:	2320      	movs	r3, #32
 8005192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005196:	e07b      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800519e:	e077      	b.n	8005290 <UART_SetConfig+0x5d8>
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051a6:	bf00      	nop
 80051a8:	e072      	b.n	8005290 <UART_SetConfig+0x5d8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a6b      	ldr	r2, [pc, #428]	; (800535c <UART_SetConfig+0x6a4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d132      	bne.n	800521a <UART_SetConfig+0x562>
 80051b4:	4b67      	ldr	r3, [pc, #412]	; (8005354 <UART_SetConfig+0x69c>)
 80051b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	2b05      	cmp	r3, #5
 80051be:	d827      	bhi.n	8005210 <UART_SetConfig+0x558>
 80051c0:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <UART_SetConfig+0x510>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	080051e1 	.word	0x080051e1
 80051cc:	080051e9 	.word	0x080051e9
 80051d0:	080051f1 	.word	0x080051f1
 80051d4:	080051f9 	.word	0x080051f9
 80051d8:	08005201 	.word	0x08005201
 80051dc:	08005209 	.word	0x08005209
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051e6:	e053      	b.n	8005290 <UART_SetConfig+0x5d8>
 80051e8:	2304      	movs	r3, #4
 80051ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ee:	e04f      	b.n	8005290 <UART_SetConfig+0x5d8>
 80051f0:	2308      	movs	r3, #8
 80051f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051f6:	e04b      	b.n	8005290 <UART_SetConfig+0x5d8>
 80051f8:	2310      	movs	r3, #16
 80051fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051fe:	e047      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005200:	2320      	movs	r3, #32
 8005202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005206:	e043      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005208:	2340      	movs	r3, #64	; 0x40
 800520a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800520e:	e03f      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005216:	bf00      	nop
 8005218:	e03a      	b.n	8005290 <UART_SetConfig+0x5d8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a50      	ldr	r2, [pc, #320]	; (8005360 <UART_SetConfig+0x6a8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d132      	bne.n	800528a <UART_SetConfig+0x5d2>
 8005224:	4b4b      	ldr	r3, [pc, #300]	; (8005354 <UART_SetConfig+0x69c>)
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	2b05      	cmp	r3, #5
 800522e:	d827      	bhi.n	8005280 <UART_SetConfig+0x5c8>
 8005230:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <UART_SetConfig+0x580>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	08005251 	.word	0x08005251
 800523c:	08005259 	.word	0x08005259
 8005240:	08005261 	.word	0x08005261
 8005244:	08005269 	.word	0x08005269
 8005248:	08005271 	.word	0x08005271
 800524c:	08005279 	.word	0x08005279
 8005250:	2302      	movs	r3, #2
 8005252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005256:	e01b      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005258:	2304      	movs	r3, #4
 800525a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800525e:	e017      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005260:	2308      	movs	r3, #8
 8005262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005266:	e013      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005268:	2310      	movs	r3, #16
 800526a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800526e:	e00f      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005270:	2320      	movs	r3, #32
 8005272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005276:	e00b      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005278:	2340      	movs	r3, #64	; 0x40
 800527a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800527e:	e007      	b.n	8005290 <UART_SetConfig+0x5d8>
 8005280:	2380      	movs	r3, #128	; 0x80
 8005282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005286:	bf00      	nop
 8005288:	e002      	b.n	8005290 <UART_SetConfig+0x5d8>
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a32      	ldr	r2, [pc, #200]	; (8005360 <UART_SetConfig+0x6a8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	f040 86f7 	bne.w	800608a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800529c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	f000 80c0 	beq.w	8005426 <UART_SetConfig+0x76e>
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	dc04      	bgt.n	80052b4 <UART_SetConfig+0x5fc>
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d00c      	beq.n	80052c8 <UART_SetConfig+0x610>
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d065      	beq.n	800537e <UART_SetConfig+0x6c6>
 80052b2:	e27a      	b.n	80057aa <UART_SetConfig+0xaf2>
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	f000 81b0 	beq.w	800561a <UART_SetConfig+0x962>
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	f000 821e 	beq.w	80056fc <UART_SetConfig+0xa44>
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	f000 8104 	beq.w	80054ce <UART_SetConfig+0x816>
 80052c6:	e270      	b.n	80057aa <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80052c8:	f7fd fe50 	bl	8002f6c <HAL_RCCEx_GetD3PCLK1Freq>
 80052cc:	4602      	mov	r2, r0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d04e      	beq.n	8005374 <UART_SetConfig+0x6bc>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d048      	beq.n	8005370 <UART_SetConfig+0x6b8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d042      	beq.n	800536c <UART_SetConfig+0x6b4>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d03c      	beq.n	8005368 <UART_SetConfig+0x6b0>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d036      	beq.n	8005364 <UART_SetConfig+0x6ac>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d026      	beq.n	800534c <UART_SetConfig+0x694>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	2b06      	cmp	r3, #6
 8005304:	d020      	beq.n	8005348 <UART_SetConfig+0x690>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	2b07      	cmp	r3, #7
 800530c:	d01a      	beq.n	8005344 <UART_SetConfig+0x68c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	2b08      	cmp	r3, #8
 8005314:	d014      	beq.n	8005340 <UART_SetConfig+0x688>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	2b09      	cmp	r3, #9
 800531c:	d00e      	beq.n	800533c <UART_SetConfig+0x684>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b0a      	cmp	r3, #10
 8005324:	d008      	beq.n	8005338 <UART_SetConfig+0x680>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2b0b      	cmp	r3, #11
 800532c:	d102      	bne.n	8005334 <UART_SetConfig+0x67c>
 800532e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005332:	e020      	b.n	8005376 <UART_SetConfig+0x6be>
 8005334:	2301      	movs	r3, #1
 8005336:	e01e      	b.n	8005376 <UART_SetConfig+0x6be>
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	e01c      	b.n	8005376 <UART_SetConfig+0x6be>
 800533c:	2340      	movs	r3, #64	; 0x40
 800533e:	e01a      	b.n	8005376 <UART_SetConfig+0x6be>
 8005340:	2320      	movs	r3, #32
 8005342:	e018      	b.n	8005376 <UART_SetConfig+0x6be>
 8005344:	2310      	movs	r3, #16
 8005346:	e016      	b.n	8005376 <UART_SetConfig+0x6be>
 8005348:	230c      	movs	r3, #12
 800534a:	e014      	b.n	8005376 <UART_SetConfig+0x6be>
 800534c:	230a      	movs	r3, #10
 800534e:	e012      	b.n	8005376 <UART_SetConfig+0x6be>
 8005350:	40011400 	.word	0x40011400
 8005354:	58024400 	.word	0x58024400
 8005358:	40007800 	.word	0x40007800
 800535c:	40007c00 	.word	0x40007c00
 8005360:	58000c00 	.word	0x58000c00
 8005364:	2308      	movs	r3, #8
 8005366:	e006      	b.n	8005376 <UART_SetConfig+0x6be>
 8005368:	2306      	movs	r3, #6
 800536a:	e004      	b.n	8005376 <UART_SetConfig+0x6be>
 800536c:	2304      	movs	r3, #4
 800536e:	e002      	b.n	8005376 <UART_SetConfig+0x6be>
 8005370:	2302      	movs	r3, #2
 8005372:	e000      	b.n	8005376 <UART_SetConfig+0x6be>
 8005374:	2301      	movs	r3, #1
 8005376:	fbb2 f3f3 	udiv	r3, r2, r3
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800537c:	e219      	b.n	80057b2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800537e:	f107 0314 	add.w	r3, r7, #20
 8005382:	4618      	mov	r0, r3
 8005384:	f7fd fe08 	bl	8002f98 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b00      	cmp	r3, #0
 8005390:	d044      	beq.n	800541c <UART_SetConfig+0x764>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b01      	cmp	r3, #1
 8005398:	d03e      	beq.n	8005418 <UART_SetConfig+0x760>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d038      	beq.n	8005414 <UART_SetConfig+0x75c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d032      	beq.n	8005410 <UART_SetConfig+0x758>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d02c      	beq.n	800540c <UART_SetConfig+0x754>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	2b05      	cmp	r3, #5
 80053b8:	d026      	beq.n	8005408 <UART_SetConfig+0x750>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	2b06      	cmp	r3, #6
 80053c0:	d020      	beq.n	8005404 <UART_SetConfig+0x74c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	2b07      	cmp	r3, #7
 80053c8:	d01a      	beq.n	8005400 <UART_SetConfig+0x748>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d014      	beq.n	80053fc <UART_SetConfig+0x744>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	2b09      	cmp	r3, #9
 80053d8:	d00e      	beq.n	80053f8 <UART_SetConfig+0x740>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	2b0a      	cmp	r3, #10
 80053e0:	d008      	beq.n	80053f4 <UART_SetConfig+0x73c>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	2b0b      	cmp	r3, #11
 80053e8:	d102      	bne.n	80053f0 <UART_SetConfig+0x738>
 80053ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053ee:	e016      	b.n	800541e <UART_SetConfig+0x766>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e014      	b.n	800541e <UART_SetConfig+0x766>
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	e012      	b.n	800541e <UART_SetConfig+0x766>
 80053f8:	2340      	movs	r3, #64	; 0x40
 80053fa:	e010      	b.n	800541e <UART_SetConfig+0x766>
 80053fc:	2320      	movs	r3, #32
 80053fe:	e00e      	b.n	800541e <UART_SetConfig+0x766>
 8005400:	2310      	movs	r3, #16
 8005402:	e00c      	b.n	800541e <UART_SetConfig+0x766>
 8005404:	230c      	movs	r3, #12
 8005406:	e00a      	b.n	800541e <UART_SetConfig+0x766>
 8005408:	230a      	movs	r3, #10
 800540a:	e008      	b.n	800541e <UART_SetConfig+0x766>
 800540c:	2308      	movs	r3, #8
 800540e:	e006      	b.n	800541e <UART_SetConfig+0x766>
 8005410:	2306      	movs	r3, #6
 8005412:	e004      	b.n	800541e <UART_SetConfig+0x766>
 8005414:	2304      	movs	r3, #4
 8005416:	e002      	b.n	800541e <UART_SetConfig+0x766>
 8005418:	2302      	movs	r3, #2
 800541a:	e000      	b.n	800541e <UART_SetConfig+0x766>
 800541c:	2301      	movs	r3, #1
 800541e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005424:	e1c5      	b.n	80057b2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005426:	f107 0308 	add.w	r3, r7, #8
 800542a:	4618      	mov	r0, r3
 800542c:	f7fd ff00 	bl	8003230 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d044      	beq.n	80054c4 <UART_SetConfig+0x80c>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b01      	cmp	r3, #1
 8005440:	d03e      	beq.n	80054c0 <UART_SetConfig+0x808>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b02      	cmp	r3, #2
 8005448:	d038      	beq.n	80054bc <UART_SetConfig+0x804>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b03      	cmp	r3, #3
 8005450:	d032      	beq.n	80054b8 <UART_SetConfig+0x800>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b04      	cmp	r3, #4
 8005458:	d02c      	beq.n	80054b4 <UART_SetConfig+0x7fc>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b05      	cmp	r3, #5
 8005460:	d026      	beq.n	80054b0 <UART_SetConfig+0x7f8>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b06      	cmp	r3, #6
 8005468:	d020      	beq.n	80054ac <UART_SetConfig+0x7f4>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b07      	cmp	r3, #7
 8005470:	d01a      	beq.n	80054a8 <UART_SetConfig+0x7f0>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b08      	cmp	r3, #8
 8005478:	d014      	beq.n	80054a4 <UART_SetConfig+0x7ec>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b09      	cmp	r3, #9
 8005480:	d00e      	beq.n	80054a0 <UART_SetConfig+0x7e8>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b0a      	cmp	r3, #10
 8005488:	d008      	beq.n	800549c <UART_SetConfig+0x7e4>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b0b      	cmp	r3, #11
 8005490:	d102      	bne.n	8005498 <UART_SetConfig+0x7e0>
 8005492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005496:	e016      	b.n	80054c6 <UART_SetConfig+0x80e>
 8005498:	2301      	movs	r3, #1
 800549a:	e014      	b.n	80054c6 <UART_SetConfig+0x80e>
 800549c:	2380      	movs	r3, #128	; 0x80
 800549e:	e012      	b.n	80054c6 <UART_SetConfig+0x80e>
 80054a0:	2340      	movs	r3, #64	; 0x40
 80054a2:	e010      	b.n	80054c6 <UART_SetConfig+0x80e>
 80054a4:	2320      	movs	r3, #32
 80054a6:	e00e      	b.n	80054c6 <UART_SetConfig+0x80e>
 80054a8:	2310      	movs	r3, #16
 80054aa:	e00c      	b.n	80054c6 <UART_SetConfig+0x80e>
 80054ac:	230c      	movs	r3, #12
 80054ae:	e00a      	b.n	80054c6 <UART_SetConfig+0x80e>
 80054b0:	230a      	movs	r3, #10
 80054b2:	e008      	b.n	80054c6 <UART_SetConfig+0x80e>
 80054b4:	2308      	movs	r3, #8
 80054b6:	e006      	b.n	80054c6 <UART_SetConfig+0x80e>
 80054b8:	2306      	movs	r3, #6
 80054ba:	e004      	b.n	80054c6 <UART_SetConfig+0x80e>
 80054bc:	2304      	movs	r3, #4
 80054be:	e002      	b.n	80054c6 <UART_SetConfig+0x80e>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e000      	b.n	80054c6 <UART_SetConfig+0x80e>
 80054c4:	2301      	movs	r3, #1
 80054c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054cc:	e171      	b.n	80057b2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054ce:	4b7a      	ldr	r3, [pc, #488]	; (80056b8 <UART_SetConfig+0xa00>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d054      	beq.n	8005584 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80054da:	4b77      	ldr	r3, [pc, #476]	; (80056b8 <UART_SetConfig+0xa00>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	08db      	lsrs	r3, r3, #3
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	4a75      	ldr	r2, [pc, #468]	; (80056bc <UART_SetConfig+0xa04>)
 80054e6:	40da      	lsrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d044      	beq.n	800557a <UART_SetConfig+0x8c2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d03e      	beq.n	8005576 <UART_SetConfig+0x8be>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d038      	beq.n	8005572 <UART_SetConfig+0x8ba>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	2b03      	cmp	r3, #3
 8005506:	d032      	beq.n	800556e <UART_SetConfig+0x8b6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	2b04      	cmp	r3, #4
 800550e:	d02c      	beq.n	800556a <UART_SetConfig+0x8b2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	2b05      	cmp	r3, #5
 8005516:	d026      	beq.n	8005566 <UART_SetConfig+0x8ae>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	2b06      	cmp	r3, #6
 800551e:	d020      	beq.n	8005562 <UART_SetConfig+0x8aa>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	2b07      	cmp	r3, #7
 8005526:	d01a      	beq.n	800555e <UART_SetConfig+0x8a6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	2b08      	cmp	r3, #8
 800552e:	d014      	beq.n	800555a <UART_SetConfig+0x8a2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	2b09      	cmp	r3, #9
 8005536:	d00e      	beq.n	8005556 <UART_SetConfig+0x89e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	2b0a      	cmp	r3, #10
 800553e:	d008      	beq.n	8005552 <UART_SetConfig+0x89a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	2b0b      	cmp	r3, #11
 8005546:	d102      	bne.n	800554e <UART_SetConfig+0x896>
 8005548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800554c:	e016      	b.n	800557c <UART_SetConfig+0x8c4>
 800554e:	2301      	movs	r3, #1
 8005550:	e014      	b.n	800557c <UART_SetConfig+0x8c4>
 8005552:	2380      	movs	r3, #128	; 0x80
 8005554:	e012      	b.n	800557c <UART_SetConfig+0x8c4>
 8005556:	2340      	movs	r3, #64	; 0x40
 8005558:	e010      	b.n	800557c <UART_SetConfig+0x8c4>
 800555a:	2320      	movs	r3, #32
 800555c:	e00e      	b.n	800557c <UART_SetConfig+0x8c4>
 800555e:	2310      	movs	r3, #16
 8005560:	e00c      	b.n	800557c <UART_SetConfig+0x8c4>
 8005562:	230c      	movs	r3, #12
 8005564:	e00a      	b.n	800557c <UART_SetConfig+0x8c4>
 8005566:	230a      	movs	r3, #10
 8005568:	e008      	b.n	800557c <UART_SetConfig+0x8c4>
 800556a:	2308      	movs	r3, #8
 800556c:	e006      	b.n	800557c <UART_SetConfig+0x8c4>
 800556e:	2306      	movs	r3, #6
 8005570:	e004      	b.n	800557c <UART_SetConfig+0x8c4>
 8005572:	2304      	movs	r3, #4
 8005574:	e002      	b.n	800557c <UART_SetConfig+0x8c4>
 8005576:	2302      	movs	r3, #2
 8005578:	e000      	b.n	800557c <UART_SetConfig+0x8c4>
 800557a:	2301      	movs	r3, #1
 800557c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8005582:	e116      	b.n	80057b2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d043      	beq.n	8005614 <UART_SetConfig+0x95c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	2b01      	cmp	r3, #1
 8005592:	d03d      	beq.n	8005610 <UART_SetConfig+0x958>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	2b02      	cmp	r3, #2
 800559a:	d037      	beq.n	800560c <UART_SetConfig+0x954>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d031      	beq.n	8005608 <UART_SetConfig+0x950>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d02b      	beq.n	8005604 <UART_SetConfig+0x94c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2b05      	cmp	r3, #5
 80055b2:	d025      	beq.n	8005600 <UART_SetConfig+0x948>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	2b06      	cmp	r3, #6
 80055ba:	d01f      	beq.n	80055fc <UART_SetConfig+0x944>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	2b07      	cmp	r3, #7
 80055c2:	d019      	beq.n	80055f8 <UART_SetConfig+0x940>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d013      	beq.n	80055f4 <UART_SetConfig+0x93c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	2b09      	cmp	r3, #9
 80055d2:	d00d      	beq.n	80055f0 <UART_SetConfig+0x938>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	2b0a      	cmp	r3, #10
 80055da:	d007      	beq.n	80055ec <UART_SetConfig+0x934>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	2b0b      	cmp	r3, #11
 80055e2:	d101      	bne.n	80055e8 <UART_SetConfig+0x930>
 80055e4:	4b36      	ldr	r3, [pc, #216]	; (80056c0 <UART_SetConfig+0xa08>)
 80055e6:	e016      	b.n	8005616 <UART_SetConfig+0x95e>
 80055e8:	4b34      	ldr	r3, [pc, #208]	; (80056bc <UART_SetConfig+0xa04>)
 80055ea:	e014      	b.n	8005616 <UART_SetConfig+0x95e>
 80055ec:	4b35      	ldr	r3, [pc, #212]	; (80056c4 <UART_SetConfig+0xa0c>)
 80055ee:	e012      	b.n	8005616 <UART_SetConfig+0x95e>
 80055f0:	4b35      	ldr	r3, [pc, #212]	; (80056c8 <UART_SetConfig+0xa10>)
 80055f2:	e010      	b.n	8005616 <UART_SetConfig+0x95e>
 80055f4:	4b35      	ldr	r3, [pc, #212]	; (80056cc <UART_SetConfig+0xa14>)
 80055f6:	e00e      	b.n	8005616 <UART_SetConfig+0x95e>
 80055f8:	4b35      	ldr	r3, [pc, #212]	; (80056d0 <UART_SetConfig+0xa18>)
 80055fa:	e00c      	b.n	8005616 <UART_SetConfig+0x95e>
 80055fc:	4b35      	ldr	r3, [pc, #212]	; (80056d4 <UART_SetConfig+0xa1c>)
 80055fe:	e00a      	b.n	8005616 <UART_SetConfig+0x95e>
 8005600:	4b35      	ldr	r3, [pc, #212]	; (80056d8 <UART_SetConfig+0xa20>)
 8005602:	e008      	b.n	8005616 <UART_SetConfig+0x95e>
 8005604:	4b35      	ldr	r3, [pc, #212]	; (80056dc <UART_SetConfig+0xa24>)
 8005606:	e006      	b.n	8005616 <UART_SetConfig+0x95e>
 8005608:	4b35      	ldr	r3, [pc, #212]	; (80056e0 <UART_SetConfig+0xa28>)
 800560a:	e004      	b.n	8005616 <UART_SetConfig+0x95e>
 800560c:	4b35      	ldr	r3, [pc, #212]	; (80056e4 <UART_SetConfig+0xa2c>)
 800560e:	e002      	b.n	8005616 <UART_SetConfig+0x95e>
 8005610:	4b35      	ldr	r3, [pc, #212]	; (80056e8 <UART_SetConfig+0xa30>)
 8005612:	e000      	b.n	8005616 <UART_SetConfig+0x95e>
 8005614:	4b29      	ldr	r3, [pc, #164]	; (80056bc <UART_SetConfig+0xa04>)
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005618:	e0cb      	b.n	80057b2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d046      	beq.n	80056b0 <UART_SetConfig+0x9f8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	2b01      	cmp	r3, #1
 8005628:	d040      	beq.n	80056ac <UART_SetConfig+0x9f4>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	2b02      	cmp	r3, #2
 8005630:	d03a      	beq.n	80056a8 <UART_SetConfig+0x9f0>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	2b03      	cmp	r3, #3
 8005638:	d034      	beq.n	80056a4 <UART_SetConfig+0x9ec>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	2b04      	cmp	r3, #4
 8005640:	d02e      	beq.n	80056a0 <UART_SetConfig+0x9e8>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	2b05      	cmp	r3, #5
 8005648:	d028      	beq.n	800569c <UART_SetConfig+0x9e4>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	2b06      	cmp	r3, #6
 8005650:	d022      	beq.n	8005698 <UART_SetConfig+0x9e0>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	2b07      	cmp	r3, #7
 8005658:	d01c      	beq.n	8005694 <UART_SetConfig+0x9dc>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	2b08      	cmp	r3, #8
 8005660:	d016      	beq.n	8005690 <UART_SetConfig+0x9d8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	2b09      	cmp	r3, #9
 8005668:	d00f      	beq.n	800568a <UART_SetConfig+0x9d2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	2b0a      	cmp	r3, #10
 8005670:	d008      	beq.n	8005684 <UART_SetConfig+0x9cc>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	2b0b      	cmp	r3, #11
 8005678:	d102      	bne.n	8005680 <UART_SetConfig+0x9c8>
 800567a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800567e:	e018      	b.n	80056b2 <UART_SetConfig+0x9fa>
 8005680:	4b13      	ldr	r3, [pc, #76]	; (80056d0 <UART_SetConfig+0xa18>)
 8005682:	e016      	b.n	80056b2 <UART_SetConfig+0x9fa>
 8005684:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005688:	e013      	b.n	80056b2 <UART_SetConfig+0x9fa>
 800568a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800568e:	e010      	b.n	80056b2 <UART_SetConfig+0x9fa>
 8005690:	4b16      	ldr	r3, [pc, #88]	; (80056ec <UART_SetConfig+0xa34>)
 8005692:	e00e      	b.n	80056b2 <UART_SetConfig+0x9fa>
 8005694:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <UART_SetConfig+0xa08>)
 8005696:	e00c      	b.n	80056b2 <UART_SetConfig+0x9fa>
 8005698:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <UART_SetConfig+0xa38>)
 800569a:	e00a      	b.n	80056b2 <UART_SetConfig+0x9fa>
 800569c:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <UART_SetConfig+0xa3c>)
 800569e:	e008      	b.n	80056b2 <UART_SetConfig+0x9fa>
 80056a0:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <UART_SetConfig+0xa0c>)
 80056a2:	e006      	b.n	80056b2 <UART_SetConfig+0x9fa>
 80056a4:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <UART_SetConfig+0xa40>)
 80056a6:	e004      	b.n	80056b2 <UART_SetConfig+0x9fa>
 80056a8:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <UART_SetConfig+0xa10>)
 80056aa:	e002      	b.n	80056b2 <UART_SetConfig+0x9fa>
 80056ac:	4b07      	ldr	r3, [pc, #28]	; (80056cc <UART_SetConfig+0xa14>)
 80056ae:	e000      	b.n	80056b2 <UART_SetConfig+0x9fa>
 80056b0:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <UART_SetConfig+0xa18>)
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056b4:	e07d      	b.n	80057b2 <UART_SetConfig+0xafa>
 80056b6:	bf00      	nop
 80056b8:	58024400 	.word	0x58024400
 80056bc:	03d09000 	.word	0x03d09000
 80056c0:	0003d090 	.word	0x0003d090
 80056c4:	0007a120 	.word	0x0007a120
 80056c8:	000f4240 	.word	0x000f4240
 80056cc:	001e8480 	.word	0x001e8480
 80056d0:	003d0900 	.word	0x003d0900
 80056d4:	00516155 	.word	0x00516155
 80056d8:	0061a800 	.word	0x0061a800
 80056dc:	007a1200 	.word	0x007a1200
 80056e0:	00a2c2aa 	.word	0x00a2c2aa
 80056e4:	00f42400 	.word	0x00f42400
 80056e8:	01e84800 	.word	0x01e84800
 80056ec:	0001e848 	.word	0x0001e848
 80056f0:	00051615 	.word	0x00051615
 80056f4:	00061a80 	.word	0x00061a80
 80056f8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	2b00      	cmp	r3, #0
 8005702:	d04e      	beq.n	80057a2 <UART_SetConfig+0xaea>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2b01      	cmp	r3, #1
 800570a:	d047      	beq.n	800579c <UART_SetConfig+0xae4>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	2b02      	cmp	r3, #2
 8005712:	d040      	beq.n	8005796 <UART_SetConfig+0xade>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b03      	cmp	r3, #3
 800571a:	d039      	beq.n	8005790 <UART_SetConfig+0xad8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	2b04      	cmp	r3, #4
 8005722:	d032      	beq.n	800578a <UART_SetConfig+0xad2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	2b05      	cmp	r3, #5
 800572a:	d02b      	beq.n	8005784 <UART_SetConfig+0xacc>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	2b06      	cmp	r3, #6
 8005732:	d024      	beq.n	800577e <UART_SetConfig+0xac6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	2b07      	cmp	r3, #7
 800573a:	d01d      	beq.n	8005778 <UART_SetConfig+0xac0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	2b08      	cmp	r3, #8
 8005742:	d016      	beq.n	8005772 <UART_SetConfig+0xaba>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b09      	cmp	r3, #9
 800574a:	d00f      	beq.n	800576c <UART_SetConfig+0xab4>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	2b0a      	cmp	r3, #10
 8005752:	d008      	beq.n	8005766 <UART_SetConfig+0xaae>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	2b0b      	cmp	r3, #11
 800575a:	d101      	bne.n	8005760 <UART_SetConfig+0xaa8>
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	e022      	b.n	80057a6 <UART_SetConfig+0xaee>
 8005760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005764:	e01f      	b.n	80057a6 <UART_SetConfig+0xaee>
 8005766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800576a:	e01c      	b.n	80057a6 <UART_SetConfig+0xaee>
 800576c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005770:	e019      	b.n	80057a6 <UART_SetConfig+0xaee>
 8005772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005776:	e016      	b.n	80057a6 <UART_SetConfig+0xaee>
 8005778:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800577c:	e013      	b.n	80057a6 <UART_SetConfig+0xaee>
 800577e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005782:	e010      	b.n	80057a6 <UART_SetConfig+0xaee>
 8005784:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005788:	e00d      	b.n	80057a6 <UART_SetConfig+0xaee>
 800578a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800578e:	e00a      	b.n	80057a6 <UART_SetConfig+0xaee>
 8005790:	f241 5355 	movw	r3, #5461	; 0x1555
 8005794:	e007      	b.n	80057a6 <UART_SetConfig+0xaee>
 8005796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800579a:	e004      	b.n	80057a6 <UART_SetConfig+0xaee>
 800579c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057a0:	e001      	b.n	80057a6 <UART_SetConfig+0xaee>
 80057a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057a8:	e003      	b.n	80057b2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 80057b0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f001 83e4 	beq.w	8006f82 <UART_SetConfig+0x22ca>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d305      	bcc.n	80057d6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d904      	bls.n	80057e0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057dc:	f001 bbd1 	b.w	8006f82 <UART_SetConfig+0x22ca>
      }
      else
      {
        switch (clocksource)
 80057e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	f000 8153 	beq.w	8005a90 <UART_SetConfig+0xdd8>
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	dc06      	bgt.n	80057fc <UART_SetConfig+0xb44>
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d00f      	beq.n	8005812 <UART_SetConfig+0xb5a>
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	f000 80ab 	beq.w	800594e <UART_SetConfig+0xc96>
 80057f8:	f000 bc30 	b.w	800605c <UART_SetConfig+0x13a4>
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	f000 832d 	beq.w	8005e5c <UART_SetConfig+0x11a4>
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	f000 83a5 	beq.w	8005f52 <UART_SetConfig+0x129a>
 8005808:	2b10      	cmp	r3, #16
 800580a:	f000 81e2 	beq.w	8005bd2 <UART_SetConfig+0xf1a>
 800580e:	f000 bc25 	b.w	800605c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005812:	f7fd fbab 	bl	8002f6c <HAL_RCCEx_GetD3PCLK1Freq>
 8005816:	4603      	mov	r3, r0
 8005818:	4618      	mov	r0, r3
 800581a:	f04f 0100 	mov.w	r1, #0
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	2b00      	cmp	r3, #0
 8005824:	d067      	beq.n	80058f6 <UART_SetConfig+0xc3e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b01      	cmp	r3, #1
 800582c:	d05e      	beq.n	80058ec <UART_SetConfig+0xc34>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b02      	cmp	r3, #2
 8005834:	d055      	beq.n	80058e2 <UART_SetConfig+0xc2a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b03      	cmp	r3, #3
 800583c:	d04c      	beq.n	80058d8 <UART_SetConfig+0xc20>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b04      	cmp	r3, #4
 8005844:	d043      	beq.n	80058ce <UART_SetConfig+0xc16>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b05      	cmp	r3, #5
 800584c:	d03a      	beq.n	80058c4 <UART_SetConfig+0xc0c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2b06      	cmp	r3, #6
 8005854:	d031      	beq.n	80058ba <UART_SetConfig+0xc02>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b07      	cmp	r3, #7
 800585c:	d028      	beq.n	80058b0 <UART_SetConfig+0xbf8>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b08      	cmp	r3, #8
 8005864:	d01f      	beq.n	80058a6 <UART_SetConfig+0xbee>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2b09      	cmp	r3, #9
 800586c:	d016      	beq.n	800589c <UART_SetConfig+0xbe4>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2b0a      	cmp	r3, #10
 8005874:	d00d      	beq.n	8005892 <UART_SetConfig+0xbda>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b0b      	cmp	r3, #11
 800587c:	d104      	bne.n	8005888 <UART_SetConfig+0xbd0>
 800587e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005882:	f04f 0400 	mov.w	r4, #0
 8005886:	e03a      	b.n	80058fe <UART_SetConfig+0xc46>
 8005888:	f04f 0301 	mov.w	r3, #1
 800588c:	f04f 0400 	mov.w	r4, #0
 8005890:	e035      	b.n	80058fe <UART_SetConfig+0xc46>
 8005892:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005896:	f04f 0400 	mov.w	r4, #0
 800589a:	e030      	b.n	80058fe <UART_SetConfig+0xc46>
 800589c:	f04f 0340 	mov.w	r3, #64	; 0x40
 80058a0:	f04f 0400 	mov.w	r4, #0
 80058a4:	e02b      	b.n	80058fe <UART_SetConfig+0xc46>
 80058a6:	f04f 0320 	mov.w	r3, #32
 80058aa:	f04f 0400 	mov.w	r4, #0
 80058ae:	e026      	b.n	80058fe <UART_SetConfig+0xc46>
 80058b0:	f04f 0310 	mov.w	r3, #16
 80058b4:	f04f 0400 	mov.w	r4, #0
 80058b8:	e021      	b.n	80058fe <UART_SetConfig+0xc46>
 80058ba:	f04f 030c 	mov.w	r3, #12
 80058be:	f04f 0400 	mov.w	r4, #0
 80058c2:	e01c      	b.n	80058fe <UART_SetConfig+0xc46>
 80058c4:	f04f 030a 	mov.w	r3, #10
 80058c8:	f04f 0400 	mov.w	r4, #0
 80058cc:	e017      	b.n	80058fe <UART_SetConfig+0xc46>
 80058ce:	f04f 0308 	mov.w	r3, #8
 80058d2:	f04f 0400 	mov.w	r4, #0
 80058d6:	e012      	b.n	80058fe <UART_SetConfig+0xc46>
 80058d8:	f04f 0306 	mov.w	r3, #6
 80058dc:	f04f 0400 	mov.w	r4, #0
 80058e0:	e00d      	b.n	80058fe <UART_SetConfig+0xc46>
 80058e2:	f04f 0304 	mov.w	r3, #4
 80058e6:	f04f 0400 	mov.w	r4, #0
 80058ea:	e008      	b.n	80058fe <UART_SetConfig+0xc46>
 80058ec:	f04f 0302 	mov.w	r3, #2
 80058f0:	f04f 0400 	mov.w	r4, #0
 80058f4:	e003      	b.n	80058fe <UART_SetConfig+0xc46>
 80058f6:	f04f 0301 	mov.w	r3, #1
 80058fa:	f04f 0400 	mov.w	r4, #0
 80058fe:	461a      	mov	r2, r3
 8005900:	4623      	mov	r3, r4
 8005902:	f7fa fcf1 	bl	80002e8 <__aeabi_uldivmod>
 8005906:	4603      	mov	r3, r0
 8005908:	460c      	mov	r4, r1
 800590a:	4619      	mov	r1, r3
 800590c:	4622      	mov	r2, r4
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	f04f 0400 	mov.w	r4, #0
 8005916:	0214      	lsls	r4, r2, #8
 8005918:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800591c:	020b      	lsls	r3, r1, #8
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6852      	ldr	r2, [r2, #4]
 8005922:	0852      	lsrs	r2, r2, #1
 8005924:	4611      	mov	r1, r2
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	eb13 0b01 	adds.w	fp, r3, r1
 800592e:	eb44 0c02 	adc.w	ip, r4, r2
 8005932:	4658      	mov	r0, fp
 8005934:	4661      	mov	r1, ip
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f04f 0400 	mov.w	r4, #0
 800593e:	461a      	mov	r2, r3
 8005940:	4623      	mov	r3, r4
 8005942:	f7fa fcd1 	bl	80002e8 <__aeabi_uldivmod>
 8005946:	4603      	mov	r3, r0
 8005948:	460c      	mov	r4, r1
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800594c:	e38a      	b.n	8006064 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800594e:	f107 0314 	add.w	r3, r7, #20
 8005952:	4618      	mov	r0, r3
 8005954:	f7fd fb20 	bl	8002f98 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	4618      	mov	r0, r3
 800595c:	f04f 0100 	mov.w	r1, #0
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d067      	beq.n	8005a38 <UART_SetConfig+0xd80>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	2b01      	cmp	r3, #1
 800596e:	d05e      	beq.n	8005a2e <UART_SetConfig+0xd76>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	2b02      	cmp	r3, #2
 8005976:	d055      	beq.n	8005a24 <UART_SetConfig+0xd6c>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	2b03      	cmp	r3, #3
 800597e:	d04c      	beq.n	8005a1a <UART_SetConfig+0xd62>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	2b04      	cmp	r3, #4
 8005986:	d043      	beq.n	8005a10 <UART_SetConfig+0xd58>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	2b05      	cmp	r3, #5
 800598e:	d03a      	beq.n	8005a06 <UART_SetConfig+0xd4e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	2b06      	cmp	r3, #6
 8005996:	d031      	beq.n	80059fc <UART_SetConfig+0xd44>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	2b07      	cmp	r3, #7
 800599e:	d028      	beq.n	80059f2 <UART_SetConfig+0xd3a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d01f      	beq.n	80059e8 <UART_SetConfig+0xd30>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	2b09      	cmp	r3, #9
 80059ae:	d016      	beq.n	80059de <UART_SetConfig+0xd26>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	2b0a      	cmp	r3, #10
 80059b6:	d00d      	beq.n	80059d4 <UART_SetConfig+0xd1c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2b0b      	cmp	r3, #11
 80059be:	d104      	bne.n	80059ca <UART_SetConfig+0xd12>
 80059c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059c4:	f04f 0400 	mov.w	r4, #0
 80059c8:	e03a      	b.n	8005a40 <UART_SetConfig+0xd88>
 80059ca:	f04f 0301 	mov.w	r3, #1
 80059ce:	f04f 0400 	mov.w	r4, #0
 80059d2:	e035      	b.n	8005a40 <UART_SetConfig+0xd88>
 80059d4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80059d8:	f04f 0400 	mov.w	r4, #0
 80059dc:	e030      	b.n	8005a40 <UART_SetConfig+0xd88>
 80059de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80059e2:	f04f 0400 	mov.w	r4, #0
 80059e6:	e02b      	b.n	8005a40 <UART_SetConfig+0xd88>
 80059e8:	f04f 0320 	mov.w	r3, #32
 80059ec:	f04f 0400 	mov.w	r4, #0
 80059f0:	e026      	b.n	8005a40 <UART_SetConfig+0xd88>
 80059f2:	f04f 0310 	mov.w	r3, #16
 80059f6:	f04f 0400 	mov.w	r4, #0
 80059fa:	e021      	b.n	8005a40 <UART_SetConfig+0xd88>
 80059fc:	f04f 030c 	mov.w	r3, #12
 8005a00:	f04f 0400 	mov.w	r4, #0
 8005a04:	e01c      	b.n	8005a40 <UART_SetConfig+0xd88>
 8005a06:	f04f 030a 	mov.w	r3, #10
 8005a0a:	f04f 0400 	mov.w	r4, #0
 8005a0e:	e017      	b.n	8005a40 <UART_SetConfig+0xd88>
 8005a10:	f04f 0308 	mov.w	r3, #8
 8005a14:	f04f 0400 	mov.w	r4, #0
 8005a18:	e012      	b.n	8005a40 <UART_SetConfig+0xd88>
 8005a1a:	f04f 0306 	mov.w	r3, #6
 8005a1e:	f04f 0400 	mov.w	r4, #0
 8005a22:	e00d      	b.n	8005a40 <UART_SetConfig+0xd88>
 8005a24:	f04f 0304 	mov.w	r3, #4
 8005a28:	f04f 0400 	mov.w	r4, #0
 8005a2c:	e008      	b.n	8005a40 <UART_SetConfig+0xd88>
 8005a2e:	f04f 0302 	mov.w	r3, #2
 8005a32:	f04f 0400 	mov.w	r4, #0
 8005a36:	e003      	b.n	8005a40 <UART_SetConfig+0xd88>
 8005a38:	f04f 0301 	mov.w	r3, #1
 8005a3c:	f04f 0400 	mov.w	r4, #0
 8005a40:	461a      	mov	r2, r3
 8005a42:	4623      	mov	r3, r4
 8005a44:	f7fa fc50 	bl	80002e8 <__aeabi_uldivmod>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4622      	mov	r2, r4
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	f04f 0400 	mov.w	r4, #0
 8005a58:	0214      	lsls	r4, r2, #8
 8005a5a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005a5e:	020b      	lsls	r3, r1, #8
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6852      	ldr	r2, [r2, #4]
 8005a64:	0852      	lsrs	r2, r2, #1
 8005a66:	4611      	mov	r1, r2
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	eb13 0b01 	adds.w	fp, r3, r1
 8005a70:	eb44 0c02 	adc.w	ip, r4, r2
 8005a74:	4658      	mov	r0, fp
 8005a76:	4661      	mov	r1, ip
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f04f 0400 	mov.w	r4, #0
 8005a80:	461a      	mov	r2, r3
 8005a82:	4623      	mov	r3, r4
 8005a84:	f7fa fc30 	bl	80002e8 <__aeabi_uldivmod>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005a8e:	e2e9      	b.n	8006064 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a90:	f107 0308 	add.w	r3, r7, #8
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fd fbcb 	bl	8003230 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f04f 0100 	mov.w	r1, #0
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d067      	beq.n	8005b7a <UART_SetConfig+0xec2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d05e      	beq.n	8005b70 <UART_SetConfig+0xeb8>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d055      	beq.n	8005b66 <UART_SetConfig+0xeae>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d04c      	beq.n	8005b5c <UART_SetConfig+0xea4>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d043      	beq.n	8005b52 <UART_SetConfig+0xe9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	d03a      	beq.n	8005b48 <UART_SetConfig+0xe90>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	2b06      	cmp	r3, #6
 8005ad8:	d031      	beq.n	8005b3e <UART_SetConfig+0xe86>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2b07      	cmp	r3, #7
 8005ae0:	d028      	beq.n	8005b34 <UART_SetConfig+0xe7c>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d01f      	beq.n	8005b2a <UART_SetConfig+0xe72>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	2b09      	cmp	r3, #9
 8005af0:	d016      	beq.n	8005b20 <UART_SetConfig+0xe68>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b0a      	cmp	r3, #10
 8005af8:	d00d      	beq.n	8005b16 <UART_SetConfig+0xe5e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	2b0b      	cmp	r3, #11
 8005b00:	d104      	bne.n	8005b0c <UART_SetConfig+0xe54>
 8005b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b06:	f04f 0400 	mov.w	r4, #0
 8005b0a:	e03a      	b.n	8005b82 <UART_SetConfig+0xeca>
 8005b0c:	f04f 0301 	mov.w	r3, #1
 8005b10:	f04f 0400 	mov.w	r4, #0
 8005b14:	e035      	b.n	8005b82 <UART_SetConfig+0xeca>
 8005b16:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005b1a:	f04f 0400 	mov.w	r4, #0
 8005b1e:	e030      	b.n	8005b82 <UART_SetConfig+0xeca>
 8005b20:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005b24:	f04f 0400 	mov.w	r4, #0
 8005b28:	e02b      	b.n	8005b82 <UART_SetConfig+0xeca>
 8005b2a:	f04f 0320 	mov.w	r3, #32
 8005b2e:	f04f 0400 	mov.w	r4, #0
 8005b32:	e026      	b.n	8005b82 <UART_SetConfig+0xeca>
 8005b34:	f04f 0310 	mov.w	r3, #16
 8005b38:	f04f 0400 	mov.w	r4, #0
 8005b3c:	e021      	b.n	8005b82 <UART_SetConfig+0xeca>
 8005b3e:	f04f 030c 	mov.w	r3, #12
 8005b42:	f04f 0400 	mov.w	r4, #0
 8005b46:	e01c      	b.n	8005b82 <UART_SetConfig+0xeca>
 8005b48:	f04f 030a 	mov.w	r3, #10
 8005b4c:	f04f 0400 	mov.w	r4, #0
 8005b50:	e017      	b.n	8005b82 <UART_SetConfig+0xeca>
 8005b52:	f04f 0308 	mov.w	r3, #8
 8005b56:	f04f 0400 	mov.w	r4, #0
 8005b5a:	e012      	b.n	8005b82 <UART_SetConfig+0xeca>
 8005b5c:	f04f 0306 	mov.w	r3, #6
 8005b60:	f04f 0400 	mov.w	r4, #0
 8005b64:	e00d      	b.n	8005b82 <UART_SetConfig+0xeca>
 8005b66:	f04f 0304 	mov.w	r3, #4
 8005b6a:	f04f 0400 	mov.w	r4, #0
 8005b6e:	e008      	b.n	8005b82 <UART_SetConfig+0xeca>
 8005b70:	f04f 0302 	mov.w	r3, #2
 8005b74:	f04f 0400 	mov.w	r4, #0
 8005b78:	e003      	b.n	8005b82 <UART_SetConfig+0xeca>
 8005b7a:	f04f 0301 	mov.w	r3, #1
 8005b7e:	f04f 0400 	mov.w	r4, #0
 8005b82:	461a      	mov	r2, r3
 8005b84:	4623      	mov	r3, r4
 8005b86:	f7fa fbaf 	bl	80002e8 <__aeabi_uldivmod>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4622      	mov	r2, r4
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	f04f 0400 	mov.w	r4, #0
 8005b9a:	0214      	lsls	r4, r2, #8
 8005b9c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005ba0:	020b      	lsls	r3, r1, #8
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6852      	ldr	r2, [r2, #4]
 8005ba6:	0852      	lsrs	r2, r2, #1
 8005ba8:	4611      	mov	r1, r2
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	eb13 0b01 	adds.w	fp, r3, r1
 8005bb2:	eb44 0c02 	adc.w	ip, r4, r2
 8005bb6:	4658      	mov	r0, fp
 8005bb8:	4661      	mov	r1, ip
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f04f 0400 	mov.w	r4, #0
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4623      	mov	r3, r4
 8005bc6:	f7fa fb8f 	bl	80002e8 <__aeabi_uldivmod>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	460c      	mov	r4, r1
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005bd0:	e248      	b.n	8006064 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bd2:	4b97      	ldr	r3, [pc, #604]	; (8005e30 <UART_SetConfig+0x1178>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 80a3 	beq.w	8005d26 <UART_SetConfig+0x106e>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005be0:	4b93      	ldr	r3, [pc, #588]	; (8005e30 <UART_SetConfig+0x1178>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	08db      	lsrs	r3, r3, #3
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	4a92      	ldr	r2, [pc, #584]	; (8005e34 <UART_SetConfig+0x117c>)
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f04f 0100 	mov.w	r1, #0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d067      	beq.n	8005cce <UART_SetConfig+0x1016>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d05e      	beq.n	8005cc4 <UART_SetConfig+0x100c>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d055      	beq.n	8005cba <UART_SetConfig+0x1002>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d04c      	beq.n	8005cb0 <UART_SetConfig+0xff8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d043      	beq.n	8005ca6 <UART_SetConfig+0xfee>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	d03a      	beq.n	8005c9c <UART_SetConfig+0xfe4>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b06      	cmp	r3, #6
 8005c2c:	d031      	beq.n	8005c92 <UART_SetConfig+0xfda>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2b07      	cmp	r3, #7
 8005c34:	d028      	beq.n	8005c88 <UART_SetConfig+0xfd0>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d01f      	beq.n	8005c7e <UART_SetConfig+0xfc6>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b09      	cmp	r3, #9
 8005c44:	d016      	beq.n	8005c74 <UART_SetConfig+0xfbc>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b0a      	cmp	r3, #10
 8005c4c:	d00d      	beq.n	8005c6a <UART_SetConfig+0xfb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	2b0b      	cmp	r3, #11
 8005c54:	d104      	bne.n	8005c60 <UART_SetConfig+0xfa8>
 8005c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c5a:	f04f 0400 	mov.w	r4, #0
 8005c5e:	e03a      	b.n	8005cd6 <UART_SetConfig+0x101e>
 8005c60:	f04f 0301 	mov.w	r3, #1
 8005c64:	f04f 0400 	mov.w	r4, #0
 8005c68:	e035      	b.n	8005cd6 <UART_SetConfig+0x101e>
 8005c6a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005c6e:	f04f 0400 	mov.w	r4, #0
 8005c72:	e030      	b.n	8005cd6 <UART_SetConfig+0x101e>
 8005c74:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005c78:	f04f 0400 	mov.w	r4, #0
 8005c7c:	e02b      	b.n	8005cd6 <UART_SetConfig+0x101e>
 8005c7e:	f04f 0320 	mov.w	r3, #32
 8005c82:	f04f 0400 	mov.w	r4, #0
 8005c86:	e026      	b.n	8005cd6 <UART_SetConfig+0x101e>
 8005c88:	f04f 0310 	mov.w	r3, #16
 8005c8c:	f04f 0400 	mov.w	r4, #0
 8005c90:	e021      	b.n	8005cd6 <UART_SetConfig+0x101e>
 8005c92:	f04f 030c 	mov.w	r3, #12
 8005c96:	f04f 0400 	mov.w	r4, #0
 8005c9a:	e01c      	b.n	8005cd6 <UART_SetConfig+0x101e>
 8005c9c:	f04f 030a 	mov.w	r3, #10
 8005ca0:	f04f 0400 	mov.w	r4, #0
 8005ca4:	e017      	b.n	8005cd6 <UART_SetConfig+0x101e>
 8005ca6:	f04f 0308 	mov.w	r3, #8
 8005caa:	f04f 0400 	mov.w	r4, #0
 8005cae:	e012      	b.n	8005cd6 <UART_SetConfig+0x101e>
 8005cb0:	f04f 0306 	mov.w	r3, #6
 8005cb4:	f04f 0400 	mov.w	r4, #0
 8005cb8:	e00d      	b.n	8005cd6 <UART_SetConfig+0x101e>
 8005cba:	f04f 0304 	mov.w	r3, #4
 8005cbe:	f04f 0400 	mov.w	r4, #0
 8005cc2:	e008      	b.n	8005cd6 <UART_SetConfig+0x101e>
 8005cc4:	f04f 0302 	mov.w	r3, #2
 8005cc8:	f04f 0400 	mov.w	r4, #0
 8005ccc:	e003      	b.n	8005cd6 <UART_SetConfig+0x101e>
 8005cce:	f04f 0301 	mov.w	r3, #1
 8005cd2:	f04f 0400 	mov.w	r4, #0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4623      	mov	r3, r4
 8005cda:	f7fa fb05 	bl	80002e8 <__aeabi_uldivmod>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4622      	mov	r2, r4
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	f04f 0400 	mov.w	r4, #0
 8005cee:	0214      	lsls	r4, r2, #8
 8005cf0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005cf4:	020b      	lsls	r3, r1, #8
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6852      	ldr	r2, [r2, #4]
 8005cfa:	0852      	lsrs	r2, r2, #1
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	eb13 0b01 	adds.w	fp, r3, r1
 8005d06:	eb44 0c02 	adc.w	ip, r4, r2
 8005d0a:	4658      	mov	r0, fp
 8005d0c:	4661      	mov	r1, ip
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f04f 0400 	mov.w	r4, #0
 8005d16:	461a      	mov	r2, r3
 8005d18:	4623      	mov	r3, r4
 8005d1a:	f7fa fae5 	bl	80002e8 <__aeabi_uldivmod>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	460c      	mov	r4, r1
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8005d24:	e19e      	b.n	8006064 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d05b      	beq.n	8005de6 <UART_SetConfig+0x112e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d053      	beq.n	8005dde <UART_SetConfig+0x1126>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d04b      	beq.n	8005dd6 <UART_SetConfig+0x111e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d043      	beq.n	8005dce <UART_SetConfig+0x1116>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d03b      	beq.n	8005dc6 <UART_SetConfig+0x110e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	d033      	beq.n	8005dbe <UART_SetConfig+0x1106>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d02b      	beq.n	8005db6 <UART_SetConfig+0x10fe>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	2b07      	cmp	r3, #7
 8005d64:	d023      	beq.n	8005dae <UART_SetConfig+0x10f6>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d01b      	beq.n	8005da6 <UART_SetConfig+0x10ee>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b09      	cmp	r3, #9
 8005d74:	d013      	beq.n	8005d9e <UART_SetConfig+0x10e6>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	2b0a      	cmp	r3, #10
 8005d7c:	d00b      	beq.n	8005d96 <UART_SetConfig+0x10de>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	2b0b      	cmp	r3, #11
 8005d84:	d103      	bne.n	8005d8e <UART_SetConfig+0x10d6>
 8005d86:	4b2b      	ldr	r3, [pc, #172]	; (8005e34 <UART_SetConfig+0x117c>)
 8005d88:	f04f 0400 	mov.w	r4, #0
 8005d8c:	e02e      	b.n	8005dec <UART_SetConfig+0x1134>
 8005d8e:	4b2a      	ldr	r3, [pc, #168]	; (8005e38 <UART_SetConfig+0x1180>)
 8005d90:	f04f 0403 	mov.w	r4, #3
 8005d94:	e02a      	b.n	8005dec <UART_SetConfig+0x1134>
 8005d96:	4b29      	ldr	r3, [pc, #164]	; (8005e3c <UART_SetConfig+0x1184>)
 8005d98:	f04f 0400 	mov.w	r4, #0
 8005d9c:	e026      	b.n	8005dec <UART_SetConfig+0x1134>
 8005d9e:	4b28      	ldr	r3, [pc, #160]	; (8005e40 <UART_SetConfig+0x1188>)
 8005da0:	f04f 0400 	mov.w	r4, #0
 8005da4:	e022      	b.n	8005dec <UART_SetConfig+0x1134>
 8005da6:	4b27      	ldr	r3, [pc, #156]	; (8005e44 <UART_SetConfig+0x118c>)
 8005da8:	f04f 0400 	mov.w	r4, #0
 8005dac:	e01e      	b.n	8005dec <UART_SetConfig+0x1134>
 8005dae:	4b26      	ldr	r3, [pc, #152]	; (8005e48 <UART_SetConfig+0x1190>)
 8005db0:	f04f 0400 	mov.w	r4, #0
 8005db4:	e01a      	b.n	8005dec <UART_SetConfig+0x1134>
 8005db6:	a41a      	add	r4, pc, #104	; (adr r4, 8005e20 <UART_SetConfig+0x1168>)
 8005db8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005dbc:	e016      	b.n	8005dec <UART_SetConfig+0x1134>
 8005dbe:	4b23      	ldr	r3, [pc, #140]	; (8005e4c <UART_SetConfig+0x1194>)
 8005dc0:	f04f 0400 	mov.w	r4, #0
 8005dc4:	e012      	b.n	8005dec <UART_SetConfig+0x1134>
 8005dc6:	4b22      	ldr	r3, [pc, #136]	; (8005e50 <UART_SetConfig+0x1198>)
 8005dc8:	f04f 0400 	mov.w	r4, #0
 8005dcc:	e00e      	b.n	8005dec <UART_SetConfig+0x1134>
 8005dce:	a416      	add	r4, pc, #88	; (adr r4, 8005e28 <UART_SetConfig+0x1170>)
 8005dd0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005dd4:	e00a      	b.n	8005dec <UART_SetConfig+0x1134>
 8005dd6:	4b1f      	ldr	r3, [pc, #124]	; (8005e54 <UART_SetConfig+0x119c>)
 8005dd8:	f04f 0400 	mov.w	r4, #0
 8005ddc:	e006      	b.n	8005dec <UART_SetConfig+0x1134>
 8005dde:	4b1e      	ldr	r3, [pc, #120]	; (8005e58 <UART_SetConfig+0x11a0>)
 8005de0:	f04f 0401 	mov.w	r4, #1
 8005de4:	e002      	b.n	8005dec <UART_SetConfig+0x1134>
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <UART_SetConfig+0x1180>)
 8005de8:	f04f 0403 	mov.w	r4, #3
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6852      	ldr	r2, [r2, #4]
 8005df0:	0852      	lsrs	r2, r2, #1
 8005df2:	4611      	mov	r1, r2
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	eb13 0b01 	adds.w	fp, r3, r1
 8005dfc:	eb44 0c02 	adc.w	ip, r4, r2
 8005e00:	4658      	mov	r0, fp
 8005e02:	4661      	mov	r1, ip
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f04f 0400 	mov.w	r4, #0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4623      	mov	r3, r4
 8005e10:	f7fa fa6a 	bl	80002e8 <__aeabi_uldivmod>
 8005e14:	4603      	mov	r3, r0
 8005e16:	460c      	mov	r4, r1
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005e1a:	e123      	b.n	8006064 <UART_SetConfig+0x13ac>
 8005e1c:	f3af 8000 	nop.w
 8005e20:	51615500 	.word	0x51615500
 8005e24:	00000000 	.word	0x00000000
 8005e28:	a2c2aa00 	.word	0xa2c2aa00
 8005e2c:	00000000 	.word	0x00000000
 8005e30:	58024400 	.word	0x58024400
 8005e34:	03d09000 	.word	0x03d09000
 8005e38:	d0900000 	.word	0xd0900000
 8005e3c:	07a12000 	.word	0x07a12000
 8005e40:	0f424000 	.word	0x0f424000
 8005e44:	1e848000 	.word	0x1e848000
 8005e48:	3d090000 	.word	0x3d090000
 8005e4c:	61a80000 	.word	0x61a80000
 8005e50:	7a120000 	.word	0x7a120000
 8005e54:	f4240000 	.word	0xf4240000
 8005e58:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d05b      	beq.n	8005f1c <UART_SetConfig+0x1264>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d053      	beq.n	8005f14 <UART_SetConfig+0x125c>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d04b      	beq.n	8005f0c <UART_SetConfig+0x1254>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d043      	beq.n	8005f04 <UART_SetConfig+0x124c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d03b      	beq.n	8005efc <UART_SetConfig+0x1244>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b05      	cmp	r3, #5
 8005e8a:	d033      	beq.n	8005ef4 <UART_SetConfig+0x123c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b06      	cmp	r3, #6
 8005e92:	d02b      	beq.n	8005eec <UART_SetConfig+0x1234>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b07      	cmp	r3, #7
 8005e9a:	d023      	beq.n	8005ee4 <UART_SetConfig+0x122c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d01b      	beq.n	8005edc <UART_SetConfig+0x1224>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	2b09      	cmp	r3, #9
 8005eaa:	d013      	beq.n	8005ed4 <UART_SetConfig+0x121c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	2b0a      	cmp	r3, #10
 8005eb2:	d00b      	beq.n	8005ecc <UART_SetConfig+0x1214>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	2b0b      	cmp	r3, #11
 8005eba:	d103      	bne.n	8005ec4 <UART_SetConfig+0x120c>
 8005ebc:	4bc0      	ldr	r3, [pc, #768]	; (80061c0 <UART_SetConfig+0x1508>)
 8005ebe:	f04f 0400 	mov.w	r4, #0
 8005ec2:	e02e      	b.n	8005f22 <UART_SetConfig+0x126a>
 8005ec4:	4bbf      	ldr	r3, [pc, #764]	; (80061c4 <UART_SetConfig+0x150c>)
 8005ec6:	f04f 0400 	mov.w	r4, #0
 8005eca:	e02a      	b.n	8005f22 <UART_SetConfig+0x126a>
 8005ecc:	4bbe      	ldr	r3, [pc, #760]	; (80061c8 <UART_SetConfig+0x1510>)
 8005ece:	f04f 0400 	mov.w	r4, #0
 8005ed2:	e026      	b.n	8005f22 <UART_SetConfig+0x126a>
 8005ed4:	4bbd      	ldr	r3, [pc, #756]	; (80061cc <UART_SetConfig+0x1514>)
 8005ed6:	f04f 0400 	mov.w	r4, #0
 8005eda:	e022      	b.n	8005f22 <UART_SetConfig+0x126a>
 8005edc:	4bbc      	ldr	r3, [pc, #752]	; (80061d0 <UART_SetConfig+0x1518>)
 8005ede:	f04f 0400 	mov.w	r4, #0
 8005ee2:	e01e      	b.n	8005f22 <UART_SetConfig+0x126a>
 8005ee4:	4bbb      	ldr	r3, [pc, #748]	; (80061d4 <UART_SetConfig+0x151c>)
 8005ee6:	f04f 0400 	mov.w	r4, #0
 8005eea:	e01a      	b.n	8005f22 <UART_SetConfig+0x126a>
 8005eec:	a4b0      	add	r4, pc, #704	; (adr r4, 80061b0 <UART_SetConfig+0x14f8>)
 8005eee:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005ef2:	e016      	b.n	8005f22 <UART_SetConfig+0x126a>
 8005ef4:	4bb8      	ldr	r3, [pc, #736]	; (80061d8 <UART_SetConfig+0x1520>)
 8005ef6:	f04f 0400 	mov.w	r4, #0
 8005efa:	e012      	b.n	8005f22 <UART_SetConfig+0x126a>
 8005efc:	4bb7      	ldr	r3, [pc, #732]	; (80061dc <UART_SetConfig+0x1524>)
 8005efe:	f04f 0400 	mov.w	r4, #0
 8005f02:	e00e      	b.n	8005f22 <UART_SetConfig+0x126a>
 8005f04:	a4ac      	add	r4, pc, #688	; (adr r4, 80061b8 <UART_SetConfig+0x1500>)
 8005f06:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005f0a:	e00a      	b.n	8005f22 <UART_SetConfig+0x126a>
 8005f0c:	4bb4      	ldr	r3, [pc, #720]	; (80061e0 <UART_SetConfig+0x1528>)
 8005f0e:	f04f 0400 	mov.w	r4, #0
 8005f12:	e006      	b.n	8005f22 <UART_SetConfig+0x126a>
 8005f14:	4bb3      	ldr	r3, [pc, #716]	; (80061e4 <UART_SetConfig+0x152c>)
 8005f16:	f04f 0400 	mov.w	r4, #0
 8005f1a:	e002      	b.n	8005f22 <UART_SetConfig+0x126a>
 8005f1c:	4ba9      	ldr	r3, [pc, #676]	; (80061c4 <UART_SetConfig+0x150c>)
 8005f1e:	f04f 0400 	mov.w	r4, #0
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6852      	ldr	r2, [r2, #4]
 8005f26:	0852      	lsrs	r2, r2, #1
 8005f28:	4611      	mov	r1, r2
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	eb13 0b01 	adds.w	fp, r3, r1
 8005f32:	eb44 0c02 	adc.w	ip, r4, r2
 8005f36:	4658      	mov	r0, fp
 8005f38:	4661      	mov	r1, ip
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f04f 0400 	mov.w	r4, #0
 8005f42:	461a      	mov	r2, r3
 8005f44:	4623      	mov	r3, r4
 8005f46:	f7fa f9cf 	bl	80002e8 <__aeabi_uldivmod>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005f50:	e088      	b.n	8006064 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d064      	beq.n	8006024 <UART_SetConfig+0x136c>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d05b      	beq.n	800601a <UART_SetConfig+0x1362>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d052      	beq.n	8006010 <UART_SetConfig+0x1358>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d04a      	beq.n	8006008 <UART_SetConfig+0x1350>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d041      	beq.n	8005ffe <UART_SetConfig+0x1346>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d039      	beq.n	8005ff6 <UART_SetConfig+0x133e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	2b06      	cmp	r3, #6
 8005f88:	d031      	beq.n	8005fee <UART_SetConfig+0x1336>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	2b07      	cmp	r3, #7
 8005f90:	d028      	beq.n	8005fe4 <UART_SetConfig+0x132c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d01f      	beq.n	8005fda <UART_SetConfig+0x1322>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	2b09      	cmp	r3, #9
 8005fa0:	d016      	beq.n	8005fd0 <UART_SetConfig+0x1318>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	2b0a      	cmp	r3, #10
 8005fa8:	d00d      	beq.n	8005fc6 <UART_SetConfig+0x130e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	2b0b      	cmp	r3, #11
 8005fb0:	d104      	bne.n	8005fbc <UART_SetConfig+0x1304>
 8005fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb6:	f04f 0400 	mov.w	r4, #0
 8005fba:	e037      	b.n	800602c <UART_SetConfig+0x1374>
 8005fbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005fc0:	f04f 0400 	mov.w	r4, #0
 8005fc4:	e032      	b.n	800602c <UART_SetConfig+0x1374>
 8005fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fca:	f04f 0400 	mov.w	r4, #0
 8005fce:	e02d      	b.n	800602c <UART_SetConfig+0x1374>
 8005fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fd4:	f04f 0400 	mov.w	r4, #0
 8005fd8:	e028      	b.n	800602c <UART_SetConfig+0x1374>
 8005fda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005fde:	f04f 0400 	mov.w	r4, #0
 8005fe2:	e023      	b.n	800602c <UART_SetConfig+0x1374>
 8005fe4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005fe8:	f04f 0400 	mov.w	r4, #0
 8005fec:	e01e      	b.n	800602c <UART_SetConfig+0x1374>
 8005fee:	4b7e      	ldr	r3, [pc, #504]	; (80061e8 <UART_SetConfig+0x1530>)
 8005ff0:	f04f 0400 	mov.w	r4, #0
 8005ff4:	e01a      	b.n	800602c <UART_SetConfig+0x1374>
 8005ff6:	4b7d      	ldr	r3, [pc, #500]	; (80061ec <UART_SetConfig+0x1534>)
 8005ff8:	f04f 0400 	mov.w	r4, #0
 8005ffc:	e016      	b.n	800602c <UART_SetConfig+0x1374>
 8005ffe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006002:	f04f 0400 	mov.w	r4, #0
 8006006:	e011      	b.n	800602c <UART_SetConfig+0x1374>
 8006008:	4b79      	ldr	r3, [pc, #484]	; (80061f0 <UART_SetConfig+0x1538>)
 800600a:	f04f 0400 	mov.w	r4, #0
 800600e:	e00d      	b.n	800602c <UART_SetConfig+0x1374>
 8006010:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006014:	f04f 0400 	mov.w	r4, #0
 8006018:	e008      	b.n	800602c <UART_SetConfig+0x1374>
 800601a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800601e:	f04f 0400 	mov.w	r4, #0
 8006022:	e003      	b.n	800602c <UART_SetConfig+0x1374>
 8006024:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006028:	f04f 0400 	mov.w	r4, #0
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6852      	ldr	r2, [r2, #4]
 8006030:	0852      	lsrs	r2, r2, #1
 8006032:	4611      	mov	r1, r2
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	eb13 0b01 	adds.w	fp, r3, r1
 800603c:	eb44 0c02 	adc.w	ip, r4, r2
 8006040:	4658      	mov	r0, fp
 8006042:	4661      	mov	r1, ip
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f04f 0400 	mov.w	r4, #0
 800604c:	461a      	mov	r2, r3
 800604e:	4623      	mov	r3, r4
 8006050:	f7fa f94a 	bl	80002e8 <__aeabi_uldivmod>
 8006054:	4603      	mov	r3, r0
 8006056:	460c      	mov	r4, r1
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800605a:	e003      	b.n	8006064 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8006062:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606a:	d309      	bcc.n	8006080 <UART_SetConfig+0x13c8>
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006072:	d205      	bcs.n	8006080 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800607a:	60da      	str	r2, [r3, #12]
 800607c:	f000 bf81 	b.w	8006f82 <UART_SetConfig+0x22ca>
        }
        else
        {
          ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006086:	f000 bf7c 	b.w	8006f82 <UART_SetConfig+0x22ca>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006092:	f040 83d8 	bne.w	8006846 <UART_SetConfig+0x1b8e>
  {
    switch (clocksource)
 8006096:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800609a:	2b40      	cmp	r3, #64	; 0x40
 800609c:	f200 83b1 	bhi.w	8006802 <UART_SetConfig+0x1b4a>
 80060a0:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <UART_SetConfig+0x13f0>)
 80060a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a6:	bf00      	nop
 80060a8:	080061f5 	.word	0x080061f5
 80060ac:	080062ab 	.word	0x080062ab
 80060b0:	08006803 	.word	0x08006803
 80060b4:	08006803 	.word	0x08006803
 80060b8:	08006361 	.word	0x08006361
 80060bc:	08006803 	.word	0x08006803
 80060c0:	08006803 	.word	0x08006803
 80060c4:	08006803 	.word	0x08006803
 80060c8:	0800641d 	.word	0x0800641d
 80060cc:	08006803 	.word	0x08006803
 80060d0:	08006803 	.word	0x08006803
 80060d4:	08006803 	.word	0x08006803
 80060d8:	08006803 	.word	0x08006803
 80060dc:	08006803 	.word	0x08006803
 80060e0:	08006803 	.word	0x08006803
 80060e4:	08006803 	.word	0x08006803
 80060e8:	080064d9 	.word	0x080064d9
 80060ec:	08006803 	.word	0x08006803
 80060f0:	08006803 	.word	0x08006803
 80060f4:	08006803 	.word	0x08006803
 80060f8:	08006803 	.word	0x08006803
 80060fc:	08006803 	.word	0x08006803
 8006100:	08006803 	.word	0x08006803
 8006104:	08006803 	.word	0x08006803
 8006108:	08006803 	.word	0x08006803
 800610c:	08006803 	.word	0x08006803
 8006110:	08006803 	.word	0x08006803
 8006114:	08006803 	.word	0x08006803
 8006118:	08006803 	.word	0x08006803
 800611c:	08006803 	.word	0x08006803
 8006120:	08006803 	.word	0x08006803
 8006124:	08006803 	.word	0x08006803
 8006128:	0800664b 	.word	0x0800664b
 800612c:	08006803 	.word	0x08006803
 8006130:	08006803 	.word	0x08006803
 8006134:	08006803 	.word	0x08006803
 8006138:	08006803 	.word	0x08006803
 800613c:	08006803 	.word	0x08006803
 8006140:	08006803 	.word	0x08006803
 8006144:	08006803 	.word	0x08006803
 8006148:	08006803 	.word	0x08006803
 800614c:	08006803 	.word	0x08006803
 8006150:	08006803 	.word	0x08006803
 8006154:	08006803 	.word	0x08006803
 8006158:	08006803 	.word	0x08006803
 800615c:	08006803 	.word	0x08006803
 8006160:	08006803 	.word	0x08006803
 8006164:	08006803 	.word	0x08006803
 8006168:	08006803 	.word	0x08006803
 800616c:	08006803 	.word	0x08006803
 8006170:	08006803 	.word	0x08006803
 8006174:	08006803 	.word	0x08006803
 8006178:	08006803 	.word	0x08006803
 800617c:	08006803 	.word	0x08006803
 8006180:	08006803 	.word	0x08006803
 8006184:	08006803 	.word	0x08006803
 8006188:	08006803 	.word	0x08006803
 800618c:	08006803 	.word	0x08006803
 8006190:	08006803 	.word	0x08006803
 8006194:	08006803 	.word	0x08006803
 8006198:	08006803 	.word	0x08006803
 800619c:	08006803 	.word	0x08006803
 80061a0:	08006803 	.word	0x08006803
 80061a4:	08006803 	.word	0x08006803
 80061a8:	08006741 	.word	0x08006741
 80061ac:	f3af 8000 	nop.w
 80061b0:	05161500 	.word	0x05161500
 80061b4:	00000000 	.word	0x00000000
 80061b8:	0a2c2a00 	.word	0x0a2c2a00
 80061bc:	00000000 	.word	0x00000000
 80061c0:	003d0900 	.word	0x003d0900
 80061c4:	3d090000 	.word	0x3d090000
 80061c8:	007a1200 	.word	0x007a1200
 80061cc:	00f42400 	.word	0x00f42400
 80061d0:	01e84800 	.word	0x01e84800
 80061d4:	03d09000 	.word	0x03d09000
 80061d8:	061a8000 	.word	0x061a8000
 80061dc:	07a12000 	.word	0x07a12000
 80061e0:	0f424000 	.word	0x0f424000
 80061e4:	1e848000 	.word	0x1e848000
 80061e8:	000aaa00 	.word	0x000aaa00
 80061ec:	000ccc00 	.word	0x000ccc00
 80061f0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061f4:	f7fb ff9e 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 80061f8:	4602      	mov	r2, r0
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d044      	beq.n	800628c <UART_SetConfig+0x15d4>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	2b01      	cmp	r3, #1
 8006208:	d03e      	beq.n	8006288 <UART_SetConfig+0x15d0>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	2b02      	cmp	r3, #2
 8006210:	d038      	beq.n	8006284 <UART_SetConfig+0x15cc>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	2b03      	cmp	r3, #3
 8006218:	d032      	beq.n	8006280 <UART_SetConfig+0x15c8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	2b04      	cmp	r3, #4
 8006220:	d02c      	beq.n	800627c <UART_SetConfig+0x15c4>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2b05      	cmp	r3, #5
 8006228:	d026      	beq.n	8006278 <UART_SetConfig+0x15c0>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	2b06      	cmp	r3, #6
 8006230:	d020      	beq.n	8006274 <UART_SetConfig+0x15bc>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	2b07      	cmp	r3, #7
 8006238:	d01a      	beq.n	8006270 <UART_SetConfig+0x15b8>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b08      	cmp	r3, #8
 8006240:	d014      	beq.n	800626c <UART_SetConfig+0x15b4>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	2b09      	cmp	r3, #9
 8006248:	d00e      	beq.n	8006268 <UART_SetConfig+0x15b0>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	2b0a      	cmp	r3, #10
 8006250:	d008      	beq.n	8006264 <UART_SetConfig+0x15ac>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	2b0b      	cmp	r3, #11
 8006258:	d102      	bne.n	8006260 <UART_SetConfig+0x15a8>
 800625a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800625e:	e016      	b.n	800628e <UART_SetConfig+0x15d6>
 8006260:	2301      	movs	r3, #1
 8006262:	e014      	b.n	800628e <UART_SetConfig+0x15d6>
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	e012      	b.n	800628e <UART_SetConfig+0x15d6>
 8006268:	2340      	movs	r3, #64	; 0x40
 800626a:	e010      	b.n	800628e <UART_SetConfig+0x15d6>
 800626c:	2320      	movs	r3, #32
 800626e:	e00e      	b.n	800628e <UART_SetConfig+0x15d6>
 8006270:	2310      	movs	r3, #16
 8006272:	e00c      	b.n	800628e <UART_SetConfig+0x15d6>
 8006274:	230c      	movs	r3, #12
 8006276:	e00a      	b.n	800628e <UART_SetConfig+0x15d6>
 8006278:	230a      	movs	r3, #10
 800627a:	e008      	b.n	800628e <UART_SetConfig+0x15d6>
 800627c:	2308      	movs	r3, #8
 800627e:	e006      	b.n	800628e <UART_SetConfig+0x15d6>
 8006280:	2306      	movs	r3, #6
 8006282:	e004      	b.n	800628e <UART_SetConfig+0x15d6>
 8006284:	2304      	movs	r3, #4
 8006286:	e002      	b.n	800628e <UART_SetConfig+0x15d6>
 8006288:	2302      	movs	r3, #2
 800628a:	e000      	b.n	800628e <UART_SetConfig+0x15d6>
 800628c:	2301      	movs	r3, #1
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	005a      	lsls	r2, r3, #1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	085b      	lsrs	r3, r3, #1
 800629a:	441a      	add	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062a8:	e2af      	b.n	800680a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062aa:	f7fb ff59 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 80062ae:	4602      	mov	r2, r0
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d044      	beq.n	8006342 <UART_SetConfig+0x168a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d03e      	beq.n	800633e <UART_SetConfig+0x1686>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d038      	beq.n	800633a <UART_SetConfig+0x1682>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d032      	beq.n	8006336 <UART_SetConfig+0x167e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d02c      	beq.n	8006332 <UART_SetConfig+0x167a>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	2b05      	cmp	r3, #5
 80062de:	d026      	beq.n	800632e <UART_SetConfig+0x1676>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	2b06      	cmp	r3, #6
 80062e6:	d020      	beq.n	800632a <UART_SetConfig+0x1672>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	2b07      	cmp	r3, #7
 80062ee:	d01a      	beq.n	8006326 <UART_SetConfig+0x166e>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d014      	beq.n	8006322 <UART_SetConfig+0x166a>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	2b09      	cmp	r3, #9
 80062fe:	d00e      	beq.n	800631e <UART_SetConfig+0x1666>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	2b0a      	cmp	r3, #10
 8006306:	d008      	beq.n	800631a <UART_SetConfig+0x1662>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	2b0b      	cmp	r3, #11
 800630e:	d102      	bne.n	8006316 <UART_SetConfig+0x165e>
 8006310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006314:	e016      	b.n	8006344 <UART_SetConfig+0x168c>
 8006316:	2301      	movs	r3, #1
 8006318:	e014      	b.n	8006344 <UART_SetConfig+0x168c>
 800631a:	2380      	movs	r3, #128	; 0x80
 800631c:	e012      	b.n	8006344 <UART_SetConfig+0x168c>
 800631e:	2340      	movs	r3, #64	; 0x40
 8006320:	e010      	b.n	8006344 <UART_SetConfig+0x168c>
 8006322:	2320      	movs	r3, #32
 8006324:	e00e      	b.n	8006344 <UART_SetConfig+0x168c>
 8006326:	2310      	movs	r3, #16
 8006328:	e00c      	b.n	8006344 <UART_SetConfig+0x168c>
 800632a:	230c      	movs	r3, #12
 800632c:	e00a      	b.n	8006344 <UART_SetConfig+0x168c>
 800632e:	230a      	movs	r3, #10
 8006330:	e008      	b.n	8006344 <UART_SetConfig+0x168c>
 8006332:	2308      	movs	r3, #8
 8006334:	e006      	b.n	8006344 <UART_SetConfig+0x168c>
 8006336:	2306      	movs	r3, #6
 8006338:	e004      	b.n	8006344 <UART_SetConfig+0x168c>
 800633a:	2304      	movs	r3, #4
 800633c:	e002      	b.n	8006344 <UART_SetConfig+0x168c>
 800633e:	2302      	movs	r3, #2
 8006340:	e000      	b.n	8006344 <UART_SetConfig+0x168c>
 8006342:	2301      	movs	r3, #1
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	005a      	lsls	r2, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	085b      	lsrs	r3, r3, #1
 8006350:	441a      	add	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	fbb2 f3f3 	udiv	r3, r2, r3
 800635a:	b29b      	uxth	r3, r3
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800635e:	e254      	b.n	800680a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006360:	f107 0314 	add.w	r3, r7, #20
 8006364:	4618      	mov	r0, r3
 8006366:	f7fc fe17 	bl	8002f98 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d044      	beq.n	80063fe <UART_SetConfig+0x1746>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	2b01      	cmp	r3, #1
 800637a:	d03e      	beq.n	80063fa <UART_SetConfig+0x1742>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	2b02      	cmp	r3, #2
 8006382:	d038      	beq.n	80063f6 <UART_SetConfig+0x173e>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	2b03      	cmp	r3, #3
 800638a:	d032      	beq.n	80063f2 <UART_SetConfig+0x173a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	2b04      	cmp	r3, #4
 8006392:	d02c      	beq.n	80063ee <UART_SetConfig+0x1736>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	2b05      	cmp	r3, #5
 800639a:	d026      	beq.n	80063ea <UART_SetConfig+0x1732>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b06      	cmp	r3, #6
 80063a2:	d020      	beq.n	80063e6 <UART_SetConfig+0x172e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2b07      	cmp	r3, #7
 80063aa:	d01a      	beq.n	80063e2 <UART_SetConfig+0x172a>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d014      	beq.n	80063de <UART_SetConfig+0x1726>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b09      	cmp	r3, #9
 80063ba:	d00e      	beq.n	80063da <UART_SetConfig+0x1722>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	2b0a      	cmp	r3, #10
 80063c2:	d008      	beq.n	80063d6 <UART_SetConfig+0x171e>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	2b0b      	cmp	r3, #11
 80063ca:	d102      	bne.n	80063d2 <UART_SetConfig+0x171a>
 80063cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063d0:	e016      	b.n	8006400 <UART_SetConfig+0x1748>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e014      	b.n	8006400 <UART_SetConfig+0x1748>
 80063d6:	2380      	movs	r3, #128	; 0x80
 80063d8:	e012      	b.n	8006400 <UART_SetConfig+0x1748>
 80063da:	2340      	movs	r3, #64	; 0x40
 80063dc:	e010      	b.n	8006400 <UART_SetConfig+0x1748>
 80063de:	2320      	movs	r3, #32
 80063e0:	e00e      	b.n	8006400 <UART_SetConfig+0x1748>
 80063e2:	2310      	movs	r3, #16
 80063e4:	e00c      	b.n	8006400 <UART_SetConfig+0x1748>
 80063e6:	230c      	movs	r3, #12
 80063e8:	e00a      	b.n	8006400 <UART_SetConfig+0x1748>
 80063ea:	230a      	movs	r3, #10
 80063ec:	e008      	b.n	8006400 <UART_SetConfig+0x1748>
 80063ee:	2308      	movs	r3, #8
 80063f0:	e006      	b.n	8006400 <UART_SetConfig+0x1748>
 80063f2:	2306      	movs	r3, #6
 80063f4:	e004      	b.n	8006400 <UART_SetConfig+0x1748>
 80063f6:	2304      	movs	r3, #4
 80063f8:	e002      	b.n	8006400 <UART_SetConfig+0x1748>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e000      	b.n	8006400 <UART_SetConfig+0x1748>
 80063fe:	2301      	movs	r3, #1
 8006400:	fbb2 f3f3 	udiv	r3, r2, r3
 8006404:	005a      	lsls	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	085b      	lsrs	r3, r3, #1
 800640c:	441a      	add	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	fbb2 f3f3 	udiv	r3, r2, r3
 8006416:	b29b      	uxth	r3, r3
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800641a:	e1f6      	b.n	800680a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800641c:	f107 0308 	add.w	r3, r7, #8
 8006420:	4618      	mov	r0, r3
 8006422:	f7fc ff05 	bl	8003230 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	d044      	beq.n	80064ba <UART_SetConfig+0x1802>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	2b01      	cmp	r3, #1
 8006436:	d03e      	beq.n	80064b6 <UART_SetConfig+0x17fe>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	2b02      	cmp	r3, #2
 800643e:	d038      	beq.n	80064b2 <UART_SetConfig+0x17fa>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	2b03      	cmp	r3, #3
 8006446:	d032      	beq.n	80064ae <UART_SetConfig+0x17f6>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	2b04      	cmp	r3, #4
 800644e:	d02c      	beq.n	80064aa <UART_SetConfig+0x17f2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	2b05      	cmp	r3, #5
 8006456:	d026      	beq.n	80064a6 <UART_SetConfig+0x17ee>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	2b06      	cmp	r3, #6
 800645e:	d020      	beq.n	80064a2 <UART_SetConfig+0x17ea>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	2b07      	cmp	r3, #7
 8006466:	d01a      	beq.n	800649e <UART_SetConfig+0x17e6>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	2b08      	cmp	r3, #8
 800646e:	d014      	beq.n	800649a <UART_SetConfig+0x17e2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	2b09      	cmp	r3, #9
 8006476:	d00e      	beq.n	8006496 <UART_SetConfig+0x17de>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	2b0a      	cmp	r3, #10
 800647e:	d008      	beq.n	8006492 <UART_SetConfig+0x17da>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	2b0b      	cmp	r3, #11
 8006486:	d102      	bne.n	800648e <UART_SetConfig+0x17d6>
 8006488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800648c:	e016      	b.n	80064bc <UART_SetConfig+0x1804>
 800648e:	2301      	movs	r3, #1
 8006490:	e014      	b.n	80064bc <UART_SetConfig+0x1804>
 8006492:	2380      	movs	r3, #128	; 0x80
 8006494:	e012      	b.n	80064bc <UART_SetConfig+0x1804>
 8006496:	2340      	movs	r3, #64	; 0x40
 8006498:	e010      	b.n	80064bc <UART_SetConfig+0x1804>
 800649a:	2320      	movs	r3, #32
 800649c:	e00e      	b.n	80064bc <UART_SetConfig+0x1804>
 800649e:	2310      	movs	r3, #16
 80064a0:	e00c      	b.n	80064bc <UART_SetConfig+0x1804>
 80064a2:	230c      	movs	r3, #12
 80064a4:	e00a      	b.n	80064bc <UART_SetConfig+0x1804>
 80064a6:	230a      	movs	r3, #10
 80064a8:	e008      	b.n	80064bc <UART_SetConfig+0x1804>
 80064aa:	2308      	movs	r3, #8
 80064ac:	e006      	b.n	80064bc <UART_SetConfig+0x1804>
 80064ae:	2306      	movs	r3, #6
 80064b0:	e004      	b.n	80064bc <UART_SetConfig+0x1804>
 80064b2:	2304      	movs	r3, #4
 80064b4:	e002      	b.n	80064bc <UART_SetConfig+0x1804>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e000      	b.n	80064bc <UART_SetConfig+0x1804>
 80064ba:	2301      	movs	r3, #1
 80064bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c0:	005a      	lsls	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	441a      	add	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064d6:	e198      	b.n	800680a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064d8:	4b87      	ldr	r3, [pc, #540]	; (80066f8 <UART_SetConfig+0x1a40>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d05e      	beq.n	80065a2 <UART_SetConfig+0x18ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064e4:	4b84      	ldr	r3, [pc, #528]	; (80066f8 <UART_SetConfig+0x1a40>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	08db      	lsrs	r3, r3, #3
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	4a83      	ldr	r2, [pc, #524]	; (80066fc <UART_SetConfig+0x1a44>)
 80064f0:	40da      	lsrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d044      	beq.n	8006584 <UART_SetConfig+0x18cc>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d03e      	beq.n	8006580 <UART_SetConfig+0x18c8>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	2b02      	cmp	r3, #2
 8006508:	d038      	beq.n	800657c <UART_SetConfig+0x18c4>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	2b03      	cmp	r3, #3
 8006510:	d032      	beq.n	8006578 <UART_SetConfig+0x18c0>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	2b04      	cmp	r3, #4
 8006518:	d02c      	beq.n	8006574 <UART_SetConfig+0x18bc>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	2b05      	cmp	r3, #5
 8006520:	d026      	beq.n	8006570 <UART_SetConfig+0x18b8>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	2b06      	cmp	r3, #6
 8006528:	d020      	beq.n	800656c <UART_SetConfig+0x18b4>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	2b07      	cmp	r3, #7
 8006530:	d01a      	beq.n	8006568 <UART_SetConfig+0x18b0>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	2b08      	cmp	r3, #8
 8006538:	d014      	beq.n	8006564 <UART_SetConfig+0x18ac>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	2b09      	cmp	r3, #9
 8006540:	d00e      	beq.n	8006560 <UART_SetConfig+0x18a8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2b0a      	cmp	r3, #10
 8006548:	d008      	beq.n	800655c <UART_SetConfig+0x18a4>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	2b0b      	cmp	r3, #11
 8006550:	d102      	bne.n	8006558 <UART_SetConfig+0x18a0>
 8006552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006556:	e016      	b.n	8006586 <UART_SetConfig+0x18ce>
 8006558:	2301      	movs	r3, #1
 800655a:	e014      	b.n	8006586 <UART_SetConfig+0x18ce>
 800655c:	2380      	movs	r3, #128	; 0x80
 800655e:	e012      	b.n	8006586 <UART_SetConfig+0x18ce>
 8006560:	2340      	movs	r3, #64	; 0x40
 8006562:	e010      	b.n	8006586 <UART_SetConfig+0x18ce>
 8006564:	2320      	movs	r3, #32
 8006566:	e00e      	b.n	8006586 <UART_SetConfig+0x18ce>
 8006568:	2310      	movs	r3, #16
 800656a:	e00c      	b.n	8006586 <UART_SetConfig+0x18ce>
 800656c:	230c      	movs	r3, #12
 800656e:	e00a      	b.n	8006586 <UART_SetConfig+0x18ce>
 8006570:	230a      	movs	r3, #10
 8006572:	e008      	b.n	8006586 <UART_SetConfig+0x18ce>
 8006574:	2308      	movs	r3, #8
 8006576:	e006      	b.n	8006586 <UART_SetConfig+0x18ce>
 8006578:	2306      	movs	r3, #6
 800657a:	e004      	b.n	8006586 <UART_SetConfig+0x18ce>
 800657c:	2304      	movs	r3, #4
 800657e:	e002      	b.n	8006586 <UART_SetConfig+0x18ce>
 8006580:	2302      	movs	r3, #2
 8006582:	e000      	b.n	8006586 <UART_SetConfig+0x18ce>
 8006584:	2301      	movs	r3, #1
 8006586:	fbb2 f3f3 	udiv	r3, r2, r3
 800658a:	005a      	lsls	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	441a      	add	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	fbb2 f3f3 	udiv	r3, r2, r3
 800659c:	b29b      	uxth	r3, r3
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80065a0:	e133      	b.n	800680a <UART_SetConfig+0x1b52>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d043      	beq.n	8006632 <UART_SetConfig+0x197a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d03d      	beq.n	800662e <UART_SetConfig+0x1976>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d037      	beq.n	800662a <UART_SetConfig+0x1972>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d031      	beq.n	8006626 <UART_SetConfig+0x196e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d02b      	beq.n	8006622 <UART_SetConfig+0x196a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d025      	beq.n	800661e <UART_SetConfig+0x1966>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	2b06      	cmp	r3, #6
 80065d8:	d01f      	beq.n	800661a <UART_SetConfig+0x1962>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	2b07      	cmp	r3, #7
 80065e0:	d019      	beq.n	8006616 <UART_SetConfig+0x195e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d013      	beq.n	8006612 <UART_SetConfig+0x195a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	2b09      	cmp	r3, #9
 80065f0:	d00d      	beq.n	800660e <UART_SetConfig+0x1956>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	2b0a      	cmp	r3, #10
 80065f8:	d007      	beq.n	800660a <UART_SetConfig+0x1952>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	2b0b      	cmp	r3, #11
 8006600:	d101      	bne.n	8006606 <UART_SetConfig+0x194e>
 8006602:	4b3f      	ldr	r3, [pc, #252]	; (8006700 <UART_SetConfig+0x1a48>)
 8006604:	e016      	b.n	8006634 <UART_SetConfig+0x197c>
 8006606:	4b3f      	ldr	r3, [pc, #252]	; (8006704 <UART_SetConfig+0x1a4c>)
 8006608:	e014      	b.n	8006634 <UART_SetConfig+0x197c>
 800660a:	4b3f      	ldr	r3, [pc, #252]	; (8006708 <UART_SetConfig+0x1a50>)
 800660c:	e012      	b.n	8006634 <UART_SetConfig+0x197c>
 800660e:	4b3f      	ldr	r3, [pc, #252]	; (800670c <UART_SetConfig+0x1a54>)
 8006610:	e010      	b.n	8006634 <UART_SetConfig+0x197c>
 8006612:	4b3f      	ldr	r3, [pc, #252]	; (8006710 <UART_SetConfig+0x1a58>)
 8006614:	e00e      	b.n	8006634 <UART_SetConfig+0x197c>
 8006616:	4b3f      	ldr	r3, [pc, #252]	; (8006714 <UART_SetConfig+0x1a5c>)
 8006618:	e00c      	b.n	8006634 <UART_SetConfig+0x197c>
 800661a:	4b3f      	ldr	r3, [pc, #252]	; (8006718 <UART_SetConfig+0x1a60>)
 800661c:	e00a      	b.n	8006634 <UART_SetConfig+0x197c>
 800661e:	4b3f      	ldr	r3, [pc, #252]	; (800671c <UART_SetConfig+0x1a64>)
 8006620:	e008      	b.n	8006634 <UART_SetConfig+0x197c>
 8006622:	4b3f      	ldr	r3, [pc, #252]	; (8006720 <UART_SetConfig+0x1a68>)
 8006624:	e006      	b.n	8006634 <UART_SetConfig+0x197c>
 8006626:	4b3f      	ldr	r3, [pc, #252]	; (8006724 <UART_SetConfig+0x1a6c>)
 8006628:	e004      	b.n	8006634 <UART_SetConfig+0x197c>
 800662a:	4b3f      	ldr	r3, [pc, #252]	; (8006728 <UART_SetConfig+0x1a70>)
 800662c:	e002      	b.n	8006634 <UART_SetConfig+0x197c>
 800662e:	4b33      	ldr	r3, [pc, #204]	; (80066fc <UART_SetConfig+0x1a44>)
 8006630:	e000      	b.n	8006634 <UART_SetConfig+0x197c>
 8006632:	4b34      	ldr	r3, [pc, #208]	; (8006704 <UART_SetConfig+0x1a4c>)
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6852      	ldr	r2, [r2, #4]
 8006638:	0852      	lsrs	r2, r2, #1
 800663a:	441a      	add	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	fbb2 f3f3 	udiv	r3, r2, r3
 8006644:	b29b      	uxth	r3, r3
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006648:	e0df      	b.n	800680a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	d045      	beq.n	80066de <UART_SetConfig+0x1a26>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	2b01      	cmp	r3, #1
 8006658:	d03f      	beq.n	80066da <UART_SetConfig+0x1a22>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	2b02      	cmp	r3, #2
 8006660:	d039      	beq.n	80066d6 <UART_SetConfig+0x1a1e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	2b03      	cmp	r3, #3
 8006668:	d033      	beq.n	80066d2 <UART_SetConfig+0x1a1a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	2b04      	cmp	r3, #4
 8006670:	d02d      	beq.n	80066ce <UART_SetConfig+0x1a16>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	2b05      	cmp	r3, #5
 8006678:	d027      	beq.n	80066ca <UART_SetConfig+0x1a12>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	2b06      	cmp	r3, #6
 8006680:	d021      	beq.n	80066c6 <UART_SetConfig+0x1a0e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	2b07      	cmp	r3, #7
 8006688:	d01b      	beq.n	80066c2 <UART_SetConfig+0x1a0a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	2b08      	cmp	r3, #8
 8006690:	d015      	beq.n	80066be <UART_SetConfig+0x1a06>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	2b09      	cmp	r3, #9
 8006698:	d00f      	beq.n	80066ba <UART_SetConfig+0x1a02>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	2b0a      	cmp	r3, #10
 80066a0:	d008      	beq.n	80066b4 <UART_SetConfig+0x19fc>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	2b0b      	cmp	r3, #11
 80066a8:	d102      	bne.n	80066b0 <UART_SetConfig+0x19f8>
 80066aa:	f647 2312 	movw	r3, #31250	; 0x7a12
 80066ae:	e017      	b.n	80066e0 <UART_SetConfig+0x1a28>
 80066b0:	4b18      	ldr	r3, [pc, #96]	; (8006714 <UART_SetConfig+0x1a5c>)
 80066b2:	e015      	b.n	80066e0 <UART_SetConfig+0x1a28>
 80066b4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80066b8:	e012      	b.n	80066e0 <UART_SetConfig+0x1a28>
 80066ba:	4b1c      	ldr	r3, [pc, #112]	; (800672c <UART_SetConfig+0x1a74>)
 80066bc:	e010      	b.n	80066e0 <UART_SetConfig+0x1a28>
 80066be:	4b1c      	ldr	r3, [pc, #112]	; (8006730 <UART_SetConfig+0x1a78>)
 80066c0:	e00e      	b.n	80066e0 <UART_SetConfig+0x1a28>
 80066c2:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <UART_SetConfig+0x1a48>)
 80066c4:	e00c      	b.n	80066e0 <UART_SetConfig+0x1a28>
 80066c6:	4b1b      	ldr	r3, [pc, #108]	; (8006734 <UART_SetConfig+0x1a7c>)
 80066c8:	e00a      	b.n	80066e0 <UART_SetConfig+0x1a28>
 80066ca:	4b1b      	ldr	r3, [pc, #108]	; (8006738 <UART_SetConfig+0x1a80>)
 80066cc:	e008      	b.n	80066e0 <UART_SetConfig+0x1a28>
 80066ce:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <UART_SetConfig+0x1a50>)
 80066d0:	e006      	b.n	80066e0 <UART_SetConfig+0x1a28>
 80066d2:	4b1a      	ldr	r3, [pc, #104]	; (800673c <UART_SetConfig+0x1a84>)
 80066d4:	e004      	b.n	80066e0 <UART_SetConfig+0x1a28>
 80066d6:	4b0d      	ldr	r3, [pc, #52]	; (800670c <UART_SetConfig+0x1a54>)
 80066d8:	e002      	b.n	80066e0 <UART_SetConfig+0x1a28>
 80066da:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <UART_SetConfig+0x1a58>)
 80066dc:	e000      	b.n	80066e0 <UART_SetConfig+0x1a28>
 80066de:	4b0d      	ldr	r3, [pc, #52]	; (8006714 <UART_SetConfig+0x1a5c>)
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6852      	ldr	r2, [r2, #4]
 80066e4:	0852      	lsrs	r2, r2, #1
 80066e6:	441a      	add	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066f4:	e089      	b.n	800680a <UART_SetConfig+0x1b52>
 80066f6:	bf00      	nop
 80066f8:	58024400 	.word	0x58024400
 80066fc:	03d09000 	.word	0x03d09000
 8006700:	0007a120 	.word	0x0007a120
 8006704:	07a12000 	.word	0x07a12000
 8006708:	000f4240 	.word	0x000f4240
 800670c:	001e8480 	.word	0x001e8480
 8006710:	003d0900 	.word	0x003d0900
 8006714:	007a1200 	.word	0x007a1200
 8006718:	00a2c2aa 	.word	0x00a2c2aa
 800671c:	00c35000 	.word	0x00c35000
 8006720:	00f42400 	.word	0x00f42400
 8006724:	01458554 	.word	0x01458554
 8006728:	01e84800 	.word	0x01e84800
 800672c:	0001e848 	.word	0x0001e848
 8006730:	0003d090 	.word	0x0003d090
 8006734:	000a2c2a 	.word	0x000a2c2a
 8006738:	000c3500 	.word	0x000c3500
 800673c:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	d04f      	beq.n	80067e8 <UART_SetConfig+0x1b30>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	2b01      	cmp	r3, #1
 800674e:	d048      	beq.n	80067e2 <UART_SetConfig+0x1b2a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	2b02      	cmp	r3, #2
 8006756:	d041      	beq.n	80067dc <UART_SetConfig+0x1b24>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	2b03      	cmp	r3, #3
 800675e:	d03a      	beq.n	80067d6 <UART_SetConfig+0x1b1e>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	2b04      	cmp	r3, #4
 8006766:	d033      	beq.n	80067d0 <UART_SetConfig+0x1b18>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	2b05      	cmp	r3, #5
 800676e:	d02c      	beq.n	80067ca <UART_SetConfig+0x1b12>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	2b06      	cmp	r3, #6
 8006776:	d025      	beq.n	80067c4 <UART_SetConfig+0x1b0c>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	2b07      	cmp	r3, #7
 800677e:	d01e      	beq.n	80067be <UART_SetConfig+0x1b06>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	2b08      	cmp	r3, #8
 8006786:	d017      	beq.n	80067b8 <UART_SetConfig+0x1b00>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	2b09      	cmp	r3, #9
 800678e:	d010      	beq.n	80067b2 <UART_SetConfig+0x1afa>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	2b0a      	cmp	r3, #10
 8006796:	d009      	beq.n	80067ac <UART_SetConfig+0x1af4>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	2b0b      	cmp	r3, #11
 800679e:	d102      	bne.n	80067a6 <UART_SetConfig+0x1aee>
 80067a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067a4:	e022      	b.n	80067ec <UART_SetConfig+0x1b34>
 80067a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067aa:	e01f      	b.n	80067ec <UART_SetConfig+0x1b34>
 80067ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067b0:	e01c      	b.n	80067ec <UART_SetConfig+0x1b34>
 80067b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067b6:	e019      	b.n	80067ec <UART_SetConfig+0x1b34>
 80067b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067bc:	e016      	b.n	80067ec <UART_SetConfig+0x1b34>
 80067be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067c2:	e013      	b.n	80067ec <UART_SetConfig+0x1b34>
 80067c4:	f241 5354 	movw	r3, #5460	; 0x1554
 80067c8:	e010      	b.n	80067ec <UART_SetConfig+0x1b34>
 80067ca:	f641 1398 	movw	r3, #6552	; 0x1998
 80067ce:	e00d      	b.n	80067ec <UART_SetConfig+0x1b34>
 80067d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067d4:	e00a      	b.n	80067ec <UART_SetConfig+0x1b34>
 80067d6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80067da:	e007      	b.n	80067ec <UART_SetConfig+0x1b34>
 80067dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067e0:	e004      	b.n	80067ec <UART_SetConfig+0x1b34>
 80067e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e6:	e001      	b.n	80067ec <UART_SetConfig+0x1b34>
 80067e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6852      	ldr	r2, [r2, #4]
 80067f0:	0852      	lsrs	r2, r2, #1
 80067f2:	441a      	add	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006800:	e003      	b.n	800680a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8006808:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	2b0f      	cmp	r3, #15
 800680e:	d916      	bls.n	800683e <UART_SetConfig+0x1b86>
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006816:	d212      	bcs.n	800683e <UART_SetConfig+0x1b86>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	b29b      	uxth	r3, r3
 800681c:	f023 030f 	bic.w	r3, r3, #15
 8006820:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	085b      	lsrs	r3, r3, #1
 8006826:	b29b      	uxth	r3, r3
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	b29a      	uxth	r2, r3
 800682e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006830:	4313      	orrs	r3, r2
 8006832:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800683a:	60da      	str	r2, [r3, #12]
 800683c:	e3a1      	b.n	8006f82 <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006844:	e39d      	b.n	8006f82 <UART_SetConfig+0x22ca>
    }
  }
  else
  {
    switch (clocksource)
 8006846:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	f200 8386 	bhi.w	8006f5c <UART_SetConfig+0x22a4>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <UART_SetConfig+0x1ba0>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	0800695d 	.word	0x0800695d
 800685c:	08006a11 	.word	0x08006a11
 8006860:	08006f5d 	.word	0x08006f5d
 8006864:	08006f5d 	.word	0x08006f5d
 8006868:	08006ac5 	.word	0x08006ac5
 800686c:	08006f5d 	.word	0x08006f5d
 8006870:	08006f5d 	.word	0x08006f5d
 8006874:	08006f5d 	.word	0x08006f5d
 8006878:	08006b7f 	.word	0x08006b7f
 800687c:	08006f5d 	.word	0x08006f5d
 8006880:	08006f5d 	.word	0x08006f5d
 8006884:	08006f5d 	.word	0x08006f5d
 8006888:	08006f5d 	.word	0x08006f5d
 800688c:	08006f5d 	.word	0x08006f5d
 8006890:	08006f5d 	.word	0x08006f5d
 8006894:	08006f5d 	.word	0x08006f5d
 8006898:	08006c39 	.word	0x08006c39
 800689c:	08006f5d 	.word	0x08006f5d
 80068a0:	08006f5d 	.word	0x08006f5d
 80068a4:	08006f5d 	.word	0x08006f5d
 80068a8:	08006f5d 	.word	0x08006f5d
 80068ac:	08006f5d 	.word	0x08006f5d
 80068b0:	08006f5d 	.word	0x08006f5d
 80068b4:	08006f5d 	.word	0x08006f5d
 80068b8:	08006f5d 	.word	0x08006f5d
 80068bc:	08006f5d 	.word	0x08006f5d
 80068c0:	08006f5d 	.word	0x08006f5d
 80068c4:	08006f5d 	.word	0x08006f5d
 80068c8:	08006f5d 	.word	0x08006f5d
 80068cc:	08006f5d 	.word	0x08006f5d
 80068d0:	08006f5d 	.word	0x08006f5d
 80068d4:	08006f5d 	.word	0x08006f5d
 80068d8:	08006da9 	.word	0x08006da9
 80068dc:	08006f5d 	.word	0x08006f5d
 80068e0:	08006f5d 	.word	0x08006f5d
 80068e4:	08006f5d 	.word	0x08006f5d
 80068e8:	08006f5d 	.word	0x08006f5d
 80068ec:	08006f5d 	.word	0x08006f5d
 80068f0:	08006f5d 	.word	0x08006f5d
 80068f4:	08006f5d 	.word	0x08006f5d
 80068f8:	08006f5d 	.word	0x08006f5d
 80068fc:	08006f5d 	.word	0x08006f5d
 8006900:	08006f5d 	.word	0x08006f5d
 8006904:	08006f5d 	.word	0x08006f5d
 8006908:	08006f5d 	.word	0x08006f5d
 800690c:	08006f5d 	.word	0x08006f5d
 8006910:	08006f5d 	.word	0x08006f5d
 8006914:	08006f5d 	.word	0x08006f5d
 8006918:	08006f5d 	.word	0x08006f5d
 800691c:	08006f5d 	.word	0x08006f5d
 8006920:	08006f5d 	.word	0x08006f5d
 8006924:	08006f5d 	.word	0x08006f5d
 8006928:	08006f5d 	.word	0x08006f5d
 800692c:	08006f5d 	.word	0x08006f5d
 8006930:	08006f5d 	.word	0x08006f5d
 8006934:	08006f5d 	.word	0x08006f5d
 8006938:	08006f5d 	.word	0x08006f5d
 800693c:	08006f5d 	.word	0x08006f5d
 8006940:	08006f5d 	.word	0x08006f5d
 8006944:	08006f5d 	.word	0x08006f5d
 8006948:	08006f5d 	.word	0x08006f5d
 800694c:	08006f5d 	.word	0x08006f5d
 8006950:	08006f5d 	.word	0x08006f5d
 8006954:	08006f5d 	.word	0x08006f5d
 8006958:	08006e9d 	.word	0x08006e9d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800695c:	f7fb fbea 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8006960:	4602      	mov	r2, r0
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	d044      	beq.n	80069f4 <UART_SetConfig+0x1d3c>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	2b01      	cmp	r3, #1
 8006970:	d03e      	beq.n	80069f0 <UART_SetConfig+0x1d38>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	2b02      	cmp	r3, #2
 8006978:	d038      	beq.n	80069ec <UART_SetConfig+0x1d34>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	2b03      	cmp	r3, #3
 8006980:	d032      	beq.n	80069e8 <UART_SetConfig+0x1d30>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	2b04      	cmp	r3, #4
 8006988:	d02c      	beq.n	80069e4 <UART_SetConfig+0x1d2c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	2b05      	cmp	r3, #5
 8006990:	d026      	beq.n	80069e0 <UART_SetConfig+0x1d28>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	2b06      	cmp	r3, #6
 8006998:	d020      	beq.n	80069dc <UART_SetConfig+0x1d24>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	2b07      	cmp	r3, #7
 80069a0:	d01a      	beq.n	80069d8 <UART_SetConfig+0x1d20>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	d014      	beq.n	80069d4 <UART_SetConfig+0x1d1c>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2b09      	cmp	r3, #9
 80069b0:	d00e      	beq.n	80069d0 <UART_SetConfig+0x1d18>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	2b0a      	cmp	r3, #10
 80069b8:	d008      	beq.n	80069cc <UART_SetConfig+0x1d14>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	2b0b      	cmp	r3, #11
 80069c0:	d102      	bne.n	80069c8 <UART_SetConfig+0x1d10>
 80069c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069c6:	e016      	b.n	80069f6 <UART_SetConfig+0x1d3e>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e014      	b.n	80069f6 <UART_SetConfig+0x1d3e>
 80069cc:	2380      	movs	r3, #128	; 0x80
 80069ce:	e012      	b.n	80069f6 <UART_SetConfig+0x1d3e>
 80069d0:	2340      	movs	r3, #64	; 0x40
 80069d2:	e010      	b.n	80069f6 <UART_SetConfig+0x1d3e>
 80069d4:	2320      	movs	r3, #32
 80069d6:	e00e      	b.n	80069f6 <UART_SetConfig+0x1d3e>
 80069d8:	2310      	movs	r3, #16
 80069da:	e00c      	b.n	80069f6 <UART_SetConfig+0x1d3e>
 80069dc:	230c      	movs	r3, #12
 80069de:	e00a      	b.n	80069f6 <UART_SetConfig+0x1d3e>
 80069e0:	230a      	movs	r3, #10
 80069e2:	e008      	b.n	80069f6 <UART_SetConfig+0x1d3e>
 80069e4:	2308      	movs	r3, #8
 80069e6:	e006      	b.n	80069f6 <UART_SetConfig+0x1d3e>
 80069e8:	2306      	movs	r3, #6
 80069ea:	e004      	b.n	80069f6 <UART_SetConfig+0x1d3e>
 80069ec:	2304      	movs	r3, #4
 80069ee:	e002      	b.n	80069f6 <UART_SetConfig+0x1d3e>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e000      	b.n	80069f6 <UART_SetConfig+0x1d3e>
 80069f4:	2301      	movs	r3, #1
 80069f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	085b      	lsrs	r3, r3, #1
 8006a00:	441a      	add	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a0e:	e2a9      	b.n	8006f64 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a10:	f7fb fba6 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 8006a14:	4602      	mov	r2, r0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d044      	beq.n	8006aa8 <UART_SetConfig+0x1df0>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d03e      	beq.n	8006aa4 <UART_SetConfig+0x1dec>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d038      	beq.n	8006aa0 <UART_SetConfig+0x1de8>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d032      	beq.n	8006a9c <UART_SetConfig+0x1de4>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d02c      	beq.n	8006a98 <UART_SetConfig+0x1de0>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	2b05      	cmp	r3, #5
 8006a44:	d026      	beq.n	8006a94 <UART_SetConfig+0x1ddc>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	2b06      	cmp	r3, #6
 8006a4c:	d020      	beq.n	8006a90 <UART_SetConfig+0x1dd8>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	2b07      	cmp	r3, #7
 8006a54:	d01a      	beq.n	8006a8c <UART_SetConfig+0x1dd4>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d014      	beq.n	8006a88 <UART_SetConfig+0x1dd0>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2b09      	cmp	r3, #9
 8006a64:	d00e      	beq.n	8006a84 <UART_SetConfig+0x1dcc>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	2b0a      	cmp	r3, #10
 8006a6c:	d008      	beq.n	8006a80 <UART_SetConfig+0x1dc8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	2b0b      	cmp	r3, #11
 8006a74:	d102      	bne.n	8006a7c <UART_SetConfig+0x1dc4>
 8006a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a7a:	e016      	b.n	8006aaa <UART_SetConfig+0x1df2>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e014      	b.n	8006aaa <UART_SetConfig+0x1df2>
 8006a80:	2380      	movs	r3, #128	; 0x80
 8006a82:	e012      	b.n	8006aaa <UART_SetConfig+0x1df2>
 8006a84:	2340      	movs	r3, #64	; 0x40
 8006a86:	e010      	b.n	8006aaa <UART_SetConfig+0x1df2>
 8006a88:	2320      	movs	r3, #32
 8006a8a:	e00e      	b.n	8006aaa <UART_SetConfig+0x1df2>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	e00c      	b.n	8006aaa <UART_SetConfig+0x1df2>
 8006a90:	230c      	movs	r3, #12
 8006a92:	e00a      	b.n	8006aaa <UART_SetConfig+0x1df2>
 8006a94:	230a      	movs	r3, #10
 8006a96:	e008      	b.n	8006aaa <UART_SetConfig+0x1df2>
 8006a98:	2308      	movs	r3, #8
 8006a9a:	e006      	b.n	8006aaa <UART_SetConfig+0x1df2>
 8006a9c:	2306      	movs	r3, #6
 8006a9e:	e004      	b.n	8006aaa <UART_SetConfig+0x1df2>
 8006aa0:	2304      	movs	r3, #4
 8006aa2:	e002      	b.n	8006aaa <UART_SetConfig+0x1df2>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e000      	b.n	8006aaa <UART_SetConfig+0x1df2>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	085b      	lsrs	r3, r3, #1
 8006ab4:	441a      	add	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ac2:	e24f      	b.n	8006f64 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ac4:	f107 0314 	add.w	r3, r7, #20
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fc fa65 	bl	8002f98 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d044      	beq.n	8006b62 <UART_SetConfig+0x1eaa>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d03e      	beq.n	8006b5e <UART_SetConfig+0x1ea6>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d038      	beq.n	8006b5a <UART_SetConfig+0x1ea2>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d032      	beq.n	8006b56 <UART_SetConfig+0x1e9e>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d02c      	beq.n	8006b52 <UART_SetConfig+0x1e9a>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	2b05      	cmp	r3, #5
 8006afe:	d026      	beq.n	8006b4e <UART_SetConfig+0x1e96>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	2b06      	cmp	r3, #6
 8006b06:	d020      	beq.n	8006b4a <UART_SetConfig+0x1e92>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	2b07      	cmp	r3, #7
 8006b0e:	d01a      	beq.n	8006b46 <UART_SetConfig+0x1e8e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d014      	beq.n	8006b42 <UART_SetConfig+0x1e8a>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	2b09      	cmp	r3, #9
 8006b1e:	d00e      	beq.n	8006b3e <UART_SetConfig+0x1e86>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	2b0a      	cmp	r3, #10
 8006b26:	d008      	beq.n	8006b3a <UART_SetConfig+0x1e82>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	2b0b      	cmp	r3, #11
 8006b2e:	d102      	bne.n	8006b36 <UART_SetConfig+0x1e7e>
 8006b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b34:	e016      	b.n	8006b64 <UART_SetConfig+0x1eac>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e014      	b.n	8006b64 <UART_SetConfig+0x1eac>
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	e012      	b.n	8006b64 <UART_SetConfig+0x1eac>
 8006b3e:	2340      	movs	r3, #64	; 0x40
 8006b40:	e010      	b.n	8006b64 <UART_SetConfig+0x1eac>
 8006b42:	2320      	movs	r3, #32
 8006b44:	e00e      	b.n	8006b64 <UART_SetConfig+0x1eac>
 8006b46:	2310      	movs	r3, #16
 8006b48:	e00c      	b.n	8006b64 <UART_SetConfig+0x1eac>
 8006b4a:	230c      	movs	r3, #12
 8006b4c:	e00a      	b.n	8006b64 <UART_SetConfig+0x1eac>
 8006b4e:	230a      	movs	r3, #10
 8006b50:	e008      	b.n	8006b64 <UART_SetConfig+0x1eac>
 8006b52:	2308      	movs	r3, #8
 8006b54:	e006      	b.n	8006b64 <UART_SetConfig+0x1eac>
 8006b56:	2306      	movs	r3, #6
 8006b58:	e004      	b.n	8006b64 <UART_SetConfig+0x1eac>
 8006b5a:	2304      	movs	r3, #4
 8006b5c:	e002      	b.n	8006b64 <UART_SetConfig+0x1eac>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e000      	b.n	8006b64 <UART_SetConfig+0x1eac>
 8006b62:	2301      	movs	r3, #1
 8006b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	085b      	lsrs	r3, r3, #1
 8006b6e:	441a      	add	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b7c:	e1f2      	b.n	8006f64 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b7e:	f107 0308 	add.w	r3, r7, #8
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fc fb54 	bl	8003230 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d044      	beq.n	8006c1c <UART_SetConfig+0x1f64>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d03e      	beq.n	8006c18 <UART_SetConfig+0x1f60>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d038      	beq.n	8006c14 <UART_SetConfig+0x1f5c>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d032      	beq.n	8006c10 <UART_SetConfig+0x1f58>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d02c      	beq.n	8006c0c <UART_SetConfig+0x1f54>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b05      	cmp	r3, #5
 8006bb8:	d026      	beq.n	8006c08 <UART_SetConfig+0x1f50>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	2b06      	cmp	r3, #6
 8006bc0:	d020      	beq.n	8006c04 <UART_SetConfig+0x1f4c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	2b07      	cmp	r3, #7
 8006bc8:	d01a      	beq.n	8006c00 <UART_SetConfig+0x1f48>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d014      	beq.n	8006bfc <UART_SetConfig+0x1f44>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	2b09      	cmp	r3, #9
 8006bd8:	d00e      	beq.n	8006bf8 <UART_SetConfig+0x1f40>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	2b0a      	cmp	r3, #10
 8006be0:	d008      	beq.n	8006bf4 <UART_SetConfig+0x1f3c>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	2b0b      	cmp	r3, #11
 8006be8:	d102      	bne.n	8006bf0 <UART_SetConfig+0x1f38>
 8006bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bee:	e016      	b.n	8006c1e <UART_SetConfig+0x1f66>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e014      	b.n	8006c1e <UART_SetConfig+0x1f66>
 8006bf4:	2380      	movs	r3, #128	; 0x80
 8006bf6:	e012      	b.n	8006c1e <UART_SetConfig+0x1f66>
 8006bf8:	2340      	movs	r3, #64	; 0x40
 8006bfa:	e010      	b.n	8006c1e <UART_SetConfig+0x1f66>
 8006bfc:	2320      	movs	r3, #32
 8006bfe:	e00e      	b.n	8006c1e <UART_SetConfig+0x1f66>
 8006c00:	2310      	movs	r3, #16
 8006c02:	e00c      	b.n	8006c1e <UART_SetConfig+0x1f66>
 8006c04:	230c      	movs	r3, #12
 8006c06:	e00a      	b.n	8006c1e <UART_SetConfig+0x1f66>
 8006c08:	230a      	movs	r3, #10
 8006c0a:	e008      	b.n	8006c1e <UART_SetConfig+0x1f66>
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	e006      	b.n	8006c1e <UART_SetConfig+0x1f66>
 8006c10:	2306      	movs	r3, #6
 8006c12:	e004      	b.n	8006c1e <UART_SetConfig+0x1f66>
 8006c14:	2304      	movs	r3, #4
 8006c16:	e002      	b.n	8006c1e <UART_SetConfig+0x1f66>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e000      	b.n	8006c1e <UART_SetConfig+0x1f66>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	085b      	lsrs	r3, r3, #1
 8006c28:	441a      	add	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c36:	e195      	b.n	8006f64 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c38:	4b87      	ldr	r3, [pc, #540]	; (8006e58 <UART_SetConfig+0x21a0>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d05d      	beq.n	8006d00 <UART_SetConfig+0x2048>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c44:	4b84      	ldr	r3, [pc, #528]	; (8006e58 <UART_SetConfig+0x21a0>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	08db      	lsrs	r3, r3, #3
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	4a83      	ldr	r2, [pc, #524]	; (8006e5c <UART_SetConfig+0x21a4>)
 8006c50:	40da      	lsrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d044      	beq.n	8006ce4 <UART_SetConfig+0x202c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d03e      	beq.n	8006ce0 <UART_SetConfig+0x2028>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d038      	beq.n	8006cdc <UART_SetConfig+0x2024>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d032      	beq.n	8006cd8 <UART_SetConfig+0x2020>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d02c      	beq.n	8006cd4 <UART_SetConfig+0x201c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	2b05      	cmp	r3, #5
 8006c80:	d026      	beq.n	8006cd0 <UART_SetConfig+0x2018>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	2b06      	cmp	r3, #6
 8006c88:	d020      	beq.n	8006ccc <UART_SetConfig+0x2014>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b07      	cmp	r3, #7
 8006c90:	d01a      	beq.n	8006cc8 <UART_SetConfig+0x2010>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d014      	beq.n	8006cc4 <UART_SetConfig+0x200c>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b09      	cmp	r3, #9
 8006ca0:	d00e      	beq.n	8006cc0 <UART_SetConfig+0x2008>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	2b0a      	cmp	r3, #10
 8006ca8:	d008      	beq.n	8006cbc <UART_SetConfig+0x2004>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2b0b      	cmp	r3, #11
 8006cb0:	d102      	bne.n	8006cb8 <UART_SetConfig+0x2000>
 8006cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cb6:	e016      	b.n	8006ce6 <UART_SetConfig+0x202e>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e014      	b.n	8006ce6 <UART_SetConfig+0x202e>
 8006cbc:	2380      	movs	r3, #128	; 0x80
 8006cbe:	e012      	b.n	8006ce6 <UART_SetConfig+0x202e>
 8006cc0:	2340      	movs	r3, #64	; 0x40
 8006cc2:	e010      	b.n	8006ce6 <UART_SetConfig+0x202e>
 8006cc4:	2320      	movs	r3, #32
 8006cc6:	e00e      	b.n	8006ce6 <UART_SetConfig+0x202e>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	e00c      	b.n	8006ce6 <UART_SetConfig+0x202e>
 8006ccc:	230c      	movs	r3, #12
 8006cce:	e00a      	b.n	8006ce6 <UART_SetConfig+0x202e>
 8006cd0:	230a      	movs	r3, #10
 8006cd2:	e008      	b.n	8006ce6 <UART_SetConfig+0x202e>
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	e006      	b.n	8006ce6 <UART_SetConfig+0x202e>
 8006cd8:	2306      	movs	r3, #6
 8006cda:	e004      	b.n	8006ce6 <UART_SetConfig+0x202e>
 8006cdc:	2304      	movs	r3, #4
 8006cde:	e002      	b.n	8006ce6 <UART_SetConfig+0x202e>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e000      	b.n	8006ce6 <UART_SetConfig+0x202e>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	085b      	lsrs	r3, r3, #1
 8006cf0:	441a      	add	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8006cfe:	e131      	b.n	8006f64 <UART_SetConfig+0x22ac>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d043      	beq.n	8006d90 <UART_SetConfig+0x20d8>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d03d      	beq.n	8006d8c <UART_SetConfig+0x20d4>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d037      	beq.n	8006d88 <UART_SetConfig+0x20d0>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d031      	beq.n	8006d84 <UART_SetConfig+0x20cc>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d02b      	beq.n	8006d80 <UART_SetConfig+0x20c8>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	2b05      	cmp	r3, #5
 8006d2e:	d025      	beq.n	8006d7c <UART_SetConfig+0x20c4>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	2b06      	cmp	r3, #6
 8006d36:	d01f      	beq.n	8006d78 <UART_SetConfig+0x20c0>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	2b07      	cmp	r3, #7
 8006d3e:	d019      	beq.n	8006d74 <UART_SetConfig+0x20bc>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d013      	beq.n	8006d70 <UART_SetConfig+0x20b8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	2b09      	cmp	r3, #9
 8006d4e:	d00d      	beq.n	8006d6c <UART_SetConfig+0x20b4>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	2b0a      	cmp	r3, #10
 8006d56:	d007      	beq.n	8006d68 <UART_SetConfig+0x20b0>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	2b0b      	cmp	r3, #11
 8006d5e:	d101      	bne.n	8006d64 <UART_SetConfig+0x20ac>
 8006d60:	4b3f      	ldr	r3, [pc, #252]	; (8006e60 <UART_SetConfig+0x21a8>)
 8006d62:	e016      	b.n	8006d92 <UART_SetConfig+0x20da>
 8006d64:	4b3d      	ldr	r3, [pc, #244]	; (8006e5c <UART_SetConfig+0x21a4>)
 8006d66:	e014      	b.n	8006d92 <UART_SetConfig+0x20da>
 8006d68:	4b3e      	ldr	r3, [pc, #248]	; (8006e64 <UART_SetConfig+0x21ac>)
 8006d6a:	e012      	b.n	8006d92 <UART_SetConfig+0x20da>
 8006d6c:	4b3e      	ldr	r3, [pc, #248]	; (8006e68 <UART_SetConfig+0x21b0>)
 8006d6e:	e010      	b.n	8006d92 <UART_SetConfig+0x20da>
 8006d70:	4b3e      	ldr	r3, [pc, #248]	; (8006e6c <UART_SetConfig+0x21b4>)
 8006d72:	e00e      	b.n	8006d92 <UART_SetConfig+0x20da>
 8006d74:	4b3e      	ldr	r3, [pc, #248]	; (8006e70 <UART_SetConfig+0x21b8>)
 8006d76:	e00c      	b.n	8006d92 <UART_SetConfig+0x20da>
 8006d78:	4b3e      	ldr	r3, [pc, #248]	; (8006e74 <UART_SetConfig+0x21bc>)
 8006d7a:	e00a      	b.n	8006d92 <UART_SetConfig+0x20da>
 8006d7c:	4b3e      	ldr	r3, [pc, #248]	; (8006e78 <UART_SetConfig+0x21c0>)
 8006d7e:	e008      	b.n	8006d92 <UART_SetConfig+0x20da>
 8006d80:	4b3e      	ldr	r3, [pc, #248]	; (8006e7c <UART_SetConfig+0x21c4>)
 8006d82:	e006      	b.n	8006d92 <UART_SetConfig+0x20da>
 8006d84:	4b3e      	ldr	r3, [pc, #248]	; (8006e80 <UART_SetConfig+0x21c8>)
 8006d86:	e004      	b.n	8006d92 <UART_SetConfig+0x20da>
 8006d88:	4b3e      	ldr	r3, [pc, #248]	; (8006e84 <UART_SetConfig+0x21cc>)
 8006d8a:	e002      	b.n	8006d92 <UART_SetConfig+0x20da>
 8006d8c:	4b3e      	ldr	r3, [pc, #248]	; (8006e88 <UART_SetConfig+0x21d0>)
 8006d8e:	e000      	b.n	8006d92 <UART_SetConfig+0x20da>
 8006d90:	4b32      	ldr	r3, [pc, #200]	; (8006e5c <UART_SetConfig+0x21a4>)
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6852      	ldr	r2, [r2, #4]
 8006d96:	0852      	lsrs	r2, r2, #1
 8006d98:	441a      	add	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006da6:	e0dd      	b.n	8006f64 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d046      	beq.n	8006e3e <UART_SetConfig+0x2186>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d040      	beq.n	8006e3a <UART_SetConfig+0x2182>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d03a      	beq.n	8006e36 <UART_SetConfig+0x217e>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d034      	beq.n	8006e32 <UART_SetConfig+0x217a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d02e      	beq.n	8006e2e <UART_SetConfig+0x2176>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	2b05      	cmp	r3, #5
 8006dd6:	d028      	beq.n	8006e2a <UART_SetConfig+0x2172>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2b06      	cmp	r3, #6
 8006dde:	d022      	beq.n	8006e26 <UART_SetConfig+0x216e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	2b07      	cmp	r3, #7
 8006de6:	d01c      	beq.n	8006e22 <UART_SetConfig+0x216a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d016      	beq.n	8006e1e <UART_SetConfig+0x2166>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	2b09      	cmp	r3, #9
 8006df6:	d00f      	beq.n	8006e18 <UART_SetConfig+0x2160>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	2b0a      	cmp	r3, #10
 8006dfe:	d008      	beq.n	8006e12 <UART_SetConfig+0x215a>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	2b0b      	cmp	r3, #11
 8006e06:	d102      	bne.n	8006e0e <UART_SetConfig+0x2156>
 8006e08:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006e0c:	e018      	b.n	8006e40 <UART_SetConfig+0x2188>
 8006e0e:	4b18      	ldr	r3, [pc, #96]	; (8006e70 <UART_SetConfig+0x21b8>)
 8006e10:	e016      	b.n	8006e40 <UART_SetConfig+0x2188>
 8006e12:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006e16:	e013      	b.n	8006e40 <UART_SetConfig+0x2188>
 8006e18:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006e1c:	e010      	b.n	8006e40 <UART_SetConfig+0x2188>
 8006e1e:	4b1b      	ldr	r3, [pc, #108]	; (8006e8c <UART_SetConfig+0x21d4>)
 8006e20:	e00e      	b.n	8006e40 <UART_SetConfig+0x2188>
 8006e22:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <UART_SetConfig+0x21a8>)
 8006e24:	e00c      	b.n	8006e40 <UART_SetConfig+0x2188>
 8006e26:	4b1a      	ldr	r3, [pc, #104]	; (8006e90 <UART_SetConfig+0x21d8>)
 8006e28:	e00a      	b.n	8006e40 <UART_SetConfig+0x2188>
 8006e2a:	4b1a      	ldr	r3, [pc, #104]	; (8006e94 <UART_SetConfig+0x21dc>)
 8006e2c:	e008      	b.n	8006e40 <UART_SetConfig+0x2188>
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <UART_SetConfig+0x21ac>)
 8006e30:	e006      	b.n	8006e40 <UART_SetConfig+0x2188>
 8006e32:	4b19      	ldr	r3, [pc, #100]	; (8006e98 <UART_SetConfig+0x21e0>)
 8006e34:	e004      	b.n	8006e40 <UART_SetConfig+0x2188>
 8006e36:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <UART_SetConfig+0x21b0>)
 8006e38:	e002      	b.n	8006e40 <UART_SetConfig+0x2188>
 8006e3a:	4b0c      	ldr	r3, [pc, #48]	; (8006e6c <UART_SetConfig+0x21b4>)
 8006e3c:	e000      	b.n	8006e40 <UART_SetConfig+0x2188>
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	; (8006e70 <UART_SetConfig+0x21b8>)
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6852      	ldr	r2, [r2, #4]
 8006e44:	0852      	lsrs	r2, r2, #1
 8006e46:	441a      	add	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e54:	e086      	b.n	8006f64 <UART_SetConfig+0x22ac>
 8006e56:	bf00      	nop
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	03d09000 	.word	0x03d09000
 8006e60:	0003d090 	.word	0x0003d090
 8006e64:	0007a120 	.word	0x0007a120
 8006e68:	000f4240 	.word	0x000f4240
 8006e6c:	001e8480 	.word	0x001e8480
 8006e70:	003d0900 	.word	0x003d0900
 8006e74:	00516155 	.word	0x00516155
 8006e78:	0061a800 	.word	0x0061a800
 8006e7c:	007a1200 	.word	0x007a1200
 8006e80:	00a2c2aa 	.word	0x00a2c2aa
 8006e84:	00f42400 	.word	0x00f42400
 8006e88:	01e84800 	.word	0x01e84800
 8006e8c:	0001e848 	.word	0x0001e848
 8006e90:	00051615 	.word	0x00051615
 8006e94:	00061a80 	.word	0x00061a80
 8006e98:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d04e      	beq.n	8006f42 <UART_SetConfig+0x228a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d047      	beq.n	8006f3c <UART_SetConfig+0x2284>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d040      	beq.n	8006f36 <UART_SetConfig+0x227e>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d039      	beq.n	8006f30 <UART_SetConfig+0x2278>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d032      	beq.n	8006f2a <UART_SetConfig+0x2272>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	2b05      	cmp	r3, #5
 8006eca:	d02b      	beq.n	8006f24 <UART_SetConfig+0x226c>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	2b06      	cmp	r3, #6
 8006ed2:	d024      	beq.n	8006f1e <UART_SetConfig+0x2266>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	2b07      	cmp	r3, #7
 8006eda:	d01d      	beq.n	8006f18 <UART_SetConfig+0x2260>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d016      	beq.n	8006f12 <UART_SetConfig+0x225a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	2b09      	cmp	r3, #9
 8006eea:	d00f      	beq.n	8006f0c <UART_SetConfig+0x2254>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	2b0a      	cmp	r3, #10
 8006ef2:	d008      	beq.n	8006f06 <UART_SetConfig+0x224e>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	2b0b      	cmp	r3, #11
 8006efa:	d101      	bne.n	8006f00 <UART_SetConfig+0x2248>
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	e022      	b.n	8006f46 <UART_SetConfig+0x228e>
 8006f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f04:	e01f      	b.n	8006f46 <UART_SetConfig+0x228e>
 8006f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f0a:	e01c      	b.n	8006f46 <UART_SetConfig+0x228e>
 8006f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f10:	e019      	b.n	8006f46 <UART_SetConfig+0x228e>
 8006f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f16:	e016      	b.n	8006f46 <UART_SetConfig+0x228e>
 8006f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f1c:	e013      	b.n	8006f46 <UART_SetConfig+0x228e>
 8006f1e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006f22:	e010      	b.n	8006f46 <UART_SetConfig+0x228e>
 8006f24:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006f28:	e00d      	b.n	8006f46 <UART_SetConfig+0x228e>
 8006f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f2e:	e00a      	b.n	8006f46 <UART_SetConfig+0x228e>
 8006f30:	f241 5355 	movw	r3, #5461	; 0x1555
 8006f34:	e007      	b.n	8006f46 <UART_SetConfig+0x228e>
 8006f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f3a:	e004      	b.n	8006f46 <UART_SetConfig+0x228e>
 8006f3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f40:	e001      	b.n	8006f46 <UART_SetConfig+0x228e>
 8006f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6852      	ldr	r2, [r2, #4]
 8006f4a:	0852      	lsrs	r2, r2, #1
 8006f4c:	441a      	add	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f5a:	e003      	b.n	8006f64 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8006f62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	2b0f      	cmp	r3, #15
 8006f68:	d908      	bls.n	8006f7c <UART_SetConfig+0x22c4>
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f70:	d204      	bcs.n	8006f7c <UART_SetConfig+0x22c4>
    {
      huart->Instance->BRR = usartdiv;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f78:	60da      	str	r2, [r3, #12]
 8006f7a:	e002      	b.n	8006f82 <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006f9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3738      	adds	r7, #56	; 0x38
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00a      	beq.n	8006fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	f003 0308 	and.w	r3, r3, #8
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	f003 0310 	and.w	r3, r3, #16
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01a      	beq.n	80070c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070aa:	d10a      	bne.n	80070c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007100:	f7f9 faf4 	bl	80006ec <HAL_GetTick>
 8007104:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0308 	and.w	r3, r3, #8
 8007110:	2b08      	cmp	r3, #8
 8007112:	d10e      	bne.n	8007132 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f82c 	bl	8007180 <UART_WaitOnFlagUntilTimeout>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e022      	b.n	8007178 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b04      	cmp	r3, #4
 800713e:	d10e      	bne.n	800715e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f816 	bl	8007180 <UART_WaitOnFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e00c      	b.n	8007178 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2220      	movs	r2, #32
 8007162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	4613      	mov	r3, r2
 800718e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007190:	e02c      	b.n	80071ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007198:	d028      	beq.n	80071ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800719a:	f7f9 faa7 	bl	80006ec <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d302      	bcc.n	80071b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d11d      	bne.n	80071ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071be:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0201 	bic.w	r2, r2, #1
 80071ce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e00f      	b.n	800720c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69da      	ldr	r2, [r3, #28]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4013      	ands	r3, r2
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	bf0c      	ite	eq
 80071fc:	2301      	moveq	r3, #1
 80071fe:	2300      	movne	r3, #0
 8007200:	b2db      	uxtb	r3, r3
 8007202:	461a      	mov	r2, r3
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	429a      	cmp	r2, r3
 8007208:	d0c3      	beq.n	8007192 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_UARTEx_DisableFifoMode+0x16>
 8007226:	2302      	movs	r3, #2
 8007228:	e027      	b.n	800727a <HAL_UARTEx_DisableFifoMode+0x66>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2224      	movs	r2, #36	; 0x24
 8007236:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007258:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800729a:	2302      	movs	r3, #2
 800729c:	e02d      	b.n	80072fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2224      	movs	r2, #36	; 0x24
 80072aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0201 	bic.w	r2, r2, #1
 80072c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f850 	bl	8007380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007312:	2b01      	cmp	r3, #1
 8007314:	d101      	bne.n	800731a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007316:	2302      	movs	r3, #2
 8007318:	e02d      	b.n	8007376 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2224      	movs	r2, #36	; 0x24
 8007326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0201 	bic.w	r2, r2, #1
 8007340:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f812 	bl	8007380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2220      	movs	r2, #32
 8007368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007380:	b480      	push	{r7}
 8007382:	b089      	sub	sp, #36	; 0x24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007388:	4a2f      	ldr	r2, [pc, #188]	; (8007448 <UARTEx_SetNbDataToProcess+0xc8>)
 800738a:	f107 0314 	add.w	r3, r7, #20
 800738e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007392:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007396:	4a2d      	ldr	r2, [pc, #180]	; (800744c <UARTEx_SetNbDataToProcess+0xcc>)
 8007398:	f107 030c 	add.w	r3, r7, #12
 800739c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073a0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d108      	bne.n	80073be <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073bc:	e03d      	b.n	800743a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073be:	2308      	movs	r3, #8
 80073c0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073c2:	2308      	movs	r3, #8
 80073c4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	0e5b      	lsrs	r3, r3, #25
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	0f5b      	lsrs	r3, r3, #29
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80073e6:	7fbb      	ldrb	r3, [r7, #30]
 80073e8:	7f3a      	ldrb	r2, [r7, #28]
 80073ea:	f107 0120 	add.w	r1, r7, #32
 80073ee:	440a      	add	r2, r1
 80073f0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80073f4:	fb02 f303 	mul.w	r3, r2, r3
 80073f8:	7f3a      	ldrb	r2, [r7, #28]
 80073fa:	f107 0120 	add.w	r1, r7, #32
 80073fe:	440a      	add	r2, r1
 8007400:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007404:	fb93 f3f2 	sdiv	r3, r3, r2
 8007408:	b29a      	uxth	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007410:	7ffb      	ldrb	r3, [r7, #31]
 8007412:	7f7a      	ldrb	r2, [r7, #29]
 8007414:	f107 0120 	add.w	r1, r7, #32
 8007418:	440a      	add	r2, r1
 800741a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800741e:	fb02 f303 	mul.w	r3, r2, r3
 8007422:	7f7a      	ldrb	r2, [r7, #29]
 8007424:	f107 0120 	add.w	r1, r7, #32
 8007428:	440a      	add	r2, r1
 800742a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800742e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007432:	b29a      	uxth	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800743a:	bf00      	nop
 800743c:	3724      	adds	r7, #36	; 0x24
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	0800b830 	.word	0x0800b830
 800744c:	0800b838 	.word	0x0800b838

08007450 <_ZN3PIDC1Ev>:
 * OutPut()でFloatを取り出せば速度型のPID制御が簡単にできるはず。
 */

#include "PID.hpp"

PID::PID(){
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	4a04      	ldr	r2, [pc, #16]	; (800746c <_ZN3PIDC1Ev+0x1c>)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]

}
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	0800b874 	.word	0x0800b874

08007470 <_ZN3PIDD1Ev>:
	// TODO Auto-generated constructor stub

	mError.fill(0);
}

PID::~PID() {
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	4a04      	ldr	r2, [pc, #16]	; (800748c <_ZN3PIDD1Ev+0x1c>)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	0800b874 	.word	0x0800b874

08007490 <_ZN3PIDD0Ev>:
PID::~PID() {
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
}
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff ffe9 	bl	8007470 <_ZN3PIDD1Ev>
 800749e:	2128      	movs	r1, #40	; 0x28
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f002 fc8e 	bl	8009dc2 <_ZdlPvj>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <_ZN3PID8SetParamEfff>:

void PID::SetParam(float pGain_p, float pGain_i, float pGain_d){
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80074bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80074c0:	ed87 1a00 	vstr	s2, [r7]
	mGain_p = pGain_p;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	615a      	str	r2, [r3, #20]
	mGain_i = pGain_i;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	619a      	str	r2, [r3, #24]
	mGain_d = pGain_d;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	61da      	str	r2, [r3, #28]
}
 80074d6:	bf00      	nop
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
	...

080074e4 <_ZN7ArgCtrlC1Ev>:
 *      Author: watashi
 */

#include "ArgCtrl.hpp"

ArgCtrl::ArgCtrl() {
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	4a0c      	ldr	r2, [pc, #48]	; (8007520 <_ZN7ArgCtrlC1Ev+0x3c>)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mArg = 0;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f04f 0200 	mov.w	r2, #0
 80074f8:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	611a      	str	r2, [r3, #16]
}
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	0800b884 	.word	0x0800b884

08007524 <_ZN7ArgCtrlD1Ev>:

ArgCtrl::~ArgCtrl() {
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	4a0c      	ldr	r2, [pc, #48]	; (8007560 <_ZN7ArgCtrlD1Ev+0x3c>)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	mArg = 0;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f04f 0200 	mov.w	r2, #0
 8007538:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f04f 0200 	mov.w	r2, #0
 8007540:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	611a      	str	r2, [r3, #16]
}
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	0800b884 	.word	0x0800b884

08007564 <_ZN7ArgCtrlD0Ev>:
ArgCtrl::~ArgCtrl() {
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
}
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ffd9 	bl	8007524 <_ZN7ArgCtrlD1Ev>
 8007572:	211c      	movs	r1, #28
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f002 fc24 	bl	8009dc2 <_ZdlPvj>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <_ZN7ArgCtrl4InitEv>:

void ArgCtrl::Init(void) {
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
	mArg = 0;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f04f 0200 	mov.w	r2, #0
 800759a:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f04f 0200 	mov.w	r2, #0
 80075aa:	611a      	str	r2, [r3, #16]
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <_ZN9DebugCtrlC1Ev>:
 *      Author: watashi
 */

#include "DebugCtrl.hpp"

DebugCtrl::DebugCtrl() {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	4a0b      	ldr	r2, [pc, #44]	; (80075f0 <_ZN9DebugCtrlC1Ev+0x38>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3304      	adds	r3, #4
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f918 	bl	8007800 <_ZN9DebugInfoC1Ev>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3314      	adds	r3, #20
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 f991 	bl	80078fc <_ZN13DebugInfoTinyC1Ev>
	// TODO Auto-generated constructor stub
	mDebugStatus = 0;
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	f642 5320 	movw	r3, #11552	; 0x2d20
 80075e0:	4413      	add	r3, r2
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
}
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	0800b894 	.word	0x0800b894

080075f4 <_ZN9DebugCtrlD1Ev>:

DebugCtrl::~DebugCtrl() {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	4a08      	ldr	r2, [pc, #32]	; (8007620 <_ZN9DebugCtrlD1Ev+0x2c>)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3314      	adds	r3, #20
 8007606:	4618      	mov	r0, r3
 8007608:	f000 f98c 	bl	8007924 <_ZN13DebugInfoTinyD1Ev>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3304      	adds	r3, #4
 8007610:	4618      	mov	r0, r3
 8007612:	f000 f909 	bl	8007828 <_ZN9DebugInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	0800b894 	.word	0x0800b894

08007624 <_ZN9DebugCtrlD0Ev>:
DebugCtrl::~DebugCtrl() {
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
}
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff ffe1 	bl	80075f4 <_ZN9DebugCtrlD1Ev>
 8007632:	f642 5124 	movw	r1, #11556	; 0x2d24
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f002 fbc3 	bl	8009dc2 <_ZdlPvj>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8007646:	b5b0      	push	{r4, r5, r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681c      	ldr	r4, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4618      	mov	r0, r3
 800765a:	f000 f835 	bl	80076c8 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 800765e:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007660:	461a      	mov	r2, r3
 8007662:	4629      	mov	r1, r5
 8007664:	4620      	mov	r0, r4
 8007666:	f000 f83a 	bl	80076de <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4618      	mov	r0, r3
 800766e:	f000 f811 	bl	8007694 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bdb0      	pop	{r4, r5, r7, pc}

0800767c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f838 	bl	80076fa <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80076a4:	461a      	mov	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	119b      	asrs	r3, r3, #6
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80076ae:	461a      	mov	r2, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f82e 	bl	8007712 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff ffdf 	bl	800767c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80076ea:	68b9      	ldr	r1, [r7, #8]
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f823 	bl	8007738 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>
    }
 80076f2:	bf00      	nop
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f825 	bl	8007752 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	60b9      	str	r1, [r7, #8]
 800771c:	607a      	str	r2, [r7, #4]
	if (__p)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d005      	beq.n	8007730 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	68b9      	ldr	r1, [r7, #8]
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f81c 	bl	8007768 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>
      }
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f829 	bl	800779c <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>
    }
 800774a:	bf00      	nop
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f827 	bl	80077cc <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d00a      	beq.n	80077c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7ff ffe9 	bl	8007786 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 80077b4:	4603      	mov	r3, r0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 f815 	bl	80077e6 <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>
	  for (; __first != __last; ++__first)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3340      	adds	r3, #64	; 0x40
 80077c0:	607b      	str	r3, [r7, #4]
 80077c2:	e7f0      	b.n	80077a6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0xa>
	}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80077d8:	68b8      	ldr	r0, [r7, #8]
 80077da:	f002 faf4 	bl	8009dc6 <_ZdlPv>
      }
 80077de:	bf00      	nop
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>:
    _Destroy(_Tp* __pointer)
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	4798      	blx	r3
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <_ZN9DebugInfoC1Ev>:

DebugInfo::SendMotorData::~SendMotorData(){
	//destructor
}

DebugInfo::DebugInfo() {
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	4a06      	ldr	r2, [pc, #24]	; (8007824 <_ZN9DebugInfoC1Ev+0x24>)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f82c 	bl	8007870 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
	// TODO Auto-generated constructor stub
}
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	0800b8a4 	.word	0x0800b8a4

08007828 <_ZN9DebugInfoD1Ev>:

DebugInfo::~DebugInfo() {
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	4a06      	ldr	r2, [pc, #24]	; (800784c <_ZN9DebugInfoD1Ev+0x24>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3304      	adds	r3, #4
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff ff03 	bl	8007646 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
	// TODO Auto-generated destructor stub
}
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	0800b8a4 	.word	0x0800b8a4

08007850 <_ZN9DebugInfoD0Ev>:
DebugInfo::~DebugInfo() {
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
}
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff ffe5 	bl	8007828 <_ZN9DebugInfoD1Ev>
 800785e:	2110      	movs	r1, #16
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f002 faae 	bl	8009dc2 <_ZdlPvj>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      vector()
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f805 	bl	800788a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      _Vector_base()
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4618      	mov	r0, r3
 8007896:	f000 f805 	bl	80078a4 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f80e 	bl	80078ce <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	605a      	str	r2, [r3, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	609a      	str	r2, [r3, #8]
	{ }
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>:
      allocator() throw() { }
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f805 	bl	80078e6 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4618      	mov	r0, r3
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <_ZN13DebugInfoTinyC1Ev>:
 * 読み出しがVector型であるのは(float型でないのは)データの個数の変化に対応するため。
 *(配列のfor使って調理してください(にっこり))
 */
#include "DebugInfoTiny.hpp"

DebugInfoTiny::DebugInfoTiny() {
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	4a06      	ldr	r2, [pc, #24]	; (8007920 <_ZN13DebugInfoTinyC1Ev+0x24>)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mCNT = 0;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	605a      	str	r2, [r3, #4]
}
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	0800b8b4 	.word	0x0800b8b4

08007924 <_ZN13DebugInfoTinyD1Ev>:

DebugInfoTiny::~DebugInfoTiny() {
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	4a04      	ldr	r2, [pc, #16]	; (8007940 <_ZN13DebugInfoTinyD1Ev+0x1c>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	0800b8b4 	.word	0x0800b8b4

08007944 <_ZN13DebugInfoTinyD0Ev>:
DebugInfoTiny::~DebugInfoTiny() {
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
}
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff ffe9 	bl	8007924 <_ZN13DebugInfoTinyD1Ev>
 8007952:	f642 5108 	movw	r1, #11528	; 0x2d08
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f002 fa33 	bl	8009dc2 <_ZdlPvj>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <_ZN3PWMC1Ev>:

#include "STM32SystemPack.h"
#include "paramsetting.h"


class PWM {
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	609a      	str	r2, [r3, #8]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4618      	mov	r0, r3
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
	...

08007984 <_ZN9MotorCtrlC1Ev>:
#include "MotorCtrl.hpp"

extern TIM_HandleTypeDef htim1;
extern ADC_HandleTypeDef hadc3;

MotorCtrl::MotorCtrl() {
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	4a25      	ldr	r2, [pc, #148]	; (8007a24 <_ZN9MotorCtrlC1Ev+0xa0>)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	605a      	str	r2, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3358      	adds	r3, #88	; 0x58
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fbbb 	bl	8008118 <_ZN8ObserverC1Ev>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7ff ffdc 	bl	8007966 <_ZN3PWMC1Ev>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff ffd6 	bl	8007966 <_ZN3PWMC1Ev>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff ffd0 	bl	8007966 <_ZN3PWMC1Ev>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff ffca 	bl	8007966 <_ZN3PWMC1Ev>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff fd39 	bl	8007450 <_ZN3PIDC1Ev>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff fd33 	bl	8007450 <_ZN3PIDC1Ev>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff fd2d 	bl	8007450 <_ZN3PIDC1Ev>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff fd27 	bl	8007450 <_ZN3PIDC1Ev>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff fd6b 	bl	80074e4 <_ZN7ArgCtrlC1Ev>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff fdcf 	bl	80075b8 <_ZN9DebugCtrlC1Ev>
	// TODO Auto-generated constructor stub

}
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	0800b8c4 	.word	0x0800b8c4

08007a28 <_ZN9MotorCtrlD1Ev>:

MotorCtrl::~MotorCtrl() {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	4a18      	ldr	r2, [pc, #96]	; (8007a94 <_ZN9MotorCtrlD1Ev+0x6c>)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff fdd9 	bl	80075f4 <_ZN9DebugCtrlD1Ev>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff fd6b 	bl	8007524 <_ZN7ArgCtrlD1Ev>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff fd0b 	bl	8007470 <_ZN3PIDD1Ev>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7ff fd05 	bl	8007470 <_ZN3PIDD1Ev>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff fcff 	bl	8007470 <_ZN3PIDD1Ev>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff fcf9 	bl	8007470 <_ZN3PIDD1Ev>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3358      	adds	r3, #88	; 0x58
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fb60 	bl	8008148 <_ZN8ObserverD1Ev>
	// TODO Auto-generated destructor stub
}
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	0800b8c4 	.word	0x0800b8c4

08007a98 <_ZN9MotorCtrlD0Ev>:
MotorCtrl::~MotorCtrl() {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
}
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff ffc1 	bl	8007a28 <_ZN9MotorCtrlD1Ev>
 8007aa6:	f642 7164 	movw	r1, #12132	; 0x2f64
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f002 f989 	bl	8009dc2 <_ZdlPvj>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <_ZN9MotorCtrl10InitSystemEv>:

void MotorCtrl::InitSystem(void) {
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
	//mainで既に定義されているとうまく動かないから、Mainで定義する前に呼び出すこと。
//	GPIOInit::Init();
//	USARTInit::Init();
//	ADCInit::Init();
//	TIMInit::Init();//あとでつくる
}
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
	...

08007ad0 <_ZN9MotorCtrl7InitPWMEv>:

void MotorCtrl::InitPWM(void) {
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08e      	sub	sp, #56	; 0x38
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]

	PWM PWM_Object1; //PWMのHWを叩くClass
 8007ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff ff42 	bl	8007966 <_ZN3PWMC1Ev>
	PWM PWM_Object2;
 8007ae2:	f107 0320 	add.w	r3, r7, #32
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff ff3d 	bl	8007966 <_ZN3PWMC1Ev>
	PWM PWM_Object3;
 8007aec:	f107 0314 	add.w	r3, r7, #20
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff ff38 	bl	8007966 <_ZN3PWMC1Ev>
	PWM PWM_Object4;
 8007af6:	f107 0308 	add.w	r3, r7, #8
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff ff33 	bl	8007966 <_ZN3PWMC1Ev>
//	 TIM_HandleTypeDef *htim1;
//	 PWM PWM_Object;
//	 PWM_Object.setTIM(htim1);
//	 PWM_Object.setCH(ch1);

	PWM_Object1.setTIM(&htim1);
 8007b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b04:	4948      	ldr	r1, [pc, #288]	; (8007c28 <_ZN9MotorCtrl7InitPWMEv+0x158>)
 8007b06:	4618      	mov	r0, r3
 8007b08:	f002 f8af 	bl	8009c6a <_ZN3PWM6setTIMEP17TIM_HandleTypeDef>
	PWM_Object2.setTIM(&htim1);
 8007b0c:	f107 0320 	add.w	r3, r7, #32
 8007b10:	4945      	ldr	r1, [pc, #276]	; (8007c28 <_ZN9MotorCtrl7InitPWMEv+0x158>)
 8007b12:	4618      	mov	r0, r3
 8007b14:	f002 f8a9 	bl	8009c6a <_ZN3PWM6setTIMEP17TIM_HandleTypeDef>
	PWM_Object3.setTIM(&htim1);
 8007b18:	f107 0314 	add.w	r3, r7, #20
 8007b1c:	4942      	ldr	r1, [pc, #264]	; (8007c28 <_ZN9MotorCtrl7InitPWMEv+0x158>)
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f002 f8a3 	bl	8009c6a <_ZN3PWM6setTIMEP17TIM_HandleTypeDef>
	PWM_Object4.setTIM(&htim1);
 8007b24:	f107 0308 	add.w	r3, r7, #8
 8007b28:	493f      	ldr	r1, [pc, #252]	; (8007c28 <_ZN9MotorCtrl7InitPWMEv+0x158>)
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f002 f89d 	bl	8009c6a <_ZN3PWM6setTIMEP17TIM_HandleTypeDef>

	PWM_Object1.setCH(PWM::PWMch::ch1);
 8007b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b34:	2100      	movs	r1, #0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f002 f8a5 	bl	8009c86 <_ZN3PWM5setCHENS_5PWMchE>
	PWM_Object2.setCH(PWM::PWMch::ch2);
 8007b3c:	f107 0320 	add.w	r3, r7, #32
 8007b40:	2104      	movs	r1, #4
 8007b42:	4618      	mov	r0, r3
 8007b44:	f002 f89f 	bl	8009c86 <_ZN3PWM5setCHENS_5PWMchE>
	PWM_Object3.setCH(PWM::PWMch::ch3);
 8007b48:	f107 0314 	add.w	r3, r7, #20
 8007b4c:	2108      	movs	r1, #8
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f002 f899 	bl	8009c86 <_ZN3PWM5setCHENS_5PWMchE>
	PWM_Object4.setCH(PWM::PWMch::ch4);
 8007b54:	f107 0308 	add.w	r3, r7, #8
 8007b58:	210c      	movs	r1, #12
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f002 f893 	bl	8009c86 <_ZN3PWM5setCHENS_5PWMchE>

	PWM_Object1.fInit(PWM_PERIOD_COUNT);
 8007b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b64:	f242 7110 	movw	r1, #10000	; 0x2710
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f002 f8b4 	bl	8009cd6 <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(PWM_PERIOD_COUNT);
 8007b6e:	f107 0320 	add.w	r3, r7, #32
 8007b72:	f242 7110 	movw	r1, #10000	; 0x2710
 8007b76:	4618      	mov	r0, r3
 8007b78:	f002 f8ad 	bl	8009cd6 <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(PWM_PERIOD_COUNT);
 8007b7c:	f107 0314 	add.w	r3, r7, #20
 8007b80:	f242 7110 	movw	r1, #10000	; 0x2710
 8007b84:	4618      	mov	r0, r3
 8007b86:	f002 f8a6 	bl	8009cd6 <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(PWM_PERIOD_COUNT);
 8007b8a:	f107 0308 	add.w	r3, r7, #8
 8007b8e:	f242 7110 	movw	r1, #10000	; 0x2710
 8007b92:	4618      	mov	r0, r3
 8007b94:	f002 f89f 	bl	8009cd6 <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 8007b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b9c:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8007c2c <_ZN9MotorCtrl7InitPWMEv+0x15c>
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f002 f8e9 	bl	8009d78 <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 8007ba6:	f107 0320 	add.w	r3, r7, #32
 8007baa:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8007c2c <_ZN9MotorCtrl7InitPWMEv+0x15c>
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f002 f8e2 	bl	8009d78 <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 8007bb4:	f107 0314 	add.w	r3, r7, #20
 8007bb8:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8007c2c <_ZN9MotorCtrl7InitPWMEv+0x15c>
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f002 f8db 	bl	8009d78 <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 8007bc2:	f107 0308 	add.w	r3, r7, #8
 8007bc6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8007c2c <_ZN9MotorCtrl7InitPWMEv+0x15c>
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f002 f8d4 	bl	8009d78 <_ZN3PWM6f2DutyEf>

	mPWMch1 = PWM_Object1;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bd6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007bda:	ca07      	ldmia	r2, {r0, r1, r2}
 8007bdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mPWMch2 = PWM_Object2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8007be6:	f107 0220 	add.w	r2, r7, #32
 8007bea:	ca07      	ldmia	r2, {r0, r1, r2}
 8007bec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mPWMch3 = PWM_Object3;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007bf6:	f107 0214 	add.w	r2, r7, #20
 8007bfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8007bfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mPWMch4 = PWM_Object4;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8007c06:	f107 0208 	add.w	r2, r7, #8
 8007c0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    PWM_Object4.f2Duty(0.9);
 8007c10:	f107 0308 	add.w	r3, r7, #8
 8007c14:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8007c30 <_ZN9MotorCtrl7InitPWMEv+0x160>
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f002 f8ad 	bl	8009d78 <_ZN3PWM6f2DutyEf>
    //HAL_ADC_Start_IT(&hadc3);
    //HAL_ADC_Start(&hadc3);
    //HAL_ADCEx_InjectedStart(&hadc3);
    //HAL_ADCEx_InjectedStart_IT(&hadc3);

}
 8007c1e:	bf00      	nop
 8007c20:	3738      	adds	r7, #56	; 0x38
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	240036a0 	.word	0x240036a0
 8007c2c:	00000000 	.word	0x00000000
 8007c30:	3f666666 	.word	0x3f666666

08007c34 <_ZN7ArgCtrlaSERKS_>:

#include "MotorLibDefPack.hpp"
#include "math.h"
#include "Observer.hpp"

class ArgCtrl {
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	605a      	str	r2, [r3, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	609a      	str	r2, [r3, #8]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	691a      	ldr	r2, [r3, #16]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	611a      	str	r2, [r3, #16]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	3314      	adds	r3, #20
 8007c64:	3214      	adds	r2, #20
 8007c66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c6a:	e883 0003 	stmia.w	r3, {r0, r1}
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <_ZN3PIDaSERKS_>:
#ifndef PID_HPP_
#define PID_HPP_

#include <array>

class PID {
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	683a      	ldr	r2, [r7, #0]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	3204      	adds	r2, #4
 8007c8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	691a      	ldr	r2, [r3, #16]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	611a      	str	r2, [r3, #16]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	695a      	ldr	r2, [r3, #20]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	615a      	str	r2, [r3, #20]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	699a      	ldr	r2, [r3, #24]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	619a      	str	r2, [r3, #24]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	69da      	ldr	r2, [r3, #28]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	61da      	str	r2, [r3, #28]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	6a1a      	ldr	r2, [r3, #32]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	621a      	str	r2, [r3, #32]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	625a      	str	r2, [r3, #36]	; 0x24
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <_ZN9MotorCtrl13InitMotorInfoEv>:

void MotorCtrl::InitMotorInfo(void) {
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b09e      	sub	sp, #120	; 0x78
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]

	{
		ArgCtrl ArgCtrl; //角度を求める機能を持ったclass
 8007cdc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff fbff 	bl	80074e4 <_ZN7ArgCtrlC1Ev>
		ArgCtrl.Init();
 8007ce6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff fc4a 	bl	8007584 <_ZN7ArgCtrl4InitEv>
		mArgCtrl = ArgCtrl;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8007cf6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff ff99 	bl	8007c34 <_ZN7ArgCtrlaSERKS_>
		ArgCtrl ArgCtrl; //角度を求める機能を持ったclass
 8007d02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff fc0c 	bl	8007524 <_ZN7ArgCtrlD1Ev>
//		TimInfo Tim_Info;//タイマの経過時間測定Class
//		Tim_Info.Init(TIM1);
//		mMotorInfo.setTimInfo(Tim_Info);
//	}
	{//PIDLibの生存時間調整(代入後メモリを解放する)
		PID IdPID;
 8007d0c:	f107 030c 	add.w	r3, r7, #12
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7ff fb9d 	bl	8007450 <_ZN3PIDC1Ev>
		PID IqPID;
 8007d16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff fb98 	bl	8007450 <_ZN3PIDC1Ev>
		IdPID.SetParam(PID_GAIN_ID_P, PID_GAIN_ID_I, PID_GAIN_ID_D);
 8007d20:	f107 030c 	add.w	r3, r7, #12
 8007d24:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8007d8c <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 8007d28:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007d8c <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 8007d2c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007d8c <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff fbbd 	bl	80074b0 <_ZN3PID8SetParamEfff>
		IqPID.SetParam(PID_GAIN_IQ_P, PID_GAIN_IQ_I, PID_GAIN_IQ_D);
 8007d36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d3a:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8007d8c <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 8007d3e:	eddf 0a13 	vldr	s1, [pc, #76]	; 8007d8c <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 8007d42:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8007d8c <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff fbb2 	bl	80074b0 <_ZN3PID8SetParamEfff>
		mIdPID = IdPID;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007d52:	f107 020c 	add.w	r2, r7, #12
 8007d56:	4611      	mov	r1, r2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff ff8f 	bl	8007c7c <_ZN3PIDaSERKS_>
		mIqPID = IqPID;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007d64:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff ff86 	bl	8007c7c <_ZN3PIDaSERKS_>
		PID IqPID;
 8007d70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff fb7b 	bl	8007470 <_ZN3PIDD1Ev>
		PID IdPID;
 8007d7a:	f107 030c 	add.w	r3, r7, #12
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7ff fb76 	bl	8007470 <_ZN3PIDD1Ev>
		//mMotorInfo.setIdqPIDLib(IdPID, IqPID);
		//mMotorInfo.setIganmadeltaPIDLib(IganmaPID, IdeltaPID);
	}
}
 8007d84:	bf00      	nop
 8007d86:	3778      	adds	r7, #120	; 0x78
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	3dcccccd 	.word	0x3dcccccd

08007d90 <_ZN6EMFObsaSERKS_>:

#include "Matrix.hpp"
#include "ZIntegrate.hpp"
#include "Trigonometric.hpp"

class EMFObs {
 8007d90:	b4b0      	push	{r4, r5, r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	3308      	adds	r3, #8
 8007da8:	3208      	adds	r2, #8
 8007daa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dae:	e883 0003 	stmia.w	r3, {r0, r1}
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	3310      	adds	r3, #16
 8007db8:	3210      	adds	r2, #16
 8007dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	699a      	ldr	r2, [r3, #24]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	619a      	str	r2, [r3, #24]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	69da      	ldr	r2, [r3, #28]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	61da      	str	r2, [r3, #28]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	6a1a      	ldr	r2, [r3, #32]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	621a      	str	r2, [r3, #32]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	625a      	str	r2, [r3, #36]	; 0x24
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	629a      	str	r2, [r3, #40]	; 0x28
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	3330      	adds	r3, #48	; 0x30
 8007df8:	3230      	adds	r2, #48	; 0x30
 8007dfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dfe:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	3338      	adds	r3, #56	; 0x38
 8007e08:	3238      	adds	r2, #56	; 0x38
 8007e0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	3340      	adds	r3, #64	; 0x40
 8007e18:	3240      	adds	r2, #64	; 0x40
 8007e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	3348      	adds	r3, #72	; 0x48
 8007e28:	3248      	adds	r2, #72	; 0x48
 8007e2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e2e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	3350      	adds	r3, #80	; 0x50
 8007e38:	3250      	adds	r2, #80	; 0x50
 8007e3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	3358      	adds	r3, #88	; 0x58
 8007e48:	3258      	adds	r2, #88	; 0x58
 8007e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	f102 0460 	add.w	r4, r2, #96	; 0x60
 8007e5a:	f103 0560 	add.w	r5, r3, #96	; 0x60
 8007e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e62:	682b      	ldr	r3, [r5, #0]
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	3374      	adds	r3, #116	; 0x74
 8007e6c:	3274      	adds	r2, #116	; 0x74
 8007e6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e72:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	337c      	adds	r3, #124	; 0x7c
 8007e7c:	327c      	adds	r2, #124	; 0x7c
 8007e7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e82:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	683a      	ldr	r2, [r7, #0]
 8007e8a:	3384      	adds	r3, #132	; 0x84
 8007e8c:	3284      	adds	r2, #132	; 0x84
 8007e8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e92:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bcb0      	pop	{r4, r5, r7}
 8007ea0:	4770      	bx	lr

08007ea2 <_ZN4PII2aSERKS_>:
#ifndef INC_PII2_HPP_
#define INC_PII2_HPP_

#include "ZIntegrate.hpp"

class PII2 {
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	605a      	str	r2, [r3, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	609a      	str	r2, [r3, #8]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	60da      	str	r2, [r3, #12]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	691a      	ldr	r2, [r3, #16]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	611a      	str	r2, [r3, #16]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	695a      	ldr	r2, [r3, #20]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	615a      	str	r2, [r3, #20]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	699a      	ldr	r2, [r3, #24]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	619a      	str	r2, [r3, #24]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	61da      	str	r2, [r3, #28]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	6a1a      	ldr	r2, [r3, #32]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	621a      	str	r2, [r3, #32]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	3324      	adds	r3, #36	; 0x24
 8007ef2:	3224      	adds	r2, #36	; 0x24
 8007ef4:	ca07      	ldmia	r2, {r0, r1, r2}
 8007ef6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	631a      	str	r2, [r3, #48]	; 0x30
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	635a      	str	r2, [r3, #52]	; 0x34
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	3338      	adds	r3, #56	; 0x38
 8007f10:	3238      	adds	r2, #56	; 0x38
 8007f12:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	645a      	str	r2, [r3, #68]	; 0x44
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	649a      	str	r2, [r3, #72]	; 0x48
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <_ZN8ObserveraSERKS_>:
#include "AdaptVelEst.hpp"
#include "EMFObs.hpp"
#include "EstimatedAxisError.hpp"
#include "PII2.hpp"

class Observer {
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b082      	sub	sp, #8
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	1d1a      	adds	r2, r3, #4
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	3304      	adds	r3, #4
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	f7ff ff20 	bl	8007d90 <_ZN6EMFObsaSERKS_>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	3390      	adds	r3, #144	; 0x90
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	f7ff ffa0 	bl	8007ea2 <_ZN4PII2aSERKS_>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	33dc      	adds	r3, #220	; 0xdc
 8007f68:	32dc      	adds	r2, #220	; 0xdc
 8007f6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	33e4      	adds	r3, #228	; 0xe4
 8007f78:	32e4      	adds	r2, #228	; 0xe4
 8007f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <_ZN9MotorCtrl12InitObserverEv>:

void MotorCtrl::InitObserver(void) {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b0c0      	sub	sp, #256	; 0x100
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]

	{
		Observer Observer; //オブザーバのInit
 8007fb8:	f107 0308 	add.w	r3, r7, #8
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 f8ab 	bl	8008118 <_ZN8ObserverC1Ev>
		Observer.InitEMFObs(OBSERVER_CYCLE_TIME, M_PARAM_R, M_PARAM_LD, M_PARAM_LQ, OBSERVER_GAIN_G1, OBSERVER_GAIN_ALPHA);
 8007fc2:	f107 0308 	add.w	r3, r7, #8
 8007fc6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8007fca:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8007fce:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8007fd2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8007fd6:	eddf 0a13 	vldr	s1, [pc, #76]	; 8008024 <_ZN9MotorCtrl12InitObserverEv+0x74>
 8007fda:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8008028 <_ZN9MotorCtrl12InitObserverEv+0x78>
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 f8da 	bl	8008198 <_ZN8Observer10InitEMFObsEffffff>
		Observer.InitPII2(OBSERVER_CYCLE_TIME, OBSERVER_GAIN_K1, OBSERVER_GAIN_K2, OBSERVER_GAIN_K3);
 8007fe4:	f107 0308 	add.w	r3, r7, #8
 8007fe8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8007fec:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007ff0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007ff4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008028 <_ZN9MotorCtrl12InitObserverEv+0x78>
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 f901 	bl	8008200 <_ZN8Observer8InitPII2Effff>
		mObserver = Observer;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3358      	adds	r3, #88	; 0x58
 8008002:	f107 0208 	add.w	r2, r7, #8
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff ff94 	bl	8007f36 <_ZN8ObserveraSERKS_>
		Observer Observer; //オブザーバのInit
 800800e:	f107 0308 	add.w	r3, r7, #8
 8008012:	4618      	mov	r0, r3
 8008014:	f000 f898 	bl	8008148 <_ZN8ObserverD1Ev>
	}
}
 8008018:	bf00      	nop
 800801a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	3ca3d70a 	.word	0x3ca3d70a
 8008028:	3727c5ac 	.word	0x3727c5ac

0800802c <_ZN6EMFObsC1Ev>:
 *      Author: watashi
 */

#include "EMFObs.hpp"

EMFObs::EMFObs() {
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	4a04      	ldr	r2, [pc, #16]	; (8008048 <_ZN6EMFObsC1Ev+0x1c>)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	0800b8d4 	.word	0x0800b8d4

0800804c <_ZN6EMFObsD1Ev>:

EMFObs::~EMFObs() {
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	4a04      	ldr	r2, [pc, #16]	; (8008068 <_ZN6EMFObsD1Ev+0x1c>)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	0800b8d4 	.word	0x0800b8d4

0800806c <_ZN6EMFObsD0Ev>:
EMFObs::~EMFObs() {
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
}
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff ffe9 	bl	800804c <_ZN6EMFObsD1Ev>
 800807a:	218c      	movs	r1, #140	; 0x8c
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f001 fea0 	bl	8009dc2 <_ZdlPvj>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <_ZN6EMFObs14InitMotorParamEfff>:

//Initializer
void EMFObs::InitMotorParam(float pR,float pLd, float pLq) {
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	ed87 0a02 	vstr	s0, [r7, #8]
 8008098:	edc7 0a01 	vstr	s1, [r7, #4]
 800809c:	ed87 1a00 	vstr	s2, [r7]
	mR = pR;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	619a      	str	r2, [r3, #24]
	mLd = pLd;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	61da      	str	r2, [r3, #28]
	mLq = pLq;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	621a      	str	r2, [r3, #32]
}
 80080b2:	bf00      	nop
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <_ZN6EMFObs13InitCycleTimeEf>:

void EMFObs::InitCycleTime(float pCycleTime) {
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	ed87 0a00 	vstr	s0, [r7]
	mCycleTime = pCycleTime;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <_ZN6EMFObs11InitObsGainEf>:

void EMFObs::InitObsGain(float pGainAlpha) {
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	ed87 0a00 	vstr	s0, [r7]
	mGainAlpha = pGainAlpha;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <_ZN6EMFObs13InitModelGainEf>:

void EMFObs::InitModelGain(float pG1) {
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	ed87 0a00 	vstr	s0, [r7]
	mG1 = pG1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <_ZN8ObserverC1Ev>:
 *      Author: watashi
 */

#include "Observer.hpp"

Observer::Observer() {
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	4a08      	ldr	r2, [pc, #32]	; (8008144 <_ZN8ObserverC1Ev+0x2c>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3304      	adds	r3, #4
 800812a:	4618      	mov	r0, r3
 800812c:	f7ff ff7e 	bl	800802c <_ZN6EMFObsC1Ev>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3390      	adds	r3, #144	; 0x90
 8008134:	4618      	mov	r0, r3
 8008136:	f000 f88f 	bl	8008258 <_ZN4PII2C1Ev>
	// TODO Auto-generated constructor stub
}
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	0800b8e4 	.word	0x0800b8e4

08008148 <_ZN8ObserverD1Ev>:

Observer::~Observer() {
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	4a08      	ldr	r2, [pc, #32]	; (8008174 <_ZN8ObserverD1Ev+0x2c>)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3390      	adds	r3, #144	; 0x90
 800815a:	4618      	mov	r0, r3
 800815c:	f000 f88c 	bl	8008278 <_ZN4PII2D1Ev>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3304      	adds	r3, #4
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff ff71 	bl	800804c <_ZN6EMFObsD1Ev>
	// TODO Auto-generated destructor stub
}
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	0800b8e4 	.word	0x0800b8e4

08008178 <_ZN8ObserverD0Ev>:
Observer::~Observer() {
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
}
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff ffe1 	bl	8008148 <_ZN8ObserverD1Ev>
 8008186:	21f8      	movs	r1, #248	; 0xf8
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 fe1a 	bl	8009dc2 <_ZdlPvj>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <_ZN8Observer10InitEMFObsEffffff>:

//Initializer
void Observer::InitEMFObs(float pCycleTime, float pR, float pLd, float pLq, float pG1, float pGainAlpha) {
 8008198:	b580      	push	{r7, lr}
 800819a:	b088      	sub	sp, #32
 800819c:	af00      	add	r7, sp, #0
 800819e:	61f8      	str	r0, [r7, #28]
 80081a0:	ed87 0a06 	vstr	s0, [r7, #24]
 80081a4:	edc7 0a05 	vstr	s1, [r7, #20]
 80081a8:	ed87 1a04 	vstr	s2, [r7, #16]
 80081ac:	edc7 1a03 	vstr	s3, [r7, #12]
 80081b0:	ed87 2a02 	vstr	s4, [r7, #8]
 80081b4:	edc7 2a01 	vstr	s5, [r7, #4]
	mEMFObserver.InitCycleTime(pCycleTime);
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	3304      	adds	r3, #4
 80081bc:	ed97 0a06 	vldr	s0, [r7, #24]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff ff7c 	bl	80080be <_ZN6EMFObs13InitCycleTimeEf>
	mEMFObserver.InitMotorParam(pR, pLd, pLq);
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	3304      	adds	r3, #4
 80081ca:	ed97 1a03 	vldr	s2, [r7, #12]
 80081ce:	edd7 0a04 	vldr	s1, [r7, #16]
 80081d2:	ed97 0a05 	vldr	s0, [r7, #20]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7ff ff58 	bl	800808c <_ZN6EMFObs14InitMotorParamEfff>
	mEMFObserver.InitModelGain(pG1);
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	3304      	adds	r3, #4
 80081e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff ff88 	bl	80080fa <_ZN6EMFObs13InitModelGainEf>
	mEMFObserver.InitObsGain(pGainAlpha);
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	3304      	adds	r3, #4
 80081ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff ff72 	bl	80080dc <_ZN6EMFObs11InitObsGainEf>
}
 80081f8:	bf00      	nop
 80081fa:	3720      	adds	r7, #32
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <_ZN8Observer8InitPII2Effff>:

void Observer::InitPII2(float pCycleTime, float pK1, float pK2, float pK3) {
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6178      	str	r0, [r7, #20]
 8008208:	ed87 0a04 	vstr	s0, [r7, #16]
 800820c:	edc7 0a03 	vstr	s1, [r7, #12]
 8008210:	ed87 1a02 	vstr	s2, [r7, #8]
 8008214:	edc7 1a01 	vstr	s3, [r7, #4]
	mEstThetaPII2.InitCycleTime(pCycleTime);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	3390      	adds	r3, #144	; 0x90
 800821c:	ed97 0a04 	vldr	s0, [r7, #16]
 8008220:	4618      	mov	r0, r3
 8008222:	f000 f849 	bl	80082b8 <_ZN4PII213InitCycleTimeEf>
	mEstThetaPII2.InitGainK1(pK1);
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	3390      	adds	r3, #144	; 0x90
 800822a:	ed97 0a03 	vldr	s0, [r7, #12]
 800822e:	4618      	mov	r0, r3
 8008230:	f000 f851 	bl	80082d6 <_ZN4PII210InitGainK1Ef>
	mEstThetaPII2.InitGainK2(pK2);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	3390      	adds	r3, #144	; 0x90
 8008238:	ed97 0a02 	vldr	s0, [r7, #8]
 800823c:	4618      	mov	r0, r3
 800823e:	f000 f859 	bl	80082f4 <_ZN4PII210InitGainK2Ef>
	mEstThetaPII2.InitGainK3(pK3);
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	3390      	adds	r3, #144	; 0x90
 8008246:	ed97 0a01 	vldr	s0, [r7, #4]
 800824a:	4618      	mov	r0, r3
 800824c:	f000 f861 	bl	8008312 <_ZN4PII210InitGainK3Ef>
}
 8008250:	bf00      	nop
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <_ZN4PII2C1Ev>:
 *      Author: watashi
 */

#include "PII2.hpp"

PII2::PII2() {
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	4a04      	ldr	r2, [pc, #16]	; (8008274 <_ZN4PII2C1Ev+0x1c>)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	0800b8f4 	.word	0x0800b8f4

08008278 <_ZN4PII2D1Ev>:

PII2::~PII2() {
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	4a04      	ldr	r2, [pc, #16]	; (8008294 <_ZN4PII2D1Ev+0x1c>)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4618      	mov	r0, r3
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	0800b8f4 	.word	0x0800b8f4

08008298 <_ZN4PII2D0Ev>:
PII2::~PII2() {
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
}
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff ffe9 	bl	8008278 <_ZN4PII2D1Ev>
 80082a6:	214c      	movs	r1, #76	; 0x4c
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 fd8a 	bl	8009dc2 <_ZdlPvj>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <_ZN4PII213InitCycleTimeEf>:

//Initializer
void PII2::InitCycleTime(float pCycleTime) {
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	ed87 0a00 	vstr	s0, [r7]
	mCycleTime = pCycleTime;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	605a      	str	r2, [r3, #4]
}
 80082ca:	bf00      	nop
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <_ZN4PII210InitGainK1Ef>:
void PII2::InitGainK1(float pK1) {
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	ed87 0a00 	vstr	s0, [r7]
	mK1 = pK1;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	609a      	str	r2, [r3, #8]
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <_ZN4PII210InitGainK2Ef>:
void PII2::InitGainK2(float pK2) {
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	ed87 0a00 	vstr	s0, [r7]
	mK2 = pK2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	60da      	str	r2, [r3, #12]
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <_ZN4PII210InitGainK3Ef>:
void PII2::InitGainK3(float pK3) {
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	ed87 0a00 	vstr	s0, [r7]
	mK3 = pK3;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	611a      	str	r2, [r3, #16]
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8008336:	4b21      	ldr	r3, [pc, #132]	; (80083bc <_DoInit+0x8c>)
 8008338:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2203      	movs	r2, #3
 800833e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2203      	movs	r2, #3
 8008344:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a1d      	ldr	r2, [pc, #116]	; (80083c0 <_DoInit+0x90>)
 800834a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a1d      	ldr	r2, [pc, #116]	; (80083c4 <_DoInit+0x94>)
 8008350:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008358:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a14      	ldr	r2, [pc, #80]	; (80083c0 <_DoInit+0x90>)
 8008370:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a14      	ldr	r2, [pc, #80]	; (80083c8 <_DoInit+0x98>)
 8008376:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2210      	movs	r2, #16
 800837c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3307      	adds	r3, #7
 8008394:	4a0d      	ldr	r2, [pc, #52]	; (80083cc <_DoInit+0x9c>)
 8008396:	6810      	ldr	r0, [r2, #0]
 8008398:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a0c      	ldr	r2, [pc, #48]	; (80083d0 <_DoInit+0xa0>)
 800839e:	6810      	ldr	r0, [r2, #0]
 80083a0:	6018      	str	r0, [r3, #0]
 80083a2:	8891      	ldrh	r1, [r2, #4]
 80083a4:	7992      	ldrb	r2, [r2, #6]
 80083a6:	8099      	strh	r1, [r3, #4]
 80083a8:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2220      	movs	r2, #32
 80083ae:	719a      	strb	r2, [r3, #6]
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	24003594 	.word	0x24003594
 80083c0:	0800b840 	.word	0x0800b840
 80083c4:	24000200 	.word	0x24000200
 80083c8:	24000600 	.word	0x24000600
 80083cc:	0800b84c 	.word	0x0800b84c
 80083d0:	0800b850 	.word	0x0800b850

080083d4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80083e0:	2300      	movs	r3, #0
 80083e2:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d905      	bls.n	8008404 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	3b01      	subs	r3, #1
 8008400:	61fb      	str	r3, [r7, #28]
 8008402:	e007      	b.n	8008414 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	689a      	ldr	r2, [r3, #8]
 8008408:	6939      	ldr	r1, [r7, #16]
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	1acb      	subs	r3, r1, r3
 800840e:	4413      	add	r3, r2
 8008410:	3b01      	subs	r3, #1
 8008412:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	69fa      	ldr	r2, [r7, #28]
 800841e:	4293      	cmp	r3, r2
 8008420:	bf28      	it	cs
 8008422:	4613      	movcs	r3, r2
 8008424:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8008426:	69fa      	ldr	r2, [r7, #28]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4293      	cmp	r3, r2
 800842c:	bf28      	it	cs
 800842e:	4613      	movcs	r3, r2
 8008430:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	4413      	add	r3, r2
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	4618      	mov	r0, r3
 8008440:	f001 fcfe 	bl	8009e40 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	4413      	add	r3, r2
 8008452:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	4413      	add	r3, r2
 8008462:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	429a      	cmp	r2, r3
 800846c:	d101      	bne.n	8008472 <_WriteBlocking+0x9e>
      WrOff = 0u;
 800846e:	2300      	movs	r3, #0
 8008470:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1b5      	bne.n	80083ea <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800847e:	69bb      	ldr	r3, [r7, #24]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3720      	adds	r7, #32
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	689a      	ldr	r2, [r3, #8]
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d90e      	bls.n	80084ca <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	4413      	add	r3, r2
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	68b9      	ldr	r1, [r7, #8]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f001 fcc1 	bl	8009e40 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80084be:	69fa      	ldr	r2, [r7, #28]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	441a      	add	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80084c8:	e01a      	b.n	8008500 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	4413      	add	r3, r2
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 fcb0 	bl	8009e40 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6858      	ldr	r0, [r3, #4]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	4413      	add	r3, r2
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	4619      	mov	r1, r3
 80084f6:	f001 fca3 	bl	8009e40 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	60da      	str	r2, [r3, #12]
}
 8008500:	bf00      	nop
 8008502:	3720      	adds	r7, #32
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	429a      	cmp	r2, r3
 8008522:	d808      	bhi.n	8008536 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	4413      	add	r3, r2
 8008530:	3b01      	subs	r3, #1
 8008532:	617b      	str	r3, [r7, #20]
 8008534:	e004      	b.n	8008540 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8008540:	697b      	ldr	r3, [r7, #20]
}
 8008542:	4618      	mov	r0, r3
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	4613      	mov	r3, r2
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	4413      	add	r3, r2
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	4a1e      	ldr	r2, [pc, #120]	; (80085e8 <SEGGER_RTT_WriteNoLock+0x98>)
 800856e:	4413      	add	r3, r2
 8008570:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d017      	beq.n	80085aa <SEGGER_RTT_WriteNoLock+0x5a>
 800857a:	2b01      	cmp	r3, #1
 800857c:	d302      	bcc.n	8008584 <SEGGER_RTT_WriteNoLock+0x34>
 800857e:	2b02      	cmp	r3, #2
 8008580:	d023      	beq.n	80085ca <SEGGER_RTT_WriteNoLock+0x7a>
 8008582:	e029      	b.n	80085d8 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008584:	6978      	ldr	r0, [r7, #20]
 8008586:	f7ff ffbf 	bl	8008508 <_GetAvailWriteSpace>
 800858a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d202      	bcs.n	800859a <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8008594:	2300      	movs	r3, #0
 8008596:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8008598:	e021      	b.n	80085de <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	69b9      	ldr	r1, [r7, #24]
 80085a2:	6978      	ldr	r0, [r7, #20]
 80085a4:	f7ff ff70 	bl	8008488 <_WriteNoCheck>
    break;
 80085a8:	e019      	b.n	80085de <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80085aa:	6978      	ldr	r0, [r7, #20]
 80085ac:	f7ff ffac 	bl	8008508 <_GetAvailWriteSpace>
 80085b0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	4293      	cmp	r3, r2
 80085b8:	bf28      	it	cs
 80085ba:	4613      	movcs	r3, r2
 80085bc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80085be:	69fa      	ldr	r2, [r7, #28]
 80085c0:	69b9      	ldr	r1, [r7, #24]
 80085c2:	6978      	ldr	r0, [r7, #20]
 80085c4:	f7ff ff60 	bl	8008488 <_WriteNoCheck>
    break;
 80085c8:	e009      	b.n	80085de <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	69b9      	ldr	r1, [r7, #24]
 80085ce:	6978      	ldr	r0, [r7, #20]
 80085d0:	f7ff ff00 	bl	80083d4 <_WriteBlocking>
 80085d4:	61f8      	str	r0, [r7, #28]
    break;
 80085d6:	e002      	b.n	80085de <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 80085d8:	2300      	movs	r3, #0
 80085da:	61fb      	str	r3, [r7, #28]
    break;
 80085dc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80085de:	69fb      	ldr	r3, [r7, #28]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3720      	adds	r7, #32
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	24003594 	.word	0x24003594

080085ec <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 80085f8:	4b0d      	ldr	r3, [pc, #52]	; (8008630 <SEGGER_RTT_Write+0x44>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <SEGGER_RTT_Write+0x18>
 8008600:	f7ff fe96 	bl	8008330 <_DoInit>
  SEGGER_RTT_LOCK();
 8008604:	f3ef 8311 	mrs	r3, BASEPRI
 8008608:	f04f 0120 	mov.w	r1, #32
 800860c:	f381 8811 	msr	BASEPRI, r1
 8008610:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	68b9      	ldr	r1, [r7, #8]
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f7ff ff9a 	bl	8008550 <SEGGER_RTT_WriteNoLock>
 800861c:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8008624:	693b      	ldr	r3, [r7, #16]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	24003594 	.word	0x24003594

08008634 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	1c5a      	adds	r2, r3, #1
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	429a      	cmp	r2, r3
 8008650:	d80e      	bhi.n	8008670 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4413      	add	r3, r2
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	429a      	cmp	r2, r3
 800867a:	d115      	bne.n	80086a8 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6918      	ldr	r0, [r3, #16]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6819      	ldr	r1, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	461a      	mov	r2, r3
 800868a:	f7ff ffaf 	bl	80085ec <SEGGER_RTT_Write>
 800868e:	4602      	mov	r2, r0
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	429a      	cmp	r2, r3
 8008696:	d004      	beq.n	80086a2 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f04f 32ff 	mov.w	r2, #4294967295
 800869e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80086a0:	e002      	b.n	80086a8 <_StoreChar+0x74>
      p->Cnt = 0u;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	609a      	str	r2, [r3, #8]
}
 80086a8:	bf00      	nop
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08a      	sub	sp, #40	; 0x28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80086c2:	2301      	movs	r3, #1
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80086c6:	2301      	movs	r3, #1
 80086c8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80086ca:	e007      	b.n	80086dc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80086cc:	6a3a      	ldr	r2, [r7, #32]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d4:	623b      	str	r3, [r7, #32]
    Width++;
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	3301      	adds	r3, #1
 80086da:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80086dc:	6a3a      	ldr	r2, [r7, #32]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d2f3      	bcs.n	80086cc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d901      	bls.n	80086f0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d125      	bne.n	8008746 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d022      	beq.n	8008746 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8008700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008702:	f003 0302 	and.w	r3, r3, #2
 8008706:	2b00      	cmp	r3, #0
 8008708:	d005      	beq.n	8008716 <_PrintUnsigned+0x66>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <_PrintUnsigned+0x66>
        c = '0';
 8008710:	2330      	movs	r3, #48	; 0x30
 8008712:	76fb      	strb	r3, [r7, #27]
 8008714:	e001      	b.n	800871a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8008716:	2320      	movs	r3, #32
 8008718:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800871a:	e00b      	b.n	8008734 <_PrintUnsigned+0x84>
        FieldWidth--;
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	3b01      	subs	r3, #1
 8008720:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8008722:	7efb      	ldrb	r3, [r7, #27]
 8008724:	4619      	mov	r1, r3
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff ff84 	bl	8008634 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	db07      	blt.n	8008744 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <_PrintUnsigned+0x96>
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	429a      	cmp	r2, r3
 8008740:	d3ec      	bcc.n	800871c <_PrintUnsigned+0x6c>
 8008742:	e000      	b.n	8008746 <_PrintUnsigned+0x96>
          break;
 8008744:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	db55      	blt.n	80087fa <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d903      	bls.n	800875c <_PrintUnsigned+0xac>
        NumDigits--;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	3b01      	subs	r3, #1
 8008758:	603b      	str	r3, [r7, #0]
 800875a:	e009      	b.n	8008770 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	fbb2 f3f3 	udiv	r3, r2, r3
 8008764:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	429a      	cmp	r2, r3
 800876c:	d200      	bcs.n	8008770 <_PrintUnsigned+0xc0>
          break;
 800876e:	e005      	b.n	800877c <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	fb02 f303 	mul.w	r3, r2, r3
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800877a:	e7e8      	b.n	800874e <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	fbb2 f3f3 	udiv	r3, r2, r3
 8008784:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800878a:	fb02 f303 	mul.w	r3, r2, r3
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8008794:	4a1b      	ldr	r2, [pc, #108]	; (8008804 <_PrintUnsigned+0x154>)
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	4413      	add	r3, r2
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	4619      	mov	r1, r3
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f7ff ff48 	bl	8008634 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	db08      	blt.n	80087be <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 80087ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b4:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1df      	bne.n	800877c <_PrintUnsigned+0xcc>
 80087bc:	e000      	b.n	80087c0 <_PrintUnsigned+0x110>
        break;
 80087be:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80087c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d017      	beq.n	80087fa <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d014      	beq.n	80087fa <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80087d0:	e00a      	b.n	80087e8 <_PrintUnsigned+0x138>
          FieldWidth--;
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	3b01      	subs	r3, #1
 80087d6:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 80087d8:	2120      	movs	r1, #32
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f7ff ff2a 	bl	8008634 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	db07      	blt.n	80087f8 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d005      	beq.n	80087fa <_PrintUnsigned+0x14a>
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d3ed      	bcc.n	80087d2 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 80087f6:	e000      	b.n	80087fa <_PrintUnsigned+0x14a>
            break;
 80087f8:	bf00      	nop
}
 80087fa:	bf00      	nop
 80087fc:	3728      	adds	r7, #40	; 0x28
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	0800b8fc 	.word	0x0800b8fc

08008808 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af02      	add	r7, sp, #8
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	bfb8      	it	lt
 800881c:	425b      	neglt	r3, r3
 800881e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8008820:	2301      	movs	r3, #1
 8008822:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8008824:	e007      	b.n	8008836 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	fb92 f3f3 	sdiv	r3, r2, r3
 800882e:	613b      	str	r3, [r7, #16]
    Width++;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	3301      	adds	r3, #1
 8008834:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	429a      	cmp	r2, r3
 800883c:	daf3      	bge.n	8008826 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	429a      	cmp	r2, r3
 8008844:	d901      	bls.n	800884a <_PrintInt+0x42>
    Width = NumDigits;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <_PrintInt+0x5e>
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	db04      	blt.n	8008860 <_PrintInt+0x58>
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <_PrintInt+0x5e>
    FieldWidth--;
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	3b01      	subs	r3, #1
 8008864:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	f003 0302 	and.w	r3, r3, #2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <_PrintInt+0x6e>
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d01c      	beq.n	80088b0 <_PrintInt+0xa8>
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b00      	cmp	r3, #0
 800887e:	d117      	bne.n	80088b0 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d014      	beq.n	80088b0 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008886:	e00a      	b.n	800889e <_PrintInt+0x96>
        FieldWidth--;
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	3b01      	subs	r3, #1
 800888c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800888e:	2120      	movs	r1, #32
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f7ff fecf 	bl	8008634 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	db07      	blt.n	80088ae <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d005      	beq.n	80088b0 <_PrintInt+0xa8>
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	6a3b      	ldr	r3, [r7, #32]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d3ed      	bcc.n	8008888 <_PrintInt+0x80>
 80088ac:	e000      	b.n	80088b0 <_PrintInt+0xa8>
          break;
 80088ae:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	db4a      	blt.n	800894e <_PrintInt+0x146>
    if (v < 0) {
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	da07      	bge.n	80088ce <_PrintInt+0xc6>
      v = -v;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	425b      	negs	r3, r3
 80088c2:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 80088c4:	212d      	movs	r1, #45	; 0x2d
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff feb4 	bl	8008634 <_StoreChar>
 80088cc:	e008      	b.n	80088e0 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80088d8:	212b      	movs	r1, #43	; 0x2b
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f7ff feaa 	bl	8008634 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	db32      	blt.n	800894e <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d01f      	beq.n	8008932 <_PrintInt+0x12a>
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d11a      	bne.n	8008932 <_PrintInt+0x12a>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d117      	bne.n	8008932 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d014      	beq.n	8008932 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008908:	e00a      	b.n	8008920 <_PrintInt+0x118>
            FieldWidth--;
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	3b01      	subs	r3, #1
 800890e:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8008910:	2130      	movs	r1, #48	; 0x30
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff fe8e 	bl	8008634 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	db07      	blt.n	8008930 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d005      	beq.n	8008932 <_PrintInt+0x12a>
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	429a      	cmp	r2, r3
 800892c:	d3ed      	bcc.n	800890a <_PrintInt+0x102>
 800892e:	e000      	b.n	8008932 <_PrintInt+0x12a>
              break;
 8008930:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	db09      	blt.n	800894e <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff feb1 	bl	80086b0 <_PrintUnsigned>
      }
    }
  }
}
 800894e:	bf00      	nop
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8008958:	b580      	push	{r7, lr}
 800895a:	b0a2      	sub	sp, #136	; 0x88
 800895c:	af02      	add	r7, sp, #8
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8008964:	f107 0310 	add.w	r3, r7, #16
 8008968:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800896a:	2340      	movs	r3, #64	; 0x40
 800896c:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 800896e:	2300      	movs	r3, #0
 8008970:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	3301      	adds	r3, #1
 8008986:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8008988:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 8161 	beq.w	8008c54 <SEGGER_RTT_vprintf+0x2fc>
      break;
    }
    if (c == '%') {
 8008992:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008996:	2b25      	cmp	r3, #37	; 0x25
 8008998:	f040 814f 	bne.w	8008c3a <SEGGER_RTT_vprintf+0x2e2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800899c:	2300      	movs	r3, #0
 800899e:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 80089a0:	2301      	movs	r3, #1
 80089a2:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 80089ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80089b0:	3b23      	subs	r3, #35	; 0x23
 80089b2:	2b0d      	cmp	r3, #13
 80089b4:	d83e      	bhi.n	8008a34 <SEGGER_RTT_vprintf+0xdc>
 80089b6:	a201      	add	r2, pc, #4	; (adr r2, 80089bc <SEGGER_RTT_vprintf+0x64>)
 80089b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089bc:	08008a25 	.word	0x08008a25
 80089c0:	08008a35 	.word	0x08008a35
 80089c4:	08008a35 	.word	0x08008a35
 80089c8:	08008a35 	.word	0x08008a35
 80089cc:	08008a35 	.word	0x08008a35
 80089d0:	08008a35 	.word	0x08008a35
 80089d4:	08008a35 	.word	0x08008a35
 80089d8:	08008a35 	.word	0x08008a35
 80089dc:	08008a15 	.word	0x08008a15
 80089e0:	08008a35 	.word	0x08008a35
 80089e4:	080089f5 	.word	0x080089f5
 80089e8:	08008a35 	.word	0x08008a35
 80089ec:	08008a35 	.word	0x08008a35
 80089f0:	08008a05 	.word	0x08008a05
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80089f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089f6:	f043 0301 	orr.w	r3, r3, #1
 80089fa:	673b      	str	r3, [r7, #112]	; 0x70
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	3301      	adds	r3, #1
 8008a00:	60bb      	str	r3, [r7, #8]
 8008a02:	e01a      	b.n	8008a3a <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8008a04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a06:	f043 0302 	orr.w	r3, r3, #2
 8008a0a:	673b      	str	r3, [r7, #112]	; 0x70
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	60bb      	str	r3, [r7, #8]
 8008a12:	e012      	b.n	8008a3a <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8008a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a16:	f043 0304 	orr.w	r3, r3, #4
 8008a1a:	673b      	str	r3, [r7, #112]	; 0x70
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	60bb      	str	r3, [r7, #8]
 8008a22:	e00a      	b.n	8008a3a <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8008a24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a26:	f043 0308 	orr.w	r3, r3, #8
 8008a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	60bb      	str	r3, [r7, #8]
 8008a32:	e002      	b.n	8008a3a <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8008a34:	2300      	movs	r3, #0
 8008a36:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a38:	bf00      	nop
        }
      } while (v);
 8008a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1b1      	bne.n	80089a4 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8008a40:	2300      	movs	r3, #0
 8008a42:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 8008a4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008a50:	2b2f      	cmp	r3, #47	; 0x2f
 8008a52:	d912      	bls.n	8008a7a <SEGGER_RTT_vprintf+0x122>
 8008a54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008a58:	2b39      	cmp	r3, #57	; 0x39
 8008a5a:	d80e      	bhi.n	8008a7a <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8008a62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a64:	4613      	mov	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008a72:	4413      	add	r3, r2
 8008a74:	3b30      	subs	r3, #48	; 0x30
 8008a76:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8008a78:	e7e4      	b.n	8008a44 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8008a86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a8c:	d11d      	bne.n	8008aca <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	3301      	adds	r3, #1
 8008a92:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8008a9c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008aa0:	2b2f      	cmp	r3, #47	; 0x2f
 8008aa2:	d912      	bls.n	8008aca <SEGGER_RTT_vprintf+0x172>
 8008aa4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008aa8:	2b39      	cmp	r3, #57	; 0x39
 8008aaa:	d80e      	bhi.n	8008aca <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8008ab2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	005b      	lsls	r3, r3, #1
 8008abc:	461a      	mov	r2, r3
 8008abe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008ac2:	4413      	add	r3, r2
 8008ac4:	3b30      	subs	r3, #48	; 0x30
 8008ac6:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8008ac8:	e7e4      	b.n	8008a94 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8008ad2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008ad6:	2b6c      	cmp	r3, #108	; 0x6c
 8008ad8:	d003      	beq.n	8008ae2 <SEGGER_RTT_vprintf+0x18a>
 8008ada:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008ade:	2b68      	cmp	r3, #104	; 0x68
 8008ae0:	d107      	bne.n	8008af2 <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8008af0:	e7ef      	b.n	8008ad2 <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8008af2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008af6:	2b64      	cmp	r3, #100	; 0x64
 8008af8:	d028      	beq.n	8008b4c <SEGGER_RTT_vprintf+0x1f4>
 8008afa:	2b64      	cmp	r3, #100	; 0x64
 8008afc:	dc07      	bgt.n	8008b0e <SEGGER_RTT_vprintf+0x1b6>
 8008afe:	2b58      	cmp	r3, #88	; 0x58
 8008b00:	d04a      	beq.n	8008b98 <SEGGER_RTT_vprintf+0x240>
 8008b02:	2b63      	cmp	r3, #99	; 0x63
 8008b04:	d00f      	beq.n	8008b26 <SEGGER_RTT_vprintf+0x1ce>
 8008b06:	2b25      	cmp	r3, #37	; 0x25
 8008b08:	f000 808c 	beq.w	8008c24 <SEGGER_RTT_vprintf+0x2cc>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8008b0c:	e091      	b.n	8008c32 <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8008b0e:	2b73      	cmp	r3, #115	; 0x73
 8008b10:	d055      	beq.n	8008bbe <SEGGER_RTT_vprintf+0x266>
 8008b12:	2b73      	cmp	r3, #115	; 0x73
 8008b14:	dc02      	bgt.n	8008b1c <SEGGER_RTT_vprintf+0x1c4>
 8008b16:	2b70      	cmp	r3, #112	; 0x70
 8008b18:	d071      	beq.n	8008bfe <SEGGER_RTT_vprintf+0x2a6>
        break;
 8008b1a:	e08a      	b.n	8008c32 <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8008b1c:	2b75      	cmp	r3, #117	; 0x75
 8008b1e:	d028      	beq.n	8008b72 <SEGGER_RTT_vprintf+0x21a>
 8008b20:	2b78      	cmp	r3, #120	; 0x78
 8008b22:	d039      	beq.n	8008b98 <SEGGER_RTT_vprintf+0x240>
        break;
 8008b24:	e085      	b.n	8008c32 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	1d19      	adds	r1, r3, #4
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	6011      	str	r1, [r2, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8008b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8008b3a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8008b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b42:	4611      	mov	r1, r2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff fd75 	bl	8008634 <_StoreChar>
        break;
 8008b4a:	e072      	b.n	8008c32 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	1d19      	adds	r1, r3, #4
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	6011      	str	r1, [r2, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8008b5a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8008b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b68:	220a      	movs	r2, #10
 8008b6a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008b6c:	f7ff fe4c 	bl	8008808 <_PrintInt>
        break;
 8008b70:	e05f      	b.n	8008c32 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	1d19      	adds	r1, r3, #4
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	6011      	str	r1, [r2, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8008b80:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008b82:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8008b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b88:	9301      	str	r3, [sp, #4]
 8008b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b90:	220a      	movs	r2, #10
 8008b92:	f7ff fd8d 	bl	80086b0 <_PrintUnsigned>
        break;
 8008b96:	e04c      	b.n	8008c32 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	1d19      	adds	r1, r3, #4
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	6011      	str	r1, [r2, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8008ba6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008ba8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8008bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bae:	9301      	str	r3, [sp, #4]
 8008bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bb6:	2210      	movs	r2, #16
 8008bb8:	f7ff fd7a 	bl	80086b0 <_PrintUnsigned>
        break;
 8008bbc:	e039      	b.n	8008c32 <SEGGER_RTT_vprintf+0x2da>
          const char * s = va_arg(*pParamList, const char *);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	1d19      	adds	r1, r3, #4
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6011      	str	r1, [r2, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	66bb      	str	r3, [r7, #104]	; 0x68
            c = *s;
 8008bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 8008bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 8008bda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00b      	beq.n	8008bfa <SEGGER_RTT_vprintf+0x2a2>
           _StoreChar(&BufferDesc, c);
 8008be2:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8008be6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008bea:	4611      	mov	r1, r2
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7ff fd21 	bl	8008634 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8008bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dae9      	bge.n	8008bcc <SEGGER_RTT_vprintf+0x274>
        break;
 8008bf8:	e01b      	b.n	8008c32 <SEGGER_RTT_vprintf+0x2da>
              break;
 8008bfa:	bf00      	nop
        break;
 8008bfc:	e019      	b.n	8008c32 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	1d19      	adds	r1, r3, #4
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	6011      	str	r1, [r2, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8008c0c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008c0e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8008c12:	2300      	movs	r3, #0
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	2308      	movs	r3, #8
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	2308      	movs	r3, #8
 8008c1c:	2210      	movs	r2, #16
 8008c1e:	f7ff fd47 	bl	80086b0 <_PrintUnsigned>
        break;
 8008c22:	e006      	b.n	8008c32 <SEGGER_RTT_vprintf+0x2da>
        _StoreChar(&BufferDesc, '%');
 8008c24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c28:	2125      	movs	r1, #37	; 0x25
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7ff fd02 	bl	8008634 <_StoreChar>
        break;
 8008c30:	bf00      	nop
      }
      sFormat++;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	3301      	adds	r3, #1
 8008c36:	60bb      	str	r3, [r7, #8]
 8008c38:	e007      	b.n	8008c4a <SEGGER_RTT_vprintf+0x2f2>
    } else {
      _StoreChar(&BufferDesc, c);
 8008c3a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8008c3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c42:	4611      	mov	r1, r2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff fcf5 	bl	8008634 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8008c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f6bf ae94 	bge.w	800897a <SEGGER_RTT_vprintf+0x22>
 8008c52:	e000      	b.n	8008c56 <SEGGER_RTT_vprintf+0x2fe>
      break;
 8008c54:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8008c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	dd0d      	ble.n	8008c78 <SEGGER_RTT_vprintf+0x320>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8008c5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d006      	beq.n	8008c70 <SEGGER_RTT_vprintf+0x318>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8008c62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c64:	f107 0310 	add.w	r3, r7, #16
 8008c68:	4619      	mov	r1, r3
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f7ff fcbe 	bl	80085ec <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8008c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c74:	4413      	add	r3, r2
 8008c76:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8008c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3780      	adds	r7, #128	; 0x80
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop

08008c84 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8008c84:	b40e      	push	{r1, r2, r3}
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b085      	sub	sp, #20
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8008c8e:	f107 0320 	add.w	r3, r7, #32
 8008c92:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8008c94:	f107 0308 	add.w	r3, r7, #8
 8008c98:	461a      	mov	r2, r3
 8008c9a:	69f9      	ldr	r1, [r7, #28]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff fe5b 	bl	8008958 <SEGGER_RTT_vprintf>
 8008ca2:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cb0:	b003      	add	sp, #12
 8008cb2:	4770      	bx	lr

08008cb4 <_ZN4DeusC1Ev>:

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
}


Deus::Deus() {
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	4a06      	ldr	r2, [pc, #24]	; (8008cd8 <_ZN4DeusC1Ev+0x24>)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe fe5c 	bl	8007984 <_ZN9MotorCtrlC1Ev>
//		  if((htim->Instance == TIM1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {
//		    // タイムアウト処理
//		  }
//	}

}
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	0800b914 	.word	0x0800b914

08008cdc <_ZN4DeusD1Ev>:

Deus::~Deus() {
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	4a06      	ldr	r2, [pc, #24]	; (8008d00 <_ZN4DeusD1Ev+0x24>)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3304      	adds	r3, #4
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fe9a 	bl	8007a28 <_ZN9MotorCtrlD1Ev>
	// TODO Auto-generated destructor stub
}
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	0800b914 	.word	0x0800b914

08008d04 <_ZN4DeusD0Ev>:
Deus::~Deus() {
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
}
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff ffe5 	bl	8008cdc <_ZN4DeusD1Ev>
 8008d12:	f642 7168 	movw	r1, #12136	; 0x2f68
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f001 f853 	bl	8009dc2 <_ZdlPvj>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <_ZN4Deus6HFTaskEv>:


void Deus::HFTask() {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
	//M_Ctrl.HighFreqTask();
	//Bench();
//	myGPIO0.Toggle();
//	myGPIO1.Toggle();
	myGPIO2.Toggle();
 8008d30:	4803      	ldr	r0, [pc, #12]	; (8008d40 <_ZN4Deus6HFTaskEv+0x18>)
 8008d32:	f000 ff87 	bl	8009c44 <_ZN8GPIOCtrl6ToggleEv>
}
 8008d36:	bf00      	nop
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	24000610 	.word	0x24000610

08008d44 <_ZN4Deus4CtrlEv>:

void Deus::Ctrl() {
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af02      	add	r7, sp, #8
 8008d4a:	6078      	str	r0, [r7, #4]

	M_Ctrl.InitSystem();
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fe feb2 	bl	8007aba <_ZN9MotorCtrl10InitSystemEv>

	M_Ctrl.InitMotorInfo();
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3304      	adds	r3, #4
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fe ffba 	bl	8007cd4 <_ZN9MotorCtrl13InitMotorInfoEv>
	M_Ctrl.InitObserver();
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7ff f923 	bl	8007fb0 <_ZN9MotorCtrl12InitObserverEv>
	M_Ctrl.InitPWM();
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe feae 	bl	8007ad0 <_ZN9MotorCtrl7InitPWMEv>
	while(1){
		HAL_Delay(100);
 8008d74:	2064      	movs	r0, #100	; 0x64
 8008d76:	f7f7 fcc5 	bl	8000704 <HAL_Delay>
		int adc_u = ADC3 -> JDR1;
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <_ZN4Deus4CtrlEv+0x60>)
 8008d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d80:	617b      	str	r3, [r7, #20]
		int adc_v = ADC3 -> JDR2;
 8008d82:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <_ZN4Deus4CtrlEv+0x60>)
 8008d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d88:	613b      	str	r3, [r7, #16]
		int adc_w = ADC3 -> JDR3;
 8008d8a:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <_ZN4Deus4CtrlEv+0x60>)
 8008d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d90:	60fb      	str	r3, [r7, #12]
		SEGGER_RTT_printf(0, "adcVal:%d,%d,%d\n" ,adc_u, adc_v, adc_w);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	4903      	ldr	r1, [pc, #12]	; (8008da8 <_ZN4Deus4CtrlEv+0x64>)
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	f7ff ff71 	bl	8008c84 <SEGGER_RTT_printf>
	}
 8008da2:	e7e7      	b.n	8008d74 <_ZN4Deus4CtrlEv+0x30>
 8008da4:	58026000 	.word	0x58026000
 8008da8:	0800b858 	.word	0x0800b858

08008dac <_Z41__static_initialization_and_destruction_0ii>:
//		myGPIO0.Toggle();
//		myGPIO1.Toggle();
//		myGPIO2.Toggle();
//		HAL_Delay(1000);
//	}
}
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d10a      	bne.n	8008dd2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d105      	bne.n	8008dd2 <_Z41__static_initialization_and_destruction_0ii+0x26>
	GPIOCtrl myGPIO2(GPIOB, GPIO_PIN_14);
 8008dc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008dca:	4909      	ldr	r1, [pc, #36]	; (8008df0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8008dcc:	4809      	ldr	r0, [pc, #36]	; (8008df4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8008dce:	f000 fed5 	bl	8009b7c <_ZN8GPIOCtrlC1EP12GPIO_TypeDefm>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d107      	bne.n	8008de8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d102      	bne.n	8008de8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8008de2:	4804      	ldr	r0, [pc, #16]	; (8008df4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8008de4:	f000 fee6 	bl	8009bb4 <_ZN8GPIOCtrlD1Ev>
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	58020400 	.word	0x58020400
 8008df4:	24000610 	.word	0x24000610

08008df8 <_GLOBAL__sub_I_myGPIO2>:
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e00:	2001      	movs	r0, #1
 8008e02:	f7ff ffd3 	bl	8008dac <_Z41__static_initialization_and_destruction_0ii>
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <_GLOBAL__sub_D_myGPIO2>:
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e10:	2000      	movs	r0, #0
 8008e12:	f7ff ffcb 	bl	8008dac <_Z41__static_initialization_and_destruction_0ii>
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <cppWrapper>:


Deus Bosatsu;


void cppWrapper(void){
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0

	Bosatsu.Ctrl();
 8008e1c:	4802      	ldr	r0, [pc, #8]	; (8008e28 <cppWrapper+0x10>)
 8008e1e:	f7ff ff91 	bl	8008d44 <_ZN4Deus4CtrlEv>

}
 8008e22:	bf00      	nop
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	24000620 	.word	0x24000620

08008e2c <HighFreqTask>:

void HighFreqTask(void){
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
	Bosatsu.HFTask();
 8008e30:	4802      	ldr	r0, [pc, #8]	; (8008e3c <HighFreqTask+0x10>)
 8008e32:	f7ff ff79 	bl	8008d28 <_ZN4Deus6HFTaskEv>

}
 8008e36:	bf00      	nop
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	24000620 	.word	0x24000620

08008e40 <_Z41__static_initialization_and_destruction_0ii>:
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d107      	bne.n	8008e60 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d102      	bne.n	8008e60 <_Z41__static_initialization_and_destruction_0ii+0x20>
Deus Bosatsu;
 8008e5a:	4809      	ldr	r0, [pc, #36]	; (8008e80 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008e5c:	f7ff ff2a 	bl	8008cb4 <_ZN4DeusC1Ev>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d107      	bne.n	8008e76 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d102      	bne.n	8008e76 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008e70:	4803      	ldr	r0, [pc, #12]	; (8008e80 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008e72:	f7ff ff33 	bl	8008cdc <_ZN4DeusD1Ev>
}
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	24000620 	.word	0x24000620

08008e84 <_GLOBAL__sub_I_Bosatsu>:
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	f7ff ffd7 	bl	8008e40 <_Z41__static_initialization_and_destruction_0ii>
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <_GLOBAL__sub_D_Bosatsu>:
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	f7ff ffcf 	bl	8008e40 <_Z41__static_initialization_and_destruction_0ii>
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08e      	sub	sp, #56	; 0x38
 8008ea8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	605a      	str	r2, [r3, #4]
 8008eb4:	609a      	str	r2, [r3, #8]
 8008eb6:	60da      	str	r2, [r3, #12]
 8008eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008eba:	4b99      	ldr	r3, [pc, #612]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ec0:	4a97      	ldr	r2, [pc, #604]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008ec2:	f043 0304 	orr.w	r3, r3, #4
 8008ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008eca:	4b95      	ldr	r3, [pc, #596]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ed0:	f003 0304 	and.w	r3, r3, #4
 8008ed4:	623b      	str	r3, [r7, #32]
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008ed8:	4b91      	ldr	r3, [pc, #580]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ede:	4a90      	ldr	r2, [pc, #576]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008ee0:	f043 0320 	orr.w	r3, r3, #32
 8008ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008ee8:	4b8d      	ldr	r3, [pc, #564]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008eee:	f003 0320 	and.w	r3, r3, #32
 8008ef2:	61fb      	str	r3, [r7, #28]
 8008ef4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008ef6:	4b8a      	ldr	r3, [pc, #552]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008efc:	4a88      	ldr	r2, [pc, #544]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008f06:	4b86      	ldr	r3, [pc, #536]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f10:	61bb      	str	r3, [r7, #24]
 8008f12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f14:	4b82      	ldr	r3, [pc, #520]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f1a:	4a81      	ldr	r2, [pc, #516]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f1c:	f043 0301 	orr.w	r3, r3, #1
 8008f20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008f24:	4b7e      	ldr	r3, [pc, #504]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	617b      	str	r3, [r7, #20]
 8008f30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f32:	4b7b      	ldr	r3, [pc, #492]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f38:	4a79      	ldr	r2, [pc, #484]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f3a:	f043 0302 	orr.w	r3, r3, #2
 8008f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008f42:	4b77      	ldr	r3, [pc, #476]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	613b      	str	r3, [r7, #16]
 8008f4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008f50:	4b73      	ldr	r3, [pc, #460]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f56:	4a72      	ldr	r2, [pc, #456]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f58:	f043 0310 	orr.w	r3, r3, #16
 8008f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008f60:	4b6f      	ldr	r3, [pc, #444]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f66:	f003 0310 	and.w	r3, r3, #16
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f6e:	4b6c      	ldr	r3, [pc, #432]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f74:	4a6a      	ldr	r2, [pc, #424]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f76:	f043 0308 	orr.w	r3, r3, #8
 8008f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008f7e:	4b68      	ldr	r3, [pc, #416]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f84:	f003 0308 	and.w	r3, r3, #8
 8008f88:	60bb      	str	r3, [r7, #8]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008f8c:	4b64      	ldr	r3, [pc, #400]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f92:	4a63      	ldr	r2, [pc, #396]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008f9c:	4b60      	ldr	r3, [pc, #384]	; (8009120 <MX_GPIO_Init+0x27c>)
 8008f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa6:	607b      	str	r3, [r7, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8008faa:	2200      	movs	r2, #0
 8008fac:	f244 0181 	movw	r1, #16513	; 0x4081
 8008fb0:	485c      	ldr	r0, [pc, #368]	; (8009124 <MX_GPIO_Init+0x280>)
 8008fb2:	f7f8 f987 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008fbc:	485a      	ldr	r0, [pc, #360]	; (8009128 <MX_GPIO_Init+0x284>)
 8008fbe:	f7f8 f981 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2102      	movs	r1, #2
 8008fc6:	4859      	ldr	r0, [pc, #356]	; (800912c <MX_GPIO_Init+0x288>)
 8008fc8:	f7f8 f97c 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fde:	4619      	mov	r1, r3
 8008fe0:	4853      	ldr	r0, [pc, #332]	; (8009130 <MX_GPIO_Init+0x28c>)
 8008fe2:	f7f7 ffbf 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008fe6:	2332      	movs	r3, #50	; 0x32
 8008fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fea:	2302      	movs	r3, #2
 8008fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008ff6:	230b      	movs	r3, #11
 8008ff8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ffe:	4619      	mov	r1, r3
 8009000:	484b      	ldr	r0, [pc, #300]	; (8009130 <MX_GPIO_Init+0x28c>)
 8009002:	f7f7 ffaf 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009006:	2386      	movs	r3, #134	; 0x86
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800900a:	2302      	movs	r3, #2
 800900c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800900e:	2300      	movs	r3, #0
 8009010:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009012:	2300      	movs	r3, #0
 8009014:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009016:	230b      	movs	r3, #11
 8009018:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800901a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800901e:	4619      	mov	r1, r3
 8009020:	4844      	ldr	r0, [pc, #272]	; (8009134 <MX_GPIO_Init+0x290>)
 8009022:	f7f7 ff9f 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8009026:	f244 0301 	movw	r3, #16385	; 0x4001
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800902c:	2301      	movs	r3, #1
 800902e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009030:	2300      	movs	r3, #0
 8009032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009034:	2300      	movs	r3, #0
 8009036:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800903c:	4619      	mov	r1, r3
 800903e:	4839      	ldr	r0, [pc, #228]	; (8009124 <MX_GPIO_Init+0x280>)
 8009040:	f7f7 ff90 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800904a:	2302      	movs	r3, #2
 800904c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800904e:	2300      	movs	r3, #0
 8009050:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009052:	2300      	movs	r3, #0
 8009054:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009056:	230b      	movs	r3, #11
 8009058:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800905a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800905e:	4619      	mov	r1, r3
 8009060:	4830      	ldr	r0, [pc, #192]	; (8009124 <MX_GPIO_Init+0x280>)
 8009062:	f7f7 ff7f 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8009066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800906c:	2301      	movs	r3, #1
 800906e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009070:	2300      	movs	r3, #0
 8009072:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009074:	2300      	movs	r3, #0
 8009076:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8009078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800907c:	4619      	mov	r1, r3
 800907e:	482a      	ldr	r0, [pc, #168]	; (8009128 <MX_GPIO_Init+0x284>)
 8009080:	f7f7 ff70 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8009084:	2380      	movs	r3, #128	; 0x80
 8009086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009088:	4b2b      	ldr	r3, [pc, #172]	; (8009138 <MX_GPIO_Init+0x294>)
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800908c:	2300      	movs	r3, #0
 800908e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8009090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009094:	4619      	mov	r1, r3
 8009096:	4829      	ldr	r0, [pc, #164]	; (800913c <MX_GPIO_Init+0x298>)
 8009098:	f7f7 ff64 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800909c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80090a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090a2:	2302      	movs	r3, #2
 80090a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090a6:	2300      	movs	r3, #0
 80090a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090aa:	2300      	movs	r3, #0
 80090ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80090ae:	230a      	movs	r3, #10
 80090b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090b6:	4619      	mov	r1, r3
 80090b8:	481e      	ldr	r0, [pc, #120]	; (8009134 <MX_GPIO_Init+0x290>)
 80090ba:	f7f7 ff53 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80090be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090c4:	2302      	movs	r3, #2
 80090c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090c8:	2300      	movs	r3, #0
 80090ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090cc:	2300      	movs	r3, #0
 80090ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80090d0:	230b      	movs	r3, #11
 80090d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80090d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090d8:	4619      	mov	r1, r3
 80090da:	4818      	ldr	r0, [pc, #96]	; (800913c <MX_GPIO_Init+0x298>)
 80090dc:	f7f7 ff42 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80090e0:	2380      	movs	r3, #128	; 0x80
 80090e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090e4:	2301      	movs	r3, #1
 80090e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090e8:	2300      	movs	r3, #0
 80090ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090ec:	2303      	movs	r3, #3
 80090ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090f4:	4619      	mov	r1, r3
 80090f6:	480b      	ldr	r0, [pc, #44]	; (8009124 <MX_GPIO_Init+0x280>)
 80090f8:	f7f7 ff34 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80090fc:	2302      	movs	r3, #2
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009100:	2301      	movs	r3, #1
 8009102:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009104:	2300      	movs	r3, #0
 8009106:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009108:	2300      	movs	r3, #0
 800910a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800910c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009110:	4619      	mov	r1, r3
 8009112:	4806      	ldr	r0, [pc, #24]	; (800912c <MX_GPIO_Init+0x288>)
 8009114:	f7f7 ff26 	bl	8000f64 <HAL_GPIO_Init>

}
 8009118:	bf00      	nop
 800911a:	3738      	adds	r7, #56	; 0x38
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	58024400 	.word	0x58024400
 8009124:	58020400 	.word	0x58020400
 8009128:	58020c00 	.word	0x58020c00
 800912c:	58021000 	.word	0x58021000
 8009130:	58020800 	.word	0x58020800
 8009134:	58020000 	.word	0x58020000
 8009138:	11110000 	.word	0x11110000
 800913c:	58021800 	.word	0x58021800

08009140 <SCB_EnableICache>:
{
 8009140:	b480      	push	{r7}
 8009142:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009148:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800914c:	4b0b      	ldr	r3, [pc, #44]	; (800917c <SCB_EnableICache+0x3c>)
 800914e:	2200      	movs	r2, #0
 8009150:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009154:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009158:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800915c:	4b07      	ldr	r3, [pc, #28]	; (800917c <SCB_EnableICache+0x3c>)
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	4a06      	ldr	r2, [pc, #24]	; (800917c <SCB_EnableICache+0x3c>)
 8009162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009166:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009168:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800916c:	f3bf 8f6f 	isb	sy
}
 8009170:	bf00      	nop
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	e000ed00 	.word	0xe000ed00

08009180 <SCB_EnableDCache>:
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8009186:	4b1d      	ldr	r3, [pc, #116]	; (80091fc <SCB_EnableDCache+0x7c>)
 8009188:	2200      	movs	r2, #0
 800918a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800918e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8009192:	4b1a      	ldr	r3, [pc, #104]	; (80091fc <SCB_EnableDCache+0x7c>)
 8009194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009198:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	0b5b      	lsrs	r3, r3, #13
 800919e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80091a2:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	08db      	lsrs	r3, r3, #3
 80091a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091ac:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80091b6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80091bc:	490f      	ldr	r1, [pc, #60]	; (80091fc <SCB_EnableDCache+0x7c>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	1e5a      	subs	r2, r3, #1
 80091c8:	60ba      	str	r2, [r7, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1ef      	bne.n	80091ae <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	1e5a      	subs	r2, r3, #1
 80091d2:	60fa      	str	r2, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e5      	bne.n	80091a4 <SCB_EnableDCache+0x24>
 80091d8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80091dc:	4b07      	ldr	r3, [pc, #28]	; (80091fc <SCB_EnableDCache+0x7c>)
 80091de:	695b      	ldr	r3, [r3, #20]
 80091e0:	4a06      	ldr	r2, [pc, #24]	; (80091fc <SCB_EnableDCache+0x7c>)
 80091e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091e6:	6153      	str	r3, [r2, #20]
 80091e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80091ec:	f3bf 8f6f 	isb	sy
}
 80091f0:	bf00      	nop
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	e000ed00 	.word	0xe000ed00

08009200 <ADCInit>:
  */

#include "stm32h7xx_hal_def.h"
#include "stm32h7xx_ll_adc.h"

void ADCInit(void) {
 8009200:	b480      	push	{r7}
 8009202:	af00      	add	r7, sp, #0
	RCC->AHB4ENR |= ( 0x1UL << 24UL );	//ADC3RST
 8009204:	4b30      	ldr	r3, [pc, #192]	; (80092c8 <ADCInit+0xc8>)
 8009206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800920a:	4a2f      	ldr	r2, [pc, #188]	; (80092c8 <ADCInit+0xc8>)
 800920c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	RCC->AHB4ENR |= ( 0x1UL << 5UL ); //GPIOFEN //RCC_AHB4ENR_GPIOFEN);
 8009214:	4b2c      	ldr	r3, [pc, #176]	; (80092c8 <ADCInit+0xc8>)
 8009216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800921a:	4a2b      	ldr	r2, [pc, #172]	; (80092c8 <ADCInit+0xc8>)
 800921c:	f043 0320 	orr.w	r3, r3, #32
 8009220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	RCC->AHB4ENR |= ( 0x1UL << 2UL ); //GPIOFEN
 8009224:	4b28      	ldr	r3, [pc, #160]	; (80092c8 <ADCInit+0xc8>)
 8009226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800922a:	4a27      	ldr	r2, [pc, #156]	; (80092c8 <ADCInit+0xc8>)
 800922c:	f043 0304 	orr.w	r3, r3, #4
 8009230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	ADC3 -> CR &= ~( 0x1UL << 29UL );//DEEPPWD
 8009234:	4b25      	ldr	r3, [pc, #148]	; (80092cc <ADCInit+0xcc>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	4a24      	ldr	r2, [pc, #144]	; (80092cc <ADCInit+0xcc>)
 800923a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800923e:	6093      	str	r3, [r2, #8]

	ADC3 -> CR |= ( 0x1UL << 28UL ); //ADVREGEN
 8009240:	4b22      	ldr	r3, [pc, #136]	; (80092cc <ADCInit+0xcc>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	4a21      	ldr	r2, [pc, #132]	; (80092cc <ADCInit+0xcc>)
 8009246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800924a:	6093      	str	r3, [r2, #8]
	ADC3 -> CR |= ( 0x1UL << 8UL ); //BOOST
 800924c:	4b1f      	ldr	r3, [pc, #124]	; (80092cc <ADCInit+0xcc>)
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	4a1e      	ldr	r2, [pc, #120]	; (80092cc <ADCInit+0xcc>)
 8009252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009256:	6093      	str	r3, [r2, #8]

	ADC3 -> CFGR |= ( 0x1UL << 31UL ); //JQDIS
 8009258:	4b1c      	ldr	r3, [pc, #112]	; (80092cc <ADCInit+0xcc>)
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	4a1b      	ldr	r2, [pc, #108]	; (80092cc <ADCInit+0xcc>)
 800925e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009262:	60d3      	str	r3, [r2, #12]

	ADC3 -> JSQR |= ( 0x0UL << 27UL ); //JSQ4
 8009264:	4b19      	ldr	r3, [pc, #100]	; (80092cc <ADCInit+0xcc>)
 8009266:	4a19      	ldr	r2, [pc, #100]	; (80092cc <ADCInit+0xcc>)
 8009268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800926a:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC3 -> JSQR |= ( 0x6UL << 21UL ); //JSQ3
 800926c:	4b17      	ldr	r3, [pc, #92]	; (80092cc <ADCInit+0xcc>)
 800926e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009270:	4a16      	ldr	r2, [pc, #88]	; (80092cc <ADCInit+0xcc>)
 8009272:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8009276:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC3 -> JSQR |= ( 0x0UL << 15UL ); //JSQ2
 8009278:	4b14      	ldr	r3, [pc, #80]	; (80092cc <ADCInit+0xcc>)
 800927a:	4a14      	ldr	r2, [pc, #80]	; (80092cc <ADCInit+0xcc>)
 800927c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800927e:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC3 -> JSQR |= ( 0x1UL << 9UL ); 	//JSQ1
 8009280:	4b12      	ldr	r3, [pc, #72]	; (80092cc <ADCInit+0xcc>)
 8009282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009284:	4a11      	ldr	r2, [pc, #68]	; (80092cc <ADCInit+0xcc>)
 8009286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800928a:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC3 -> JSQR |= ( 0x1UL << 7UL ); 	//JEXTEN
 800928c:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <ADCInit+0xcc>)
 800928e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009290:	4a0e      	ldr	r2, [pc, #56]	; (80092cc <ADCInit+0xcc>)
 8009292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009296:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC3 -> JSQR |= ( 0x1UL << 2UL ); 	//JEXTSEL
 8009298:	4b0c      	ldr	r3, [pc, #48]	; (80092cc <ADCInit+0xcc>)
 800929a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800929c:	4a0b      	ldr	r2, [pc, #44]	; (80092cc <ADCInit+0xcc>)
 800929e:	f043 0304 	orr.w	r3, r3, #4
 80092a2:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC3 -> JSQR |= ( 0x2UL ); 				//JL
 80092a4:	4b09      	ldr	r3, [pc, #36]	; (80092cc <ADCInit+0xcc>)
 80092a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092a8:	4a08      	ldr	r2, [pc, #32]	; (80092cc <ADCInit+0xcc>)
 80092aa:	f043 0302 	orr.w	r3, r3, #2
 80092ae:	64d3      	str	r3, [r2, #76]	; 0x4c

	ADC3 -> PCSEL |= 0x43;
 80092b0:	4b06      	ldr	r3, [pc, #24]	; (80092cc <ADCInit+0xcc>)
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	4a05      	ldr	r2, [pc, #20]	; (80092cc <ADCInit+0xcc>)
 80092b6:	f043 0343 	orr.w	r3, r3, #67	; 0x43
 80092ba:	61d3      	str	r3, [r2, #28]
	//以下はRCCの設定で勝手になる
	//ADC3 -> LHTR1 |= 0x3ffffff;
	//ADC3 -> LHTR2 |= 0x3ffffff;
	//ADC3 -> LHTR3 |= 0x3ffffff;
	//0915 HAL_ADC_MspInit 107まで再現
}
 80092bc:	bf00      	nop
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	58024400 	.word	0x58024400
 80092cc:	58026000 	.word	0x58026000

080092d0 <ADCStart>:

void ADCStart() {
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
	ADC3 -> CR |= ( 0x1UL ); //ADEN
 80092d6:	4b0f      	ldr	r3, [pc, #60]	; (8009314 <ADCStart+0x44>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	4a0e      	ldr	r2, [pc, #56]	; (8009314 <ADCStart+0x44>)
 80092dc:	f043 0301 	orr.w	r3, r3, #1
 80092e0:	6093      	str	r3, [r2, #8]

	int i=0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	607b      	str	r3, [r7, #4]
	while(	!( (ADC3 -> ISR) && 0x1 ) ){
 80092e6:	e003      	b.n	80092f0 <ADCStart+0x20>
		//ADRDYの立ち上がりを確認する
		asm("NOP");
 80092e8:	bf00      	nop
		i++; //ADC立ち上がりタイミングデバッグ用
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	3301      	adds	r3, #1
 80092ee:	607b      	str	r3, [r7, #4]
	while(	!( (ADC3 -> ISR) && 0x1 ) ){
 80092f0:	4b08      	ldr	r3, [pc, #32]	; (8009314 <ADCStart+0x44>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0f7      	beq.n	80092e8 <ADCStart+0x18>
	}
	asm("NOP");
 80092f8:	bf00      	nop

//	ADC3 -> ISR |= ( 0x1UL << 3UL ); //EOS
//	ADC3 -> ISR |= ( 0x1UL << 3UL ); //EOC
//	ADC3 -> ISR |= ( 0x1UL << 1UL ); //EOSMP

	ADC3 -> CR |= ( 0x1UL << 3UL ); //JADSTART
 80092fa:	4b06      	ldr	r3, [pc, #24]	; (8009314 <ADCStart+0x44>)
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	4a05      	ldr	r2, [pc, #20]	; (8009314 <ADCStart+0x44>)
 8009300:	f043 0308 	orr.w	r3, r3, #8
 8009304:	6093      	str	r3, [r2, #8]

}
 8009306:	bf00      	nop
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	58026000 	.word	0x58026000

08009318 <main>:
		asm("NOP");
	}
}

int main(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800931c:	f7ff ff10 	bl	8009140 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8009320:	f7ff ff2e 	bl	8009180 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009324:	f7f7 f960 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009328:	f000 f80e 	bl	8009348 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800932c:	f7ff fdba 	bl	8008ea4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8009330:	f000 fb64 	bl	80099fc <MX_USART3_UART_Init>
 // MX_ADC3_Init();
  ADCInit();
 8009334:	f7ff ff64 	bl	8009200 <ADCInit>
  MX_TIM1_Init();
 8009338:	f000 f9fa 	bl	8009730 <MX_TIM1_Init>
  ADCStart();
 800933c:	f7ff ffc8 	bl	80092d0 <ADCStart>
  /* USER CODE BEGIN 2 */
cppWrapper();
 8009340:	f7ff fd6a 	bl	8008e18 <cppWrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009344:	e7fe      	b.n	8009344 <main+0x2c>
	...

08009348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b0cc      	sub	sp, #304	; 0x130
 800934c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800934e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009352:	224c      	movs	r2, #76	; 0x4c
 8009354:	2100      	movs	r1, #0
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fd7d 	bl	8009e56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800935c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009360:	2220      	movs	r2, #32
 8009362:	2100      	movs	r1, #0
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fd76 	bl	8009e56 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800936a:	f107 0308 	add.w	r3, r7, #8
 800936e:	4618      	mov	r0, r3
 8009370:	23bc      	movs	r3, #188	; 0xbc
 8009372:	461a      	mov	r2, r3
 8009374:	2100      	movs	r1, #0
 8009376:	f000 fd6e 	bl	8009e56 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800937a:	2002      	movs	r0, #2
 800937c:	f7f7 ffbc 	bl	80012f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009380:	1d3b      	adds	r3, r7, #4
 8009382:	2200      	movs	r2, #0
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	4b5d      	ldr	r3, [pc, #372]	; (80094fc <SystemClock_Config+0x1b4>)
 8009388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938a:	4a5c      	ldr	r2, [pc, #368]	; (80094fc <SystemClock_Config+0x1b4>)
 800938c:	f023 0301 	bic.w	r3, r3, #1
 8009390:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009392:	4b5a      	ldr	r3, [pc, #360]	; (80094fc <SystemClock_Config+0x1b4>)
 8009394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009396:	f003 0201 	and.w	r2, r3, #1
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	4b58      	ldr	r3, [pc, #352]	; (8009500 <SystemClock_Config+0x1b8>)
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	4a57      	ldr	r2, [pc, #348]	; (8009500 <SystemClock_Config+0x1b8>)
 80093a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093a8:	6193      	str	r3, [r2, #24]
 80093aa:	4b55      	ldr	r3, [pc, #340]	; (8009500 <SystemClock_Config+0x1b8>)
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80093b2:	1d3b      	adds	r3, r7, #4
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	1d3b      	adds	r3, r7, #4
 80093b8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80093ba:	bf00      	nop
 80093bc:	4b50      	ldr	r3, [pc, #320]	; (8009500 <SystemClock_Config+0x1b8>)
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093c8:	d1f8      	bne.n	80093bc <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80093ca:	4b4e      	ldr	r3, [pc, #312]	; (8009504 <SystemClock_Config+0x1bc>)
 80093cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ce:	4a4d      	ldr	r2, [pc, #308]	; (8009504 <SystemClock_Config+0x1bc>)
 80093d0:	f023 0303 	bic.w	r3, r3, #3
 80093d4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80093d6:	2302      	movs	r3, #2
 80093d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80093dc:	2301      	movs	r3, #1
 80093de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80093e2:	2320      	movs	r3, #32
 80093e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80093e8:	2302      	movs	r3, #2
 80093ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80093ee:	2300      	movs	r3, #0
 80093f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80093f4:	2304      	movs	r3, #4
 80093f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 50;
 80093fa:	2332      	movs	r3, #50	; 0x32
 80093fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8009400:	2302      	movs	r3, #2
 8009402:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009406:	2304      	movs	r3, #4
 8009408:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800940c:	2302      	movs	r3, #2
 800940e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8009412:	230c      	movs	r3, #12
 8009414:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8009418:	2300      	movs	r3, #0
 800941a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009424:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009428:	4618      	mov	r0, r3
 800942a:	f7f7 ff9d 	bl	8001368 <HAL_RCC_OscConfig>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8009434:	f000 f86a 	bl	800950c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009438:	233f      	movs	r3, #63	; 0x3f
 800943a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800943e:	2303      	movs	r3, #3
 8009440:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8009444:	2300      	movs	r3, #0
 8009446:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800944a:	2308      	movs	r3, #8
 800944c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8009450:	2340      	movs	r3, #64	; 0x40
 8009452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8009456:	2340      	movs	r3, #64	; 0x40
 8009458:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800945c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009460:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8009464:	2340      	movs	r3, #64	; 0x40
 8009466:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800946a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800946e:	2102      	movs	r1, #2
 8009470:	4618      	mov	r0, r3
 8009472:	f7f8 fb31 	bl	8001ad8 <HAL_RCC_ClockConfig>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <SystemClock_Config+0x138>
  {
    Error_Handler();
 800947c:	f000 f846 	bl	800950c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC;
 8009480:	f107 0308 	add.w	r3, r7, #8
 8009484:	4a20      	ldr	r2, [pc, #128]	; (8009508 <SystemClock_Config+0x1c0>)
 8009486:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8009488:	f107 0308 	add.w	r3, r7, #8
 800948c:	2204      	movs	r2, #4
 800948e:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8009490:	f107 0308 	add.w	r3, r7, #8
 8009494:	2209      	movs	r2, #9
 8009496:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8009498:	f107 0308 	add.w	r3, r7, #8
 800949c:	2201      	movs	r2, #1
 800949e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80094a0:	f107 0308 	add.w	r3, r7, #8
 80094a4:	2202      	movs	r2, #2
 80094a6:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80094a8:	f107 0308 	add.w	r3, r7, #8
 80094ac:	2202      	movs	r2, #2
 80094ae:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80094b0:	f107 0308 	add.w	r3, r7, #8
 80094b4:	22c0      	movs	r2, #192	; 0xc0
 80094b6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80094b8:	f107 0308 	add.w	r3, r7, #8
 80094bc:	2220      	movs	r2, #32
 80094be:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80094c0:	f107 0308 	add.w	r3, r7, #8
 80094c4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80094c8:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80094ca:	f107 0308 	add.w	r3, r7, #8
 80094ce:	2200      	movs	r2, #0
 80094d0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80094d2:	f107 0308 	add.w	r3, r7, #8
 80094d6:	2200      	movs	r2, #0
 80094d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80094dc:	f107 0308 	add.w	r3, r7, #8
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7f8 fe53 	bl	800218c <HAL_RCCEx_PeriphCLKConfig>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <SystemClock_Config+0x1a8>
  {
    Error_Handler();
 80094ec:	f000 f80e 	bl	800950c <Error_Handler>
  }
}
 80094f0:	bf00      	nop
 80094f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	58000400 	.word	0x58000400
 8009500:	58024800 	.word	0x58024800
 8009504:	58024400 	.word	0x58024400
 8009508:	00080002 	.word	0x00080002

0800950c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800950c:	b480      	push	{r7}
 800950e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009510:	bf00      	nop
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
	...

0800951c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009522:	4b0a      	ldr	r3, [pc, #40]	; (800954c <HAL_MspInit+0x30>)
 8009524:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009528:	4a08      	ldr	r2, [pc, #32]	; (800954c <HAL_MspInit+0x30>)
 800952a:	f043 0302 	orr.w	r3, r3, #2
 800952e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009532:	4b06      	ldr	r3, [pc, #24]	; (800954c <HAL_MspInit+0x30>)
 8009534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	607b      	str	r3, [r7, #4]
 800953e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	58024400 	.word	0x58024400

08009550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009550:	b480      	push	{r7}
 8009552:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009554:	bf00      	nop
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800955e:	b480      	push	{r7}
 8009560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009562:	e7fe      	b.n	8009562 <HardFault_Handler+0x4>

08009564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009564:	b480      	push	{r7}
 8009566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009568:	e7fe      	b.n	8009568 <MemManage_Handler+0x4>

0800956a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800956a:	b480      	push	{r7}
 800956c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800956e:	e7fe      	b.n	800956e <BusFault_Handler+0x4>

08009570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009574:	e7fe      	b.n	8009574 <UsageFault_Handler+0x4>

08009576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009576:	b480      	push	{r7}
 8009578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800957a:	bf00      	nop
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009584:	b480      	push	{r7}
 8009586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009588:	bf00      	nop
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009592:	b480      	push	{r7}
 8009594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009596:	bf00      	nop
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80095a4:	f7f7 f88e 	bl	80006c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80095a8:	bf00      	nop
 80095aa:	bd80      	pop	{r7, pc}

080095ac <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80095b0:	4802      	ldr	r0, [pc, #8]	; (80095bc <TIM1_BRK_IRQHandler+0x10>)
 80095b2:	f7fa f9ed 	bl	8003990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80095b6:	bf00      	nop
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	240036a0 	.word	0x240036a0

080095c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	HighFreqTask();
 80095c4:	f7ff fc32 	bl	8008e2c <HighFreqTask>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80095c8:	4802      	ldr	r0, [pc, #8]	; (80095d4 <TIM1_UP_IRQHandler+0x14>)
 80095ca:	f7fa f9e1 	bl	8003990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80095ce:	bf00      	nop
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	240036a0 	.word	0x240036a0

080095d8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80095dc:	4802      	ldr	r0, [pc, #8]	; (80095e8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80095de:	f7fa f9d7 	bl	8003990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80095e2:	bf00      	nop
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	240036a0 	.word	0x240036a0

080095ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80095f0:	4802      	ldr	r0, [pc, #8]	; (80095fc <TIM1_CC_IRQHandler+0x10>)
 80095f2:	f7fa f9cd 	bl	8003990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80095f6:	bf00      	nop
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	240036a0 	.word	0x240036a0

08009600 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
//		//HAL_ADC_IRQHandler(&hadc3);
//	} else {
//	}
	//HAL_ADC
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8009604:	4802      	ldr	r0, [pc, #8]	; (8009610 <ADC3_IRQHandler+0x10>)
 8009606:	f7f7 f913 	bl	8000830 <HAL_ADC_IRQHandler>
	//ADC3 -> CFGR  |= ADC_REG_CFGR_JDISCEN; // ADC Inject Group Enable

  //ADC3 -> ISR |= 0x4;

  /* USER CODE BEGIN ADC3_IRQn 1 */
  asm("NOP");
 800960a:	bf00      	nop
  /* USER CODE END ADC3_IRQn 1 */
}
 800960c:	bf00      	nop
 800960e:	bd80      	pop	{r7, pc}
 8009610:	2400363c 	.word	0x2400363c

08009614 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800961c:	4b11      	ldr	r3, [pc, #68]	; (8009664 <_sbrk+0x50>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d102      	bne.n	800962a <_sbrk+0x16>
		heap_end = &end;
 8009624:	4b0f      	ldr	r3, [pc, #60]	; (8009664 <_sbrk+0x50>)
 8009626:	4a10      	ldr	r2, [pc, #64]	; (8009668 <_sbrk+0x54>)
 8009628:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800962a:	4b0e      	ldr	r3, [pc, #56]	; (8009664 <_sbrk+0x50>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009630:	4b0c      	ldr	r3, [pc, #48]	; (8009664 <_sbrk+0x50>)
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4413      	add	r3, r2
 8009638:	466a      	mov	r2, sp
 800963a:	4293      	cmp	r3, r2
 800963c:	d907      	bls.n	800964e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800963e:	f000 fbc5 	bl	8009dcc <__errno>
 8009642:	4602      	mov	r2, r0
 8009644:	230c      	movs	r3, #12
 8009646:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009648:	f04f 33ff 	mov.w	r3, #4294967295
 800964c:	e006      	b.n	800965c <_sbrk+0x48>
	}

	heap_end += incr;
 800964e:	4b05      	ldr	r3, [pc, #20]	; (8009664 <_sbrk+0x50>)
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4413      	add	r3, r2
 8009656:	4a03      	ldr	r2, [pc, #12]	; (8009664 <_sbrk+0x50>)
 8009658:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800965a:	68fb      	ldr	r3, [r7, #12]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	24003588 	.word	0x24003588
 8009668:	24003770 	.word	0x24003770

0800966c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800966c:	b480      	push	{r7}
 800966e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009670:	4b29      	ldr	r3, [pc, #164]	; (8009718 <SystemInit+0xac>)
 8009672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009676:	4a28      	ldr	r2, [pc, #160]	; (8009718 <SystemInit+0xac>)
 8009678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800967c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009680:	4b26      	ldr	r3, [pc, #152]	; (800971c <SystemInit+0xb0>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a25      	ldr	r2, [pc, #148]	; (800971c <SystemInit+0xb0>)
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800968c:	4b23      	ldr	r3, [pc, #140]	; (800971c <SystemInit+0xb0>)
 800968e:	2200      	movs	r2, #0
 8009690:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009692:	4b22      	ldr	r3, [pc, #136]	; (800971c <SystemInit+0xb0>)
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	4921      	ldr	r1, [pc, #132]	; (800971c <SystemInit+0xb0>)
 8009698:	4b21      	ldr	r3, [pc, #132]	; (8009720 <SystemInit+0xb4>)
 800969a:	4013      	ands	r3, r2
 800969c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800969e:	4b1f      	ldr	r3, [pc, #124]	; (800971c <SystemInit+0xb0>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80096a4:	4b1d      	ldr	r3, [pc, #116]	; (800971c <SystemInit+0xb0>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80096aa:	4b1c      	ldr	r3, [pc, #112]	; (800971c <SystemInit+0xb0>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80096b0:	4b1a      	ldr	r3, [pc, #104]	; (800971c <SystemInit+0xb0>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80096b6:	4b19      	ldr	r3, [pc, #100]	; (800971c <SystemInit+0xb0>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80096bc:	4b17      	ldr	r3, [pc, #92]	; (800971c <SystemInit+0xb0>)
 80096be:	2200      	movs	r2, #0
 80096c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80096c2:	4b16      	ldr	r3, [pc, #88]	; (800971c <SystemInit+0xb0>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80096c8:	4b14      	ldr	r3, [pc, #80]	; (800971c <SystemInit+0xb0>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80096ce:	4b13      	ldr	r3, [pc, #76]	; (800971c <SystemInit+0xb0>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80096d4:	4b11      	ldr	r3, [pc, #68]	; (800971c <SystemInit+0xb0>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80096da:	4b10      	ldr	r3, [pc, #64]	; (800971c <SystemInit+0xb0>)
 80096dc:	2200      	movs	r2, #0
 80096de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80096e0:	4b0e      	ldr	r3, [pc, #56]	; (800971c <SystemInit+0xb0>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a0d      	ldr	r2, [pc, #52]	; (800971c <SystemInit+0xb0>)
 80096e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80096ec:	4b0b      	ldr	r3, [pc, #44]	; (800971c <SystemInit+0xb0>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80096f2:	4b0c      	ldr	r3, [pc, #48]	; (8009724 <SystemInit+0xb8>)
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <SystemInit+0xbc>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096fe:	d202      	bcs.n	8009706 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009700:	4b0a      	ldr	r3, [pc, #40]	; (800972c <SystemInit+0xc0>)
 8009702:	2201      	movs	r2, #1
 8009704:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009706:	4b04      	ldr	r3, [pc, #16]	; (8009718 <SystemInit+0xac>)
 8009708:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800970c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800970e:	bf00      	nop
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	e000ed00 	.word	0xe000ed00
 800971c:	58024400 	.word	0x58024400
 8009720:	eaf6ed7f 	.word	0xeaf6ed7f
 8009724:	5c001000 	.word	0x5c001000
 8009728:	ffff0000 	.word	0xffff0000
 800972c:	51008108 	.word	0x51008108

08009730 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b09e      	sub	sp, #120	; 0x78
 8009734:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009736:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800973a:	2200      	movs	r2, #0
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	605a      	str	r2, [r3, #4]
 8009740:	609a      	str	r2, [r3, #8]
 8009742:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8009744:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009748:	2200      	movs	r2, #0
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	605a      	str	r2, [r3, #4]
 800974e:	609a      	str	r2, [r3, #8]
 8009750:	60da      	str	r2, [r3, #12]
 8009752:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009754:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009758:	2200      	movs	r2, #0
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	605a      	str	r2, [r3, #4]
 800975e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009764:	2200      	movs	r2, #0
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	605a      	str	r2, [r3, #4]
 800976a:	609a      	str	r2, [r3, #8]
 800976c:	60da      	str	r2, [r3, #12]
 800976e:	611a      	str	r2, [r3, #16]
 8009770:	615a      	str	r2, [r3, #20]
 8009772:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009774:	463b      	mov	r3, r7
 8009776:	222c      	movs	r2, #44	; 0x2c
 8009778:	2100      	movs	r1, #0
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fb6b 	bl	8009e56 <memset>

  htim1.Instance = TIM1;
 8009780:	4b5e      	ldr	r3, [pc, #376]	; (80098fc <MX_TIM1_Init+0x1cc>)
 8009782:	4a5f      	ldr	r2, [pc, #380]	; (8009900 <MX_TIM1_Init+0x1d0>)
 8009784:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000;
 8009786:	4b5d      	ldr	r3, [pc, #372]	; (80098fc <MX_TIM1_Init+0x1cc>)
 8009788:	f64e 2260 	movw	r2, #60000	; 0xea60
 800978c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800978e:	4b5b      	ldr	r3, [pc, #364]	; (80098fc <MX_TIM1_Init+0x1cc>)
 8009790:	2200      	movs	r2, #0
 8009792:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD_COUNT;
 8009794:	4b59      	ldr	r3, [pc, #356]	; (80098fc <MX_TIM1_Init+0x1cc>)
 8009796:	f242 7210 	movw	r2, #10000	; 0x2710
 800979a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800979c:	4b57      	ldr	r3, [pc, #348]	; (80098fc <MX_TIM1_Init+0x1cc>)
 800979e:	2200      	movs	r2, #0
 80097a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80097a2:	4b56      	ldr	r3, [pc, #344]	; (80098fc <MX_TIM1_Init+0x1cc>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80097a8:	4b54      	ldr	r3, [pc, #336]	; (80098fc <MX_TIM1_Init+0x1cc>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80097ae:	4853      	ldr	r0, [pc, #332]	; (80098fc <MX_TIM1_Init+0x1cc>)
 80097b0:	f7fa f80a 	bl	80037c8 <HAL_TIM_Base_Init>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80097ba:	f7ff fea7 	bl	800950c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80097be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097c2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80097c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80097c8:	4619      	mov	r1, r3
 80097ca:	484c      	ldr	r0, [pc, #304]	; (80098fc <MX_TIM1_Init+0x1cc>)
 80097cc:	f7fa fb18 	bl	8003e00 <HAL_TIM_ConfigClockSource>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d001      	beq.n	80097da <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80097d6:	f7ff fe99 	bl	800950c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80097da:	4848      	ldr	r0, [pc, #288]	; (80098fc <MX_TIM1_Init+0x1cc>)
 80097dc:	f7fa f84a 	bl	8003874 <HAL_TIM_PWM_Init>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80097e6:	f7ff fe91 	bl	800950c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80097ea:	2300      	movs	r3, #0
 80097ec:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80097f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80097f6:	4619      	mov	r1, r3
 80097f8:	4840      	ldr	r0, [pc, #256]	; (80098fc <MX_TIM1_Init+0x1cc>)
 80097fa:	f7fa fbd1 	bl	8003fa0 <HAL_TIM_SlaveConfigSynchro>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8009804:	f7ff fe82 	bl	800950c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009808:	2300      	movs	r3, #0
 800980a:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800980c:	2300      	movs	r3, #0
 800980e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009810:	2300      	movs	r3, #0
 8009812:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009814:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009818:	4619      	mov	r1, r3
 800981a:	4838      	ldr	r0, [pc, #224]	; (80098fc <MX_TIM1_Init+0x1cc>)
 800981c:	f7fb f904 	bl	8004a28 <HAL_TIMEx_MasterConfigSynchronization>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8009826:	f7ff fe71 	bl	800950c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800982a:	2360      	movs	r3, #96	; 0x60
 800982c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800982e:	2300      	movs	r3, #0
 8009830:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009832:	2300      	movs	r3, #0
 8009834:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009836:	2300      	movs	r3, #0
 8009838:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800983a:	2300      	movs	r3, #0
 800983c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800983e:	2300      	movs	r3, #0
 8009840:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009842:	2300      	movs	r3, #0
 8009844:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800984a:	2200      	movs	r2, #0
 800984c:	4619      	mov	r1, r3
 800984e:	482b      	ldr	r0, [pc, #172]	; (80098fc <MX_TIM1_Init+0x1cc>)
 8009850:	f7fa f9be 	bl	8003bd0 <HAL_TIM_PWM_ConfigChannel>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800985a:	f7ff fe57 	bl	800950c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800985e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009862:	2204      	movs	r2, #4
 8009864:	4619      	mov	r1, r3
 8009866:	4825      	ldr	r0, [pc, #148]	; (80098fc <MX_TIM1_Init+0x1cc>)
 8009868:	f7fa f9b2 	bl	8003bd0 <HAL_TIM_PWM_ConfigChannel>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8009872:	f7ff fe4b 	bl	800950c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800987a:	2208      	movs	r2, #8
 800987c:	4619      	mov	r1, r3
 800987e:	481f      	ldr	r0, [pc, #124]	; (80098fc <MX_TIM1_Init+0x1cc>)
 8009880:	f7fa f9a6 	bl	8003bd0 <HAL_TIM_PWM_ConfigChannel>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 800988a:	f7ff fe3f 	bl	800950c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800988e:	2370      	movs	r3, #112	; 0x70
 8009890:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009896:	220c      	movs	r2, #12
 8009898:	4619      	mov	r1, r3
 800989a:	4818      	ldr	r0, [pc, #96]	; (80098fc <MX_TIM1_Init+0x1cc>)
 800989c:	f7fa f998 	bl	8003bd0 <HAL_TIM_PWM_ConfigChannel>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80098a6:	f7ff fe31 	bl	800950c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80098aa:	2300      	movs	r3, #0
 80098ac:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80098ae:	2300      	movs	r3, #0
 80098b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80098b2:	2300      	movs	r3, #0
 80098b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80098ba:	2300      	movs	r3, #0
 80098bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80098be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80098c8:	2300      	movs	r3, #0
 80098ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80098cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80098d2:	2300      	movs	r3, #0
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80098d6:	2300      	movs	r3, #0
 80098d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80098da:	463b      	mov	r3, r7
 80098dc:	4619      	mov	r1, r3
 80098de:	4807      	ldr	r0, [pc, #28]	; (80098fc <MX_TIM1_Init+0x1cc>)
 80098e0:	f7fb f8fe 	bl	8004ae0 <HAL_TIMEx_ConfigBreakDeadTime>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <MX_TIM1_Init+0x1be>
  {
    Error_Handler();
 80098ea:	f7ff fe0f 	bl	800950c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80098ee:	4803      	ldr	r0, [pc, #12]	; (80098fc <MX_TIM1_Init+0x1cc>)
 80098f0:	f000 f848 	bl	8009984 <HAL_TIM_MspPostInit>

}
 80098f4:	bf00      	nop
 80098f6:	3778      	adds	r7, #120	; 0x78
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	240036a0 	.word	0x240036a0
 8009900:	40010000 	.word	0x40010000

08009904 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a1a      	ldr	r2, [pc, #104]	; (800997c <HAL_TIM_Base_MspInit+0x78>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d12e      	bne.n	8009974 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009916:	4b1a      	ldr	r3, [pc, #104]	; (8009980 <HAL_TIM_Base_MspInit+0x7c>)
 8009918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800991c:	4a18      	ldr	r2, [pc, #96]	; (8009980 <HAL_TIM_Base_MspInit+0x7c>)
 800991e:	f043 0301 	orr.w	r3, r3, #1
 8009922:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009926:	4b16      	ldr	r3, [pc, #88]	; (8009980 <HAL_TIM_Base_MspInit+0x7c>)
 8009928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8009934:	2200      	movs	r2, #0
 8009936:	2100      	movs	r1, #0
 8009938:	2018      	movs	r0, #24
 800993a:	f7f7 fade 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800993e:	2018      	movs	r0, #24
 8009940:	f7f7 faf5 	bl	8000f2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8009944:	2200      	movs	r2, #0
 8009946:	2100      	movs	r1, #0
 8009948:	2019      	movs	r0, #25
 800994a:	f7f7 fad6 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800994e:	2019      	movs	r0, #25
 8009950:	f7f7 faed 	bl	8000f2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8009954:	2200      	movs	r2, #0
 8009956:	2100      	movs	r1, #0
 8009958:	201a      	movs	r0, #26
 800995a:	f7f7 face 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800995e:	201a      	movs	r0, #26
 8009960:	f7f7 fae5 	bl	8000f2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8009964:	2200      	movs	r2, #0
 8009966:	2100      	movs	r1, #0
 8009968:	201b      	movs	r0, #27
 800996a:	f7f7 fac6 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800996e:	201b      	movs	r0, #27
 8009970:	f7f7 fadd 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8009974:	bf00      	nop
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	40010000 	.word	0x40010000
 8009980:	58024400 	.word	0x58024400

08009984 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800998c:	f107 030c 	add.w	r3, r7, #12
 8009990:	2200      	movs	r2, #0
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	605a      	str	r2, [r3, #4]
 8009996:	609a      	str	r2, [r3, #8]
 8009998:	60da      	str	r2, [r3, #12]
 800999a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a13      	ldr	r2, [pc, #76]	; (80099f0 <HAL_TIM_MspPostInit+0x6c>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d11f      	bne.n	80099e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80099a6:	4b13      	ldr	r3, [pc, #76]	; (80099f4 <HAL_TIM_MspPostInit+0x70>)
 80099a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099ac:	4a11      	ldr	r2, [pc, #68]	; (80099f4 <HAL_TIM_MspPostInit+0x70>)
 80099ae:	f043 0310 	orr.w	r3, r3, #16
 80099b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80099b6:	4b0f      	ldr	r3, [pc, #60]	; (80099f4 <HAL_TIM_MspPostInit+0x70>)
 80099b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099bc:	f003 0310 	and.w	r3, r3, #16
 80099c0:	60bb      	str	r3, [r7, #8]
 80099c2:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80099c4:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80099c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099ca:	2302      	movs	r3, #2
 80099cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099d2:	2303      	movs	r3, #3
 80099d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80099d6:	2301      	movs	r3, #1
 80099d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80099da:	f107 030c 	add.w	r3, r7, #12
 80099de:	4619      	mov	r1, r3
 80099e0:	4805      	ldr	r0, [pc, #20]	; (80099f8 <HAL_TIM_MspPostInit+0x74>)
 80099e2:	f7f7 fabf 	bl	8000f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80099e6:	bf00      	nop
 80099e8:	3720      	adds	r7, #32
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	40010000 	.word	0x40010000
 80099f4:	58024400 	.word	0x58024400
 80099f8:	58021000 	.word	0x58021000

080099fc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8009a00:	4b22      	ldr	r3, [pc, #136]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a02:	4a23      	ldr	r2, [pc, #140]	; (8009a90 <MX_USART3_UART_Init+0x94>)
 8009a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009a06:	4b21      	ldr	r3, [pc, #132]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009a0e:	4b1f      	ldr	r3, [pc, #124]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009a14:	4b1d      	ldr	r3, [pc, #116]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009a1a:	4b1c      	ldr	r3, [pc, #112]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009a20:	4b1a      	ldr	r3, [pc, #104]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a22:	220c      	movs	r2, #12
 8009a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a26:	4b19      	ldr	r3, [pc, #100]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a2c:	4b17      	ldr	r3, [pc, #92]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009a32:	4b16      	ldr	r3, [pc, #88]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009a38:	4b14      	ldr	r3, [pc, #80]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009a3e:	4b13      	ldr	r3, [pc, #76]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009a44:	4811      	ldr	r0, [pc, #68]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a46:	f7fb f8e7 	bl	8004c18 <HAL_UART_Init>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8009a50:	f7ff fd5c 	bl	800950c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009a54:	2100      	movs	r1, #0
 8009a56:	480d      	ldr	r0, [pc, #52]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a58:	f7fd fc15 	bl	8007286 <HAL_UARTEx_SetTxFifoThreshold>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8009a62:	f7ff fd53 	bl	800950c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009a66:	2100      	movs	r1, #0
 8009a68:	4808      	ldr	r0, [pc, #32]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a6a:	f7fd fc4a 	bl	8007302 <HAL_UARTEx_SetRxFifoThreshold>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8009a74:	f7ff fd4a 	bl	800950c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8009a78:	4804      	ldr	r0, [pc, #16]	; (8009a8c <MX_USART3_UART_Init+0x90>)
 8009a7a:	f7fd fbcb 	bl	8007214 <HAL_UARTEx_DisableFifoMode>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8009a84:	f7ff fd42 	bl	800950c <Error_Handler>
  }

}
 8009a88:	bf00      	nop
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	240036e0 	.word	0x240036e0
 8009a90:	40004800 	.word	0x40004800

08009a94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08a      	sub	sp, #40	; 0x28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a9c:	f107 0314 	add.w	r3, r7, #20
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	605a      	str	r2, [r3, #4]
 8009aa6:	609a      	str	r2, [r3, #8]
 8009aa8:	60da      	str	r2, [r3, #12]
 8009aaa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a1a      	ldr	r2, [pc, #104]	; (8009b1c <HAL_UART_MspInit+0x88>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d12e      	bne.n	8009b14 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8009ab6:	4b1a      	ldr	r3, [pc, #104]	; (8009b20 <HAL_UART_MspInit+0x8c>)
 8009ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009abc:	4a18      	ldr	r2, [pc, #96]	; (8009b20 <HAL_UART_MspInit+0x8c>)
 8009abe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ac2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009ac6:	4b16      	ldr	r3, [pc, #88]	; (8009b20 <HAL_UART_MspInit+0x8c>)
 8009ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ad0:	613b      	str	r3, [r7, #16]
 8009ad2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009ad4:	4b12      	ldr	r3, [pc, #72]	; (8009b20 <HAL_UART_MspInit+0x8c>)
 8009ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ada:	4a11      	ldr	r2, [pc, #68]	; (8009b20 <HAL_UART_MspInit+0x8c>)
 8009adc:	f043 0308 	orr.w	r3, r3, #8
 8009ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ae4:	4b0e      	ldr	r3, [pc, #56]	; (8009b20 <HAL_UART_MspInit+0x8c>)
 8009ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009aea:	f003 0308 	and.w	r3, r3, #8
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8009af2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009af8:	2302      	movs	r3, #2
 8009afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009afc:	2300      	movs	r3, #0
 8009afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b00:	2300      	movs	r3, #0
 8009b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009b04:	2307      	movs	r3, #7
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009b08:	f107 0314 	add.w	r3, r7, #20
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4805      	ldr	r0, [pc, #20]	; (8009b24 <HAL_UART_MspInit+0x90>)
 8009b10:	f7f7 fa28 	bl	8000f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8009b14:	bf00      	nop
 8009b16:	3728      	adds	r7, #40	; 0x28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	40004800 	.word	0x40004800
 8009b20:	58024400 	.word	0x58024400
 8009b24:	58020c00 	.word	0x58020c00

08009b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009b60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009b2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009b2e:	e003      	b.n	8009b38 <LoopCopyDataInit>

08009b30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009b30:	4b0c      	ldr	r3, [pc, #48]	; (8009b64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009b32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009b34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009b36:	3104      	adds	r1, #4

08009b38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009b38:	480b      	ldr	r0, [pc, #44]	; (8009b68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009b3a:	4b0c      	ldr	r3, [pc, #48]	; (8009b6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009b3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009b3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009b40:	d3f6      	bcc.n	8009b30 <CopyDataInit>
  ldr  r2, =_sbss
 8009b42:	4a0b      	ldr	r2, [pc, #44]	; (8009b70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009b44:	e002      	b.n	8009b4c <LoopFillZerobss>

08009b46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009b46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009b48:	f842 3b04 	str.w	r3, [r2], #4

08009b4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009b4c:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009b4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009b50:	d3f9      	bcc.n	8009b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009b52:	f7ff fd8b 	bl	800966c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009b56:	f000 f93f 	bl	8009dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009b5a:	f7ff fbdd 	bl	8009318 <main>
  bx  lr    
 8009b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009b60:	2407ffff 	.word	0x2407ffff
  ldr  r3, =_sidata
 8009b64:	0800bb88 	.word	0x0800bb88
  ldr  r0, =_sdata
 8009b68:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8009b6c:	240001e0 	.word	0x240001e0
  ldr  r2, =_sbss
 8009b70:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 8009b74:	24003770 	.word	0x24003770

08009b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009b78:	e7fe      	b.n	8009b78 <ADC_IRQHandler>
	...

08009b7c <_ZN8GPIOCtrlC1EP12GPIO_TypeDefm>:
 *      Author: Nakamura(Yutaka)
 */

#include "GPIOCtrl.hpp"

GPIOCtrl::GPIOCtrl( GPIO_TypeDef *pGPIOx, uint32_t pPinMask)
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
:mGPIOx(pGPIOx), mPinMask(pPinMask), mGPIOStatus(GPIO_OFF) {
 8009b88:	4a09      	ldr	r2, [pc, #36]	; (8009bb0 <_ZN8GPIOCtrlC1EP12GPIO_TypeDefm+0x34>)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	605a      	str	r2, [r3, #4]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	609a      	str	r2, [r3, #8]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	731a      	strb	r2, [r3, #12]
	OFF();
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f000 f827 	bl	8009bf4 <_ZN8GPIOCtrl3OFFEv>
}
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	0800b934 	.word	0x0800b934

08009bb4 <_ZN8GPIOCtrlD1Ev>:

GPIOCtrl::~GPIOCtrl() {
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	4a04      	ldr	r2, [pc, #16]	; (8009bd0 <_ZN8GPIOCtrlD1Ev+0x1c>)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	601a      	str	r2, [r3, #0]
}
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	0800b934 	.word	0x0800b934

08009bd4 <_ZN8GPIOCtrlD0Ev>:
GPIOCtrl::~GPIOCtrl() {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
}
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7ff ffe9 	bl	8009bb4 <_ZN8GPIOCtrlD1Ev>
 8009be2:	2110      	movs	r1, #16
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f8ec 	bl	8009dc2 <_ZdlPvj>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <_ZN8GPIOCtrl3OFFEv>:

void GPIOCtrl::OFF() {
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
	mGPIOStatus = GPIO_OFF;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	731a      	strb	r2, [r3, #12]
	HAL_GPIO_WritePin(mGPIOx, mPinMask, GPIO_PIN_RESET);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6858      	ldr	r0, [r3, #4]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	4619      	mov	r1, r3
 8009c10:	f7f7 fb58 	bl	80012c4 <HAL_GPIO_WritePin>
	//LL_GPIO_ResetOutputPin(mGPIOx, mPinMask);
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <_ZN8GPIOCtrl2ONEv>:

void GPIOCtrl::ON() {
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
	mGPIOStatus = GPIO_ON;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	731a      	strb	r2, [r3, #12]
	HAL_GPIO_WritePin(mGPIOx, mPinMask, GPIO_PIN_SET);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6858      	ldr	r0, [r3, #4]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	2201      	movs	r2, #1
 8009c36:	4619      	mov	r1, r3
 8009c38:	f7f7 fb44 	bl	80012c4 <HAL_GPIO_WritePin>
	//LL_GPIO_SetOutputPin(mGPIOx, mPinMask);
}
 8009c3c:	bf00      	nop
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <_ZN8GPIOCtrl6ToggleEv>:

void GPIOCtrl::Toggle() {
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	if(mGPIOStatus) {
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	7b1b      	ldrb	r3, [r3, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d003      	beq.n	8009c5c <_ZN8GPIOCtrl6ToggleEv+0x18>
		OFF();
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7ff ffcd 	bl	8009bf4 <_ZN8GPIOCtrl3OFFEv>
	} else {
		ON();
	}
}
 8009c5a:	e002      	b.n	8009c62 <_ZN8GPIOCtrl6ToggleEv+0x1e>
		ON();
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7ff ffdd 	bl	8009c1c <_ZN8GPIOCtrl2ONEv>
}
 8009c62:	bf00      	nop
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <_ZN3PWM6setTIMEP17TIM_HandleTypeDef>:


#include "PWM.hpp"


void PWM::setTIM(TIM_HandleTypeDef* phtim) {
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	6039      	str	r1, [r7, #0]
	mhtim = phtim;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	601a      	str	r2, [r3, #0]
}
 8009c7a:	bf00      	nop
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <_ZN3PWM5setCHENS_5PWMchE>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(PWMch pCH) {
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	460b      	mov	r3, r1
 8009c90:	70fb      	strb	r3, [r7, #3]
	mCH = pCH;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	78fa      	ldrb	r2, [r7, #3]
 8009c96:	711a      	strb	r2, [r3, #4]
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <_ZN3PWM4InitEv>:

void PWM::Init(){
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
	//PWM Channel Init
	if(mhtim){//error check
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00c      	beq.n	8009cce <_ZN3PWM4InitEv+0x2a>
		//while(1){}//err handle else でとばしてもいいかも。
		HAL_TIM_Base_Start_IT(mhtim);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7f9 fdb1 	bl	8003820 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(mhtim, mCH);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	791b      	ldrb	r3, [r3, #4]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	4610      	mov	r0, r2
 8009cca:	f7f9 fe09 	bl	80038e0 <HAL_TIM_PWM_Start>

	}
}
 8009cce:	bf00      	nop
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <_ZN3PWM5fInitEi>:

void PWM::fInit(int pTimReload){
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b082      	sub	sp, #8
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	6039      	str	r1, [r7, #0]
	mTimReload = pTimReload;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	609a      	str	r2, [r3, #8]
	Init();
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7ff ffdc 	bl	8009ca4 <_ZN3PWM4InitEv>
}
 8009cec:	bf00      	nop
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <_ZN3PWM4DutyEi>:

void PWM::Duty(int pDuty){
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
	//WRITE_REG(*mREG, pDuty);
	__HAL_TIM_SET_COMPARE(mhtim, mCH, pDuty);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	791b      	ldrb	r3, [r3, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d105      	bne.n	8009d12 <_ZN3PWM4DutyEi+0x1e>
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009d10:	e02c      	b.n	8009d6c <_ZN3PWM4DutyEi+0x78>
	__HAL_TIM_SET_COMPARE(mhtim, mCH, pDuty);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	791b      	ldrb	r3, [r3, #4]
 8009d16:	2b04      	cmp	r3, #4
 8009d18:	d105      	bne.n	8009d26 <_ZN3PWM4DutyEi+0x32>
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009d24:	e022      	b.n	8009d6c <_ZN3PWM4DutyEi+0x78>
	__HAL_TIM_SET_COMPARE(mhtim, mCH, pDuty);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	791b      	ldrb	r3, [r3, #4]
 8009d2a:	2b08      	cmp	r3, #8
 8009d2c:	d105      	bne.n	8009d3a <_ZN3PWM4DutyEi+0x46>
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009d38:	e018      	b.n	8009d6c <_ZN3PWM4DutyEi+0x78>
	__HAL_TIM_SET_COMPARE(mhtim, mCH, pDuty);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	791b      	ldrb	r3, [r3, #4]
 8009d3e:	2b0c      	cmp	r3, #12
 8009d40:	d105      	bne.n	8009d4e <_ZN3PWM4DutyEi+0x5a>
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009d4c:	e00e      	b.n	8009d6c <_ZN3PWM4DutyEi+0x78>
	__HAL_TIM_SET_COMPARE(mhtim, mCH, pDuty);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	791b      	ldrb	r3, [r3, #4]
 8009d52:	2b10      	cmp	r3, #16
 8009d54:	d105      	bne.n	8009d62 <_ZN3PWM4DutyEi+0x6e>
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8009d60:	e004      	b.n	8009d6c <_ZN3PWM4DutyEi+0x78>
	__HAL_TIM_SET_COMPARE(mhtim, mCH, pDuty);
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int duty = pfDuty * (float)mTimReload;
	Duty(duty);
}

void PWM::f2Duty(float pfDuty){
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	ed87 0a00 	vstr	s0, [r7]
	int duty = (pfDuty + 1)/2 * (float)mTimReload;
 8009d84:	edd7 7a00 	vldr	s15, [r7]
 8009d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d90:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009d94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	ee07 3a90 	vmov	s15, r3
 8009da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dac:	ee17 3a90 	vmov	r3, s15
 8009db0:	60fb      	str	r3, [r7, #12]
	Duty(duty);
 8009db2:	68f9      	ldr	r1, [r7, #12]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7ff ff9d 	bl	8009cf4 <_ZN3PWM4DutyEi>
}
 8009dba:	bf00      	nop
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <_ZdlPvj>:
 8009dc2:	f000 b800 	b.w	8009dc6 <_ZdlPv>

08009dc6 <_ZdlPv>:
 8009dc6:	f000 b833 	b.w	8009e30 <free>
	...

08009dcc <__errno>:
 8009dcc:	4b01      	ldr	r3, [pc, #4]	; (8009dd4 <__errno+0x8>)
 8009dce:	6818      	ldr	r0, [r3, #0]
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	24000010 	.word	0x24000010

08009dd8 <__libc_init_array>:
 8009dd8:	b570      	push	{r4, r5, r6, lr}
 8009dda:	4e0d      	ldr	r6, [pc, #52]	; (8009e10 <__libc_init_array+0x38>)
 8009ddc:	4c0d      	ldr	r4, [pc, #52]	; (8009e14 <__libc_init_array+0x3c>)
 8009dde:	1ba4      	subs	r4, r4, r6
 8009de0:	10a4      	asrs	r4, r4, #2
 8009de2:	2500      	movs	r5, #0
 8009de4:	42a5      	cmp	r5, r4
 8009de6:	d109      	bne.n	8009dfc <__libc_init_array+0x24>
 8009de8:	4e0b      	ldr	r6, [pc, #44]	; (8009e18 <__libc_init_array+0x40>)
 8009dea:	4c0c      	ldr	r4, [pc, #48]	; (8009e1c <__libc_init_array+0x44>)
 8009dec:	f001 fd12 	bl	800b814 <_init>
 8009df0:	1ba4      	subs	r4, r4, r6
 8009df2:	10a4      	asrs	r4, r4, #2
 8009df4:	2500      	movs	r5, #0
 8009df6:	42a5      	cmp	r5, r4
 8009df8:	d105      	bne.n	8009e06 <__libc_init_array+0x2e>
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e00:	4798      	blx	r3
 8009e02:	3501      	adds	r5, #1
 8009e04:	e7ee      	b.n	8009de4 <__libc_init_array+0xc>
 8009e06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e0a:	4798      	blx	r3
 8009e0c:	3501      	adds	r5, #1
 8009e0e:	e7f2      	b.n	8009df6 <__libc_init_array+0x1e>
 8009e10:	0800bb70 	.word	0x0800bb70
 8009e14:	0800bb70 	.word	0x0800bb70
 8009e18:	0800bb70 	.word	0x0800bb70
 8009e1c:	0800bb7c 	.word	0x0800bb7c

08009e20 <malloc>:
 8009e20:	4b02      	ldr	r3, [pc, #8]	; (8009e2c <malloc+0xc>)
 8009e22:	4601      	mov	r1, r0
 8009e24:	6818      	ldr	r0, [r3, #0]
 8009e26:	f000 b86d 	b.w	8009f04 <_malloc_r>
 8009e2a:	bf00      	nop
 8009e2c:	24000010 	.word	0x24000010

08009e30 <free>:
 8009e30:	4b02      	ldr	r3, [pc, #8]	; (8009e3c <free+0xc>)
 8009e32:	4601      	mov	r1, r0
 8009e34:	6818      	ldr	r0, [r3, #0]
 8009e36:	f000 b817 	b.w	8009e68 <_free_r>
 8009e3a:	bf00      	nop
 8009e3c:	24000010 	.word	0x24000010

08009e40 <memcpy>:
 8009e40:	b510      	push	{r4, lr}
 8009e42:	1e43      	subs	r3, r0, #1
 8009e44:	440a      	add	r2, r1
 8009e46:	4291      	cmp	r1, r2
 8009e48:	d100      	bne.n	8009e4c <memcpy+0xc>
 8009e4a:	bd10      	pop	{r4, pc}
 8009e4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e54:	e7f7      	b.n	8009e46 <memcpy+0x6>

08009e56 <memset>:
 8009e56:	4402      	add	r2, r0
 8009e58:	4603      	mov	r3, r0
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d100      	bne.n	8009e60 <memset+0xa>
 8009e5e:	4770      	bx	lr
 8009e60:	f803 1b01 	strb.w	r1, [r3], #1
 8009e64:	e7f9      	b.n	8009e5a <memset+0x4>
	...

08009e68 <_free_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	2900      	cmp	r1, #0
 8009e6e:	d045      	beq.n	8009efc <_free_r+0x94>
 8009e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e74:	1f0c      	subs	r4, r1, #4
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	bfb8      	it	lt
 8009e7a:	18e4      	addlt	r4, r4, r3
 8009e7c:	f001 f9be 	bl	800b1fc <__malloc_lock>
 8009e80:	4a1f      	ldr	r2, [pc, #124]	; (8009f00 <_free_r+0x98>)
 8009e82:	6813      	ldr	r3, [r2, #0]
 8009e84:	4610      	mov	r0, r2
 8009e86:	b933      	cbnz	r3, 8009e96 <_free_r+0x2e>
 8009e88:	6063      	str	r3, [r4, #4]
 8009e8a:	6014      	str	r4, [r2, #0]
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e92:	f001 b9b4 	b.w	800b1fe <__malloc_unlock>
 8009e96:	42a3      	cmp	r3, r4
 8009e98:	d90c      	bls.n	8009eb4 <_free_r+0x4c>
 8009e9a:	6821      	ldr	r1, [r4, #0]
 8009e9c:	1862      	adds	r2, r4, r1
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	bf04      	itt	eq
 8009ea2:	681a      	ldreq	r2, [r3, #0]
 8009ea4:	685b      	ldreq	r3, [r3, #4]
 8009ea6:	6063      	str	r3, [r4, #4]
 8009ea8:	bf04      	itt	eq
 8009eaa:	1852      	addeq	r2, r2, r1
 8009eac:	6022      	streq	r2, [r4, #0]
 8009eae:	6004      	str	r4, [r0, #0]
 8009eb0:	e7ec      	b.n	8009e8c <_free_r+0x24>
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	b10a      	cbz	r2, 8009ebc <_free_r+0x54>
 8009eb8:	42a2      	cmp	r2, r4
 8009eba:	d9fa      	bls.n	8009eb2 <_free_r+0x4a>
 8009ebc:	6819      	ldr	r1, [r3, #0]
 8009ebe:	1858      	adds	r0, r3, r1
 8009ec0:	42a0      	cmp	r0, r4
 8009ec2:	d10b      	bne.n	8009edc <_free_r+0x74>
 8009ec4:	6820      	ldr	r0, [r4, #0]
 8009ec6:	4401      	add	r1, r0
 8009ec8:	1858      	adds	r0, r3, r1
 8009eca:	4282      	cmp	r2, r0
 8009ecc:	6019      	str	r1, [r3, #0]
 8009ece:	d1dd      	bne.n	8009e8c <_free_r+0x24>
 8009ed0:	6810      	ldr	r0, [r2, #0]
 8009ed2:	6852      	ldr	r2, [r2, #4]
 8009ed4:	605a      	str	r2, [r3, #4]
 8009ed6:	4401      	add	r1, r0
 8009ed8:	6019      	str	r1, [r3, #0]
 8009eda:	e7d7      	b.n	8009e8c <_free_r+0x24>
 8009edc:	d902      	bls.n	8009ee4 <_free_r+0x7c>
 8009ede:	230c      	movs	r3, #12
 8009ee0:	602b      	str	r3, [r5, #0]
 8009ee2:	e7d3      	b.n	8009e8c <_free_r+0x24>
 8009ee4:	6820      	ldr	r0, [r4, #0]
 8009ee6:	1821      	adds	r1, r4, r0
 8009ee8:	428a      	cmp	r2, r1
 8009eea:	bf04      	itt	eq
 8009eec:	6811      	ldreq	r1, [r2, #0]
 8009eee:	6852      	ldreq	r2, [r2, #4]
 8009ef0:	6062      	str	r2, [r4, #4]
 8009ef2:	bf04      	itt	eq
 8009ef4:	1809      	addeq	r1, r1, r0
 8009ef6:	6021      	streq	r1, [r4, #0]
 8009ef8:	605c      	str	r4, [r3, #4]
 8009efa:	e7c7      	b.n	8009e8c <_free_r+0x24>
 8009efc:	bd38      	pop	{r3, r4, r5, pc}
 8009efe:	bf00      	nop
 8009f00:	2400358c 	.word	0x2400358c

08009f04 <_malloc_r>:
 8009f04:	b570      	push	{r4, r5, r6, lr}
 8009f06:	1ccd      	adds	r5, r1, #3
 8009f08:	f025 0503 	bic.w	r5, r5, #3
 8009f0c:	3508      	adds	r5, #8
 8009f0e:	2d0c      	cmp	r5, #12
 8009f10:	bf38      	it	cc
 8009f12:	250c      	movcc	r5, #12
 8009f14:	2d00      	cmp	r5, #0
 8009f16:	4606      	mov	r6, r0
 8009f18:	db01      	blt.n	8009f1e <_malloc_r+0x1a>
 8009f1a:	42a9      	cmp	r1, r5
 8009f1c:	d903      	bls.n	8009f26 <_malloc_r+0x22>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	6033      	str	r3, [r6, #0]
 8009f22:	2000      	movs	r0, #0
 8009f24:	bd70      	pop	{r4, r5, r6, pc}
 8009f26:	f001 f969 	bl	800b1fc <__malloc_lock>
 8009f2a:	4a21      	ldr	r2, [pc, #132]	; (8009fb0 <_malloc_r+0xac>)
 8009f2c:	6814      	ldr	r4, [r2, #0]
 8009f2e:	4621      	mov	r1, r4
 8009f30:	b991      	cbnz	r1, 8009f58 <_malloc_r+0x54>
 8009f32:	4c20      	ldr	r4, [pc, #128]	; (8009fb4 <_malloc_r+0xb0>)
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	b91b      	cbnz	r3, 8009f40 <_malloc_r+0x3c>
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f000 fb67 	bl	800a60c <_sbrk_r>
 8009f3e:	6020      	str	r0, [r4, #0]
 8009f40:	4629      	mov	r1, r5
 8009f42:	4630      	mov	r0, r6
 8009f44:	f000 fb62 	bl	800a60c <_sbrk_r>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d124      	bne.n	8009f96 <_malloc_r+0x92>
 8009f4c:	230c      	movs	r3, #12
 8009f4e:	6033      	str	r3, [r6, #0]
 8009f50:	4630      	mov	r0, r6
 8009f52:	f001 f954 	bl	800b1fe <__malloc_unlock>
 8009f56:	e7e4      	b.n	8009f22 <_malloc_r+0x1e>
 8009f58:	680b      	ldr	r3, [r1, #0]
 8009f5a:	1b5b      	subs	r3, r3, r5
 8009f5c:	d418      	bmi.n	8009f90 <_malloc_r+0x8c>
 8009f5e:	2b0b      	cmp	r3, #11
 8009f60:	d90f      	bls.n	8009f82 <_malloc_r+0x7e>
 8009f62:	600b      	str	r3, [r1, #0]
 8009f64:	50cd      	str	r5, [r1, r3]
 8009f66:	18cc      	adds	r4, r1, r3
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f001 f948 	bl	800b1fe <__malloc_unlock>
 8009f6e:	f104 000b 	add.w	r0, r4, #11
 8009f72:	1d23      	adds	r3, r4, #4
 8009f74:	f020 0007 	bic.w	r0, r0, #7
 8009f78:	1ac3      	subs	r3, r0, r3
 8009f7a:	d0d3      	beq.n	8009f24 <_malloc_r+0x20>
 8009f7c:	425a      	negs	r2, r3
 8009f7e:	50e2      	str	r2, [r4, r3]
 8009f80:	e7d0      	b.n	8009f24 <_malloc_r+0x20>
 8009f82:	428c      	cmp	r4, r1
 8009f84:	684b      	ldr	r3, [r1, #4]
 8009f86:	bf16      	itet	ne
 8009f88:	6063      	strne	r3, [r4, #4]
 8009f8a:	6013      	streq	r3, [r2, #0]
 8009f8c:	460c      	movne	r4, r1
 8009f8e:	e7eb      	b.n	8009f68 <_malloc_r+0x64>
 8009f90:	460c      	mov	r4, r1
 8009f92:	6849      	ldr	r1, [r1, #4]
 8009f94:	e7cc      	b.n	8009f30 <_malloc_r+0x2c>
 8009f96:	1cc4      	adds	r4, r0, #3
 8009f98:	f024 0403 	bic.w	r4, r4, #3
 8009f9c:	42a0      	cmp	r0, r4
 8009f9e:	d005      	beq.n	8009fac <_malloc_r+0xa8>
 8009fa0:	1a21      	subs	r1, r4, r0
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f000 fb32 	bl	800a60c <_sbrk_r>
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d0cf      	beq.n	8009f4c <_malloc_r+0x48>
 8009fac:	6025      	str	r5, [r4, #0]
 8009fae:	e7db      	b.n	8009f68 <_malloc_r+0x64>
 8009fb0:	2400358c 	.word	0x2400358c
 8009fb4:	24003590 	.word	0x24003590

08009fb8 <__cvt>:
 8009fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fba:	ed2d 8b02 	vpush	{d8}
 8009fbe:	eeb0 8b40 	vmov.f64	d8, d0
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	4617      	mov	r7, r2
 8009fc6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009fc8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009fca:	ee18 2a90 	vmov	r2, s17
 8009fce:	f025 0520 	bic.w	r5, r5, #32
 8009fd2:	2a00      	cmp	r2, #0
 8009fd4:	bfb6      	itet	lt
 8009fd6:	222d      	movlt	r2, #45	; 0x2d
 8009fd8:	2200      	movge	r2, #0
 8009fda:	eeb1 8b40 	vneglt.f64	d8, d0
 8009fde:	2d46      	cmp	r5, #70	; 0x46
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	701a      	strb	r2, [r3, #0]
 8009fe4:	d004      	beq.n	8009ff0 <__cvt+0x38>
 8009fe6:	2d45      	cmp	r5, #69	; 0x45
 8009fe8:	d100      	bne.n	8009fec <__cvt+0x34>
 8009fea:	3401      	adds	r4, #1
 8009fec:	2102      	movs	r1, #2
 8009fee:	e000      	b.n	8009ff2 <__cvt+0x3a>
 8009ff0:	2103      	movs	r1, #3
 8009ff2:	ab03      	add	r3, sp, #12
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	ab02      	add	r3, sp, #8
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	4622      	mov	r2, r4
 8009ffc:	4633      	mov	r3, r6
 8009ffe:	eeb0 0b48 	vmov.f64	d0, d8
 800a002:	f000 fba1 	bl	800a748 <_dtoa_r>
 800a006:	2d47      	cmp	r5, #71	; 0x47
 800a008:	d101      	bne.n	800a00e <__cvt+0x56>
 800a00a:	07fb      	lsls	r3, r7, #31
 800a00c:	d51e      	bpl.n	800a04c <__cvt+0x94>
 800a00e:	2d46      	cmp	r5, #70	; 0x46
 800a010:	eb00 0304 	add.w	r3, r0, r4
 800a014:	d10c      	bne.n	800a030 <__cvt+0x78>
 800a016:	7802      	ldrb	r2, [r0, #0]
 800a018:	2a30      	cmp	r2, #48	; 0x30
 800a01a:	d107      	bne.n	800a02c <__cvt+0x74>
 800a01c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a024:	bf1c      	itt	ne
 800a026:	f1c4 0401 	rsbne	r4, r4, #1
 800a02a:	6034      	strne	r4, [r6, #0]
 800a02c:	6832      	ldr	r2, [r6, #0]
 800a02e:	4413      	add	r3, r2
 800a030:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a038:	d007      	beq.n	800a04a <__cvt+0x92>
 800a03a:	2130      	movs	r1, #48	; 0x30
 800a03c:	9a03      	ldr	r2, [sp, #12]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d204      	bcs.n	800a04c <__cvt+0x94>
 800a042:	1c54      	adds	r4, r2, #1
 800a044:	9403      	str	r4, [sp, #12]
 800a046:	7011      	strb	r1, [r2, #0]
 800a048:	e7f8      	b.n	800a03c <__cvt+0x84>
 800a04a:	9303      	str	r3, [sp, #12]
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a050:	1a1b      	subs	r3, r3, r0
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	b005      	add	sp, #20
 800a056:	ecbd 8b02 	vpop	{d8}
 800a05a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a05c <__exponent>:
 800a05c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a05e:	2900      	cmp	r1, #0
 800a060:	4604      	mov	r4, r0
 800a062:	bfba      	itte	lt
 800a064:	4249      	neglt	r1, r1
 800a066:	232d      	movlt	r3, #45	; 0x2d
 800a068:	232b      	movge	r3, #43	; 0x2b
 800a06a:	2909      	cmp	r1, #9
 800a06c:	f804 2b02 	strb.w	r2, [r4], #2
 800a070:	7043      	strb	r3, [r0, #1]
 800a072:	dd20      	ble.n	800a0b6 <__exponent+0x5a>
 800a074:	f10d 0307 	add.w	r3, sp, #7
 800a078:	461f      	mov	r7, r3
 800a07a:	260a      	movs	r6, #10
 800a07c:	fb91 f5f6 	sdiv	r5, r1, r6
 800a080:	fb06 1115 	mls	r1, r6, r5, r1
 800a084:	3130      	adds	r1, #48	; 0x30
 800a086:	2d09      	cmp	r5, #9
 800a088:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a08c:	f103 32ff 	add.w	r2, r3, #4294967295
 800a090:	4629      	mov	r1, r5
 800a092:	dc09      	bgt.n	800a0a8 <__exponent+0x4c>
 800a094:	3130      	adds	r1, #48	; 0x30
 800a096:	3b02      	subs	r3, #2
 800a098:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a09c:	42bb      	cmp	r3, r7
 800a09e:	4622      	mov	r2, r4
 800a0a0:	d304      	bcc.n	800a0ac <__exponent+0x50>
 800a0a2:	1a10      	subs	r0, r2, r0
 800a0a4:	b003      	add	sp, #12
 800a0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	e7e7      	b.n	800a07c <__exponent+0x20>
 800a0ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b0:	f804 2b01 	strb.w	r2, [r4], #1
 800a0b4:	e7f2      	b.n	800a09c <__exponent+0x40>
 800a0b6:	2330      	movs	r3, #48	; 0x30
 800a0b8:	4419      	add	r1, r3
 800a0ba:	7083      	strb	r3, [r0, #2]
 800a0bc:	1d02      	adds	r2, r0, #4
 800a0be:	70c1      	strb	r1, [r0, #3]
 800a0c0:	e7ef      	b.n	800a0a2 <__exponent+0x46>
 800a0c2:	0000      	movs	r0, r0
 800a0c4:	0000      	movs	r0, r0
	...

0800a0c8 <_printf_float>:
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	b08d      	sub	sp, #52	; 0x34
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	4616      	mov	r6, r2
 800a0d2:	461f      	mov	r7, r3
 800a0d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a0d8:	4605      	mov	r5, r0
 800a0da:	f001 f881 	bl	800b1e0 <_localeconv_r>
 800a0de:	f8d0 b000 	ldr.w	fp, [r0]
 800a0e2:	4658      	mov	r0, fp
 800a0e4:	f7f6 f8f8 	bl	80002d8 <strlen>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ec:	f8d8 3000 	ldr.w	r3, [r8]
 800a0f0:	9005      	str	r0, [sp, #20]
 800a0f2:	3307      	adds	r3, #7
 800a0f4:	f023 0307 	bic.w	r3, r3, #7
 800a0f8:	f103 0108 	add.w	r1, r3, #8
 800a0fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a100:	6822      	ldr	r2, [r4, #0]
 800a102:	f8c8 1000 	str.w	r1, [r8]
 800a106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a10a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a10e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800a398 <_printf_float+0x2d0>
 800a112:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a116:	eeb0 6bc0 	vabs.f64	d6, d0
 800a11a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a122:	dd24      	ble.n	800a16e <_printf_float+0xa6>
 800a124:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a12c:	d502      	bpl.n	800a134 <_printf_float+0x6c>
 800a12e:	232d      	movs	r3, #45	; 0x2d
 800a130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a134:	499a      	ldr	r1, [pc, #616]	; (800a3a0 <_printf_float+0x2d8>)
 800a136:	4b9b      	ldr	r3, [pc, #620]	; (800a3a4 <_printf_float+0x2dc>)
 800a138:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a13c:	bf8c      	ite	hi
 800a13e:	4688      	movhi	r8, r1
 800a140:	4698      	movls	r8, r3
 800a142:	f022 0204 	bic.w	r2, r2, #4
 800a146:	2303      	movs	r3, #3
 800a148:	6123      	str	r3, [r4, #16]
 800a14a:	6022      	str	r2, [r4, #0]
 800a14c:	f04f 0a00 	mov.w	sl, #0
 800a150:	9700      	str	r7, [sp, #0]
 800a152:	4633      	mov	r3, r6
 800a154:	aa0b      	add	r2, sp, #44	; 0x2c
 800a156:	4621      	mov	r1, r4
 800a158:	4628      	mov	r0, r5
 800a15a:	f000 f9e1 	bl	800a520 <_printf_common>
 800a15e:	3001      	adds	r0, #1
 800a160:	f040 8089 	bne.w	800a276 <_printf_float+0x1ae>
 800a164:	f04f 30ff 	mov.w	r0, #4294967295
 800a168:	b00d      	add	sp, #52	; 0x34
 800a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16e:	eeb4 0b40 	vcmp.f64	d0, d0
 800a172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a176:	d702      	bvc.n	800a17e <_printf_float+0xb6>
 800a178:	498b      	ldr	r1, [pc, #556]	; (800a3a8 <_printf_float+0x2e0>)
 800a17a:	4b8c      	ldr	r3, [pc, #560]	; (800a3ac <_printf_float+0x2e4>)
 800a17c:	e7dc      	b.n	800a138 <_printf_float+0x70>
 800a17e:	6861      	ldr	r1, [r4, #4]
 800a180:	1c4b      	adds	r3, r1, #1
 800a182:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a186:	ab0a      	add	r3, sp, #40	; 0x28
 800a188:	a809      	add	r0, sp, #36	; 0x24
 800a18a:	d13b      	bne.n	800a204 <_printf_float+0x13c>
 800a18c:	2106      	movs	r1, #6
 800a18e:	6061      	str	r1, [r4, #4]
 800a190:	f04f 0c00 	mov.w	ip, #0
 800a194:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800a198:	e9cd 0900 	strd	r0, r9, [sp]
 800a19c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a1a0:	6022      	str	r2, [r4, #0]
 800a1a2:	6861      	ldr	r1, [r4, #4]
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	f7ff ff07 	bl	8009fb8 <__cvt>
 800a1aa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800a1ae:	2b47      	cmp	r3, #71	; 0x47
 800a1b0:	4680      	mov	r8, r0
 800a1b2:	d109      	bne.n	800a1c8 <_printf_float+0x100>
 800a1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b6:	1cd8      	adds	r0, r3, #3
 800a1b8:	db02      	blt.n	800a1c0 <_printf_float+0xf8>
 800a1ba:	6862      	ldr	r2, [r4, #4]
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	dd47      	ble.n	800a250 <_printf_float+0x188>
 800a1c0:	f1a9 0902 	sub.w	r9, r9, #2
 800a1c4:	fa5f f989 	uxtb.w	r9, r9
 800a1c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a1cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1ce:	d824      	bhi.n	800a21a <_printf_float+0x152>
 800a1d0:	3901      	subs	r1, #1
 800a1d2:	464a      	mov	r2, r9
 800a1d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1d8:	9109      	str	r1, [sp, #36]	; 0x24
 800a1da:	f7ff ff3f 	bl	800a05c <__exponent>
 800a1de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1e0:	1813      	adds	r3, r2, r0
 800a1e2:	2a01      	cmp	r2, #1
 800a1e4:	4682      	mov	sl, r0
 800a1e6:	6123      	str	r3, [r4, #16]
 800a1e8:	dc02      	bgt.n	800a1f0 <_printf_float+0x128>
 800a1ea:	6822      	ldr	r2, [r4, #0]
 800a1ec:	07d1      	lsls	r1, r2, #31
 800a1ee:	d501      	bpl.n	800a1f4 <_printf_float+0x12c>
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	6123      	str	r3, [r4, #16]
 800a1f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d0a9      	beq.n	800a150 <_printf_float+0x88>
 800a1fc:	232d      	movs	r3, #45	; 0x2d
 800a1fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a202:	e7a5      	b.n	800a150 <_printf_float+0x88>
 800a204:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800a208:	f000 8178 	beq.w	800a4fc <_printf_float+0x434>
 800a20c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a210:	d1be      	bne.n	800a190 <_printf_float+0xc8>
 800a212:	2900      	cmp	r1, #0
 800a214:	d1bc      	bne.n	800a190 <_printf_float+0xc8>
 800a216:	2101      	movs	r1, #1
 800a218:	e7b9      	b.n	800a18e <_printf_float+0xc6>
 800a21a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a21e:	d119      	bne.n	800a254 <_printf_float+0x18c>
 800a220:	2900      	cmp	r1, #0
 800a222:	6863      	ldr	r3, [r4, #4]
 800a224:	dd0c      	ble.n	800a240 <_printf_float+0x178>
 800a226:	6121      	str	r1, [r4, #16]
 800a228:	b913      	cbnz	r3, 800a230 <_printf_float+0x168>
 800a22a:	6822      	ldr	r2, [r4, #0]
 800a22c:	07d2      	lsls	r2, r2, #31
 800a22e:	d502      	bpl.n	800a236 <_printf_float+0x16e>
 800a230:	3301      	adds	r3, #1
 800a232:	440b      	add	r3, r1
 800a234:	6123      	str	r3, [r4, #16]
 800a236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a238:	65a3      	str	r3, [r4, #88]	; 0x58
 800a23a:	f04f 0a00 	mov.w	sl, #0
 800a23e:	e7d9      	b.n	800a1f4 <_printf_float+0x12c>
 800a240:	b913      	cbnz	r3, 800a248 <_printf_float+0x180>
 800a242:	6822      	ldr	r2, [r4, #0]
 800a244:	07d0      	lsls	r0, r2, #31
 800a246:	d501      	bpl.n	800a24c <_printf_float+0x184>
 800a248:	3302      	adds	r3, #2
 800a24a:	e7f3      	b.n	800a234 <_printf_float+0x16c>
 800a24c:	2301      	movs	r3, #1
 800a24e:	e7f1      	b.n	800a234 <_printf_float+0x16c>
 800a250:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a254:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a258:	4293      	cmp	r3, r2
 800a25a:	db05      	blt.n	800a268 <_printf_float+0x1a0>
 800a25c:	6822      	ldr	r2, [r4, #0]
 800a25e:	6123      	str	r3, [r4, #16]
 800a260:	07d1      	lsls	r1, r2, #31
 800a262:	d5e8      	bpl.n	800a236 <_printf_float+0x16e>
 800a264:	3301      	adds	r3, #1
 800a266:	e7e5      	b.n	800a234 <_printf_float+0x16c>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bfd4      	ite	le
 800a26c:	f1c3 0302 	rsble	r3, r3, #2
 800a270:	2301      	movgt	r3, #1
 800a272:	4413      	add	r3, r2
 800a274:	e7de      	b.n	800a234 <_printf_float+0x16c>
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	055a      	lsls	r2, r3, #21
 800a27a:	d407      	bmi.n	800a28c <_printf_float+0x1c4>
 800a27c:	6923      	ldr	r3, [r4, #16]
 800a27e:	4642      	mov	r2, r8
 800a280:	4631      	mov	r1, r6
 800a282:	4628      	mov	r0, r5
 800a284:	47b8      	blx	r7
 800a286:	3001      	adds	r0, #1
 800a288:	d12a      	bne.n	800a2e0 <_printf_float+0x218>
 800a28a:	e76b      	b.n	800a164 <_printf_float+0x9c>
 800a28c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a290:	f240 80de 	bls.w	800a450 <_printf_float+0x388>
 800a294:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a298:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a0:	d133      	bne.n	800a30a <_printf_float+0x242>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4a42      	ldr	r2, [pc, #264]	; (800a3b0 <_printf_float+0x2e8>)
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	47b8      	blx	r7
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	f43f af59 	beq.w	800a164 <_printf_float+0x9c>
 800a2b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	db02      	blt.n	800a2c0 <_printf_float+0x1f8>
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	07d8      	lsls	r0, r3, #31
 800a2be:	d50f      	bpl.n	800a2e0 <_printf_float+0x218>
 800a2c0:	9b05      	ldr	r3, [sp, #20]
 800a2c2:	465a      	mov	r2, fp
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	47b8      	blx	r7
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	f43f af4a 	beq.w	800a164 <_printf_float+0x9c>
 800a2d0:	f04f 0800 	mov.w	r8, #0
 800a2d4:	f104 091a 	add.w	r9, r4, #26
 800a2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	4543      	cmp	r3, r8
 800a2de:	dc09      	bgt.n	800a2f4 <_printf_float+0x22c>
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	079b      	lsls	r3, r3, #30
 800a2e4:	f100 8105 	bmi.w	800a4f2 <_printf_float+0x42a>
 800a2e8:	68e0      	ldr	r0, [r4, #12]
 800a2ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ec:	4298      	cmp	r0, r3
 800a2ee:	bfb8      	it	lt
 800a2f0:	4618      	movlt	r0, r3
 800a2f2:	e739      	b.n	800a168 <_printf_float+0xa0>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	464a      	mov	r2, r9
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	47b8      	blx	r7
 800a2fe:	3001      	adds	r0, #1
 800a300:	f43f af30 	beq.w	800a164 <_printf_float+0x9c>
 800a304:	f108 0801 	add.w	r8, r8, #1
 800a308:	e7e6      	b.n	800a2d8 <_printf_float+0x210>
 800a30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	dc2b      	bgt.n	800a368 <_printf_float+0x2a0>
 800a310:	2301      	movs	r3, #1
 800a312:	4a27      	ldr	r2, [pc, #156]	; (800a3b0 <_printf_float+0x2e8>)
 800a314:	4631      	mov	r1, r6
 800a316:	4628      	mov	r0, r5
 800a318:	47b8      	blx	r7
 800a31a:	3001      	adds	r0, #1
 800a31c:	f43f af22 	beq.w	800a164 <_printf_float+0x9c>
 800a320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a322:	b923      	cbnz	r3, 800a32e <_printf_float+0x266>
 800a324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a326:	b913      	cbnz	r3, 800a32e <_printf_float+0x266>
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	07d9      	lsls	r1, r3, #31
 800a32c:	d5d8      	bpl.n	800a2e0 <_printf_float+0x218>
 800a32e:	9b05      	ldr	r3, [sp, #20]
 800a330:	465a      	mov	r2, fp
 800a332:	4631      	mov	r1, r6
 800a334:	4628      	mov	r0, r5
 800a336:	47b8      	blx	r7
 800a338:	3001      	adds	r0, #1
 800a33a:	f43f af13 	beq.w	800a164 <_printf_float+0x9c>
 800a33e:	f04f 0900 	mov.w	r9, #0
 800a342:	f104 0a1a 	add.w	sl, r4, #26
 800a346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a348:	425b      	negs	r3, r3
 800a34a:	454b      	cmp	r3, r9
 800a34c:	dc01      	bgt.n	800a352 <_printf_float+0x28a>
 800a34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a350:	e795      	b.n	800a27e <_printf_float+0x1b6>
 800a352:	2301      	movs	r3, #1
 800a354:	4652      	mov	r2, sl
 800a356:	4631      	mov	r1, r6
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	f43f af01 	beq.w	800a164 <_printf_float+0x9c>
 800a362:	f109 0901 	add.w	r9, r9, #1
 800a366:	e7ee      	b.n	800a346 <_printf_float+0x27e>
 800a368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a36a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a36c:	429a      	cmp	r2, r3
 800a36e:	bfa8      	it	ge
 800a370:	461a      	movge	r2, r3
 800a372:	2a00      	cmp	r2, #0
 800a374:	4691      	mov	r9, r2
 800a376:	dd07      	ble.n	800a388 <_printf_float+0x2c0>
 800a378:	4613      	mov	r3, r2
 800a37a:	4631      	mov	r1, r6
 800a37c:	4642      	mov	r2, r8
 800a37e:	4628      	mov	r0, r5
 800a380:	47b8      	blx	r7
 800a382:	3001      	adds	r0, #1
 800a384:	f43f aeee 	beq.w	800a164 <_printf_float+0x9c>
 800a388:	f104 031a 	add.w	r3, r4, #26
 800a38c:	f04f 0a00 	mov.w	sl, #0
 800a390:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a394:	9307      	str	r3, [sp, #28]
 800a396:	e017      	b.n	800a3c8 <_printf_float+0x300>
 800a398:	ffffffff 	.word	0xffffffff
 800a39c:	7fefffff 	.word	0x7fefffff
 800a3a0:	0800b940 	.word	0x0800b940
 800a3a4:	0800b93c 	.word	0x0800b93c
 800a3a8:	0800b948 	.word	0x0800b948
 800a3ac:	0800b944 	.word	0x0800b944
 800a3b0:	0800b94c 	.word	0x0800b94c
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	9a07      	ldr	r2, [sp, #28]
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	47b8      	blx	r7
 800a3be:	3001      	adds	r0, #1
 800a3c0:	f43f aed0 	beq.w	800a164 <_printf_float+0x9c>
 800a3c4:	f10a 0a01 	add.w	sl, sl, #1
 800a3c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3ca:	9306      	str	r3, [sp, #24]
 800a3cc:	eba3 0309 	sub.w	r3, r3, r9
 800a3d0:	4553      	cmp	r3, sl
 800a3d2:	dcef      	bgt.n	800a3b4 <_printf_float+0x2ec>
 800a3d4:	9b06      	ldr	r3, [sp, #24]
 800a3d6:	4498      	add	r8, r3
 800a3d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	db15      	blt.n	800a40c <_printf_float+0x344>
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	07da      	lsls	r2, r3, #31
 800a3e4:	d412      	bmi.n	800a40c <_printf_float+0x344>
 800a3e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e8:	9a06      	ldr	r2, [sp, #24]
 800a3ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3ec:	1a9a      	subs	r2, r3, r2
 800a3ee:	eba3 0a01 	sub.w	sl, r3, r1
 800a3f2:	4592      	cmp	sl, r2
 800a3f4:	bfa8      	it	ge
 800a3f6:	4692      	movge	sl, r2
 800a3f8:	f1ba 0f00 	cmp.w	sl, #0
 800a3fc:	dc0e      	bgt.n	800a41c <_printf_float+0x354>
 800a3fe:	f04f 0800 	mov.w	r8, #0
 800a402:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a406:	f104 091a 	add.w	r9, r4, #26
 800a40a:	e019      	b.n	800a440 <_printf_float+0x378>
 800a40c:	9b05      	ldr	r3, [sp, #20]
 800a40e:	465a      	mov	r2, fp
 800a410:	4631      	mov	r1, r6
 800a412:	4628      	mov	r0, r5
 800a414:	47b8      	blx	r7
 800a416:	3001      	adds	r0, #1
 800a418:	d1e5      	bne.n	800a3e6 <_printf_float+0x31e>
 800a41a:	e6a3      	b.n	800a164 <_printf_float+0x9c>
 800a41c:	4653      	mov	r3, sl
 800a41e:	4642      	mov	r2, r8
 800a420:	4631      	mov	r1, r6
 800a422:	4628      	mov	r0, r5
 800a424:	47b8      	blx	r7
 800a426:	3001      	adds	r0, #1
 800a428:	d1e9      	bne.n	800a3fe <_printf_float+0x336>
 800a42a:	e69b      	b.n	800a164 <_printf_float+0x9c>
 800a42c:	2301      	movs	r3, #1
 800a42e:	464a      	mov	r2, r9
 800a430:	4631      	mov	r1, r6
 800a432:	4628      	mov	r0, r5
 800a434:	47b8      	blx	r7
 800a436:	3001      	adds	r0, #1
 800a438:	f43f ae94 	beq.w	800a164 <_printf_float+0x9c>
 800a43c:	f108 0801 	add.w	r8, r8, #1
 800a440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a444:	1a9b      	subs	r3, r3, r2
 800a446:	eba3 030a 	sub.w	r3, r3, sl
 800a44a:	4543      	cmp	r3, r8
 800a44c:	dcee      	bgt.n	800a42c <_printf_float+0x364>
 800a44e:	e747      	b.n	800a2e0 <_printf_float+0x218>
 800a450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a452:	2a01      	cmp	r2, #1
 800a454:	dc01      	bgt.n	800a45a <_printf_float+0x392>
 800a456:	07db      	lsls	r3, r3, #31
 800a458:	d539      	bpl.n	800a4ce <_printf_float+0x406>
 800a45a:	2301      	movs	r3, #1
 800a45c:	4642      	mov	r2, r8
 800a45e:	4631      	mov	r1, r6
 800a460:	4628      	mov	r0, r5
 800a462:	47b8      	blx	r7
 800a464:	3001      	adds	r0, #1
 800a466:	f43f ae7d 	beq.w	800a164 <_printf_float+0x9c>
 800a46a:	9b05      	ldr	r3, [sp, #20]
 800a46c:	465a      	mov	r2, fp
 800a46e:	4631      	mov	r1, r6
 800a470:	4628      	mov	r0, r5
 800a472:	47b8      	blx	r7
 800a474:	3001      	adds	r0, #1
 800a476:	f108 0801 	add.w	r8, r8, #1
 800a47a:	f43f ae73 	beq.w	800a164 <_printf_float+0x9c>
 800a47e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a484:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a48c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a490:	d018      	beq.n	800a4c4 <_printf_float+0x3fc>
 800a492:	4642      	mov	r2, r8
 800a494:	4631      	mov	r1, r6
 800a496:	4628      	mov	r0, r5
 800a498:	47b8      	blx	r7
 800a49a:	3001      	adds	r0, #1
 800a49c:	d10e      	bne.n	800a4bc <_printf_float+0x3f4>
 800a49e:	e661      	b.n	800a164 <_printf_float+0x9c>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	464a      	mov	r2, r9
 800a4a4:	4631      	mov	r1, r6
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	47b8      	blx	r7
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	f43f ae5a 	beq.w	800a164 <_printf_float+0x9c>
 800a4b0:	f108 0801 	add.w	r8, r8, #1
 800a4b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	4543      	cmp	r3, r8
 800a4ba:	dcf1      	bgt.n	800a4a0 <_printf_float+0x3d8>
 800a4bc:	4653      	mov	r3, sl
 800a4be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a4c2:	e6dd      	b.n	800a280 <_printf_float+0x1b8>
 800a4c4:	f04f 0800 	mov.w	r8, #0
 800a4c8:	f104 091a 	add.w	r9, r4, #26
 800a4cc:	e7f2      	b.n	800a4b4 <_printf_float+0x3ec>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e7df      	b.n	800a492 <_printf_float+0x3ca>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	464a      	mov	r2, r9
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	4628      	mov	r0, r5
 800a4da:	47b8      	blx	r7
 800a4dc:	3001      	adds	r0, #1
 800a4de:	f43f ae41 	beq.w	800a164 <_printf_float+0x9c>
 800a4e2:	f108 0801 	add.w	r8, r8, #1
 800a4e6:	68e3      	ldr	r3, [r4, #12]
 800a4e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4ea:	1a9b      	subs	r3, r3, r2
 800a4ec:	4543      	cmp	r3, r8
 800a4ee:	dcf0      	bgt.n	800a4d2 <_printf_float+0x40a>
 800a4f0:	e6fa      	b.n	800a2e8 <_printf_float+0x220>
 800a4f2:	f04f 0800 	mov.w	r8, #0
 800a4f6:	f104 0919 	add.w	r9, r4, #25
 800a4fa:	e7f4      	b.n	800a4e6 <_printf_float+0x41e>
 800a4fc:	2900      	cmp	r1, #0
 800a4fe:	f43f ae8a 	beq.w	800a216 <_printf_float+0x14e>
 800a502:	f04f 0c00 	mov.w	ip, #0
 800a506:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800a50a:	e9cd 0900 	strd	r0, r9, [sp]
 800a50e:	6022      	str	r2, [r4, #0]
 800a510:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a514:	4628      	mov	r0, r5
 800a516:	f7ff fd4f 	bl	8009fb8 <__cvt>
 800a51a:	4680      	mov	r8, r0
 800a51c:	e64a      	b.n	800a1b4 <_printf_float+0xec>
 800a51e:	bf00      	nop

0800a520 <_printf_common>:
 800a520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a524:	4691      	mov	r9, r2
 800a526:	461f      	mov	r7, r3
 800a528:	688a      	ldr	r2, [r1, #8]
 800a52a:	690b      	ldr	r3, [r1, #16]
 800a52c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a530:	4293      	cmp	r3, r2
 800a532:	bfb8      	it	lt
 800a534:	4613      	movlt	r3, r2
 800a536:	f8c9 3000 	str.w	r3, [r9]
 800a53a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a53e:	4606      	mov	r6, r0
 800a540:	460c      	mov	r4, r1
 800a542:	b112      	cbz	r2, 800a54a <_printf_common+0x2a>
 800a544:	3301      	adds	r3, #1
 800a546:	f8c9 3000 	str.w	r3, [r9]
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	0699      	lsls	r1, r3, #26
 800a54e:	bf42      	ittt	mi
 800a550:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a554:	3302      	addmi	r3, #2
 800a556:	f8c9 3000 	strmi.w	r3, [r9]
 800a55a:	6825      	ldr	r5, [r4, #0]
 800a55c:	f015 0506 	ands.w	r5, r5, #6
 800a560:	d107      	bne.n	800a572 <_printf_common+0x52>
 800a562:	f104 0a19 	add.w	sl, r4, #25
 800a566:	68e3      	ldr	r3, [r4, #12]
 800a568:	f8d9 2000 	ldr.w	r2, [r9]
 800a56c:	1a9b      	subs	r3, r3, r2
 800a56e:	42ab      	cmp	r3, r5
 800a570:	dc28      	bgt.n	800a5c4 <_printf_common+0xa4>
 800a572:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a576:	6822      	ldr	r2, [r4, #0]
 800a578:	3300      	adds	r3, #0
 800a57a:	bf18      	it	ne
 800a57c:	2301      	movne	r3, #1
 800a57e:	0692      	lsls	r2, r2, #26
 800a580:	d42d      	bmi.n	800a5de <_printf_common+0xbe>
 800a582:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a586:	4639      	mov	r1, r7
 800a588:	4630      	mov	r0, r6
 800a58a:	47c0      	blx	r8
 800a58c:	3001      	adds	r0, #1
 800a58e:	d020      	beq.n	800a5d2 <_printf_common+0xb2>
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	68e5      	ldr	r5, [r4, #12]
 800a594:	f8d9 2000 	ldr.w	r2, [r9]
 800a598:	f003 0306 	and.w	r3, r3, #6
 800a59c:	2b04      	cmp	r3, #4
 800a59e:	bf08      	it	eq
 800a5a0:	1aad      	subeq	r5, r5, r2
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	6922      	ldr	r2, [r4, #16]
 800a5a6:	bf0c      	ite	eq
 800a5a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5ac:	2500      	movne	r5, #0
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	bfc4      	itt	gt
 800a5b2:	1a9b      	subgt	r3, r3, r2
 800a5b4:	18ed      	addgt	r5, r5, r3
 800a5b6:	f04f 0900 	mov.w	r9, #0
 800a5ba:	341a      	adds	r4, #26
 800a5bc:	454d      	cmp	r5, r9
 800a5be:	d11a      	bne.n	800a5f6 <_printf_common+0xd6>
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	e008      	b.n	800a5d6 <_printf_common+0xb6>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	4652      	mov	r2, sl
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	47c0      	blx	r8
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	d103      	bne.n	800a5da <_printf_common+0xba>
 800a5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5da:	3501      	adds	r5, #1
 800a5dc:	e7c3      	b.n	800a566 <_printf_common+0x46>
 800a5de:	18e1      	adds	r1, r4, r3
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	2030      	movs	r0, #48	; 0x30
 800a5e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5e8:	4422      	add	r2, r4
 800a5ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5f2:	3302      	adds	r3, #2
 800a5f4:	e7c5      	b.n	800a582 <_printf_common+0x62>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	4639      	mov	r1, r7
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	47c0      	blx	r8
 800a600:	3001      	adds	r0, #1
 800a602:	d0e6      	beq.n	800a5d2 <_printf_common+0xb2>
 800a604:	f109 0901 	add.w	r9, r9, #1
 800a608:	e7d8      	b.n	800a5bc <_printf_common+0x9c>
	...

0800a60c <_sbrk_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4c06      	ldr	r4, [pc, #24]	; (800a628 <_sbrk_r+0x1c>)
 800a610:	2300      	movs	r3, #0
 800a612:	4605      	mov	r5, r0
 800a614:	4608      	mov	r0, r1
 800a616:	6023      	str	r3, [r4, #0]
 800a618:	f7fe fffc 	bl	8009614 <_sbrk>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_sbrk_r+0x1a>
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	b103      	cbz	r3, 800a626 <_sbrk_r+0x1a>
 800a624:	602b      	str	r3, [r5, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	2400376c 	.word	0x2400376c

0800a62c <quorem>:
 800a62c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a630:	6903      	ldr	r3, [r0, #16]
 800a632:	690c      	ldr	r4, [r1, #16]
 800a634:	42a3      	cmp	r3, r4
 800a636:	4680      	mov	r8, r0
 800a638:	f2c0 8082 	blt.w	800a740 <quorem+0x114>
 800a63c:	3c01      	subs	r4, #1
 800a63e:	f101 0714 	add.w	r7, r1, #20
 800a642:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a646:	f100 0614 	add.w	r6, r0, #20
 800a64a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a64e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a652:	eb06 030c 	add.w	r3, r6, ip
 800a656:	3501      	adds	r5, #1
 800a658:	eb07 090c 	add.w	r9, r7, ip
 800a65c:	9301      	str	r3, [sp, #4]
 800a65e:	fbb0 f5f5 	udiv	r5, r0, r5
 800a662:	b395      	cbz	r5, 800a6ca <quorem+0x9e>
 800a664:	f04f 0a00 	mov.w	sl, #0
 800a668:	4638      	mov	r0, r7
 800a66a:	46b6      	mov	lr, r6
 800a66c:	46d3      	mov	fp, sl
 800a66e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a672:	b293      	uxth	r3, r2
 800a674:	fb05 a303 	mla	r3, r5, r3, sl
 800a678:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	ebab 0303 	sub.w	r3, fp, r3
 800a682:	0c12      	lsrs	r2, r2, #16
 800a684:	f8de b000 	ldr.w	fp, [lr]
 800a688:	fb05 a202 	mla	r2, r5, r2, sl
 800a68c:	fa13 f38b 	uxtah	r3, r3, fp
 800a690:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a694:	fa1f fb82 	uxth.w	fp, r2
 800a698:	f8de 2000 	ldr.w	r2, [lr]
 800a69c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a6a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6aa:	4581      	cmp	r9, r0
 800a6ac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a6b0:	f84e 3b04 	str.w	r3, [lr], #4
 800a6b4:	d2db      	bcs.n	800a66e <quorem+0x42>
 800a6b6:	f856 300c 	ldr.w	r3, [r6, ip]
 800a6ba:	b933      	cbnz	r3, 800a6ca <quorem+0x9e>
 800a6bc:	9b01      	ldr	r3, [sp, #4]
 800a6be:	3b04      	subs	r3, #4
 800a6c0:	429e      	cmp	r6, r3
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	d330      	bcc.n	800a728 <quorem+0xfc>
 800a6c6:	f8c8 4010 	str.w	r4, [r8, #16]
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	f000 ffae 	bl	800b62c <__mcmp>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	db25      	blt.n	800a720 <quorem+0xf4>
 800a6d4:	3501      	adds	r5, #1
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f04f 0c00 	mov.w	ip, #0
 800a6dc:	f857 2b04 	ldr.w	r2, [r7], #4
 800a6e0:	f8d0 e000 	ldr.w	lr, [r0]
 800a6e4:	b293      	uxth	r3, r2
 800a6e6:	ebac 0303 	sub.w	r3, ip, r3
 800a6ea:	0c12      	lsrs	r2, r2, #16
 800a6ec:	fa13 f38e 	uxtah	r3, r3, lr
 800a6f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6fe:	45b9      	cmp	r9, r7
 800a700:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a704:	f840 3b04 	str.w	r3, [r0], #4
 800a708:	d2e8      	bcs.n	800a6dc <quorem+0xb0>
 800a70a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a70e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a712:	b92a      	cbnz	r2, 800a720 <quorem+0xf4>
 800a714:	3b04      	subs	r3, #4
 800a716:	429e      	cmp	r6, r3
 800a718:	461a      	mov	r2, r3
 800a71a:	d30b      	bcc.n	800a734 <quorem+0x108>
 800a71c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a720:	4628      	mov	r0, r5
 800a722:	b003      	add	sp, #12
 800a724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a728:	6812      	ldr	r2, [r2, #0]
 800a72a:	3b04      	subs	r3, #4
 800a72c:	2a00      	cmp	r2, #0
 800a72e:	d1ca      	bne.n	800a6c6 <quorem+0x9a>
 800a730:	3c01      	subs	r4, #1
 800a732:	e7c5      	b.n	800a6c0 <quorem+0x94>
 800a734:	6812      	ldr	r2, [r2, #0]
 800a736:	3b04      	subs	r3, #4
 800a738:	2a00      	cmp	r2, #0
 800a73a:	d1ef      	bne.n	800a71c <quorem+0xf0>
 800a73c:	3c01      	subs	r4, #1
 800a73e:	e7ea      	b.n	800a716 <quorem+0xea>
 800a740:	2000      	movs	r0, #0
 800a742:	e7ee      	b.n	800a722 <quorem+0xf6>
 800a744:	0000      	movs	r0, r0
	...

0800a748 <_dtoa_r>:
 800a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74c:	ec57 6b10 	vmov	r6, r7, d0
 800a750:	b095      	sub	sp, #84	; 0x54
 800a752:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a754:	9108      	str	r1, [sp, #32]
 800a756:	4604      	mov	r4, r0
 800a758:	920a      	str	r2, [sp, #40]	; 0x28
 800a75a:	9311      	str	r3, [sp, #68]	; 0x44
 800a75c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a760:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a764:	b93d      	cbnz	r5, 800a776 <_dtoa_r+0x2e>
 800a766:	2010      	movs	r0, #16
 800a768:	f7ff fb5a 	bl	8009e20 <malloc>
 800a76c:	6260      	str	r0, [r4, #36]	; 0x24
 800a76e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a772:	6005      	str	r5, [r0, #0]
 800a774:	60c5      	str	r5, [r0, #12]
 800a776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a778:	6819      	ldr	r1, [r3, #0]
 800a77a:	b151      	cbz	r1, 800a792 <_dtoa_r+0x4a>
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	604a      	str	r2, [r1, #4]
 800a780:	2301      	movs	r3, #1
 800a782:	4093      	lsls	r3, r2
 800a784:	608b      	str	r3, [r1, #8]
 800a786:	4620      	mov	r0, r4
 800a788:	f000 fd6e 	bl	800b268 <_Bfree>
 800a78c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a78e:	2200      	movs	r2, #0
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	1e3b      	subs	r3, r7, #0
 800a794:	bfb9      	ittee	lt
 800a796:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a79a:	9303      	strlt	r3, [sp, #12]
 800a79c:	2300      	movge	r3, #0
 800a79e:	f8c8 3000 	strge.w	r3, [r8]
 800a7a2:	9d03      	ldr	r5, [sp, #12]
 800a7a4:	4bac      	ldr	r3, [pc, #688]	; (800aa58 <_dtoa_r+0x310>)
 800a7a6:	bfbc      	itt	lt
 800a7a8:	2201      	movlt	r2, #1
 800a7aa:	f8c8 2000 	strlt.w	r2, [r8]
 800a7ae:	43ab      	bics	r3, r5
 800a7b0:	d11b      	bne.n	800a7ea <_dtoa_r+0xa2>
 800a7b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7b4:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	9b02      	ldr	r3, [sp, #8]
 800a7bc:	b923      	cbnz	r3, 800a7c8 <_dtoa_r+0x80>
 800a7be:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a7c2:	2d00      	cmp	r5, #0
 800a7c4:	f000 84dd 	beq.w	800b182 <_dtoa_r+0xa3a>
 800a7c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a7ca:	b953      	cbnz	r3, 800a7e2 <_dtoa_r+0x9a>
 800a7cc:	4ba3      	ldr	r3, [pc, #652]	; (800aa5c <_dtoa_r+0x314>)
 800a7ce:	e020      	b.n	800a812 <_dtoa_r+0xca>
 800a7d0:	4ba3      	ldr	r3, [pc, #652]	; (800aa60 <_dtoa_r+0x318>)
 800a7d2:	9304      	str	r3, [sp, #16]
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	9804      	ldr	r0, [sp, #16]
 800a7dc:	b015      	add	sp, #84	; 0x54
 800a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e2:	4b9e      	ldr	r3, [pc, #632]	; (800aa5c <_dtoa_r+0x314>)
 800a7e4:	9304      	str	r3, [sp, #16]
 800a7e6:	3303      	adds	r3, #3
 800a7e8:	e7f5      	b.n	800a7d6 <_dtoa_r+0x8e>
 800a7ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a7fa:	d10c      	bne.n	800a816 <_dtoa_r+0xce>
 800a7fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7fe:	2301      	movs	r3, #1
 800a800:	6013      	str	r3, [r2, #0]
 800a802:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 84b9 	beq.w	800b17c <_dtoa_r+0xa34>
 800a80a:	4b96      	ldr	r3, [pc, #600]	; (800aa64 <_dtoa_r+0x31c>)
 800a80c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	3b01      	subs	r3, #1
 800a812:	9304      	str	r3, [sp, #16]
 800a814:	e7e1      	b.n	800a7da <_dtoa_r+0x92>
 800a816:	a913      	add	r1, sp, #76	; 0x4c
 800a818:	aa12      	add	r2, sp, #72	; 0x48
 800a81a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 ff7b 	bl	800b71a <__d2b>
 800a824:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800a828:	9001      	str	r0, [sp, #4]
 800a82a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a82c:	2e00      	cmp	r6, #0
 800a82e:	d046      	beq.n	800a8be <_dtoa_r+0x176>
 800a830:	9805      	ldr	r0, [sp, #20]
 800a832:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800a836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a83a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800a83e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a842:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800a846:	2700      	movs	r7, #0
 800a848:	ee07 aa90 	vmov	s15, sl
 800a84c:	ec43 2b16 	vmov	d6, r2, r3
 800a850:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a854:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800aa40 <_dtoa_r+0x2f8>
 800a858:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a85c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a860:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800aa48 <_dtoa_r+0x300>
 800a864:	eea7 6b04 	vfma.f64	d6, d7, d4
 800a868:	eeb0 7b46 	vmov.f64	d7, d6
 800a86c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800aa50 <_dtoa_r+0x308>
 800a870:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a874:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a878:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a880:	ee16 ba90 	vmov	fp, s13
 800a884:	d508      	bpl.n	800a898 <_dtoa_r+0x150>
 800a886:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a88a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a892:	bf18      	it	ne
 800a894:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a898:	f1bb 0f16 	cmp.w	fp, #22
 800a89c:	d834      	bhi.n	800a908 <_dtoa_r+0x1c0>
 800a89e:	4b72      	ldr	r3, [pc, #456]	; (800aa68 <_dtoa_r+0x320>)
 800a8a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a8a4:	ed93 7b00 	vldr	d7, [r3]
 800a8a8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a8ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b4:	dd01      	ble.n	800a8ba <_dtoa_r+0x172>
 800a8b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	e025      	b.n	800a90a <_dtoa_r+0x1c2>
 800a8be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8c0:	eb01 0a03 	add.w	sl, r1, r3
 800a8c4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800a8c8:	2b20      	cmp	r3, #32
 800a8ca:	dd17      	ble.n	800a8fc <_dtoa_r+0x1b4>
 800a8cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800a8d0:	9a02      	ldr	r2, [sp, #8]
 800a8d2:	409d      	lsls	r5, r3
 800a8d4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800a8d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8dc:	432b      	orrs	r3, r5
 800a8de:	ee07 3a90 	vmov	s15, r3
 800a8e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a8e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a8ee:	9805      	ldr	r0, [sp, #20]
 800a8f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8f4:	2701      	movs	r7, #1
 800a8f6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800a8fa:	e7a5      	b.n	800a848 <_dtoa_r+0x100>
 800a8fc:	9a02      	ldr	r2, [sp, #8]
 800a8fe:	f1c3 0320 	rsb	r3, r3, #32
 800a902:	fa02 f303 	lsl.w	r3, r2, r3
 800a906:	e7ea      	b.n	800a8de <_dtoa_r+0x196>
 800a908:	2301      	movs	r3, #1
 800a90a:	eba1 0a0a 	sub.w	sl, r1, sl
 800a90e:	9310      	str	r3, [sp, #64]	; 0x40
 800a910:	f1ba 0301 	subs.w	r3, sl, #1
 800a914:	9307      	str	r3, [sp, #28]
 800a916:	bf43      	ittte	mi
 800a918:	2300      	movmi	r3, #0
 800a91a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800a91e:	9307      	strmi	r3, [sp, #28]
 800a920:	f04f 0a00 	movpl.w	sl, #0
 800a924:	f1bb 0f00 	cmp.w	fp, #0
 800a928:	db19      	blt.n	800a95e <_dtoa_r+0x216>
 800a92a:	9b07      	ldr	r3, [sp, #28]
 800a92c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a930:	445b      	add	r3, fp
 800a932:	9307      	str	r3, [sp, #28]
 800a934:	f04f 0800 	mov.w	r8, #0
 800a938:	9b08      	ldr	r3, [sp, #32]
 800a93a:	2b09      	cmp	r3, #9
 800a93c:	d866      	bhi.n	800aa0c <_dtoa_r+0x2c4>
 800a93e:	2b05      	cmp	r3, #5
 800a940:	bfc4      	itt	gt
 800a942:	3b04      	subgt	r3, #4
 800a944:	9308      	strgt	r3, [sp, #32]
 800a946:	9b08      	ldr	r3, [sp, #32]
 800a948:	f1a3 0302 	sub.w	r3, r3, #2
 800a94c:	bfcc      	ite	gt
 800a94e:	2500      	movgt	r5, #0
 800a950:	2501      	movle	r5, #1
 800a952:	2b03      	cmp	r3, #3
 800a954:	d866      	bhi.n	800aa24 <_dtoa_r+0x2dc>
 800a956:	e8df f003 	tbb	[pc, r3]
 800a95a:	5755      	.short	0x5755
 800a95c:	4909      	.short	0x4909
 800a95e:	2300      	movs	r3, #0
 800a960:	ebaa 0a0b 	sub.w	sl, sl, fp
 800a964:	f1cb 0800 	rsb	r8, fp, #0
 800a968:	930b      	str	r3, [sp, #44]	; 0x2c
 800a96a:	e7e5      	b.n	800a938 <_dtoa_r+0x1f0>
 800a96c:	2301      	movs	r3, #1
 800a96e:	9309      	str	r3, [sp, #36]	; 0x24
 800a970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a972:	2b00      	cmp	r3, #0
 800a974:	dd59      	ble.n	800aa2a <_dtoa_r+0x2e2>
 800a976:	9306      	str	r3, [sp, #24]
 800a978:	4699      	mov	r9, r3
 800a97a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a97c:	2200      	movs	r2, #0
 800a97e:	6072      	str	r2, [r6, #4]
 800a980:	2204      	movs	r2, #4
 800a982:	f102 0014 	add.w	r0, r2, #20
 800a986:	4298      	cmp	r0, r3
 800a988:	6871      	ldr	r1, [r6, #4]
 800a98a:	d953      	bls.n	800aa34 <_dtoa_r+0x2ec>
 800a98c:	4620      	mov	r0, r4
 800a98e:	f000 fc37 	bl	800b200 <_Balloc>
 800a992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a994:	6030      	str	r0, [r6, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	f1b9 0f0e 	cmp.w	r9, #14
 800a99e:	f200 80c2 	bhi.w	800ab26 <_dtoa_r+0x3de>
 800a9a2:	2d00      	cmp	r5, #0
 800a9a4:	f000 80bf 	beq.w	800ab26 <_dtoa_r+0x3de>
 800a9a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9ac:	f1bb 0f00 	cmp.w	fp, #0
 800a9b0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800a9b4:	f340 80e6 	ble.w	800ab84 <_dtoa_r+0x43c>
 800a9b8:	4a2b      	ldr	r2, [pc, #172]	; (800aa68 <_dtoa_r+0x320>)
 800a9ba:	f00b 030f 	and.w	r3, fp, #15
 800a9be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9c2:	ed93 7b00 	vldr	d7, [r3]
 800a9c6:	ea4f 132b 	mov.w	r3, fp, asr #4
 800a9ca:	06da      	lsls	r2, r3, #27
 800a9cc:	f140 80d8 	bpl.w	800ab80 <_dtoa_r+0x438>
 800a9d0:	4a26      	ldr	r2, [pc, #152]	; (800aa6c <_dtoa_r+0x324>)
 800a9d2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800a9d6:	ed92 6b08 	vldr	d6, [r2, #32]
 800a9da:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a9de:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a9e2:	f003 030f 	and.w	r3, r3, #15
 800a9e6:	2203      	movs	r2, #3
 800a9e8:	4920      	ldr	r1, [pc, #128]	; (800aa6c <_dtoa_r+0x324>)
 800a9ea:	e04a      	b.n	800aa82 <_dtoa_r+0x33a>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f2:	445b      	add	r3, fp
 800a9f4:	f103 0901 	add.w	r9, r3, #1
 800a9f8:	9306      	str	r3, [sp, #24]
 800a9fa:	464b      	mov	r3, r9
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	bfb8      	it	lt
 800aa00:	2301      	movlt	r3, #1
 800aa02:	e7ba      	b.n	800a97a <_dtoa_r+0x232>
 800aa04:	2300      	movs	r3, #0
 800aa06:	e7b2      	b.n	800a96e <_dtoa_r+0x226>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e7f0      	b.n	800a9ee <_dtoa_r+0x2a6>
 800aa0c:	2501      	movs	r5, #1
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800aa14:	f04f 33ff 	mov.w	r3, #4294967295
 800aa18:	9306      	str	r3, [sp, #24]
 800aa1a:	4699      	mov	r9, r3
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	2312      	movs	r3, #18
 800aa20:	920a      	str	r2, [sp, #40]	; 0x28
 800aa22:	e7aa      	b.n	800a97a <_dtoa_r+0x232>
 800aa24:	2301      	movs	r3, #1
 800aa26:	9309      	str	r3, [sp, #36]	; 0x24
 800aa28:	e7f4      	b.n	800aa14 <_dtoa_r+0x2cc>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	9306      	str	r3, [sp, #24]
 800aa2e:	4699      	mov	r9, r3
 800aa30:	461a      	mov	r2, r3
 800aa32:	e7f5      	b.n	800aa20 <_dtoa_r+0x2d8>
 800aa34:	3101      	adds	r1, #1
 800aa36:	6071      	str	r1, [r6, #4]
 800aa38:	0052      	lsls	r2, r2, #1
 800aa3a:	e7a2      	b.n	800a982 <_dtoa_r+0x23a>
 800aa3c:	f3af 8000 	nop.w
 800aa40:	636f4361 	.word	0x636f4361
 800aa44:	3fd287a7 	.word	0x3fd287a7
 800aa48:	8b60c8b3 	.word	0x8b60c8b3
 800aa4c:	3fc68a28 	.word	0x3fc68a28
 800aa50:	509f79fb 	.word	0x509f79fb
 800aa54:	3fd34413 	.word	0x3fd34413
 800aa58:	7ff00000 	.word	0x7ff00000
 800aa5c:	0800b957 	.word	0x0800b957
 800aa60:	0800b94e 	.word	0x0800b94e
 800aa64:	0800b94d 	.word	0x0800b94d
 800aa68:	0800b988 	.word	0x0800b988
 800aa6c:	0800b960 	.word	0x0800b960
 800aa70:	07de      	lsls	r6, r3, #31
 800aa72:	d504      	bpl.n	800aa7e <_dtoa_r+0x336>
 800aa74:	ed91 6b00 	vldr	d6, [r1]
 800aa78:	3201      	adds	r2, #1
 800aa7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa7e:	105b      	asrs	r3, r3, #1
 800aa80:	3108      	adds	r1, #8
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1f4      	bne.n	800aa70 <_dtoa_r+0x328>
 800aa86:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aa8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800aa8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 80a7 	beq.w	800abe8 <_dtoa_r+0x4a0>
 800aa9a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800aa9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aaa2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aaa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaaa:	f140 809d 	bpl.w	800abe8 <_dtoa_r+0x4a0>
 800aaae:	f1b9 0f00 	cmp.w	r9, #0
 800aab2:	f000 8099 	beq.w	800abe8 <_dtoa_r+0x4a0>
 800aab6:	9b06      	ldr	r3, [sp, #24]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	dd30      	ble.n	800ab1e <_dtoa_r+0x3d6>
 800aabc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800aac0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aac4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aac8:	9d06      	ldr	r5, [sp, #24]
 800aaca:	f10b 33ff 	add.w	r3, fp, #4294967295
 800aace:	3201      	adds	r2, #1
 800aad0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aad4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800aad8:	ee07 2a90 	vmov	s15, r2
 800aadc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aae0:	eea7 5b06 	vfma.f64	d5, d7, d6
 800aae4:	ed8d 5b02 	vstr	d5, [sp, #8]
 800aae8:	9a03      	ldr	r2, [sp, #12]
 800aaea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaee:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800aaf2:	2d00      	cmp	r5, #0
 800aaf4:	d17b      	bne.n	800abee <_dtoa_r+0x4a6>
 800aaf6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800aafa:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aafe:	ec41 0b17 	vmov	d7, r0, r1
 800ab02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab0a:	f300 8253 	bgt.w	800afb4 <_dtoa_r+0x86c>
 800ab0e:	eeb1 7b47 	vneg.f64	d7, d7
 800ab12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab1a:	f100 8249 	bmi.w	800afb0 <_dtoa_r+0x868>
 800ab1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ab22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f2c0 8119 	blt.w	800ad60 <_dtoa_r+0x618>
 800ab2e:	f1bb 0f0e 	cmp.w	fp, #14
 800ab32:	f300 8115 	bgt.w	800ad60 <_dtoa_r+0x618>
 800ab36:	4bc3      	ldr	r3, [pc, #780]	; (800ae44 <_dtoa_r+0x6fc>)
 800ab38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab3c:	ed93 6b00 	vldr	d6, [r3]
 800ab40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f280 80ba 	bge.w	800acbc <_dtoa_r+0x574>
 800ab48:	f1b9 0f00 	cmp.w	r9, #0
 800ab4c:	f300 80b6 	bgt.w	800acbc <_dtoa_r+0x574>
 800ab50:	f040 822d 	bne.w	800afae <_dtoa_r+0x866>
 800ab54:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ab58:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ab5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab68:	464d      	mov	r5, r9
 800ab6a:	464f      	mov	r7, r9
 800ab6c:	f280 8204 	bge.w	800af78 <_dtoa_r+0x830>
 800ab70:	9b04      	ldr	r3, [sp, #16]
 800ab72:	9a04      	ldr	r2, [sp, #16]
 800ab74:	1c5e      	adds	r6, r3, #1
 800ab76:	2331      	movs	r3, #49	; 0x31
 800ab78:	7013      	strb	r3, [r2, #0]
 800ab7a:	f10b 0b01 	add.w	fp, fp, #1
 800ab7e:	e1ff      	b.n	800af80 <_dtoa_r+0x838>
 800ab80:	2202      	movs	r2, #2
 800ab82:	e731      	b.n	800a9e8 <_dtoa_r+0x2a0>
 800ab84:	d02e      	beq.n	800abe4 <_dtoa_r+0x49c>
 800ab86:	f1cb 0300 	rsb	r3, fp, #0
 800ab8a:	4aae      	ldr	r2, [pc, #696]	; (800ae44 <_dtoa_r+0x6fc>)
 800ab8c:	f003 010f 	and.w	r1, r3, #15
 800ab90:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ab94:	ed92 7b00 	vldr	d7, [r2]
 800ab98:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800ab9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800aba0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800aba4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800aba8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800abac:	49a6      	ldr	r1, [pc, #664]	; (800ae48 <_dtoa_r+0x700>)
 800abae:	111b      	asrs	r3, r3, #4
 800abb0:	2000      	movs	r0, #0
 800abb2:	2202      	movs	r2, #2
 800abb4:	b93b      	cbnz	r3, 800abc6 <_dtoa_r+0x47e>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	f43f af6b 	beq.w	800aa92 <_dtoa_r+0x34a>
 800abbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800abc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abc4:	e765      	b.n	800aa92 <_dtoa_r+0x34a>
 800abc6:	07dd      	lsls	r5, r3, #31
 800abc8:	d509      	bpl.n	800abde <_dtoa_r+0x496>
 800abca:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800abce:	ed91 7b00 	vldr	d7, [r1]
 800abd2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800abd6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800abda:	3201      	adds	r2, #1
 800abdc:	2001      	movs	r0, #1
 800abde:	105b      	asrs	r3, r3, #1
 800abe0:	3108      	adds	r1, #8
 800abe2:	e7e7      	b.n	800abb4 <_dtoa_r+0x46c>
 800abe4:	2202      	movs	r2, #2
 800abe6:	e754      	b.n	800aa92 <_dtoa_r+0x34a>
 800abe8:	465b      	mov	r3, fp
 800abea:	464d      	mov	r5, r9
 800abec:	e770      	b.n	800aad0 <_dtoa_r+0x388>
 800abee:	4a95      	ldr	r2, [pc, #596]	; (800ae44 <_dtoa_r+0x6fc>)
 800abf0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800abf4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800abf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abfa:	ec41 0b17 	vmov	d7, r0, r1
 800abfe:	b35a      	cbz	r2, 800ac58 <_dtoa_r+0x510>
 800ac00:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ac04:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ac08:	9e04      	ldr	r6, [sp, #16]
 800ac0a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ac0e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ac12:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ac16:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ac1a:	ee14 2a90 	vmov	r2, s9
 800ac1e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ac22:	3230      	adds	r2, #48	; 0x30
 800ac24:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ac28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac30:	f806 2b01 	strb.w	r2, [r6], #1
 800ac34:	d43b      	bmi.n	800acae <_dtoa_r+0x566>
 800ac36:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ac3a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ac3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac42:	d472      	bmi.n	800ad2a <_dtoa_r+0x5e2>
 800ac44:	9a04      	ldr	r2, [sp, #16]
 800ac46:	1ab2      	subs	r2, r6, r2
 800ac48:	4295      	cmp	r5, r2
 800ac4a:	f77f af68 	ble.w	800ab1e <_dtoa_r+0x3d6>
 800ac4e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ac52:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ac56:	e7de      	b.n	800ac16 <_dtoa_r+0x4ce>
 800ac58:	9a04      	ldr	r2, [sp, #16]
 800ac5a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ac5e:	1956      	adds	r6, r2, r5
 800ac60:	4611      	mov	r1, r2
 800ac62:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ac66:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ac6a:	ee14 2a90 	vmov	r2, s9
 800ac6e:	3230      	adds	r2, #48	; 0x30
 800ac70:	f801 2b01 	strb.w	r2, [r1], #1
 800ac74:	42b1      	cmp	r1, r6
 800ac76:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ac7a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ac7e:	d11a      	bne.n	800acb6 <_dtoa_r+0x56e>
 800ac80:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ac84:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ac88:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ac8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac90:	dc4b      	bgt.n	800ad2a <_dtoa_r+0x5e2>
 800ac92:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ac96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9e:	f57f af3e 	bpl.w	800ab1e <_dtoa_r+0x3d6>
 800aca2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aca6:	2a30      	cmp	r2, #48	; 0x30
 800aca8:	f106 31ff 	add.w	r1, r6, #4294967295
 800acac:	d001      	beq.n	800acb2 <_dtoa_r+0x56a>
 800acae:	469b      	mov	fp, r3
 800acb0:	e02a      	b.n	800ad08 <_dtoa_r+0x5c0>
 800acb2:	460e      	mov	r6, r1
 800acb4:	e7f5      	b.n	800aca2 <_dtoa_r+0x55a>
 800acb6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800acba:	e7d4      	b.n	800ac66 <_dtoa_r+0x51e>
 800acbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800acc0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800acc4:	9e04      	ldr	r6, [sp, #16]
 800acc6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800acca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800acce:	ee15 3a10 	vmov	r3, s10
 800acd2:	3330      	adds	r3, #48	; 0x30
 800acd4:	f806 3b01 	strb.w	r3, [r6], #1
 800acd8:	9b04      	ldr	r3, [sp, #16]
 800acda:	1af3      	subs	r3, r6, r3
 800acdc:	4599      	cmp	r9, r3
 800acde:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ace2:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ace6:	d133      	bne.n	800ad50 <_dtoa_r+0x608>
 800ace8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800acec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800acf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf4:	dc18      	bgt.n	800ad28 <_dtoa_r+0x5e0>
 800acf6:	eeb4 7b46 	vcmp.f64	d7, d6
 800acfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfe:	d103      	bne.n	800ad08 <_dtoa_r+0x5c0>
 800ad00:	ee15 3a10 	vmov	r3, s10
 800ad04:	07db      	lsls	r3, r3, #31
 800ad06:	d40f      	bmi.n	800ad28 <_dtoa_r+0x5e0>
 800ad08:	9901      	ldr	r1, [sp, #4]
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f000 faac 	bl	800b268 <_Bfree>
 800ad10:	2300      	movs	r3, #0
 800ad12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ad14:	7033      	strb	r3, [r6, #0]
 800ad16:	f10b 0301 	add.w	r3, fp, #1
 800ad1a:	6013      	str	r3, [r2, #0]
 800ad1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f43f ad5b 	beq.w	800a7da <_dtoa_r+0x92>
 800ad24:	601e      	str	r6, [r3, #0]
 800ad26:	e558      	b.n	800a7da <_dtoa_r+0x92>
 800ad28:	465b      	mov	r3, fp
 800ad2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad2e:	2939      	cmp	r1, #57	; 0x39
 800ad30:	f106 32ff 	add.w	r2, r6, #4294967295
 800ad34:	d106      	bne.n	800ad44 <_dtoa_r+0x5fc>
 800ad36:	9904      	ldr	r1, [sp, #16]
 800ad38:	4291      	cmp	r1, r2
 800ad3a:	d107      	bne.n	800ad4c <_dtoa_r+0x604>
 800ad3c:	2230      	movs	r2, #48	; 0x30
 800ad3e:	700a      	strb	r2, [r1, #0]
 800ad40:	3301      	adds	r3, #1
 800ad42:	460a      	mov	r2, r1
 800ad44:	7811      	ldrb	r1, [r2, #0]
 800ad46:	3101      	adds	r1, #1
 800ad48:	7011      	strb	r1, [r2, #0]
 800ad4a:	e7b0      	b.n	800acae <_dtoa_r+0x566>
 800ad4c:	4616      	mov	r6, r2
 800ad4e:	e7ec      	b.n	800ad2a <_dtoa_r+0x5e2>
 800ad50:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ad54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ad58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad5c:	d1b3      	bne.n	800acc6 <_dtoa_r+0x57e>
 800ad5e:	e7d3      	b.n	800ad08 <_dtoa_r+0x5c0>
 800ad60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad62:	2a00      	cmp	r2, #0
 800ad64:	f000 808d 	beq.w	800ae82 <_dtoa_r+0x73a>
 800ad68:	9a08      	ldr	r2, [sp, #32]
 800ad6a:	2a01      	cmp	r2, #1
 800ad6c:	dc72      	bgt.n	800ae54 <_dtoa_r+0x70c>
 800ad6e:	2f00      	cmp	r7, #0
 800ad70:	d06c      	beq.n	800ae4c <_dtoa_r+0x704>
 800ad72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad76:	4645      	mov	r5, r8
 800ad78:	4656      	mov	r6, sl
 800ad7a:	9a07      	ldr	r2, [sp, #28]
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	441a      	add	r2, r3
 800ad80:	4620      	mov	r0, r4
 800ad82:	449a      	add	sl, r3
 800ad84:	9207      	str	r2, [sp, #28]
 800ad86:	f000 fb0f 	bl	800b3a8 <__i2b>
 800ad8a:	4607      	mov	r7, r0
 800ad8c:	2e00      	cmp	r6, #0
 800ad8e:	dd0b      	ble.n	800ada8 <_dtoa_r+0x660>
 800ad90:	9b07      	ldr	r3, [sp, #28]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	dd08      	ble.n	800ada8 <_dtoa_r+0x660>
 800ad96:	42b3      	cmp	r3, r6
 800ad98:	9a07      	ldr	r2, [sp, #28]
 800ad9a:	bfa8      	it	ge
 800ad9c:	4633      	movge	r3, r6
 800ad9e:	ebaa 0a03 	sub.w	sl, sl, r3
 800ada2:	1af6      	subs	r6, r6, r3
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	9307      	str	r3, [sp, #28]
 800ada8:	f1b8 0f00 	cmp.w	r8, #0
 800adac:	d01d      	beq.n	800adea <_dtoa_r+0x6a2>
 800adae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d06a      	beq.n	800ae8a <_dtoa_r+0x742>
 800adb4:	b18d      	cbz	r5, 800adda <_dtoa_r+0x692>
 800adb6:	4639      	mov	r1, r7
 800adb8:	462a      	mov	r2, r5
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 fb94 	bl	800b4e8 <__pow5mult>
 800adc0:	9a01      	ldr	r2, [sp, #4]
 800adc2:	4601      	mov	r1, r0
 800adc4:	4607      	mov	r7, r0
 800adc6:	4620      	mov	r0, r4
 800adc8:	f000 faf7 	bl	800b3ba <__multiply>
 800adcc:	9901      	ldr	r1, [sp, #4]
 800adce:	900c      	str	r0, [sp, #48]	; 0x30
 800add0:	4620      	mov	r0, r4
 800add2:	f000 fa49 	bl	800b268 <_Bfree>
 800add6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	ebb8 0205 	subs.w	r2, r8, r5
 800adde:	d004      	beq.n	800adea <_dtoa_r+0x6a2>
 800ade0:	9901      	ldr	r1, [sp, #4]
 800ade2:	4620      	mov	r0, r4
 800ade4:	f000 fb80 	bl	800b4e8 <__pow5mult>
 800ade8:	9001      	str	r0, [sp, #4]
 800adea:	2101      	movs	r1, #1
 800adec:	4620      	mov	r0, r4
 800adee:	f000 fadb 	bl	800b3a8 <__i2b>
 800adf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adf4:	4605      	mov	r5, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 81ca 	beq.w	800b190 <_dtoa_r+0xa48>
 800adfc:	461a      	mov	r2, r3
 800adfe:	4601      	mov	r1, r0
 800ae00:	4620      	mov	r0, r4
 800ae02:	f000 fb71 	bl	800b4e8 <__pow5mult>
 800ae06:	9b08      	ldr	r3, [sp, #32]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	dc44      	bgt.n	800ae98 <_dtoa_r+0x750>
 800ae0e:	9b02      	ldr	r3, [sp, #8]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d13c      	bne.n	800ae8e <_dtoa_r+0x746>
 800ae14:	9b03      	ldr	r3, [sp, #12]
 800ae16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d137      	bne.n	800ae8e <_dtoa_r+0x746>
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae24:	0d1b      	lsrs	r3, r3, #20
 800ae26:	051b      	lsls	r3, r3, #20
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d033      	beq.n	800ae94 <_dtoa_r+0x74c>
 800ae2c:	9b07      	ldr	r3, [sp, #28]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	f10a 0a01 	add.w	sl, sl, #1
 800ae34:	9307      	str	r3, [sp, #28]
 800ae36:	f04f 0801 	mov.w	r8, #1
 800ae3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae3c:	bb73      	cbnz	r3, 800ae9c <_dtoa_r+0x754>
 800ae3e:	2001      	movs	r0, #1
 800ae40:	e034      	b.n	800aeac <_dtoa_r+0x764>
 800ae42:	bf00      	nop
 800ae44:	0800b988 	.word	0x0800b988
 800ae48:	0800b960 	.word	0x0800b960
 800ae4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae52:	e790      	b.n	800ad76 <_dtoa_r+0x62e>
 800ae54:	f109 35ff 	add.w	r5, r9, #4294967295
 800ae58:	45a8      	cmp	r8, r5
 800ae5a:	bfbf      	itttt	lt
 800ae5c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800ae5e:	eba5 0808 	sublt.w	r8, r5, r8
 800ae62:	4443      	addlt	r3, r8
 800ae64:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800ae66:	bfb6      	itet	lt
 800ae68:	46a8      	movlt	r8, r5
 800ae6a:	eba8 0505 	subge.w	r5, r8, r5
 800ae6e:	2500      	movlt	r5, #0
 800ae70:	f1b9 0f00 	cmp.w	r9, #0
 800ae74:	bfb9      	ittee	lt
 800ae76:	ebaa 0609 	sublt.w	r6, sl, r9
 800ae7a:	2300      	movlt	r3, #0
 800ae7c:	4656      	movge	r6, sl
 800ae7e:	464b      	movge	r3, r9
 800ae80:	e77b      	b.n	800ad7a <_dtoa_r+0x632>
 800ae82:	4645      	mov	r5, r8
 800ae84:	4656      	mov	r6, sl
 800ae86:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ae88:	e780      	b.n	800ad8c <_dtoa_r+0x644>
 800ae8a:	4642      	mov	r2, r8
 800ae8c:	e7a8      	b.n	800ade0 <_dtoa_r+0x698>
 800ae8e:	f04f 0800 	mov.w	r8, #0
 800ae92:	e7d2      	b.n	800ae3a <_dtoa_r+0x6f2>
 800ae94:	4698      	mov	r8, r3
 800ae96:	e7d0      	b.n	800ae3a <_dtoa_r+0x6f2>
 800ae98:	f04f 0800 	mov.w	r8, #0
 800ae9c:	692b      	ldr	r3, [r5, #16]
 800ae9e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aea2:	6918      	ldr	r0, [r3, #16]
 800aea4:	f000 fa32 	bl	800b30c <__hi0bits>
 800aea8:	f1c0 0020 	rsb	r0, r0, #32
 800aeac:	9b07      	ldr	r3, [sp, #28]
 800aeae:	4418      	add	r0, r3
 800aeb0:	f010 001f 	ands.w	r0, r0, #31
 800aeb4:	d047      	beq.n	800af46 <_dtoa_r+0x7fe>
 800aeb6:	f1c0 0320 	rsb	r3, r0, #32
 800aeba:	2b04      	cmp	r3, #4
 800aebc:	dd3b      	ble.n	800af36 <_dtoa_r+0x7ee>
 800aebe:	9b07      	ldr	r3, [sp, #28]
 800aec0:	f1c0 001c 	rsb	r0, r0, #28
 800aec4:	4482      	add	sl, r0
 800aec6:	4406      	add	r6, r0
 800aec8:	4403      	add	r3, r0
 800aeca:	9307      	str	r3, [sp, #28]
 800aecc:	f1ba 0f00 	cmp.w	sl, #0
 800aed0:	dd05      	ble.n	800aede <_dtoa_r+0x796>
 800aed2:	4652      	mov	r2, sl
 800aed4:	9901      	ldr	r1, [sp, #4]
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 fb54 	bl	800b584 <__lshift>
 800aedc:	9001      	str	r0, [sp, #4]
 800aede:	9b07      	ldr	r3, [sp, #28]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	dd05      	ble.n	800aef0 <_dtoa_r+0x7a8>
 800aee4:	4629      	mov	r1, r5
 800aee6:	461a      	mov	r2, r3
 800aee8:	4620      	mov	r0, r4
 800aeea:	f000 fb4b 	bl	800b584 <__lshift>
 800aeee:	4605      	mov	r5, r0
 800aef0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aef2:	b353      	cbz	r3, 800af4a <_dtoa_r+0x802>
 800aef4:	4629      	mov	r1, r5
 800aef6:	9801      	ldr	r0, [sp, #4]
 800aef8:	f000 fb98 	bl	800b62c <__mcmp>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	da24      	bge.n	800af4a <_dtoa_r+0x802>
 800af00:	2300      	movs	r3, #0
 800af02:	220a      	movs	r2, #10
 800af04:	9901      	ldr	r1, [sp, #4]
 800af06:	4620      	mov	r0, r4
 800af08:	f000 f9c5 	bl	800b296 <__multadd>
 800af0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af0e:	9001      	str	r0, [sp, #4]
 800af10:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 8142 	beq.w	800b19e <_dtoa_r+0xa56>
 800af1a:	2300      	movs	r3, #0
 800af1c:	4639      	mov	r1, r7
 800af1e:	220a      	movs	r2, #10
 800af20:	4620      	mov	r0, r4
 800af22:	f000 f9b8 	bl	800b296 <__multadd>
 800af26:	9b06      	ldr	r3, [sp, #24]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	4607      	mov	r7, r0
 800af2c:	dc4b      	bgt.n	800afc6 <_dtoa_r+0x87e>
 800af2e:	9b08      	ldr	r3, [sp, #32]
 800af30:	2b02      	cmp	r3, #2
 800af32:	dd48      	ble.n	800afc6 <_dtoa_r+0x87e>
 800af34:	e011      	b.n	800af5a <_dtoa_r+0x812>
 800af36:	d0c9      	beq.n	800aecc <_dtoa_r+0x784>
 800af38:	9a07      	ldr	r2, [sp, #28]
 800af3a:	331c      	adds	r3, #28
 800af3c:	441a      	add	r2, r3
 800af3e:	449a      	add	sl, r3
 800af40:	441e      	add	r6, r3
 800af42:	4613      	mov	r3, r2
 800af44:	e7c1      	b.n	800aeca <_dtoa_r+0x782>
 800af46:	4603      	mov	r3, r0
 800af48:	e7f6      	b.n	800af38 <_dtoa_r+0x7f0>
 800af4a:	f1b9 0f00 	cmp.w	r9, #0
 800af4e:	dc34      	bgt.n	800afba <_dtoa_r+0x872>
 800af50:	9b08      	ldr	r3, [sp, #32]
 800af52:	2b02      	cmp	r3, #2
 800af54:	dd31      	ble.n	800afba <_dtoa_r+0x872>
 800af56:	f8cd 9018 	str.w	r9, [sp, #24]
 800af5a:	9b06      	ldr	r3, [sp, #24]
 800af5c:	b963      	cbnz	r3, 800af78 <_dtoa_r+0x830>
 800af5e:	4629      	mov	r1, r5
 800af60:	2205      	movs	r2, #5
 800af62:	4620      	mov	r0, r4
 800af64:	f000 f997 	bl	800b296 <__multadd>
 800af68:	4601      	mov	r1, r0
 800af6a:	4605      	mov	r5, r0
 800af6c:	9801      	ldr	r0, [sp, #4]
 800af6e:	f000 fb5d 	bl	800b62c <__mcmp>
 800af72:	2800      	cmp	r0, #0
 800af74:	f73f adfc 	bgt.w	800ab70 <_dtoa_r+0x428>
 800af78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af7a:	9e04      	ldr	r6, [sp, #16]
 800af7c:	ea6f 0b03 	mvn.w	fp, r3
 800af80:	f04f 0900 	mov.w	r9, #0
 800af84:	4629      	mov	r1, r5
 800af86:	4620      	mov	r0, r4
 800af88:	f000 f96e 	bl	800b268 <_Bfree>
 800af8c:	2f00      	cmp	r7, #0
 800af8e:	f43f aebb 	beq.w	800ad08 <_dtoa_r+0x5c0>
 800af92:	f1b9 0f00 	cmp.w	r9, #0
 800af96:	d005      	beq.n	800afa4 <_dtoa_r+0x85c>
 800af98:	45b9      	cmp	r9, r7
 800af9a:	d003      	beq.n	800afa4 <_dtoa_r+0x85c>
 800af9c:	4649      	mov	r1, r9
 800af9e:	4620      	mov	r0, r4
 800afa0:	f000 f962 	bl	800b268 <_Bfree>
 800afa4:	4639      	mov	r1, r7
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 f95e 	bl	800b268 <_Bfree>
 800afac:	e6ac      	b.n	800ad08 <_dtoa_r+0x5c0>
 800afae:	2500      	movs	r5, #0
 800afb0:	462f      	mov	r7, r5
 800afb2:	e7e1      	b.n	800af78 <_dtoa_r+0x830>
 800afb4:	469b      	mov	fp, r3
 800afb6:	462f      	mov	r7, r5
 800afb8:	e5da      	b.n	800ab70 <_dtoa_r+0x428>
 800afba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afbc:	f8cd 9018 	str.w	r9, [sp, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 80f3 	beq.w	800b1ac <_dtoa_r+0xa64>
 800afc6:	2e00      	cmp	r6, #0
 800afc8:	dd05      	ble.n	800afd6 <_dtoa_r+0x88e>
 800afca:	4639      	mov	r1, r7
 800afcc:	4632      	mov	r2, r6
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 fad8 	bl	800b584 <__lshift>
 800afd4:	4607      	mov	r7, r0
 800afd6:	f1b8 0f00 	cmp.w	r8, #0
 800afda:	d04c      	beq.n	800b076 <_dtoa_r+0x92e>
 800afdc:	6879      	ldr	r1, [r7, #4]
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 f90e 	bl	800b200 <_Balloc>
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	3202      	adds	r2, #2
 800afe8:	4606      	mov	r6, r0
 800afea:	0092      	lsls	r2, r2, #2
 800afec:	f107 010c 	add.w	r1, r7, #12
 800aff0:	300c      	adds	r0, #12
 800aff2:	f7fe ff25 	bl	8009e40 <memcpy>
 800aff6:	2201      	movs	r2, #1
 800aff8:	4631      	mov	r1, r6
 800affa:	4620      	mov	r0, r4
 800affc:	f000 fac2 	bl	800b584 <__lshift>
 800b000:	9b02      	ldr	r3, [sp, #8]
 800b002:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b006:	f003 0301 	and.w	r3, r3, #1
 800b00a:	46b9      	mov	r9, r7
 800b00c:	9307      	str	r3, [sp, #28]
 800b00e:	4607      	mov	r7, r0
 800b010:	4629      	mov	r1, r5
 800b012:	9801      	ldr	r0, [sp, #4]
 800b014:	f7ff fb0a 	bl	800a62c <quorem>
 800b018:	4649      	mov	r1, r9
 800b01a:	4606      	mov	r6, r0
 800b01c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b020:	9801      	ldr	r0, [sp, #4]
 800b022:	f000 fb03 	bl	800b62c <__mcmp>
 800b026:	463a      	mov	r2, r7
 800b028:	9002      	str	r0, [sp, #8]
 800b02a:	4629      	mov	r1, r5
 800b02c:	4620      	mov	r0, r4
 800b02e:	f000 fb17 	bl	800b660 <__mdiff>
 800b032:	68c3      	ldr	r3, [r0, #12]
 800b034:	4602      	mov	r2, r0
 800b036:	bb03      	cbnz	r3, 800b07a <_dtoa_r+0x932>
 800b038:	4601      	mov	r1, r0
 800b03a:	9009      	str	r0, [sp, #36]	; 0x24
 800b03c:	9801      	ldr	r0, [sp, #4]
 800b03e:	f000 faf5 	bl	800b62c <__mcmp>
 800b042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b044:	4603      	mov	r3, r0
 800b046:	4611      	mov	r1, r2
 800b048:	4620      	mov	r0, r4
 800b04a:	9309      	str	r3, [sp, #36]	; 0x24
 800b04c:	f000 f90c 	bl	800b268 <_Bfree>
 800b050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b052:	b9a3      	cbnz	r3, 800b07e <_dtoa_r+0x936>
 800b054:	9a08      	ldr	r2, [sp, #32]
 800b056:	b992      	cbnz	r2, 800b07e <_dtoa_r+0x936>
 800b058:	9a07      	ldr	r2, [sp, #28]
 800b05a:	b982      	cbnz	r2, 800b07e <_dtoa_r+0x936>
 800b05c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b060:	d029      	beq.n	800b0b6 <_dtoa_r+0x96e>
 800b062:	9b02      	ldr	r3, [sp, #8]
 800b064:	2b00      	cmp	r3, #0
 800b066:	dd01      	ble.n	800b06c <_dtoa_r+0x924>
 800b068:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800b06c:	f10a 0601 	add.w	r6, sl, #1
 800b070:	f88a 8000 	strb.w	r8, [sl]
 800b074:	e786      	b.n	800af84 <_dtoa_r+0x83c>
 800b076:	4638      	mov	r0, r7
 800b078:	e7c2      	b.n	800b000 <_dtoa_r+0x8b8>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e7e3      	b.n	800b046 <_dtoa_r+0x8fe>
 800b07e:	9a02      	ldr	r2, [sp, #8]
 800b080:	2a00      	cmp	r2, #0
 800b082:	db04      	blt.n	800b08e <_dtoa_r+0x946>
 800b084:	d124      	bne.n	800b0d0 <_dtoa_r+0x988>
 800b086:	9a08      	ldr	r2, [sp, #32]
 800b088:	bb12      	cbnz	r2, 800b0d0 <_dtoa_r+0x988>
 800b08a:	9a07      	ldr	r2, [sp, #28]
 800b08c:	bb02      	cbnz	r2, 800b0d0 <_dtoa_r+0x988>
 800b08e:	2b00      	cmp	r3, #0
 800b090:	ddec      	ble.n	800b06c <_dtoa_r+0x924>
 800b092:	2201      	movs	r2, #1
 800b094:	9901      	ldr	r1, [sp, #4]
 800b096:	4620      	mov	r0, r4
 800b098:	f000 fa74 	bl	800b584 <__lshift>
 800b09c:	4629      	mov	r1, r5
 800b09e:	9001      	str	r0, [sp, #4]
 800b0a0:	f000 fac4 	bl	800b62c <__mcmp>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	dc03      	bgt.n	800b0b0 <_dtoa_r+0x968>
 800b0a8:	d1e0      	bne.n	800b06c <_dtoa_r+0x924>
 800b0aa:	f018 0f01 	tst.w	r8, #1
 800b0ae:	d0dd      	beq.n	800b06c <_dtoa_r+0x924>
 800b0b0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b0b4:	d1d8      	bne.n	800b068 <_dtoa_r+0x920>
 800b0b6:	2339      	movs	r3, #57	; 0x39
 800b0b8:	f10a 0601 	add.w	r6, sl, #1
 800b0bc:	f88a 3000 	strb.w	r3, [sl]
 800b0c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b0c4:	2b39      	cmp	r3, #57	; 0x39
 800b0c6:	f106 32ff 	add.w	r2, r6, #4294967295
 800b0ca:	d04c      	beq.n	800b166 <_dtoa_r+0xa1e>
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	e051      	b.n	800b174 <_dtoa_r+0xa2c>
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f10a 0601 	add.w	r6, sl, #1
 800b0d6:	dd05      	ble.n	800b0e4 <_dtoa_r+0x99c>
 800b0d8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b0dc:	d0eb      	beq.n	800b0b6 <_dtoa_r+0x96e>
 800b0de:	f108 0801 	add.w	r8, r8, #1
 800b0e2:	e7c5      	b.n	800b070 <_dtoa_r+0x928>
 800b0e4:	9b04      	ldr	r3, [sp, #16]
 800b0e6:	9a06      	ldr	r2, [sp, #24]
 800b0e8:	f806 8c01 	strb.w	r8, [r6, #-1]
 800b0ec:	1af3      	subs	r3, r6, r3
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d021      	beq.n	800b136 <_dtoa_r+0x9ee>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	220a      	movs	r2, #10
 800b0f6:	9901      	ldr	r1, [sp, #4]
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 f8cc 	bl	800b296 <__multadd>
 800b0fe:	45b9      	cmp	r9, r7
 800b100:	9001      	str	r0, [sp, #4]
 800b102:	f04f 0300 	mov.w	r3, #0
 800b106:	f04f 020a 	mov.w	r2, #10
 800b10a:	4649      	mov	r1, r9
 800b10c:	4620      	mov	r0, r4
 800b10e:	d105      	bne.n	800b11c <_dtoa_r+0x9d4>
 800b110:	f000 f8c1 	bl	800b296 <__multadd>
 800b114:	4681      	mov	r9, r0
 800b116:	4607      	mov	r7, r0
 800b118:	46b2      	mov	sl, r6
 800b11a:	e779      	b.n	800b010 <_dtoa_r+0x8c8>
 800b11c:	f000 f8bb 	bl	800b296 <__multadd>
 800b120:	4639      	mov	r1, r7
 800b122:	4681      	mov	r9, r0
 800b124:	2300      	movs	r3, #0
 800b126:	220a      	movs	r2, #10
 800b128:	4620      	mov	r0, r4
 800b12a:	f000 f8b4 	bl	800b296 <__multadd>
 800b12e:	4607      	mov	r7, r0
 800b130:	e7f2      	b.n	800b118 <_dtoa_r+0x9d0>
 800b132:	f04f 0900 	mov.w	r9, #0
 800b136:	2201      	movs	r2, #1
 800b138:	9901      	ldr	r1, [sp, #4]
 800b13a:	4620      	mov	r0, r4
 800b13c:	f000 fa22 	bl	800b584 <__lshift>
 800b140:	4629      	mov	r1, r5
 800b142:	9001      	str	r0, [sp, #4]
 800b144:	f000 fa72 	bl	800b62c <__mcmp>
 800b148:	2800      	cmp	r0, #0
 800b14a:	dcb9      	bgt.n	800b0c0 <_dtoa_r+0x978>
 800b14c:	d102      	bne.n	800b154 <_dtoa_r+0xa0c>
 800b14e:	f018 0f01 	tst.w	r8, #1
 800b152:	d1b5      	bne.n	800b0c0 <_dtoa_r+0x978>
 800b154:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b158:	2b30      	cmp	r3, #48	; 0x30
 800b15a:	f106 32ff 	add.w	r2, r6, #4294967295
 800b15e:	f47f af11 	bne.w	800af84 <_dtoa_r+0x83c>
 800b162:	4616      	mov	r6, r2
 800b164:	e7f6      	b.n	800b154 <_dtoa_r+0xa0c>
 800b166:	9b04      	ldr	r3, [sp, #16]
 800b168:	4293      	cmp	r3, r2
 800b16a:	d105      	bne.n	800b178 <_dtoa_r+0xa30>
 800b16c:	9a04      	ldr	r2, [sp, #16]
 800b16e:	f10b 0b01 	add.w	fp, fp, #1
 800b172:	2331      	movs	r3, #49	; 0x31
 800b174:	7013      	strb	r3, [r2, #0]
 800b176:	e705      	b.n	800af84 <_dtoa_r+0x83c>
 800b178:	4616      	mov	r6, r2
 800b17a:	e7a1      	b.n	800b0c0 <_dtoa_r+0x978>
 800b17c:	4b16      	ldr	r3, [pc, #88]	; (800b1d8 <_dtoa_r+0xa90>)
 800b17e:	f7ff bb48 	b.w	800a812 <_dtoa_r+0xca>
 800b182:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b184:	2b00      	cmp	r3, #0
 800b186:	f47f ab23 	bne.w	800a7d0 <_dtoa_r+0x88>
 800b18a:	4b14      	ldr	r3, [pc, #80]	; (800b1dc <_dtoa_r+0xa94>)
 800b18c:	f7ff bb41 	b.w	800a812 <_dtoa_r+0xca>
 800b190:	9b08      	ldr	r3, [sp, #32]
 800b192:	2b01      	cmp	r3, #1
 800b194:	f77f ae3b 	ble.w	800ae0e <_dtoa_r+0x6c6>
 800b198:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b19c:	e64f      	b.n	800ae3e <_dtoa_r+0x6f6>
 800b19e:	9b06      	ldr	r3, [sp, #24]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	dc03      	bgt.n	800b1ac <_dtoa_r+0xa64>
 800b1a4:	9b08      	ldr	r3, [sp, #32]
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	f73f aed7 	bgt.w	800af5a <_dtoa_r+0x812>
 800b1ac:	9e04      	ldr	r6, [sp, #16]
 800b1ae:	9801      	ldr	r0, [sp, #4]
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	f7ff fa3b 	bl	800a62c <quorem>
 800b1b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b1ba:	f806 8b01 	strb.w	r8, [r6], #1
 800b1be:	9b04      	ldr	r3, [sp, #16]
 800b1c0:	9a06      	ldr	r2, [sp, #24]
 800b1c2:	1af3      	subs	r3, r6, r3
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	ddb4      	ble.n	800b132 <_dtoa_r+0x9ea>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	220a      	movs	r2, #10
 800b1cc:	9901      	ldr	r1, [sp, #4]
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f000 f861 	bl	800b296 <__multadd>
 800b1d4:	9001      	str	r0, [sp, #4]
 800b1d6:	e7ea      	b.n	800b1ae <_dtoa_r+0xa66>
 800b1d8:	0800b94c 	.word	0x0800b94c
 800b1dc:	0800b94e 	.word	0x0800b94e

0800b1e0 <_localeconv_r>:
 800b1e0:	4b04      	ldr	r3, [pc, #16]	; (800b1f4 <_localeconv_r+0x14>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	6a18      	ldr	r0, [r3, #32]
 800b1e6:	4b04      	ldr	r3, [pc, #16]	; (800b1f8 <_localeconv_r+0x18>)
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	bf08      	it	eq
 800b1ec:	4618      	moveq	r0, r3
 800b1ee:	30f0      	adds	r0, #240	; 0xf0
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	24000010 	.word	0x24000010
 800b1f8:	24000074 	.word	0x24000074

0800b1fc <__malloc_lock>:
 800b1fc:	4770      	bx	lr

0800b1fe <__malloc_unlock>:
 800b1fe:	4770      	bx	lr

0800b200 <_Balloc>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b204:	4604      	mov	r4, r0
 800b206:	460e      	mov	r6, r1
 800b208:	b93d      	cbnz	r5, 800b21a <_Balloc+0x1a>
 800b20a:	2010      	movs	r0, #16
 800b20c:	f7fe fe08 	bl	8009e20 <malloc>
 800b210:	6260      	str	r0, [r4, #36]	; 0x24
 800b212:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b216:	6005      	str	r5, [r0, #0]
 800b218:	60c5      	str	r5, [r0, #12]
 800b21a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b21c:	68eb      	ldr	r3, [r5, #12]
 800b21e:	b183      	cbz	r3, 800b242 <_Balloc+0x42>
 800b220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b228:	b9b8      	cbnz	r0, 800b25a <_Balloc+0x5a>
 800b22a:	2101      	movs	r1, #1
 800b22c:	fa01 f506 	lsl.w	r5, r1, r6
 800b230:	1d6a      	adds	r2, r5, #5
 800b232:	0092      	lsls	r2, r2, #2
 800b234:	4620      	mov	r0, r4
 800b236:	f000 fabf 	bl	800b7b8 <_calloc_r>
 800b23a:	b160      	cbz	r0, 800b256 <_Balloc+0x56>
 800b23c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b240:	e00e      	b.n	800b260 <_Balloc+0x60>
 800b242:	2221      	movs	r2, #33	; 0x21
 800b244:	2104      	movs	r1, #4
 800b246:	4620      	mov	r0, r4
 800b248:	f000 fab6 	bl	800b7b8 <_calloc_r>
 800b24c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b24e:	60e8      	str	r0, [r5, #12]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1e4      	bne.n	800b220 <_Balloc+0x20>
 800b256:	2000      	movs	r0, #0
 800b258:	bd70      	pop	{r4, r5, r6, pc}
 800b25a:	6802      	ldr	r2, [r0, #0]
 800b25c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b260:	2300      	movs	r3, #0
 800b262:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b266:	e7f7      	b.n	800b258 <_Balloc+0x58>

0800b268 <_Bfree>:
 800b268:	b570      	push	{r4, r5, r6, lr}
 800b26a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b26c:	4606      	mov	r6, r0
 800b26e:	460d      	mov	r5, r1
 800b270:	b93c      	cbnz	r4, 800b282 <_Bfree+0x1a>
 800b272:	2010      	movs	r0, #16
 800b274:	f7fe fdd4 	bl	8009e20 <malloc>
 800b278:	6270      	str	r0, [r6, #36]	; 0x24
 800b27a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b27e:	6004      	str	r4, [r0, #0]
 800b280:	60c4      	str	r4, [r0, #12]
 800b282:	b13d      	cbz	r5, 800b294 <_Bfree+0x2c>
 800b284:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b286:	686a      	ldr	r2, [r5, #4]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b28e:	6029      	str	r1, [r5, #0]
 800b290:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b294:	bd70      	pop	{r4, r5, r6, pc}

0800b296 <__multadd>:
 800b296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b29a:	690d      	ldr	r5, [r1, #16]
 800b29c:	461f      	mov	r7, r3
 800b29e:	4606      	mov	r6, r0
 800b2a0:	460c      	mov	r4, r1
 800b2a2:	f101 0c14 	add.w	ip, r1, #20
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f8dc 0000 	ldr.w	r0, [ip]
 800b2ac:	b281      	uxth	r1, r0
 800b2ae:	fb02 7101 	mla	r1, r2, r1, r7
 800b2b2:	0c0f      	lsrs	r7, r1, #16
 800b2b4:	0c00      	lsrs	r0, r0, #16
 800b2b6:	fb02 7000 	mla	r0, r2, r0, r7
 800b2ba:	b289      	uxth	r1, r1
 800b2bc:	3301      	adds	r3, #1
 800b2be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b2c2:	429d      	cmp	r5, r3
 800b2c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b2c8:	f84c 1b04 	str.w	r1, [ip], #4
 800b2cc:	dcec      	bgt.n	800b2a8 <__multadd+0x12>
 800b2ce:	b1d7      	cbz	r7, 800b306 <__multadd+0x70>
 800b2d0:	68a3      	ldr	r3, [r4, #8]
 800b2d2:	42ab      	cmp	r3, r5
 800b2d4:	dc12      	bgt.n	800b2fc <__multadd+0x66>
 800b2d6:	6861      	ldr	r1, [r4, #4]
 800b2d8:	4630      	mov	r0, r6
 800b2da:	3101      	adds	r1, #1
 800b2dc:	f7ff ff90 	bl	800b200 <_Balloc>
 800b2e0:	6922      	ldr	r2, [r4, #16]
 800b2e2:	3202      	adds	r2, #2
 800b2e4:	f104 010c 	add.w	r1, r4, #12
 800b2e8:	4680      	mov	r8, r0
 800b2ea:	0092      	lsls	r2, r2, #2
 800b2ec:	300c      	adds	r0, #12
 800b2ee:	f7fe fda7 	bl	8009e40 <memcpy>
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	f7ff ffb7 	bl	800b268 <_Bfree>
 800b2fa:	4644      	mov	r4, r8
 800b2fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b300:	3501      	adds	r5, #1
 800b302:	615f      	str	r7, [r3, #20]
 800b304:	6125      	str	r5, [r4, #16]
 800b306:	4620      	mov	r0, r4
 800b308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b30c <__hi0bits>:
 800b30c:	0c02      	lsrs	r2, r0, #16
 800b30e:	0412      	lsls	r2, r2, #16
 800b310:	4603      	mov	r3, r0
 800b312:	b9b2      	cbnz	r2, 800b342 <__hi0bits+0x36>
 800b314:	0403      	lsls	r3, r0, #16
 800b316:	2010      	movs	r0, #16
 800b318:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b31c:	bf04      	itt	eq
 800b31e:	021b      	lsleq	r3, r3, #8
 800b320:	3008      	addeq	r0, #8
 800b322:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b326:	bf04      	itt	eq
 800b328:	011b      	lsleq	r3, r3, #4
 800b32a:	3004      	addeq	r0, #4
 800b32c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b330:	bf04      	itt	eq
 800b332:	009b      	lsleq	r3, r3, #2
 800b334:	3002      	addeq	r0, #2
 800b336:	2b00      	cmp	r3, #0
 800b338:	db06      	blt.n	800b348 <__hi0bits+0x3c>
 800b33a:	005b      	lsls	r3, r3, #1
 800b33c:	d503      	bpl.n	800b346 <__hi0bits+0x3a>
 800b33e:	3001      	adds	r0, #1
 800b340:	4770      	bx	lr
 800b342:	2000      	movs	r0, #0
 800b344:	e7e8      	b.n	800b318 <__hi0bits+0xc>
 800b346:	2020      	movs	r0, #32
 800b348:	4770      	bx	lr

0800b34a <__lo0bits>:
 800b34a:	6803      	ldr	r3, [r0, #0]
 800b34c:	f013 0207 	ands.w	r2, r3, #7
 800b350:	4601      	mov	r1, r0
 800b352:	d00b      	beq.n	800b36c <__lo0bits+0x22>
 800b354:	07da      	lsls	r2, r3, #31
 800b356:	d423      	bmi.n	800b3a0 <__lo0bits+0x56>
 800b358:	0798      	lsls	r0, r3, #30
 800b35a:	bf49      	itett	mi
 800b35c:	085b      	lsrmi	r3, r3, #1
 800b35e:	089b      	lsrpl	r3, r3, #2
 800b360:	2001      	movmi	r0, #1
 800b362:	600b      	strmi	r3, [r1, #0]
 800b364:	bf5c      	itt	pl
 800b366:	600b      	strpl	r3, [r1, #0]
 800b368:	2002      	movpl	r0, #2
 800b36a:	4770      	bx	lr
 800b36c:	b298      	uxth	r0, r3
 800b36e:	b9a8      	cbnz	r0, 800b39c <__lo0bits+0x52>
 800b370:	0c1b      	lsrs	r3, r3, #16
 800b372:	2010      	movs	r0, #16
 800b374:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b378:	bf04      	itt	eq
 800b37a:	0a1b      	lsreq	r3, r3, #8
 800b37c:	3008      	addeq	r0, #8
 800b37e:	071a      	lsls	r2, r3, #28
 800b380:	bf04      	itt	eq
 800b382:	091b      	lsreq	r3, r3, #4
 800b384:	3004      	addeq	r0, #4
 800b386:	079a      	lsls	r2, r3, #30
 800b388:	bf04      	itt	eq
 800b38a:	089b      	lsreq	r3, r3, #2
 800b38c:	3002      	addeq	r0, #2
 800b38e:	07da      	lsls	r2, r3, #31
 800b390:	d402      	bmi.n	800b398 <__lo0bits+0x4e>
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	d006      	beq.n	800b3a4 <__lo0bits+0x5a>
 800b396:	3001      	adds	r0, #1
 800b398:	600b      	str	r3, [r1, #0]
 800b39a:	4770      	bx	lr
 800b39c:	4610      	mov	r0, r2
 800b39e:	e7e9      	b.n	800b374 <__lo0bits+0x2a>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	4770      	bx	lr
 800b3a4:	2020      	movs	r0, #32
 800b3a6:	4770      	bx	lr

0800b3a8 <__i2b>:
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	f7ff ff27 	bl	800b200 <_Balloc>
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	6144      	str	r4, [r0, #20]
 800b3b6:	6102      	str	r2, [r0, #16]
 800b3b8:	bd10      	pop	{r4, pc}

0800b3ba <__multiply>:
 800b3ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3be:	4614      	mov	r4, r2
 800b3c0:	690a      	ldr	r2, [r1, #16]
 800b3c2:	6923      	ldr	r3, [r4, #16]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	bfb8      	it	lt
 800b3c8:	460b      	movlt	r3, r1
 800b3ca:	4688      	mov	r8, r1
 800b3cc:	bfbc      	itt	lt
 800b3ce:	46a0      	movlt	r8, r4
 800b3d0:	461c      	movlt	r4, r3
 800b3d2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b3d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b3da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3e2:	eb07 0609 	add.w	r6, r7, r9
 800b3e6:	42b3      	cmp	r3, r6
 800b3e8:	bfb8      	it	lt
 800b3ea:	3101      	addlt	r1, #1
 800b3ec:	f7ff ff08 	bl	800b200 <_Balloc>
 800b3f0:	f100 0514 	add.w	r5, r0, #20
 800b3f4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b3f8:	462b      	mov	r3, r5
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	4573      	cmp	r3, lr
 800b3fe:	d316      	bcc.n	800b42e <__multiply+0x74>
 800b400:	f104 0214 	add.w	r2, r4, #20
 800b404:	f108 0114 	add.w	r1, r8, #20
 800b408:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b40c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	9b00      	ldr	r3, [sp, #0]
 800b414:	9201      	str	r2, [sp, #4]
 800b416:	4293      	cmp	r3, r2
 800b418:	d80c      	bhi.n	800b434 <__multiply+0x7a>
 800b41a:	2e00      	cmp	r6, #0
 800b41c:	dd03      	ble.n	800b426 <__multiply+0x6c>
 800b41e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b422:	2b00      	cmp	r3, #0
 800b424:	d05d      	beq.n	800b4e2 <__multiply+0x128>
 800b426:	6106      	str	r6, [r0, #16]
 800b428:	b003      	add	sp, #12
 800b42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42e:	f843 2b04 	str.w	r2, [r3], #4
 800b432:	e7e3      	b.n	800b3fc <__multiply+0x42>
 800b434:	f8b2 b000 	ldrh.w	fp, [r2]
 800b438:	f1bb 0f00 	cmp.w	fp, #0
 800b43c:	d023      	beq.n	800b486 <__multiply+0xcc>
 800b43e:	4689      	mov	r9, r1
 800b440:	46ac      	mov	ip, r5
 800b442:	f04f 0800 	mov.w	r8, #0
 800b446:	f859 4b04 	ldr.w	r4, [r9], #4
 800b44a:	f8dc a000 	ldr.w	sl, [ip]
 800b44e:	b2a3      	uxth	r3, r4
 800b450:	fa1f fa8a 	uxth.w	sl, sl
 800b454:	fb0b a303 	mla	r3, fp, r3, sl
 800b458:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b45c:	f8dc 4000 	ldr.w	r4, [ip]
 800b460:	4443      	add	r3, r8
 800b462:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b466:	fb0b 840a 	mla	r4, fp, sl, r8
 800b46a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b46e:	46e2      	mov	sl, ip
 800b470:	b29b      	uxth	r3, r3
 800b472:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b476:	454f      	cmp	r7, r9
 800b478:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b47c:	f84a 3b04 	str.w	r3, [sl], #4
 800b480:	d82b      	bhi.n	800b4da <__multiply+0x120>
 800b482:	f8cc 8004 	str.w	r8, [ip, #4]
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b48c:	3204      	adds	r2, #4
 800b48e:	f1ba 0f00 	cmp.w	sl, #0
 800b492:	d020      	beq.n	800b4d6 <__multiply+0x11c>
 800b494:	682b      	ldr	r3, [r5, #0]
 800b496:	4689      	mov	r9, r1
 800b498:	46a8      	mov	r8, r5
 800b49a:	f04f 0b00 	mov.w	fp, #0
 800b49e:	f8b9 c000 	ldrh.w	ip, [r9]
 800b4a2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b4a6:	fb0a 440c 	mla	r4, sl, ip, r4
 800b4aa:	445c      	add	r4, fp
 800b4ac:	46c4      	mov	ip, r8
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b4b4:	f84c 3b04 	str.w	r3, [ip], #4
 800b4b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4bc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b4c0:	0c1b      	lsrs	r3, r3, #16
 800b4c2:	fb0a b303 	mla	r3, sl, r3, fp
 800b4c6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b4ca:	454f      	cmp	r7, r9
 800b4cc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b4d0:	d805      	bhi.n	800b4de <__multiply+0x124>
 800b4d2:	f8c8 3004 	str.w	r3, [r8, #4]
 800b4d6:	3504      	adds	r5, #4
 800b4d8:	e79b      	b.n	800b412 <__multiply+0x58>
 800b4da:	46d4      	mov	ip, sl
 800b4dc:	e7b3      	b.n	800b446 <__multiply+0x8c>
 800b4de:	46e0      	mov	r8, ip
 800b4e0:	e7dd      	b.n	800b49e <__multiply+0xe4>
 800b4e2:	3e01      	subs	r6, #1
 800b4e4:	e799      	b.n	800b41a <__multiply+0x60>
	...

0800b4e8 <__pow5mult>:
 800b4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4ec:	4615      	mov	r5, r2
 800b4ee:	f012 0203 	ands.w	r2, r2, #3
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	460f      	mov	r7, r1
 800b4f6:	d007      	beq.n	800b508 <__pow5mult+0x20>
 800b4f8:	3a01      	subs	r2, #1
 800b4fa:	4c21      	ldr	r4, [pc, #132]	; (800b580 <__pow5mult+0x98>)
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b502:	f7ff fec8 	bl	800b296 <__multadd>
 800b506:	4607      	mov	r7, r0
 800b508:	10ad      	asrs	r5, r5, #2
 800b50a:	d035      	beq.n	800b578 <__pow5mult+0x90>
 800b50c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b50e:	b93c      	cbnz	r4, 800b520 <__pow5mult+0x38>
 800b510:	2010      	movs	r0, #16
 800b512:	f7fe fc85 	bl	8009e20 <malloc>
 800b516:	6270      	str	r0, [r6, #36]	; 0x24
 800b518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b51c:	6004      	str	r4, [r0, #0]
 800b51e:	60c4      	str	r4, [r0, #12]
 800b520:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b528:	b94c      	cbnz	r4, 800b53e <__pow5mult+0x56>
 800b52a:	f240 2171 	movw	r1, #625	; 0x271
 800b52e:	4630      	mov	r0, r6
 800b530:	f7ff ff3a 	bl	800b3a8 <__i2b>
 800b534:	2300      	movs	r3, #0
 800b536:	f8c8 0008 	str.w	r0, [r8, #8]
 800b53a:	4604      	mov	r4, r0
 800b53c:	6003      	str	r3, [r0, #0]
 800b53e:	f04f 0800 	mov.w	r8, #0
 800b542:	07eb      	lsls	r3, r5, #31
 800b544:	d50a      	bpl.n	800b55c <__pow5mult+0x74>
 800b546:	4639      	mov	r1, r7
 800b548:	4622      	mov	r2, r4
 800b54a:	4630      	mov	r0, r6
 800b54c:	f7ff ff35 	bl	800b3ba <__multiply>
 800b550:	4639      	mov	r1, r7
 800b552:	4681      	mov	r9, r0
 800b554:	4630      	mov	r0, r6
 800b556:	f7ff fe87 	bl	800b268 <_Bfree>
 800b55a:	464f      	mov	r7, r9
 800b55c:	106d      	asrs	r5, r5, #1
 800b55e:	d00b      	beq.n	800b578 <__pow5mult+0x90>
 800b560:	6820      	ldr	r0, [r4, #0]
 800b562:	b938      	cbnz	r0, 800b574 <__pow5mult+0x8c>
 800b564:	4622      	mov	r2, r4
 800b566:	4621      	mov	r1, r4
 800b568:	4630      	mov	r0, r6
 800b56a:	f7ff ff26 	bl	800b3ba <__multiply>
 800b56e:	6020      	str	r0, [r4, #0]
 800b570:	f8c0 8000 	str.w	r8, [r0]
 800b574:	4604      	mov	r4, r0
 800b576:	e7e4      	b.n	800b542 <__pow5mult+0x5a>
 800b578:	4638      	mov	r0, r7
 800b57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b57e:	bf00      	nop
 800b580:	0800ba50 	.word	0x0800ba50

0800b584 <__lshift>:
 800b584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b588:	460c      	mov	r4, r1
 800b58a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b58e:	6923      	ldr	r3, [r4, #16]
 800b590:	6849      	ldr	r1, [r1, #4]
 800b592:	eb0a 0903 	add.w	r9, sl, r3
 800b596:	68a3      	ldr	r3, [r4, #8]
 800b598:	4607      	mov	r7, r0
 800b59a:	4616      	mov	r6, r2
 800b59c:	f109 0501 	add.w	r5, r9, #1
 800b5a0:	42ab      	cmp	r3, r5
 800b5a2:	db32      	blt.n	800b60a <__lshift+0x86>
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	f7ff fe2b 	bl	800b200 <_Balloc>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	4680      	mov	r8, r0
 800b5ae:	f100 0114 	add.w	r1, r0, #20
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	4553      	cmp	r3, sl
 800b5b6:	db2b      	blt.n	800b610 <__lshift+0x8c>
 800b5b8:	6920      	ldr	r0, [r4, #16]
 800b5ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5be:	f104 0314 	add.w	r3, r4, #20
 800b5c2:	f016 021f 	ands.w	r2, r6, #31
 800b5c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5ce:	d025      	beq.n	800b61c <__lshift+0x98>
 800b5d0:	f1c2 0e20 	rsb	lr, r2, #32
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	681e      	ldr	r6, [r3, #0]
 800b5d8:	468a      	mov	sl, r1
 800b5da:	4096      	lsls	r6, r2
 800b5dc:	4330      	orrs	r0, r6
 800b5de:	f84a 0b04 	str.w	r0, [sl], #4
 800b5e2:	f853 0b04 	ldr.w	r0, [r3], #4
 800b5e6:	459c      	cmp	ip, r3
 800b5e8:	fa20 f00e 	lsr.w	r0, r0, lr
 800b5ec:	d814      	bhi.n	800b618 <__lshift+0x94>
 800b5ee:	6048      	str	r0, [r1, #4]
 800b5f0:	b108      	cbz	r0, 800b5f6 <__lshift+0x72>
 800b5f2:	f109 0502 	add.w	r5, r9, #2
 800b5f6:	3d01      	subs	r5, #1
 800b5f8:	4638      	mov	r0, r7
 800b5fa:	f8c8 5010 	str.w	r5, [r8, #16]
 800b5fe:	4621      	mov	r1, r4
 800b600:	f7ff fe32 	bl	800b268 <_Bfree>
 800b604:	4640      	mov	r0, r8
 800b606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60a:	3101      	adds	r1, #1
 800b60c:	005b      	lsls	r3, r3, #1
 800b60e:	e7c7      	b.n	800b5a0 <__lshift+0x1c>
 800b610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b614:	3301      	adds	r3, #1
 800b616:	e7cd      	b.n	800b5b4 <__lshift+0x30>
 800b618:	4651      	mov	r1, sl
 800b61a:	e7dc      	b.n	800b5d6 <__lshift+0x52>
 800b61c:	3904      	subs	r1, #4
 800b61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b622:	f841 2f04 	str.w	r2, [r1, #4]!
 800b626:	459c      	cmp	ip, r3
 800b628:	d8f9      	bhi.n	800b61e <__lshift+0x9a>
 800b62a:	e7e4      	b.n	800b5f6 <__lshift+0x72>

0800b62c <__mcmp>:
 800b62c:	6903      	ldr	r3, [r0, #16]
 800b62e:	690a      	ldr	r2, [r1, #16]
 800b630:	1a9b      	subs	r3, r3, r2
 800b632:	b530      	push	{r4, r5, lr}
 800b634:	d10c      	bne.n	800b650 <__mcmp+0x24>
 800b636:	0092      	lsls	r2, r2, #2
 800b638:	3014      	adds	r0, #20
 800b63a:	3114      	adds	r1, #20
 800b63c:	1884      	adds	r4, r0, r2
 800b63e:	4411      	add	r1, r2
 800b640:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b644:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b648:	4295      	cmp	r5, r2
 800b64a:	d003      	beq.n	800b654 <__mcmp+0x28>
 800b64c:	d305      	bcc.n	800b65a <__mcmp+0x2e>
 800b64e:	2301      	movs	r3, #1
 800b650:	4618      	mov	r0, r3
 800b652:	bd30      	pop	{r4, r5, pc}
 800b654:	42a0      	cmp	r0, r4
 800b656:	d3f3      	bcc.n	800b640 <__mcmp+0x14>
 800b658:	e7fa      	b.n	800b650 <__mcmp+0x24>
 800b65a:	f04f 33ff 	mov.w	r3, #4294967295
 800b65e:	e7f7      	b.n	800b650 <__mcmp+0x24>

0800b660 <__mdiff>:
 800b660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b664:	460d      	mov	r5, r1
 800b666:	4607      	mov	r7, r0
 800b668:	4611      	mov	r1, r2
 800b66a:	4628      	mov	r0, r5
 800b66c:	4614      	mov	r4, r2
 800b66e:	f7ff ffdd 	bl	800b62c <__mcmp>
 800b672:	1e06      	subs	r6, r0, #0
 800b674:	d108      	bne.n	800b688 <__mdiff+0x28>
 800b676:	4631      	mov	r1, r6
 800b678:	4638      	mov	r0, r7
 800b67a:	f7ff fdc1 	bl	800b200 <_Balloc>
 800b67e:	2301      	movs	r3, #1
 800b680:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b688:	bfa4      	itt	ge
 800b68a:	4623      	movge	r3, r4
 800b68c:	462c      	movge	r4, r5
 800b68e:	4638      	mov	r0, r7
 800b690:	6861      	ldr	r1, [r4, #4]
 800b692:	bfa6      	itte	ge
 800b694:	461d      	movge	r5, r3
 800b696:	2600      	movge	r6, #0
 800b698:	2601      	movlt	r6, #1
 800b69a:	f7ff fdb1 	bl	800b200 <_Balloc>
 800b69e:	692b      	ldr	r3, [r5, #16]
 800b6a0:	60c6      	str	r6, [r0, #12]
 800b6a2:	6926      	ldr	r6, [r4, #16]
 800b6a4:	f105 0914 	add.w	r9, r5, #20
 800b6a8:	f104 0214 	add.w	r2, r4, #20
 800b6ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b6b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b6b4:	f100 0514 	add.w	r5, r0, #20
 800b6b8:	f04f 0e00 	mov.w	lr, #0
 800b6bc:	f852 ab04 	ldr.w	sl, [r2], #4
 800b6c0:	f859 4b04 	ldr.w	r4, [r9], #4
 800b6c4:	fa1e f18a 	uxtah	r1, lr, sl
 800b6c8:	b2a3      	uxth	r3, r4
 800b6ca:	1ac9      	subs	r1, r1, r3
 800b6cc:	0c23      	lsrs	r3, r4, #16
 800b6ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b6d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b6d6:	b289      	uxth	r1, r1
 800b6d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b6dc:	45c8      	cmp	r8, r9
 800b6de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b6e2:	4694      	mov	ip, r2
 800b6e4:	f845 3b04 	str.w	r3, [r5], #4
 800b6e8:	d8e8      	bhi.n	800b6bc <__mdiff+0x5c>
 800b6ea:	45bc      	cmp	ip, r7
 800b6ec:	d304      	bcc.n	800b6f8 <__mdiff+0x98>
 800b6ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b6f2:	b183      	cbz	r3, 800b716 <__mdiff+0xb6>
 800b6f4:	6106      	str	r6, [r0, #16]
 800b6f6:	e7c5      	b.n	800b684 <__mdiff+0x24>
 800b6f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b6fc:	fa1e f381 	uxtah	r3, lr, r1
 800b700:	141a      	asrs	r2, r3, #16
 800b702:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b706:	b29b      	uxth	r3, r3
 800b708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b70c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b710:	f845 3b04 	str.w	r3, [r5], #4
 800b714:	e7e9      	b.n	800b6ea <__mdiff+0x8a>
 800b716:	3e01      	subs	r6, #1
 800b718:	e7e9      	b.n	800b6ee <__mdiff+0x8e>

0800b71a <__d2b>:
 800b71a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b71e:	460e      	mov	r6, r1
 800b720:	2101      	movs	r1, #1
 800b722:	ec59 8b10 	vmov	r8, r9, d0
 800b726:	4615      	mov	r5, r2
 800b728:	f7ff fd6a 	bl	800b200 <_Balloc>
 800b72c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b730:	4607      	mov	r7, r0
 800b732:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b736:	bb34      	cbnz	r4, 800b786 <__d2b+0x6c>
 800b738:	9301      	str	r3, [sp, #4]
 800b73a:	f1b8 0300 	subs.w	r3, r8, #0
 800b73e:	d027      	beq.n	800b790 <__d2b+0x76>
 800b740:	a802      	add	r0, sp, #8
 800b742:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b746:	f7ff fe00 	bl	800b34a <__lo0bits>
 800b74a:	9900      	ldr	r1, [sp, #0]
 800b74c:	b1f0      	cbz	r0, 800b78c <__d2b+0x72>
 800b74e:	9a01      	ldr	r2, [sp, #4]
 800b750:	f1c0 0320 	rsb	r3, r0, #32
 800b754:	fa02 f303 	lsl.w	r3, r2, r3
 800b758:	430b      	orrs	r3, r1
 800b75a:	40c2      	lsrs	r2, r0
 800b75c:	617b      	str	r3, [r7, #20]
 800b75e:	9201      	str	r2, [sp, #4]
 800b760:	9b01      	ldr	r3, [sp, #4]
 800b762:	61bb      	str	r3, [r7, #24]
 800b764:	2b00      	cmp	r3, #0
 800b766:	bf14      	ite	ne
 800b768:	2102      	movne	r1, #2
 800b76a:	2101      	moveq	r1, #1
 800b76c:	6139      	str	r1, [r7, #16]
 800b76e:	b1c4      	cbz	r4, 800b7a2 <__d2b+0x88>
 800b770:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b774:	4404      	add	r4, r0
 800b776:	6034      	str	r4, [r6, #0]
 800b778:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b77c:	6028      	str	r0, [r5, #0]
 800b77e:	4638      	mov	r0, r7
 800b780:	b003      	add	sp, #12
 800b782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b78a:	e7d5      	b.n	800b738 <__d2b+0x1e>
 800b78c:	6179      	str	r1, [r7, #20]
 800b78e:	e7e7      	b.n	800b760 <__d2b+0x46>
 800b790:	a801      	add	r0, sp, #4
 800b792:	f7ff fdda 	bl	800b34a <__lo0bits>
 800b796:	9b01      	ldr	r3, [sp, #4]
 800b798:	617b      	str	r3, [r7, #20]
 800b79a:	2101      	movs	r1, #1
 800b79c:	6139      	str	r1, [r7, #16]
 800b79e:	3020      	adds	r0, #32
 800b7a0:	e7e5      	b.n	800b76e <__d2b+0x54>
 800b7a2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b7a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7aa:	6030      	str	r0, [r6, #0]
 800b7ac:	6918      	ldr	r0, [r3, #16]
 800b7ae:	f7ff fdad 	bl	800b30c <__hi0bits>
 800b7b2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b7b6:	e7e1      	b.n	800b77c <__d2b+0x62>

0800b7b8 <_calloc_r>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	fb02 f401 	mul.w	r4, r2, r1
 800b7be:	4621      	mov	r1, r4
 800b7c0:	f7fe fba0 	bl	8009f04 <_malloc_r>
 800b7c4:	4605      	mov	r5, r0
 800b7c6:	b118      	cbz	r0, 800b7d0 <_calloc_r+0x18>
 800b7c8:	4622      	mov	r2, r4
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	f7fe fb43 	bl	8009e56 <memset>
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}

0800b7d4 <__ascii_mbtowc>:
 800b7d4:	b082      	sub	sp, #8
 800b7d6:	b901      	cbnz	r1, 800b7da <__ascii_mbtowc+0x6>
 800b7d8:	a901      	add	r1, sp, #4
 800b7da:	b142      	cbz	r2, 800b7ee <__ascii_mbtowc+0x1a>
 800b7dc:	b14b      	cbz	r3, 800b7f2 <__ascii_mbtowc+0x1e>
 800b7de:	7813      	ldrb	r3, [r2, #0]
 800b7e0:	600b      	str	r3, [r1, #0]
 800b7e2:	7812      	ldrb	r2, [r2, #0]
 800b7e4:	1c10      	adds	r0, r2, #0
 800b7e6:	bf18      	it	ne
 800b7e8:	2001      	movne	r0, #1
 800b7ea:	b002      	add	sp, #8
 800b7ec:	4770      	bx	lr
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	e7fb      	b.n	800b7ea <__ascii_mbtowc+0x16>
 800b7f2:	f06f 0001 	mvn.w	r0, #1
 800b7f6:	e7f8      	b.n	800b7ea <__ascii_mbtowc+0x16>

0800b7f8 <__ascii_wctomb>:
 800b7f8:	b149      	cbz	r1, 800b80e <__ascii_wctomb+0x16>
 800b7fa:	2aff      	cmp	r2, #255	; 0xff
 800b7fc:	bf85      	ittet	hi
 800b7fe:	238a      	movhi	r3, #138	; 0x8a
 800b800:	6003      	strhi	r3, [r0, #0]
 800b802:	700a      	strbls	r2, [r1, #0]
 800b804:	f04f 30ff 	movhi.w	r0, #4294967295
 800b808:	bf98      	it	ls
 800b80a:	2001      	movls	r0, #1
 800b80c:	4770      	bx	lr
 800b80e:	4608      	mov	r0, r1
 800b810:	4770      	bx	lr
	...

0800b814 <_init>:
 800b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b816:	bf00      	nop
 800b818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b81a:	bc08      	pop	{r3}
 800b81c:	469e      	mov	lr, r3
 800b81e:	4770      	bx	lr

0800b820 <_fini>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	bf00      	nop
 800b824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b826:	bc08      	pop	{r3}
 800b828:	469e      	mov	lr, r3
 800b82a:	4770      	bx	lr
