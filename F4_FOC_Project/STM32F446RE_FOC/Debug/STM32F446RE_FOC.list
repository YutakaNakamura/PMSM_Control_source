
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009434  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08009600  08009600  00019600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b48  08009b48  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009b48  08009b48  00019b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b50  08009b50  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009b50  08009b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009b58  08009b58  00019b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200001e0  08009d40  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08009d40  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ecc  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000042cf  00000000  00000000  000420dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001468  00000000  00000000  000463b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  00047818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026d32  00000000  00000000  00048ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001096f  00000000  00000000  0006f80a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f87c4  00000000  00000000  00080179  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017893d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b4  00000000  00000000  001789b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e0 	.word	0x200001e0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080095e4 	.word	0x080095e4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e4 	.word	0x200001e4
 8000204:	080095e4 	.word	0x080095e4

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f90d 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2004      	movs	r0, #4
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f004 fc32 	bl	800577c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f917 	bl	8001176 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	f000 f8ed 	bl	800113e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	200002c0 	.word	0x200002c0

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200002c0 	.word	0x200002c0

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f4:	d301      	bcc.n	80010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00f      	b.n	800111a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <SysTick_Config+0x40>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001102:	210f      	movs	r1, #15
 8001104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001108:	f7ff ff8e 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SysTick_Config+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SysTick_Config+0x40>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff47 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff5c 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff8e 	bl	800107c <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5d 	bl	8001028 <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffb0 	bl	80010e4 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e165      	b.n	8001478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8154 	bne.w	8001472 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x4a>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b12      	cmp	r3, #18
 80011d8:	d123      	bne.n	8001222 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	69b9      	ldr	r1, [r7, #24]
 800121e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0203 	and.w	r2, r3, #3
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d00b      	beq.n	8001276 <HAL_GPIO_Init+0xe6>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800126a:	2b11      	cmp	r3, #17
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b12      	cmp	r3, #18
 8001274:	d130      	bne.n	80012d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 0201 	and.w	r2, r3, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80ae 	beq.w	8001472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b5c      	ldr	r3, [pc, #368]	; (800148c <HAL_GPIO_Init+0x2fc>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a5b      	ldr	r2, [pc, #364]	; (800148c <HAL_GPIO_Init+0x2fc>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b59      	ldr	r3, [pc, #356]	; (800148c <HAL_GPIO_Init+0x2fc>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a57      	ldr	r2, [pc, #348]	; (8001490 <HAL_GPIO_Init+0x300>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <HAL_GPIO_Init+0x304>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d025      	beq.n	80013aa <HAL_GPIO_Init+0x21a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4d      	ldr	r2, [pc, #308]	; (8001498 <HAL_GPIO_Init+0x308>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d01f      	beq.n	80013a6 <HAL_GPIO_Init+0x216>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <HAL_GPIO_Init+0x30c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d019      	beq.n	80013a2 <HAL_GPIO_Init+0x212>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4b      	ldr	r2, [pc, #300]	; (80014a0 <HAL_GPIO_Init+0x310>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d013      	beq.n	800139e <HAL_GPIO_Init+0x20e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4a      	ldr	r2, [pc, #296]	; (80014a4 <HAL_GPIO_Init+0x314>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00d      	beq.n	800139a <HAL_GPIO_Init+0x20a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a49      	ldr	r2, [pc, #292]	; (80014a8 <HAL_GPIO_Init+0x318>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d007      	beq.n	8001396 <HAL_GPIO_Init+0x206>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a48      	ldr	r2, [pc, #288]	; (80014ac <HAL_GPIO_Init+0x31c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_GPIO_Init+0x202>
 800138e:	2306      	movs	r3, #6
 8001390:	e00c      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 8001392:	2307      	movs	r3, #7
 8001394:	e00a      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 8001396:	2305      	movs	r3, #5
 8001398:	e008      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 800139a:	2304      	movs	r3, #4
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 800139e:	2303      	movs	r3, #3
 80013a0:	e004      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e002      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 80013aa:	2300      	movs	r3, #0
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	f002 0203 	and.w	r2, r2, #3
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	4093      	lsls	r3, r2
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013bc:	4934      	ldr	r1, [pc, #208]	; (8001490 <HAL_GPIO_Init+0x300>)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_GPIO_Init+0x320>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ee:	4a30      	ldr	r2, [pc, #192]	; (80014b0 <HAL_GPIO_Init+0x320>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <HAL_GPIO_Init+0x320>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001418:	4a25      	ldr	r2, [pc, #148]	; (80014b0 <HAL_GPIO_Init+0x320>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <HAL_GPIO_Init+0x320>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001442:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <HAL_GPIO_Init+0x320>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_GPIO_Init+0x320>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800146c:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_GPIO_Init+0x320>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	f67f ae96 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001480:	bf00      	nop
 8001482:	3724      	adds	r7, #36	; 0x24
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40023800 	.word	0x40023800
 8001490:	40013800 	.word	0x40013800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40021400 	.word	0x40021400
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40013c00 	.word	0x40013c00

080014b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_PWREx_EnableOverDrive+0x90>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <HAL_PWREx_EnableOverDrive+0x90>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_PWREx_EnableOverDrive+0x90>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_PWREx_EnableOverDrive+0x94>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e0:	f7ff fd64 	bl	8000fac <HAL_GetTick>
 80014e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014e6:	e009      	b.n	80014fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014e8:	f7ff fd60 	bl	8000fac <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014f6:	d901      	bls.n	80014fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e01f      	b.n	800153c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_PWREx_EnableOverDrive+0x98>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001508:	d1ee      	bne.n	80014e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001510:	f7ff fd4c 	bl	8000fac <HAL_GetTick>
 8001514:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001516:	e009      	b.n	800152c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001518:	f7ff fd48 	bl	8000fac <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001526:	d901      	bls.n	800152c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e007      	b.n	800153c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_PWREx_EnableOverDrive+0x98>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001538:	d1ee      	bne.n	8001518 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	420e0040 	.word	0x420e0040
 800154c:	40007000 	.word	0x40007000
 8001550:	420e0044 	.word	0x420e0044

08001554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0ca      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001568:	4b67      	ldr	r3, [pc, #412]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 030f 	and.w	r3, r3, #15
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d90c      	bls.n	8001590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b62      	ldr	r3, [pc, #392]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b6      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a8:	4b58      	ldr	r3, [pc, #352]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a57      	ldr	r2, [pc, #348]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c0:	4b52      	ldr	r3, [pc, #328]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a51      	ldr	r2, [pc, #324]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	4b4f      	ldr	r3, [pc, #316]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	494c      	ldr	r1, [pc, #304]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d044      	beq.n	8001674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d119      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e07d      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d003      	beq.n	8001612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	2b03      	cmp	r3, #3
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	4b3e      	ldr	r3, [pc, #248]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e06d      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e065      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f023 0203 	bic.w	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4933      	ldr	r1, [pc, #204]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	4313      	orrs	r3, r2
 8001642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001644:	f7ff fcb2 	bl	8000fac <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	e00a      	b.n	8001662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164c:	f7ff fcae 	bl	8000fac <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e04d      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 020c 	and.w	r2, r3, #12
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	429a      	cmp	r2, r3
 8001672:	d1eb      	bne.n	800164c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d20c      	bcs.n	800169c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e030      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4915      	ldr	r1, [pc, #84]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	490d      	ldr	r1, [pc, #52]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016da:	f000 f851 	bl	8001780 <HAL_RCC_GetSysClockFreq>
 80016de:	4601      	mov	r1, r0
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	5cd3      	ldrb	r3, [r2, r3]
 80016ee:	fa21 f303 	lsr.w	r3, r1, r3
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80016f6:	2004      	movs	r0, #4
 80016f8:	f7ff fc14 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00
 800170c:	40023800 	.word	0x40023800
 8001710:	08009698 	.word	0x08009698
 8001714:	20000008 	.word	0x20000008

08001718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_RCC_GetHCLKFreq+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000008 	.word	0x20000008

08001730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001734:	f7ff fff0 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 8001738:	4601      	mov	r1, r0
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	0a9b      	lsrs	r3, r3, #10
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	4a03      	ldr	r2, [pc, #12]	; (8001754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001746:	5cd3      	ldrb	r3, [r2, r3]
 8001748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	080096a8 	.word	0x080096a8

08001758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800175c:	f7ff ffdc 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 8001760:	4601      	mov	r1, r0
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	0b5b      	lsrs	r3, r3, #13
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	4a03      	ldr	r2, [pc, #12]	; (800177c <HAL_RCC_GetPCLK2Freq+0x24>)
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001774:	4618      	mov	r0, r3
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	080096a8 	.word	0x080096a8

08001780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800179a:	4bc6      	ldr	r3, [pc, #792]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	f200 817e 	bhi.w	8001aa4 <HAL_RCC_GetSysClockFreq+0x324>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <HAL_RCC_GetSysClockFreq+0x30>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017e5 	.word	0x080017e5
 80017b4:	08001aa5 	.word	0x08001aa5
 80017b8:	08001aa5 	.word	0x08001aa5
 80017bc:	08001aa5 	.word	0x08001aa5
 80017c0:	080017eb 	.word	0x080017eb
 80017c4:	08001aa5 	.word	0x08001aa5
 80017c8:	08001aa5 	.word	0x08001aa5
 80017cc:	08001aa5 	.word	0x08001aa5
 80017d0:	080017f1 	.word	0x080017f1
 80017d4:	08001aa5 	.word	0x08001aa5
 80017d8:	08001aa5 	.word	0x08001aa5
 80017dc:	08001aa5 	.word	0x08001aa5
 80017e0:	0800194d 	.word	0x0800194d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4bb4      	ldr	r3, [pc, #720]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x338>)
 80017e6:	613b      	str	r3, [r7, #16]
       break;
 80017e8:	e15f      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ea:	4bb4      	ldr	r3, [pc, #720]	; (8001abc <HAL_RCC_GetSysClockFreq+0x33c>)
 80017ec:	613b      	str	r3, [r7, #16]
      break;
 80017ee:	e15c      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f0:	4bb0      	ldr	r3, [pc, #704]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fa:	4bae      	ldr	r3, [pc, #696]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d04a      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001806:	4bab      	ldr	r3, [pc, #684]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	099b      	lsrs	r3, r3, #6
 800180c:	f04f 0400 	mov.w	r4, #0
 8001810:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	ea03 0501 	and.w	r5, r3, r1
 800181c:	ea04 0602 	and.w	r6, r4, r2
 8001820:	4629      	mov	r1, r5
 8001822:	4632      	mov	r2, r6
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	f04f 0400 	mov.w	r4, #0
 800182c:	0154      	lsls	r4, r2, #5
 800182e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001832:	014b      	lsls	r3, r1, #5
 8001834:	4619      	mov	r1, r3
 8001836:	4622      	mov	r2, r4
 8001838:	1b49      	subs	r1, r1, r5
 800183a:	eb62 0206 	sbc.w	r2, r2, r6
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	f04f 0400 	mov.w	r4, #0
 8001846:	0194      	lsls	r4, r2, #6
 8001848:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800184c:	018b      	lsls	r3, r1, #6
 800184e:	1a5b      	subs	r3, r3, r1
 8001850:	eb64 0402 	sbc.w	r4, r4, r2
 8001854:	f04f 0100 	mov.w	r1, #0
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	00e2      	lsls	r2, r4, #3
 800185e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001862:	00d9      	lsls	r1, r3, #3
 8001864:	460b      	mov	r3, r1
 8001866:	4614      	mov	r4, r2
 8001868:	195b      	adds	r3, r3, r5
 800186a:	eb44 0406 	adc.w	r4, r4, r6
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	0262      	lsls	r2, r4, #9
 8001878:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800187c:	0259      	lsls	r1, r3, #9
 800187e:	460b      	mov	r3, r1
 8001880:	4614      	mov	r4, r2
 8001882:	4618      	mov	r0, r3
 8001884:	4621      	mov	r1, r4
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f04f 0400 	mov.w	r4, #0
 800188c:	461a      	mov	r2, r3
 800188e:	4623      	mov	r3, r4
 8001890:	f7ff f9a6 	bl	8000be0 <__aeabi_uldivmod>
 8001894:	4603      	mov	r3, r0
 8001896:	460c      	mov	r4, r1
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	e049      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189c:	4b85      	ldr	r3, [pc, #532]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	f04f 0400 	mov.w	r4, #0
 80018a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	ea03 0501 	and.w	r5, r3, r1
 80018b2:	ea04 0602 	and.w	r6, r4, r2
 80018b6:	4629      	mov	r1, r5
 80018b8:	4632      	mov	r2, r6
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	f04f 0400 	mov.w	r4, #0
 80018c2:	0154      	lsls	r4, r2, #5
 80018c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018c8:	014b      	lsls	r3, r1, #5
 80018ca:	4619      	mov	r1, r3
 80018cc:	4622      	mov	r2, r4
 80018ce:	1b49      	subs	r1, r1, r5
 80018d0:	eb62 0206 	sbc.w	r2, r2, r6
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	f04f 0400 	mov.w	r4, #0
 80018dc:	0194      	lsls	r4, r2, #6
 80018de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018e2:	018b      	lsls	r3, r1, #6
 80018e4:	1a5b      	subs	r3, r3, r1
 80018e6:	eb64 0402 	sbc.w	r4, r4, r2
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	00e2      	lsls	r2, r4, #3
 80018f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018f8:	00d9      	lsls	r1, r3, #3
 80018fa:	460b      	mov	r3, r1
 80018fc:	4614      	mov	r4, r2
 80018fe:	195b      	adds	r3, r3, r5
 8001900:	eb44 0406 	adc.w	r4, r4, r6
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	02a2      	lsls	r2, r4, #10
 800190e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001912:	0299      	lsls	r1, r3, #10
 8001914:	460b      	mov	r3, r1
 8001916:	4614      	mov	r4, r2
 8001918:	4618      	mov	r0, r3
 800191a:	4621      	mov	r1, r4
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f04f 0400 	mov.w	r4, #0
 8001922:	461a      	mov	r2, r3
 8001924:	4623      	mov	r3, r4
 8001926:	f7ff f95b 	bl	8000be0 <__aeabi_uldivmod>
 800192a:	4603      	mov	r3, r0
 800192c:	460c      	mov	r4, r1
 800192e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001930:	4b60      	ldr	r3, [pc, #384]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	3301      	adds	r3, #1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	613b      	str	r3, [r7, #16]
      break;
 800194a:	e0ae      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800194c:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001954:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001956:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d04a      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001962:	4b54      	ldr	r3, [pc, #336]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	f04f 0400 	mov.w	r4, #0
 800196c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	ea03 0501 	and.w	r5, r3, r1
 8001978:	ea04 0602 	and.w	r6, r4, r2
 800197c:	4629      	mov	r1, r5
 800197e:	4632      	mov	r2, r6
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	f04f 0400 	mov.w	r4, #0
 8001988:	0154      	lsls	r4, r2, #5
 800198a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800198e:	014b      	lsls	r3, r1, #5
 8001990:	4619      	mov	r1, r3
 8001992:	4622      	mov	r2, r4
 8001994:	1b49      	subs	r1, r1, r5
 8001996:	eb62 0206 	sbc.w	r2, r2, r6
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	f04f 0400 	mov.w	r4, #0
 80019a2:	0194      	lsls	r4, r2, #6
 80019a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019a8:	018b      	lsls	r3, r1, #6
 80019aa:	1a5b      	subs	r3, r3, r1
 80019ac:	eb64 0402 	sbc.w	r4, r4, r2
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	00e2      	lsls	r2, r4, #3
 80019ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019be:	00d9      	lsls	r1, r3, #3
 80019c0:	460b      	mov	r3, r1
 80019c2:	4614      	mov	r4, r2
 80019c4:	195b      	adds	r3, r3, r5
 80019c6:	eb44 0406 	adc.w	r4, r4, r6
 80019ca:	f04f 0100 	mov.w	r1, #0
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	0262      	lsls	r2, r4, #9
 80019d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80019d8:	0259      	lsls	r1, r3, #9
 80019da:	460b      	mov	r3, r1
 80019dc:	4614      	mov	r4, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	4621      	mov	r1, r4
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f04f 0400 	mov.w	r4, #0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4623      	mov	r3, r4
 80019ec:	f7ff f8f8 	bl	8000be0 <__aeabi_uldivmod>
 80019f0:	4603      	mov	r3, r0
 80019f2:	460c      	mov	r4, r1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e049      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f8:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	f04f 0400 	mov.w	r4, #0
 8001a02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	ea03 0501 	and.w	r5, r3, r1
 8001a0e:	ea04 0602 	and.w	r6, r4, r2
 8001a12:	4629      	mov	r1, r5
 8001a14:	4632      	mov	r2, r6
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	f04f 0400 	mov.w	r4, #0
 8001a1e:	0154      	lsls	r4, r2, #5
 8001a20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a24:	014b      	lsls	r3, r1, #5
 8001a26:	4619      	mov	r1, r3
 8001a28:	4622      	mov	r2, r4
 8001a2a:	1b49      	subs	r1, r1, r5
 8001a2c:	eb62 0206 	sbc.w	r2, r2, r6
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	f04f 0400 	mov.w	r4, #0
 8001a38:	0194      	lsls	r4, r2, #6
 8001a3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a3e:	018b      	lsls	r3, r1, #6
 8001a40:	1a5b      	subs	r3, r3, r1
 8001a42:	eb64 0402 	sbc.w	r4, r4, r2
 8001a46:	f04f 0100 	mov.w	r1, #0
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	00e2      	lsls	r2, r4, #3
 8001a50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a54:	00d9      	lsls	r1, r3, #3
 8001a56:	460b      	mov	r3, r1
 8001a58:	4614      	mov	r4, r2
 8001a5a:	195b      	adds	r3, r3, r5
 8001a5c:	eb44 0406 	adc.w	r4, r4, r6
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	02a2      	lsls	r2, r4, #10
 8001a6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a6e:	0299      	lsls	r1, r3, #10
 8001a70:	460b      	mov	r3, r1
 8001a72:	4614      	mov	r4, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	4621      	mov	r1, r4
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f04f 0400 	mov.w	r4, #0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4623      	mov	r3, r4
 8001a82:	f7ff f8ad 	bl	8000be0 <__aeabi_uldivmod>
 8001a86:	4603      	mov	r3, r0
 8001a88:	460c      	mov	r4, r1
 8001a8a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	0f1b      	lsrs	r3, r3, #28
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	613b      	str	r3, [r7, #16]
      break;
 8001aa2:	e002      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001aa6:	613b      	str	r3, [r7, #16]
      break;
 8001aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aaa:	693b      	ldr	r3, [r7, #16]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	007a1200 	.word	0x007a1200

08001ac0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 8083 	beq.w	8001be0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ada:	4b95      	ldr	r3, [pc, #596]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d019      	beq.n	8001b1a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ae6:	4b92      	ldr	r3, [pc, #584]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001af2:	4b8f      	ldr	r3, [pc, #572]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001afe:	d00c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b00:	4b8b      	ldr	r3, [pc, #556]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d112      	bne.n	8001b32 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0c:	4b88      	ldr	r3, [pc, #544]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b18:	d10b      	bne.n	8001b32 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1a:	4b85      	ldr	r3, [pc, #532]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d05b      	beq.n	8001bde <HAL_RCC_OscConfig+0x11e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d157      	bne.n	8001bde <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e216      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x8a>
 8001b3c:	4b7c      	ldr	r3, [pc, #496]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a7b      	ldr	r2, [pc, #492]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e01d      	b.n	8001b86 <HAL_RCC_OscConfig+0xc6>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0xae>
 8001b54:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a75      	ldr	r2, [pc, #468]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b73      	ldr	r3, [pc, #460]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a72      	ldr	r2, [pc, #456]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0xc6>
 8001b6e:	4b70      	ldr	r3, [pc, #448]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6f      	ldr	r2, [pc, #444]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b6d      	ldr	r3, [pc, #436]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a6c      	ldr	r2, [pc, #432]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d013      	beq.n	8001bb6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fa0d 	bl	8000fac <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b96:	f7ff fa09 	bl	8000fac <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b64      	cmp	r3, #100	; 0x64
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e1db      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba8:	4b61      	ldr	r3, [pc, #388]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0xd6>
 8001bb4:	e014      	b.n	8001be0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff f9f9 	bl	8000fac <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bbe:	f7ff f9f5 	bl	8000fac <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b64      	cmp	r3, #100	; 0x64
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1c7      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd0:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0xfe>
 8001bdc:	e000      	b.n	8001be0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bde:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d06f      	beq.n	8001ccc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d017      	beq.n	8001c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bf8:	4b4d      	ldr	r3, [pc, #308]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c04:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00b      	beq.n	8001c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	d11c      	bne.n	8001c56 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1c:	4b44      	ldr	r3, [pc, #272]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d116      	bne.n	8001c56 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c28:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_OscConfig+0x180>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e18f      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c40:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4938      	ldr	r1, [pc, #224]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c54:	e03a      	b.n	8001ccc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d020      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5e:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f9a2 	bl	8000fac <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f99e 	bl	8000fac <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e170      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4925      	ldr	r1, [pc, #148]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
 8001c9e:	e015      	b.n	8001ccc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7ff f981 	bl	8000fac <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cae:	f7ff f97d 	bl	8000fac <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e14f      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d037      	beq.n	8001d48 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d016      	beq.n	8001d0e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_RCC_OscConfig+0x278>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f961 	bl	8000fac <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cee:	f7ff f95d 	bl	8000fac <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e12f      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x22e>
 8001d0c:	e01c      	b.n	8001d48 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_RCC_OscConfig+0x278>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f94a 	bl	8000fac <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1a:	e00f      	b.n	8001d3c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f946 	bl	8000fac <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d908      	bls.n	8001d3c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e118      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	42470000 	.word	0x42470000
 8001d38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	4b8a      	ldr	r3, [pc, #552]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e9      	bne.n	8001d1c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 8097 	beq.w	8001e84 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5a:	4b83      	ldr	r3, [pc, #524]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10f      	bne.n	8001d86 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b7f      	ldr	r3, [pc, #508]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a7e      	ldr	r2, [pc, #504]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b7c      	ldr	r3, [pc, #496]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b79      	ldr	r3, [pc, #484]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d92:	4b76      	ldr	r3, [pc, #472]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a75      	ldr	r2, [pc, #468]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff f905 	bl	8000fac <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7ff f901 	bl	8000fac <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0d3      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	4b6c      	ldr	r3, [pc, #432]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x31a>
 8001dcc:	4b66      	ldr	r3, [pc, #408]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a65      	ldr	r2, [pc, #404]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd8:	e01c      	b.n	8001e14 <HAL_RCC_OscConfig+0x354>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x33c>
 8001de2:	4b61      	ldr	r3, [pc, #388]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	4a60      	ldr	r2, [pc, #384]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6713      	str	r3, [r2, #112]	; 0x70
 8001dee:	4b5e      	ldr	r3, [pc, #376]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a5d      	ldr	r2, [pc, #372]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0x354>
 8001dfc:	4b5a      	ldr	r3, [pc, #360]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	4a59      	ldr	r2, [pc, #356]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	6713      	str	r3, [r2, #112]	; 0x70
 8001e08:	4b57      	ldr	r3, [pc, #348]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	4a56      	ldr	r2, [pc, #344]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e0e:	f023 0304 	bic.w	r3, r3, #4
 8001e12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d015      	beq.n	8001e48 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f8c6 	bl	8000fac <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f7ff f8c2 	bl	8000fac <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e092      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3a:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0ee      	beq.n	8001e24 <HAL_RCC_OscConfig+0x364>
 8001e46:	e014      	b.n	8001e72 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff f8b0 	bl	8000fac <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7ff f8ac 	bl	8000fac <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e07c      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e66:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ee      	bne.n	8001e50 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e78:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	4a3a      	ldr	r2, [pc, #232]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d068      	beq.n	8001f5e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d060      	beq.n	8001f5a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d145      	bne.n	8001f2c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b33      	ldr	r3, [pc, #204]	; (8001f70 <HAL_RCC_OscConfig+0x4b0>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea6:	f7ff f881 	bl	8000fac <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff f87d 	bl	8000fac <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e04f      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	019b      	lsls	r3, r3, #6
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	085b      	lsrs	r3, r3, #1
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	041b      	lsls	r3, r3, #16
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	061b      	lsls	r3, r3, #24
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	071b      	lsls	r3, r3, #28
 8001ef8:	491b      	ldr	r1, [pc, #108]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <HAL_RCC_OscConfig+0x4b0>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff f852 	bl	8000fac <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff f84e 	bl	8000fac <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e020      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x44c>
 8001f2a:	e018      	b.n	8001f5e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_RCC_OscConfig+0x4b0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7ff f83b 	bl	8000fac <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7ff f837 	bl	8000fac <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e009      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x47a>
 8001f58:	e001      	b.n	8001f5e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	42470060 	.word	0x42470060

08001f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e03f      	b.n	8002006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f003 ffdc 	bl	8005f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2224      	movs	r2, #36	; 0x24
 8001fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f829 	bl	8002010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002050:	f023 030c 	bic.w	r3, r3, #12
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	68f9      	ldr	r1, [r7, #12]
 800205a:	430b      	orrs	r3, r1
 800205c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699a      	ldr	r2, [r3, #24]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800207c:	f040 80e4 	bne.w	8002248 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4aab      	ldr	r2, [pc, #684]	; (8002334 <UART_SetConfig+0x324>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d004      	beq.n	8002094 <UART_SetConfig+0x84>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4aaa      	ldr	r2, [pc, #680]	; (8002338 <UART_SetConfig+0x328>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d16c      	bne.n	800216e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002094:	f7ff fb60 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 8002098:	4602      	mov	r2, r0
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	009a      	lsls	r2, r3, #2
 80020a2:	441a      	add	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4aa3      	ldr	r2, [pc, #652]	; (800233c <UART_SetConfig+0x32c>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	011c      	lsls	r4, r3, #4
 80020b8:	f7ff fb4e 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	009a      	lsls	r2, r3, #2
 80020c6:	441a      	add	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80020d2:	f7ff fb41 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 80020d6:	4602      	mov	r2, r0
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	009a      	lsls	r2, r3, #2
 80020e0:	441a      	add	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	4a93      	ldr	r2, [pc, #588]	; (800233c <UART_SetConfig+0x32c>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2264      	movs	r2, #100	; 0x64
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	1aeb      	subs	r3, r5, r3
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	3332      	adds	r3, #50	; 0x32
 8002100:	4a8e      	ldr	r2, [pc, #568]	; (800233c <UART_SetConfig+0x32c>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800210e:	441c      	add	r4, r3
 8002110:	f7ff fb22 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 8002114:	4602      	mov	r2, r0
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	009a      	lsls	r2, r3, #2
 800211e:	441a      	add	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fbb2 f5f3 	udiv	r5, r2, r3
 800212a:	f7ff fb15 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 800212e:	4602      	mov	r2, r0
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	009a      	lsls	r2, r3, #2
 8002138:	441a      	add	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	4a7d      	ldr	r2, [pc, #500]	; (800233c <UART_SetConfig+0x32c>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2264      	movs	r2, #100	; 0x64
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	1aeb      	subs	r3, r5, r3
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	3332      	adds	r3, #50	; 0x32
 8002158:	4a78      	ldr	r2, [pc, #480]	; (800233c <UART_SetConfig+0x32c>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	f003 0207 	and.w	r2, r3, #7
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4422      	add	r2, r4
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e154      	b.n	8002418 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800216e:	f7ff fadf 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 8002172:	4602      	mov	r2, r0
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	009a      	lsls	r2, r3, #2
 800217c:	441a      	add	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	4a6c      	ldr	r2, [pc, #432]	; (800233c <UART_SetConfig+0x32c>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	011c      	lsls	r4, r3, #4
 8002192:	f7ff facd 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 8002196:	4602      	mov	r2, r0
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009a      	lsls	r2, r3, #2
 80021a0:	441a      	add	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fbb2 f5f3 	udiv	r5, r2, r3
 80021ac:	f7ff fac0 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	009a      	lsls	r2, r3, #2
 80021ba:	441a      	add	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	4a5d      	ldr	r2, [pc, #372]	; (800233c <UART_SetConfig+0x32c>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	2264      	movs	r2, #100	; 0x64
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	1aeb      	subs	r3, r5, r3
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	3332      	adds	r3, #50	; 0x32
 80021da:	4a58      	ldr	r2, [pc, #352]	; (800233c <UART_SetConfig+0x32c>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021e8:	441c      	add	r4, r3
 80021ea:	f7ff faa1 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009a      	lsls	r2, r3, #2
 80021f8:	441a      	add	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fbb2 f5f3 	udiv	r5, r2, r3
 8002204:	f7ff fa94 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 8002208:	4602      	mov	r2, r0
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	009a      	lsls	r2, r3, #2
 8002212:	441a      	add	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	4a47      	ldr	r2, [pc, #284]	; (800233c <UART_SetConfig+0x32c>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	2264      	movs	r2, #100	; 0x64
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	1aeb      	subs	r3, r5, r3
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	3332      	adds	r3, #50	; 0x32
 8002232:	4a42      	ldr	r2, [pc, #264]	; (800233c <UART_SetConfig+0x32c>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	f003 0207 	and.w	r2, r3, #7
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4422      	add	r2, r4
 8002244:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002246:	e0e7      	b.n	8002418 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a39      	ldr	r2, [pc, #228]	; (8002334 <UART_SetConfig+0x324>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <UART_SetConfig+0x24c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a38      	ldr	r2, [pc, #224]	; (8002338 <UART_SetConfig+0x328>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d171      	bne.n	8002340 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800225c:	f7ff fa7c 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 8002260:	4602      	mov	r2, r0
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	009a      	lsls	r2, r3, #2
 800226a:	441a      	add	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4a31      	ldr	r2, [pc, #196]	; (800233c <UART_SetConfig+0x32c>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	011c      	lsls	r4, r3, #4
 8002280:	f7ff fa6a 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 8002284:	4602      	mov	r2, r0
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	009a      	lsls	r2, r3, #2
 800228e:	441a      	add	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	fbb2 f5f3 	udiv	r5, r2, r3
 800229a:	f7ff fa5d 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	441a      	add	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	4a21      	ldr	r2, [pc, #132]	; (800233c <UART_SetConfig+0x32c>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2264      	movs	r2, #100	; 0x64
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	1aeb      	subs	r3, r5, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	3332      	adds	r3, #50	; 0x32
 80022c8:	4a1c      	ldr	r2, [pc, #112]	; (800233c <UART_SetConfig+0x32c>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d4:	441c      	add	r4, r3
 80022d6:	f7ff fa3f 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	009a      	lsls	r2, r3, #2
 80022e4:	441a      	add	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fbb2 f5f3 	udiv	r5, r2, r3
 80022f0:	f7ff fa32 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	009a      	lsls	r2, r3, #2
 80022fe:	441a      	add	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	4a0c      	ldr	r2, [pc, #48]	; (800233c <UART_SetConfig+0x32c>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	2264      	movs	r2, #100	; 0x64
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	1aeb      	subs	r3, r5, r3
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	3332      	adds	r3, #50	; 0x32
 800231e:	4a07      	ldr	r2, [pc, #28]	; (800233c <UART_SetConfig+0x32c>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	f003 020f 	and.w	r2, r3, #15
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4422      	add	r2, r4
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	e071      	b.n	8002418 <UART_SetConfig+0x408>
 8002334:	40011000 	.word	0x40011000
 8002338:	40011400 	.word	0x40011400
 800233c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002340:	f7ff f9f6 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 8002344:	4602      	mov	r2, r0
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	009a      	lsls	r2, r3, #2
 800234e:	441a      	add	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	4a31      	ldr	r2, [pc, #196]	; (8002420 <UART_SetConfig+0x410>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	011c      	lsls	r4, r3, #4
 8002364:	f7ff f9e4 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 8002368:	4602      	mov	r2, r0
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	009a      	lsls	r2, r3, #2
 8002372:	441a      	add	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	fbb2 f5f3 	udiv	r5, r2, r3
 800237e:	f7ff f9d7 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 8002382:	4602      	mov	r2, r0
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	009a      	lsls	r2, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <UART_SetConfig+0x410>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2264      	movs	r2, #100	; 0x64
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	1aeb      	subs	r3, r5, r3
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	3332      	adds	r3, #50	; 0x32
 80023ac:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <UART_SetConfig+0x410>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b8:	441c      	add	r4, r3
 80023ba:	f7ff f9b9 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 80023be:	4602      	mov	r2, r0
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009a      	lsls	r2, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80023d4:	f7ff f9ac 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	009a      	lsls	r2, r3, #2
 80023e2:	441a      	add	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <UART_SetConfig+0x410>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	2264      	movs	r2, #100	; 0x64
 80023f8:	fb02 f303 	mul.w	r3, r2, r3
 80023fc:	1aeb      	subs	r3, r5, r3
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	3332      	adds	r3, #50	; 0x32
 8002402:	4a07      	ldr	r2, [pc, #28]	; (8002420 <UART_SetConfig+0x410>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	f003 020f 	and.w	r2, r3, #15
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4422      	add	r2, r4
 8002414:	609a      	str	r2, [r3, #8]
}
 8002416:	e7ff      	b.n	8002418 <UART_SetConfig+0x408>
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bdb0      	pop	{r4, r5, r7, pc}
 8002420:	51eb851f 	.word	0x51eb851f

08002424 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_ADC_INJ_SetSequencerLength>:
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80024a6:	481c      	ldr	r0, [pc, #112]	; (8002518 <LL_ADC_CommonInit+0x80>)
 80024a8:	f7ff ffe2 	bl	8002470 <LL_ADC_IsEnabled>
 80024ac:	4604      	mov	r4, r0
 80024ae:	481b      	ldr	r0, [pc, #108]	; (800251c <LL_ADC_CommonInit+0x84>)
 80024b0:	f7ff ffde 	bl	8002470 <LL_ADC_IsEnabled>
 80024b4:	4603      	mov	r3, r0
 80024b6:	431c      	orrs	r4, r3
 80024b8:	4819      	ldr	r0, [pc, #100]	; (8002520 <LL_ADC_CommonInit+0x88>)
 80024ba:	f7ff ffd9 	bl	8002470 <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	4323      	orrs	r3, r4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d120      	bne.n	8002508 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d012      	beq.n	80024f4 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <LL_ADC_CommonInit+0x8c>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	6811      	ldr	r1, [r2, #0]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	6852      	ldr	r2, [r2, #4]
 80024de:	4311      	orrs	r1, r2
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	6892      	ldr	r2, [r2, #8]
 80024e4:	4311      	orrs	r1, r2
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	68d2      	ldr	r2, [r2, #12]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	e00b      	b.n	800250c <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <LL_ADC_CommonInit+0x8c>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	e001      	b.n	800250c <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}
 8002516:	bf00      	nop
 8002518:	40012000 	.word	0x40012000
 800251c:	40012100 	.word	0x40012100
 8002520:	40012200 	.word	0x40012200
 8002524:	fffc10e0 	.word	0xfffc10e0

08002528 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff9a 	bl	8002470 <LL_ADC_IsEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d117      	bne.n	8002572 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800254a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	6811      	ldr	r1, [r2, #0]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	6892      	ldr	r2, [r2, #8]
 8002556:	430a      	orrs	r2, r1
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	e001      	b.n	8002576 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ff6e 	bl	8002470 <LL_ADC_IsEnabled>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d131      	bne.n	80025fe <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00c      	beq.n	80025bc <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	430b      	orrs	r3, r1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	e008      	b.n	80025ce <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <LL_ADC_REG_Init+0x8c>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	4311      	orrs	r1, r2
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	6912      	ldr	r2, [r2, #16]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4619      	mov	r1, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ff14 	bl	8002424 <LL_ADC_REG_SetSequencerLength>
 80025fc:	e001      	b.n	8002602 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	c0fffcfd 	.word	0xc0fffcfd

08002610 <LL_ADC_INJ_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ff26 	bl	8002470 <LL_ADC_IsEnabled>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d12b      	bne.n	8002682 <LL_ADC_INJ_Init+0x72>
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00c      	beq.n	800264c <LL_ADC_INJ_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6899      	ldr	r1, [r3, #8]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	430b      	orrs	r3, r1
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	e008      	b.n	800265e <LL_ADC_INJ_Init+0x4e>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	605a      	str	r2, [r3, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4619      	mov	r1, r3
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fee5 	bl	800244a <LL_ADC_INJ_SetSequencerLength>
 8002680:	e001      	b.n	8002686 <LL_ADC_INJ_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4904      	ldr	r1, [pc, #16]	; (80026b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	40013c00 	.word	0x40013c00

080026b4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	4904      	ldr	r1, [pc, #16]	; (80026d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40013c00 	.word	0x40013c00

080026dc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	4904      	ldr	r1, [pc, #16]	; (80026fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]

}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40013c00 	.word	0x40013c00

08002700 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <LL_EXTI_DisableEvent_0_31+0x24>)
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	43db      	mvns	r3, r3
 8002710:	4904      	ldr	r1, [pc, #16]	; (8002724 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002712:	4013      	ands	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40013c00 	.word	0x40013c00

08002728 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	4904      	ldr	r1, [pc, #16]	; (8002748 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4313      	orrs	r3, r2
 800273a:	608b      	str	r3, [r1, #8]

}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40013c00 	.word	0x40013c00

0800274c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	43db      	mvns	r3, r3
 800275c:	4904      	ldr	r1, [pc, #16]	; (8002770 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800275e:	4013      	ands	r3, r2
 8002760:	608b      	str	r3, [r1, #8]

}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40013c00 	.word	0x40013c00

08002774 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	4904      	ldr	r1, [pc, #16]	; (8002794 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4313      	orrs	r3, r2
 8002786:	60cb      	str	r3, [r1, #12]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40013c00 	.word	0x40013c00

08002798 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	4904      	ldr	r1, [pc, #16]	; (80027bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	60cb      	str	r3, [r1, #12]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	791b      	ldrb	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d060      	beq.n	8002896 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d067      	beq.n	80028ac <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	795b      	ldrb	r3, [r3, #5]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d00e      	beq.n	8002802 <LL_EXTI_Init+0x42>
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d017      	beq.n	8002818 <LL_EXTI_Init+0x58>
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d120      	bne.n	800282e <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff85 	bl	8002700 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff48 	bl	8002690 <LL_EXTI_EnableIT_0_31>
          break;
 8002800:	e018      	b.n	8002834 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ff54 	bl	80026b4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff63 	bl	80026dc <LL_EXTI_EnableEvent_0_31>
          break;
 8002816:	e00d      	b.n	8002834 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff37 	bl	8002690 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ff58 	bl	80026dc <LL_EXTI_EnableEvent_0_31>
          break;
 800282c:	e002      	b.n	8002834 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
          break;
 8002832:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	799b      	ldrb	r3, [r3, #6]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d037      	beq.n	80028ac <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	799b      	ldrb	r3, [r3, #6]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d00e      	beq.n	8002862 <LL_EXTI_Init+0xa2>
 8002844:	2b03      	cmp	r3, #3
 8002846:	d017      	beq.n	8002878 <LL_EXTI_Init+0xb8>
 8002848:	2b01      	cmp	r3, #1
 800284a:	d120      	bne.n	800288e <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ffa1 	bl	8002798 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff64 	bl	8002728 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002860:	e025      	b.n	80028ae <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff70 	bl	800274c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff7f 	bl	8002774 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002876:	e01a      	b.n	80028ae <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff53 	bl	8002728 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff74 	bl	8002774 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800288c:	e00f      	b.n	80028ae <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
            break;
 8002892:	bf00      	nop
 8002894:	e00b      	b.n	80028ae <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ff0a 	bl	80026b4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff2b 	bl	8002700 <LL_EXTI_DisableEvent_0_31>
 80028aa:	e000      	b.n	80028ae <LL_EXTI_Init+0xee>
      }
 80028ac:	bf00      	nop
  }
  return status;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2103      	movs	r1, #3
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	401a      	ands	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	61bb      	str	r3, [r7, #24]
  return result;
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	431a      	orrs	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	601a      	str	r2, [r3, #0]
}
 800290a:	bf00      	nop
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	43db      	mvns	r3, r3
 800292a:	401a      	ands	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	431a      	orrs	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002946:	b480      	push	{r7}
 8002948:	b089      	sub	sp, #36	; 0x24
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	613b      	str	r3, [r7, #16]
  return result;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	2103      	movs	r1, #3
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	401a      	ands	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	61bb      	str	r3, [r7, #24]
  return result;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	431a      	orrs	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002998:	bf00      	nop
 800299a:	3724      	adds	r7, #36	; 0x24
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	613b      	str	r3, [r7, #16]
  return result;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2103      	movs	r1, #3
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	61bb      	str	r3, [r7, #24]
  return result;
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	60da      	str	r2, [r3, #12]
}
 80029f6:	bf00      	nop
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b089      	sub	sp, #36	; 0x24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1a      	ldr	r2, [r3, #32]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	613b      	str	r3, [r7, #16]
  return result;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	210f      	movs	r1, #15
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	401a      	ands	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	61bb      	str	r3, [r7, #24]
  return result;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002a54:	bf00      	nop
 8002a56:	3724      	adds	r7, #36	; 0x24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	613b      	str	r3, [r7, #16]
  return result;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	210f      	movs	r1, #15
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	401a      	ands	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	61bb      	str	r3, [r7, #24]
  return result;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002ab6:	bf00      	nop
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b088      	sub	sp, #32
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	613b      	str	r3, [r7, #16]
  return result;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002aec:	e049      	b.n	8002b82 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2101      	movs	r1, #1
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d03b      	beq.n	8002b7c <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fed3 	bl	80028b8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d003      	beq.n	8002b22 <LL_GPIO_Init+0x60>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d106      	bne.n	8002b30 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	461a      	mov	r2, r3
 8002b28:	69b9      	ldr	r1, [r7, #24]
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ff0b 	bl	8002946 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	461a      	mov	r2, r3
 8002b36:	69b9      	ldr	r1, [r7, #24]
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ff33 	bl	80029a4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d11a      	bne.n	8002b7c <LL_GPIO_Init+0xba>
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	60bb      	str	r3, [r7, #8]
  return result;
 8002b52:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b07      	cmp	r3, #7
 8002b5c:	d807      	bhi.n	8002b6e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	461a      	mov	r2, r3
 8002b64:	69b9      	ldr	r1, [r7, #24]
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ff4b 	bl	8002a02 <LL_GPIO_SetAFPin_0_7>
 8002b6c:	e006      	b.n	8002b7c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	461a      	mov	r2, r3
 8002b74:	69b9      	ldr	r1, [r7, #24]
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ff72 	bl	8002a60 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ae      	bne.n	8002aee <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d003      	beq.n	8002ba0 <LL_GPIO_Init+0xde>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d107      	bne.n	8002bb0 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff feb3 	bl	8002916 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	615a      	str	r2, [r3, #20]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3d      	ldr	r2, [pc, #244]	; (8002da8 <LL_TIM_Init+0x108>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d013      	beq.n	8002ce0 <LL_TIM_Init+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbe:	d00f      	beq.n	8002ce0 <LL_TIM_Init+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a3a      	ldr	r2, [pc, #232]	; (8002dac <LL_TIM_Init+0x10c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00b      	beq.n	8002ce0 <LL_TIM_Init+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a39      	ldr	r2, [pc, #228]	; (8002db0 <LL_TIM_Init+0x110>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d007      	beq.n	8002ce0 <LL_TIM_Init+0x40>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a38      	ldr	r2, [pc, #224]	; (8002db4 <LL_TIM_Init+0x114>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <LL_TIM_Init+0x40>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a37      	ldr	r2, [pc, #220]	; (8002db8 <LL_TIM_Init+0x118>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d106      	bne.n	8002cee <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <LL_TIM_Init+0x108>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d02b      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfc:	d027      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a2a      	ldr	r2, [pc, #168]	; (8002dac <LL_TIM_Init+0x10c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d023      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <LL_TIM_Init+0x110>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01f      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <LL_TIM_Init+0x114>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01b      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <LL_TIM_Init+0x118>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d017      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <LL_TIM_Init+0x11c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a25      	ldr	r2, [pc, #148]	; (8002dc0 <LL_TIM_Init+0x120>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00f      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <LL_TIM_Init+0x124>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00b      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <LL_TIM_Init+0x128>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <LL_TIM_Init+0x12c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d003      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <LL_TIM_Init+0x130>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d106      	bne.n	8002d5c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff34 	bl	8002bd6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ff20 	bl	8002bba <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <LL_TIM_Init+0x108>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d003      	beq.n	8002d8a <LL_TIM_Init+0xea>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <LL_TIM_Init+0x118>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d105      	bne.n	8002d96 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	7c1b      	ldrb	r3, [r3, #16]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff2e 	bl	8002bf2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff ff71 	bl	8002c7e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40000c00 	.word	0x40000c00
 8002db8:	40010400 	.word	0x40010400
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	40014400 	.word	0x40014400
 8002dc4:	40014800 	.word	0x40014800
 8002dc8:	40001800 	.word	0x40001800
 8002dcc:	40001c00 	.word	0x40001c00
 8002dd0:	40002000 	.word	0x40002000

08002dd4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d012      	beq.n	8002e10 <LL_TIM_OC_Init+0x3c>
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d802      	bhi.n	8002df4 <LL_TIM_OC_Init+0x20>
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d007      	beq.n	8002e02 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002df2:	e022      	b.n	8002e3a <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8002df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df8:	d011      	beq.n	8002e1e <LL_TIM_OC_Init+0x4a>
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	d015      	beq.n	8002e2c <LL_TIM_OC_Init+0x58>
      break;
 8002e00:	e01b      	b.n	8002e3a <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f867 	bl	8002ed8 <OC1Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e0e:	e014      	b.n	8002e3a <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f8cc 	bl	8002fb0 <OC2Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e1c:	e00d      	b.n	8002e3a <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f935 	bl	8003090 <OC3Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	75fb      	strb	r3, [r7, #23]
      break;
 8002e2a:	e006      	b.n	8002e3a <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f99e 	bl	8003170 <OC4Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	75fb      	strb	r3, [r7, #23]
      break;
 8002e38:	bf00      	nop
  }

  return result;
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	7b12      	ldrb	r2, [r2, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	89d2      	ldrh	r2, [r2, #14]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f023 0201 	bic.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 0202 	bic.w	r2, r3, #2
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0201 	bic.w	r2, r3, #1
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <OC1Config+0xd0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d003      	beq.n	8002f42 <OC1Config+0x6a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1b      	ldr	r2, [pc, #108]	; (8002fac <OC1Config+0xd4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d11e      	bne.n	8002f80 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f023 0208 	bic.w	r2, r3, #8
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f023 0204 	bic.w	r2, r3, #4
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4619      	mov	r1, r3
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff fe3b 	bl	8002c0e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40010400 	.word	0x40010400

08002fb0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 0210 	bic.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f023 0220 	bic.w	r2, r3, #32
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0210 	bic.w	r2, r3, #16
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <OC2Config+0xd8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <OC2Config+0x70>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <OC2Config+0xdc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d11f      	bne.n	8003060 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	019b      	lsls	r3, r3, #6
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	019b      	lsls	r3, r3, #6
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fdd9 	bl	8002c2a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40010000 	.word	0x40010000
 800308c:	40010400 	.word	0x40010400

08003090 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <OC3Config+0xd8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <OC3Config+0x6e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1c      	ldr	r2, [pc, #112]	; (800316c <OC3Config+0xdc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d11f      	bne.n	800313e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	029b      	lsls	r3, r3, #10
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	029b      	lsls	r3, r3, #10
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	015b      	lsls	r3, r3, #5
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fd78 	bl	8002c46 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000
 800316c:	40010400 	.word	0x40010400

08003170 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	031b      	lsls	r3, r3, #12
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	031b      	lsls	r3, r3, #12
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a11      	ldr	r2, [pc, #68]	; (8003218 <OC4Config+0xa8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <OC4Config+0x70>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a10      	ldr	r2, [pc, #64]	; (800321c <OC4Config+0xac>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d107      	bne.n	80031f0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	019b      	lsls	r3, r3, #6
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff fd2d 	bl	8002c62 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40010000 	.word	0x40010000
 800321c:	40010400 	.word	0x40010400

08003220 <_ZN9ArgSensorC1Ev>:
 */

#include "ArgSensor.hpp"
#include "math.h"

ArgSensor::ArgSensor() {
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <_ZN9ArgSensorC1Ev+0x24>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mArg = 0;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	605a      	str	r2, [r3, #4]
}
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	08009670 	.word	0x08009670

08003248 <_ZN9ArgSensorD1Ev>:

ArgSensor::~ArgSensor() {
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	4a04      	ldr	r2, [pc, #16]	; (8003264 <_ZN9ArgSensorD1Ev+0x1c>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	08009670 	.word	0x08009670

08003268 <_ZN9ArgSensorD0Ev>:
ArgSensor::~ArgSensor() {
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
}
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ffe9 	bl	8003248 <_ZN9ArgSensorD1Ev>
 8003276:	2108      	movs	r1, #8
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f003 f8fe 	bl	800647a <_ZdlPvj>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <_ZN9ArgSensor9incrementEf>:

void ArgSensor::Init(void) {
	mArg = 0;
}

void ArgSensor::increment(float pArg){
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	ed87 0a00 	vstr	s0, [r7]
	mArg = mArg + pArg;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	ed93 7a01 	vldr	s14, [r3, #4]
 800329a:	edd7 7a00 	vldr	s15, [r7]
 800329e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	edc3 7a01 	vstr	s15, [r3, #4]
	mArg = fmodl(mArg, (2*M_PI));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd f917 	bl	80004e0 <__aeabi_f2d>
 80032b2:	4603      	mov	r3, r0
 80032b4:	460c      	mov	r4, r1
 80032b6:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80032e0 <_ZN9ArgSensor9incrementEf+0x58>
 80032ba:	ec44 3b10 	vmov	d0, r3, r4
 80032be:	f003 f8ef 	bl	80064a0 <fmodl>
 80032c2:	ec54 3b10 	vmov	r3, r4, d0
 80032c6:	4618      	mov	r0, r3
 80032c8:	4621      	mov	r1, r4
 80032ca:	f7fd fc39 	bl	8000b40 <__aeabi_d2f>
 80032ce:	4602      	mov	r2, r0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	605a      	str	r2, [r3, #4]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}
 80032dc:	f3af 8000 	nop.w
 80032e0:	54442d18 	.word	0x54442d18
 80032e4:	401921fb 	.word	0x401921fb

080032e8 <_ZN9ArgSensor6getArgEv>:
void ArgSensor::decrement(float pArg){
	mArg = mArg - pArg;
	mArg = fmodl(mArg, (2*M_PI));
}

float ArgSensor::getArg(void){
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	return mArg;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	ee07 3a90 	vmov	s15, r3
}
 80032f8:	eeb0 0a67 	vmov.f32	s0, s15
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <_ZN7MathLibC1Ev>:

#include "MathLib.hpp"
#include <vector>
#include "math.h"

MathLib::MathLib() {
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <_ZN7MathLibC1Ev+0x34>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f96d 	bl	8003612 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3310      	adds	r3, #16
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f968 	bl	8003612 <_ZNSt6vectorIfSaIfEEC1Ev>
	mSize = 0;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	61da      	str	r2, [r3, #28]
}
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	08009680 	.word	0x08009680

08003358 <_ZN7MathLibD1Ev>:

MathLib::~MathLib() {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	4a0f      	ldr	r2, [pc, #60]	; (80033a0 <_ZN7MathLibD1Ev+0x48>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	601a      	str	r2, [r3, #0]
	mSize = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	61da      	str	r2, [r3, #28]
	mSinList.clear();
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	4618      	mov	r0, r3
 8003372:	f000 f976 	bl	8003662 <_ZNSt6vectorIfSaIfEE5clearEv>
	mCosList.clear();
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3310      	adds	r3, #16
 800337a:	4618      	mov	r0, r3
 800337c:	f000 f971 	bl	8003662 <_ZNSt6vectorIfSaIfEE5clearEv>
MathLib::~MathLib() {
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3310      	adds	r3, #16
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f951 	bl	800362c <_ZNSt6vectorIfSaIfEED1Ev>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f94c 	bl	800362c <_ZNSt6vectorIfSaIfEED1Ev>
}
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	08009680 	.word	0x08009680

080033a4 <_ZN7MathLibD0Ev>:
MathLib::~MathLib() {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
}
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ffd3 	bl	8003358 <_ZN7MathLibD1Ev>
 80033b2:	2124      	movs	r1, #36	; 0x24
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f003 f860 	bl	800647a <_ZdlPvj>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_ZN7MathLib10setLibSizeEi>:

void MathLib::setLibSize(int pSize){
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
	mSize = pSize;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	61da      	str	r2, [r3, #28]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <_ZN7MathLib5fInitEi>:

void MathLib::fInit(int pSize){
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
	setLibSize(pSize);
 80033ea:	6839      	ldr	r1, [r7, #0]
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ffe9 	bl	80033c4 <_ZN7MathLib10setLibSizeEi>
	if(mSize == 0){
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d100      	bne.n	80033fc <_ZN7MathLib5fInitEi+0x1c>
		while(1){}//error check
 80033fa:	e7fe      	b.n	80033fa <_ZN7MathLib5fInitEi+0x1a>
	}
	mRadvsSize = mSize / (2*M_PI);//サイズと1radianの比
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd f85b 	bl	80004bc <__aeabi_i2d>
 8003406:	a310      	add	r3, pc, #64	; (adr r3, 8003448 <_ZN7MathLib5fInitEi+0x68>)
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f7fd f9ea 	bl	80007e4 <__aeabi_ddiv>
 8003410:	4603      	mov	r3, r0
 8003412:	460c      	mov	r4, r1
 8003414:	4618      	mov	r0, r3
 8003416:	4621      	mov	r1, r4
 8003418:	f7fd fb92 	bl	8000b40 <__aeabi_d2f>
 800341c:	4602      	mov	r2, r0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	621a      	str	r2, [r3, #32]

	fSinVectorInit(&mSinList);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f81d 	bl	8003468 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>
	fCosVectorInit(&mCosList);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3310      	adds	r3, #16
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f867 	bl	8003508 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bd90      	pop	{r4, r7, pc}
 8003442:	bf00      	nop
 8003444:	f3af 8000 	nop.w
 8003448:	54442d18 	.word	0x54442d18
 800344c:	401921fb 	.word	0x401921fb

08003450 <_ZN7MathLib10getLibSizeEv>:

int MathLib::getLibSize(void){return mSize;}
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fSinVectorInit(std::vector<float> *pVector){
 8003468:	b5b0      	push	{r4, r5, r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	429a      	cmp	r2, r3
 800347e:	da39      	bge.n	80034f4 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fsinval = sin(i*2*M_PI/(float)mSize);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd f819 	bl	80004bc <__aeabi_i2d>
 800348a:	a31d      	add	r3, pc, #116	; (adr r3, 8003500 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x98>)
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	f7fd f87e 	bl	8000590 <__aeabi_dmul>
 8003494:	4603      	mov	r3, r0
 8003496:	460c      	mov	r4, r1
 8003498:	4625      	mov	r5, r4
 800349a:	461c      	mov	r4, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a8:	ee17 0a90 	vmov	r0, s15
 80034ac:	f7fd f818 	bl	80004e0 <__aeabi_f2d>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4620      	mov	r0, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	f7fd f994 	bl	80007e4 <__aeabi_ddiv>
 80034bc:	4603      	mov	r3, r0
 80034be:	460c      	mov	r4, r1
 80034c0:	ec44 3b17 	vmov	d7, r3, r4
 80034c4:	eeb0 0a47 	vmov.f32	s0, s14
 80034c8:	eef0 0a67 	vmov.f32	s1, s15
 80034cc:	f003 f9f0 	bl	80068b0 <sin>
 80034d0:	ec54 3b10 	vmov	r3, r4, d0
 80034d4:	4618      	mov	r0, r3
 80034d6:	4621      	mov	r1, r4
 80034d8:	f7fd fb32 	bl	8000b40 <__aeabi_d2f>
 80034dc:	4603      	mov	r3, r0
 80034de:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fsinval);
 80034e0:	f107 0308 	add.w	r3, r7, #8
 80034e4:	4619      	mov	r1, r3
 80034e6:	6838      	ldr	r0, [r7, #0]
 80034e8:	f000 f8c9 	bl	800367e <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3301      	adds	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e7c0      	b.n	8003476 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bdb0      	pop	{r4, r5, r7, pc}
 80034fc:	f3af 8000 	nop.w
 8003500:	54442d18 	.word	0x54442d18
 8003504:	400921fb 	.word	0x400921fb

08003508 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fCosVectorInit(std::vector<float> *pVector){
 8003508:	b5b0      	push	{r4, r5, r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	429a      	cmp	r2, r3
 800351e:	da39      	bge.n	8003594 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fcosval = cos(i*2*M_PI/(float)mSize);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4618      	mov	r0, r3
 8003526:	f7fc ffc9 	bl	80004bc <__aeabi_i2d>
 800352a:	a31d      	add	r3, pc, #116	; (adr r3, 80035a0 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x98>)
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003530:	f7fd f82e 	bl	8000590 <__aeabi_dmul>
 8003534:	4603      	mov	r3, r0
 8003536:	460c      	mov	r4, r1
 8003538:	4625      	mov	r5, r4
 800353a:	461c      	mov	r4, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003548:	ee17 0a90 	vmov	r0, s15
 800354c:	f7fc ffc8 	bl	80004e0 <__aeabi_f2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4620      	mov	r0, r4
 8003556:	4629      	mov	r1, r5
 8003558:	f7fd f944 	bl	80007e4 <__aeabi_ddiv>
 800355c:	4603      	mov	r3, r0
 800355e:	460c      	mov	r4, r1
 8003560:	ec44 3b17 	vmov	d7, r3, r4
 8003564:	eeb0 0a47 	vmov.f32	s0, s14
 8003568:	eef0 0a67 	vmov.f32	s1, s15
 800356c:	f003 f854 	bl	8006618 <cos>
 8003570:	ec54 3b10 	vmov	r3, r4, d0
 8003574:	4618      	mov	r0, r3
 8003576:	4621      	mov	r1, r4
 8003578:	f7fd fae2 	bl	8000b40 <__aeabi_d2f>
 800357c:	4603      	mov	r3, r0
 800357e:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fcosval);
 8003580:	f107 0308 	add.w	r3, r7, #8
 8003584:	4619      	mov	r1, r3
 8003586:	6838      	ldr	r0, [r7, #0]
 8003588:	f000 f879 	bl	800367e <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3301      	adds	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e7c0      	b.n	8003516 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bdb0      	pop	{r4, r5, r7, pc}
 800359c:	f3af 8000 	nop.w
 80035a0:	54442d18 	.word	0x54442d18
 80035a4:	400921fb 	.word	0x400921fb

080035a8 <_ZN7MathLib10getSinListEv>:

std::vector<float> MathLib::getSinList(void){
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
	return mSinList;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4619      	mov	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f885 	bl	80036c8 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <_ZN7MathLib10getCosListEv>:

std::vector<float> MathLib::getCosList(void){
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
	return mCosList;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	3310      	adds	r3, #16
 80035d4:	4619      	mov	r1, r3
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f876 	bl	80036c8 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <_ZN7MathLib14radToSizeCountEf>:

int MathLib::radToSizeCount(float pradian){
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	ed87 0a00 	vstr	s0, [r7]
	return pradian * mRadvsSize;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	ed93 7a08 	vldr	s14, [r3, #32]
 80035f6:	edd7 7a00 	vldr	s15, [r7]
 80035fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003602:	ee17 3a90 	vmov	r3, s15
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <_ZNSt6vectorIfSaIfEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4618      	mov	r0, r3
 800361e:	f000 f89c 	bl	800375a <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800362c:	b5b0      	push	{r4, r5, r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681c      	ldr	r4, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f8b2 	bl	80037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003644:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003646:	461a      	mov	r2, r3
 8003648:	4629      	mov	r1, r5
 800364a:	4620      	mov	r0, r4
 800364c:	f000 f8b7 	bl	80037be <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f88e 	bl	8003774 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bdb0      	pop	{r4, r5, r7, pc}

08003662 <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4619      	mov	r1, r3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f8b2 	bl	80037da <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	429a      	cmp	r2, r3
 8003692:	d00c      	beq.n	80036ae <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4619      	mov	r1, r3
 800369e:	f000 f8bf 	bl	8003820 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	1d1a      	adds	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	605a      	str	r2, [r3, #4]
      }
 80036ac:	e008      	b.n	80036c0 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8c9 	bl	8003846 <_ZNSt6vectorIfSaIfEE3endEv>
 80036b4:	4603      	mov	r3, r0
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f8d4 	bl	8003868 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 80036c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80036d2:	687c      	ldr	r4, [r7, #4]
 80036d4:	6838      	ldr	r0, [r7, #0]
 80036d6:	f000 f953 	bl	8003980 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80036da:	4605      	mov	r5, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f96d 	bl	80039be <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80036e4:	4602      	mov	r2, r0
 80036e6:	f107 030c 	add.w	r3, r7, #12
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f958 	bl	80039a2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	461a      	mov	r2, r3
 80036f8:	4629      	mov	r1, r5
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 f976 	bl	80039ec <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f965 	bl	80039d4 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800370a:	6838      	ldr	r0, [r7, #0]
 800370c:	f000 f982 	bl	8003a14 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8003710:	4605      	mov	r5, r0
 8003712:	6838      	ldr	r0, [r7, #0]
 8003714:	f000 f992 	bl	8003a3c <_ZNKSt6vectorIfSaIfEE3endEv>
 8003718:	4606      	mov	r6, r0
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f841 	bl	80037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003726:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003728:	4622      	mov	r2, r4
 800372a:	4631      	mov	r1, r6
 800372c:	4628      	mov	r0, r5
 800372e:	f000 f999 	bl	8003a64 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 8003732:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	605a      	str	r2, [r3, #4]
      }
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003742 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f942 	bl	80039d4 <_ZNSaIfED1Ev>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base()
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f98e 	bl	8003a86 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800378e:	461a      	mov	r2, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f98d 	bl	8003ab0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		      - this->_M_impl._M_start); }
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ffd2 	bl	8003742 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f982 	bl	8003ad6 <_ZSt8_DestroyIPfEvT_S1_>
    }
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80037da:	b590      	push	{r4, r7, lr}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685c      	ldr	r4, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff ffdc 	bl	80037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80037f0:	4603      	mov	r3, r0
 80037f2:	461a      	mov	r2, r3
 80037f4:	4621      	mov	r1, r4
 80037f6:	6838      	ldr	r0, [r7, #0]
 80037f8:	f7ff ffe1 	bl	80037be <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	605a      	str	r2, [r3, #4]
      }
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bd90      	pop	{r4, r7, pc}

0800380a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff ffec 	bl	800380a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f959 	bl	8003af0 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	1d1a      	adds	r2, r3, #4
 8003852:	f107 030c 	add.w	r3, r7, #12
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f961 	bl	8003b20 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003868:	b5b0      	push	{r4, r5, r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8003874:	4a41      	ldr	r2, [pc, #260]	; (800397c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x114>)
 8003876:	2101      	movs	r1, #1
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f961 	bl	8003b40 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 800387e:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f9a5 	bl	8003bd0 <_ZNSt6vectorIfSaIfEE5beginEv>
 8003886:	4603      	mov	r3, r0
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	f107 0214 	add.w	r2, r7, #20
 800388e:	f107 0308 	add.w	r3, r7, #8
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f9ab 	bl	8003bf0 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800389a:	4603      	mov	r3, r0
 800389c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f9ba 	bl	8003c1c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80038a8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80038ae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	18d5      	adds	r5, r2, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ffa6 	bl	800380a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	4629      	mov	r1, r5
 80038c4:	4620      	mov	r0, r4
 80038c6:	f7ff ffab 	bl	8003820 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681c      	ldr	r4, [r3, #0]
 80038d2:	f107 0308 	add.w	r3, r7, #8
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f9b4 	bl	8003c44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80038dc:	4603      	mov	r3, r0
 80038de:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ff60 	bl	80037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80038e8:	4603      	mov	r3, r0
	  __new_finish
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	4629      	mov	r1, r5
 80038ee:	4620      	mov	r0, r4
 80038f0:	f000 f9b3 	bl	8003c5a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80038f4:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	3304      	adds	r3, #4
 80038fa:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 80038fc:	f107 0308 	add.w	r3, r7, #8
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f99f 	bl	8003c44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003906:	4603      	mov	r3, r0
 8003908:	681c      	ldr	r4, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff49 	bl	80037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003916:	4603      	mov	r3, r0
	  __new_finish
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4629      	mov	r1, r5
 800391c:	4620      	mov	r0, r4
 800391e:	f000 f99c 	bl	8003c5a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8003922:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681c      	ldr	r4, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff ff3a 	bl	80037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003934:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003936:	461a      	mov	r2, r3
 8003938:	4629      	mov	r1, r5
 800393a:	4620      	mov	r0, r4
 800393c:	f7ff ff3f 	bl	80037be <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8003954:	461a      	mov	r2, r3
 8003956:	f000 f8ab 	bl	8003ab0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	441a      	add	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	609a      	str	r2, [r3, #8]
    }
 8003972:	bf00      	nop
 8003974:	3728      	adds	r7, #40	; 0x28
 8003976:	46bd      	mov	sp, r7
 8003978:	bdb0      	pop	{r4, r5, r7, pc}
 800397a:	bf00      	nop
 800397c:	08009600 	.word	0x08009600

08003980 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	461a      	mov	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	109b      	asrs	r3, r3, #2
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6839      	ldr	r1, [r7, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 f96b 	bl	8003c8c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <_ZNSaIfED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f970 	bl	8003cc2 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f96b 	bl	8003cd8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f97e 	bl	8003d06 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	f107 020c 	add.w	r2, r7, #12
 8003a26:	f107 0308 	add.w	r3, r7, #8
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 f985 	bl	8003d3c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	f107 020c 	add.w	r2, r7, #12
 8003a4e:	f107 0308 	add.w	r3, r7, #8
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f971 	bl	8003d3c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f970 	bl	8003d5c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl()
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f976 	bl	8003d80 <_ZNSaIfEC1Ev>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	609a      	str	r2, [r3, #8]
	{ }
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
	if (__p)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f965 	bl	8003d98 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f967 	bl	8003db6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff fe84 	bl	800380a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003b02:	4603      	mov	r3, r0
 8003b04:	681c      	ldr	r4, [r3, #0]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	2004      	movs	r0, #4
 8003b0c:	f7ff fbfb 	bl	8003306 <_ZnwjPv>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d000      	beq.n	8003b18 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_+0x28>
 8003b16:	601c      	str	r4, [r3, #0]
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd90      	pop	{r4, r7, pc}

08003b20 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f93d 	bl	8003dcc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003b52:	4604      	mov	r4, r0
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f7ff ff13 	bl	8003980 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	1ae2      	subs	r2, r4, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	bf34      	ite	cc
 8003b64:	2301      	movcc	r3, #1
 8003b66:	2300      	movcs	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f002 fc9d 	bl	80064b0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff ff02 	bl	8003980 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003b7c:	4604      	mov	r4, r0
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f7ff fefe 	bl	8003980 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003b84:	4603      	mov	r3, r0
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	f107 0208 	add.w	r2, r7, #8
 8003b8c:	f107 0310 	add.w	r3, r7, #16
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f92b 	bl	8003dee <_ZSt3maxIjERKT_S2_S2_>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4423      	add	r3, r4
 8003b9e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f7ff feed 	bl	8003980 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d306      	bcc.n	8003bbc <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7c>
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f90c 	bl	8003dcc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d904      	bls.n	8003bc6 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f905 	bl	8003dcc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	e000      	b.n	8003bc8 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x88>
 8003bc6:	697b      	ldr	r3, [r7, #20]
      }
 8003bc8:	4618      	mov	r0, r3
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd90      	pop	{r4, r7, pc}

08003bd0 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	f107 030c 	add.w	r3, r7, #12
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ff9d 	bl	8003b20 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f822 	bl	8003c44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003c00:	4603      	mov	r3, r0
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461c      	mov	r4, r3
 8003c06:	6838      	ldr	r0, [r7, #0]
 8003c08:	f000 f81c 	bl	8003c44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	1ae3      	subs	r3, r4, r3
 8003c12:	109b      	asrs	r3, r3, #2
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd90      	pop	{r4, r7, pc}

08003c1c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d006      	beq.n	8003c3a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6839      	ldr	r1, [r7, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 f8f0 	bl	8003e16 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8003c36:	4603      	mov	r3, r0
 8003c38:	e000      	b.n	8003c3c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8003c3a:	2300      	movs	r3, #0
      }
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003c5a:	b590      	push	{r4, r7, lr}
 8003c5c:	b085      	sub	sp, #20
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
 8003c66:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f8e3 	bl	8003e34 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8003c6e:	4604      	mov	r4, r0
 8003c70:	68b8      	ldr	r0, [r7, #8]
 8003c72:	f000 f8df 	bl	8003e34 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8003c76:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f000 f8e8 	bl	8003e52 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 8003c82:	4603      	mov	r3, r0
    }
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd90      	pop	{r4, r7, pc}

08003c8c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8003c96:	6839      	ldr	r1, [r7, #0]
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f804 	bl	8003ca6 <_ZNSaIfEC1ERKS_>
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) throw()
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003cb0:	6839      	ldr	r1, [r7, #0]
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f8de 	bl	8003e74 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8003ce2:	6839      	ldr	r1, [r7, #0]
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ffde 	bl	8003ca6 <_ZNSaIfEC1ERKS_>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
	{ }
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ff82 	bl	8003c1c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	441a      	add	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	609a      	str	r2, [r3, #8]
      }
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f88b 	bl	8003e8c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8003d76:	4603      	mov	r3, r0
    }
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <_ZNSaIfEC1Ev>:
      allocator() throw() { }
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f88f 	bl	8003eac <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f88a 	bl	8003ec2 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fdf1 	bl	80039be <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f87c 	bl	8003edc <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003de4:	4603      	mov	r3, r0
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d201      	bcs.n	8003e08 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	e000      	b.n	8003e0a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003e08:	687b      	ldr	r3, [r7, #4]
    }
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003e20:	2200      	movs	r2, #0
 8003e22:	6839      	ldr	r1, [r7, #0]
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f865 	bl	8003ef4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003e3c:	f107 030c 	add.w	r3, r7, #12
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f874 	bl	8003f30 <_ZNSt13move_iteratorIPfEC1ES0_>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f872 	bl	8003f4e <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f868 	bl	8003f72 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003ece:	68b8      	ldr	r0, [r7, #8]
 8003ed0:	f002 fad1 	bl	8006476 <_ZdlPv>
      }
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f85c 	bl	8003fa2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f84e 	bl	8003fa2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8003f06:	4602      	mov	r2, r0
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bf8c      	ite	hi
 8003f0e:	2301      	movhi	r3, #1
 8003f10:	2300      	movls	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003f18:	f002 fac4 	bl	80064a4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f002 faac 	bl	800647e <_Znwj>
 8003f26:	4603      	mov	r3, r0
      }
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f829 	bl	8003fba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8003f68:	4603      	mov	r3, r0
    }
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003f72:	b590      	push	{r4, r7, lr}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f82b 	bl	8003fda <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003f84:	4604      	mov	r4, r0
 8003f86:	68b8      	ldr	r0, [r7, #8]
 8003f88:	f000 f827 	bl	8003fda <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003f8c:	4603      	mov	r3, r0
	       __result));
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4619      	mov	r1, r3
 8003f92:	4620      	mov	r0, r4
 8003f94:	f000 f82c 	bl	8003ff0 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8003f98:	4603      	mov	r3, r0
    }
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}

08003fa2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003faa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f82c 	bl	8004028 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003ff0:	b5b0      	push	{r4, r5, r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f82b 	bl	8004058 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004002:	4604      	mov	r4, r0
 8004004:	68b8      	ldr	r0, [r7, #8]
 8004006:	f000 f827 	bl	8004058 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800400a:	4605      	mov	r5, r0
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f831 	bl	8004074 <_ZSt12__niter_baseIPfET_S1_>
 8004012:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8004014:	461a      	mov	r2, r3
 8004016:	4629      	mov	r1, r5
 8004018:	4620      	mov	r0, r4
 800401a:	f000 f836 	bl	800408a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 800401e:	4603      	mov	r3, r0
    }
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bdb0      	pop	{r4, r5, r7, pc}

08004028 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f83a 	bl	80040ae <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800403a:	4604      	mov	r4, r0
 800403c:	68b8      	ldr	r0, [r7, #8]
 800403e:	f000 f836 	bl	80040ae <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004042:	4603      	mov	r3, r0
	       __result));
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4619      	mov	r1, r3
 8004048:	4620      	mov	r0, r4
 800404a:	f000 f841 	bl	80040d0 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800404e:	4603      	mov	r3, r0
    }
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	bd90      	pop	{r4, r7, pc}

08004058 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004060:	1d3b      	adds	r3, r7, #4
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f850 	bl	8004108 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8004068:	4603      	mov	r3, r0
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800408a:	b580      	push	{r7, lr}
 800408c:	b086      	sub	sp, #24
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8004096:	2301      	movs	r3, #1
 8004098:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f83d 	bl	800411e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80040a4:	4603      	mov	r3, r0
    }
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f84d 	bl	8004158 <_ZNKSt13move_iteratorIPfE4baseEv>
 80040be:	4603      	mov	r3, r0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f855 	bl	8004170 <_ZSt12__miter_baseIPfET_S1_>
 80040c6:	4603      	mov	r3, r0
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80040d0:	b5b0      	push	{r4, r5, r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f7ff ffc9 	bl	8004074 <_ZSt12__niter_baseIPfET_S1_>
 80040e2:	4604      	mov	r4, r0
 80040e4:	68b8      	ldr	r0, [r7, #8]
 80040e6:	f7ff ffc5 	bl	8004074 <_ZSt12__niter_baseIPfET_S1_>
 80040ea:	4605      	mov	r5, r0
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ffc1 	bl	8004074 <_ZSt12__niter_baseIPfET_S1_>
 80040f2:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80040f4:	461a      	mov	r2, r3
 80040f6:	4629      	mov	r1, r5
 80040f8:	4620      	mov	r0, r4
 80040fa:	f000 f844 	bl	8004186 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 80040fe:	4603      	mov	r3, r0
    }
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bdb0      	pop	{r4, r5, r7, pc}

08004108 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	109b      	asrs	r3, r3, #2
 8004132:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	461a      	mov	r2, r3
 8004140:	68f9      	ldr	r1, [r7, #12]
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f003 fc87 	bl	8007a56 <memmove>
	  return __result + _Num;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4413      	add	r3, r2
	}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004186:	b580      	push	{r7, lr}
 8004188:	b086      	sub	sp, #24
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f805 	bl	80041aa <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80041a0:	4603      	mov	r3, r0
    }
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	109b      	asrs	r3, r3, #2
 80041be:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d006      	beq.n	80041d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	461a      	mov	r2, r3
 80041cc:	68f9      	ldr	r1, [r7, #12]
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f003 fc41 	bl	8007a56 <memmove>
	  return __result + _Num;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4413      	add	r3, r2
	}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_ZN9MotorInfoC1Ev>:


#include "MotorInfo.hpp"
#include "Mathlib.hpp"

MotorInfo::MotorInfo() {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	4a06      	ldr	r2, [pc, #24]	; (8004208 <_ZN9MotorInfoC1Ev+0x24>)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	333c      	adds	r3, #60	; 0x3c
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff f892 	bl	8003320 <_ZN7MathLibC1Ev>
	// TODO Auto-generated constructor stub

}
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	08009690 	.word	0x08009690

0800420c <_ZN9MotorInfoD1Ev>:

MotorInfo::~MotorInfo() {
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	4a06      	ldr	r2, [pc, #24]	; (8004230 <_ZN9MotorInfoD1Ev+0x24>)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	333c      	adds	r3, #60	; 0x3c
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff f89a 	bl	8003358 <_ZN7MathLibD1Ev>
	// TODO Auto-generated destructor stub
}
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	08009690 	.word	0x08009690

08004234 <_ZN9MotorInfoD0Ev>:
MotorInfo::~MotorInfo() {
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
}
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff ffe5 	bl	800420c <_ZN9MotorInfoD1Ev>
 8004242:	2164      	movs	r1, #100	; 0x64
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f002 f918 	bl	800647a <_ZdlPvj>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <_ZN7MathLibaSERKS_>:
#ifndef MATHLIB_HPP_
#define MATHLIB_HPP_

#include <vector>

class MathLib {
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	1d1a      	adds	r2, r3, #4
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	3304      	adds	r3, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f000 f9a0 	bl	80045ae <_ZNSt6vectorIfSaIfEEaSERKS1_>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f103 0210 	add.w	r2, r3, #16
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	3310      	adds	r3, #16
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f000 f997 	bl	80045ae <_ZNSt6vectorIfSaIfEEaSERKS1_>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	61da      	str	r2, [r3, #28]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	621a      	str	r2, [r3, #32]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <_ZN9MotorInfo10setMathLibE7MathLib>:

void MotorInfo::setMathLib(MathLib pLib){
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
	mLib = pLib;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	333c      	adds	r3, #60	; 0x3c
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff ffd2 	bl	8004254 <_ZN7MathLibaSERKS_>
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <_ZN7MathLibC1ERKS_>:
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
 80042c2:	4a10      	ldr	r2, [pc, #64]	; (8004304 <_ZN7MathLibC1ERKS_+0x4c>)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	1d1a      	adds	r2, r3, #4
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f7ff f9f8 	bl	80036c8 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f103 0210 	add.w	r2, r3, #16
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	3310      	adds	r3, #16
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f7ff f9ef 	bl	80036c8 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	69da      	ldr	r2, [r3, #28]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	61da      	str	r2, [r3, #28]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6a1a      	ldr	r2, [r3, #32]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	621a      	str	r2, [r3, #32]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	08009680 	.word	0x08009680

08004308 <_ZN9MotorInfo10getMathLibEv>:

MathLib MotorInfo::getMathLib(void){return mLib;}
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	333c      	adds	r3, #60	; 0x3c
 8004316:	4619      	mov	r1, r3
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ffcd 	bl	80042b8 <_ZN7MathLibC1ERKS_>
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <_ZN9MotorInfo6setArgEi>:

void MotorInfo::setVu(float pVu){mVu=pVu;};
void MotorInfo::setVv(float pVv){mVv=pVv;};
void MotorInfo::setVw(float pVw){mVw=pVw;};

void MotorInfo::setArg(int parg){
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
	marg = parg;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <_ZN9MotorInfo5setVdEf>:
	mIq = -mLib.getSinList().at(marg) * mIalpha + mLib.getCosList().at(marg) * mIbeta;
};

void MotorInfo::PID(void){}

void MotorInfo::setVd(float pVd){mVd = pVd;}
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	ed87 0a00 	vstr	s0, [r7]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	635a      	str	r2, [r3, #52]	; 0x34
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <_ZN9MotorInfo5setVqEf>:
void MotorInfo::setVq(float pVq){mVq = pVq;}
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	ed87 0a00 	vstr	s0, [r7]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <_ZN9MotorInfo17invClarkTransformEv>:

void MotorInfo::invClarkTransform(void){
 800437e:	b580      	push	{r7, lr}
 8004380:	ed2d 8b02 	vpush	{d8}
 8004384:	b08e      	sub	sp, #56	; 0x38
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
	mValpha = mLib.getCosList().at(marg) * mVd - mLib.getSinList().at(marg) * mVq;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004390:	f107 0308 	add.w	r3, r7, #8
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f915 	bl	80035c6 <_ZN7MathLib10getCosListEv>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a0:	461a      	mov	r2, r3
 80043a2:	f107 0308 	add.w	r3, r7, #8
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f9f7 	bl	800479c <_ZNSt6vectorIfSaIfEE2atEj>
 80043ae:	4603      	mov	r3, r0
 80043b0:	ed93 7a00 	vldr	s14, [r3]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80043ba:	ee27 8a27 	vmul.f32	s16, s14, s15
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80043c4:	f107 0314 	add.w	r3, r7, #20
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff f8ec 	bl	80035a8 <_ZN7MathLib10getSinListEv>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d4:	461a      	mov	r2, r3
 80043d6:	f107 0314 	add.w	r3, r7, #20
 80043da:	4611      	mov	r1, r2
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 f9dd 	bl	800479c <_ZNSt6vectorIfSaIfEE2atEj>
 80043e2:	4603      	mov	r3, r0
 80043e4:	ed93 7a00 	vldr	s14, [r3]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80043ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80043fc:	f107 0314 	add.w	r3, r7, #20
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff f913 	bl	800362c <_ZNSt6vectorIfSaIfEED1Ev>
 8004406:	f107 0308 	add.w	r3, r7, #8
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff f90e 	bl	800362c <_ZNSt6vectorIfSaIfEED1Ev>
	mVbeta  = mLib.getSinList().at(marg) * mVd + mLib.getCosList().at(marg) * mVq;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004416:	f107 0320 	add.w	r3, r7, #32
 800441a:	4611      	mov	r1, r2
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff f8c3 	bl	80035a8 <_ZN7MathLib10getSinListEv>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004426:	461a      	mov	r2, r3
 8004428:	f107 0320 	add.w	r3, r7, #32
 800442c:	4611      	mov	r1, r2
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f9b4 	bl	800479c <_ZNSt6vectorIfSaIfEE2atEj>
 8004434:	4603      	mov	r3, r0
 8004436:	ed93 7a00 	vldr	s14, [r3]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004440:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800444a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800444e:	4611      	mov	r1, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff f8b8 	bl	80035c6 <_ZN7MathLib10getCosListEv>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445a:	461a      	mov	r2, r3
 800445c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f000 f99a 	bl	800479c <_ZNSt6vectorIfSaIfEE2atEj>
 8004468:	4603      	mov	r3, r0
 800446a:	ed93 7a00 	vldr	s14, [r3]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004478:	ee78 7a27 	vadd.f32	s15, s16, s15
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8004482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff f8d0 	bl	800362c <_ZNSt6vectorIfSaIfEED1Ev>
 800448c:	f107 0320 	add.w	r3, r7, #32
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff f8cb 	bl	800362c <_ZNSt6vectorIfSaIfEED1Ev>
};
 8004496:	bf00      	nop
 8004498:	3738      	adds	r7, #56	; 0x38
 800449a:	46bd      	mov	sp, r7
 800449c:	ecbd 8b02 	vpop	{d8}
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <_ZN9MotorInfo16invParkTransformEv>:

void MotorInfo::invParkTransform(void){
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	mVu = 0.75f * mValpha;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80044b2:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80044b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	edc3 7a08 	vstr	s15, [r3, #32]
	mVv = -0.75f * mValpha + mValpha / 3 + mVbeta / 1.7320508f;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80044c6:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 80044ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80044d4:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80044d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80044dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80044e6:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8004530 <_ZN9MotorInfo16invParkTransformEv+0x8c>
 80044ea:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80044ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	mVw = - mValpha / 3 - mVbeta / 1.7320508f;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80044fe:	eef1 7a67 	vneg.f32	s15, s15
 8004502:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004506:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8004510:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8004530 <_ZN9MotorInfo16invParkTransformEv+0x8c>
 8004514:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
//	Iu + Iv - Iw = -2*Iw;
//	Ialpha * 2/3 + Ibeta * 2/sqrt(3) = -2 Iw;
//
//
//	Iv = -Iu - Iw;
};
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	3fddb3d7 	.word	0x3fddb3d7

08004534 <_ZN9MotorInfo5getVuEv>:
float MotorInfo::getVq(void){return mVq;};

float MotorInfo::getValpha(void){return mValpha;};
float MotorInfo::getVbeta(void){return mVbeta;};

float MotorInfo::getVu(void){return mVu;};
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eeb0 0a67 	vmov.f32	s0, s15
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <_ZN9MotorInfo5getVvEv>:
float MotorInfo::getVv(void){return mVv;};
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eeb0 0a67 	vmov.f32	s0, s15
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <_ZN9MotorInfo5getVwEv>:
float MotorInfo::getVw(void){return mVw;};
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eeb0 0a67 	vmov.f32	s0, s15
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>:

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800458e:	b480      	push	{r7}
 8004590:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8004592:	2300      	movs	r3, #0
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800459e:	b480      	push	{r7}
 80045a0:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 80045a2:	2301      	movs	r3, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 80045ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	429a      	cmp	r2, r3
 80045be:	f000 80e8 	beq.w	8004792 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e4>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 80045c2:	f7ff ffe4 	bl	800458e <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d044      	beq.n	8004656 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa8>
	      if (!_Alloc_traits::_S_always_equal()
 80045cc:	f7ff ffe7 	bl	800459e <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f083 0301 	eor.w	r3, r3, #1
 80045d6:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d012      	beq.n	8004602 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff f8e2 	bl	80037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80045e4:	4604      	mov	r4, r0
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff f9e8 	bl	80039be <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4619      	mov	r1, r3
 80045f2:	4620      	mov	r0, r4
 80045f4:	f000 f8e4 	bl	80047c0 <_ZStneIfEbRKSaIT_ES3_>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
 8004602:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8004604:	2b00      	cmp	r3, #0
 8004606:	d018      	beq.n	800463a <_ZNSt6vectorIfSaIfEEaSERKS1_+0x8c>
		  this->clear();
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff f82a 	bl	8003662 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
				- this->_M_impl._M_start);
 8004618:	461a      	mov	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 8004622:	461a      	mov	r2, r3
 8004624:	f7ff fa44 	bl	8003ab0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff f8b3 	bl	80037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004642:	4604      	mov	r4, r0
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff f9b9 	bl	80039be <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800464c:	4603      	mov	r3, r0
 800464e:	4619      	mov	r1, r3
 8004650:	4620      	mov	r0, r4
 8004652:	f000 f8c1 	bl	80047d8 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 8004656:	6838      	ldr	r0, [r7, #0]
 8004658:	f7ff f992 	bl	8003980 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800465c:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8c8 	bl	80047f4 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4293      	cmp	r3, r2
 800466a:	bf8c      	ite	hi
 800466c:	2301      	movhi	r3, #1
 800466e:	2300      	movls	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d033      	beq.n	80046de <_ZNSt6vectorIfSaIfEEaSERKS1_+0x130>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8004676:	6838      	ldr	r0, [r7, #0]
 8004678:	f7ff f9cc 	bl	8003a14 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800467c:	4604      	mov	r4, r0
 800467e:	6838      	ldr	r0, [r7, #0]
 8004680:	f7ff f9dc 	bl	8003a3c <_ZNKSt6vectorIfSaIfEE3endEv>
 8004684:	4603      	mov	r3, r0
 8004686:	4622      	mov	r2, r4
 8004688:	68f9      	ldr	r1, [r7, #12]
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f8c3 	bl	8004816 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 8004690:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681c      	ldr	r4, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff f883 	bl	80037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80046a2:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80046a4:	461a      	mov	r2, r3
 80046a6:	4629      	mov	r1, r5
 80046a8:	4620      	mov	r0, r4
 80046aa:	f7ff f888 	bl	80037be <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 80046b8:	461a      	mov	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 80046c2:	461a      	mov	r2, r3
 80046c4:	f7ff f9f4 	bl	8003ab0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	e052      	b.n	8004784 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	  else if (size() >= __xlen)
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff f94e 	bl	8003980 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4293      	cmp	r3, r2
 80046ea:	bf94      	ite	ls
 80046ec:	2301      	movls	r3, #1
 80046ee:	2300      	movhi	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d020      	beq.n	8004738 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18a>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 80046f6:	6838      	ldr	r0, [r7, #0]
 80046f8:	f7ff f98c 	bl	8003a14 <_ZNKSt6vectorIfSaIfEE5beginEv>
 80046fc:	4604      	mov	r4, r0
 80046fe:	6838      	ldr	r0, [r7, #0]
 8004700:	f7ff f99c 	bl	8003a3c <_ZNKSt6vectorIfSaIfEE3endEv>
 8004704:	4605      	mov	r5, r0
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff fa62 	bl	8003bd0 <_ZNSt6vectorIfSaIfEE5beginEv>
 800470c:	4603      	mov	r3, r0
 800470e:	461a      	mov	r2, r3
 8004710:	4629      	mov	r1, r5
 8004712:	4620      	mov	r0, r4
 8004714:	f000 f89b 	bl	800484e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 8004718:	4604      	mov	r4, r0
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff f893 	bl	8003846 <_ZNSt6vectorIfSaIfEE3endEv>
 8004720:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff f83f 	bl	80037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800472a:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800472c:	461a      	mov	r2, r3
 800472e:	4629      	mov	r1, r5
 8004730:	4620      	mov	r0, r4
 8004732:	f000 f8a4 	bl	800487e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 8004736:	e025      	b.n	8004784 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681d      	ldr	r5, [r3, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681c      	ldr	r4, [r3, #0]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff f91d 	bl	8003980 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004746:	4603      	mov	r3, r0
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	18e1      	adds	r1, r4, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	4628      	mov	r0, r5
 8004754:	f000 f8a1 	bl	800489a <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681c      	ldr	r4, [r3, #0]
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff f90f 	bl	8003980 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004762:	4603      	mov	r3, r0
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff f818 	bl	80037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004778:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800477a:	4632      	mov	r2, r6
 800477c:	4629      	mov	r1, r5
 800477e:	4620      	mov	r0, r4
 8004780:	f000 f8a3 	bl	80048ca <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	605a      	str	r2, [r3, #4]
      return *this;
 8004792:	687b      	ldr	r3, [r7, #4]
    }
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800479c <_ZNSt6vectorIfSaIfEE2atEj>:
      at(size_type __n)
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 80047a6:	6839      	ldr	r1, [r7, #0]
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f89f 	bl	80048ec <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>
	return (*this)[__n];
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f8bb 	bl	800492c <_ZNSt6vectorIfSaIfEEixEj>
 80047b6:	4603      	mov	r3, r0
      }
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <_ZStneIfEbRKSaIT_ES3_>:
    _GLIBCXX_USE_NOEXCEPT
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
    _GLIBCXX_USE_NOEXCEPT
    { return false; }
 80047ca:	2300      	movs	r3, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 80047e2:	461a      	mov	r2, r3
 80047e4:	6839      	ldr	r1, [r7, #0]
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f8b0 	bl	800494c <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 80047ec:	bf00      	nop
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	109b      	asrs	r3, r3, #2
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8004816:	b580      	push	{r7, lr}
 8004818:	b086      	sub	sp, #24
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff f9f7 	bl	8003c1c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800482e:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe ffb8 	bl	80037a8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004838:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff f910 	bl	8003a64 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8004844:	697b      	ldr	r3, [r7, #20]
	}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 800484e:	b590      	push	{r4, r7, lr}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff fbbd 	bl	8003fda <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8004860:	4604      	mov	r4, r0
 8004862:	68b8      	ldr	r0, [r7, #8]
 8004864:	f7ff fbb9 	bl	8003fda <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8004868:	4603      	mov	r3, r0
	       __result));
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4619      	mov	r1, r3
 800486e:	4620      	mov	r0, r4
 8004870:	f000 f878 	bl	8004964 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 8004874:	4603      	mov	r3, r0
    }
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bd90      	pop	{r4, r7, pc}

0800487e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f88f 	bl	80049b0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 8004892:	bf00      	nop
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800489a:	b590      	push	{r4, r7, lr}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff fc62 	bl	8004170 <_ZSt12__miter_baseIPfET_S1_>
 80048ac:	4604      	mov	r4, r0
 80048ae:	68b8      	ldr	r0, [r7, #8]
 80048b0:	f7ff fc5e 	bl	8004170 <_ZSt12__miter_baseIPfET_S1_>
 80048b4:	4603      	mov	r3, r0
	       __result));
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4619      	mov	r1, r3
 80048ba:	4620      	mov	r0, r4
 80048bc:	f000 f885 	bl	80049ca <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 80048c0:	4603      	mov	r3, r0
    }
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd90      	pop	{r4, r7, pc}

080048ca <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f890 	bl	8004a02 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff f842 	bl	8003980 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80048fc:	4602      	mov	r2, r0
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	4293      	cmp	r3, r2
 8004902:	bf2c      	ite	cs
 8004904:	2301      	movcs	r3, #1
 8004906:	2300      	movcc	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff f836 	bl	8003980 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004914:	4603      	mov	r3, r0
 8004916:	461a      	mov	r2, r3
 8004918:	6839      	ldr	r1, [r7, #0]
 800491a:	4803      	ldr	r0, [pc, #12]	; (8004928 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x3c>)
 800491c:	f001 fdcb 	bl	80064b6 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	0800961c 	.word	0x0800961c

0800492c <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
      }
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	713a      	strb	r2, [r7, #4]
    { }
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004964:	b5b0      	push	{r4, r5, r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff fb71 	bl	8004058 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004976:	4604      	mov	r4, r0
 8004978:	68b8      	ldr	r0, [r7, #8]
 800497a:	f7ff fb6d 	bl	8004058 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800497e:	4605      	mov	r5, r0
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f850 	bl	8004a26 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004986:	4603      	mov	r3, r0
 8004988:	461a      	mov	r2, r3
 800498a:	4629      	mov	r1, r5
 800498c:	4620      	mov	r0, r4
 800498e:	f7ff fb7c 	bl	800408a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8004992:	4603      	mov	r3, r0
 8004994:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8004996:	f107 0214 	add.w	r2, r7, #20
 800499a:	f107 0310 	add.w	r3, r7, #16
 800499e:	4611      	mov	r1, r2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff f8bd 	bl	8003b20 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80049a6:	693b      	ldr	r3, [r7, #16]
    }
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bdb0      	pop	{r4, r5, r7, pc}

080049b0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f840 	bl	8004a42 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80049ca:	b5b0      	push	{r4, r5, r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff fb4c 	bl	8004074 <_ZSt12__niter_baseIPfET_S1_>
 80049dc:	4604      	mov	r4, r0
 80049de:	68b8      	ldr	r0, [r7, #8]
 80049e0:	f7ff fb48 	bl	8004074 <_ZSt12__niter_baseIPfET_S1_>
 80049e4:	4605      	mov	r5, r0
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff fb44 	bl	8004074 <_ZSt12__niter_baseIPfET_S1_>
 80049ec:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80049ee:	461a      	mov	r2, r3
 80049f0:	4629      	mov	r1, r5
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 f830 	bl	8004a58 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 80049f8:	4603      	mov	r3, r0
    }
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bdb0      	pop	{r4, r5, r7, pc}

08004a02 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f830 	bl	8004a7c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 8004a1c:	4603      	mov	r3, r0
    }
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff f907 	bl	8003c44 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8004a36:	4603      	mov	r3, r0
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8004a64:	2301      	movs	r3, #1
 8004a66:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fb56 	bl	800411e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004a72:	4603      	mov	r3, r0
    }
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7ff ff04 	bl	800489a <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 8004a92:	4603      	mov	r3, r0
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <LL_TIM_EnableCounter>:
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f043 0201 	orr.w	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	601a      	str	r2, [r3, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <LL_TIM_CC_EnableChannel>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1a      	ldr	r2, [r3, #32]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <LL_TIM_EnableAllOutputs>:
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <_ZN3PWM6setTIMEP11TIM_TypeDef>:

#include "PWM.hpp"
#include "stm32f4xx_hal.h"
#include "tim.h"

void PWM::setTIM(TIM_TypeDef* pTIMx){
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	601a      	str	r2, [r3, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	605a      	str	r2, [r3, #4]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <_ZN3PWM5fInitEi>:
	LL_TIM_EnableAllOutputs(mTIMx);// need
	//PWM TIM Init end

}

void PWM::fInit(int pTimReload){
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]

	mTimReload = pTimReload;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	609a      	str	r2, [r3, #8]

	if(mCH==0){//error check
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d100      	bne.n	8004b50 <_ZN3PWM5fInitEi+0x1a>
		while(1){}
 8004b4e:	e7fe      	b.n	8004b4e <_ZN3PWM5fInitEi+0x18>
	}

	//mREG Init
	if (mCH == 1){
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d105      	bne.n	8004b64 <_ZN3PWM5fInitEi+0x2e>
		mREG=&(mTIMx->CCR1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 2){
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d105      	bne.n	8004b78 <_ZN3PWM5fInitEi+0x42>
		mREG=&(mTIMx->CCR2);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 3){
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d105      	bne.n	8004b8c <_ZN3PWM5fInitEi+0x56>
		mREG=&(mTIMx->CCR3);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 4){
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d105      	bne.n	8004ba0 <_ZN3PWM5fInitEi+0x6a>
		mREG=&(mTIMx->CCR4);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	60da      	str	r2, [r3, #12]
	}

	if(mREG==NULL){//error check
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d100      	bne.n	8004baa <_ZN3PWM5fInitEi+0x74>
		while(1){}
 8004ba8:	e7fe      	b.n	8004ba8 <_ZN3PWM5fInitEi+0x72>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d100      	bne.n	8004bb4 <_ZN3PWM5fInitEi+0x7e>
		while(1){}
 8004bb2:	e7fe      	b.n	8004bb2 <_ZN3PWM5fInitEi+0x7c>
	}
	if (mCH == 1){
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d105      	bne.n	8004bc8 <_ZN3PWM5fInitEi+0x92>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff ff7a 	bl	8004abc <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d105      	bne.n	8004bdc <_ZN3PWM5fInitEi+0xa6>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2110      	movs	r1, #16
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff ff70 	bl	8004abc <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d106      	bne.n	8004bf2 <_ZN3PWM5fInitEi+0xbc>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff65 	bl	8004abc <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d106      	bne.n	8004c08 <_ZN3PWM5fInitEi+0xd2>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff ff5a 	bl	8004abc <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff ff45 	bl	8004a9c <LL_TIM_EnableCounter>
	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff ff61 	bl	8004ade <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int pDuty = pfDuty * (float)mTimReload;
	WRITE_REG(*mREG, pDuty);
}

void PWM::f2Duty(float pfDuty){
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	ed87 0a00 	vstr	s0, [r7]
	int pDuty = (pfDuty + 1)/2 * (float)mTimReload;
 8004c30:	edd7 7a00 	vldr	s15, [r7]
 8004c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004c40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	ee07 3a90 	vmov	s15, r3
 8004c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c58:	ee17 3a90 	vmov	r3, s15
 8004c5c:	60fb      	str	r3, [r7, #12]
	WRITE_REG(*mREG, pDuty);
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	601a      	str	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <__NVIC_GetPriorityGrouping>:
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c78:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <__NVIC_GetPriorityGrouping+0x18>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	f003 0307 	and.w	r3, r3, #7
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	e000ed00 	.word	0xe000ed00

08004c90 <__NVIC_EnableIRQ>:
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	db0b      	blt.n	8004cba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	f003 021f 	and.w	r2, r3, #31
 8004ca8:	4907      	ldr	r1, [pc, #28]	; (8004cc8 <__NVIC_EnableIRQ+0x38>)
 8004caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000e100 	.word	0xe000e100

08004ccc <__NVIC_SetPriority>:
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	6039      	str	r1, [r7, #0]
 8004cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	db0a      	blt.n	8004cf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	490c      	ldr	r1, [pc, #48]	; (8004d18 <__NVIC_SetPriority+0x4c>)
 8004ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cea:	0112      	lsls	r2, r2, #4
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	440b      	add	r3, r1
 8004cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004cf4:	e00a      	b.n	8004d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	4908      	ldr	r1, [pc, #32]	; (8004d1c <__NVIC_SetPriority+0x50>)
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	3b04      	subs	r3, #4
 8004d04:	0112      	lsls	r2, r2, #4
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	440b      	add	r3, r1
 8004d0a:	761a      	strb	r2, [r3, #24]
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	e000e100 	.word	0xe000e100
 8004d1c:	e000ed00 	.word	0xe000ed00

08004d20 <NVIC_EncodePriority>:
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	; 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f1c3 0307 	rsb	r3, r3, #7
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	bf28      	it	cs
 8004d3e:	2304      	movcs	r3, #4
 8004d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	3304      	adds	r3, #4
 8004d46:	2b06      	cmp	r3, #6
 8004d48:	d902      	bls.n	8004d50 <NVIC_EncodePriority+0x30>
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	3b03      	subs	r3, #3
 8004d4e:	e000      	b.n	8004d52 <NVIC_EncodePriority+0x32>
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43da      	mvns	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	401a      	ands	r2, r3
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	43d9      	mvns	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d78:	4313      	orrs	r3, r2
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3724      	adds	r7, #36	; 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <LL_ADC_REG_SetSequencerRanks>:
{
 8004d86:	b490      	push	{r4, r7}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	332c      	adds	r3, #44	; 0x2c
 8004d96:	4619      	mov	r1, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004da2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	fa92 f2a2 	rbit	r2, r2
 8004daa:	613a      	str	r2, [r7, #16]
  return result;
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	fab2 f282 	clz	r2, r2
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	40d3      	lsrs	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004dbc:	6822      	ldr	r2, [r4, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f003 031f 	and.w	r3, r3, #31
 8004dc4:	211f      	movs	r1, #31
 8004dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	401a      	ands	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f003 011f 	and.w	r1, r3, #31
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f003 031f 	and.w	r3, r3, #31
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	4313      	orrs	r3, r2
 8004de0:	6023      	str	r3, [r4, #0]
}
 8004de2:	bf00      	nop
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc90      	pop	{r4, r7}
 8004dea:	4770      	bx	lr

08004dec <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	609a      	str	r2, [r3, #8]
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <LL_ADC_INJ_SetSequencerRanks>:
{
 8004e12:	b490      	push	{r4, r7}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	0d1b      	lsrs	r3, r3, #20
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	1c5c      	adds	r4, r3, #1
  MODIFY_REG(ADCx->JSQR,
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	b2d9      	uxtb	r1, r3
 8004e32:	b2e3      	uxtb	r3, r4
 8004e34:	1acb      	subs	r3, r1, r3
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	3303      	adds	r3, #3
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	460b      	mov	r3, r1
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	211f      	movs	r1, #31
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	401a      	ands	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f003 011f 	and.w	r1, r3, #31
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	b2d8      	uxtb	r0, r3
 8004e58:	b2e3      	uxtb	r3, r4
 8004e5a:	1ac3      	subs	r3, r0, r3
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	3303      	adds	r3, #3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	4618      	mov	r0, r3
 8004e64:	4603      	mov	r3, r0
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4403      	add	r3, r0
 8004e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc90      	pop	{r4, r7}
 8004e7c:	4770      	bx	lr

08004e7e <LL_ADC_INJ_SetOffset>:
{
 8004e7e:	b490      	push	{r4, r7}
 8004e80:	b086      	sub	sp, #24
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3314      	adds	r3, #20
 8004e8e:	4619      	mov	r1, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e96:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004e9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	fa92 f2a2 	rbit	r2, r2
 8004ea2:	613a      	str	r2, [r7, #16]
  return result;
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	fab2 f282 	clz	r2, r2
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	40d3      	lsrs	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004eba:	f023 030f 	bic.w	r3, r3, #15
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	6023      	str	r3, [r4, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc90      	pop	{r4, r7}
 8004ecc:	4770      	bx	lr

08004ece <LL_ADC_SetChannelSamplingTime>:
{
 8004ece:	b490      	push	{r4, r7}
 8004ed0:	b08a      	sub	sp, #40	; 0x28
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	330c      	adds	r3, #12
 8004ede:	4619      	mov	r1, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	fa92 f2a2 	rbit	r2, r2
 8004ef2:	613a      	str	r2, [r7, #16]
  return result;
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	fab2 f282 	clz	r2, r2
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	40d3      	lsrs	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004f04:	6822      	ldr	r2, [r4, #0]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8004f0c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8004f10:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f12:	69f9      	ldr	r1, [r7, #28]
 8004f14:	fa91 f1a1 	rbit	r1, r1
 8004f18:	61b9      	str	r1, [r7, #24]
  return result;
 8004f1a:	69b9      	ldr	r1, [r7, #24]
 8004f1c:	fab1 f181 	clz	r1, r1
 8004f20:	b2c9      	uxtb	r1, r1
 8004f22:	40cb      	lsrs	r3, r1
 8004f24:	2107      	movs	r1, #7
 8004f26:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	401a      	ands	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8004f34:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8004f38:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f3c:	fa91 f1a1 	rbit	r1, r1
 8004f40:	6239      	str	r1, [r7, #32]
  return result;
 8004f42:	6a39      	ldr	r1, [r7, #32]
 8004f44:	fab1 f181 	clz	r1, r1
 8004f48:	b2c9      	uxtb	r1, r1
 8004f4a:	40cb      	lsrs	r3, r1
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f52:	4313      	orrs	r3, r2
 8004f54:	6023      	str	r3, [r4, #0]
}
 8004f56:	bf00      	nop
 8004f58:	3728      	adds	r7, #40	; 0x28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc90      	pop	{r4, r7}
 8004f5e:	4770      	bx	lr

08004f60 <LL_ADC_INJ_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	609a      	str	r2, [r3, #8]
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f023 0220 	bic.w	r2, r3, #32
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	605a      	str	r2, [r3, #4]
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	605a      	str	r2, [r3, #4]
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004fcc:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd0:	4907      	ldr	r1, [pc, #28]	; (8004ff0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40023800 	.word	0x40023800

08004ff4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004ffc:	4b08      	ldr	r3, [pc, #32]	; (8005020 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004ffe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005000:	4907      	ldr	r1, [pc, #28]	; (8005020 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4313      	orrs	r3, r2
 8005006:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005008:	4b05      	ldr	r3, [pc, #20]	; (8005020 <LL_APB2_GRP1_EnableClock+0x2c>)
 800500a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4013      	ands	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005012:	68fb      	ldr	r3, [r7, #12]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40023800 	.word	0x40023800

08005024 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b096      	sub	sp, #88	; 0x58
 8005028:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800502a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	605a      	str	r2, [r3, #4]
 8005034:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8005036:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	605a      	str	r2, [r3, #4]
 8005040:	609a      	str	r2, [r3, #8]
 8005042:	60da      	str	r2, [r3, #12]
 8005044:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8005046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	605a      	str	r2, [r3, #4]
 8005050:	609a      	str	r2, [r3, #8]
 8005052:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8005054:	f107 0318 	add.w	r3, r7, #24
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005062:	463b      	mov	r3, r7
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	611a      	str	r2, [r3, #16]
 8005070:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8005072:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005076:	f7ff ffbd 	bl	8004ff4 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800507a:	2004      	movs	r0, #4
 800507c:	f7ff ffa2 	bl	8004fc4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005080:	2001      	movs	r0, #1
 8005082:	f7ff ff9f 	bl	8004fc4 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8005086:	2307      	movs	r3, #7
 8005088:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800508a:	2303      	movs	r3, #3
 800508c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005092:	463b      	mov	r3, r7
 8005094:	4619      	mov	r1, r3
 8005096:	4869      	ldr	r0, [pc, #420]	; (800523c <MX_ADC1_Init+0x218>)
 8005098:	f7fd fd13 	bl	8002ac2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 800509c:	2303      	movs	r3, #3
 800509e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80050a0:	2303      	movs	r3, #3
 80050a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050a8:	463b      	mov	r3, r7
 80050aa:	4619      	mov	r1, r3
 80050ac:	4864      	ldr	r0, [pc, #400]	; (8005240 <MX_ADC1_Init+0x21c>)
 80050ae:	f7fd fd08 	bl	8002ac2 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80050b2:	f7ff fddf 	bl	8004c74 <__NVIC_GetPriorityGrouping>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2200      	movs	r2, #0
 80050ba:	2102      	movs	r1, #2
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fe2f 	bl	8004d20 <NVIC_EncodePriority>
 80050c2:	4603      	mov	r3, r0
 80050c4:	4619      	mov	r1, r3
 80050c6:	2012      	movs	r0, #18
 80050c8:	f7ff fe00 	bl	8004ccc <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 80050cc:	2012      	movs	r0, #18
 80050ce:	f7ff fddf 	bl	8004c90 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80050d2:	2300      	movs	r3, #0
 80050d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80050d6:	2300      	movs	r3, #0
 80050d8:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80050da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050de:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80050e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80050e4:	4619      	mov	r1, r3
 80050e6:	4857      	ldr	r0, [pc, #348]	; (8005244 <MX_ADC1_Init+0x220>)
 80050e8:	f7fd fa1e 	bl	8002528 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80050ec:	2300      	movs	r3, #0
 80050ee:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80050f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80050fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005102:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8005104:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005108:	4619      	mov	r1, r3
 800510a:	484e      	ldr	r0, [pc, #312]	; (8005244 <MX_ADC1_Init+0x220>)
 800510c:	f7fd fa38 	bl	8002580 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8005110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005114:	484b      	ldr	r0, [pc, #300]	; (8005244 <MX_ADC1_Init+0x220>)
 8005116:	f7ff fe69 	bl	8004dec <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 800511a:	484a      	ldr	r0, [pc, #296]	; (8005244 <MX_ADC1_Init+0x220>)
 800511c:	f7ff ff31 	bl	8004f82 <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8005120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005124:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8005126:	2300      	movs	r3, #0
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800512a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800512e:	4619      	mov	r1, r3
 8005130:	4845      	ldr	r0, [pc, #276]	; (8005248 <MX_ADC1_Init+0x224>)
 8005132:	f7fd f9b1 	bl	8002498 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8005136:	4a45      	ldr	r2, [pc, #276]	; (800524c <MX_ADC1_Init+0x228>)
 8005138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800513c:	4841      	ldr	r0, [pc, #260]	; (8005244 <MX_ADC1_Init+0x220>)
 800513e:	f7ff fe22 	bl	8004d86 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 8005142:	2202      	movs	r2, #2
 8005144:	4941      	ldr	r1, [pc, #260]	; (800524c <MX_ADC1_Init+0x228>)
 8005146:	483f      	ldr	r0, [pc, #252]	; (8005244 <MX_ADC1_Init+0x220>)
 8005148:	f7ff fec1 	bl	8004ece <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 800514c:	4a40      	ldr	r2, [pc, #256]	; (8005250 <MX_ADC1_Init+0x22c>)
 800514e:	f240 2105 	movw	r1, #517	; 0x205
 8005152:	483c      	ldr	r0, [pc, #240]	; (8005244 <MX_ADC1_Init+0x220>)
 8005154:	f7ff fe17 	bl	8004d86 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 8005158:	2202      	movs	r2, #2
 800515a:	493d      	ldr	r1, [pc, #244]	; (8005250 <MX_ADC1_Init+0x22c>)
 800515c:	4839      	ldr	r0, [pc, #228]	; (8005244 <MX_ADC1_Init+0x220>)
 800515e:	f7ff feb6 	bl	8004ece <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8005162:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005166:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8005168:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800516c:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 800516e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005172:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8005174:	2300      	movs	r3, #0
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8005178:	f107 0318 	add.w	r3, r7, #24
 800517c:	4619      	mov	r1, r3
 800517e:	4831      	ldr	r0, [pc, #196]	; (8005244 <MX_ADC1_Init+0x220>)
 8005180:	f7fd fa46 	bl	8002610 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8005184:	482f      	ldr	r0, [pc, #188]	; (8005244 <MX_ADC1_Init+0x220>)
 8005186:	f7ff ff0c 	bl	8004fa2 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 800518a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800518e:	2101      	movs	r1, #1
 8005190:	482c      	ldr	r0, [pc, #176]	; (8005244 <MX_ADC1_Init+0x220>)
 8005192:	f7ff fe3e 	bl	8004e12 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8005196:	2200      	movs	r2, #0
 8005198:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800519c:	4829      	ldr	r0, [pc, #164]	; (8005244 <MX_ADC1_Init+0x220>)
 800519e:	f7ff fe96 	bl	8004ece <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 80051a2:	2200      	movs	r2, #0
 80051a4:	2101      	movs	r1, #1
 80051a6:	4827      	ldr	r0, [pc, #156]	; (8005244 <MX_ADC1_Init+0x220>)
 80051a8:	f7ff fe69 	bl	8004e7e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 80051ac:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80051b0:	4824      	ldr	r0, [pc, #144]	; (8005244 <MX_ADC1_Init+0x220>)
 80051b2:	f7ff fed5 	bl	8004f60 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 80051b6:	f107 0318 	add.w	r3, r7, #24
 80051ba:	4619      	mov	r1, r3
 80051bc:	4821      	ldr	r0, [pc, #132]	; (8005244 <MX_ADC1_Init+0x220>)
 80051be:	f7fd fa27 	bl	8002610 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 80051c2:	4820      	ldr	r0, [pc, #128]	; (8005244 <MX_ADC1_Init+0x220>)
 80051c4:	f7ff feed 	bl	8004fa2 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 80051c8:	4a22      	ldr	r2, [pc, #136]	; (8005254 <MX_ADC1_Init+0x230>)
 80051ca:	f241 1102 	movw	r1, #4354	; 0x1102
 80051ce:	481d      	ldr	r0, [pc, #116]	; (8005244 <MX_ADC1_Init+0x220>)
 80051d0:	f7ff fe1f 	bl	8004e12 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 80051d4:	2200      	movs	r2, #0
 80051d6:	491f      	ldr	r1, [pc, #124]	; (8005254 <MX_ADC1_Init+0x230>)
 80051d8:	481a      	ldr	r0, [pc, #104]	; (8005244 <MX_ADC1_Init+0x220>)
 80051da:	f7ff fe78 	bl	8004ece <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 80051de:	2200      	movs	r2, #0
 80051e0:	f241 1102 	movw	r1, #4354	; 0x1102
 80051e4:	4817      	ldr	r0, [pc, #92]	; (8005244 <MX_ADC1_Init+0x220>)
 80051e6:	f7ff fe4a 	bl	8004e7e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 80051ea:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80051ee:	4815      	ldr	r0, [pc, #84]	; (8005244 <MX_ADC1_Init+0x220>)
 80051f0:	f7ff feb6 	bl	8004f60 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 80051f4:	f107 0318 	add.w	r3, r7, #24
 80051f8:	4619      	mov	r1, r3
 80051fa:	4812      	ldr	r0, [pc, #72]	; (8005244 <MX_ADC1_Init+0x220>)
 80051fc:	f7fd fa08 	bl	8002610 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8005200:	4810      	ldr	r0, [pc, #64]	; (8005244 <MX_ADC1_Init+0x220>)
 8005202:	f7ff fece 	bl	8004fa2 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8005206:	220a      	movs	r2, #10
 8005208:	f242 2103 	movw	r1, #8707	; 0x2203
 800520c:	480d      	ldr	r0, [pc, #52]	; (8005244 <MX_ADC1_Init+0x220>)
 800520e:	f7ff fe00 	bl	8004e12 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8005212:	2200      	movs	r2, #0
 8005214:	210a      	movs	r1, #10
 8005216:	480b      	ldr	r0, [pc, #44]	; (8005244 <MX_ADC1_Init+0x220>)
 8005218:	f7ff fe59 	bl	8004ece <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 800521c:	2200      	movs	r2, #0
 800521e:	f242 2103 	movw	r1, #8707	; 0x2203
 8005222:	4808      	ldr	r0, [pc, #32]	; (8005244 <MX_ADC1_Init+0x220>)
 8005224:	f7ff fe2b 	bl	8004e7e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8005228:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800522c:	4805      	ldr	r0, [pc, #20]	; (8005244 <MX_ADC1_Init+0x220>)
 800522e:	f7ff fe97 	bl	8004f60 <LL_ADC_INJ_StartConversionExtTrig>

}
 8005232:	bf00      	nop
 8005234:	3758      	adds	r7, #88	; 0x58
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40020800 	.word	0x40020800
 8005240:	40020000 	.word	0x40020000
 8005244:	40012000 	.word	0x40012000
 8005248:	40012300 	.word	0x40012300
 800524c:	02300001 	.word	0x02300001
 8005250:	0060000c 	.word	0x0060000c
 8005254:	0030000b 	.word	0x0030000b

08005258 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b092      	sub	sp, #72	; 0x48
 800525c:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800525e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	605a      	str	r2, [r3, #4]
 8005268:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800526a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	605a      	str	r2, [r3, #4]
 8005274:	609a      	str	r2, [r3, #8]
 8005276:	60da      	str	r2, [r3, #12]
 8005278:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 800527a:	f107 0318 	add.w	r3, r7, #24
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	605a      	str	r2, [r3, #4]
 8005284:	609a      	str	r2, [r3, #8]
 8005286:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005288:	463b      	mov	r3, r7
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	605a      	str	r2, [r3, #4]
 8005290:	609a      	str	r2, [r3, #8]
 8005292:	60da      	str	r2, [r3, #12]
 8005294:	611a      	str	r2, [r3, #16]
 8005296:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8005298:	f44f 7000 	mov.w	r0, #512	; 0x200
 800529c:	f7ff feaa 	bl	8004ff4 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80052a0:	2004      	movs	r0, #4
 80052a2:	f7ff fe8f 	bl	8004fc4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80052a6:	2001      	movs	r0, #1
 80052a8:	f7ff fe8c 	bl	8004fc4 <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration  
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80052ac:	2303      	movs	r3, #3
 80052ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80052b0:	2303      	movs	r3, #3
 80052b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80052b4:	2300      	movs	r3, #0
 80052b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052b8:	463b      	mov	r3, r7
 80052ba:	4619      	mov	r1, r3
 80052bc:	485e      	ldr	r0, [pc, #376]	; (8005438 <MX_ADC2_Init+0x1e0>)
 80052be:	f7fd fc00 	bl	8002ac2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80052c2:	2301      	movs	r3, #1
 80052c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80052c6:	2303      	movs	r3, #3
 80052c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80052ca:	2300      	movs	r3, #0
 80052cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ce:	463b      	mov	r3, r7
 80052d0:	4619      	mov	r1, r3
 80052d2:	485a      	ldr	r0, [pc, #360]	; (800543c <MX_ADC2_Init+0x1e4>)
 80052d4:	f7fd fbf5 	bl	8002ac2 <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80052d8:	f7ff fccc 	bl	8004c74 <__NVIC_GetPriorityGrouping>
 80052dc:	4603      	mov	r3, r0
 80052de:	2200      	movs	r2, #0
 80052e0:	2102      	movs	r1, #2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fd1c 	bl	8004d20 <NVIC_EncodePriority>
 80052e8:	4603      	mov	r3, r0
 80052ea:	4619      	mov	r1, r3
 80052ec:	2012      	movs	r0, #18
 80052ee:	f7ff fced 	bl	8004ccc <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 80052f2:	2012      	movs	r0, #18
 80052f4:	f7ff fccc 	bl	8004c90 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80052f8:	2300      	movs	r3, #0
 80052fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80052fc:	2300      	movs	r3, #0
 80052fe:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8005300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005304:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8005306:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800530a:	4619      	mov	r1, r3
 800530c:	484c      	ldr	r0, [pc, #304]	; (8005440 <MX_ADC2_Init+0x1e8>)
 800530e:	f7fd f90b 	bl	8002528 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8005312:	2300      	movs	r3, #0
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8005316:	2300      	movs	r3, #0
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800531a:	2300      	movs	r3, #0
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800531e:	2300      	movs	r3, #0
 8005320:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8005322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8005328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800532c:	4619      	mov	r1, r3
 800532e:	4844      	ldr	r0, [pc, #272]	; (8005440 <MX_ADC2_Init+0x1e8>)
 8005330:	f7fd f926 	bl	8002580 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8005334:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005338:	4841      	ldr	r0, [pc, #260]	; (8005440 <MX_ADC2_Init+0x1e8>)
 800533a:	f7ff fd57 	bl	8004dec <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 800533e:	4840      	ldr	r0, [pc, #256]	; (8005440 <MX_ADC2_Init+0x1e8>)
 8005340:	f7ff fe1f 	bl	8004f82 <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8005344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800534c:	483c      	ldr	r0, [pc, #240]	; (8005440 <MX_ADC2_Init+0x1e8>)
 800534e:	f7ff fd1a 	bl	8004d86 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8005352:	2200      	movs	r2, #0
 8005354:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005358:	4839      	ldr	r0, [pc, #228]	; (8005440 <MX_ADC2_Init+0x1e8>)
 800535a:	f7ff fdb8 	bl	8004ece <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 800535e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005362:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8005364:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005368:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 800536a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800536e:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8005370:	2300      	movs	r3, #0
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8005374:	f107 0318 	add.w	r3, r7, #24
 8005378:	4619      	mov	r1, r3
 800537a:	4831      	ldr	r0, [pc, #196]	; (8005440 <MX_ADC2_Init+0x1e8>)
 800537c:	f7fd f948 	bl	8002610 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8005380:	482f      	ldr	r0, [pc, #188]	; (8005440 <MX_ADC2_Init+0x1e8>)
 8005382:	f7ff fe0e 	bl	8004fa2 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8005386:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800538a:	2101      	movs	r1, #1
 800538c:	482c      	ldr	r0, [pc, #176]	; (8005440 <MX_ADC2_Init+0x1e8>)
 800538e:	f7ff fd40 	bl	8004e12 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8005392:	2200      	movs	r2, #0
 8005394:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005398:	4829      	ldr	r0, [pc, #164]	; (8005440 <MX_ADC2_Init+0x1e8>)
 800539a:	f7ff fd98 	bl	8004ece <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 800539e:	2200      	movs	r2, #0
 80053a0:	2101      	movs	r1, #1
 80053a2:	4827      	ldr	r0, [pc, #156]	; (8005440 <MX_ADC2_Init+0x1e8>)
 80053a4:	f7ff fd6b 	bl	8004e7e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 80053a8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80053ac:	4824      	ldr	r0, [pc, #144]	; (8005440 <MX_ADC2_Init+0x1e8>)
 80053ae:	f7ff fdd7 	bl	8004f60 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 80053b2:	f107 0318 	add.w	r3, r7, #24
 80053b6:	4619      	mov	r1, r3
 80053b8:	4821      	ldr	r0, [pc, #132]	; (8005440 <MX_ADC2_Init+0x1e8>)
 80053ba:	f7fd f929 	bl	8002610 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 80053be:	4820      	ldr	r0, [pc, #128]	; (8005440 <MX_ADC2_Init+0x1e8>)
 80053c0:	f7ff fdef 	bl	8004fa2 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 80053c4:	4a1f      	ldr	r2, [pc, #124]	; (8005444 <MX_ADC2_Init+0x1ec>)
 80053c6:	f241 1102 	movw	r1, #4354	; 0x1102
 80053ca:	481d      	ldr	r0, [pc, #116]	; (8005440 <MX_ADC2_Init+0x1e8>)
 80053cc:	f7ff fd21 	bl	8004e12 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 80053d0:	2200      	movs	r2, #0
 80053d2:	491c      	ldr	r1, [pc, #112]	; (8005444 <MX_ADC2_Init+0x1ec>)
 80053d4:	481a      	ldr	r0, [pc, #104]	; (8005440 <MX_ADC2_Init+0x1e8>)
 80053d6:	f7ff fd7a 	bl	8004ece <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 80053da:	2200      	movs	r2, #0
 80053dc:	f241 1102 	movw	r1, #4354	; 0x1102
 80053e0:	4817      	ldr	r0, [pc, #92]	; (8005440 <MX_ADC2_Init+0x1e8>)
 80053e2:	f7ff fd4c 	bl	8004e7e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 80053e6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80053ea:	4815      	ldr	r0, [pc, #84]	; (8005440 <MX_ADC2_Init+0x1e8>)
 80053ec:	f7ff fdb8 	bl	8004f60 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 80053f0:	f107 0318 	add.w	r3, r7, #24
 80053f4:	4619      	mov	r1, r3
 80053f6:	4812      	ldr	r0, [pc, #72]	; (8005440 <MX_ADC2_Init+0x1e8>)
 80053f8:	f7fd f90a 	bl	8002610 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 80053fc:	4810      	ldr	r0, [pc, #64]	; (8005440 <MX_ADC2_Init+0x1e8>)
 80053fe:	f7ff fdd0 	bl	8004fa2 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8005402:	220a      	movs	r2, #10
 8005404:	f242 2103 	movw	r1, #8707	; 0x2203
 8005408:	480d      	ldr	r0, [pc, #52]	; (8005440 <MX_ADC2_Init+0x1e8>)
 800540a:	f7ff fd02 	bl	8004e12 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 800540e:	2200      	movs	r2, #0
 8005410:	210a      	movs	r1, #10
 8005412:	480b      	ldr	r0, [pc, #44]	; (8005440 <MX_ADC2_Init+0x1e8>)
 8005414:	f7ff fd5b 	bl	8004ece <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 8005418:	2200      	movs	r2, #0
 800541a:	f242 2103 	movw	r1, #8707	; 0x2203
 800541e:	4808      	ldr	r0, [pc, #32]	; (8005440 <MX_ADC2_Init+0x1e8>)
 8005420:	f7ff fd2d 	bl	8004e7e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8005424:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005428:	4805      	ldr	r0, [pc, #20]	; (8005440 <MX_ADC2_Init+0x1e8>)
 800542a:	f7ff fd99 	bl	8004f60 <LL_ADC_INJ_StartConversionExtTrig>

}
 800542e:	bf00      	nop
 8005430:	3748      	adds	r7, #72	; 0x48
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40020800 	.word	0x40020800
 800543c:	40020000 	.word	0x40020000
 8005440:	40012100 	.word	0x40012100
 8005444:	0030000b 	.word	0x0030000b

08005448 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8005452:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <LL_SYSCFG_SetEXTISource+0x58>)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	3302      	adds	r3, #2
 800545a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	0c1b      	lsrs	r3, r3, #16
 8005462:	43db      	mvns	r3, r3
 8005464:	ea02 0103 	and.w	r1, r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	0c1b      	lsrs	r3, r3, #16
 800546c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	fa93 f3a3 	rbit	r3, r3
 8005474:	60bb      	str	r3, [r7, #8]
  return result;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	fab3 f383 	clz	r3, r3
 800547c:	b2db      	uxtb	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	fa03 f202 	lsl.w	r2, r3, r2
 8005486:	4806      	ldr	r0, [pc, #24]	; (80054a0 <LL_SYSCFG_SetEXTISource+0x58>)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	b2db      	uxtb	r3, r3
 800548c:	430a      	orrs	r2, r1
 800548e:	3302      	adds	r3, #2
 8005490:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	40013800 	.word	0x40013800

080054a4 <LL_GPIO_SetPinMode>:
{
 80054a4:	b480      	push	{r7}
 80054a6:	b089      	sub	sp, #36	; 0x24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	fa93 f3a3 	rbit	r3, r3
 80054be:	613b      	str	r3, [r7, #16]
  return result;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	fab3 f383 	clz	r3, r3
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	2103      	movs	r1, #3
 80054cc:	fa01 f303 	lsl.w	r3, r1, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	401a      	ands	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	fa93 f3a3 	rbit	r3, r3
 80054de:	61bb      	str	r3, [r7, #24]
  return result;
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	fab3 f383 	clz	r3, r3
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	431a      	orrs	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	601a      	str	r2, [r3, #0]
}
 80054f6:	bf00      	nop
 80054f8:	3724      	adds	r7, #36	; 0x24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <LL_GPIO_SetPinPull>:
{
 8005502:	b480      	push	{r7}
 8005504:	b089      	sub	sp, #36	; 0x24
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	fa93 f3a3 	rbit	r3, r3
 800551c:	613b      	str	r3, [r7, #16]
  return result;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	fab3 f383 	clz	r3, r3
 8005524:	b2db      	uxtb	r3, r3
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	2103      	movs	r1, #3
 800552a:	fa01 f303 	lsl.w	r3, r1, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	401a      	ands	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	fa93 f3a3 	rbit	r3, r3
 800553c:	61bb      	str	r3, [r7, #24]
  return result;
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	fab3 f383 	clz	r3, r3
 8005544:	b2db      	uxtb	r3, r3
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	fa01 f303 	lsl.w	r3, r1, r3
 800554e:	431a      	orrs	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	60da      	str	r2, [r3, #12]
}
 8005554:	bf00      	nop
 8005556:	3724      	adds	r7, #36	; 0x24
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	041a      	lsls	r2, r3, #16
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	619a      	str	r2, [r3, #24]
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <LL_AHB1_GRP1_EnableClock>:
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800558a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800558c:	4907      	ldr	r1, [pc, #28]	; (80055ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4313      	orrs	r3, r2
 8005592:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4013      	ands	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800559e:	68fb      	ldr	r3, [r7, #12]
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40023800 	.word	0x40023800

080055b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80055b6:	f107 0318 	add.w	r3, r7, #24
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055c0:	463b      	mov	r3, r7
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	605a      	str	r2, [r3, #4]
 80055c8:	609a      	str	r2, [r3, #8]
 80055ca:	60da      	str	r2, [r3, #12]
 80055cc:	611a      	str	r2, [r3, #16]
 80055ce:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80055d0:	2004      	movs	r0, #4
 80055d2:	f7ff ffd5 	bl	8005580 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80055d6:	2080      	movs	r0, #128	; 0x80
 80055d8:	f7ff ffd2 	bl	8005580 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80055dc:	2001      	movs	r0, #1
 80055de:	f7ff ffcf 	bl	8005580 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80055e2:	2002      	movs	r0, #2
 80055e4:	f7ff ffcc 	bl	8005580 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80055e8:	2120      	movs	r1, #32
 80055ea:	481a      	ldr	r0, [pc, #104]	; (8005654 <MX_GPIO_Init+0xa4>)
 80055ec:	f7ff ffb8 	bl	8005560 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80055f0:	4919      	ldr	r1, [pc, #100]	; (8005658 <MX_GPIO_Init+0xa8>)
 80055f2:	2002      	movs	r0, #2
 80055f4:	f7ff ff28 	bl	8005448 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80055f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055fc:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80055fe:	2301      	movs	r3, #1
 8005600:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8005602:	2300      	movs	r3, #0
 8005604:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8005606:	2302      	movs	r3, #2
 8005608:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800560a:	f107 0318 	add.w	r3, r7, #24
 800560e:	4618      	mov	r0, r3
 8005610:	f7fd f8d6 	bl	80027c0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8005614:	2200      	movs	r2, #0
 8005616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800561a:	4810      	ldr	r0, [pc, #64]	; (800565c <MX_GPIO_Init+0xac>)
 800561c:	f7ff ff71 	bl	8005502 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8005620:	2200      	movs	r2, #0
 8005622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005626:	480d      	ldr	r0, [pc, #52]	; (800565c <MX_GPIO_Init+0xac>)
 8005628:	f7ff ff3c 	bl	80054a4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800562c:	2320      	movs	r3, #32
 800562e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005630:	2301      	movs	r3, #1
 8005632:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005634:	2300      	movs	r3, #0
 8005636:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005640:	463b      	mov	r3, r7
 8005642:	4619      	mov	r1, r3
 8005644:	4803      	ldr	r0, [pc, #12]	; (8005654 <MX_GPIO_Init+0xa4>)
 8005646:	f7fd fa3c 	bl	8002ac2 <LL_GPIO_Init>

}
 800564a:	bf00      	nop
 800564c:	3720      	adds	r7, #32
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40020000 	.word	0x40020000
 8005658:	00f00003 	.word	0x00f00003
 800565c:	40020800 	.word	0x40020800

08005660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005664:	f7fb fc3c 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005668:	f000 f80e 	bl	8005688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800566c:	f7ff ffa0 	bl	80055b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005670:	f000 fc48 	bl	8005f04 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8005674:	f000 fb28 	bl	8005cc8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8005678:	f7ff fcd4 	bl	8005024 <MX_ADC1_Init>
  MX_ADC2_Init();
 800567c:	f7ff fdec 	bl	8005258 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  cppwrapper();
 8005680:	f000 fd26 	bl	80060d0 <cppwrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005684:	e7fe      	b.n	8005684 <main+0x24>
	...

08005688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b094      	sub	sp, #80	; 0x50
 800568c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800568e:	f107 031c 	add.w	r3, r7, #28
 8005692:	2234      	movs	r2, #52	; 0x34
 8005694:	2100      	movs	r1, #0
 8005696:	4618      	mov	r0, r3
 8005698:	f002 f9f6 	bl	8007a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800569c:	f107 0308 	add.w	r3, r7, #8
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	605a      	str	r2, [r3, #4]
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	60da      	str	r2, [r3, #12]
 80056aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80056ac:	2300      	movs	r3, #0
 80056ae:	607b      	str	r3, [r7, #4]
 80056b0:	4b2c      	ldr	r3, [pc, #176]	; (8005764 <SystemClock_Config+0xdc>)
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	4a2b      	ldr	r2, [pc, #172]	; (8005764 <SystemClock_Config+0xdc>)
 80056b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ba:	6413      	str	r3, [r2, #64]	; 0x40
 80056bc:	4b29      	ldr	r3, [pc, #164]	; (8005764 <SystemClock_Config+0xdc>)
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c4:	607b      	str	r3, [r7, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80056c8:	2300      	movs	r3, #0
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4b26      	ldr	r3, [pc, #152]	; (8005768 <SystemClock_Config+0xe0>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a25      	ldr	r2, [pc, #148]	; (8005768 <SystemClock_Config+0xe0>)
 80056d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	4b23      	ldr	r3, [pc, #140]	; (8005768 <SystemClock_Config+0xe0>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80056e4:	2301      	movs	r3, #1
 80056e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80056e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80056ee:	2302      	movs	r3, #2
 80056f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80056f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80056f8:	2304      	movs	r3, #4
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80056fc:	23b4      	movs	r3, #180	; 0xb4
 80056fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005700:	2302      	movs	r3, #2
 8005702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005704:	2302      	movs	r3, #2
 8005706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005708:	2302      	movs	r3, #2
 800570a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800570c:	f107 031c 	add.w	r3, r7, #28
 8005710:	4618      	mov	r0, r3
 8005712:	f7fc f9d5 	bl	8001ac0 <HAL_RCC_OscConfig>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800571c:	f000 f826 	bl	800576c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005720:	f7fb fec8 	bl	80014b4 <HAL_PWREx_EnableOverDrive>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800572a:	f000 f81f 	bl	800576c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800572e:	230f      	movs	r3, #15
 8005730:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005732:	2302      	movs	r3, #2
 8005734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800573a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800573e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005744:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005746:	f107 0308 	add.w	r3, r7, #8
 800574a:	2105      	movs	r1, #5
 800574c:	4618      	mov	r0, r3
 800574e:	f7fb ff01 	bl	8001554 <HAL_RCC_ClockConfig>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005758:	f000 f808 	bl	800576c <Error_Handler>
  }
}
 800575c:	bf00      	nop
 800575e:	3750      	adds	r7, #80	; 0x50
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40023800 	.word	0x40023800
 8005768:	40007000 	.word	0x40007000

0800576c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005770:	bf00      	nop
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
	...

0800577c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005782:	2300      	movs	r3, #0
 8005784:	607b      	str	r3, [r7, #4]
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <HAL_MspInit+0x4c>)
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	4a0f      	ldr	r2, [pc, #60]	; (80057c8 <HAL_MspInit+0x4c>)
 800578c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005790:	6453      	str	r3, [r2, #68]	; 0x44
 8005792:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <HAL_MspInit+0x4c>)
 8005794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800579a:	607b      	str	r3, [r7, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800579e:	2300      	movs	r3, #0
 80057a0:	603b      	str	r3, [r7, #0]
 80057a2:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <HAL_MspInit+0x4c>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	4a08      	ldr	r2, [pc, #32]	; (80057c8 <HAL_MspInit+0x4c>)
 80057a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ac:	6413      	str	r3, [r2, #64]	; 0x40
 80057ae:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <HAL_MspInit+0x4c>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80057ba:	2004      	movs	r0, #4
 80057bc:	f7fb fcb4 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40023800 	.word	0x40023800

080057cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057da:	b480      	push	{r7}
 80057dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057de:	e7fe      	b.n	80057de <HardFault_Handler+0x4>

080057e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057e4:	e7fe      	b.n	80057e4 <MemManage_Handler+0x4>

080057e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057e6:	b480      	push	{r7}
 80057e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057ea:	e7fe      	b.n	80057ea <BusFault_Handler+0x4>

080057ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057f0:	e7fe      	b.n	80057f0 <UsageFault_Handler+0x4>

080057f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057f2:	b480      	push	{r7}
 80057f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057f6:	bf00      	nop
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005804:	bf00      	nop
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800580e:	b480      	push	{r7}
 8005810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005812:	bf00      	nop
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005820:	f7fb fbb0 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005824:	bf00      	nop
 8005826:	bd80      	pop	{r7, pc}

08005828 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	HighFreqTask();
 800582c:	f000 fd10 	bl	8006250 <HighFreqTask>
  /* USER CODE END ADC_IRQn 0 */
  
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005830:	bf00      	nop
 8005832:	bd80      	pop	{r7, pc}

08005834 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005838:	bf00      	nop
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005842:	b480      	push	{r7}
 8005844:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005846:	bf00      	nop
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
	return 1;
 8005854:	2301      	movs	r3, #1
}
 8005856:	4618      	mov	r0, r3
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <_kill>:

int _kill(int pid, int sig)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800586a:	f002 f8af 	bl	80079cc <__errno>
 800586e:	4602      	mov	r2, r0
 8005870:	2316      	movs	r3, #22
 8005872:	6013      	str	r3, [r2, #0]
	return -1;
 8005874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <_exit>:

void _exit (int status)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff ffe7 	bl	8005860 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005892:	e7fe      	b.n	8005892 <_exit+0x12>

08005894 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800589c:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <_sbrk+0x50>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <_sbrk+0x16>
		heap_end = &end;
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <_sbrk+0x50>)
 80058a6:	4a10      	ldr	r2, [pc, #64]	; (80058e8 <_sbrk+0x54>)
 80058a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80058aa:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <_sbrk+0x50>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <_sbrk+0x50>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4413      	add	r3, r2
 80058b8:	466a      	mov	r2, sp
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d907      	bls.n	80058ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80058be:	f002 f885 	bl	80079cc <__errno>
 80058c2:	4602      	mov	r2, r0
 80058c4:	230c      	movs	r3, #12
 80058c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058cc:	e006      	b.n	80058dc <_sbrk+0x48>
	}

	heap_end += incr;
 80058ce:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <_sbrk+0x50>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4413      	add	r3, r2
 80058d6:	4a03      	ldr	r2, [pc, #12]	; (80058e4 <_sbrk+0x50>)
 80058d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80058da:	68fb      	ldr	r3, [r7, #12]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	200001fc 	.word	0x200001fc
 80058e8:	20000308 	.word	0x20000308

080058ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058f0:	4b16      	ldr	r3, [pc, #88]	; (800594c <SystemInit+0x60>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	4a15      	ldr	r2, [pc, #84]	; (800594c <SystemInit+0x60>)
 80058f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005900:	4b13      	ldr	r3, [pc, #76]	; (8005950 <SystemInit+0x64>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a12      	ldr	r2, [pc, #72]	; (8005950 <SystemInit+0x64>)
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800590c:	4b10      	ldr	r3, [pc, #64]	; (8005950 <SystemInit+0x64>)
 800590e:	2200      	movs	r2, #0
 8005910:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005912:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <SystemInit+0x64>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a0e      	ldr	r2, [pc, #56]	; (8005950 <SystemInit+0x64>)
 8005918:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800591c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005920:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005922:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <SystemInit+0x64>)
 8005924:	4a0b      	ldr	r2, [pc, #44]	; (8005954 <SystemInit+0x68>)
 8005926:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005928:	4b09      	ldr	r3, [pc, #36]	; (8005950 <SystemInit+0x64>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a08      	ldr	r2, [pc, #32]	; (8005950 <SystemInit+0x64>)
 800592e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005932:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005934:	4b06      	ldr	r3, [pc, #24]	; (8005950 <SystemInit+0x64>)
 8005936:	2200      	movs	r2, #0
 8005938:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <SystemInit+0x60>)
 800593c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005940:	609a      	str	r2, [r3, #8]
#endif
}
 8005942:	bf00      	nop
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	e000ed00 	.word	0xe000ed00
 8005950:	40023800 	.word	0x40023800
 8005954:	24003010 	.word	0x24003010

08005958 <__NVIC_GetPriorityGrouping>:
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800595c:	4b04      	ldr	r3, [pc, #16]	; (8005970 <__NVIC_GetPriorityGrouping+0x18>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	0a1b      	lsrs	r3, r3, #8
 8005962:	f003 0307 	and.w	r3, r3, #7
}
 8005966:	4618      	mov	r0, r3
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	e000ed00 	.word	0xe000ed00

08005974 <__NVIC_EnableIRQ>:
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800597e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005982:	2b00      	cmp	r3, #0
 8005984:	db0b      	blt.n	800599e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	f003 021f 	and.w	r2, r3, #31
 800598c:	4907      	ldr	r1, [pc, #28]	; (80059ac <__NVIC_EnableIRQ+0x38>)
 800598e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	2001      	movs	r0, #1
 8005996:	fa00 f202 	lsl.w	r2, r0, r2
 800599a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	e000e100 	.word	0xe000e100

080059b0 <__NVIC_SetPriority>:
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	6039      	str	r1, [r7, #0]
 80059ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	db0a      	blt.n	80059da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	490c      	ldr	r1, [pc, #48]	; (80059fc <__NVIC_SetPriority+0x4c>)
 80059ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ce:	0112      	lsls	r2, r2, #4
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	440b      	add	r3, r1
 80059d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059d8:	e00a      	b.n	80059f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	4908      	ldr	r1, [pc, #32]	; (8005a00 <__NVIC_SetPriority+0x50>)
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	3b04      	subs	r3, #4
 80059e8:	0112      	lsls	r2, r2, #4
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	440b      	add	r3, r1
 80059ee:	761a      	strb	r2, [r3, #24]
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	e000e100 	.word	0xe000e100
 8005a00:	e000ed00 	.word	0xe000ed00

08005a04 <NVIC_EncodePriority>:
{
 8005a04:	b480      	push	{r7}
 8005a06:	b089      	sub	sp, #36	; 0x24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f1c3 0307 	rsb	r3, r3, #7
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	bf28      	it	cs
 8005a22:	2304      	movcs	r3, #4
 8005a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d902      	bls.n	8005a34 <NVIC_EncodePriority+0x30>
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3b03      	subs	r3, #3
 8005a32:	e000      	b.n	8005a36 <NVIC_EncodePriority+0x32>
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	43da      	mvns	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	401a      	ands	r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	fa01 f303 	lsl.w	r3, r1, r3
 8005a56:	43d9      	mvns	r1, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a5c:	4313      	orrs	r3, r2
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3724      	adds	r7, #36	; 0x24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <LL_TIM_DisableARRPreload>:
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	601a      	str	r2, [r3, #0]
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <LL_TIM_OC_DisableFast>:
{
 8005a8c:	b4b0      	push	{r4, r5, r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d01c      	beq.n	8005ad6 <LL_TIM_OC_DisableFast+0x4a>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d017      	beq.n	8005ad2 <LL_TIM_OC_DisableFast+0x46>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d012      	beq.n	8005ace <LL_TIM_OC_DisableFast+0x42>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b40      	cmp	r3, #64	; 0x40
 8005aac:	d00d      	beq.n	8005aca <LL_TIM_OC_DisableFast+0x3e>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab4:	d007      	beq.n	8005ac6 <LL_TIM_OC_DisableFast+0x3a>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005abc:	d101      	bne.n	8005ac2 <LL_TIM_OC_DisableFast+0x36>
 8005abe:	2305      	movs	r3, #5
 8005ac0:	e00a      	b.n	8005ad8 <LL_TIM_OC_DisableFast+0x4c>
 8005ac2:	2306      	movs	r3, #6
 8005ac4:	e008      	b.n	8005ad8 <LL_TIM_OC_DisableFast+0x4c>
 8005ac6:	2304      	movs	r3, #4
 8005ac8:	e006      	b.n	8005ad8 <LL_TIM_OC_DisableFast+0x4c>
 8005aca:	2303      	movs	r3, #3
 8005acc:	e004      	b.n	8005ad8 <LL_TIM_OC_DisableFast+0x4c>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e002      	b.n	8005ad8 <LL_TIM_OC_DisableFast+0x4c>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <LL_TIM_OC_DisableFast+0x4c>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3318      	adds	r3, #24
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <LL_TIM_OC_DisableFast+0x7c>)
 8005ae4:	5c5b      	ldrb	r3, [r3, r1]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	4629      	mov	r1, r5
 8005aee:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <LL_TIM_OC_DisableFast+0x80>)
 8005af0:	5c5b      	ldrb	r3, [r3, r1]
 8005af2:	4619      	mov	r1, r3
 8005af4:	2304      	movs	r3, #4
 8005af6:	408b      	lsls	r3, r1
 8005af8:	43db      	mvns	r3, r3
 8005afa:	4013      	ands	r3, r2
 8005afc:	6023      	str	r3, [r4, #0]
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bcb0      	pop	{r4, r5, r7}
 8005b06:	4770      	bx	lr
 8005b08:	080096b0 	.word	0x080096b0
 8005b0c:	080096b8 	.word	0x080096b8

08005b10 <LL_TIM_OC_EnablePreload>:
{
 8005b10:	b4b0      	push	{r4, r5, r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d01c      	beq.n	8005b5a <LL_TIM_OC_EnablePreload+0x4a>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d017      	beq.n	8005b56 <LL_TIM_OC_EnablePreload+0x46>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d012      	beq.n	8005b52 <LL_TIM_OC_EnablePreload+0x42>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	d00d      	beq.n	8005b4e <LL_TIM_OC_EnablePreload+0x3e>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b38:	d007      	beq.n	8005b4a <LL_TIM_OC_EnablePreload+0x3a>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b40:	d101      	bne.n	8005b46 <LL_TIM_OC_EnablePreload+0x36>
 8005b42:	2305      	movs	r3, #5
 8005b44:	e00a      	b.n	8005b5c <LL_TIM_OC_EnablePreload+0x4c>
 8005b46:	2306      	movs	r3, #6
 8005b48:	e008      	b.n	8005b5c <LL_TIM_OC_EnablePreload+0x4c>
 8005b4a:	2304      	movs	r3, #4
 8005b4c:	e006      	b.n	8005b5c <LL_TIM_OC_EnablePreload+0x4c>
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e004      	b.n	8005b5c <LL_TIM_OC_EnablePreload+0x4c>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e002      	b.n	8005b5c <LL_TIM_OC_EnablePreload+0x4c>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <LL_TIM_OC_EnablePreload+0x4c>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3318      	adds	r3, #24
 8005b62:	461a      	mov	r2, r3
 8005b64:	4629      	mov	r1, r5
 8005b66:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <LL_TIM_OC_EnablePreload+0x7c>)
 8005b68:	5c5b      	ldrb	r3, [r3, r1]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005b6e:	6822      	ldr	r2, [r4, #0]
 8005b70:	4629      	mov	r1, r5
 8005b72:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <LL_TIM_OC_EnablePreload+0x80>)
 8005b74:	5c5b      	ldrb	r3, [r3, r1]
 8005b76:	4619      	mov	r1, r3
 8005b78:	2308      	movs	r3, #8
 8005b7a:	408b      	lsls	r3, r1
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	6023      	str	r3, [r4, #0]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bcb0      	pop	{r4, r5, r7}
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	080096b0 	.word	0x080096b0
 8005b90:	080096b8 	.word	0x080096b8

08005b94 <LL_TIM_SetTriggerOutput>:
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	605a      	str	r2, [r3, #4]
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <LL_TIM_SetSlaveMode>:
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f023 0207 	bic.w	r2, r3, #7
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	609a      	str	r2, [r3, #8]
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <LL_TIM_SetTriggerInput>:
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	609a      	str	r2, [r3, #8]
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <LL_TIM_DisableMasterSlaveMode>:
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	609a      	str	r2, [r3, #8]
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <LL_TIM_DisableIT_TRIG>:
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60da      	str	r2, [r3, #12]
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <LL_TIM_DisableDMAReq_TRIG>:
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60da      	str	r2, [r3, #12]
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
	...

08005c68 <LL_AHB1_GRP1_EnableClock>:
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005c70:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c74:	4907      	ldr	r1, [pc, #28]	; (8005c94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4013      	ands	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c86:	68fb      	ldr	r3, [r7, #12]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	40023800 	.word	0x40023800

08005c98 <LL_APB2_GRP1_EnableClock>:
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005ca0:	4b08      	ldr	r3, [pc, #32]	; (8005cc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005ca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ca4:	4907      	ldr	r1, [pc, #28]	; (8005cc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005cae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
}
 8005cb8:	bf00      	nop
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	40023800 	.word	0x40023800

08005cc8 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b09a      	sub	sp, #104	; 0x68
 8005ccc:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005cce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	605a      	str	r2, [r3, #4]
 8005cd8:	609a      	str	r2, [r3, #8]
 8005cda:	60da      	str	r2, [r3, #12]
 8005cdc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005cde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 fece 	bl	8007a88 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8005cec:	f107 031c 	add.w	r3, r7, #28
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	609a      	str	r2, [r3, #8]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	611a      	str	r2, [r3, #16]
 8005cfc:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	609a      	str	r2, [r3, #8]
 8005d08:	60da      	str	r2, [r3, #12]
 8005d0a:	611a      	str	r2, [r3, #16]
 8005d0c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8005d0e:	2001      	movs	r0, #1
 8005d10:	f7ff ffc2 	bl	8005c98 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005d14:	2001      	movs	r0, #1
 8005d16:	f7ff ffa7 	bl	8005c68 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration  
  PA6   ------> TIM1_BKIN 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8005d1a:	2340      	movs	r3, #64	; 0x40
 8005d1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d32:	1d3b      	adds	r3, r7, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	4871      	ldr	r0, [pc, #452]	; (8005efc <MX_TIM1_Init+0x234>)
 8005d38:	f7fc fec3 	bl	8002ac2 <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 8005d3c:	f7ff fe0c 	bl	8005958 <__NVIC_GetPriorityGrouping>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2201      	movs	r2, #1
 8005d44:	2104      	movs	r1, #4
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff fe5c 	bl	8005a04 <NVIC_EncodePriority>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	4619      	mov	r1, r3
 8005d50:	2018      	movs	r0, #24
 8005d52:	f7ff fe2d 	bl	80059b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005d56:	2018      	movs	r0, #24
 8005d58:	f7ff fe0c 	bl	8005974 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005d5c:	f7ff fdfc 	bl	8005958 <__NVIC_GetPriorityGrouping>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2200      	movs	r2, #0
 8005d64:	2100      	movs	r1, #0
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff fe4c 	bl	8005a04 <NVIC_EncodePriority>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	4619      	mov	r1, r3
 8005d70:	2019      	movs	r0, #25
 8005d72:	f7ff fe1d 	bl	80059b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005d76:	2019      	movs	r0, #25
 8005d78:	f7ff fdfc 	bl	8005974 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8005d82:	2320      	movs	r3, #32
 8005d84:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 8005d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8005d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d90:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8005d98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4858      	ldr	r0, [pc, #352]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005da0:	f7fc ff7e 	bl	8002ca0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8005da4:	4856      	ldr	r0, [pc, #344]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005da6:	f7ff fe60 	bl	8005a6a <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8005daa:	2101      	movs	r1, #1
 8005dac:	4854      	ldr	r0, [pc, #336]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005dae:	f7ff feaf 	bl	8005b10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005db2:	2360      	movs	r3, #96	; 0x60
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005dd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4849      	ldr	r0, [pc, #292]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005ddc:	f7fc fffa 	bl	8002dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8005de0:	2101      	movs	r1, #1
 8005de2:	4847      	ldr	r0, [pc, #284]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005de4:	f7ff fe52 	bl	8005a8c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8005de8:	2110      	movs	r1, #16
 8005dea:	4845      	ldr	r0, [pc, #276]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005dec:	f7ff fe90 	bl	8005b10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8005df8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	2110      	movs	r1, #16
 8005e00:	483f      	ldr	r0, [pc, #252]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e02:	f7fc ffe7 	bl	8002dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8005e06:	2110      	movs	r1, #16
 8005e08:	483d      	ldr	r0, [pc, #244]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e0a:	f7ff fe3f 	bl	8005a8c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8005e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e12:	483b      	ldr	r0, [pc, #236]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e14:	f7ff fe7c 	bl	8005b10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8005e20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e24:	461a      	mov	r2, r3
 8005e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e2a:	4835      	ldr	r0, [pc, #212]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e2c:	f7fc ffd2 	bl	8002dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8005e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e34:	4832      	ldr	r0, [pc, #200]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e36:	f7ff fe29 	bl	8005a8c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8005e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e3e:	4830      	ldr	r0, [pc, #192]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e40:	f7ff fe66 	bl	8005b10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8005e44:	2370      	movs	r3, #112	; 0x70
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005e50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e54:	461a      	mov	r2, r3
 8005e56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e5a:	4829      	ldr	r0, [pc, #164]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e5c:	f7fc ffba 	bl	8002dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8005e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e64:	4826      	ldr	r0, [pc, #152]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e66:	f7ff fe11 	bl	8005a8c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8005e6a:	2110      	movs	r1, #16
 8005e6c:	4824      	ldr	r0, [pc, #144]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e6e:	f7ff feb7 	bl	8005be0 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8005e72:	2106      	movs	r1, #6
 8005e74:	4822      	ldr	r0, [pc, #136]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e76:	f7ff fea0 	bl	8005bba <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8005e7a:	4821      	ldr	r0, [pc, #132]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e7c:	f7ff fed3 	bl	8005c26 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8005e80:	481f      	ldr	r0, [pc, #124]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e82:	f7ff fee0 	bl	8005c46 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8005e86:	2100      	movs	r1, #0
 8005e88:	481d      	ldr	r0, [pc, #116]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e8a:	f7ff fe83 	bl	8005b94 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8005e8e:	481c      	ldr	r0, [pc, #112]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005e90:	f7ff feb9 	bl	8005c06 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8005e94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e98:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 8005e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e9e:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8005ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8005eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eb0:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8005eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8005ebc:	f107 031c 	add.w	r3, r7, #28
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	480f      	ldr	r0, [pc, #60]	; (8005f00 <MX_TIM1_Init+0x238>)
 8005ec4:	f7fc ffbe 	bl	8002e44 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005ec8:	2001      	movs	r0, #1
 8005eca:	f7ff fecd 	bl	8005c68 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8005ece:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005ed2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ee8:	1d3b      	adds	r3, r7, #4
 8005eea:	4619      	mov	r1, r3
 8005eec:	4803      	ldr	r0, [pc, #12]	; (8005efc <MX_TIM1_Init+0x234>)
 8005eee:	f7fc fde8 	bl	8002ac2 <LL_GPIO_Init>

}
 8005ef2:	bf00      	nop
 8005ef4:	3768      	adds	r7, #104	; 0x68
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	40020000 	.word	0x40020000
 8005f00:	40010000 	.word	0x40010000

08005f04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005f08:	4b11      	ldr	r3, [pc, #68]	; (8005f50 <MX_USART2_UART_Init+0x4c>)
 8005f0a:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <MX_USART2_UART_Init+0x50>)
 8005f0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005f0e:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <MX_USART2_UART_Init+0x4c>)
 8005f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f16:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <MX_USART2_UART_Init+0x4c>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <MX_USART2_UART_Init+0x4c>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f22:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <MX_USART2_UART_Init+0x4c>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f28:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <MX_USART2_UART_Init+0x4c>)
 8005f2a:	220c      	movs	r2, #12
 8005f2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <MX_USART2_UART_Init+0x4c>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <MX_USART2_UART_Init+0x4c>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f3a:	4805      	ldr	r0, [pc, #20]	; (8005f50 <MX_USART2_UART_Init+0x4c>)
 8005f3c:	f7fc f81a 	bl	8001f74 <HAL_UART_Init>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005f46:	f7ff fc11 	bl	800576c <Error_Handler>
  }

}
 8005f4a:	bf00      	nop
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	200002c4 	.word	0x200002c4
 8005f54:	40004400 	.word	0x40004400

08005f58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f60:	f107 0314 	add.w	r3, r7, #20
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	605a      	str	r2, [r3, #4]
 8005f6a:	609a      	str	r2, [r3, #8]
 8005f6c:	60da      	str	r2, [r3, #12]
 8005f6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a19      	ldr	r2, [pc, #100]	; (8005fdc <HAL_UART_MspInit+0x84>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d12b      	bne.n	8005fd2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	4b18      	ldr	r3, [pc, #96]	; (8005fe0 <HAL_UART_MspInit+0x88>)
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	4a17      	ldr	r2, [pc, #92]	; (8005fe0 <HAL_UART_MspInit+0x88>)
 8005f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f88:	6413      	str	r3, [r2, #64]	; 0x40
 8005f8a:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <HAL_UART_MspInit+0x88>)
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <HAL_UART_MspInit+0x88>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	4a10      	ldr	r2, [pc, #64]	; (8005fe0 <HAL_UART_MspInit+0x88>)
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <HAL_UART_MspInit+0x88>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005fc2:	2307      	movs	r3, #7
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fc6:	f107 0314 	add.w	r3, r7, #20
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4805      	ldr	r0, [pc, #20]	; (8005fe4 <HAL_UART_MspInit+0x8c>)
 8005fce:	f7fb f8df 	bl	8001190 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005fd2:	bf00      	nop
 8005fd4:	3728      	adds	r7, #40	; 0x28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40004400 	.word	0x40004400
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	40020000 	.word	0x40020000

08005fe8 <LL_ADC_Enable>:
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f043 0201 	orr.w	r2, r3, #1
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	609a      	str	r2, [r3, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <LL_ADC_INJ_ReadConversionData12>:
{
 8006008:	b490      	push	{r4, r7}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	333c      	adds	r3, #60	; 0x3c
 8006016:	4619      	mov	r1, r3
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006022:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	fa92 f2a2 	rbit	r2, r2
 800602a:	60ba      	str	r2, [r7, #8]
  return result;
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	fab2 f282 	clz	r2, r2
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	40d3      	lsrs	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	461c      	mov	r4, r3
  return (uint16_t)(READ_BIT(*preg,
 800603c:	6823      	ldr	r3, [r4, #0]
                   );
 800603e:	b29b      	uxth	r3, r3
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bc90      	pop	{r4, r7}
 8006048:	4770      	bx	lr

0800604a <LL_ADC_IsActiveFlag_JEOS>:
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b04      	cmp	r3, #4
 800605c:	bf0c      	ite	eq
 800605e:	2301      	moveq	r3, #1
 8006060:	2300      	movne	r3, #0
 8006062:	b2db      	uxtb	r3, r3
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <LL_ADC_ClearFlag_JEOS>:
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f06f 0204 	mvn.w	r2, #4
 800607e:	601a      	str	r2, [r3, #0]
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_ADC_EnableIT_JEOS>:
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	605a      	str	r2, [r3, #4]
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <_ZN3PWMC1Ev>:


#ifndef PWM_HPP_
#define PWM_HPP_

class PWM {
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	605a      	str	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	609a      	str	r2, [r3, #8]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4618      	mov	r0, r3
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <cppwrapper>:
PWM PWM_Object3;
PWM PWM_Object4;

ArgSensor sensor;

void cppwrapper(void){
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b094      	sub	sp, #80	; 0x50
 80060d4:	af00      	add	r7, sp, #0
	MathLib mathlibrary;//三角関数を取得
 80060d6:	1d3b      	adds	r3, r7, #4
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fd f921 	bl	8003320 <_ZN7MathLibC1Ev>
	int mathlib_size = 256;//ライブラリのサイズを指定
 80060de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	mathlibrary.fInit(mathlib_size);
 80060e4:	1d3b      	adds	r3, r7, #4
 80060e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fd f979 	bl	80033e0 <_ZN7MathLib5fInitEi>

	Motor.setMathLib(mathlibrary);//モータクラスに算術ライブラリを渡す
 80060ee:	1d3a      	adds	r2, r7, #4
 80060f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060f4:	4611      	mov	r1, r2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe f8de 	bl	80042b8 <_ZN7MathLibC1ERKS_>
 80060fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006100:	4619      	mov	r1, r3
 8006102:	4829      	ldr	r0, [pc, #164]	; (80061a8 <cppwrapper+0xd8>)
 8006104:	f7fe f8c9 	bl	800429a <_ZN9MotorInfo10setMathLibE7MathLib>
 8006108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800610c:	4618      	mov	r0, r3
 800610e:	f7fd f923 	bl	8003358 <_ZN7MathLibD1Ev>

	PWM_Object1.setTIM(TIM1);
 8006112:	4926      	ldr	r1, [pc, #152]	; (80061ac <cppwrapper+0xdc>)
 8006114:	4826      	ldr	r0, [pc, #152]	; (80061b0 <cppwrapper+0xe0>)
 8006116:	f7fe fcf2 	bl	8004afe <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 800611a:	4924      	ldr	r1, [pc, #144]	; (80061ac <cppwrapper+0xdc>)
 800611c:	4825      	ldr	r0, [pc, #148]	; (80061b4 <cppwrapper+0xe4>)
 800611e:	f7fe fcee 	bl	8004afe <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 8006122:	4922      	ldr	r1, [pc, #136]	; (80061ac <cppwrapper+0xdc>)
 8006124:	4824      	ldr	r0, [pc, #144]	; (80061b8 <cppwrapper+0xe8>)
 8006126:	f7fe fcea 	bl	8004afe <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 800612a:	4920      	ldr	r1, [pc, #128]	; (80061ac <cppwrapper+0xdc>)
 800612c:	4823      	ldr	r0, [pc, #140]	; (80061bc <cppwrapper+0xec>)
 800612e:	f7fe fce6 	bl	8004afe <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 8006132:	2101      	movs	r1, #1
 8006134:	481e      	ldr	r0, [pc, #120]	; (80061b0 <cppwrapper+0xe0>)
 8006136:	f7fe fcf0 	bl	8004b1a <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 800613a:	2102      	movs	r1, #2
 800613c:	481d      	ldr	r0, [pc, #116]	; (80061b4 <cppwrapper+0xe4>)
 800613e:	f7fe fcec 	bl	8004b1a <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 8006142:	2103      	movs	r1, #3
 8006144:	481c      	ldr	r0, [pc, #112]	; (80061b8 <cppwrapper+0xe8>)
 8006146:	f7fe fce8 	bl	8004b1a <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 800614a:	2104      	movs	r1, #4
 800614c:	481b      	ldr	r0, [pc, #108]	; (80061bc <cppwrapper+0xec>)
 800614e:	f7fe fce4 	bl	8004b1a <_ZN3PWM5setCHEi>

	PWM_Object1.fInit(65535);
 8006152:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006156:	4816      	ldr	r0, [pc, #88]	; (80061b0 <cppwrapper+0xe0>)
 8006158:	f7fe fced 	bl	8004b36 <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(65535);
 800615c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006160:	4814      	ldr	r0, [pc, #80]	; (80061b4 <cppwrapper+0xe4>)
 8006162:	f7fe fce8 	bl	8004b36 <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(65535);
 8006166:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800616a:	4813      	ldr	r0, [pc, #76]	; (80061b8 <cppwrapper+0xe8>)
 800616c:	f7fe fce3 	bl	8004b36 <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(65535);
 8006170:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006174:	4811      	ldr	r0, [pc, #68]	; (80061bc <cppwrapper+0xec>)
 8006176:	f7fe fcde 	bl	8004b36 <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 800617a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80061c0 <cppwrapper+0xf0>
 800617e:	480c      	ldr	r0, [pc, #48]	; (80061b0 <cppwrapper+0xe0>)
 8006180:	f7fe fd50 	bl	8004c24 <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 8006184:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80061c0 <cppwrapper+0xf0>
 8006188:	480a      	ldr	r0, [pc, #40]	; (80061b4 <cppwrapper+0xe4>)
 800618a:	f7fe fd4b 	bl	8004c24 <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 800618e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80061c0 <cppwrapper+0xf0>
 8006192:	4809      	ldr	r0, [pc, #36]	; (80061b8 <cppwrapper+0xe8>)
 8006194:	f7fe fd46 	bl	8004c24 <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 8006198:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80061c0 <cppwrapper+0xf0>
 800619c:	4807      	ldr	r0, [pc, #28]	; (80061bc <cppwrapper+0xec>)
 800619e:	f7fe fd41 	bl	8004c24 <_ZN3PWM6f2DutyEf>

	ADC_Init();
 80061a2:	f000 f8e1 	bl	8006368 <_Z8ADC_Initv>

	while(1){
 80061a6:	e7fe      	b.n	80061a6 <cppwrapper+0xd6>
 80061a8:	20000208 	.word	0x20000208
 80061ac:	40010000 	.word	0x40010000
 80061b0:	2000026c 	.word	0x2000026c
 80061b4:	2000027c 	.word	0x2000027c
 80061b8:	2000028c 	.word	0x2000028c
 80061bc:	2000029c 	.word	0x2000029c
 80061c0:	00000000 	.word	0x00000000

080061c4 <_Z12MotorPWMTaskiff>:
//			HAL_Delay(10);
//		}
	}
}

void MotorPWMTask(int pArg, float pVd, float pVq){//パラメータの物理量は将来的に変える
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80061d0:	edc7 0a01 	vstr	s1, [r7, #4]
	//int mathlib_size = Motor.getMathLib().getLibSize();
	Motor.setArg(pArg);
 80061d4:	68f9      	ldr	r1, [r7, #12]
 80061d6:	481a      	ldr	r0, [pc, #104]	; (8006240 <_Z12MotorPWMTaskiff+0x7c>)
 80061d8:	f7fe f8a5 	bl	8004326 <_ZN9MotorInfo6setArgEi>
	Motor.setVd(pVd);
 80061dc:	ed97 0a02 	vldr	s0, [r7, #8]
 80061e0:	4817      	ldr	r0, [pc, #92]	; (8006240 <_Z12MotorPWMTaskiff+0x7c>)
 80061e2:	f7fe f8ae 	bl	8004342 <_ZN9MotorInfo5setVdEf>
	Motor.setVq(pVq);
 80061e6:	ed97 0a01 	vldr	s0, [r7, #4]
 80061ea:	4815      	ldr	r0, [pc, #84]	; (8006240 <_Z12MotorPWMTaskiff+0x7c>)
 80061ec:	f7fe f8b8 	bl	8004360 <_ZN9MotorInfo5setVqEf>
	Motor.invClarkTransform();
 80061f0:	4813      	ldr	r0, [pc, #76]	; (8006240 <_Z12MotorPWMTaskiff+0x7c>)
 80061f2:	f7fe f8c4 	bl	800437e <_ZN9MotorInfo17invClarkTransformEv>
	Motor.invParkTransform();
 80061f6:	4812      	ldr	r0, [pc, #72]	; (8006240 <_Z12MotorPWMTaskiff+0x7c>)
 80061f8:	f7fe f954 	bl	80044a4 <_ZN9MotorInfo16invParkTransformEv>

	PWM_Object1.f2Duty(Motor.getVu());
 80061fc:	4810      	ldr	r0, [pc, #64]	; (8006240 <_Z12MotorPWMTaskiff+0x7c>)
 80061fe:	f7fe f999 	bl	8004534 <_ZN9MotorInfo5getVuEv>
 8006202:	eef0 7a40 	vmov.f32	s15, s0
 8006206:	eeb0 0a67 	vmov.f32	s0, s15
 800620a:	480e      	ldr	r0, [pc, #56]	; (8006244 <_Z12MotorPWMTaskiff+0x80>)
 800620c:	f7fe fd0a 	bl	8004c24 <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(Motor.getVv());
 8006210:	480b      	ldr	r0, [pc, #44]	; (8006240 <_Z12MotorPWMTaskiff+0x7c>)
 8006212:	f7fe f99e 	bl	8004552 <_ZN9MotorInfo5getVvEv>
 8006216:	eef0 7a40 	vmov.f32	s15, s0
 800621a:	eeb0 0a67 	vmov.f32	s0, s15
 800621e:	480a      	ldr	r0, [pc, #40]	; (8006248 <_Z12MotorPWMTaskiff+0x84>)
 8006220:	f7fe fd00 	bl	8004c24 <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(Motor.getVw());
 8006224:	4806      	ldr	r0, [pc, #24]	; (8006240 <_Z12MotorPWMTaskiff+0x7c>)
 8006226:	f7fe f9a3 	bl	8004570 <_ZN9MotorInfo5getVwEv>
 800622a:	eef0 7a40 	vmov.f32	s15, s0
 800622e:	eeb0 0a67 	vmov.f32	s0, s15
 8006232:	4806      	ldr	r0, [pc, #24]	; (800624c <_Z12MotorPWMTaskiff+0x88>)
 8006234:	f7fe fcf6 	bl	8004c24 <_ZN3PWM6f2DutyEf>
}
 8006238:	bf00      	nop
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20000208 	.word	0x20000208
 8006244:	2000026c 	.word	0x2000026c
 8006248:	2000027c 	.word	0x2000027c
 800624c:	2000028c 	.word	0x2000028c

08006250 <HighFreqTask>:



int argnum = 0;
void HighFreqTask(void){
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b097      	sub	sp, #92	; 0x5c
 8006254:	af00      	add	r7, sp, #0

	if (LL_ADC_IsActiveFlag_JEOS(ADC1) == 1)
 8006256:	483e      	ldr	r0, [pc, #248]	; (8006350 <HighFreqTask+0x100>)
 8006258:	f7ff fef7 	bl	800604a <LL_ADC_IsActiveFlag_JEOS>
 800625c:	4603      	mov	r3, r0
 800625e:	2b01      	cmp	r3, #1
 8006260:	bf0c      	ite	eq
 8006262:	2301      	moveq	r3, #1
 8006264:	2300      	movne	r3, #0
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d068      	beq.n	800633e <HighFreqTask+0xee>
		{
			LL_ADC_ClearFlag_JEOS(ADC1);
 800626c:	4838      	ldr	r0, [pc, #224]	; (8006350 <HighFreqTask+0x100>)
 800626e:	f7ff feff 	bl	8006070 <LL_ADC_ClearFlag_JEOS>
			adc_data1 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1);
 8006272:	2101      	movs	r1, #1
 8006274:	4836      	ldr	r0, [pc, #216]	; (8006350 <HighFreqTask+0x100>)
 8006276:	f7ff fec7 	bl	8006008 <LL_ADC_INJ_ReadConversionData12>
 800627a:	4603      	mov	r3, r0
 800627c:	461a      	mov	r2, r3
 800627e:	4b35      	ldr	r3, [pc, #212]	; (8006354 <HighFreqTask+0x104>)
 8006280:	801a      	strh	r2, [r3, #0]
			adc_data2 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2);
 8006282:	f241 1102 	movw	r1, #4354	; 0x1102
 8006286:	4832      	ldr	r0, [pc, #200]	; (8006350 <HighFreqTask+0x100>)
 8006288:	f7ff febe 	bl	8006008 <LL_ADC_INJ_ReadConversionData12>
 800628c:	4603      	mov	r3, r0
 800628e:	461a      	mov	r2, r3
 8006290:	4b31      	ldr	r3, [pc, #196]	; (8006358 <HighFreqTask+0x108>)
 8006292:	801a      	strh	r2, [r3, #0]
			adc_data3 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3);
 8006294:	f242 2103 	movw	r1, #8707	; 0x2203
 8006298:	482d      	ldr	r0, [pc, #180]	; (8006350 <HighFreqTask+0x100>)
 800629a:	f7ff feb5 	bl	8006008 <LL_ADC_INJ_ReadConversionData12>
 800629e:	4603      	mov	r3, r0
 80062a0:	461a      	mov	r2, r3
 80062a2:	4b2e      	ldr	r3, [pc, #184]	; (800635c <HighFreqTask+0x10c>)
 80062a4:	801a      	strh	r2, [r3, #0]


			//位置センサを叩くTask
			float one_step = (float)2*M_PI / Motor.getMathLib().getLibSize();
 80062a6:	1d3b      	adds	r3, r7, #4
 80062a8:	492d      	ldr	r1, [pc, #180]	; (8006360 <HighFreqTask+0x110>)
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe f82c 	bl	8004308 <_ZN9MotorInfo10getMathLibEv>
 80062b0:	1d3b      	adds	r3, r7, #4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fd f8cc 	bl	8003450 <_ZN7MathLib10getLibSizeEv>
 80062b8:	4603      	mov	r3, r0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fa f8fe 	bl	80004bc <__aeabi_i2d>
 80062c0:	4603      	mov	r3, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	461a      	mov	r2, r3
 80062c6:	4623      	mov	r3, r4
 80062c8:	a11f      	add	r1, pc, #124	; (adr r1, 8006348 <HighFreqTask+0xf8>)
 80062ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ce:	f7fa fa89 	bl	80007e4 <__aeabi_ddiv>
 80062d2:	4603      	mov	r3, r0
 80062d4:	460c      	mov	r4, r1
 80062d6:	4618      	mov	r0, r3
 80062d8:	4621      	mov	r1, r4
 80062da:	f7fa fc31 	bl	8000b40 <__aeabi_d2f>
 80062de:	4603      	mov	r3, r0
 80062e0:	657b      	str	r3, [r7, #84]	; 0x54
 80062e2:	1d3b      	adds	r3, r7, #4
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fd f837 	bl	8003358 <_ZN7MathLibD1Ev>
			sensor.increment(one_step);
 80062ea:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 80062ee:	481d      	ldr	r0, [pc, #116]	; (8006364 <HighFreqTask+0x114>)
 80062f0:	f7fc ffca 	bl	8003288 <_ZN9ArgSensor9incrementEf>
			//float arg = sensor.getArg();

			float Vd_input = 0;
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	653b      	str	r3, [r7, #80]	; 0x50
			float Vq_input = 0.5f;
 80062fa:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80062fe:	64fb      	str	r3, [r7, #76]	; 0x4c

			MotorPWMTask(Motor.getMathLib().radToSizeCount(sensor.getArg()), Vd_input, Vq_input);//暫定で作った関数
 8006300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006304:	4916      	ldr	r1, [pc, #88]	; (8006360 <HighFreqTask+0x110>)
 8006306:	4618      	mov	r0, r3
 8006308:	f7fd fffe 	bl	8004308 <_ZN9MotorInfo10getMathLibEv>
 800630c:	4815      	ldr	r0, [pc, #84]	; (8006364 <HighFreqTask+0x114>)
 800630e:	f7fc ffeb 	bl	80032e8 <_ZN9ArgSensor6getArgEv>
 8006312:	eef0 7a40 	vmov.f32	s15, s0
 8006316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800631a:	eeb0 0a67 	vmov.f32	s0, s15
 800631e:	4618      	mov	r0, r3
 8006320:	f7fd f960 	bl	80035e4 <_ZN7MathLib14radToSizeCountEf>
 8006324:	4603      	mov	r3, r0
 8006326:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 800632a:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ff48 	bl	80061c4 <_Z12MotorPWMTaskiff>
 8006334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006338:	4618      	mov	r0, r3
 800633a:	f7fd f80d 	bl	8003358 <_ZN7MathLibD1Ev>
		{
			LL_ADC_WriteReg(ADC1,ISR,0);
		}*/


}
 800633e:	bf00      	nop
 8006340:	375c      	adds	r7, #92	; 0x5c
 8006342:	46bd      	mov	sp, r7
 8006344:	bd90      	pop	{r4, r7, pc}
 8006346:	bf00      	nop
 8006348:	54442d18 	.word	0x54442d18
 800634c:	401921fb 	.word	0x401921fb
 8006350:	40012000 	.word	0x40012000
 8006354:	20000200 	.word	0x20000200
 8006358:	20000202 	.word	0x20000202
 800635c:	20000204 	.word	0x20000204
 8006360:	20000208 	.word	0x20000208
 8006364:	200002ac 	.word	0x200002ac

08006368 <_Z8ADC_Initv>:


void ADC_Init()
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
    LL_ADC_Enable( ADC1 );
 800636c:	4805      	ldr	r0, [pc, #20]	; (8006384 <_Z8ADC_Initv+0x1c>)
 800636e:	f7ff fe3b 	bl	8005fe8 <LL_ADC_Enable>
    //LL_ADC_Enable( ADC2 );

    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 8006372:	4804      	ldr	r0, [pc, #16]	; (8006384 <_Z8ADC_Initv+0x1c>)
 8006374:	f7ff fe7c 	bl	8006070 <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 8006378:	4802      	ldr	r0, [pc, #8]	; (8006384 <_Z8ADC_Initv+0x1c>)
 800637a:	f7ff fe87 	bl	800608c <LL_ADC_EnableIT_JEOS>
}
 800637e:	bf00      	nop
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40012000 	.word	0x40012000

08006388 <_Z41__static_initialization_and_destruction_0ii>:
	//Str.push_back(buf2);
	UART uartob;
	uartob.setString(Str);
	uartob.Transmit();
	//HAL_UART_Transmit(huart, pData, Size, Timeout);
}
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d116      	bne.n	80063c6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800639e:	4293      	cmp	r3, r2
 80063a0:	d111      	bne.n	80063c6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
MotorInfo Motor;
 80063a2:	4812      	ldr	r0, [pc, #72]	; (80063ec <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80063a4:	f7fd ff1e 	bl	80041e4 <_ZN9MotorInfoC1Ev>
PWM PWM_Object1;
 80063a8:	4811      	ldr	r0, [pc, #68]	; (80063f0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80063aa:	f7ff fe7f 	bl	80060ac <_ZN3PWMC1Ev>
PWM PWM_Object2;
 80063ae:	4811      	ldr	r0, [pc, #68]	; (80063f4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80063b0:	f7ff fe7c 	bl	80060ac <_ZN3PWMC1Ev>
PWM PWM_Object3;
 80063b4:	4810      	ldr	r0, [pc, #64]	; (80063f8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80063b6:	f7ff fe79 	bl	80060ac <_ZN3PWMC1Ev>
PWM PWM_Object4;
 80063ba:	4810      	ldr	r0, [pc, #64]	; (80063fc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80063bc:	f7ff fe76 	bl	80060ac <_ZN3PWMC1Ev>
ArgSensor sensor;
 80063c0:	480f      	ldr	r0, [pc, #60]	; (8006400 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80063c2:	f7fc ff2d 	bl	8003220 <_ZN9ArgSensorC1Ev>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d105      	bne.n	80063e2 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80063d6:	480a      	ldr	r0, [pc, #40]	; (8006400 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80063d8:	f7fc ff36 	bl	8003248 <_ZN9ArgSensorD1Ev>
MotorInfo Motor;
 80063dc:	4803      	ldr	r0, [pc, #12]	; (80063ec <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80063de:	f7fd ff15 	bl	800420c <_ZN9MotorInfoD1Ev>
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000208 	.word	0x20000208
 80063f0:	2000026c 	.word	0x2000026c
 80063f4:	2000027c 	.word	0x2000027c
 80063f8:	2000028c 	.word	0x2000028c
 80063fc:	2000029c 	.word	0x2000029c
 8006400:	200002ac 	.word	0x200002ac

08006404 <_GLOBAL__sub_I_adc_data1>:
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
 8006408:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800640c:	2001      	movs	r0, #1
 800640e:	f7ff ffbb 	bl	8006388 <_Z41__static_initialization_and_destruction_0ii>
 8006412:	bd80      	pop	{r7, pc}

08006414 <_GLOBAL__sub_D_adc_data1>:
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
 8006418:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800641c:	2000      	movs	r0, #0
 800641e:	f7ff ffb3 	bl	8006388 <_Z41__static_initialization_and_destruction_0ii>
 8006422:	bd80      	pop	{r7, pc}

08006424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800645c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006428:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800642a:	e003      	b.n	8006434 <LoopCopyDataInit>

0800642c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800642c:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800642e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006430:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006432:	3104      	adds	r1, #4

08006434 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006434:	480b      	ldr	r0, [pc, #44]	; (8006464 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006436:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006438:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800643a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800643c:	d3f6      	bcc.n	800642c <CopyDataInit>
  ldr  r2, =_sbss
 800643e:	4a0b      	ldr	r2, [pc, #44]	; (800646c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006440:	e002      	b.n	8006448 <LoopFillZerobss>

08006442 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006442:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006444:	f842 3b04 	str.w	r3, [r2], #4

08006448 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800644a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800644c:	d3f9      	bcc.n	8006442 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800644e:	f7ff fa4d 	bl	80058ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006452:	f001 fac1 	bl	80079d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006456:	f7ff f903 	bl	8005660 <main>
  bx  lr    
 800645a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800645c:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8006460:	08009b60 	.word	0x08009b60
  ldr  r0, =_sdata
 8006464:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006468:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800646c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006470:	20000308 	.word	0x20000308

08006474 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006474:	e7fe      	b.n	8006474 <CAN1_RX0_IRQHandler>

08006476 <_ZdlPv>:
 8006476:	f001 badb 	b.w	8007a30 <free>

0800647a <_ZdlPvj>:
 800647a:	f7ff bffc 	b.w	8006476 <_ZdlPv>

0800647e <_Znwj>:
 800647e:	b510      	push	{r4, lr}
 8006480:	2800      	cmp	r0, #0
 8006482:	bf14      	ite	ne
 8006484:	4604      	movne	r4, r0
 8006486:	2401      	moveq	r4, #1
 8006488:	4620      	mov	r0, r4
 800648a:	f001 fac9 	bl	8007a20 <malloc>
 800648e:	b930      	cbnz	r0, 800649e <_Znwj+0x20>
 8006490:	f000 f8ba 	bl	8006608 <_ZSt15get_new_handlerv>
 8006494:	b908      	cbnz	r0, 800649a <_Znwj+0x1c>
 8006496:	f001 fa92 	bl	80079be <abort>
 800649a:	4780      	blx	r0
 800649c:	e7f4      	b.n	8006488 <_Znwj+0xa>
 800649e:	bd10      	pop	{r4, pc}

080064a0 <fmodl>:
 80064a0:	f000 ba4e 	b.w	8006940 <fmod>

080064a4 <_ZSt17__throw_bad_allocv>:
 80064a4:	b508      	push	{r3, lr}
 80064a6:	f001 fa8a 	bl	80079be <abort>

080064aa <_ZSt19__throw_logic_errorPKc>:
 80064aa:	b508      	push	{r3, lr}
 80064ac:	f001 fa87 	bl	80079be <abort>

080064b0 <_ZSt20__throw_length_errorPKc>:
 80064b0:	b508      	push	{r3, lr}
 80064b2:	f001 fa84 	bl	80079be <abort>

080064b6 <_ZSt24__throw_out_of_range_fmtPKcz>:
 80064b6:	b40f      	push	{r0, r1, r2, r3}
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	f107 0410 	add.w	r4, r7, #16
 80064c2:	f854 5b04 	ldr.w	r5, [r4], #4
 80064c6:	4628      	mov	r0, r5
 80064c8:	f7f9 fe9e 	bl	8000208 <strlen>
 80064cc:	f200 230e 	addw	r3, r0, #526	; 0x20e
 80064d0:	f023 0307 	bic.w	r3, r3, #7
 80064d4:	ebad 0d03 	sub.w	sp, sp, r3
 80064d8:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80064dc:	4623      	mov	r3, r4
 80064de:	462a      	mov	r2, r5
 80064e0:	4668      	mov	r0, sp
 80064e2:	607c      	str	r4, [r7, #4]
 80064e4:	f000 f850 	bl	8006588 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80064e8:	f001 fa69 	bl	80079be <abort>

080064ec <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b09c      	sub	sp, #112	; 0x70
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	1a0e      	subs	r6, r1, r0
 80064f4:	4680      	mov	r8, r0
 80064f6:	2269      	movs	r2, #105	; 0x69
 80064f8:	490e      	ldr	r1, [pc, #56]	; (8006534 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80064fa:	1d38      	adds	r0, r7, #4
 80064fc:	f001 faa0 	bl	8007a40 <memcpy>
 8006500:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8006504:	f023 0307 	bic.w	r3, r3, #7
 8006508:	ebad 0d03 	sub.w	sp, sp, r3
 800650c:	466c      	mov	r4, sp
 800650e:	2268      	movs	r2, #104	; 0x68
 8006510:	1d39      	adds	r1, r7, #4
 8006512:	1c75      	adds	r5, r6, #1
 8006514:	4620      	mov	r0, r4
 8006516:	f001 fa93 	bl	8007a40 <memcpy>
 800651a:	4425      	add	r5, r4
 800651c:	4632      	mov	r2, r6
 800651e:	4641      	mov	r1, r8
 8006520:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006524:	f001 fa8c 	bl	8007a40 <memcpy>
 8006528:	2300      	movs	r3, #0
 800652a:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 800652e:	4620      	mov	r0, r4
 8006530:	f7ff ffbb 	bl	80064aa <_ZSt19__throw_logic_errorPKc>
 8006534:	080096ca 	.word	0x080096ca

08006538 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	af00      	add	r7, sp, #0
 800653c:	b086      	sub	sp, #24
 800653e:	466d      	mov	r5, sp
 8006540:	f105 040c 	add.w	r4, r5, #12
 8006544:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8006584 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8006548:	4623      	mov	r3, r4
 800654a:	f04f 0c0a 	mov.w	ip, #10
 800654e:	fbb2 f6fc 	udiv	r6, r2, ip
 8006552:	fb0c 2216 	mls	r2, ip, r6, r2
 8006556:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800655a:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800655e:	4632      	mov	r2, r6
 8006560:	2e00      	cmp	r6, #0
 8006562:	d1f4      	bne.n	800654e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8006564:	1ae4      	subs	r4, r4, r3
 8006566:	428c      	cmp	r4, r1
 8006568:	d808      	bhi.n	800657c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800656a:	f1c4 010c 	rsb	r1, r4, #12
 800656e:	4622      	mov	r2, r4
 8006570:	4429      	add	r1, r5
 8006572:	f001 fa65 	bl	8007a40 <memcpy>
 8006576:	4620      	mov	r0, r4
 8006578:	46bd      	mov	sp, r7
 800657a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800657c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006580:	e7f9      	b.n	8006576 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8006582:	bf00      	nop
 8006584:	080096bf 	.word	0x080096bf

08006588 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8006588:	3901      	subs	r1, #1
 800658a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800658e:	4606      	mov	r6, r0
 8006590:	4615      	mov	r5, r2
 8006592:	1847      	adds	r7, r0, r1
 8006594:	4604      	mov	r4, r0
 8006596:	782a      	ldrb	r2, [r5, #0]
 8006598:	b392      	cbz	r2, 8006600 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 800659a:	42bc      	cmp	r4, r7
 800659c:	d22c      	bcs.n	80065f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800659e:	2a25      	cmp	r2, #37	; 0x25
 80065a0:	d107      	bne.n	80065b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80065a2:	786a      	ldrb	r2, [r5, #1]
 80065a4:	2a73      	cmp	r2, #115	; 0x73
 80065a6:	d009      	beq.n	80065bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 80065a8:	2a7a      	cmp	r2, #122	; 0x7a
 80065aa:	d012      	beq.n	80065d2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 80065ac:	2a25      	cmp	r2, #37	; 0x25
 80065ae:	d100      	bne.n	80065b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80065b0:	3501      	adds	r5, #1
 80065b2:	782a      	ldrb	r2, [r5, #0]
 80065b4:	7022      	strb	r2, [r4, #0]
 80065b6:	3501      	adds	r5, #1
 80065b8:	3401      	adds	r4, #1
 80065ba:	e7ec      	b.n	8006596 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80065bc:	1d19      	adds	r1, r3, #4
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80065c6:	b1a2      	cbz	r2, 80065f2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 80065c8:	42bc      	cmp	r4, r7
 80065ca:	d015      	beq.n	80065f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80065cc:	f804 2b01 	strb.w	r2, [r4], #1
 80065d0:	e7f7      	b.n	80065c2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 80065d2:	78aa      	ldrb	r2, [r5, #2]
 80065d4:	2a75      	cmp	r2, #117	; 0x75
 80065d6:	d1ec      	bne.n	80065b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	1b39      	subs	r1, r7, r4
 80065dc:	4620      	mov	r0, r4
 80065de:	f103 0804 	add.w	r8, r3, #4
 80065e2:	f7ff ffa9 	bl	8006538 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	dd06      	ble.n	80065f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80065ea:	4404      	add	r4, r0
 80065ec:	3503      	adds	r5, #3
 80065ee:	4643      	mov	r3, r8
 80065f0:	e7d1      	b.n	8006596 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80065f2:	3502      	adds	r5, #2
 80065f4:	460b      	mov	r3, r1
 80065f6:	e7ce      	b.n	8006596 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80065f8:	4621      	mov	r1, r4
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7ff ff76 	bl	80064ec <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8006600:	7022      	strb	r2, [r4, #0]
 8006602:	1ba0      	subs	r0, r4, r6
 8006604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006608 <_ZSt15get_new_handlerv>:
 8006608:	4b02      	ldr	r3, [pc, #8]	; (8006614 <_ZSt15get_new_handlerv+0xc>)
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	f3bf 8f5b 	dmb	ish
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	200002b4 	.word	0x200002b4

08006618 <cos>:
 8006618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800661a:	ec51 0b10 	vmov	r0, r1, d0
 800661e:	4a1e      	ldr	r2, [pc, #120]	; (8006698 <cos+0x80>)
 8006620:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006624:	4293      	cmp	r3, r2
 8006626:	dc06      	bgt.n	8006636 <cos+0x1e>
 8006628:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006690 <cos+0x78>
 800662c:	f000 fcf4 	bl	8007018 <__kernel_cos>
 8006630:	ec51 0b10 	vmov	r0, r1, d0
 8006634:	e007      	b.n	8006646 <cos+0x2e>
 8006636:	4a19      	ldr	r2, [pc, #100]	; (800669c <cos+0x84>)
 8006638:	4293      	cmp	r3, r2
 800663a:	dd09      	ble.n	8006650 <cos+0x38>
 800663c:	ee10 2a10 	vmov	r2, s0
 8006640:	460b      	mov	r3, r1
 8006642:	f7f9 fded 	bl	8000220 <__aeabi_dsub>
 8006646:	ec41 0b10 	vmov	d0, r0, r1
 800664a:	b005      	add	sp, #20
 800664c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006650:	4668      	mov	r0, sp
 8006652:	f000 faed 	bl	8006c30 <__ieee754_rem_pio2>
 8006656:	f000 0003 	and.w	r0, r0, #3
 800665a:	2801      	cmp	r0, #1
 800665c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006660:	ed9d 0b00 	vldr	d0, [sp]
 8006664:	d007      	beq.n	8006676 <cos+0x5e>
 8006666:	2802      	cmp	r0, #2
 8006668:	d00e      	beq.n	8006688 <cos+0x70>
 800666a:	2800      	cmp	r0, #0
 800666c:	d0de      	beq.n	800662c <cos+0x14>
 800666e:	2001      	movs	r0, #1
 8006670:	f001 f8da 	bl	8007828 <__kernel_sin>
 8006674:	e7dc      	b.n	8006630 <cos+0x18>
 8006676:	f001 f8d7 	bl	8007828 <__kernel_sin>
 800667a:	ec53 2b10 	vmov	r2, r3, d0
 800667e:	ee10 0a10 	vmov	r0, s0
 8006682:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006686:	e7de      	b.n	8006646 <cos+0x2e>
 8006688:	f000 fcc6 	bl	8007018 <__kernel_cos>
 800668c:	e7f5      	b.n	800667a <cos+0x62>
 800668e:	bf00      	nop
	...
 8006698:	3fe921fb 	.word	0x3fe921fb
 800669c:	7fefffff 	.word	0x7fefffff

080066a0 <fabs>:
 80066a0:	ec51 0b10 	vmov	r0, r1, d0
 80066a4:	ee10 2a10 	vmov	r2, s0
 80066a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066ac:	ec43 2b10 	vmov	d0, r2, r3
 80066b0:	4770      	bx	lr
 80066b2:	0000      	movs	r0, r0
 80066b4:	0000      	movs	r0, r0
	...

080066b8 <floor>:
 80066b8:	ec51 0b10 	vmov	r0, r1, d0
 80066bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80066c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80066c8:	2e13      	cmp	r6, #19
 80066ca:	460c      	mov	r4, r1
 80066cc:	ee10 5a10 	vmov	r5, s0
 80066d0:	4680      	mov	r8, r0
 80066d2:	dc34      	bgt.n	800673e <floor+0x86>
 80066d4:	2e00      	cmp	r6, #0
 80066d6:	da16      	bge.n	8006706 <floor+0x4e>
 80066d8:	a335      	add	r3, pc, #212	; (adr r3, 80067b0 <floor+0xf8>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f7f9 fda1 	bl	8000224 <__adddf3>
 80066e2:	2200      	movs	r2, #0
 80066e4:	2300      	movs	r3, #0
 80066e6:	f7fa f9e3 	bl	8000ab0 <__aeabi_dcmpgt>
 80066ea:	b148      	cbz	r0, 8006700 <floor+0x48>
 80066ec:	2c00      	cmp	r4, #0
 80066ee:	da59      	bge.n	80067a4 <floor+0xec>
 80066f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80066f4:	4a30      	ldr	r2, [pc, #192]	; (80067b8 <floor+0x100>)
 80066f6:	432b      	orrs	r3, r5
 80066f8:	2500      	movs	r5, #0
 80066fa:	42ab      	cmp	r3, r5
 80066fc:	bf18      	it	ne
 80066fe:	4614      	movne	r4, r2
 8006700:	4621      	mov	r1, r4
 8006702:	4628      	mov	r0, r5
 8006704:	e025      	b.n	8006752 <floor+0x9a>
 8006706:	4f2d      	ldr	r7, [pc, #180]	; (80067bc <floor+0x104>)
 8006708:	4137      	asrs	r7, r6
 800670a:	ea01 0307 	and.w	r3, r1, r7
 800670e:	4303      	orrs	r3, r0
 8006710:	d01f      	beq.n	8006752 <floor+0x9a>
 8006712:	a327      	add	r3, pc, #156	; (adr r3, 80067b0 <floor+0xf8>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f7f9 fd84 	bl	8000224 <__adddf3>
 800671c:	2200      	movs	r2, #0
 800671e:	2300      	movs	r3, #0
 8006720:	f7fa f9c6 	bl	8000ab0 <__aeabi_dcmpgt>
 8006724:	2800      	cmp	r0, #0
 8006726:	d0eb      	beq.n	8006700 <floor+0x48>
 8006728:	2c00      	cmp	r4, #0
 800672a:	bfbe      	ittt	lt
 800672c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006730:	fa43 f606 	asrlt.w	r6, r3, r6
 8006734:	19a4      	addlt	r4, r4, r6
 8006736:	ea24 0407 	bic.w	r4, r4, r7
 800673a:	2500      	movs	r5, #0
 800673c:	e7e0      	b.n	8006700 <floor+0x48>
 800673e:	2e33      	cmp	r6, #51	; 0x33
 8006740:	dd0b      	ble.n	800675a <floor+0xa2>
 8006742:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006746:	d104      	bne.n	8006752 <floor+0x9a>
 8006748:	ee10 2a10 	vmov	r2, s0
 800674c:	460b      	mov	r3, r1
 800674e:	f7f9 fd69 	bl	8000224 <__adddf3>
 8006752:	ec41 0b10 	vmov	d0, r0, r1
 8006756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800675a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800675e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006762:	fa23 f707 	lsr.w	r7, r3, r7
 8006766:	4207      	tst	r7, r0
 8006768:	d0f3      	beq.n	8006752 <floor+0x9a>
 800676a:	a311      	add	r3, pc, #68	; (adr r3, 80067b0 <floor+0xf8>)
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f7f9 fd58 	bl	8000224 <__adddf3>
 8006774:	2200      	movs	r2, #0
 8006776:	2300      	movs	r3, #0
 8006778:	f7fa f99a 	bl	8000ab0 <__aeabi_dcmpgt>
 800677c:	2800      	cmp	r0, #0
 800677e:	d0bf      	beq.n	8006700 <floor+0x48>
 8006780:	2c00      	cmp	r4, #0
 8006782:	da02      	bge.n	800678a <floor+0xd2>
 8006784:	2e14      	cmp	r6, #20
 8006786:	d103      	bne.n	8006790 <floor+0xd8>
 8006788:	3401      	adds	r4, #1
 800678a:	ea25 0507 	bic.w	r5, r5, r7
 800678e:	e7b7      	b.n	8006700 <floor+0x48>
 8006790:	2301      	movs	r3, #1
 8006792:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006796:	fa03 f606 	lsl.w	r6, r3, r6
 800679a:	4435      	add	r5, r6
 800679c:	4545      	cmp	r5, r8
 800679e:	bf38      	it	cc
 80067a0:	18e4      	addcc	r4, r4, r3
 80067a2:	e7f2      	b.n	800678a <floor+0xd2>
 80067a4:	2500      	movs	r5, #0
 80067a6:	462c      	mov	r4, r5
 80067a8:	e7aa      	b.n	8006700 <floor+0x48>
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w
 80067b0:	8800759c 	.word	0x8800759c
 80067b4:	7e37e43c 	.word	0x7e37e43c
 80067b8:	bff00000 	.word	0xbff00000
 80067bc:	000fffff 	.word	0x000fffff

080067c0 <scalbn>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	ec55 4b10 	vmov	r4, r5, d0
 80067c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80067ca:	4606      	mov	r6, r0
 80067cc:	462b      	mov	r3, r5
 80067ce:	b9aa      	cbnz	r2, 80067fc <scalbn+0x3c>
 80067d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80067d4:	4323      	orrs	r3, r4
 80067d6:	d03b      	beq.n	8006850 <scalbn+0x90>
 80067d8:	4b31      	ldr	r3, [pc, #196]	; (80068a0 <scalbn+0xe0>)
 80067da:	4629      	mov	r1, r5
 80067dc:	2200      	movs	r2, #0
 80067de:	ee10 0a10 	vmov	r0, s0
 80067e2:	f7f9 fed5 	bl	8000590 <__aeabi_dmul>
 80067e6:	4b2f      	ldr	r3, [pc, #188]	; (80068a4 <scalbn+0xe4>)
 80067e8:	429e      	cmp	r6, r3
 80067ea:	4604      	mov	r4, r0
 80067ec:	460d      	mov	r5, r1
 80067ee:	da12      	bge.n	8006816 <scalbn+0x56>
 80067f0:	a327      	add	r3, pc, #156	; (adr r3, 8006890 <scalbn+0xd0>)
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f7f9 fecb 	bl	8000590 <__aeabi_dmul>
 80067fa:	e009      	b.n	8006810 <scalbn+0x50>
 80067fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006800:	428a      	cmp	r2, r1
 8006802:	d10c      	bne.n	800681e <scalbn+0x5e>
 8006804:	ee10 2a10 	vmov	r2, s0
 8006808:	4620      	mov	r0, r4
 800680a:	4629      	mov	r1, r5
 800680c:	f7f9 fd0a 	bl	8000224 <__adddf3>
 8006810:	4604      	mov	r4, r0
 8006812:	460d      	mov	r5, r1
 8006814:	e01c      	b.n	8006850 <scalbn+0x90>
 8006816:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800681a:	460b      	mov	r3, r1
 800681c:	3a36      	subs	r2, #54	; 0x36
 800681e:	4432      	add	r2, r6
 8006820:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006824:	428a      	cmp	r2, r1
 8006826:	dd0b      	ble.n	8006840 <scalbn+0x80>
 8006828:	ec45 4b11 	vmov	d1, r4, r5
 800682c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006898 <scalbn+0xd8>
 8006830:	f001 f8b4 	bl	800799c <copysign>
 8006834:	a318      	add	r3, pc, #96	; (adr r3, 8006898 <scalbn+0xd8>)
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	ec51 0b10 	vmov	r0, r1, d0
 800683e:	e7da      	b.n	80067f6 <scalbn+0x36>
 8006840:	2a00      	cmp	r2, #0
 8006842:	dd08      	ble.n	8006856 <scalbn+0x96>
 8006844:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006848:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800684c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006850:	ec45 4b10 	vmov	d0, r4, r5
 8006854:	bd70      	pop	{r4, r5, r6, pc}
 8006856:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800685a:	da0d      	bge.n	8006878 <scalbn+0xb8>
 800685c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006860:	429e      	cmp	r6, r3
 8006862:	ec45 4b11 	vmov	d1, r4, r5
 8006866:	dce1      	bgt.n	800682c <scalbn+0x6c>
 8006868:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006890 <scalbn+0xd0>
 800686c:	f001 f896 	bl	800799c <copysign>
 8006870:	a307      	add	r3, pc, #28	; (adr r3, 8006890 <scalbn+0xd0>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	e7e0      	b.n	800683a <scalbn+0x7a>
 8006878:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800687c:	3236      	adds	r2, #54	; 0x36
 800687e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006882:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006886:	4620      	mov	r0, r4
 8006888:	4629      	mov	r1, r5
 800688a:	2200      	movs	r2, #0
 800688c:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <scalbn+0xe8>)
 800688e:	e7b2      	b.n	80067f6 <scalbn+0x36>
 8006890:	c2f8f359 	.word	0xc2f8f359
 8006894:	01a56e1f 	.word	0x01a56e1f
 8006898:	8800759c 	.word	0x8800759c
 800689c:	7e37e43c 	.word	0x7e37e43c
 80068a0:	43500000 	.word	0x43500000
 80068a4:	ffff3cb0 	.word	0xffff3cb0
 80068a8:	3c900000 	.word	0x3c900000
 80068ac:	00000000 	.word	0x00000000

080068b0 <sin>:
 80068b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068b2:	ec51 0b10 	vmov	r0, r1, d0
 80068b6:	4a20      	ldr	r2, [pc, #128]	; (8006938 <sin+0x88>)
 80068b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80068bc:	4293      	cmp	r3, r2
 80068be:	dc07      	bgt.n	80068d0 <sin+0x20>
 80068c0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006930 <sin+0x80>
 80068c4:	2000      	movs	r0, #0
 80068c6:	f000 ffaf 	bl	8007828 <__kernel_sin>
 80068ca:	ec51 0b10 	vmov	r0, r1, d0
 80068ce:	e007      	b.n	80068e0 <sin+0x30>
 80068d0:	4a1a      	ldr	r2, [pc, #104]	; (800693c <sin+0x8c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	dd09      	ble.n	80068ea <sin+0x3a>
 80068d6:	ee10 2a10 	vmov	r2, s0
 80068da:	460b      	mov	r3, r1
 80068dc:	f7f9 fca0 	bl	8000220 <__aeabi_dsub>
 80068e0:	ec41 0b10 	vmov	d0, r0, r1
 80068e4:	b005      	add	sp, #20
 80068e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80068ea:	4668      	mov	r0, sp
 80068ec:	f000 f9a0 	bl	8006c30 <__ieee754_rem_pio2>
 80068f0:	f000 0003 	and.w	r0, r0, #3
 80068f4:	2801      	cmp	r0, #1
 80068f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068fa:	ed9d 0b00 	vldr	d0, [sp]
 80068fe:	d004      	beq.n	800690a <sin+0x5a>
 8006900:	2802      	cmp	r0, #2
 8006902:	d005      	beq.n	8006910 <sin+0x60>
 8006904:	b970      	cbnz	r0, 8006924 <sin+0x74>
 8006906:	2001      	movs	r0, #1
 8006908:	e7dd      	b.n	80068c6 <sin+0x16>
 800690a:	f000 fb85 	bl	8007018 <__kernel_cos>
 800690e:	e7dc      	b.n	80068ca <sin+0x1a>
 8006910:	2001      	movs	r0, #1
 8006912:	f000 ff89 	bl	8007828 <__kernel_sin>
 8006916:	ec53 2b10 	vmov	r2, r3, d0
 800691a:	ee10 0a10 	vmov	r0, s0
 800691e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006922:	e7dd      	b.n	80068e0 <sin+0x30>
 8006924:	f000 fb78 	bl	8007018 <__kernel_cos>
 8006928:	e7f5      	b.n	8006916 <sin+0x66>
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w
	...
 8006938:	3fe921fb 	.word	0x3fe921fb
 800693c:	7fefffff 	.word	0x7fefffff

08006940 <fmod>:
 8006940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006944:	ed2d 8b02 	vpush	{d8}
 8006948:	b08b      	sub	sp, #44	; 0x2c
 800694a:	ec55 4b10 	vmov	r4, r5, d0
 800694e:	ec57 6b11 	vmov	r6, r7, d1
 8006952:	f000 f859 	bl	8006a08 <__ieee754_fmod>
 8006956:	4b2a      	ldr	r3, [pc, #168]	; (8006a00 <fmod+0xc0>)
 8006958:	eeb0 8a40 	vmov.f32	s16, s0
 800695c:	eef0 8a60 	vmov.f32	s17, s1
 8006960:	f993 8000 	ldrsb.w	r8, [r3]
 8006964:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8006968:	d030      	beq.n	80069cc <fmod+0x8c>
 800696a:	4632      	mov	r2, r6
 800696c:	463b      	mov	r3, r7
 800696e:	4630      	mov	r0, r6
 8006970:	4639      	mov	r1, r7
 8006972:	f7fa f8a7 	bl	8000ac4 <__aeabi_dcmpun>
 8006976:	bb48      	cbnz	r0, 80069cc <fmod+0x8c>
 8006978:	4622      	mov	r2, r4
 800697a:	462b      	mov	r3, r5
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7fa f8a0 	bl	8000ac4 <__aeabi_dcmpun>
 8006984:	4681      	mov	r9, r0
 8006986:	bb08      	cbnz	r0, 80069cc <fmod+0x8c>
 8006988:	2200      	movs	r2, #0
 800698a:	2300      	movs	r3, #0
 800698c:	4630      	mov	r0, r6
 800698e:	4639      	mov	r1, r7
 8006990:	f7fa f866 	bl	8000a60 <__aeabi_dcmpeq>
 8006994:	b1d0      	cbz	r0, 80069cc <fmod+0x8c>
 8006996:	2301      	movs	r3, #1
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	4b1a      	ldr	r3, [pc, #104]	; (8006a04 <fmod+0xc4>)
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80069a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80069a6:	f8cd 9020 	str.w	r9, [sp, #32]
 80069aa:	f1b8 0f00 	cmp.w	r8, #0
 80069ae:	d116      	bne.n	80069de <fmod+0x9e>
 80069b0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80069b4:	4668      	mov	r0, sp
 80069b6:	f001 f800 	bl	80079ba <matherr>
 80069ba:	b1d8      	cbz	r0, 80069f4 <fmod+0xb4>
 80069bc:	9b08      	ldr	r3, [sp, #32]
 80069be:	b11b      	cbz	r3, 80069c8 <fmod+0x88>
 80069c0:	f001 f804 	bl	80079cc <__errno>
 80069c4:	9b08      	ldr	r3, [sp, #32]
 80069c6:	6003      	str	r3, [r0, #0]
 80069c8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80069cc:	eeb0 0a48 	vmov.f32	s0, s16
 80069d0:	eef0 0a68 	vmov.f32	s1, s17
 80069d4:	b00b      	add	sp, #44	; 0x2c
 80069d6:	ecbd 8b02 	vpop	{d8}
 80069da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069de:	2200      	movs	r2, #0
 80069e0:	2300      	movs	r3, #0
 80069e2:	4610      	mov	r0, r2
 80069e4:	4619      	mov	r1, r3
 80069e6:	f7f9 fefd 	bl	80007e4 <__aeabi_ddiv>
 80069ea:	f1b8 0f02 	cmp.w	r8, #2
 80069ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069f2:	d1df      	bne.n	80069b4 <fmod+0x74>
 80069f4:	f000 ffea 	bl	80079cc <__errno>
 80069f8:	2321      	movs	r3, #33	; 0x21
 80069fa:	6003      	str	r3, [r0, #0]
 80069fc:	e7de      	b.n	80069bc <fmod+0x7c>
 80069fe:	bf00      	nop
 8006a00:	2000000c 	.word	0x2000000c
 8006a04:	08009733 	.word	0x08009733

08006a08 <__ieee754_fmod>:
 8006a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a0c:	ec53 2b11 	vmov	r2, r3, d1
 8006a10:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8006a14:	ea5e 0402 	orrs.w	r4, lr, r2
 8006a18:	ec51 0b10 	vmov	r0, r1, d0
 8006a1c:	461e      	mov	r6, r3
 8006a1e:	ee11 5a10 	vmov	r5, s2
 8006a22:	4694      	mov	ip, r2
 8006a24:	d00c      	beq.n	8006a40 <__ieee754_fmod+0x38>
 8006a26:	4c7a      	ldr	r4, [pc, #488]	; (8006c10 <__ieee754_fmod+0x208>)
 8006a28:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8006a2c:	45a0      	cmp	r8, r4
 8006a2e:	4689      	mov	r9, r1
 8006a30:	dc06      	bgt.n	8006a40 <__ieee754_fmod+0x38>
 8006a32:	4254      	negs	r4, r2
 8006a34:	4314      	orrs	r4, r2
 8006a36:	4f77      	ldr	r7, [pc, #476]	; (8006c14 <__ieee754_fmod+0x20c>)
 8006a38:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8006a3c:	42bc      	cmp	r4, r7
 8006a3e:	d909      	bls.n	8006a54 <__ieee754_fmod+0x4c>
 8006a40:	f7f9 fda6 	bl	8000590 <__aeabi_dmul>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	f7f9 fecc 	bl	80007e4 <__aeabi_ddiv>
 8006a4c:	ec41 0b10 	vmov	d0, r0, r1
 8006a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a54:	45f0      	cmp	r8, lr
 8006a56:	ee10 2a10 	vmov	r2, s0
 8006a5a:	4607      	mov	r7, r0
 8006a5c:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8006a60:	dc0a      	bgt.n	8006a78 <__ieee754_fmod+0x70>
 8006a62:	dbf3      	blt.n	8006a4c <__ieee754_fmod+0x44>
 8006a64:	42a8      	cmp	r0, r5
 8006a66:	d3f1      	bcc.n	8006a4c <__ieee754_fmod+0x44>
 8006a68:	d106      	bne.n	8006a78 <__ieee754_fmod+0x70>
 8006a6a:	496b      	ldr	r1, [pc, #428]	; (8006c18 <__ieee754_fmod+0x210>)
 8006a6c:	0fe4      	lsrs	r4, r4, #31
 8006a6e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8006a72:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006a76:	e7e9      	b.n	8006a4c <__ieee754_fmod+0x44>
 8006a78:	4b68      	ldr	r3, [pc, #416]	; (8006c1c <__ieee754_fmod+0x214>)
 8006a7a:	4598      	cmp	r8, r3
 8006a7c:	dc49      	bgt.n	8006b12 <__ieee754_fmod+0x10a>
 8006a7e:	f1b8 0f00 	cmp.w	r8, #0
 8006a82:	d13d      	bne.n	8006b00 <__ieee754_fmod+0xf8>
 8006a84:	4866      	ldr	r0, [pc, #408]	; (8006c20 <__ieee754_fmod+0x218>)
 8006a86:	4611      	mov	r1, r2
 8006a88:	2900      	cmp	r1, #0
 8006a8a:	dc36      	bgt.n	8006afa <__ieee754_fmod+0xf2>
 8006a8c:	459e      	cmp	lr, r3
 8006a8e:	dc51      	bgt.n	8006b34 <__ieee754_fmod+0x12c>
 8006a90:	f1be 0f00 	cmp.w	lr, #0
 8006a94:	d145      	bne.n	8006b22 <__ieee754_fmod+0x11a>
 8006a96:	4b62      	ldr	r3, [pc, #392]	; (8006c20 <__ieee754_fmod+0x218>)
 8006a98:	4629      	mov	r1, r5
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	dc3e      	bgt.n	8006b1c <__ieee754_fmod+0x114>
 8006a9e:	4961      	ldr	r1, [pc, #388]	; (8006c24 <__ieee754_fmod+0x21c>)
 8006aa0:	4288      	cmp	r0, r1
 8006aa2:	db4c      	blt.n	8006b3e <__ieee754_fmod+0x136>
 8006aa4:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8006aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006aac:	4a5d      	ldr	r2, [pc, #372]	; (8006c24 <__ieee754_fmod+0x21c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	db59      	blt.n	8006b66 <__ieee754_fmod+0x15e>
 8006ab2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8006ab6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8006aba:	1ac0      	subs	r0, r0, r3
 8006abc:	1b8a      	subs	r2, r1, r6
 8006abe:	eba7 050c 	sub.w	r5, r7, ip
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d166      	bne.n	8006b94 <__ieee754_fmod+0x18c>
 8006ac6:	4567      	cmp	r7, ip
 8006ac8:	bf38      	it	cc
 8006aca:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8006ace:	2a00      	cmp	r2, #0
 8006ad0:	bfbc      	itt	lt
 8006ad2:	463d      	movlt	r5, r7
 8006ad4:	460a      	movlt	r2, r1
 8006ad6:	ea52 0105 	orrs.w	r1, r2, r5
 8006ada:	d0c6      	beq.n	8006a6a <__ieee754_fmod+0x62>
 8006adc:	494f      	ldr	r1, [pc, #316]	; (8006c1c <__ieee754_fmod+0x214>)
 8006ade:	428a      	cmp	r2, r1
 8006ae0:	dd6d      	ble.n	8006bbe <__ieee754_fmod+0x1b6>
 8006ae2:	4950      	ldr	r1, [pc, #320]	; (8006c24 <__ieee754_fmod+0x21c>)
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	db70      	blt.n	8006bca <__ieee754_fmod+0x1c2>
 8006ae8:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8006aec:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8006af0:	4314      	orrs	r4, r2
 8006af2:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8006af6:	4628      	mov	r0, r5
 8006af8:	e7a8      	b.n	8006a4c <__ieee754_fmod+0x44>
 8006afa:	3801      	subs	r0, #1
 8006afc:	0049      	lsls	r1, r1, #1
 8006afe:	e7c3      	b.n	8006a88 <__ieee754_fmod+0x80>
 8006b00:	4848      	ldr	r0, [pc, #288]	; (8006c24 <__ieee754_fmod+0x21c>)
 8006b02:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8006b06:	0049      	lsls	r1, r1, #1
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8006b0e:	dcfa      	bgt.n	8006b06 <__ieee754_fmod+0xfe>
 8006b10:	e7bc      	b.n	8006a8c <__ieee754_fmod+0x84>
 8006b12:	ea4f 5028 	mov.w	r0, r8, asr #20
 8006b16:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8006b1a:	e7b7      	b.n	8006a8c <__ieee754_fmod+0x84>
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	0049      	lsls	r1, r1, #1
 8006b20:	e7bb      	b.n	8006a9a <__ieee754_fmod+0x92>
 8006b22:	4b40      	ldr	r3, [pc, #256]	; (8006c24 <__ieee754_fmod+0x21c>)
 8006b24:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8006b28:	0049      	lsls	r1, r1, #1
 8006b2a:	2900      	cmp	r1, #0
 8006b2c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006b30:	dcfa      	bgt.n	8006b28 <__ieee754_fmod+0x120>
 8006b32:	e7b4      	b.n	8006a9e <__ieee754_fmod+0x96>
 8006b34:	ea4f 532e 	mov.w	r3, lr, asr #20
 8006b38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006b3c:	e7af      	b.n	8006a9e <__ieee754_fmod+0x96>
 8006b3e:	1a0f      	subs	r7, r1, r0
 8006b40:	2f1f      	cmp	r7, #31
 8006b42:	dc0a      	bgt.n	8006b5a <__ieee754_fmod+0x152>
 8006b44:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8006b48:	fa08 f807 	lsl.w	r8, r8, r7
 8006b4c:	fa22 f101 	lsr.w	r1, r2, r1
 8006b50:	ea41 0108 	orr.w	r1, r1, r8
 8006b54:	fa02 f707 	lsl.w	r7, r2, r7
 8006b58:	e7a8      	b.n	8006aac <__ieee754_fmod+0xa4>
 8006b5a:	4933      	ldr	r1, [pc, #204]	; (8006c28 <__ieee754_fmod+0x220>)
 8006b5c:	1a09      	subs	r1, r1, r0
 8006b5e:	fa02 f101 	lsl.w	r1, r2, r1
 8006b62:	2700      	movs	r7, #0
 8006b64:	e7a2      	b.n	8006aac <__ieee754_fmod+0xa4>
 8006b66:	eba2 0c03 	sub.w	ip, r2, r3
 8006b6a:	f1bc 0f1f 	cmp.w	ip, #31
 8006b6e:	dc0a      	bgt.n	8006b86 <__ieee754_fmod+0x17e>
 8006b70:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8006b74:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006b78:	fa25 f606 	lsr.w	r6, r5, r6
 8006b7c:	ea46 060e 	orr.w	r6, r6, lr
 8006b80:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006b84:	e799      	b.n	8006aba <__ieee754_fmod+0xb2>
 8006b86:	4e28      	ldr	r6, [pc, #160]	; (8006c28 <__ieee754_fmod+0x220>)
 8006b88:	1af6      	subs	r6, r6, r3
 8006b8a:	fa05 f606 	lsl.w	r6, r5, r6
 8006b8e:	f04f 0c00 	mov.w	ip, #0
 8006b92:	e792      	b.n	8006aba <__ieee754_fmod+0xb2>
 8006b94:	4567      	cmp	r7, ip
 8006b96:	bf38      	it	cc
 8006b98:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8006b9c:	2a00      	cmp	r2, #0
 8006b9e:	da05      	bge.n	8006bac <__ieee754_fmod+0x1a4>
 8006ba0:	0ffa      	lsrs	r2, r7, #31
 8006ba2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006ba6:	007f      	lsls	r7, r7, #1
 8006ba8:	3801      	subs	r0, #1
 8006baa:	e787      	b.n	8006abc <__ieee754_fmod+0xb4>
 8006bac:	ea52 0105 	orrs.w	r1, r2, r5
 8006bb0:	f43f af5b 	beq.w	8006a6a <__ieee754_fmod+0x62>
 8006bb4:	0fe9      	lsrs	r1, r5, #31
 8006bb6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8006bba:	006f      	lsls	r7, r5, #1
 8006bbc:	e7f4      	b.n	8006ba8 <__ieee754_fmod+0x1a0>
 8006bbe:	0fe8      	lsrs	r0, r5, #31
 8006bc0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006bc4:	006d      	lsls	r5, r5, #1
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	e789      	b.n	8006ade <__ieee754_fmod+0xd6>
 8006bca:	1ac9      	subs	r1, r1, r3
 8006bcc:	2914      	cmp	r1, #20
 8006bce:	dc0a      	bgt.n	8006be6 <__ieee754_fmod+0x1de>
 8006bd0:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd8:	40cd      	lsrs	r5, r1
 8006bda:	432b      	orrs	r3, r5
 8006bdc:	410a      	asrs	r2, r1
 8006bde:	ea42 0104 	orr.w	r1, r2, r4
 8006be2:	4618      	mov	r0, r3
 8006be4:	e732      	b.n	8006a4c <__ieee754_fmod+0x44>
 8006be6:	291f      	cmp	r1, #31
 8006be8:	dc07      	bgt.n	8006bfa <__ieee754_fmod+0x1f2>
 8006bea:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006bee:	40cd      	lsrs	r5, r1
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	432b      	orrs	r3, r5
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	e7f1      	b.n	8006bde <__ieee754_fmod+0x1d6>
 8006bfa:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8006bfe:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8006c02:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8006c06:	33e2      	adds	r3, #226	; 0xe2
 8006c08:	fa42 f303 	asr.w	r3, r2, r3
 8006c0c:	e7f3      	b.n	8006bf6 <__ieee754_fmod+0x1ee>
 8006c0e:	bf00      	nop
 8006c10:	7fefffff 	.word	0x7fefffff
 8006c14:	7ff00000 	.word	0x7ff00000
 8006c18:	08009738 	.word	0x08009738
 8006c1c:	000fffff 	.word	0x000fffff
 8006c20:	fffffbed 	.word	0xfffffbed
 8006c24:	fffffc02 	.word	0xfffffc02
 8006c28:	fffffbe2 	.word	0xfffffbe2
 8006c2c:	00000000 	.word	0x00000000

08006c30 <__ieee754_rem_pio2>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	ec57 6b10 	vmov	r6, r7, d0
 8006c38:	4bc3      	ldr	r3, [pc, #780]	; (8006f48 <__ieee754_rem_pio2+0x318>)
 8006c3a:	b08d      	sub	sp, #52	; 0x34
 8006c3c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006c40:	4598      	cmp	r8, r3
 8006c42:	4604      	mov	r4, r0
 8006c44:	9704      	str	r7, [sp, #16]
 8006c46:	dc07      	bgt.n	8006c58 <__ieee754_rem_pio2+0x28>
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	ed84 0b00 	vstr	d0, [r4]
 8006c50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006c54:	2500      	movs	r5, #0
 8006c56:	e027      	b.n	8006ca8 <__ieee754_rem_pio2+0x78>
 8006c58:	4bbc      	ldr	r3, [pc, #752]	; (8006f4c <__ieee754_rem_pio2+0x31c>)
 8006c5a:	4598      	cmp	r8, r3
 8006c5c:	dc75      	bgt.n	8006d4a <__ieee754_rem_pio2+0x11a>
 8006c5e:	9b04      	ldr	r3, [sp, #16]
 8006c60:	4dbb      	ldr	r5, [pc, #748]	; (8006f50 <__ieee754_rem_pio2+0x320>)
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	ee10 0a10 	vmov	r0, s0
 8006c68:	a3a9      	add	r3, pc, #676	; (adr r3, 8006f10 <__ieee754_rem_pio2+0x2e0>)
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	4639      	mov	r1, r7
 8006c70:	dd36      	ble.n	8006ce0 <__ieee754_rem_pio2+0xb0>
 8006c72:	f7f9 fad5 	bl	8000220 <__aeabi_dsub>
 8006c76:	45a8      	cmp	r8, r5
 8006c78:	4606      	mov	r6, r0
 8006c7a:	460f      	mov	r7, r1
 8006c7c:	d018      	beq.n	8006cb0 <__ieee754_rem_pio2+0x80>
 8006c7e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006f18 <__ieee754_rem_pio2+0x2e8>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 facc 	bl	8000220 <__aeabi_dsub>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	e9c4 2300 	strd	r2, r3, [r4]
 8006c90:	4630      	mov	r0, r6
 8006c92:	4639      	mov	r1, r7
 8006c94:	f7f9 fac4 	bl	8000220 <__aeabi_dsub>
 8006c98:	a39f      	add	r3, pc, #636	; (adr r3, 8006f18 <__ieee754_rem_pio2+0x2e8>)
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	f7f9 fabf 	bl	8000220 <__aeabi_dsub>
 8006ca2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ca6:	2501      	movs	r5, #1
 8006ca8:	4628      	mov	r0, r5
 8006caa:	b00d      	add	sp, #52	; 0x34
 8006cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb0:	a39b      	add	r3, pc, #620	; (adr r3, 8006f20 <__ieee754_rem_pio2+0x2f0>)
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f7f9 fab3 	bl	8000220 <__aeabi_dsub>
 8006cba:	a39b      	add	r3, pc, #620	; (adr r3, 8006f28 <__ieee754_rem_pio2+0x2f8>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	460f      	mov	r7, r1
 8006cc4:	f7f9 faac 	bl	8000220 <__aeabi_dsub>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	e9c4 2300 	strd	r2, r3, [r4]
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	4639      	mov	r1, r7
 8006cd4:	f7f9 faa4 	bl	8000220 <__aeabi_dsub>
 8006cd8:	a393      	add	r3, pc, #588	; (adr r3, 8006f28 <__ieee754_rem_pio2+0x2f8>)
 8006cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cde:	e7de      	b.n	8006c9e <__ieee754_rem_pio2+0x6e>
 8006ce0:	f7f9 faa0 	bl	8000224 <__adddf3>
 8006ce4:	45a8      	cmp	r8, r5
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	d016      	beq.n	8006d1a <__ieee754_rem_pio2+0xea>
 8006cec:	a38a      	add	r3, pc, #552	; (adr r3, 8006f18 <__ieee754_rem_pio2+0x2e8>)
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	f7f9 fa97 	bl	8000224 <__adddf3>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	e9c4 2300 	strd	r2, r3, [r4]
 8006cfe:	4630      	mov	r0, r6
 8006d00:	4639      	mov	r1, r7
 8006d02:	f7f9 fa8d 	bl	8000220 <__aeabi_dsub>
 8006d06:	a384      	add	r3, pc, #528	; (adr r3, 8006f18 <__ieee754_rem_pio2+0x2e8>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fa8a 	bl	8000224 <__adddf3>
 8006d10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006d14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d18:	e7c6      	b.n	8006ca8 <__ieee754_rem_pio2+0x78>
 8006d1a:	a381      	add	r3, pc, #516	; (adr r3, 8006f20 <__ieee754_rem_pio2+0x2f0>)
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	f7f9 fa80 	bl	8000224 <__adddf3>
 8006d24:	a380      	add	r3, pc, #512	; (adr r3, 8006f28 <__ieee754_rem_pio2+0x2f8>)
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	460f      	mov	r7, r1
 8006d2e:	f7f9 fa79 	bl	8000224 <__adddf3>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	e9c4 2300 	strd	r2, r3, [r4]
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	4639      	mov	r1, r7
 8006d3e:	f7f9 fa6f 	bl	8000220 <__aeabi_dsub>
 8006d42:	a379      	add	r3, pc, #484	; (adr r3, 8006f28 <__ieee754_rem_pio2+0x2f8>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	e7e0      	b.n	8006d0c <__ieee754_rem_pio2+0xdc>
 8006d4a:	4b82      	ldr	r3, [pc, #520]	; (8006f54 <__ieee754_rem_pio2+0x324>)
 8006d4c:	4598      	cmp	r8, r3
 8006d4e:	f300 80d0 	bgt.w	8006ef2 <__ieee754_rem_pio2+0x2c2>
 8006d52:	f7ff fca5 	bl	80066a0 <fabs>
 8006d56:	ec57 6b10 	vmov	r6, r7, d0
 8006d5a:	ee10 0a10 	vmov	r0, s0
 8006d5e:	a374      	add	r3, pc, #464	; (adr r3, 8006f30 <__ieee754_rem_pio2+0x300>)
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	4639      	mov	r1, r7
 8006d66:	f7f9 fc13 	bl	8000590 <__aeabi_dmul>
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	4b7a      	ldr	r3, [pc, #488]	; (8006f58 <__ieee754_rem_pio2+0x328>)
 8006d6e:	f7f9 fa59 	bl	8000224 <__adddf3>
 8006d72:	f7f9 febd 	bl	8000af0 <__aeabi_d2iz>
 8006d76:	4605      	mov	r5, r0
 8006d78:	f7f9 fba0 	bl	80004bc <__aeabi_i2d>
 8006d7c:	a364      	add	r3, pc, #400	; (adr r3, 8006f10 <__ieee754_rem_pio2+0x2e0>)
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d86:	f7f9 fc03 	bl	8000590 <__aeabi_dmul>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4630      	mov	r0, r6
 8006d90:	4639      	mov	r1, r7
 8006d92:	f7f9 fa45 	bl	8000220 <__aeabi_dsub>
 8006d96:	a360      	add	r3, pc, #384	; (adr r3, 8006f18 <__ieee754_rem_pio2+0x2e8>)
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	4682      	mov	sl, r0
 8006d9e:	468b      	mov	fp, r1
 8006da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006da4:	f7f9 fbf4 	bl	8000590 <__aeabi_dmul>
 8006da8:	2d1f      	cmp	r5, #31
 8006daa:	4606      	mov	r6, r0
 8006dac:	460f      	mov	r7, r1
 8006dae:	dc0c      	bgt.n	8006dca <__ieee754_rem_pio2+0x19a>
 8006db0:	1e6a      	subs	r2, r5, #1
 8006db2:	4b6a      	ldr	r3, [pc, #424]	; (8006f5c <__ieee754_rem_pio2+0x32c>)
 8006db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db8:	4543      	cmp	r3, r8
 8006dba:	d006      	beq.n	8006dca <__ieee754_rem_pio2+0x19a>
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	463b      	mov	r3, r7
 8006dc0:	4650      	mov	r0, sl
 8006dc2:	4659      	mov	r1, fp
 8006dc4:	f7f9 fa2c 	bl	8000220 <__aeabi_dsub>
 8006dc8:	e00e      	b.n	8006de8 <__ieee754_rem_pio2+0x1b8>
 8006dca:	4632      	mov	r2, r6
 8006dcc:	463b      	mov	r3, r7
 8006dce:	4650      	mov	r0, sl
 8006dd0:	4659      	mov	r1, fp
 8006dd2:	f7f9 fa25 	bl	8000220 <__aeabi_dsub>
 8006dd6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006dda:	9305      	str	r3, [sp, #20]
 8006ddc:	9a05      	ldr	r2, [sp, #20]
 8006dde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b10      	cmp	r3, #16
 8006de6:	dc02      	bgt.n	8006dee <__ieee754_rem_pio2+0x1be>
 8006de8:	e9c4 0100 	strd	r0, r1, [r4]
 8006dec:	e039      	b.n	8006e62 <__ieee754_rem_pio2+0x232>
 8006dee:	a34c      	add	r3, pc, #304	; (adr r3, 8006f20 <__ieee754_rem_pio2+0x2f0>)
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006df8:	f7f9 fbca 	bl	8000590 <__aeabi_dmul>
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	460f      	mov	r7, r1
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4650      	mov	r0, sl
 8006e06:	4659      	mov	r1, fp
 8006e08:	f7f9 fa0a 	bl	8000220 <__aeabi_dsub>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4680      	mov	r8, r0
 8006e12:	4689      	mov	r9, r1
 8006e14:	4650      	mov	r0, sl
 8006e16:	4659      	mov	r1, fp
 8006e18:	f7f9 fa02 	bl	8000220 <__aeabi_dsub>
 8006e1c:	4632      	mov	r2, r6
 8006e1e:	463b      	mov	r3, r7
 8006e20:	f7f9 f9fe 	bl	8000220 <__aeabi_dsub>
 8006e24:	a340      	add	r3, pc, #256	; (adr r3, 8006f28 <__ieee754_rem_pio2+0x2f8>)
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460f      	mov	r7, r1
 8006e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e32:	f7f9 fbad 	bl	8000590 <__aeabi_dmul>
 8006e36:	4632      	mov	r2, r6
 8006e38:	463b      	mov	r3, r7
 8006e3a:	f7f9 f9f1 	bl	8000220 <__aeabi_dsub>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	4606      	mov	r6, r0
 8006e44:	460f      	mov	r7, r1
 8006e46:	4640      	mov	r0, r8
 8006e48:	4649      	mov	r1, r9
 8006e4a:	f7f9 f9e9 	bl	8000220 <__aeabi_dsub>
 8006e4e:	9a05      	ldr	r2, [sp, #20]
 8006e50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b31      	cmp	r3, #49	; 0x31
 8006e58:	dc20      	bgt.n	8006e9c <__ieee754_rem_pio2+0x26c>
 8006e5a:	e9c4 0100 	strd	r0, r1, [r4]
 8006e5e:	46c2      	mov	sl, r8
 8006e60:	46cb      	mov	fp, r9
 8006e62:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006e66:	4650      	mov	r0, sl
 8006e68:	4642      	mov	r2, r8
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	4659      	mov	r1, fp
 8006e6e:	f7f9 f9d7 	bl	8000220 <__aeabi_dsub>
 8006e72:	463b      	mov	r3, r7
 8006e74:	4632      	mov	r2, r6
 8006e76:	f7f9 f9d3 	bl	8000220 <__aeabi_dsub>
 8006e7a:	9b04      	ldr	r3, [sp, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006e82:	f6bf af11 	bge.w	8006ca8 <__ieee754_rem_pio2+0x78>
 8006e86:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e8a:	6063      	str	r3, [r4, #4]
 8006e8c:	f8c4 8000 	str.w	r8, [r4]
 8006e90:	60a0      	str	r0, [r4, #8]
 8006e92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e96:	60e3      	str	r3, [r4, #12]
 8006e98:	426d      	negs	r5, r5
 8006e9a:	e705      	b.n	8006ca8 <__ieee754_rem_pio2+0x78>
 8006e9c:	a326      	add	r3, pc, #152	; (adr r3, 8006f38 <__ieee754_rem_pio2+0x308>)
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea6:	f7f9 fb73 	bl	8000590 <__aeabi_dmul>
 8006eaa:	4606      	mov	r6, r0
 8006eac:	460f      	mov	r7, r1
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	f7f9 f9b3 	bl	8000220 <__aeabi_dsub>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4682      	mov	sl, r0
 8006ec0:	468b      	mov	fp, r1
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	f7f9 f9ab 	bl	8000220 <__aeabi_dsub>
 8006eca:	4632      	mov	r2, r6
 8006ecc:	463b      	mov	r3, r7
 8006ece:	f7f9 f9a7 	bl	8000220 <__aeabi_dsub>
 8006ed2:	a31b      	add	r3, pc, #108	; (adr r3, 8006f40 <__ieee754_rem_pio2+0x310>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	4606      	mov	r6, r0
 8006eda:	460f      	mov	r7, r1
 8006edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ee0:	f7f9 fb56 	bl	8000590 <__aeabi_dmul>
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	f7f9 f99a 	bl	8000220 <__aeabi_dsub>
 8006eec:	4606      	mov	r6, r0
 8006eee:	460f      	mov	r7, r1
 8006ef0:	e764      	b.n	8006dbc <__ieee754_rem_pio2+0x18c>
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <__ieee754_rem_pio2+0x330>)
 8006ef4:	4598      	cmp	r8, r3
 8006ef6:	dd35      	ble.n	8006f64 <__ieee754_rem_pio2+0x334>
 8006ef8:	ee10 2a10 	vmov	r2, s0
 8006efc:	463b      	mov	r3, r7
 8006efe:	4630      	mov	r0, r6
 8006f00:	4639      	mov	r1, r7
 8006f02:	f7f9 f98d 	bl	8000220 <__aeabi_dsub>
 8006f06:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f0a:	e9c4 0100 	strd	r0, r1, [r4]
 8006f0e:	e6a1      	b.n	8006c54 <__ieee754_rem_pio2+0x24>
 8006f10:	54400000 	.word	0x54400000
 8006f14:	3ff921fb 	.word	0x3ff921fb
 8006f18:	1a626331 	.word	0x1a626331
 8006f1c:	3dd0b461 	.word	0x3dd0b461
 8006f20:	1a600000 	.word	0x1a600000
 8006f24:	3dd0b461 	.word	0x3dd0b461
 8006f28:	2e037073 	.word	0x2e037073
 8006f2c:	3ba3198a 	.word	0x3ba3198a
 8006f30:	6dc9c883 	.word	0x6dc9c883
 8006f34:	3fe45f30 	.word	0x3fe45f30
 8006f38:	2e000000 	.word	0x2e000000
 8006f3c:	3ba3198a 	.word	0x3ba3198a
 8006f40:	252049c1 	.word	0x252049c1
 8006f44:	397b839a 	.word	0x397b839a
 8006f48:	3fe921fb 	.word	0x3fe921fb
 8006f4c:	4002d97b 	.word	0x4002d97b
 8006f50:	3ff921fb 	.word	0x3ff921fb
 8006f54:	413921fb 	.word	0x413921fb
 8006f58:	3fe00000 	.word	0x3fe00000
 8006f5c:	08009748 	.word	0x08009748
 8006f60:	7fefffff 	.word	0x7fefffff
 8006f64:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006f68:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006f6c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006f70:	4630      	mov	r0, r6
 8006f72:	460f      	mov	r7, r1
 8006f74:	f7f9 fdbc 	bl	8000af0 <__aeabi_d2iz>
 8006f78:	f7f9 faa0 	bl	80004bc <__aeabi_i2d>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4630      	mov	r0, r6
 8006f82:	4639      	mov	r1, r7
 8006f84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f88:	f7f9 f94a 	bl	8000220 <__aeabi_dsub>
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4b1f      	ldr	r3, [pc, #124]	; (800700c <__ieee754_rem_pio2+0x3dc>)
 8006f90:	f7f9 fafe 	bl	8000590 <__aeabi_dmul>
 8006f94:	460f      	mov	r7, r1
 8006f96:	4606      	mov	r6, r0
 8006f98:	f7f9 fdaa 	bl	8000af0 <__aeabi_d2iz>
 8006f9c:	f7f9 fa8e 	bl	80004bc <__aeabi_i2d>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fac:	f7f9 f938 	bl	8000220 <__aeabi_dsub>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4b16      	ldr	r3, [pc, #88]	; (800700c <__ieee754_rem_pio2+0x3dc>)
 8006fb4:	f7f9 faec 	bl	8000590 <__aeabi_dmul>
 8006fb8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006fbc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006fc0:	f04f 0803 	mov.w	r8, #3
 8006fc4:	2600      	movs	r6, #0
 8006fc6:	2700      	movs	r7, #0
 8006fc8:	4632      	mov	r2, r6
 8006fca:	463b      	mov	r3, r7
 8006fcc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006fd0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8006fd4:	f7f9 fd44 	bl	8000a60 <__aeabi_dcmpeq>
 8006fd8:	b9b0      	cbnz	r0, 8007008 <__ieee754_rem_pio2+0x3d8>
 8006fda:	4b0d      	ldr	r3, [pc, #52]	; (8007010 <__ieee754_rem_pio2+0x3e0>)
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	2302      	movs	r3, #2
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	462a      	mov	r2, r5
 8006fe4:	4643      	mov	r3, r8
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	a806      	add	r0, sp, #24
 8006fea:	f000 f8dd 	bl	80071a8 <__kernel_rem_pio2>
 8006fee:	9b04      	ldr	r3, [sp, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	f6bf ae58 	bge.w	8006ca8 <__ieee754_rem_pio2+0x78>
 8006ff8:	6863      	ldr	r3, [r4, #4]
 8006ffa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006ffe:	6063      	str	r3, [r4, #4]
 8007000:	68e3      	ldr	r3, [r4, #12]
 8007002:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007006:	e746      	b.n	8006e96 <__ieee754_rem_pio2+0x266>
 8007008:	46d0      	mov	r8, sl
 800700a:	e7dd      	b.n	8006fc8 <__ieee754_rem_pio2+0x398>
 800700c:	41700000 	.word	0x41700000
 8007010:	080097c8 	.word	0x080097c8
 8007014:	00000000 	.word	0x00000000

08007018 <__kernel_cos>:
 8007018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701c:	ec59 8b10 	vmov	r8, r9, d0
 8007020:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8007024:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007028:	ed2d 8b02 	vpush	{d8}
 800702c:	eeb0 8a41 	vmov.f32	s16, s2
 8007030:	eef0 8a61 	vmov.f32	s17, s3
 8007034:	da07      	bge.n	8007046 <__kernel_cos+0x2e>
 8007036:	ee10 0a10 	vmov	r0, s0
 800703a:	4649      	mov	r1, r9
 800703c:	f7f9 fd58 	bl	8000af0 <__aeabi_d2iz>
 8007040:	2800      	cmp	r0, #0
 8007042:	f000 8089 	beq.w	8007158 <__kernel_cos+0x140>
 8007046:	4642      	mov	r2, r8
 8007048:	464b      	mov	r3, r9
 800704a:	4640      	mov	r0, r8
 800704c:	4649      	mov	r1, r9
 800704e:	f7f9 fa9f 	bl	8000590 <__aeabi_dmul>
 8007052:	2200      	movs	r2, #0
 8007054:	4b4e      	ldr	r3, [pc, #312]	; (8007190 <__kernel_cos+0x178>)
 8007056:	4604      	mov	r4, r0
 8007058:	460d      	mov	r5, r1
 800705a:	f7f9 fa99 	bl	8000590 <__aeabi_dmul>
 800705e:	a340      	add	r3, pc, #256	; (adr r3, 8007160 <__kernel_cos+0x148>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	4682      	mov	sl, r0
 8007066:	468b      	mov	fp, r1
 8007068:	4620      	mov	r0, r4
 800706a:	4629      	mov	r1, r5
 800706c:	f7f9 fa90 	bl	8000590 <__aeabi_dmul>
 8007070:	a33d      	add	r3, pc, #244	; (adr r3, 8007168 <__kernel_cos+0x150>)
 8007072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007076:	f7f9 f8d5 	bl	8000224 <__adddf3>
 800707a:	4622      	mov	r2, r4
 800707c:	462b      	mov	r3, r5
 800707e:	f7f9 fa87 	bl	8000590 <__aeabi_dmul>
 8007082:	a33b      	add	r3, pc, #236	; (adr r3, 8007170 <__kernel_cos+0x158>)
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f7f9 f8ca 	bl	8000220 <__aeabi_dsub>
 800708c:	4622      	mov	r2, r4
 800708e:	462b      	mov	r3, r5
 8007090:	f7f9 fa7e 	bl	8000590 <__aeabi_dmul>
 8007094:	a338      	add	r3, pc, #224	; (adr r3, 8007178 <__kernel_cos+0x160>)
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f7f9 f8c3 	bl	8000224 <__adddf3>
 800709e:	4622      	mov	r2, r4
 80070a0:	462b      	mov	r3, r5
 80070a2:	f7f9 fa75 	bl	8000590 <__aeabi_dmul>
 80070a6:	a336      	add	r3, pc, #216	; (adr r3, 8007180 <__kernel_cos+0x168>)
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	f7f9 f8b8 	bl	8000220 <__aeabi_dsub>
 80070b0:	4622      	mov	r2, r4
 80070b2:	462b      	mov	r3, r5
 80070b4:	f7f9 fa6c 	bl	8000590 <__aeabi_dmul>
 80070b8:	a333      	add	r3, pc, #204	; (adr r3, 8007188 <__kernel_cos+0x170>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	f7f9 f8b1 	bl	8000224 <__adddf3>
 80070c2:	4622      	mov	r2, r4
 80070c4:	462b      	mov	r3, r5
 80070c6:	f7f9 fa63 	bl	8000590 <__aeabi_dmul>
 80070ca:	4622      	mov	r2, r4
 80070cc:	462b      	mov	r3, r5
 80070ce:	f7f9 fa5f 	bl	8000590 <__aeabi_dmul>
 80070d2:	ec53 2b18 	vmov	r2, r3, d8
 80070d6:	4604      	mov	r4, r0
 80070d8:	460d      	mov	r5, r1
 80070da:	4640      	mov	r0, r8
 80070dc:	4649      	mov	r1, r9
 80070de:	f7f9 fa57 	bl	8000590 <__aeabi_dmul>
 80070e2:	460b      	mov	r3, r1
 80070e4:	4602      	mov	r2, r0
 80070e6:	4629      	mov	r1, r5
 80070e8:	4620      	mov	r0, r4
 80070ea:	f7f9 f899 	bl	8000220 <__aeabi_dsub>
 80070ee:	4b29      	ldr	r3, [pc, #164]	; (8007194 <__kernel_cos+0x17c>)
 80070f0:	429e      	cmp	r6, r3
 80070f2:	4680      	mov	r8, r0
 80070f4:	4689      	mov	r9, r1
 80070f6:	dc11      	bgt.n	800711c <__kernel_cos+0x104>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4650      	mov	r0, sl
 80070fe:	4659      	mov	r1, fp
 8007100:	f7f9 f88e 	bl	8000220 <__aeabi_dsub>
 8007104:	460b      	mov	r3, r1
 8007106:	4924      	ldr	r1, [pc, #144]	; (8007198 <__kernel_cos+0x180>)
 8007108:	4602      	mov	r2, r0
 800710a:	2000      	movs	r0, #0
 800710c:	f7f9 f888 	bl	8000220 <__aeabi_dsub>
 8007110:	ecbd 8b02 	vpop	{d8}
 8007114:	ec41 0b10 	vmov	d0, r0, r1
 8007118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711c:	4b1f      	ldr	r3, [pc, #124]	; (800719c <__kernel_cos+0x184>)
 800711e:	491e      	ldr	r1, [pc, #120]	; (8007198 <__kernel_cos+0x180>)
 8007120:	429e      	cmp	r6, r3
 8007122:	bfcc      	ite	gt
 8007124:	4d1e      	ldrgt	r5, [pc, #120]	; (80071a0 <__kernel_cos+0x188>)
 8007126:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800712a:	2400      	movs	r4, #0
 800712c:	4622      	mov	r2, r4
 800712e:	462b      	mov	r3, r5
 8007130:	2000      	movs	r0, #0
 8007132:	f7f9 f875 	bl	8000220 <__aeabi_dsub>
 8007136:	4622      	mov	r2, r4
 8007138:	4606      	mov	r6, r0
 800713a:	460f      	mov	r7, r1
 800713c:	462b      	mov	r3, r5
 800713e:	4650      	mov	r0, sl
 8007140:	4659      	mov	r1, fp
 8007142:	f7f9 f86d 	bl	8000220 <__aeabi_dsub>
 8007146:	4642      	mov	r2, r8
 8007148:	464b      	mov	r3, r9
 800714a:	f7f9 f869 	bl	8000220 <__aeabi_dsub>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4630      	mov	r0, r6
 8007154:	4639      	mov	r1, r7
 8007156:	e7d9      	b.n	800710c <__kernel_cos+0xf4>
 8007158:	2000      	movs	r0, #0
 800715a:	490f      	ldr	r1, [pc, #60]	; (8007198 <__kernel_cos+0x180>)
 800715c:	e7d8      	b.n	8007110 <__kernel_cos+0xf8>
 800715e:	bf00      	nop
 8007160:	be8838d4 	.word	0xbe8838d4
 8007164:	bda8fae9 	.word	0xbda8fae9
 8007168:	bdb4b1c4 	.word	0xbdb4b1c4
 800716c:	3e21ee9e 	.word	0x3e21ee9e
 8007170:	809c52ad 	.word	0x809c52ad
 8007174:	3e927e4f 	.word	0x3e927e4f
 8007178:	19cb1590 	.word	0x19cb1590
 800717c:	3efa01a0 	.word	0x3efa01a0
 8007180:	16c15177 	.word	0x16c15177
 8007184:	3f56c16c 	.word	0x3f56c16c
 8007188:	5555554c 	.word	0x5555554c
 800718c:	3fa55555 	.word	0x3fa55555
 8007190:	3fe00000 	.word	0x3fe00000
 8007194:	3fd33332 	.word	0x3fd33332
 8007198:	3ff00000 	.word	0x3ff00000
 800719c:	3fe90000 	.word	0x3fe90000
 80071a0:	3fd20000 	.word	0x3fd20000
 80071a4:	00000000 	.word	0x00000000

080071a8 <__kernel_rem_pio2>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	ed2d 8b02 	vpush	{d8}
 80071b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80071b4:	1ed4      	subs	r4, r2, #3
 80071b6:	9308      	str	r3, [sp, #32]
 80071b8:	9101      	str	r1, [sp, #4]
 80071ba:	4bc5      	ldr	r3, [pc, #788]	; (80074d0 <__kernel_rem_pio2+0x328>)
 80071bc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80071be:	9009      	str	r0, [sp, #36]	; 0x24
 80071c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071c4:	9304      	str	r3, [sp, #16]
 80071c6:	9b08      	ldr	r3, [sp, #32]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	9307      	str	r3, [sp, #28]
 80071cc:	2318      	movs	r3, #24
 80071ce:	fb94 f4f3 	sdiv	r4, r4, r3
 80071d2:	f06f 0317 	mvn.w	r3, #23
 80071d6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80071da:	fb04 3303 	mla	r3, r4, r3, r3
 80071de:	eb03 0a02 	add.w	sl, r3, r2
 80071e2:	9b04      	ldr	r3, [sp, #16]
 80071e4:	9a07      	ldr	r2, [sp, #28]
 80071e6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80074c0 <__kernel_rem_pio2+0x318>
 80071ea:	eb03 0802 	add.w	r8, r3, r2
 80071ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80071f0:	1aa7      	subs	r7, r4, r2
 80071f2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80071f6:	ae22      	add	r6, sp, #136	; 0x88
 80071f8:	2500      	movs	r5, #0
 80071fa:	4545      	cmp	r5, r8
 80071fc:	dd13      	ble.n	8007226 <__kernel_rem_pio2+0x7e>
 80071fe:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80074c0 <__kernel_rem_pio2+0x318>
 8007202:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007206:	2600      	movs	r6, #0
 8007208:	9b04      	ldr	r3, [sp, #16]
 800720a:	429e      	cmp	r6, r3
 800720c:	dc32      	bgt.n	8007274 <__kernel_rem_pio2+0xcc>
 800720e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007210:	9302      	str	r3, [sp, #8]
 8007212:	9b08      	ldr	r3, [sp, #32]
 8007214:	199d      	adds	r5, r3, r6
 8007216:	ab22      	add	r3, sp, #136	; 0x88
 8007218:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800721c:	9306      	str	r3, [sp, #24]
 800721e:	ec59 8b18 	vmov	r8, r9, d8
 8007222:	2700      	movs	r7, #0
 8007224:	e01f      	b.n	8007266 <__kernel_rem_pio2+0xbe>
 8007226:	42ef      	cmn	r7, r5
 8007228:	d407      	bmi.n	800723a <__kernel_rem_pio2+0x92>
 800722a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800722e:	f7f9 f945 	bl	80004bc <__aeabi_i2d>
 8007232:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007236:	3501      	adds	r5, #1
 8007238:	e7df      	b.n	80071fa <__kernel_rem_pio2+0x52>
 800723a:	ec51 0b18 	vmov	r0, r1, d8
 800723e:	e7f8      	b.n	8007232 <__kernel_rem_pio2+0x8a>
 8007240:	9906      	ldr	r1, [sp, #24]
 8007242:	9d02      	ldr	r5, [sp, #8]
 8007244:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007248:	9106      	str	r1, [sp, #24]
 800724a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800724e:	9502      	str	r5, [sp, #8]
 8007250:	f7f9 f99e 	bl	8000590 <__aeabi_dmul>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4640      	mov	r0, r8
 800725a:	4649      	mov	r1, r9
 800725c:	f7f8 ffe2 	bl	8000224 <__adddf3>
 8007260:	3701      	adds	r7, #1
 8007262:	4680      	mov	r8, r0
 8007264:	4689      	mov	r9, r1
 8007266:	9b07      	ldr	r3, [sp, #28]
 8007268:	429f      	cmp	r7, r3
 800726a:	dde9      	ble.n	8007240 <__kernel_rem_pio2+0x98>
 800726c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007270:	3601      	adds	r6, #1
 8007272:	e7c9      	b.n	8007208 <__kernel_rem_pio2+0x60>
 8007274:	9b04      	ldr	r3, [sp, #16]
 8007276:	aa0e      	add	r2, sp, #56	; 0x38
 8007278:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800727c:	930c      	str	r3, [sp, #48]	; 0x30
 800727e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007280:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007284:	9c04      	ldr	r4, [sp, #16]
 8007286:	930b      	str	r3, [sp, #44]	; 0x2c
 8007288:	ab9a      	add	r3, sp, #616	; 0x268
 800728a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800728e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007292:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007296:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800729a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800729e:	ab9a      	add	r3, sp, #616	; 0x268
 80072a0:	445b      	add	r3, fp
 80072a2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80072a6:	2500      	movs	r5, #0
 80072a8:	1b63      	subs	r3, r4, r5
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	dc78      	bgt.n	80073a0 <__kernel_rem_pio2+0x1f8>
 80072ae:	4650      	mov	r0, sl
 80072b0:	ec49 8b10 	vmov	d0, r8, r9
 80072b4:	f7ff fa84 	bl	80067c0 <scalbn>
 80072b8:	ec57 6b10 	vmov	r6, r7, d0
 80072bc:	2200      	movs	r2, #0
 80072be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80072c2:	ee10 0a10 	vmov	r0, s0
 80072c6:	4639      	mov	r1, r7
 80072c8:	f7f9 f962 	bl	8000590 <__aeabi_dmul>
 80072cc:	ec41 0b10 	vmov	d0, r0, r1
 80072d0:	f7ff f9f2 	bl	80066b8 <floor>
 80072d4:	2200      	movs	r2, #0
 80072d6:	ec51 0b10 	vmov	r0, r1, d0
 80072da:	4b7e      	ldr	r3, [pc, #504]	; (80074d4 <__kernel_rem_pio2+0x32c>)
 80072dc:	f7f9 f958 	bl	8000590 <__aeabi_dmul>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4630      	mov	r0, r6
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f8 ff9a 	bl	8000220 <__aeabi_dsub>
 80072ec:	460f      	mov	r7, r1
 80072ee:	4606      	mov	r6, r0
 80072f0:	f7f9 fbfe 	bl	8000af0 <__aeabi_d2iz>
 80072f4:	9006      	str	r0, [sp, #24]
 80072f6:	f7f9 f8e1 	bl	80004bc <__aeabi_i2d>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4630      	mov	r0, r6
 8007300:	4639      	mov	r1, r7
 8007302:	f7f8 ff8d 	bl	8000220 <__aeabi_dsub>
 8007306:	f1ba 0f00 	cmp.w	sl, #0
 800730a:	4606      	mov	r6, r0
 800730c:	460f      	mov	r7, r1
 800730e:	dd6c      	ble.n	80073ea <__kernel_rem_pio2+0x242>
 8007310:	1e62      	subs	r2, r4, #1
 8007312:	ab0e      	add	r3, sp, #56	; 0x38
 8007314:	f1ca 0118 	rsb	r1, sl, #24
 8007318:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800731c:	9d06      	ldr	r5, [sp, #24]
 800731e:	fa40 f301 	asr.w	r3, r0, r1
 8007322:	441d      	add	r5, r3
 8007324:	408b      	lsls	r3, r1
 8007326:	1ac0      	subs	r0, r0, r3
 8007328:	ab0e      	add	r3, sp, #56	; 0x38
 800732a:	9506      	str	r5, [sp, #24]
 800732c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007330:	f1ca 0317 	rsb	r3, sl, #23
 8007334:	fa40 f303 	asr.w	r3, r0, r3
 8007338:	9302      	str	r3, [sp, #8]
 800733a:	9b02      	ldr	r3, [sp, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	dd62      	ble.n	8007406 <__kernel_rem_pio2+0x25e>
 8007340:	9b06      	ldr	r3, [sp, #24]
 8007342:	2200      	movs	r2, #0
 8007344:	3301      	adds	r3, #1
 8007346:	9306      	str	r3, [sp, #24]
 8007348:	4615      	mov	r5, r2
 800734a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800734e:	4294      	cmp	r4, r2
 8007350:	f300 8095 	bgt.w	800747e <__kernel_rem_pio2+0x2d6>
 8007354:	f1ba 0f00 	cmp.w	sl, #0
 8007358:	dd07      	ble.n	800736a <__kernel_rem_pio2+0x1c2>
 800735a:	f1ba 0f01 	cmp.w	sl, #1
 800735e:	f000 80a2 	beq.w	80074a6 <__kernel_rem_pio2+0x2fe>
 8007362:	f1ba 0f02 	cmp.w	sl, #2
 8007366:	f000 80c1 	beq.w	80074ec <__kernel_rem_pio2+0x344>
 800736a:	9b02      	ldr	r3, [sp, #8]
 800736c:	2b02      	cmp	r3, #2
 800736e:	d14a      	bne.n	8007406 <__kernel_rem_pio2+0x25e>
 8007370:	4632      	mov	r2, r6
 8007372:	463b      	mov	r3, r7
 8007374:	2000      	movs	r0, #0
 8007376:	4958      	ldr	r1, [pc, #352]	; (80074d8 <__kernel_rem_pio2+0x330>)
 8007378:	f7f8 ff52 	bl	8000220 <__aeabi_dsub>
 800737c:	4606      	mov	r6, r0
 800737e:	460f      	mov	r7, r1
 8007380:	2d00      	cmp	r5, #0
 8007382:	d040      	beq.n	8007406 <__kernel_rem_pio2+0x25e>
 8007384:	4650      	mov	r0, sl
 8007386:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80074c8 <__kernel_rem_pio2+0x320>
 800738a:	f7ff fa19 	bl	80067c0 <scalbn>
 800738e:	4630      	mov	r0, r6
 8007390:	4639      	mov	r1, r7
 8007392:	ec53 2b10 	vmov	r2, r3, d0
 8007396:	f7f8 ff43 	bl	8000220 <__aeabi_dsub>
 800739a:	4606      	mov	r6, r0
 800739c:	460f      	mov	r7, r1
 800739e:	e032      	b.n	8007406 <__kernel_rem_pio2+0x25e>
 80073a0:	2200      	movs	r2, #0
 80073a2:	4b4e      	ldr	r3, [pc, #312]	; (80074dc <__kernel_rem_pio2+0x334>)
 80073a4:	4640      	mov	r0, r8
 80073a6:	4649      	mov	r1, r9
 80073a8:	f7f9 f8f2 	bl	8000590 <__aeabi_dmul>
 80073ac:	f7f9 fba0 	bl	8000af0 <__aeabi_d2iz>
 80073b0:	f7f9 f884 	bl	80004bc <__aeabi_i2d>
 80073b4:	2200      	movs	r2, #0
 80073b6:	4b4a      	ldr	r3, [pc, #296]	; (80074e0 <__kernel_rem_pio2+0x338>)
 80073b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073bc:	f7f9 f8e8 	bl	8000590 <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4640      	mov	r0, r8
 80073c6:	4649      	mov	r1, r9
 80073c8:	f7f8 ff2a 	bl	8000220 <__aeabi_dsub>
 80073cc:	f7f9 fb90 	bl	8000af0 <__aeabi_d2iz>
 80073d0:	ab0e      	add	r3, sp, #56	; 0x38
 80073d2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80073d6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80073da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073de:	f7f8 ff21 	bl	8000224 <__adddf3>
 80073e2:	3501      	adds	r5, #1
 80073e4:	4680      	mov	r8, r0
 80073e6:	4689      	mov	r9, r1
 80073e8:	e75e      	b.n	80072a8 <__kernel_rem_pio2+0x100>
 80073ea:	d105      	bne.n	80073f8 <__kernel_rem_pio2+0x250>
 80073ec:	1e63      	subs	r3, r4, #1
 80073ee:	aa0e      	add	r2, sp, #56	; 0x38
 80073f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80073f4:	15c3      	asrs	r3, r0, #23
 80073f6:	e79f      	b.n	8007338 <__kernel_rem_pio2+0x190>
 80073f8:	2200      	movs	r2, #0
 80073fa:	4b3a      	ldr	r3, [pc, #232]	; (80074e4 <__kernel_rem_pio2+0x33c>)
 80073fc:	f7f9 fb4e 	bl	8000a9c <__aeabi_dcmpge>
 8007400:	2800      	cmp	r0, #0
 8007402:	d139      	bne.n	8007478 <__kernel_rem_pio2+0x2d0>
 8007404:	9002      	str	r0, [sp, #8]
 8007406:	2200      	movs	r2, #0
 8007408:	2300      	movs	r3, #0
 800740a:	4630      	mov	r0, r6
 800740c:	4639      	mov	r1, r7
 800740e:	f7f9 fb27 	bl	8000a60 <__aeabi_dcmpeq>
 8007412:	2800      	cmp	r0, #0
 8007414:	f000 80c7 	beq.w	80075a6 <__kernel_rem_pio2+0x3fe>
 8007418:	1e65      	subs	r5, r4, #1
 800741a:	462b      	mov	r3, r5
 800741c:	2200      	movs	r2, #0
 800741e:	9904      	ldr	r1, [sp, #16]
 8007420:	428b      	cmp	r3, r1
 8007422:	da6a      	bge.n	80074fa <__kernel_rem_pio2+0x352>
 8007424:	2a00      	cmp	r2, #0
 8007426:	f000 8088 	beq.w	800753a <__kernel_rem_pio2+0x392>
 800742a:	ab0e      	add	r3, sp, #56	; 0x38
 800742c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007430:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 80b4 	beq.w	80075a2 <__kernel_rem_pio2+0x3fa>
 800743a:	4650      	mov	r0, sl
 800743c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80074c8 <__kernel_rem_pio2+0x320>
 8007440:	f7ff f9be 	bl	80067c0 <scalbn>
 8007444:	00ec      	lsls	r4, r5, #3
 8007446:	ab72      	add	r3, sp, #456	; 0x1c8
 8007448:	191e      	adds	r6, r3, r4
 800744a:	ec59 8b10 	vmov	r8, r9, d0
 800744e:	f106 0a08 	add.w	sl, r6, #8
 8007452:	462f      	mov	r7, r5
 8007454:	2f00      	cmp	r7, #0
 8007456:	f280 80df 	bge.w	8007618 <__kernel_rem_pio2+0x470>
 800745a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80074c0 <__kernel_rem_pio2+0x318>
 800745e:	f04f 0a00 	mov.w	sl, #0
 8007462:	eba5 030a 	sub.w	r3, r5, sl
 8007466:	2b00      	cmp	r3, #0
 8007468:	f2c0 810a 	blt.w	8007680 <__kernel_rem_pio2+0x4d8>
 800746c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80074e8 <__kernel_rem_pio2+0x340>
 8007470:	ec59 8b18 	vmov	r8, r9, d8
 8007474:	2700      	movs	r7, #0
 8007476:	e0f5      	b.n	8007664 <__kernel_rem_pio2+0x4bc>
 8007478:	2302      	movs	r3, #2
 800747a:	9302      	str	r3, [sp, #8]
 800747c:	e760      	b.n	8007340 <__kernel_rem_pio2+0x198>
 800747e:	ab0e      	add	r3, sp, #56	; 0x38
 8007480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007484:	b94d      	cbnz	r5, 800749a <__kernel_rem_pio2+0x2f2>
 8007486:	b12b      	cbz	r3, 8007494 <__kernel_rem_pio2+0x2ec>
 8007488:	a80e      	add	r0, sp, #56	; 0x38
 800748a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800748e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007492:	2301      	movs	r3, #1
 8007494:	3201      	adds	r2, #1
 8007496:	461d      	mov	r5, r3
 8007498:	e759      	b.n	800734e <__kernel_rem_pio2+0x1a6>
 800749a:	a80e      	add	r0, sp, #56	; 0x38
 800749c:	1acb      	subs	r3, r1, r3
 800749e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80074a2:	462b      	mov	r3, r5
 80074a4:	e7f6      	b.n	8007494 <__kernel_rem_pio2+0x2ec>
 80074a6:	1e62      	subs	r2, r4, #1
 80074a8:	ab0e      	add	r3, sp, #56	; 0x38
 80074aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80074b2:	a90e      	add	r1, sp, #56	; 0x38
 80074b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80074b8:	e757      	b.n	800736a <__kernel_rem_pio2+0x1c2>
 80074ba:	bf00      	nop
 80074bc:	f3af 8000 	nop.w
	...
 80074cc:	3ff00000 	.word	0x3ff00000
 80074d0:	08009910 	.word	0x08009910
 80074d4:	40200000 	.word	0x40200000
 80074d8:	3ff00000 	.word	0x3ff00000
 80074dc:	3e700000 	.word	0x3e700000
 80074e0:	41700000 	.word	0x41700000
 80074e4:	3fe00000 	.word	0x3fe00000
 80074e8:	080098d0 	.word	0x080098d0
 80074ec:	1e62      	subs	r2, r4, #1
 80074ee:	ab0e      	add	r3, sp, #56	; 0x38
 80074f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80074f8:	e7db      	b.n	80074b2 <__kernel_rem_pio2+0x30a>
 80074fa:	a90e      	add	r1, sp, #56	; 0x38
 80074fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007500:	3b01      	subs	r3, #1
 8007502:	430a      	orrs	r2, r1
 8007504:	e78b      	b.n	800741e <__kernel_rem_pio2+0x276>
 8007506:	3301      	adds	r3, #1
 8007508:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800750c:	2900      	cmp	r1, #0
 800750e:	d0fa      	beq.n	8007506 <__kernel_rem_pio2+0x35e>
 8007510:	9a08      	ldr	r2, [sp, #32]
 8007512:	4422      	add	r2, r4
 8007514:	00d2      	lsls	r2, r2, #3
 8007516:	a922      	add	r1, sp, #136	; 0x88
 8007518:	18e3      	adds	r3, r4, r3
 800751a:	9206      	str	r2, [sp, #24]
 800751c:	440a      	add	r2, r1
 800751e:	9302      	str	r3, [sp, #8]
 8007520:	f10b 0108 	add.w	r1, fp, #8
 8007524:	f102 0308 	add.w	r3, r2, #8
 8007528:	1c66      	adds	r6, r4, #1
 800752a:	910a      	str	r1, [sp, #40]	; 0x28
 800752c:	2500      	movs	r5, #0
 800752e:	930d      	str	r3, [sp, #52]	; 0x34
 8007530:	9b02      	ldr	r3, [sp, #8]
 8007532:	42b3      	cmp	r3, r6
 8007534:	da04      	bge.n	8007540 <__kernel_rem_pio2+0x398>
 8007536:	461c      	mov	r4, r3
 8007538:	e6a6      	b.n	8007288 <__kernel_rem_pio2+0xe0>
 800753a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800753c:	2301      	movs	r3, #1
 800753e:	e7e3      	b.n	8007508 <__kernel_rem_pio2+0x360>
 8007540:	9b06      	ldr	r3, [sp, #24]
 8007542:	18ef      	adds	r7, r5, r3
 8007544:	ab22      	add	r3, sp, #136	; 0x88
 8007546:	441f      	add	r7, r3
 8007548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800754a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800754e:	f7f8 ffb5 	bl	80004bc <__aeabi_i2d>
 8007552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007554:	461c      	mov	r4, r3
 8007556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007558:	e9c7 0100 	strd	r0, r1, [r7]
 800755c:	eb03 0b05 	add.w	fp, r3, r5
 8007560:	2700      	movs	r7, #0
 8007562:	f04f 0800 	mov.w	r8, #0
 8007566:	f04f 0900 	mov.w	r9, #0
 800756a:	9b07      	ldr	r3, [sp, #28]
 800756c:	429f      	cmp	r7, r3
 800756e:	dd08      	ble.n	8007582 <__kernel_rem_pio2+0x3da>
 8007570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007572:	aa72      	add	r2, sp, #456	; 0x1c8
 8007574:	18eb      	adds	r3, r5, r3
 8007576:	4413      	add	r3, r2
 8007578:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800757c:	3601      	adds	r6, #1
 800757e:	3508      	adds	r5, #8
 8007580:	e7d6      	b.n	8007530 <__kernel_rem_pio2+0x388>
 8007582:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007586:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800758a:	f7f9 f801 	bl	8000590 <__aeabi_dmul>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	f7f8 fe45 	bl	8000224 <__adddf3>
 800759a:	3701      	adds	r7, #1
 800759c:	4680      	mov	r8, r0
 800759e:	4689      	mov	r9, r1
 80075a0:	e7e3      	b.n	800756a <__kernel_rem_pio2+0x3c2>
 80075a2:	3d01      	subs	r5, #1
 80075a4:	e741      	b.n	800742a <__kernel_rem_pio2+0x282>
 80075a6:	f1ca 0000 	rsb	r0, sl, #0
 80075aa:	ec47 6b10 	vmov	d0, r6, r7
 80075ae:	f7ff f907 	bl	80067c0 <scalbn>
 80075b2:	ec57 6b10 	vmov	r6, r7, d0
 80075b6:	2200      	movs	r2, #0
 80075b8:	4b99      	ldr	r3, [pc, #612]	; (8007820 <__kernel_rem_pio2+0x678>)
 80075ba:	ee10 0a10 	vmov	r0, s0
 80075be:	4639      	mov	r1, r7
 80075c0:	f7f9 fa6c 	bl	8000a9c <__aeabi_dcmpge>
 80075c4:	b1f8      	cbz	r0, 8007606 <__kernel_rem_pio2+0x45e>
 80075c6:	2200      	movs	r2, #0
 80075c8:	4b96      	ldr	r3, [pc, #600]	; (8007824 <__kernel_rem_pio2+0x67c>)
 80075ca:	4630      	mov	r0, r6
 80075cc:	4639      	mov	r1, r7
 80075ce:	f7f8 ffdf 	bl	8000590 <__aeabi_dmul>
 80075d2:	f7f9 fa8d 	bl	8000af0 <__aeabi_d2iz>
 80075d6:	4680      	mov	r8, r0
 80075d8:	f7f8 ff70 	bl	80004bc <__aeabi_i2d>
 80075dc:	2200      	movs	r2, #0
 80075de:	4b90      	ldr	r3, [pc, #576]	; (8007820 <__kernel_rem_pio2+0x678>)
 80075e0:	f7f8 ffd6 	bl	8000590 <__aeabi_dmul>
 80075e4:	460b      	mov	r3, r1
 80075e6:	4602      	mov	r2, r0
 80075e8:	4639      	mov	r1, r7
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7f8 fe18 	bl	8000220 <__aeabi_dsub>
 80075f0:	f7f9 fa7e 	bl	8000af0 <__aeabi_d2iz>
 80075f4:	1c65      	adds	r5, r4, #1
 80075f6:	ab0e      	add	r3, sp, #56	; 0x38
 80075f8:	f10a 0a18 	add.w	sl, sl, #24
 80075fc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007600:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007604:	e719      	b.n	800743a <__kernel_rem_pio2+0x292>
 8007606:	4630      	mov	r0, r6
 8007608:	4639      	mov	r1, r7
 800760a:	f7f9 fa71 	bl	8000af0 <__aeabi_d2iz>
 800760e:	ab0e      	add	r3, sp, #56	; 0x38
 8007610:	4625      	mov	r5, r4
 8007612:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007616:	e710      	b.n	800743a <__kernel_rem_pio2+0x292>
 8007618:	ab0e      	add	r3, sp, #56	; 0x38
 800761a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800761e:	f7f8 ff4d 	bl	80004bc <__aeabi_i2d>
 8007622:	4642      	mov	r2, r8
 8007624:	464b      	mov	r3, r9
 8007626:	f7f8 ffb3 	bl	8000590 <__aeabi_dmul>
 800762a:	2200      	movs	r2, #0
 800762c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007630:	4b7c      	ldr	r3, [pc, #496]	; (8007824 <__kernel_rem_pio2+0x67c>)
 8007632:	4640      	mov	r0, r8
 8007634:	4649      	mov	r1, r9
 8007636:	f7f8 ffab 	bl	8000590 <__aeabi_dmul>
 800763a:	3f01      	subs	r7, #1
 800763c:	4680      	mov	r8, r0
 800763e:	4689      	mov	r9, r1
 8007640:	e708      	b.n	8007454 <__kernel_rem_pio2+0x2ac>
 8007642:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800764e:	f7f8 ff9f 	bl	8000590 <__aeabi_dmul>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4640      	mov	r0, r8
 8007658:	4649      	mov	r1, r9
 800765a:	f7f8 fde3 	bl	8000224 <__adddf3>
 800765e:	3701      	adds	r7, #1
 8007660:	4680      	mov	r8, r0
 8007662:	4689      	mov	r9, r1
 8007664:	9b04      	ldr	r3, [sp, #16]
 8007666:	429f      	cmp	r7, r3
 8007668:	dc01      	bgt.n	800766e <__kernel_rem_pio2+0x4c6>
 800766a:	45ba      	cmp	sl, r7
 800766c:	dae9      	bge.n	8007642 <__kernel_rem_pio2+0x49a>
 800766e:	ab4a      	add	r3, sp, #296	; 0x128
 8007670:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007674:	e9c3 8900 	strd	r8, r9, [r3]
 8007678:	f10a 0a01 	add.w	sl, sl, #1
 800767c:	3e08      	subs	r6, #8
 800767e:	e6f0      	b.n	8007462 <__kernel_rem_pio2+0x2ba>
 8007680:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007682:	2b03      	cmp	r3, #3
 8007684:	d85b      	bhi.n	800773e <__kernel_rem_pio2+0x596>
 8007686:	e8df f003 	tbb	[pc, r3]
 800768a:	264a      	.short	0x264a
 800768c:	0226      	.short	0x0226
 800768e:	ab9a      	add	r3, sp, #616	; 0x268
 8007690:	441c      	add	r4, r3
 8007692:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007696:	46a2      	mov	sl, r4
 8007698:	46ab      	mov	fp, r5
 800769a:	f1bb 0f00 	cmp.w	fp, #0
 800769e:	dc6c      	bgt.n	800777a <__kernel_rem_pio2+0x5d2>
 80076a0:	46a2      	mov	sl, r4
 80076a2:	46ab      	mov	fp, r5
 80076a4:	f1bb 0f01 	cmp.w	fp, #1
 80076a8:	f300 8086 	bgt.w	80077b8 <__kernel_rem_pio2+0x610>
 80076ac:	2000      	movs	r0, #0
 80076ae:	2100      	movs	r1, #0
 80076b0:	2d01      	cmp	r5, #1
 80076b2:	f300 80a0 	bgt.w	80077f6 <__kernel_rem_pio2+0x64e>
 80076b6:	9b02      	ldr	r3, [sp, #8]
 80076b8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80076bc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f040 809e 	bne.w	8007802 <__kernel_rem_pio2+0x65a>
 80076c6:	9b01      	ldr	r3, [sp, #4]
 80076c8:	e9c3 7800 	strd	r7, r8, [r3]
 80076cc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80076d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80076d4:	e033      	b.n	800773e <__kernel_rem_pio2+0x596>
 80076d6:	3408      	adds	r4, #8
 80076d8:	ab4a      	add	r3, sp, #296	; 0x128
 80076da:	441c      	add	r4, r3
 80076dc:	462e      	mov	r6, r5
 80076de:	2000      	movs	r0, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	2e00      	cmp	r6, #0
 80076e4:	da3a      	bge.n	800775c <__kernel_rem_pio2+0x5b4>
 80076e6:	9b02      	ldr	r3, [sp, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d03d      	beq.n	8007768 <__kernel_rem_pio2+0x5c0>
 80076ec:	4602      	mov	r2, r0
 80076ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076f2:	9c01      	ldr	r4, [sp, #4]
 80076f4:	e9c4 2300 	strd	r2, r3, [r4]
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007700:	f7f8 fd8e 	bl	8000220 <__aeabi_dsub>
 8007704:	ae4c      	add	r6, sp, #304	; 0x130
 8007706:	2401      	movs	r4, #1
 8007708:	42a5      	cmp	r5, r4
 800770a:	da30      	bge.n	800776e <__kernel_rem_pio2+0x5c6>
 800770c:	9b02      	ldr	r3, [sp, #8]
 800770e:	b113      	cbz	r3, 8007716 <__kernel_rem_pio2+0x56e>
 8007710:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007714:	4619      	mov	r1, r3
 8007716:	9b01      	ldr	r3, [sp, #4]
 8007718:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800771c:	e00f      	b.n	800773e <__kernel_rem_pio2+0x596>
 800771e:	ab9a      	add	r3, sp, #616	; 0x268
 8007720:	441c      	add	r4, r3
 8007722:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007726:	2000      	movs	r0, #0
 8007728:	2100      	movs	r1, #0
 800772a:	2d00      	cmp	r5, #0
 800772c:	da10      	bge.n	8007750 <__kernel_rem_pio2+0x5a8>
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	b113      	cbz	r3, 8007738 <__kernel_rem_pio2+0x590>
 8007732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007736:	4619      	mov	r1, r3
 8007738:	9b01      	ldr	r3, [sp, #4]
 800773a:	e9c3 0100 	strd	r0, r1, [r3]
 800773e:	9b06      	ldr	r3, [sp, #24]
 8007740:	f003 0007 	and.w	r0, r3, #7
 8007744:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007748:	ecbd 8b02 	vpop	{d8}
 800774c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007750:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007754:	f7f8 fd66 	bl	8000224 <__adddf3>
 8007758:	3d01      	subs	r5, #1
 800775a:	e7e6      	b.n	800772a <__kernel_rem_pio2+0x582>
 800775c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007760:	f7f8 fd60 	bl	8000224 <__adddf3>
 8007764:	3e01      	subs	r6, #1
 8007766:	e7bc      	b.n	80076e2 <__kernel_rem_pio2+0x53a>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	e7c1      	b.n	80076f2 <__kernel_rem_pio2+0x54a>
 800776e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007772:	f7f8 fd57 	bl	8000224 <__adddf3>
 8007776:	3401      	adds	r4, #1
 8007778:	e7c6      	b.n	8007708 <__kernel_rem_pio2+0x560>
 800777a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800777e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007782:	4640      	mov	r0, r8
 8007784:	ec53 2b17 	vmov	r2, r3, d7
 8007788:	4649      	mov	r1, r9
 800778a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800778e:	f7f8 fd49 	bl	8000224 <__adddf3>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4606      	mov	r6, r0
 8007798:	460f      	mov	r7, r1
 800779a:	4640      	mov	r0, r8
 800779c:	4649      	mov	r1, r9
 800779e:	f7f8 fd3f 	bl	8000220 <__aeabi_dsub>
 80077a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077a6:	f7f8 fd3d 	bl	8000224 <__adddf3>
 80077aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80077ae:	e9ca 0100 	strd	r0, r1, [sl]
 80077b2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80077b6:	e770      	b.n	800769a <__kernel_rem_pio2+0x4f2>
 80077b8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80077bc:	ed3a 7b02 	vldmdb	sl!, {d7}
 80077c0:	4630      	mov	r0, r6
 80077c2:	ec53 2b17 	vmov	r2, r3, d7
 80077c6:	4639      	mov	r1, r7
 80077c8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80077cc:	f7f8 fd2a 	bl	8000224 <__adddf3>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4680      	mov	r8, r0
 80077d6:	4689      	mov	r9, r1
 80077d8:	4630      	mov	r0, r6
 80077da:	4639      	mov	r1, r7
 80077dc:	f7f8 fd20 	bl	8000220 <__aeabi_dsub>
 80077e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077e4:	f7f8 fd1e 	bl	8000224 <__adddf3>
 80077e8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80077ec:	e9ca 0100 	strd	r0, r1, [sl]
 80077f0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80077f4:	e756      	b.n	80076a4 <__kernel_rem_pio2+0x4fc>
 80077f6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80077fa:	f7f8 fd13 	bl	8000224 <__adddf3>
 80077fe:	3d01      	subs	r5, #1
 8007800:	e756      	b.n	80076b0 <__kernel_rem_pio2+0x508>
 8007802:	9b01      	ldr	r3, [sp, #4]
 8007804:	9a01      	ldr	r2, [sp, #4]
 8007806:	601f      	str	r7, [r3, #0]
 8007808:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800780c:	605c      	str	r4, [r3, #4]
 800780e:	609d      	str	r5, [r3, #8]
 8007810:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007814:	60d3      	str	r3, [r2, #12]
 8007816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800781a:	6110      	str	r0, [r2, #16]
 800781c:	6153      	str	r3, [r2, #20]
 800781e:	e78e      	b.n	800773e <__kernel_rem_pio2+0x596>
 8007820:	41700000 	.word	0x41700000
 8007824:	3e700000 	.word	0x3e700000

08007828 <__kernel_sin>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	ec55 4b10 	vmov	r4, r5, d0
 8007830:	b085      	sub	sp, #20
 8007832:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007836:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800783a:	ed8d 1b00 	vstr	d1, [sp]
 800783e:	9002      	str	r0, [sp, #8]
 8007840:	da06      	bge.n	8007850 <__kernel_sin+0x28>
 8007842:	ee10 0a10 	vmov	r0, s0
 8007846:	4629      	mov	r1, r5
 8007848:	f7f9 f952 	bl	8000af0 <__aeabi_d2iz>
 800784c:	2800      	cmp	r0, #0
 800784e:	d051      	beq.n	80078f4 <__kernel_sin+0xcc>
 8007850:	4622      	mov	r2, r4
 8007852:	462b      	mov	r3, r5
 8007854:	4620      	mov	r0, r4
 8007856:	4629      	mov	r1, r5
 8007858:	f7f8 fe9a 	bl	8000590 <__aeabi_dmul>
 800785c:	4682      	mov	sl, r0
 800785e:	468b      	mov	fp, r1
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4620      	mov	r0, r4
 8007866:	4629      	mov	r1, r5
 8007868:	f7f8 fe92 	bl	8000590 <__aeabi_dmul>
 800786c:	a341      	add	r3, pc, #260	; (adr r3, 8007974 <__kernel_sin+0x14c>)
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	4680      	mov	r8, r0
 8007874:	4689      	mov	r9, r1
 8007876:	4650      	mov	r0, sl
 8007878:	4659      	mov	r1, fp
 800787a:	f7f8 fe89 	bl	8000590 <__aeabi_dmul>
 800787e:	a33f      	add	r3, pc, #252	; (adr r3, 800797c <__kernel_sin+0x154>)
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	f7f8 fccc 	bl	8000220 <__aeabi_dsub>
 8007888:	4652      	mov	r2, sl
 800788a:	465b      	mov	r3, fp
 800788c:	f7f8 fe80 	bl	8000590 <__aeabi_dmul>
 8007890:	a33c      	add	r3, pc, #240	; (adr r3, 8007984 <__kernel_sin+0x15c>)
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	f7f8 fcc5 	bl	8000224 <__adddf3>
 800789a:	4652      	mov	r2, sl
 800789c:	465b      	mov	r3, fp
 800789e:	f7f8 fe77 	bl	8000590 <__aeabi_dmul>
 80078a2:	a33a      	add	r3, pc, #232	; (adr r3, 800798c <__kernel_sin+0x164>)
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f7f8 fcba 	bl	8000220 <__aeabi_dsub>
 80078ac:	4652      	mov	r2, sl
 80078ae:	465b      	mov	r3, fp
 80078b0:	f7f8 fe6e 	bl	8000590 <__aeabi_dmul>
 80078b4:	a337      	add	r3, pc, #220	; (adr r3, 8007994 <__kernel_sin+0x16c>)
 80078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ba:	f7f8 fcb3 	bl	8000224 <__adddf3>
 80078be:	9b02      	ldr	r3, [sp, #8]
 80078c0:	4606      	mov	r6, r0
 80078c2:	460f      	mov	r7, r1
 80078c4:	b9db      	cbnz	r3, 80078fe <__kernel_sin+0xd6>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4650      	mov	r0, sl
 80078cc:	4659      	mov	r1, fp
 80078ce:	f7f8 fe5f 	bl	8000590 <__aeabi_dmul>
 80078d2:	a325      	add	r3, pc, #148	; (adr r3, 8007968 <__kernel_sin+0x140>)
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f7f8 fca2 	bl	8000220 <__aeabi_dsub>
 80078dc:	4642      	mov	r2, r8
 80078de:	464b      	mov	r3, r9
 80078e0:	f7f8 fe56 	bl	8000590 <__aeabi_dmul>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	4620      	mov	r0, r4
 80078ea:	4629      	mov	r1, r5
 80078ec:	f7f8 fc9a 	bl	8000224 <__adddf3>
 80078f0:	4604      	mov	r4, r0
 80078f2:	460d      	mov	r5, r1
 80078f4:	ec45 4b10 	vmov	d0, r4, r5
 80078f8:	b005      	add	sp, #20
 80078fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fe:	2200      	movs	r2, #0
 8007900:	4b1b      	ldr	r3, [pc, #108]	; (8007970 <__kernel_sin+0x148>)
 8007902:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007906:	f7f8 fe43 	bl	8000590 <__aeabi_dmul>
 800790a:	4632      	mov	r2, r6
 800790c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007910:	463b      	mov	r3, r7
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7f8 fe3b 	bl	8000590 <__aeabi_dmul>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007922:	f7f8 fc7d 	bl	8000220 <__aeabi_dsub>
 8007926:	4652      	mov	r2, sl
 8007928:	465b      	mov	r3, fp
 800792a:	f7f8 fe31 	bl	8000590 <__aeabi_dmul>
 800792e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007932:	f7f8 fc75 	bl	8000220 <__aeabi_dsub>
 8007936:	a30c      	add	r3, pc, #48	; (adr r3, 8007968 <__kernel_sin+0x140>)
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	4606      	mov	r6, r0
 800793e:	460f      	mov	r7, r1
 8007940:	4640      	mov	r0, r8
 8007942:	4649      	mov	r1, r9
 8007944:	f7f8 fe24 	bl	8000590 <__aeabi_dmul>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4630      	mov	r0, r6
 800794e:	4639      	mov	r1, r7
 8007950:	f7f8 fc68 	bl	8000224 <__adddf3>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4620      	mov	r0, r4
 800795a:	4629      	mov	r1, r5
 800795c:	f7f8 fc60 	bl	8000220 <__aeabi_dsub>
 8007960:	e7c6      	b.n	80078f0 <__kernel_sin+0xc8>
 8007962:	bf00      	nop
 8007964:	f3af 8000 	nop.w
 8007968:	55555549 	.word	0x55555549
 800796c:	3fc55555 	.word	0x3fc55555
 8007970:	3fe00000 	.word	0x3fe00000
 8007974:	5acfd57c 	.word	0x5acfd57c
 8007978:	3de5d93a 	.word	0x3de5d93a
 800797c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007980:	3e5ae5e6 	.word	0x3e5ae5e6
 8007984:	57b1fe7d 	.word	0x57b1fe7d
 8007988:	3ec71de3 	.word	0x3ec71de3
 800798c:	19c161d5 	.word	0x19c161d5
 8007990:	3f2a01a0 	.word	0x3f2a01a0
 8007994:	1110f8a6 	.word	0x1110f8a6
 8007998:	3f811111 	.word	0x3f811111

0800799c <copysign>:
 800799c:	ec51 0b10 	vmov	r0, r1, d0
 80079a0:	ee11 0a90 	vmov	r0, s3
 80079a4:	ee10 2a10 	vmov	r2, s0
 80079a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80079ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80079b0:	ea41 0300 	orr.w	r3, r1, r0
 80079b4:	ec43 2b10 	vmov	d0, r2, r3
 80079b8:	4770      	bx	lr

080079ba <matherr>:
 80079ba:	2000      	movs	r0, #0
 80079bc:	4770      	bx	lr

080079be <abort>:
 80079be:	b508      	push	{r3, lr}
 80079c0:	2006      	movs	r0, #6
 80079c2:	f000 fc93 	bl	80082ec <raise>
 80079c6:	2001      	movs	r0, #1
 80079c8:	f7fd ff5a 	bl	8005880 <_exit>

080079cc <__errno>:
 80079cc:	4b01      	ldr	r3, [pc, #4]	; (80079d4 <__errno+0x8>)
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	20000010 	.word	0x20000010

080079d8 <__libc_init_array>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	4e0d      	ldr	r6, [pc, #52]	; (8007a10 <__libc_init_array+0x38>)
 80079dc:	4c0d      	ldr	r4, [pc, #52]	; (8007a14 <__libc_init_array+0x3c>)
 80079de:	1ba4      	subs	r4, r4, r6
 80079e0:	10a4      	asrs	r4, r4, #2
 80079e2:	2500      	movs	r5, #0
 80079e4:	42a5      	cmp	r5, r4
 80079e6:	d109      	bne.n	80079fc <__libc_init_array+0x24>
 80079e8:	4e0b      	ldr	r6, [pc, #44]	; (8007a18 <__libc_init_array+0x40>)
 80079ea:	4c0c      	ldr	r4, [pc, #48]	; (8007a1c <__libc_init_array+0x44>)
 80079ec:	f001 fdfa 	bl	80095e4 <_init>
 80079f0:	1ba4      	subs	r4, r4, r6
 80079f2:	10a4      	asrs	r4, r4, #2
 80079f4:	2500      	movs	r5, #0
 80079f6:	42a5      	cmp	r5, r4
 80079f8:	d105      	bne.n	8007a06 <__libc_init_array+0x2e>
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a00:	4798      	blx	r3
 8007a02:	3501      	adds	r5, #1
 8007a04:	e7ee      	b.n	80079e4 <__libc_init_array+0xc>
 8007a06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a0a:	4798      	blx	r3
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	e7f2      	b.n	80079f6 <__libc_init_array+0x1e>
 8007a10:	08009b50 	.word	0x08009b50
 8007a14:	08009b50 	.word	0x08009b50
 8007a18:	08009b50 	.word	0x08009b50
 8007a1c:	08009b58 	.word	0x08009b58

08007a20 <malloc>:
 8007a20:	4b02      	ldr	r3, [pc, #8]	; (8007a2c <malloc+0xc>)
 8007a22:	4601      	mov	r1, r0
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	f000 b885 	b.w	8007b34 <_malloc_r>
 8007a2a:	bf00      	nop
 8007a2c:	20000010 	.word	0x20000010

08007a30 <free>:
 8007a30:	4b02      	ldr	r3, [pc, #8]	; (8007a3c <free+0xc>)
 8007a32:	4601      	mov	r1, r0
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	f000 b82f 	b.w	8007a98 <_free_r>
 8007a3a:	bf00      	nop
 8007a3c:	20000010 	.word	0x20000010

08007a40 <memcpy>:
 8007a40:	b510      	push	{r4, lr}
 8007a42:	1e43      	subs	r3, r0, #1
 8007a44:	440a      	add	r2, r1
 8007a46:	4291      	cmp	r1, r2
 8007a48:	d100      	bne.n	8007a4c <memcpy+0xc>
 8007a4a:	bd10      	pop	{r4, pc}
 8007a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a54:	e7f7      	b.n	8007a46 <memcpy+0x6>

08007a56 <memmove>:
 8007a56:	4288      	cmp	r0, r1
 8007a58:	b510      	push	{r4, lr}
 8007a5a:	eb01 0302 	add.w	r3, r1, r2
 8007a5e:	d807      	bhi.n	8007a70 <memmove+0x1a>
 8007a60:	1e42      	subs	r2, r0, #1
 8007a62:	4299      	cmp	r1, r3
 8007a64:	d00a      	beq.n	8007a7c <memmove+0x26>
 8007a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a6a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007a6e:	e7f8      	b.n	8007a62 <memmove+0xc>
 8007a70:	4283      	cmp	r3, r0
 8007a72:	d9f5      	bls.n	8007a60 <memmove+0xa>
 8007a74:	1881      	adds	r1, r0, r2
 8007a76:	1ad2      	subs	r2, r2, r3
 8007a78:	42d3      	cmn	r3, r2
 8007a7a:	d100      	bne.n	8007a7e <memmove+0x28>
 8007a7c:	bd10      	pop	{r4, pc}
 8007a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a82:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007a86:	e7f7      	b.n	8007a78 <memmove+0x22>

08007a88 <memset>:
 8007a88:	4402      	add	r2, r0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d100      	bne.n	8007a92 <memset+0xa>
 8007a90:	4770      	bx	lr
 8007a92:	f803 1b01 	strb.w	r1, [r3], #1
 8007a96:	e7f9      	b.n	8007a8c <memset+0x4>

08007a98 <_free_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	2900      	cmp	r1, #0
 8007a9e:	d045      	beq.n	8007b2c <_free_r+0x94>
 8007aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aa4:	1f0c      	subs	r4, r1, #4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bfb8      	it	lt
 8007aaa:	18e4      	addlt	r4, r4, r3
 8007aac:	f001 fa8e 	bl	8008fcc <__malloc_lock>
 8007ab0:	4a1f      	ldr	r2, [pc, #124]	; (8007b30 <_free_r+0x98>)
 8007ab2:	6813      	ldr	r3, [r2, #0]
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	b933      	cbnz	r3, 8007ac6 <_free_r+0x2e>
 8007ab8:	6063      	str	r3, [r4, #4]
 8007aba:	6014      	str	r4, [r2, #0]
 8007abc:	4628      	mov	r0, r5
 8007abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ac2:	f001 ba84 	b.w	8008fce <__malloc_unlock>
 8007ac6:	42a3      	cmp	r3, r4
 8007ac8:	d90c      	bls.n	8007ae4 <_free_r+0x4c>
 8007aca:	6821      	ldr	r1, [r4, #0]
 8007acc:	1862      	adds	r2, r4, r1
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	bf04      	itt	eq
 8007ad2:	681a      	ldreq	r2, [r3, #0]
 8007ad4:	685b      	ldreq	r3, [r3, #4]
 8007ad6:	6063      	str	r3, [r4, #4]
 8007ad8:	bf04      	itt	eq
 8007ada:	1852      	addeq	r2, r2, r1
 8007adc:	6022      	streq	r2, [r4, #0]
 8007ade:	6004      	str	r4, [r0, #0]
 8007ae0:	e7ec      	b.n	8007abc <_free_r+0x24>
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	b10a      	cbz	r2, 8007aec <_free_r+0x54>
 8007ae8:	42a2      	cmp	r2, r4
 8007aea:	d9fa      	bls.n	8007ae2 <_free_r+0x4a>
 8007aec:	6819      	ldr	r1, [r3, #0]
 8007aee:	1858      	adds	r0, r3, r1
 8007af0:	42a0      	cmp	r0, r4
 8007af2:	d10b      	bne.n	8007b0c <_free_r+0x74>
 8007af4:	6820      	ldr	r0, [r4, #0]
 8007af6:	4401      	add	r1, r0
 8007af8:	1858      	adds	r0, r3, r1
 8007afa:	4282      	cmp	r2, r0
 8007afc:	6019      	str	r1, [r3, #0]
 8007afe:	d1dd      	bne.n	8007abc <_free_r+0x24>
 8007b00:	6810      	ldr	r0, [r2, #0]
 8007b02:	6852      	ldr	r2, [r2, #4]
 8007b04:	605a      	str	r2, [r3, #4]
 8007b06:	4401      	add	r1, r0
 8007b08:	6019      	str	r1, [r3, #0]
 8007b0a:	e7d7      	b.n	8007abc <_free_r+0x24>
 8007b0c:	d902      	bls.n	8007b14 <_free_r+0x7c>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	602b      	str	r3, [r5, #0]
 8007b12:	e7d3      	b.n	8007abc <_free_r+0x24>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	1821      	adds	r1, r4, r0
 8007b18:	428a      	cmp	r2, r1
 8007b1a:	bf04      	itt	eq
 8007b1c:	6811      	ldreq	r1, [r2, #0]
 8007b1e:	6852      	ldreq	r2, [r2, #4]
 8007b20:	6062      	str	r2, [r4, #4]
 8007b22:	bf04      	itt	eq
 8007b24:	1809      	addeq	r1, r1, r0
 8007b26:	6021      	streq	r1, [r4, #0]
 8007b28:	605c      	str	r4, [r3, #4]
 8007b2a:	e7c7      	b.n	8007abc <_free_r+0x24>
 8007b2c:	bd38      	pop	{r3, r4, r5, pc}
 8007b2e:	bf00      	nop
 8007b30:	200002b8 	.word	0x200002b8

08007b34 <_malloc_r>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	1ccd      	adds	r5, r1, #3
 8007b38:	f025 0503 	bic.w	r5, r5, #3
 8007b3c:	3508      	adds	r5, #8
 8007b3e:	2d0c      	cmp	r5, #12
 8007b40:	bf38      	it	cc
 8007b42:	250c      	movcc	r5, #12
 8007b44:	2d00      	cmp	r5, #0
 8007b46:	4606      	mov	r6, r0
 8007b48:	db01      	blt.n	8007b4e <_malloc_r+0x1a>
 8007b4a:	42a9      	cmp	r1, r5
 8007b4c:	d903      	bls.n	8007b56 <_malloc_r+0x22>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	6033      	str	r3, [r6, #0]
 8007b52:	2000      	movs	r0, #0
 8007b54:	bd70      	pop	{r4, r5, r6, pc}
 8007b56:	f001 fa39 	bl	8008fcc <__malloc_lock>
 8007b5a:	4a21      	ldr	r2, [pc, #132]	; (8007be0 <_malloc_r+0xac>)
 8007b5c:	6814      	ldr	r4, [r2, #0]
 8007b5e:	4621      	mov	r1, r4
 8007b60:	b991      	cbnz	r1, 8007b88 <_malloc_r+0x54>
 8007b62:	4c20      	ldr	r4, [pc, #128]	; (8007be4 <_malloc_r+0xb0>)
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	b91b      	cbnz	r3, 8007b70 <_malloc_r+0x3c>
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f000 fb87 	bl	800827c <_sbrk_r>
 8007b6e:	6020      	str	r0, [r4, #0]
 8007b70:	4629      	mov	r1, r5
 8007b72:	4630      	mov	r0, r6
 8007b74:	f000 fb82 	bl	800827c <_sbrk_r>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d124      	bne.n	8007bc6 <_malloc_r+0x92>
 8007b7c:	230c      	movs	r3, #12
 8007b7e:	6033      	str	r3, [r6, #0]
 8007b80:	4630      	mov	r0, r6
 8007b82:	f001 fa24 	bl	8008fce <__malloc_unlock>
 8007b86:	e7e4      	b.n	8007b52 <_malloc_r+0x1e>
 8007b88:	680b      	ldr	r3, [r1, #0]
 8007b8a:	1b5b      	subs	r3, r3, r5
 8007b8c:	d418      	bmi.n	8007bc0 <_malloc_r+0x8c>
 8007b8e:	2b0b      	cmp	r3, #11
 8007b90:	d90f      	bls.n	8007bb2 <_malloc_r+0x7e>
 8007b92:	600b      	str	r3, [r1, #0]
 8007b94:	50cd      	str	r5, [r1, r3]
 8007b96:	18cc      	adds	r4, r1, r3
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f001 fa18 	bl	8008fce <__malloc_unlock>
 8007b9e:	f104 000b 	add.w	r0, r4, #11
 8007ba2:	1d23      	adds	r3, r4, #4
 8007ba4:	f020 0007 	bic.w	r0, r0, #7
 8007ba8:	1ac3      	subs	r3, r0, r3
 8007baa:	d0d3      	beq.n	8007b54 <_malloc_r+0x20>
 8007bac:	425a      	negs	r2, r3
 8007bae:	50e2      	str	r2, [r4, r3]
 8007bb0:	e7d0      	b.n	8007b54 <_malloc_r+0x20>
 8007bb2:	428c      	cmp	r4, r1
 8007bb4:	684b      	ldr	r3, [r1, #4]
 8007bb6:	bf16      	itet	ne
 8007bb8:	6063      	strne	r3, [r4, #4]
 8007bba:	6013      	streq	r3, [r2, #0]
 8007bbc:	460c      	movne	r4, r1
 8007bbe:	e7eb      	b.n	8007b98 <_malloc_r+0x64>
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	6849      	ldr	r1, [r1, #4]
 8007bc4:	e7cc      	b.n	8007b60 <_malloc_r+0x2c>
 8007bc6:	1cc4      	adds	r4, r0, #3
 8007bc8:	f024 0403 	bic.w	r4, r4, #3
 8007bcc:	42a0      	cmp	r0, r4
 8007bce:	d005      	beq.n	8007bdc <_malloc_r+0xa8>
 8007bd0:	1a21      	subs	r1, r4, r0
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 fb52 	bl	800827c <_sbrk_r>
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d0cf      	beq.n	8007b7c <_malloc_r+0x48>
 8007bdc:	6025      	str	r5, [r4, #0]
 8007bde:	e7db      	b.n	8007b98 <_malloc_r+0x64>
 8007be0:	200002b8 	.word	0x200002b8
 8007be4:	200002bc 	.word	0x200002bc

08007be8 <__cvt>:
 8007be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	ec55 4b10 	vmov	r4, r5, d0
 8007bf0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007bf2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007bf6:	2d00      	cmp	r5, #0
 8007bf8:	460e      	mov	r6, r1
 8007bfa:	4691      	mov	r9, r2
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	bfb8      	it	lt
 8007c00:	4622      	movlt	r2, r4
 8007c02:	462b      	mov	r3, r5
 8007c04:	f027 0720 	bic.w	r7, r7, #32
 8007c08:	bfbb      	ittet	lt
 8007c0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c0e:	461d      	movlt	r5, r3
 8007c10:	2300      	movge	r3, #0
 8007c12:	232d      	movlt	r3, #45	; 0x2d
 8007c14:	bfb8      	it	lt
 8007c16:	4614      	movlt	r4, r2
 8007c18:	2f46      	cmp	r7, #70	; 0x46
 8007c1a:	700b      	strb	r3, [r1, #0]
 8007c1c:	d004      	beq.n	8007c28 <__cvt+0x40>
 8007c1e:	2f45      	cmp	r7, #69	; 0x45
 8007c20:	d100      	bne.n	8007c24 <__cvt+0x3c>
 8007c22:	3601      	adds	r6, #1
 8007c24:	2102      	movs	r1, #2
 8007c26:	e000      	b.n	8007c2a <__cvt+0x42>
 8007c28:	2103      	movs	r1, #3
 8007c2a:	ab03      	add	r3, sp, #12
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	ab02      	add	r3, sp, #8
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	4632      	mov	r2, r6
 8007c34:	4653      	mov	r3, sl
 8007c36:	ec45 4b10 	vmov	d0, r4, r5
 8007c3a:	f000 fc01 	bl	8008440 <_dtoa_r>
 8007c3e:	2f47      	cmp	r7, #71	; 0x47
 8007c40:	4680      	mov	r8, r0
 8007c42:	d102      	bne.n	8007c4a <__cvt+0x62>
 8007c44:	f019 0f01 	tst.w	r9, #1
 8007c48:	d026      	beq.n	8007c98 <__cvt+0xb0>
 8007c4a:	2f46      	cmp	r7, #70	; 0x46
 8007c4c:	eb08 0906 	add.w	r9, r8, r6
 8007c50:	d111      	bne.n	8007c76 <__cvt+0x8e>
 8007c52:	f898 3000 	ldrb.w	r3, [r8]
 8007c56:	2b30      	cmp	r3, #48	; 0x30
 8007c58:	d10a      	bne.n	8007c70 <__cvt+0x88>
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4620      	mov	r0, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 fefd 	bl	8000a60 <__aeabi_dcmpeq>
 8007c66:	b918      	cbnz	r0, 8007c70 <__cvt+0x88>
 8007c68:	f1c6 0601 	rsb	r6, r6, #1
 8007c6c:	f8ca 6000 	str.w	r6, [sl]
 8007c70:	f8da 3000 	ldr.w	r3, [sl]
 8007c74:	4499      	add	r9, r3
 8007c76:	2200      	movs	r2, #0
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	f7f8 feef 	bl	8000a60 <__aeabi_dcmpeq>
 8007c82:	b938      	cbnz	r0, 8007c94 <__cvt+0xac>
 8007c84:	2230      	movs	r2, #48	; 0x30
 8007c86:	9b03      	ldr	r3, [sp, #12]
 8007c88:	454b      	cmp	r3, r9
 8007c8a:	d205      	bcs.n	8007c98 <__cvt+0xb0>
 8007c8c:	1c59      	adds	r1, r3, #1
 8007c8e:	9103      	str	r1, [sp, #12]
 8007c90:	701a      	strb	r2, [r3, #0]
 8007c92:	e7f8      	b.n	8007c86 <__cvt+0x9e>
 8007c94:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c98:	9b03      	ldr	r3, [sp, #12]
 8007c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c9c:	eba3 0308 	sub.w	r3, r3, r8
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	b004      	add	sp, #16
 8007ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007caa <__exponent>:
 8007caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cac:	2900      	cmp	r1, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	bfba      	itte	lt
 8007cb2:	4249      	neglt	r1, r1
 8007cb4:	232d      	movlt	r3, #45	; 0x2d
 8007cb6:	232b      	movge	r3, #43	; 0x2b
 8007cb8:	2909      	cmp	r1, #9
 8007cba:	f804 2b02 	strb.w	r2, [r4], #2
 8007cbe:	7043      	strb	r3, [r0, #1]
 8007cc0:	dd20      	ble.n	8007d04 <__exponent+0x5a>
 8007cc2:	f10d 0307 	add.w	r3, sp, #7
 8007cc6:	461f      	mov	r7, r3
 8007cc8:	260a      	movs	r6, #10
 8007cca:	fb91 f5f6 	sdiv	r5, r1, r6
 8007cce:	fb06 1115 	mls	r1, r6, r5, r1
 8007cd2:	3130      	adds	r1, #48	; 0x30
 8007cd4:	2d09      	cmp	r5, #9
 8007cd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cda:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007cde:	4629      	mov	r1, r5
 8007ce0:	dc09      	bgt.n	8007cf6 <__exponent+0x4c>
 8007ce2:	3130      	adds	r1, #48	; 0x30
 8007ce4:	3b02      	subs	r3, #2
 8007ce6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007cea:	42bb      	cmp	r3, r7
 8007cec:	4622      	mov	r2, r4
 8007cee:	d304      	bcc.n	8007cfa <__exponent+0x50>
 8007cf0:	1a10      	subs	r0, r2, r0
 8007cf2:	b003      	add	sp, #12
 8007cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	e7e7      	b.n	8007cca <__exponent+0x20>
 8007cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cfe:	f804 2b01 	strb.w	r2, [r4], #1
 8007d02:	e7f2      	b.n	8007cea <__exponent+0x40>
 8007d04:	2330      	movs	r3, #48	; 0x30
 8007d06:	4419      	add	r1, r3
 8007d08:	7083      	strb	r3, [r0, #2]
 8007d0a:	1d02      	adds	r2, r0, #4
 8007d0c:	70c1      	strb	r1, [r0, #3]
 8007d0e:	e7ef      	b.n	8007cf0 <__exponent+0x46>

08007d10 <_printf_float>:
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	b08d      	sub	sp, #52	; 0x34
 8007d16:	460c      	mov	r4, r1
 8007d18:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007d1c:	4616      	mov	r6, r2
 8007d1e:	461f      	mov	r7, r3
 8007d20:	4605      	mov	r5, r0
 8007d22:	f001 f945 	bl	8008fb0 <_localeconv_r>
 8007d26:	6803      	ldr	r3, [r0, #0]
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7f8 fa6c 	bl	8000208 <strlen>
 8007d30:	2300      	movs	r3, #0
 8007d32:	930a      	str	r3, [sp, #40]	; 0x28
 8007d34:	f8d8 3000 	ldr.w	r3, [r8]
 8007d38:	9005      	str	r0, [sp, #20]
 8007d3a:	3307      	adds	r3, #7
 8007d3c:	f023 0307 	bic.w	r3, r3, #7
 8007d40:	f103 0208 	add.w	r2, r3, #8
 8007d44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d48:	f8d4 b000 	ldr.w	fp, [r4]
 8007d4c:	f8c8 2000 	str.w	r2, [r8]
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d58:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d5c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d60:	9307      	str	r3, [sp, #28]
 8007d62:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d6a:	4ba7      	ldr	r3, [pc, #668]	; (8008008 <_printf_float+0x2f8>)
 8007d6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d70:	f7f8 fea8 	bl	8000ac4 <__aeabi_dcmpun>
 8007d74:	bb70      	cbnz	r0, 8007dd4 <_printf_float+0xc4>
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d7a:	4ba3      	ldr	r3, [pc, #652]	; (8008008 <_printf_float+0x2f8>)
 8007d7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d80:	f7f8 fe82 	bl	8000a88 <__aeabi_dcmple>
 8007d84:	bb30      	cbnz	r0, 8007dd4 <_printf_float+0xc4>
 8007d86:	2200      	movs	r2, #0
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	f7f8 fe71 	bl	8000a74 <__aeabi_dcmplt>
 8007d92:	b110      	cbz	r0, 8007d9a <_printf_float+0x8a>
 8007d94:	232d      	movs	r3, #45	; 0x2d
 8007d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d9a:	4a9c      	ldr	r2, [pc, #624]	; (800800c <_printf_float+0x2fc>)
 8007d9c:	4b9c      	ldr	r3, [pc, #624]	; (8008010 <_printf_float+0x300>)
 8007d9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007da2:	bf8c      	ite	hi
 8007da4:	4690      	movhi	r8, r2
 8007da6:	4698      	movls	r8, r3
 8007da8:	2303      	movs	r3, #3
 8007daa:	f02b 0204 	bic.w	r2, fp, #4
 8007dae:	6123      	str	r3, [r4, #16]
 8007db0:	6022      	str	r2, [r4, #0]
 8007db2:	f04f 0900 	mov.w	r9, #0
 8007db6:	9700      	str	r7, [sp, #0]
 8007db8:	4633      	mov	r3, r6
 8007dba:	aa0b      	add	r2, sp, #44	; 0x2c
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f000 f9e6 	bl	8008190 <_printf_common>
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	f040 808d 	bne.w	8007ee4 <_printf_float+0x1d4>
 8007dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dce:	b00d      	add	sp, #52	; 0x34
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	4640      	mov	r0, r8
 8007dda:	4649      	mov	r1, r9
 8007ddc:	f7f8 fe72 	bl	8000ac4 <__aeabi_dcmpun>
 8007de0:	b110      	cbz	r0, 8007de8 <_printf_float+0xd8>
 8007de2:	4a8c      	ldr	r2, [pc, #560]	; (8008014 <_printf_float+0x304>)
 8007de4:	4b8c      	ldr	r3, [pc, #560]	; (8008018 <_printf_float+0x308>)
 8007de6:	e7da      	b.n	8007d9e <_printf_float+0x8e>
 8007de8:	6861      	ldr	r1, [r4, #4]
 8007dea:	1c4b      	adds	r3, r1, #1
 8007dec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007df0:	a80a      	add	r0, sp, #40	; 0x28
 8007df2:	d13e      	bne.n	8007e72 <_printf_float+0x162>
 8007df4:	2306      	movs	r3, #6
 8007df6:	6063      	str	r3, [r4, #4]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007dfe:	ab09      	add	r3, sp, #36	; 0x24
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	ec49 8b10 	vmov	d0, r8, r9
 8007e06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e0a:	6022      	str	r2, [r4, #0]
 8007e0c:	f8cd a004 	str.w	sl, [sp, #4]
 8007e10:	6861      	ldr	r1, [r4, #4]
 8007e12:	4628      	mov	r0, r5
 8007e14:	f7ff fee8 	bl	8007be8 <__cvt>
 8007e18:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007e1c:	2b47      	cmp	r3, #71	; 0x47
 8007e1e:	4680      	mov	r8, r0
 8007e20:	d109      	bne.n	8007e36 <_printf_float+0x126>
 8007e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e24:	1cd8      	adds	r0, r3, #3
 8007e26:	db02      	blt.n	8007e2e <_printf_float+0x11e>
 8007e28:	6862      	ldr	r2, [r4, #4]
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	dd47      	ble.n	8007ebe <_printf_float+0x1ae>
 8007e2e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e32:	fa5f fa8a 	uxtb.w	sl, sl
 8007e36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007e3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e3c:	d824      	bhi.n	8007e88 <_printf_float+0x178>
 8007e3e:	3901      	subs	r1, #1
 8007e40:	4652      	mov	r2, sl
 8007e42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e46:	9109      	str	r1, [sp, #36]	; 0x24
 8007e48:	f7ff ff2f 	bl	8007caa <__exponent>
 8007e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e4e:	1813      	adds	r3, r2, r0
 8007e50:	2a01      	cmp	r2, #1
 8007e52:	4681      	mov	r9, r0
 8007e54:	6123      	str	r3, [r4, #16]
 8007e56:	dc02      	bgt.n	8007e5e <_printf_float+0x14e>
 8007e58:	6822      	ldr	r2, [r4, #0]
 8007e5a:	07d1      	lsls	r1, r2, #31
 8007e5c:	d501      	bpl.n	8007e62 <_printf_float+0x152>
 8007e5e:	3301      	adds	r3, #1
 8007e60:	6123      	str	r3, [r4, #16]
 8007e62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0a5      	beq.n	8007db6 <_printf_float+0xa6>
 8007e6a:	232d      	movs	r3, #45	; 0x2d
 8007e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e70:	e7a1      	b.n	8007db6 <_printf_float+0xa6>
 8007e72:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007e76:	f000 8177 	beq.w	8008168 <_printf_float+0x458>
 8007e7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e7e:	d1bb      	bne.n	8007df8 <_printf_float+0xe8>
 8007e80:	2900      	cmp	r1, #0
 8007e82:	d1b9      	bne.n	8007df8 <_printf_float+0xe8>
 8007e84:	2301      	movs	r3, #1
 8007e86:	e7b6      	b.n	8007df6 <_printf_float+0xe6>
 8007e88:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007e8c:	d119      	bne.n	8007ec2 <_printf_float+0x1b2>
 8007e8e:	2900      	cmp	r1, #0
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	dd0c      	ble.n	8007eae <_printf_float+0x19e>
 8007e94:	6121      	str	r1, [r4, #16]
 8007e96:	b913      	cbnz	r3, 8007e9e <_printf_float+0x18e>
 8007e98:	6822      	ldr	r2, [r4, #0]
 8007e9a:	07d2      	lsls	r2, r2, #31
 8007e9c:	d502      	bpl.n	8007ea4 <_printf_float+0x194>
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	440b      	add	r3, r1
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea6:	65a3      	str	r3, [r4, #88]	; 0x58
 8007ea8:	f04f 0900 	mov.w	r9, #0
 8007eac:	e7d9      	b.n	8007e62 <_printf_float+0x152>
 8007eae:	b913      	cbnz	r3, 8007eb6 <_printf_float+0x1a6>
 8007eb0:	6822      	ldr	r2, [r4, #0]
 8007eb2:	07d0      	lsls	r0, r2, #31
 8007eb4:	d501      	bpl.n	8007eba <_printf_float+0x1aa>
 8007eb6:	3302      	adds	r3, #2
 8007eb8:	e7f3      	b.n	8007ea2 <_printf_float+0x192>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e7f1      	b.n	8007ea2 <_printf_float+0x192>
 8007ebe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007ec2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	db05      	blt.n	8007ed6 <_printf_float+0x1c6>
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	6123      	str	r3, [r4, #16]
 8007ece:	07d1      	lsls	r1, r2, #31
 8007ed0:	d5e8      	bpl.n	8007ea4 <_printf_float+0x194>
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	e7e5      	b.n	8007ea2 <_printf_float+0x192>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bfd4      	ite	le
 8007eda:	f1c3 0302 	rsble	r3, r3, #2
 8007ede:	2301      	movgt	r3, #1
 8007ee0:	4413      	add	r3, r2
 8007ee2:	e7de      	b.n	8007ea2 <_printf_float+0x192>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	055a      	lsls	r2, r3, #21
 8007ee8:	d407      	bmi.n	8007efa <_printf_float+0x1ea>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	4642      	mov	r2, r8
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b8      	blx	r7
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d12b      	bne.n	8007f50 <_printf_float+0x240>
 8007ef8:	e767      	b.n	8007dca <_printf_float+0xba>
 8007efa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007efe:	f240 80dc 	bls.w	80080ba <_printf_float+0x3aa>
 8007f02:	2200      	movs	r2, #0
 8007f04:	2300      	movs	r3, #0
 8007f06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f0a:	f7f8 fda9 	bl	8000a60 <__aeabi_dcmpeq>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d033      	beq.n	8007f7a <_printf_float+0x26a>
 8007f12:	2301      	movs	r3, #1
 8007f14:	4a41      	ldr	r2, [pc, #260]	; (800801c <_printf_float+0x30c>)
 8007f16:	4631      	mov	r1, r6
 8007f18:	4628      	mov	r0, r5
 8007f1a:	47b8      	blx	r7
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	f43f af54 	beq.w	8007dca <_printf_float+0xba>
 8007f22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f26:	429a      	cmp	r2, r3
 8007f28:	db02      	blt.n	8007f30 <_printf_float+0x220>
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	07d8      	lsls	r0, r3, #31
 8007f2e:	d50f      	bpl.n	8007f50 <_printf_float+0x240>
 8007f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f34:	4631      	mov	r1, r6
 8007f36:	4628      	mov	r0, r5
 8007f38:	47b8      	blx	r7
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	f43f af45 	beq.w	8007dca <_printf_float+0xba>
 8007f40:	f04f 0800 	mov.w	r8, #0
 8007f44:	f104 091a 	add.w	r9, r4, #26
 8007f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	4543      	cmp	r3, r8
 8007f4e:	dc09      	bgt.n	8007f64 <_printf_float+0x254>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	079b      	lsls	r3, r3, #30
 8007f54:	f100 8103 	bmi.w	800815e <_printf_float+0x44e>
 8007f58:	68e0      	ldr	r0, [r4, #12]
 8007f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f5c:	4298      	cmp	r0, r3
 8007f5e:	bfb8      	it	lt
 8007f60:	4618      	movlt	r0, r3
 8007f62:	e734      	b.n	8007dce <_printf_float+0xbe>
 8007f64:	2301      	movs	r3, #1
 8007f66:	464a      	mov	r2, r9
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f af2b 	beq.w	8007dca <_printf_float+0xba>
 8007f74:	f108 0801 	add.w	r8, r8, #1
 8007f78:	e7e6      	b.n	8007f48 <_printf_float+0x238>
 8007f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dc2b      	bgt.n	8007fd8 <_printf_float+0x2c8>
 8007f80:	2301      	movs	r3, #1
 8007f82:	4a26      	ldr	r2, [pc, #152]	; (800801c <_printf_float+0x30c>)
 8007f84:	4631      	mov	r1, r6
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b8      	blx	r7
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	f43f af1d 	beq.w	8007dca <_printf_float+0xba>
 8007f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f92:	b923      	cbnz	r3, 8007f9e <_printf_float+0x28e>
 8007f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f96:	b913      	cbnz	r3, 8007f9e <_printf_float+0x28e>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	07d9      	lsls	r1, r3, #31
 8007f9c:	d5d8      	bpl.n	8007f50 <_printf_float+0x240>
 8007f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fa2:	4631      	mov	r1, r6
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	47b8      	blx	r7
 8007fa8:	3001      	adds	r0, #1
 8007faa:	f43f af0e 	beq.w	8007dca <_printf_float+0xba>
 8007fae:	f04f 0900 	mov.w	r9, #0
 8007fb2:	f104 0a1a 	add.w	sl, r4, #26
 8007fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb8:	425b      	negs	r3, r3
 8007fba:	454b      	cmp	r3, r9
 8007fbc:	dc01      	bgt.n	8007fc2 <_printf_float+0x2b2>
 8007fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc0:	e794      	b.n	8007eec <_printf_float+0x1dc>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	4652      	mov	r2, sl
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b8      	blx	r7
 8007fcc:	3001      	adds	r0, #1
 8007fce:	f43f aefc 	beq.w	8007dca <_printf_float+0xba>
 8007fd2:	f109 0901 	add.w	r9, r9, #1
 8007fd6:	e7ee      	b.n	8007fb6 <_printf_float+0x2a6>
 8007fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	bfa8      	it	ge
 8007fe0:	461a      	movge	r2, r3
 8007fe2:	2a00      	cmp	r2, #0
 8007fe4:	4691      	mov	r9, r2
 8007fe6:	dd07      	ble.n	8007ff8 <_printf_float+0x2e8>
 8007fe8:	4613      	mov	r3, r2
 8007fea:	4631      	mov	r1, r6
 8007fec:	4642      	mov	r2, r8
 8007fee:	4628      	mov	r0, r5
 8007ff0:	47b8      	blx	r7
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	f43f aee9 	beq.w	8007dca <_printf_float+0xba>
 8007ff8:	f104 031a 	add.w	r3, r4, #26
 8007ffc:	f04f 0b00 	mov.w	fp, #0
 8008000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008004:	9306      	str	r3, [sp, #24]
 8008006:	e015      	b.n	8008034 <_printf_float+0x324>
 8008008:	7fefffff 	.word	0x7fefffff
 800800c:	08009924 	.word	0x08009924
 8008010:	08009920 	.word	0x08009920
 8008014:	0800992c 	.word	0x0800992c
 8008018:	08009928 	.word	0x08009928
 800801c:	08009930 	.word	0x08009930
 8008020:	2301      	movs	r3, #1
 8008022:	9a06      	ldr	r2, [sp, #24]
 8008024:	4631      	mov	r1, r6
 8008026:	4628      	mov	r0, r5
 8008028:	47b8      	blx	r7
 800802a:	3001      	adds	r0, #1
 800802c:	f43f aecd 	beq.w	8007dca <_printf_float+0xba>
 8008030:	f10b 0b01 	add.w	fp, fp, #1
 8008034:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008038:	ebaa 0309 	sub.w	r3, sl, r9
 800803c:	455b      	cmp	r3, fp
 800803e:	dcef      	bgt.n	8008020 <_printf_float+0x310>
 8008040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008044:	429a      	cmp	r2, r3
 8008046:	44d0      	add	r8, sl
 8008048:	db15      	blt.n	8008076 <_printf_float+0x366>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	07da      	lsls	r2, r3, #31
 800804e:	d412      	bmi.n	8008076 <_printf_float+0x366>
 8008050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008052:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008054:	eba3 020a 	sub.w	r2, r3, sl
 8008058:	eba3 0a01 	sub.w	sl, r3, r1
 800805c:	4592      	cmp	sl, r2
 800805e:	bfa8      	it	ge
 8008060:	4692      	movge	sl, r2
 8008062:	f1ba 0f00 	cmp.w	sl, #0
 8008066:	dc0e      	bgt.n	8008086 <_printf_float+0x376>
 8008068:	f04f 0800 	mov.w	r8, #0
 800806c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008070:	f104 091a 	add.w	r9, r4, #26
 8008074:	e019      	b.n	80080aa <_printf_float+0x39a>
 8008076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	d1e5      	bne.n	8008050 <_printf_float+0x340>
 8008084:	e6a1      	b.n	8007dca <_printf_float+0xba>
 8008086:	4653      	mov	r3, sl
 8008088:	4642      	mov	r2, r8
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	47b8      	blx	r7
 8008090:	3001      	adds	r0, #1
 8008092:	d1e9      	bne.n	8008068 <_printf_float+0x358>
 8008094:	e699      	b.n	8007dca <_printf_float+0xba>
 8008096:	2301      	movs	r3, #1
 8008098:	464a      	mov	r2, r9
 800809a:	4631      	mov	r1, r6
 800809c:	4628      	mov	r0, r5
 800809e:	47b8      	blx	r7
 80080a0:	3001      	adds	r0, #1
 80080a2:	f43f ae92 	beq.w	8007dca <_printf_float+0xba>
 80080a6:	f108 0801 	add.w	r8, r8, #1
 80080aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	eba3 030a 	sub.w	r3, r3, sl
 80080b4:	4543      	cmp	r3, r8
 80080b6:	dcee      	bgt.n	8008096 <_printf_float+0x386>
 80080b8:	e74a      	b.n	8007f50 <_printf_float+0x240>
 80080ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080bc:	2a01      	cmp	r2, #1
 80080be:	dc01      	bgt.n	80080c4 <_printf_float+0x3b4>
 80080c0:	07db      	lsls	r3, r3, #31
 80080c2:	d53a      	bpl.n	800813a <_printf_float+0x42a>
 80080c4:	2301      	movs	r3, #1
 80080c6:	4642      	mov	r2, r8
 80080c8:	4631      	mov	r1, r6
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b8      	blx	r7
 80080ce:	3001      	adds	r0, #1
 80080d0:	f43f ae7b 	beq.w	8007dca <_printf_float+0xba>
 80080d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080d8:	4631      	mov	r1, r6
 80080da:	4628      	mov	r0, r5
 80080dc:	47b8      	blx	r7
 80080de:	3001      	adds	r0, #1
 80080e0:	f108 0801 	add.w	r8, r8, #1
 80080e4:	f43f ae71 	beq.w	8007dca <_printf_float+0xba>
 80080e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ea:	2200      	movs	r2, #0
 80080ec:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80080f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080f4:	2300      	movs	r3, #0
 80080f6:	f7f8 fcb3 	bl	8000a60 <__aeabi_dcmpeq>
 80080fa:	b9c8      	cbnz	r0, 8008130 <_printf_float+0x420>
 80080fc:	4653      	mov	r3, sl
 80080fe:	4642      	mov	r2, r8
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	d10e      	bne.n	8008128 <_printf_float+0x418>
 800810a:	e65e      	b.n	8007dca <_printf_float+0xba>
 800810c:	2301      	movs	r3, #1
 800810e:	4652      	mov	r2, sl
 8008110:	4631      	mov	r1, r6
 8008112:	4628      	mov	r0, r5
 8008114:	47b8      	blx	r7
 8008116:	3001      	adds	r0, #1
 8008118:	f43f ae57 	beq.w	8007dca <_printf_float+0xba>
 800811c:	f108 0801 	add.w	r8, r8, #1
 8008120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008122:	3b01      	subs	r3, #1
 8008124:	4543      	cmp	r3, r8
 8008126:	dcf1      	bgt.n	800810c <_printf_float+0x3fc>
 8008128:	464b      	mov	r3, r9
 800812a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800812e:	e6de      	b.n	8007eee <_printf_float+0x1de>
 8008130:	f04f 0800 	mov.w	r8, #0
 8008134:	f104 0a1a 	add.w	sl, r4, #26
 8008138:	e7f2      	b.n	8008120 <_printf_float+0x410>
 800813a:	2301      	movs	r3, #1
 800813c:	e7df      	b.n	80080fe <_printf_float+0x3ee>
 800813e:	2301      	movs	r3, #1
 8008140:	464a      	mov	r2, r9
 8008142:	4631      	mov	r1, r6
 8008144:	4628      	mov	r0, r5
 8008146:	47b8      	blx	r7
 8008148:	3001      	adds	r0, #1
 800814a:	f43f ae3e 	beq.w	8007dca <_printf_float+0xba>
 800814e:	f108 0801 	add.w	r8, r8, #1
 8008152:	68e3      	ldr	r3, [r4, #12]
 8008154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008156:	1a9b      	subs	r3, r3, r2
 8008158:	4543      	cmp	r3, r8
 800815a:	dcf0      	bgt.n	800813e <_printf_float+0x42e>
 800815c:	e6fc      	b.n	8007f58 <_printf_float+0x248>
 800815e:	f04f 0800 	mov.w	r8, #0
 8008162:	f104 0919 	add.w	r9, r4, #25
 8008166:	e7f4      	b.n	8008152 <_printf_float+0x442>
 8008168:	2900      	cmp	r1, #0
 800816a:	f43f ae8b 	beq.w	8007e84 <_printf_float+0x174>
 800816e:	2300      	movs	r3, #0
 8008170:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008174:	ab09      	add	r3, sp, #36	; 0x24
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	ec49 8b10 	vmov	d0, r8, r9
 800817c:	6022      	str	r2, [r4, #0]
 800817e:	f8cd a004 	str.w	sl, [sp, #4]
 8008182:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008186:	4628      	mov	r0, r5
 8008188:	f7ff fd2e 	bl	8007be8 <__cvt>
 800818c:	4680      	mov	r8, r0
 800818e:	e648      	b.n	8007e22 <_printf_float+0x112>

08008190 <_printf_common>:
 8008190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008194:	4691      	mov	r9, r2
 8008196:	461f      	mov	r7, r3
 8008198:	688a      	ldr	r2, [r1, #8]
 800819a:	690b      	ldr	r3, [r1, #16]
 800819c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081a0:	4293      	cmp	r3, r2
 80081a2:	bfb8      	it	lt
 80081a4:	4613      	movlt	r3, r2
 80081a6:	f8c9 3000 	str.w	r3, [r9]
 80081aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081ae:	4606      	mov	r6, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	b112      	cbz	r2, 80081ba <_printf_common+0x2a>
 80081b4:	3301      	adds	r3, #1
 80081b6:	f8c9 3000 	str.w	r3, [r9]
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	0699      	lsls	r1, r3, #26
 80081be:	bf42      	ittt	mi
 80081c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80081c4:	3302      	addmi	r3, #2
 80081c6:	f8c9 3000 	strmi.w	r3, [r9]
 80081ca:	6825      	ldr	r5, [r4, #0]
 80081cc:	f015 0506 	ands.w	r5, r5, #6
 80081d0:	d107      	bne.n	80081e2 <_printf_common+0x52>
 80081d2:	f104 0a19 	add.w	sl, r4, #25
 80081d6:	68e3      	ldr	r3, [r4, #12]
 80081d8:	f8d9 2000 	ldr.w	r2, [r9]
 80081dc:	1a9b      	subs	r3, r3, r2
 80081de:	42ab      	cmp	r3, r5
 80081e0:	dc28      	bgt.n	8008234 <_printf_common+0xa4>
 80081e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80081e6:	6822      	ldr	r2, [r4, #0]
 80081e8:	3300      	adds	r3, #0
 80081ea:	bf18      	it	ne
 80081ec:	2301      	movne	r3, #1
 80081ee:	0692      	lsls	r2, r2, #26
 80081f0:	d42d      	bmi.n	800824e <_printf_common+0xbe>
 80081f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081f6:	4639      	mov	r1, r7
 80081f8:	4630      	mov	r0, r6
 80081fa:	47c0      	blx	r8
 80081fc:	3001      	adds	r0, #1
 80081fe:	d020      	beq.n	8008242 <_printf_common+0xb2>
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	68e5      	ldr	r5, [r4, #12]
 8008204:	f8d9 2000 	ldr.w	r2, [r9]
 8008208:	f003 0306 	and.w	r3, r3, #6
 800820c:	2b04      	cmp	r3, #4
 800820e:	bf08      	it	eq
 8008210:	1aad      	subeq	r5, r5, r2
 8008212:	68a3      	ldr	r3, [r4, #8]
 8008214:	6922      	ldr	r2, [r4, #16]
 8008216:	bf0c      	ite	eq
 8008218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800821c:	2500      	movne	r5, #0
 800821e:	4293      	cmp	r3, r2
 8008220:	bfc4      	itt	gt
 8008222:	1a9b      	subgt	r3, r3, r2
 8008224:	18ed      	addgt	r5, r5, r3
 8008226:	f04f 0900 	mov.w	r9, #0
 800822a:	341a      	adds	r4, #26
 800822c:	454d      	cmp	r5, r9
 800822e:	d11a      	bne.n	8008266 <_printf_common+0xd6>
 8008230:	2000      	movs	r0, #0
 8008232:	e008      	b.n	8008246 <_printf_common+0xb6>
 8008234:	2301      	movs	r3, #1
 8008236:	4652      	mov	r2, sl
 8008238:	4639      	mov	r1, r7
 800823a:	4630      	mov	r0, r6
 800823c:	47c0      	blx	r8
 800823e:	3001      	adds	r0, #1
 8008240:	d103      	bne.n	800824a <_printf_common+0xba>
 8008242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800824a:	3501      	adds	r5, #1
 800824c:	e7c3      	b.n	80081d6 <_printf_common+0x46>
 800824e:	18e1      	adds	r1, r4, r3
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	2030      	movs	r0, #48	; 0x30
 8008254:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008258:	4422      	add	r2, r4
 800825a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800825e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008262:	3302      	adds	r3, #2
 8008264:	e7c5      	b.n	80081f2 <_printf_common+0x62>
 8008266:	2301      	movs	r3, #1
 8008268:	4622      	mov	r2, r4
 800826a:	4639      	mov	r1, r7
 800826c:	4630      	mov	r0, r6
 800826e:	47c0      	blx	r8
 8008270:	3001      	adds	r0, #1
 8008272:	d0e6      	beq.n	8008242 <_printf_common+0xb2>
 8008274:	f109 0901 	add.w	r9, r9, #1
 8008278:	e7d8      	b.n	800822c <_printf_common+0x9c>
	...

0800827c <_sbrk_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4c06      	ldr	r4, [pc, #24]	; (8008298 <_sbrk_r+0x1c>)
 8008280:	2300      	movs	r3, #0
 8008282:	4605      	mov	r5, r0
 8008284:	4608      	mov	r0, r1
 8008286:	6023      	str	r3, [r4, #0]
 8008288:	f7fd fb04 	bl	8005894 <_sbrk>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	d102      	bne.n	8008296 <_sbrk_r+0x1a>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	b103      	cbz	r3, 8008296 <_sbrk_r+0x1a>
 8008294:	602b      	str	r3, [r5, #0]
 8008296:	bd38      	pop	{r3, r4, r5, pc}
 8008298:	20000304 	.word	0x20000304

0800829c <_raise_r>:
 800829c:	291f      	cmp	r1, #31
 800829e:	b538      	push	{r3, r4, r5, lr}
 80082a0:	4604      	mov	r4, r0
 80082a2:	460d      	mov	r5, r1
 80082a4:	d904      	bls.n	80082b0 <_raise_r+0x14>
 80082a6:	2316      	movs	r3, #22
 80082a8:	6003      	str	r3, [r0, #0]
 80082aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082b2:	b112      	cbz	r2, 80082ba <_raise_r+0x1e>
 80082b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082b8:	b94b      	cbnz	r3, 80082ce <_raise_r+0x32>
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 f830 	bl	8008320 <_getpid_r>
 80082c0:	462a      	mov	r2, r5
 80082c2:	4601      	mov	r1, r0
 80082c4:	4620      	mov	r0, r4
 80082c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ca:	f000 b817 	b.w	80082fc <_kill_r>
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d00a      	beq.n	80082e8 <_raise_r+0x4c>
 80082d2:	1c59      	adds	r1, r3, #1
 80082d4:	d103      	bne.n	80082de <_raise_r+0x42>
 80082d6:	2316      	movs	r3, #22
 80082d8:	6003      	str	r3, [r0, #0]
 80082da:	2001      	movs	r0, #1
 80082dc:	e7e7      	b.n	80082ae <_raise_r+0x12>
 80082de:	2400      	movs	r4, #0
 80082e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082e4:	4628      	mov	r0, r5
 80082e6:	4798      	blx	r3
 80082e8:	2000      	movs	r0, #0
 80082ea:	e7e0      	b.n	80082ae <_raise_r+0x12>

080082ec <raise>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <raise+0xc>)
 80082ee:	4601      	mov	r1, r0
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f7ff bfd3 	b.w	800829c <_raise_r>
 80082f6:	bf00      	nop
 80082f8:	20000010 	.word	0x20000010

080082fc <_kill_r>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	4c07      	ldr	r4, [pc, #28]	; (800831c <_kill_r+0x20>)
 8008300:	2300      	movs	r3, #0
 8008302:	4605      	mov	r5, r0
 8008304:	4608      	mov	r0, r1
 8008306:	4611      	mov	r1, r2
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	f7fd faa9 	bl	8005860 <_kill>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	d102      	bne.n	8008318 <_kill_r+0x1c>
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	b103      	cbz	r3, 8008318 <_kill_r+0x1c>
 8008316:	602b      	str	r3, [r5, #0]
 8008318:	bd38      	pop	{r3, r4, r5, pc}
 800831a:	bf00      	nop
 800831c:	20000304 	.word	0x20000304

08008320 <_getpid_r>:
 8008320:	f7fd ba96 	b.w	8005850 <_getpid>

08008324 <quorem>:
 8008324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	6903      	ldr	r3, [r0, #16]
 800832a:	690c      	ldr	r4, [r1, #16]
 800832c:	42a3      	cmp	r3, r4
 800832e:	4680      	mov	r8, r0
 8008330:	f2c0 8082 	blt.w	8008438 <quorem+0x114>
 8008334:	3c01      	subs	r4, #1
 8008336:	f101 0714 	add.w	r7, r1, #20
 800833a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800833e:	f100 0614 	add.w	r6, r0, #20
 8008342:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008346:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800834a:	eb06 030c 	add.w	r3, r6, ip
 800834e:	3501      	adds	r5, #1
 8008350:	eb07 090c 	add.w	r9, r7, ip
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	fbb0 f5f5 	udiv	r5, r0, r5
 800835a:	b395      	cbz	r5, 80083c2 <quorem+0x9e>
 800835c:	f04f 0a00 	mov.w	sl, #0
 8008360:	4638      	mov	r0, r7
 8008362:	46b6      	mov	lr, r6
 8008364:	46d3      	mov	fp, sl
 8008366:	f850 2b04 	ldr.w	r2, [r0], #4
 800836a:	b293      	uxth	r3, r2
 800836c:	fb05 a303 	mla	r3, r5, r3, sl
 8008370:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008374:	b29b      	uxth	r3, r3
 8008376:	ebab 0303 	sub.w	r3, fp, r3
 800837a:	0c12      	lsrs	r2, r2, #16
 800837c:	f8de b000 	ldr.w	fp, [lr]
 8008380:	fb05 a202 	mla	r2, r5, r2, sl
 8008384:	fa13 f38b 	uxtah	r3, r3, fp
 8008388:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800838c:	fa1f fb82 	uxth.w	fp, r2
 8008390:	f8de 2000 	ldr.w	r2, [lr]
 8008394:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008398:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800839c:	b29b      	uxth	r3, r3
 800839e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083a2:	4581      	cmp	r9, r0
 80083a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80083a8:	f84e 3b04 	str.w	r3, [lr], #4
 80083ac:	d2db      	bcs.n	8008366 <quorem+0x42>
 80083ae:	f856 300c 	ldr.w	r3, [r6, ip]
 80083b2:	b933      	cbnz	r3, 80083c2 <quorem+0x9e>
 80083b4:	9b01      	ldr	r3, [sp, #4]
 80083b6:	3b04      	subs	r3, #4
 80083b8:	429e      	cmp	r6, r3
 80083ba:	461a      	mov	r2, r3
 80083bc:	d330      	bcc.n	8008420 <quorem+0xfc>
 80083be:	f8c8 4010 	str.w	r4, [r8, #16]
 80083c2:	4640      	mov	r0, r8
 80083c4:	f001 f81a 	bl	80093fc <__mcmp>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	db25      	blt.n	8008418 <quorem+0xf4>
 80083cc:	3501      	adds	r5, #1
 80083ce:	4630      	mov	r0, r6
 80083d0:	f04f 0c00 	mov.w	ip, #0
 80083d4:	f857 2b04 	ldr.w	r2, [r7], #4
 80083d8:	f8d0 e000 	ldr.w	lr, [r0]
 80083dc:	b293      	uxth	r3, r2
 80083de:	ebac 0303 	sub.w	r3, ip, r3
 80083e2:	0c12      	lsrs	r2, r2, #16
 80083e4:	fa13 f38e 	uxtah	r3, r3, lr
 80083e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80083ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083f6:	45b9      	cmp	r9, r7
 80083f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80083fc:	f840 3b04 	str.w	r3, [r0], #4
 8008400:	d2e8      	bcs.n	80083d4 <quorem+0xb0>
 8008402:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008406:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800840a:	b92a      	cbnz	r2, 8008418 <quorem+0xf4>
 800840c:	3b04      	subs	r3, #4
 800840e:	429e      	cmp	r6, r3
 8008410:	461a      	mov	r2, r3
 8008412:	d30b      	bcc.n	800842c <quorem+0x108>
 8008414:	f8c8 4010 	str.w	r4, [r8, #16]
 8008418:	4628      	mov	r0, r5
 800841a:	b003      	add	sp, #12
 800841c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008420:	6812      	ldr	r2, [r2, #0]
 8008422:	3b04      	subs	r3, #4
 8008424:	2a00      	cmp	r2, #0
 8008426:	d1ca      	bne.n	80083be <quorem+0x9a>
 8008428:	3c01      	subs	r4, #1
 800842a:	e7c5      	b.n	80083b8 <quorem+0x94>
 800842c:	6812      	ldr	r2, [r2, #0]
 800842e:	3b04      	subs	r3, #4
 8008430:	2a00      	cmp	r2, #0
 8008432:	d1ef      	bne.n	8008414 <quorem+0xf0>
 8008434:	3c01      	subs	r4, #1
 8008436:	e7ea      	b.n	800840e <quorem+0xea>
 8008438:	2000      	movs	r0, #0
 800843a:	e7ee      	b.n	800841a <quorem+0xf6>
 800843c:	0000      	movs	r0, r0
	...

08008440 <_dtoa_r>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	ec57 6b10 	vmov	r6, r7, d0
 8008448:	b097      	sub	sp, #92	; 0x5c
 800844a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800844c:	9106      	str	r1, [sp, #24]
 800844e:	4604      	mov	r4, r0
 8008450:	920b      	str	r2, [sp, #44]	; 0x2c
 8008452:	9312      	str	r3, [sp, #72]	; 0x48
 8008454:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008458:	e9cd 6700 	strd	r6, r7, [sp]
 800845c:	b93d      	cbnz	r5, 800846e <_dtoa_r+0x2e>
 800845e:	2010      	movs	r0, #16
 8008460:	f7ff fade 	bl	8007a20 <malloc>
 8008464:	6260      	str	r0, [r4, #36]	; 0x24
 8008466:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800846a:	6005      	str	r5, [r0, #0]
 800846c:	60c5      	str	r5, [r0, #12]
 800846e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	b151      	cbz	r1, 800848a <_dtoa_r+0x4a>
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	604a      	str	r2, [r1, #4]
 8008478:	2301      	movs	r3, #1
 800847a:	4093      	lsls	r3, r2
 800847c:	608b      	str	r3, [r1, #8]
 800847e:	4620      	mov	r0, r4
 8008480:	f000 fdda 	bl	8009038 <_Bfree>
 8008484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	1e3b      	subs	r3, r7, #0
 800848c:	bfbb      	ittet	lt
 800848e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008492:	9301      	strlt	r3, [sp, #4]
 8008494:	2300      	movge	r3, #0
 8008496:	2201      	movlt	r2, #1
 8008498:	bfac      	ite	ge
 800849a:	f8c8 3000 	strge.w	r3, [r8]
 800849e:	f8c8 2000 	strlt.w	r2, [r8]
 80084a2:	4baf      	ldr	r3, [pc, #700]	; (8008760 <_dtoa_r+0x320>)
 80084a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084a8:	ea33 0308 	bics.w	r3, r3, r8
 80084ac:	d114      	bne.n	80084d8 <_dtoa_r+0x98>
 80084ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	9b00      	ldr	r3, [sp, #0]
 80084b8:	b923      	cbnz	r3, 80084c4 <_dtoa_r+0x84>
 80084ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80084be:	2800      	cmp	r0, #0
 80084c0:	f000 8542 	beq.w	8008f48 <_dtoa_r+0xb08>
 80084c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008774 <_dtoa_r+0x334>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 8544 	beq.w	8008f58 <_dtoa_r+0xb18>
 80084d0:	f10b 0303 	add.w	r3, fp, #3
 80084d4:	f000 bd3e 	b.w	8008f54 <_dtoa_r+0xb14>
 80084d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80084dc:	2200      	movs	r2, #0
 80084de:	2300      	movs	r3, #0
 80084e0:	4630      	mov	r0, r6
 80084e2:	4639      	mov	r1, r7
 80084e4:	f7f8 fabc 	bl	8000a60 <__aeabi_dcmpeq>
 80084e8:	4681      	mov	r9, r0
 80084ea:	b168      	cbz	r0, 8008508 <_dtoa_r+0xc8>
 80084ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084ee:	2301      	movs	r3, #1
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 8524 	beq.w	8008f42 <_dtoa_r+0xb02>
 80084fa:	4b9a      	ldr	r3, [pc, #616]	; (8008764 <_dtoa_r+0x324>)
 80084fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80084fe:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008502:	6013      	str	r3, [r2, #0]
 8008504:	f000 bd28 	b.w	8008f58 <_dtoa_r+0xb18>
 8008508:	aa14      	add	r2, sp, #80	; 0x50
 800850a:	a915      	add	r1, sp, #84	; 0x54
 800850c:	ec47 6b10 	vmov	d0, r6, r7
 8008510:	4620      	mov	r0, r4
 8008512:	f000 ffea 	bl	80094ea <__d2b>
 8008516:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800851a:	9004      	str	r0, [sp, #16]
 800851c:	2d00      	cmp	r5, #0
 800851e:	d07c      	beq.n	800861a <_dtoa_r+0x1da>
 8008520:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008524:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008528:	46b2      	mov	sl, r6
 800852a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800852e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008532:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008536:	2200      	movs	r2, #0
 8008538:	4b8b      	ldr	r3, [pc, #556]	; (8008768 <_dtoa_r+0x328>)
 800853a:	4650      	mov	r0, sl
 800853c:	4659      	mov	r1, fp
 800853e:	f7f7 fe6f 	bl	8000220 <__aeabi_dsub>
 8008542:	a381      	add	r3, pc, #516	; (adr r3, 8008748 <_dtoa_r+0x308>)
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f7f8 f822 	bl	8000590 <__aeabi_dmul>
 800854c:	a380      	add	r3, pc, #512	; (adr r3, 8008750 <_dtoa_r+0x310>)
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f7f7 fe67 	bl	8000224 <__adddf3>
 8008556:	4606      	mov	r6, r0
 8008558:	4628      	mov	r0, r5
 800855a:	460f      	mov	r7, r1
 800855c:	f7f7 ffae 	bl	80004bc <__aeabi_i2d>
 8008560:	a37d      	add	r3, pc, #500	; (adr r3, 8008758 <_dtoa_r+0x318>)
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	f7f8 f813 	bl	8000590 <__aeabi_dmul>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4630      	mov	r0, r6
 8008570:	4639      	mov	r1, r7
 8008572:	f7f7 fe57 	bl	8000224 <__adddf3>
 8008576:	4606      	mov	r6, r0
 8008578:	460f      	mov	r7, r1
 800857a:	f7f8 fab9 	bl	8000af0 <__aeabi_d2iz>
 800857e:	2200      	movs	r2, #0
 8008580:	4682      	mov	sl, r0
 8008582:	2300      	movs	r3, #0
 8008584:	4630      	mov	r0, r6
 8008586:	4639      	mov	r1, r7
 8008588:	f7f8 fa74 	bl	8000a74 <__aeabi_dcmplt>
 800858c:	b148      	cbz	r0, 80085a2 <_dtoa_r+0x162>
 800858e:	4650      	mov	r0, sl
 8008590:	f7f7 ff94 	bl	80004bc <__aeabi_i2d>
 8008594:	4632      	mov	r2, r6
 8008596:	463b      	mov	r3, r7
 8008598:	f7f8 fa62 	bl	8000a60 <__aeabi_dcmpeq>
 800859c:	b908      	cbnz	r0, 80085a2 <_dtoa_r+0x162>
 800859e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80085a2:	f1ba 0f16 	cmp.w	sl, #22
 80085a6:	d859      	bhi.n	800865c <_dtoa_r+0x21c>
 80085a8:	4970      	ldr	r1, [pc, #448]	; (800876c <_dtoa_r+0x32c>)
 80085aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80085ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085b6:	f7f8 fa7b 	bl	8000ab0 <__aeabi_dcmpgt>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d050      	beq.n	8008660 <_dtoa_r+0x220>
 80085be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80085c2:	2300      	movs	r3, #0
 80085c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80085c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085c8:	1b5d      	subs	r5, r3, r5
 80085ca:	f1b5 0801 	subs.w	r8, r5, #1
 80085ce:	bf49      	itett	mi
 80085d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80085d4:	2300      	movpl	r3, #0
 80085d6:	9305      	strmi	r3, [sp, #20]
 80085d8:	f04f 0800 	movmi.w	r8, #0
 80085dc:	bf58      	it	pl
 80085de:	9305      	strpl	r3, [sp, #20]
 80085e0:	f1ba 0f00 	cmp.w	sl, #0
 80085e4:	db3e      	blt.n	8008664 <_dtoa_r+0x224>
 80085e6:	2300      	movs	r3, #0
 80085e8:	44d0      	add	r8, sl
 80085ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80085ee:	9307      	str	r3, [sp, #28]
 80085f0:	9b06      	ldr	r3, [sp, #24]
 80085f2:	2b09      	cmp	r3, #9
 80085f4:	f200 8090 	bhi.w	8008718 <_dtoa_r+0x2d8>
 80085f8:	2b05      	cmp	r3, #5
 80085fa:	bfc4      	itt	gt
 80085fc:	3b04      	subgt	r3, #4
 80085fe:	9306      	strgt	r3, [sp, #24]
 8008600:	9b06      	ldr	r3, [sp, #24]
 8008602:	f1a3 0302 	sub.w	r3, r3, #2
 8008606:	bfcc      	ite	gt
 8008608:	2500      	movgt	r5, #0
 800860a:	2501      	movle	r5, #1
 800860c:	2b03      	cmp	r3, #3
 800860e:	f200 808f 	bhi.w	8008730 <_dtoa_r+0x2f0>
 8008612:	e8df f003 	tbb	[pc, r3]
 8008616:	7f7d      	.short	0x7f7d
 8008618:	7131      	.short	0x7131
 800861a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800861e:	441d      	add	r5, r3
 8008620:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008624:	2820      	cmp	r0, #32
 8008626:	dd13      	ble.n	8008650 <_dtoa_r+0x210>
 8008628:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800862c:	9b00      	ldr	r3, [sp, #0]
 800862e:	fa08 f800 	lsl.w	r8, r8, r0
 8008632:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008636:	fa23 f000 	lsr.w	r0, r3, r0
 800863a:	ea48 0000 	orr.w	r0, r8, r0
 800863e:	f7f7 ff2d 	bl	800049c <__aeabi_ui2d>
 8008642:	2301      	movs	r3, #1
 8008644:	4682      	mov	sl, r0
 8008646:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800864a:	3d01      	subs	r5, #1
 800864c:	9313      	str	r3, [sp, #76]	; 0x4c
 800864e:	e772      	b.n	8008536 <_dtoa_r+0xf6>
 8008650:	9b00      	ldr	r3, [sp, #0]
 8008652:	f1c0 0020 	rsb	r0, r0, #32
 8008656:	fa03 f000 	lsl.w	r0, r3, r0
 800865a:	e7f0      	b.n	800863e <_dtoa_r+0x1fe>
 800865c:	2301      	movs	r3, #1
 800865e:	e7b1      	b.n	80085c4 <_dtoa_r+0x184>
 8008660:	900f      	str	r0, [sp, #60]	; 0x3c
 8008662:	e7b0      	b.n	80085c6 <_dtoa_r+0x186>
 8008664:	9b05      	ldr	r3, [sp, #20]
 8008666:	eba3 030a 	sub.w	r3, r3, sl
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	f1ca 0300 	rsb	r3, sl, #0
 8008670:	9307      	str	r3, [sp, #28]
 8008672:	2300      	movs	r3, #0
 8008674:	930e      	str	r3, [sp, #56]	; 0x38
 8008676:	e7bb      	b.n	80085f0 <_dtoa_r+0x1b0>
 8008678:	2301      	movs	r3, #1
 800867a:	930a      	str	r3, [sp, #40]	; 0x28
 800867c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800867e:	2b00      	cmp	r3, #0
 8008680:	dd59      	ble.n	8008736 <_dtoa_r+0x2f6>
 8008682:	9302      	str	r3, [sp, #8]
 8008684:	4699      	mov	r9, r3
 8008686:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008688:	2200      	movs	r2, #0
 800868a:	6072      	str	r2, [r6, #4]
 800868c:	2204      	movs	r2, #4
 800868e:	f102 0014 	add.w	r0, r2, #20
 8008692:	4298      	cmp	r0, r3
 8008694:	6871      	ldr	r1, [r6, #4]
 8008696:	d953      	bls.n	8008740 <_dtoa_r+0x300>
 8008698:	4620      	mov	r0, r4
 800869a:	f000 fc99 	bl	8008fd0 <_Balloc>
 800869e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086a0:	6030      	str	r0, [r6, #0]
 80086a2:	f1b9 0f0e 	cmp.w	r9, #14
 80086a6:	f8d3 b000 	ldr.w	fp, [r3]
 80086aa:	f200 80e6 	bhi.w	800887a <_dtoa_r+0x43a>
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	f000 80e3 	beq.w	800887a <_dtoa_r+0x43a>
 80086b4:	ed9d 7b00 	vldr	d7, [sp]
 80086b8:	f1ba 0f00 	cmp.w	sl, #0
 80086bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80086c0:	dd74      	ble.n	80087ac <_dtoa_r+0x36c>
 80086c2:	4a2a      	ldr	r2, [pc, #168]	; (800876c <_dtoa_r+0x32c>)
 80086c4:	f00a 030f 	and.w	r3, sl, #15
 80086c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086cc:	ed93 7b00 	vldr	d7, [r3]
 80086d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80086d4:	06f0      	lsls	r0, r6, #27
 80086d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80086da:	d565      	bpl.n	80087a8 <_dtoa_r+0x368>
 80086dc:	4b24      	ldr	r3, [pc, #144]	; (8008770 <_dtoa_r+0x330>)
 80086de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086e6:	f7f8 f87d 	bl	80007e4 <__aeabi_ddiv>
 80086ea:	e9cd 0100 	strd	r0, r1, [sp]
 80086ee:	f006 060f 	and.w	r6, r6, #15
 80086f2:	2503      	movs	r5, #3
 80086f4:	4f1e      	ldr	r7, [pc, #120]	; (8008770 <_dtoa_r+0x330>)
 80086f6:	e04c      	b.n	8008792 <_dtoa_r+0x352>
 80086f8:	2301      	movs	r3, #1
 80086fa:	930a      	str	r3, [sp, #40]	; 0x28
 80086fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086fe:	4453      	add	r3, sl
 8008700:	f103 0901 	add.w	r9, r3, #1
 8008704:	9302      	str	r3, [sp, #8]
 8008706:	464b      	mov	r3, r9
 8008708:	2b01      	cmp	r3, #1
 800870a:	bfb8      	it	lt
 800870c:	2301      	movlt	r3, #1
 800870e:	e7ba      	b.n	8008686 <_dtoa_r+0x246>
 8008710:	2300      	movs	r3, #0
 8008712:	e7b2      	b.n	800867a <_dtoa_r+0x23a>
 8008714:	2300      	movs	r3, #0
 8008716:	e7f0      	b.n	80086fa <_dtoa_r+0x2ba>
 8008718:	2501      	movs	r5, #1
 800871a:	2300      	movs	r3, #0
 800871c:	9306      	str	r3, [sp, #24]
 800871e:	950a      	str	r5, [sp, #40]	; 0x28
 8008720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008724:	9302      	str	r3, [sp, #8]
 8008726:	4699      	mov	r9, r3
 8008728:	2200      	movs	r2, #0
 800872a:	2312      	movs	r3, #18
 800872c:	920b      	str	r2, [sp, #44]	; 0x2c
 800872e:	e7aa      	b.n	8008686 <_dtoa_r+0x246>
 8008730:	2301      	movs	r3, #1
 8008732:	930a      	str	r3, [sp, #40]	; 0x28
 8008734:	e7f4      	b.n	8008720 <_dtoa_r+0x2e0>
 8008736:	2301      	movs	r3, #1
 8008738:	9302      	str	r3, [sp, #8]
 800873a:	4699      	mov	r9, r3
 800873c:	461a      	mov	r2, r3
 800873e:	e7f5      	b.n	800872c <_dtoa_r+0x2ec>
 8008740:	3101      	adds	r1, #1
 8008742:	6071      	str	r1, [r6, #4]
 8008744:	0052      	lsls	r2, r2, #1
 8008746:	e7a2      	b.n	800868e <_dtoa_r+0x24e>
 8008748:	636f4361 	.word	0x636f4361
 800874c:	3fd287a7 	.word	0x3fd287a7
 8008750:	8b60c8b3 	.word	0x8b60c8b3
 8008754:	3fc68a28 	.word	0x3fc68a28
 8008758:	509f79fb 	.word	0x509f79fb
 800875c:	3fd34413 	.word	0x3fd34413
 8008760:	7ff00000 	.word	0x7ff00000
 8008764:	08009931 	.word	0x08009931
 8008768:	3ff80000 	.word	0x3ff80000
 800876c:	08009968 	.word	0x08009968
 8008770:	08009940 	.word	0x08009940
 8008774:	0800993b 	.word	0x0800993b
 8008778:	07f1      	lsls	r1, r6, #31
 800877a:	d508      	bpl.n	800878e <_dtoa_r+0x34e>
 800877c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008784:	f7f7 ff04 	bl	8000590 <__aeabi_dmul>
 8008788:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800878c:	3501      	adds	r5, #1
 800878e:	1076      	asrs	r6, r6, #1
 8008790:	3708      	adds	r7, #8
 8008792:	2e00      	cmp	r6, #0
 8008794:	d1f0      	bne.n	8008778 <_dtoa_r+0x338>
 8008796:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800879a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800879e:	f7f8 f821 	bl	80007e4 <__aeabi_ddiv>
 80087a2:	e9cd 0100 	strd	r0, r1, [sp]
 80087a6:	e01a      	b.n	80087de <_dtoa_r+0x39e>
 80087a8:	2502      	movs	r5, #2
 80087aa:	e7a3      	b.n	80086f4 <_dtoa_r+0x2b4>
 80087ac:	f000 80a0 	beq.w	80088f0 <_dtoa_r+0x4b0>
 80087b0:	f1ca 0600 	rsb	r6, sl, #0
 80087b4:	4b9f      	ldr	r3, [pc, #636]	; (8008a34 <_dtoa_r+0x5f4>)
 80087b6:	4fa0      	ldr	r7, [pc, #640]	; (8008a38 <_dtoa_r+0x5f8>)
 80087b8:	f006 020f 	and.w	r2, r6, #15
 80087bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087c8:	f7f7 fee2 	bl	8000590 <__aeabi_dmul>
 80087cc:	e9cd 0100 	strd	r0, r1, [sp]
 80087d0:	1136      	asrs	r6, r6, #4
 80087d2:	2300      	movs	r3, #0
 80087d4:	2502      	movs	r5, #2
 80087d6:	2e00      	cmp	r6, #0
 80087d8:	d17f      	bne.n	80088da <_dtoa_r+0x49a>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e1      	bne.n	80087a2 <_dtoa_r+0x362>
 80087de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 8087 	beq.w	80088f4 <_dtoa_r+0x4b4>
 80087e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80087ea:	2200      	movs	r2, #0
 80087ec:	4b93      	ldr	r3, [pc, #588]	; (8008a3c <_dtoa_r+0x5fc>)
 80087ee:	4630      	mov	r0, r6
 80087f0:	4639      	mov	r1, r7
 80087f2:	f7f8 f93f 	bl	8000a74 <__aeabi_dcmplt>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d07c      	beq.n	80088f4 <_dtoa_r+0x4b4>
 80087fa:	f1b9 0f00 	cmp.w	r9, #0
 80087fe:	d079      	beq.n	80088f4 <_dtoa_r+0x4b4>
 8008800:	9b02      	ldr	r3, [sp, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	dd35      	ble.n	8008872 <_dtoa_r+0x432>
 8008806:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800880a:	9308      	str	r3, [sp, #32]
 800880c:	4639      	mov	r1, r7
 800880e:	2200      	movs	r2, #0
 8008810:	4b8b      	ldr	r3, [pc, #556]	; (8008a40 <_dtoa_r+0x600>)
 8008812:	4630      	mov	r0, r6
 8008814:	f7f7 febc 	bl	8000590 <__aeabi_dmul>
 8008818:	e9cd 0100 	strd	r0, r1, [sp]
 800881c:	9f02      	ldr	r7, [sp, #8]
 800881e:	3501      	adds	r5, #1
 8008820:	4628      	mov	r0, r5
 8008822:	f7f7 fe4b 	bl	80004bc <__aeabi_i2d>
 8008826:	e9dd 2300 	ldrd	r2, r3, [sp]
 800882a:	f7f7 feb1 	bl	8000590 <__aeabi_dmul>
 800882e:	2200      	movs	r2, #0
 8008830:	4b84      	ldr	r3, [pc, #528]	; (8008a44 <_dtoa_r+0x604>)
 8008832:	f7f7 fcf7 	bl	8000224 <__adddf3>
 8008836:	4605      	mov	r5, r0
 8008838:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800883c:	2f00      	cmp	r7, #0
 800883e:	d15d      	bne.n	80088fc <_dtoa_r+0x4bc>
 8008840:	2200      	movs	r2, #0
 8008842:	4b81      	ldr	r3, [pc, #516]	; (8008a48 <_dtoa_r+0x608>)
 8008844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008848:	f7f7 fcea 	bl	8000220 <__aeabi_dsub>
 800884c:	462a      	mov	r2, r5
 800884e:	4633      	mov	r3, r6
 8008850:	e9cd 0100 	strd	r0, r1, [sp]
 8008854:	f7f8 f92c 	bl	8000ab0 <__aeabi_dcmpgt>
 8008858:	2800      	cmp	r0, #0
 800885a:	f040 8288 	bne.w	8008d6e <_dtoa_r+0x92e>
 800885e:	462a      	mov	r2, r5
 8008860:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008864:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008868:	f7f8 f904 	bl	8000a74 <__aeabi_dcmplt>
 800886c:	2800      	cmp	r0, #0
 800886e:	f040 827c 	bne.w	8008d6a <_dtoa_r+0x92a>
 8008872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008876:	e9cd 2300 	strd	r2, r3, [sp]
 800887a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800887c:	2b00      	cmp	r3, #0
 800887e:	f2c0 8150 	blt.w	8008b22 <_dtoa_r+0x6e2>
 8008882:	f1ba 0f0e 	cmp.w	sl, #14
 8008886:	f300 814c 	bgt.w	8008b22 <_dtoa_r+0x6e2>
 800888a:	4b6a      	ldr	r3, [pc, #424]	; (8008a34 <_dtoa_r+0x5f4>)
 800888c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008890:	ed93 7b00 	vldr	d7, [r3]
 8008894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008896:	2b00      	cmp	r3, #0
 8008898:	ed8d 7b02 	vstr	d7, [sp, #8]
 800889c:	f280 80d8 	bge.w	8008a50 <_dtoa_r+0x610>
 80088a0:	f1b9 0f00 	cmp.w	r9, #0
 80088a4:	f300 80d4 	bgt.w	8008a50 <_dtoa_r+0x610>
 80088a8:	f040 825e 	bne.w	8008d68 <_dtoa_r+0x928>
 80088ac:	2200      	movs	r2, #0
 80088ae:	4b66      	ldr	r3, [pc, #408]	; (8008a48 <_dtoa_r+0x608>)
 80088b0:	ec51 0b17 	vmov	r0, r1, d7
 80088b4:	f7f7 fe6c 	bl	8000590 <__aeabi_dmul>
 80088b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088bc:	f7f8 f8ee 	bl	8000a9c <__aeabi_dcmpge>
 80088c0:	464f      	mov	r7, r9
 80088c2:	464e      	mov	r6, r9
 80088c4:	2800      	cmp	r0, #0
 80088c6:	f040 8234 	bne.w	8008d32 <_dtoa_r+0x8f2>
 80088ca:	2331      	movs	r3, #49	; 0x31
 80088cc:	f10b 0501 	add.w	r5, fp, #1
 80088d0:	f88b 3000 	strb.w	r3, [fp]
 80088d4:	f10a 0a01 	add.w	sl, sl, #1
 80088d8:	e22f      	b.n	8008d3a <_dtoa_r+0x8fa>
 80088da:	07f2      	lsls	r2, r6, #31
 80088dc:	d505      	bpl.n	80088ea <_dtoa_r+0x4aa>
 80088de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088e2:	f7f7 fe55 	bl	8000590 <__aeabi_dmul>
 80088e6:	3501      	adds	r5, #1
 80088e8:	2301      	movs	r3, #1
 80088ea:	1076      	asrs	r6, r6, #1
 80088ec:	3708      	adds	r7, #8
 80088ee:	e772      	b.n	80087d6 <_dtoa_r+0x396>
 80088f0:	2502      	movs	r5, #2
 80088f2:	e774      	b.n	80087de <_dtoa_r+0x39e>
 80088f4:	f8cd a020 	str.w	sl, [sp, #32]
 80088f8:	464f      	mov	r7, r9
 80088fa:	e791      	b.n	8008820 <_dtoa_r+0x3e0>
 80088fc:	4b4d      	ldr	r3, [pc, #308]	; (8008a34 <_dtoa_r+0x5f4>)
 80088fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008902:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008908:	2b00      	cmp	r3, #0
 800890a:	d047      	beq.n	800899c <_dtoa_r+0x55c>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	2000      	movs	r0, #0
 8008912:	494e      	ldr	r1, [pc, #312]	; (8008a4c <_dtoa_r+0x60c>)
 8008914:	f7f7 ff66 	bl	80007e4 <__aeabi_ddiv>
 8008918:	462a      	mov	r2, r5
 800891a:	4633      	mov	r3, r6
 800891c:	f7f7 fc80 	bl	8000220 <__aeabi_dsub>
 8008920:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008924:	465d      	mov	r5, fp
 8008926:	e9dd 0100 	ldrd	r0, r1, [sp]
 800892a:	f7f8 f8e1 	bl	8000af0 <__aeabi_d2iz>
 800892e:	4606      	mov	r6, r0
 8008930:	f7f7 fdc4 	bl	80004bc <__aeabi_i2d>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800893c:	f7f7 fc70 	bl	8000220 <__aeabi_dsub>
 8008940:	3630      	adds	r6, #48	; 0x30
 8008942:	f805 6b01 	strb.w	r6, [r5], #1
 8008946:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800894a:	e9cd 0100 	strd	r0, r1, [sp]
 800894e:	f7f8 f891 	bl	8000a74 <__aeabi_dcmplt>
 8008952:	2800      	cmp	r0, #0
 8008954:	d163      	bne.n	8008a1e <_dtoa_r+0x5de>
 8008956:	e9dd 2300 	ldrd	r2, r3, [sp]
 800895a:	2000      	movs	r0, #0
 800895c:	4937      	ldr	r1, [pc, #220]	; (8008a3c <_dtoa_r+0x5fc>)
 800895e:	f7f7 fc5f 	bl	8000220 <__aeabi_dsub>
 8008962:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008966:	f7f8 f885 	bl	8000a74 <__aeabi_dcmplt>
 800896a:	2800      	cmp	r0, #0
 800896c:	f040 80b7 	bne.w	8008ade <_dtoa_r+0x69e>
 8008970:	eba5 030b 	sub.w	r3, r5, fp
 8008974:	429f      	cmp	r7, r3
 8008976:	f77f af7c 	ble.w	8008872 <_dtoa_r+0x432>
 800897a:	2200      	movs	r2, #0
 800897c:	4b30      	ldr	r3, [pc, #192]	; (8008a40 <_dtoa_r+0x600>)
 800897e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008982:	f7f7 fe05 	bl	8000590 <__aeabi_dmul>
 8008986:	2200      	movs	r2, #0
 8008988:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800898c:	4b2c      	ldr	r3, [pc, #176]	; (8008a40 <_dtoa_r+0x600>)
 800898e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008992:	f7f7 fdfd 	bl	8000590 <__aeabi_dmul>
 8008996:	e9cd 0100 	strd	r0, r1, [sp]
 800899a:	e7c4      	b.n	8008926 <_dtoa_r+0x4e6>
 800899c:	462a      	mov	r2, r5
 800899e:	4633      	mov	r3, r6
 80089a0:	f7f7 fdf6 	bl	8000590 <__aeabi_dmul>
 80089a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80089a8:	eb0b 0507 	add.w	r5, fp, r7
 80089ac:	465e      	mov	r6, fp
 80089ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089b2:	f7f8 f89d 	bl	8000af0 <__aeabi_d2iz>
 80089b6:	4607      	mov	r7, r0
 80089b8:	f7f7 fd80 	bl	80004bc <__aeabi_i2d>
 80089bc:	3730      	adds	r7, #48	; 0x30
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089c6:	f7f7 fc2b 	bl	8000220 <__aeabi_dsub>
 80089ca:	f806 7b01 	strb.w	r7, [r6], #1
 80089ce:	42ae      	cmp	r6, r5
 80089d0:	e9cd 0100 	strd	r0, r1, [sp]
 80089d4:	f04f 0200 	mov.w	r2, #0
 80089d8:	d126      	bne.n	8008a28 <_dtoa_r+0x5e8>
 80089da:	4b1c      	ldr	r3, [pc, #112]	; (8008a4c <_dtoa_r+0x60c>)
 80089dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089e0:	f7f7 fc20 	bl	8000224 <__adddf3>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089ec:	f7f8 f860 	bl	8000ab0 <__aeabi_dcmpgt>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d174      	bne.n	8008ade <_dtoa_r+0x69e>
 80089f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80089f8:	2000      	movs	r0, #0
 80089fa:	4914      	ldr	r1, [pc, #80]	; (8008a4c <_dtoa_r+0x60c>)
 80089fc:	f7f7 fc10 	bl	8000220 <__aeabi_dsub>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a08:	f7f8 f834 	bl	8000a74 <__aeabi_dcmplt>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f43f af30 	beq.w	8008872 <_dtoa_r+0x432>
 8008a12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a16:	2b30      	cmp	r3, #48	; 0x30
 8008a18:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008a1c:	d002      	beq.n	8008a24 <_dtoa_r+0x5e4>
 8008a1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008a22:	e04a      	b.n	8008aba <_dtoa_r+0x67a>
 8008a24:	4615      	mov	r5, r2
 8008a26:	e7f4      	b.n	8008a12 <_dtoa_r+0x5d2>
 8008a28:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <_dtoa_r+0x600>)
 8008a2a:	f7f7 fdb1 	bl	8000590 <__aeabi_dmul>
 8008a2e:	e9cd 0100 	strd	r0, r1, [sp]
 8008a32:	e7bc      	b.n	80089ae <_dtoa_r+0x56e>
 8008a34:	08009968 	.word	0x08009968
 8008a38:	08009940 	.word	0x08009940
 8008a3c:	3ff00000 	.word	0x3ff00000
 8008a40:	40240000 	.word	0x40240000
 8008a44:	401c0000 	.word	0x401c0000
 8008a48:	40140000 	.word	0x40140000
 8008a4c:	3fe00000 	.word	0x3fe00000
 8008a50:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008a54:	465d      	mov	r5, fp
 8008a56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	f7f7 fec1 	bl	80007e4 <__aeabi_ddiv>
 8008a62:	f7f8 f845 	bl	8000af0 <__aeabi_d2iz>
 8008a66:	4680      	mov	r8, r0
 8008a68:	f7f7 fd28 	bl	80004bc <__aeabi_i2d>
 8008a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a70:	f7f7 fd8e 	bl	8000590 <__aeabi_dmul>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4630      	mov	r0, r6
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008a80:	f7f7 fbce 	bl	8000220 <__aeabi_dsub>
 8008a84:	f805 6b01 	strb.w	r6, [r5], #1
 8008a88:	eba5 060b 	sub.w	r6, r5, fp
 8008a8c:	45b1      	cmp	r9, r6
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	d139      	bne.n	8008b08 <_dtoa_r+0x6c8>
 8008a94:	f7f7 fbc6 	bl	8000224 <__adddf3>
 8008a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	460f      	mov	r7, r1
 8008aa0:	f7f8 f806 	bl	8000ab0 <__aeabi_dcmpgt>
 8008aa4:	b9c8      	cbnz	r0, 8008ada <_dtoa_r+0x69a>
 8008aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008aaa:	4630      	mov	r0, r6
 8008aac:	4639      	mov	r1, r7
 8008aae:	f7f7 ffd7 	bl	8000a60 <__aeabi_dcmpeq>
 8008ab2:	b110      	cbz	r0, 8008aba <_dtoa_r+0x67a>
 8008ab4:	f018 0f01 	tst.w	r8, #1
 8008ab8:	d10f      	bne.n	8008ada <_dtoa_r+0x69a>
 8008aba:	9904      	ldr	r1, [sp, #16]
 8008abc:	4620      	mov	r0, r4
 8008abe:	f000 fabb 	bl	8009038 <_Bfree>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ac6:	702b      	strb	r3, [r5, #0]
 8008ac8:	f10a 0301 	add.w	r3, sl, #1
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 8241 	beq.w	8008f58 <_dtoa_r+0xb18>
 8008ad6:	601d      	str	r5, [r3, #0]
 8008ad8:	e23e      	b.n	8008f58 <_dtoa_r+0xb18>
 8008ada:	f8cd a020 	str.w	sl, [sp, #32]
 8008ade:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008ae2:	2a39      	cmp	r2, #57	; 0x39
 8008ae4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008ae8:	d108      	bne.n	8008afc <_dtoa_r+0x6bc>
 8008aea:	459b      	cmp	fp, r3
 8008aec:	d10a      	bne.n	8008b04 <_dtoa_r+0x6c4>
 8008aee:	9b08      	ldr	r3, [sp, #32]
 8008af0:	3301      	adds	r3, #1
 8008af2:	9308      	str	r3, [sp, #32]
 8008af4:	2330      	movs	r3, #48	; 0x30
 8008af6:	f88b 3000 	strb.w	r3, [fp]
 8008afa:	465b      	mov	r3, fp
 8008afc:	781a      	ldrb	r2, [r3, #0]
 8008afe:	3201      	adds	r2, #1
 8008b00:	701a      	strb	r2, [r3, #0]
 8008b02:	e78c      	b.n	8008a1e <_dtoa_r+0x5de>
 8008b04:	461d      	mov	r5, r3
 8008b06:	e7ea      	b.n	8008ade <_dtoa_r+0x69e>
 8008b08:	2200      	movs	r2, #0
 8008b0a:	4b9b      	ldr	r3, [pc, #620]	; (8008d78 <_dtoa_r+0x938>)
 8008b0c:	f7f7 fd40 	bl	8000590 <__aeabi_dmul>
 8008b10:	2200      	movs	r2, #0
 8008b12:	2300      	movs	r3, #0
 8008b14:	4606      	mov	r6, r0
 8008b16:	460f      	mov	r7, r1
 8008b18:	f7f7 ffa2 	bl	8000a60 <__aeabi_dcmpeq>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d09a      	beq.n	8008a56 <_dtoa_r+0x616>
 8008b20:	e7cb      	b.n	8008aba <_dtoa_r+0x67a>
 8008b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b24:	2a00      	cmp	r2, #0
 8008b26:	f000 808b 	beq.w	8008c40 <_dtoa_r+0x800>
 8008b2a:	9a06      	ldr	r2, [sp, #24]
 8008b2c:	2a01      	cmp	r2, #1
 8008b2e:	dc6e      	bgt.n	8008c0e <_dtoa_r+0x7ce>
 8008b30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	d067      	beq.n	8008c06 <_dtoa_r+0x7c6>
 8008b36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b3a:	9f07      	ldr	r7, [sp, #28]
 8008b3c:	9d05      	ldr	r5, [sp, #20]
 8008b3e:	9a05      	ldr	r2, [sp, #20]
 8008b40:	2101      	movs	r1, #1
 8008b42:	441a      	add	r2, r3
 8008b44:	4620      	mov	r0, r4
 8008b46:	9205      	str	r2, [sp, #20]
 8008b48:	4498      	add	r8, r3
 8008b4a:	f000 fb15 	bl	8009178 <__i2b>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	2d00      	cmp	r5, #0
 8008b52:	dd0c      	ble.n	8008b6e <_dtoa_r+0x72e>
 8008b54:	f1b8 0f00 	cmp.w	r8, #0
 8008b58:	dd09      	ble.n	8008b6e <_dtoa_r+0x72e>
 8008b5a:	4545      	cmp	r5, r8
 8008b5c:	9a05      	ldr	r2, [sp, #20]
 8008b5e:	462b      	mov	r3, r5
 8008b60:	bfa8      	it	ge
 8008b62:	4643      	movge	r3, r8
 8008b64:	1ad2      	subs	r2, r2, r3
 8008b66:	9205      	str	r2, [sp, #20]
 8008b68:	1aed      	subs	r5, r5, r3
 8008b6a:	eba8 0803 	sub.w	r8, r8, r3
 8008b6e:	9b07      	ldr	r3, [sp, #28]
 8008b70:	b1eb      	cbz	r3, 8008bae <_dtoa_r+0x76e>
 8008b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d067      	beq.n	8008c48 <_dtoa_r+0x808>
 8008b78:	b18f      	cbz	r7, 8008b9e <_dtoa_r+0x75e>
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	463a      	mov	r2, r7
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f000 fb9a 	bl	80092b8 <__pow5mult>
 8008b84:	9a04      	ldr	r2, [sp, #16]
 8008b86:	4601      	mov	r1, r0
 8008b88:	4606      	mov	r6, r0
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f000 fafd 	bl	800918a <__multiply>
 8008b90:	9904      	ldr	r1, [sp, #16]
 8008b92:	9008      	str	r0, [sp, #32]
 8008b94:	4620      	mov	r0, r4
 8008b96:	f000 fa4f 	bl	8009038 <_Bfree>
 8008b9a:	9b08      	ldr	r3, [sp, #32]
 8008b9c:	9304      	str	r3, [sp, #16]
 8008b9e:	9b07      	ldr	r3, [sp, #28]
 8008ba0:	1bda      	subs	r2, r3, r7
 8008ba2:	d004      	beq.n	8008bae <_dtoa_r+0x76e>
 8008ba4:	9904      	ldr	r1, [sp, #16]
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 fb86 	bl	80092b8 <__pow5mult>
 8008bac:	9004      	str	r0, [sp, #16]
 8008bae:	2101      	movs	r1, #1
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 fae1 	bl	8009178 <__i2b>
 8008bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb8:	4607      	mov	r7, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 81d0 	beq.w	8008f60 <_dtoa_r+0xb20>
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f000 fb77 	bl	80092b8 <__pow5mult>
 8008bca:	9b06      	ldr	r3, [sp, #24]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	4607      	mov	r7, r0
 8008bd0:	dc40      	bgt.n	8008c54 <_dtoa_r+0x814>
 8008bd2:	9b00      	ldr	r3, [sp, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d139      	bne.n	8008c4c <_dtoa_r+0x80c>
 8008bd8:	9b01      	ldr	r3, [sp, #4]
 8008bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d136      	bne.n	8008c50 <_dtoa_r+0x810>
 8008be2:	9b01      	ldr	r3, [sp, #4]
 8008be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008be8:	0d1b      	lsrs	r3, r3, #20
 8008bea:	051b      	lsls	r3, r3, #20
 8008bec:	b12b      	cbz	r3, 8008bfa <_dtoa_r+0x7ba>
 8008bee:	9b05      	ldr	r3, [sp, #20]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	9305      	str	r3, [sp, #20]
 8008bf4:	f108 0801 	add.w	r8, r8, #1
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	9307      	str	r3, [sp, #28]
 8008bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d12a      	bne.n	8008c58 <_dtoa_r+0x818>
 8008c02:	2001      	movs	r0, #1
 8008c04:	e030      	b.n	8008c68 <_dtoa_r+0x828>
 8008c06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c0c:	e795      	b.n	8008b3a <_dtoa_r+0x6fa>
 8008c0e:	9b07      	ldr	r3, [sp, #28]
 8008c10:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8008c14:	42bb      	cmp	r3, r7
 8008c16:	bfbf      	itttt	lt
 8008c18:	9b07      	ldrlt	r3, [sp, #28]
 8008c1a:	9707      	strlt	r7, [sp, #28]
 8008c1c:	1afa      	sublt	r2, r7, r3
 8008c1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008c20:	bfbb      	ittet	lt
 8008c22:	189b      	addlt	r3, r3, r2
 8008c24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008c26:	1bdf      	subge	r7, r3, r7
 8008c28:	2700      	movlt	r7, #0
 8008c2a:	f1b9 0f00 	cmp.w	r9, #0
 8008c2e:	bfb5      	itete	lt
 8008c30:	9b05      	ldrlt	r3, [sp, #20]
 8008c32:	9d05      	ldrge	r5, [sp, #20]
 8008c34:	eba3 0509 	sublt.w	r5, r3, r9
 8008c38:	464b      	movge	r3, r9
 8008c3a:	bfb8      	it	lt
 8008c3c:	2300      	movlt	r3, #0
 8008c3e:	e77e      	b.n	8008b3e <_dtoa_r+0x6fe>
 8008c40:	9f07      	ldr	r7, [sp, #28]
 8008c42:	9d05      	ldr	r5, [sp, #20]
 8008c44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008c46:	e783      	b.n	8008b50 <_dtoa_r+0x710>
 8008c48:	9a07      	ldr	r2, [sp, #28]
 8008c4a:	e7ab      	b.n	8008ba4 <_dtoa_r+0x764>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e7d4      	b.n	8008bfa <_dtoa_r+0x7ba>
 8008c50:	9b00      	ldr	r3, [sp, #0]
 8008c52:	e7d2      	b.n	8008bfa <_dtoa_r+0x7ba>
 8008c54:	2300      	movs	r3, #0
 8008c56:	9307      	str	r3, [sp, #28]
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008c5e:	6918      	ldr	r0, [r3, #16]
 8008c60:	f000 fa3c 	bl	80090dc <__hi0bits>
 8008c64:	f1c0 0020 	rsb	r0, r0, #32
 8008c68:	4440      	add	r0, r8
 8008c6a:	f010 001f 	ands.w	r0, r0, #31
 8008c6e:	d047      	beq.n	8008d00 <_dtoa_r+0x8c0>
 8008c70:	f1c0 0320 	rsb	r3, r0, #32
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	dd3b      	ble.n	8008cf0 <_dtoa_r+0x8b0>
 8008c78:	9b05      	ldr	r3, [sp, #20]
 8008c7a:	f1c0 001c 	rsb	r0, r0, #28
 8008c7e:	4403      	add	r3, r0
 8008c80:	9305      	str	r3, [sp, #20]
 8008c82:	4405      	add	r5, r0
 8008c84:	4480      	add	r8, r0
 8008c86:	9b05      	ldr	r3, [sp, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dd05      	ble.n	8008c98 <_dtoa_r+0x858>
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	9904      	ldr	r1, [sp, #16]
 8008c90:	4620      	mov	r0, r4
 8008c92:	f000 fb5f 	bl	8009354 <__lshift>
 8008c96:	9004      	str	r0, [sp, #16]
 8008c98:	f1b8 0f00 	cmp.w	r8, #0
 8008c9c:	dd05      	ble.n	8008caa <_dtoa_r+0x86a>
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	4642      	mov	r2, r8
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f000 fb56 	bl	8009354 <__lshift>
 8008ca8:	4607      	mov	r7, r0
 8008caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cac:	b353      	cbz	r3, 8008d04 <_dtoa_r+0x8c4>
 8008cae:	4639      	mov	r1, r7
 8008cb0:	9804      	ldr	r0, [sp, #16]
 8008cb2:	f000 fba3 	bl	80093fc <__mcmp>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	da24      	bge.n	8008d04 <_dtoa_r+0x8c4>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	220a      	movs	r2, #10
 8008cbe:	9904      	ldr	r1, [sp, #16]
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f000 f9d0 	bl	8009066 <__multadd>
 8008cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc8:	9004      	str	r0, [sp, #16]
 8008cca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 814d 	beq.w	8008f6e <_dtoa_r+0xb2e>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	220a      	movs	r2, #10
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 f9c3 	bl	8009066 <__multadd>
 8008ce0:	9b02      	ldr	r3, [sp, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	dc4f      	bgt.n	8008d88 <_dtoa_r+0x948>
 8008ce8:	9b06      	ldr	r3, [sp, #24]
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	dd4c      	ble.n	8008d88 <_dtoa_r+0x948>
 8008cee:	e011      	b.n	8008d14 <_dtoa_r+0x8d4>
 8008cf0:	d0c9      	beq.n	8008c86 <_dtoa_r+0x846>
 8008cf2:	9a05      	ldr	r2, [sp, #20]
 8008cf4:	331c      	adds	r3, #28
 8008cf6:	441a      	add	r2, r3
 8008cf8:	9205      	str	r2, [sp, #20]
 8008cfa:	441d      	add	r5, r3
 8008cfc:	4498      	add	r8, r3
 8008cfe:	e7c2      	b.n	8008c86 <_dtoa_r+0x846>
 8008d00:	4603      	mov	r3, r0
 8008d02:	e7f6      	b.n	8008cf2 <_dtoa_r+0x8b2>
 8008d04:	f1b9 0f00 	cmp.w	r9, #0
 8008d08:	dc38      	bgt.n	8008d7c <_dtoa_r+0x93c>
 8008d0a:	9b06      	ldr	r3, [sp, #24]
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	dd35      	ble.n	8008d7c <_dtoa_r+0x93c>
 8008d10:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d14:	9b02      	ldr	r3, [sp, #8]
 8008d16:	b963      	cbnz	r3, 8008d32 <_dtoa_r+0x8f2>
 8008d18:	4639      	mov	r1, r7
 8008d1a:	2205      	movs	r2, #5
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 f9a2 	bl	8009066 <__multadd>
 8008d22:	4601      	mov	r1, r0
 8008d24:	4607      	mov	r7, r0
 8008d26:	9804      	ldr	r0, [sp, #16]
 8008d28:	f000 fb68 	bl	80093fc <__mcmp>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	f73f adcc 	bgt.w	80088ca <_dtoa_r+0x48a>
 8008d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d34:	465d      	mov	r5, fp
 8008d36:	ea6f 0a03 	mvn.w	sl, r3
 8008d3a:	f04f 0900 	mov.w	r9, #0
 8008d3e:	4639      	mov	r1, r7
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 f979 	bl	8009038 <_Bfree>
 8008d46:	2e00      	cmp	r6, #0
 8008d48:	f43f aeb7 	beq.w	8008aba <_dtoa_r+0x67a>
 8008d4c:	f1b9 0f00 	cmp.w	r9, #0
 8008d50:	d005      	beq.n	8008d5e <_dtoa_r+0x91e>
 8008d52:	45b1      	cmp	r9, r6
 8008d54:	d003      	beq.n	8008d5e <_dtoa_r+0x91e>
 8008d56:	4649      	mov	r1, r9
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 f96d 	bl	8009038 <_Bfree>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 f969 	bl	8009038 <_Bfree>
 8008d66:	e6a8      	b.n	8008aba <_dtoa_r+0x67a>
 8008d68:	2700      	movs	r7, #0
 8008d6a:	463e      	mov	r6, r7
 8008d6c:	e7e1      	b.n	8008d32 <_dtoa_r+0x8f2>
 8008d6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008d72:	463e      	mov	r6, r7
 8008d74:	e5a9      	b.n	80088ca <_dtoa_r+0x48a>
 8008d76:	bf00      	nop
 8008d78:	40240000 	.word	0x40240000
 8008d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80fa 	beq.w	8008f7c <_dtoa_r+0xb3c>
 8008d88:	2d00      	cmp	r5, #0
 8008d8a:	dd05      	ble.n	8008d98 <_dtoa_r+0x958>
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	462a      	mov	r2, r5
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 fadf 	bl	8009354 <__lshift>
 8008d96:	4606      	mov	r6, r0
 8008d98:	9b07      	ldr	r3, [sp, #28]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d04c      	beq.n	8008e38 <_dtoa_r+0x9f8>
 8008d9e:	6871      	ldr	r1, [r6, #4]
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 f915 	bl	8008fd0 <_Balloc>
 8008da6:	6932      	ldr	r2, [r6, #16]
 8008da8:	3202      	adds	r2, #2
 8008daa:	4605      	mov	r5, r0
 8008dac:	0092      	lsls	r2, r2, #2
 8008dae:	f106 010c 	add.w	r1, r6, #12
 8008db2:	300c      	adds	r0, #12
 8008db4:	f7fe fe44 	bl	8007a40 <memcpy>
 8008db8:	2201      	movs	r2, #1
 8008dba:	4629      	mov	r1, r5
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 fac9 	bl	8009354 <__lshift>
 8008dc2:	9b00      	ldr	r3, [sp, #0]
 8008dc4:	f8cd b014 	str.w	fp, [sp, #20]
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	46b1      	mov	r9, r6
 8008dce:	9307      	str	r3, [sp, #28]
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	9804      	ldr	r0, [sp, #16]
 8008dd6:	f7ff faa5 	bl	8008324 <quorem>
 8008dda:	4649      	mov	r1, r9
 8008ddc:	4605      	mov	r5, r0
 8008dde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008de2:	9804      	ldr	r0, [sp, #16]
 8008de4:	f000 fb0a 	bl	80093fc <__mcmp>
 8008de8:	4632      	mov	r2, r6
 8008dea:	9000      	str	r0, [sp, #0]
 8008dec:	4639      	mov	r1, r7
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 fb1e 	bl	8009430 <__mdiff>
 8008df4:	68c3      	ldr	r3, [r0, #12]
 8008df6:	4602      	mov	r2, r0
 8008df8:	bb03      	cbnz	r3, 8008e3c <_dtoa_r+0x9fc>
 8008dfa:	4601      	mov	r1, r0
 8008dfc:	9008      	str	r0, [sp, #32]
 8008dfe:	9804      	ldr	r0, [sp, #16]
 8008e00:	f000 fafc 	bl	80093fc <__mcmp>
 8008e04:	9a08      	ldr	r2, [sp, #32]
 8008e06:	4603      	mov	r3, r0
 8008e08:	4611      	mov	r1, r2
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	9308      	str	r3, [sp, #32]
 8008e0e:	f000 f913 	bl	8009038 <_Bfree>
 8008e12:	9b08      	ldr	r3, [sp, #32]
 8008e14:	b9a3      	cbnz	r3, 8008e40 <_dtoa_r+0xa00>
 8008e16:	9a06      	ldr	r2, [sp, #24]
 8008e18:	b992      	cbnz	r2, 8008e40 <_dtoa_r+0xa00>
 8008e1a:	9a07      	ldr	r2, [sp, #28]
 8008e1c:	b982      	cbnz	r2, 8008e40 <_dtoa_r+0xa00>
 8008e1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008e22:	d029      	beq.n	8008e78 <_dtoa_r+0xa38>
 8008e24:	9b00      	ldr	r3, [sp, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	dd01      	ble.n	8008e2e <_dtoa_r+0x9ee>
 8008e2a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008e2e:	9b05      	ldr	r3, [sp, #20]
 8008e30:	1c5d      	adds	r5, r3, #1
 8008e32:	f883 8000 	strb.w	r8, [r3]
 8008e36:	e782      	b.n	8008d3e <_dtoa_r+0x8fe>
 8008e38:	4630      	mov	r0, r6
 8008e3a:	e7c2      	b.n	8008dc2 <_dtoa_r+0x982>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e7e3      	b.n	8008e08 <_dtoa_r+0x9c8>
 8008e40:	9a00      	ldr	r2, [sp, #0]
 8008e42:	2a00      	cmp	r2, #0
 8008e44:	db04      	blt.n	8008e50 <_dtoa_r+0xa10>
 8008e46:	d125      	bne.n	8008e94 <_dtoa_r+0xa54>
 8008e48:	9a06      	ldr	r2, [sp, #24]
 8008e4a:	bb1a      	cbnz	r2, 8008e94 <_dtoa_r+0xa54>
 8008e4c:	9a07      	ldr	r2, [sp, #28]
 8008e4e:	bb0a      	cbnz	r2, 8008e94 <_dtoa_r+0xa54>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	ddec      	ble.n	8008e2e <_dtoa_r+0x9ee>
 8008e54:	2201      	movs	r2, #1
 8008e56:	9904      	ldr	r1, [sp, #16]
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f000 fa7b 	bl	8009354 <__lshift>
 8008e5e:	4639      	mov	r1, r7
 8008e60:	9004      	str	r0, [sp, #16]
 8008e62:	f000 facb 	bl	80093fc <__mcmp>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	dc03      	bgt.n	8008e72 <_dtoa_r+0xa32>
 8008e6a:	d1e0      	bne.n	8008e2e <_dtoa_r+0x9ee>
 8008e6c:	f018 0f01 	tst.w	r8, #1
 8008e70:	d0dd      	beq.n	8008e2e <_dtoa_r+0x9ee>
 8008e72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008e76:	d1d8      	bne.n	8008e2a <_dtoa_r+0x9ea>
 8008e78:	9b05      	ldr	r3, [sp, #20]
 8008e7a:	9a05      	ldr	r2, [sp, #20]
 8008e7c:	1c5d      	adds	r5, r3, #1
 8008e7e:	2339      	movs	r3, #57	; 0x39
 8008e80:	7013      	strb	r3, [r2, #0]
 8008e82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e86:	2b39      	cmp	r3, #57	; 0x39
 8008e88:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008e8c:	d04f      	beq.n	8008f2e <_dtoa_r+0xaee>
 8008e8e:	3301      	adds	r3, #1
 8008e90:	7013      	strb	r3, [r2, #0]
 8008e92:	e754      	b.n	8008d3e <_dtoa_r+0x8fe>
 8008e94:	9a05      	ldr	r2, [sp, #20]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f102 0501 	add.w	r5, r2, #1
 8008e9c:	dd06      	ble.n	8008eac <_dtoa_r+0xa6c>
 8008e9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ea2:	d0e9      	beq.n	8008e78 <_dtoa_r+0xa38>
 8008ea4:	f108 0801 	add.w	r8, r8, #1
 8008ea8:	9b05      	ldr	r3, [sp, #20]
 8008eaa:	e7c2      	b.n	8008e32 <_dtoa_r+0x9f2>
 8008eac:	9a02      	ldr	r2, [sp, #8]
 8008eae:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008eb2:	eba5 030b 	sub.w	r3, r5, fp
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d021      	beq.n	8008efe <_dtoa_r+0xabe>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	220a      	movs	r2, #10
 8008ebe:	9904      	ldr	r1, [sp, #16]
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 f8d0 	bl	8009066 <__multadd>
 8008ec6:	45b1      	cmp	r9, r6
 8008ec8:	9004      	str	r0, [sp, #16]
 8008eca:	f04f 0300 	mov.w	r3, #0
 8008ece:	f04f 020a 	mov.w	r2, #10
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	d105      	bne.n	8008ee4 <_dtoa_r+0xaa4>
 8008ed8:	f000 f8c5 	bl	8009066 <__multadd>
 8008edc:	4681      	mov	r9, r0
 8008ede:	4606      	mov	r6, r0
 8008ee0:	9505      	str	r5, [sp, #20]
 8008ee2:	e776      	b.n	8008dd2 <_dtoa_r+0x992>
 8008ee4:	f000 f8bf 	bl	8009066 <__multadd>
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4681      	mov	r9, r0
 8008eec:	2300      	movs	r3, #0
 8008eee:	220a      	movs	r2, #10
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 f8b8 	bl	8009066 <__multadd>
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	e7f2      	b.n	8008ee0 <_dtoa_r+0xaa0>
 8008efa:	f04f 0900 	mov.w	r9, #0
 8008efe:	2201      	movs	r2, #1
 8008f00:	9904      	ldr	r1, [sp, #16]
 8008f02:	4620      	mov	r0, r4
 8008f04:	f000 fa26 	bl	8009354 <__lshift>
 8008f08:	4639      	mov	r1, r7
 8008f0a:	9004      	str	r0, [sp, #16]
 8008f0c:	f000 fa76 	bl	80093fc <__mcmp>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	dcb6      	bgt.n	8008e82 <_dtoa_r+0xa42>
 8008f14:	d102      	bne.n	8008f1c <_dtoa_r+0xadc>
 8008f16:	f018 0f01 	tst.w	r8, #1
 8008f1a:	d1b2      	bne.n	8008e82 <_dtoa_r+0xa42>
 8008f1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f20:	2b30      	cmp	r3, #48	; 0x30
 8008f22:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008f26:	f47f af0a 	bne.w	8008d3e <_dtoa_r+0x8fe>
 8008f2a:	4615      	mov	r5, r2
 8008f2c:	e7f6      	b.n	8008f1c <_dtoa_r+0xadc>
 8008f2e:	4593      	cmp	fp, r2
 8008f30:	d105      	bne.n	8008f3e <_dtoa_r+0xafe>
 8008f32:	2331      	movs	r3, #49	; 0x31
 8008f34:	f10a 0a01 	add.w	sl, sl, #1
 8008f38:	f88b 3000 	strb.w	r3, [fp]
 8008f3c:	e6ff      	b.n	8008d3e <_dtoa_r+0x8fe>
 8008f3e:	4615      	mov	r5, r2
 8008f40:	e79f      	b.n	8008e82 <_dtoa_r+0xa42>
 8008f42:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008fa8 <_dtoa_r+0xb68>
 8008f46:	e007      	b.n	8008f58 <_dtoa_r+0xb18>
 8008f48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f4a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008fac <_dtoa_r+0xb6c>
 8008f4e:	b11b      	cbz	r3, 8008f58 <_dtoa_r+0xb18>
 8008f50:	f10b 0308 	add.w	r3, fp, #8
 8008f54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	4658      	mov	r0, fp
 8008f5a:	b017      	add	sp, #92	; 0x5c
 8008f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f60:	9b06      	ldr	r3, [sp, #24]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	f77f ae35 	ble.w	8008bd2 <_dtoa_r+0x792>
 8008f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f6a:	9307      	str	r3, [sp, #28]
 8008f6c:	e649      	b.n	8008c02 <_dtoa_r+0x7c2>
 8008f6e:	9b02      	ldr	r3, [sp, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	dc03      	bgt.n	8008f7c <_dtoa_r+0xb3c>
 8008f74:	9b06      	ldr	r3, [sp, #24]
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	f73f aecc 	bgt.w	8008d14 <_dtoa_r+0x8d4>
 8008f7c:	465d      	mov	r5, fp
 8008f7e:	4639      	mov	r1, r7
 8008f80:	9804      	ldr	r0, [sp, #16]
 8008f82:	f7ff f9cf 	bl	8008324 <quorem>
 8008f86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008f8a:	f805 8b01 	strb.w	r8, [r5], #1
 8008f8e:	9a02      	ldr	r2, [sp, #8]
 8008f90:	eba5 030b 	sub.w	r3, r5, fp
 8008f94:	429a      	cmp	r2, r3
 8008f96:	ddb0      	ble.n	8008efa <_dtoa_r+0xaba>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	220a      	movs	r2, #10
 8008f9c:	9904      	ldr	r1, [sp, #16]
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f000 f861 	bl	8009066 <__multadd>
 8008fa4:	9004      	str	r0, [sp, #16]
 8008fa6:	e7ea      	b.n	8008f7e <_dtoa_r+0xb3e>
 8008fa8:	08009930 	.word	0x08009930
 8008fac:	08009932 	.word	0x08009932

08008fb0 <_localeconv_r>:
 8008fb0:	4b04      	ldr	r3, [pc, #16]	; (8008fc4 <_localeconv_r+0x14>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6a18      	ldr	r0, [r3, #32]
 8008fb6:	4b04      	ldr	r3, [pc, #16]	; (8008fc8 <_localeconv_r+0x18>)
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	bf08      	it	eq
 8008fbc:	4618      	moveq	r0, r3
 8008fbe:	30f0      	adds	r0, #240	; 0xf0
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20000010 	.word	0x20000010
 8008fc8:	20000074 	.word	0x20000074

08008fcc <__malloc_lock>:
 8008fcc:	4770      	bx	lr

08008fce <__malloc_unlock>:
 8008fce:	4770      	bx	lr

08008fd0 <_Balloc>:
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	460e      	mov	r6, r1
 8008fd8:	b93d      	cbnz	r5, 8008fea <_Balloc+0x1a>
 8008fda:	2010      	movs	r0, #16
 8008fdc:	f7fe fd20 	bl	8007a20 <malloc>
 8008fe0:	6260      	str	r0, [r4, #36]	; 0x24
 8008fe2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008fe6:	6005      	str	r5, [r0, #0]
 8008fe8:	60c5      	str	r5, [r0, #12]
 8008fea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008fec:	68eb      	ldr	r3, [r5, #12]
 8008fee:	b183      	cbz	r3, 8009012 <_Balloc+0x42>
 8008ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008ff8:	b9b8      	cbnz	r0, 800902a <_Balloc+0x5a>
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	fa01 f506 	lsl.w	r5, r1, r6
 8009000:	1d6a      	adds	r2, r5, #5
 8009002:	0092      	lsls	r2, r2, #2
 8009004:	4620      	mov	r0, r4
 8009006:	f000 fabf 	bl	8009588 <_calloc_r>
 800900a:	b160      	cbz	r0, 8009026 <_Balloc+0x56>
 800900c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009010:	e00e      	b.n	8009030 <_Balloc+0x60>
 8009012:	2221      	movs	r2, #33	; 0x21
 8009014:	2104      	movs	r1, #4
 8009016:	4620      	mov	r0, r4
 8009018:	f000 fab6 	bl	8009588 <_calloc_r>
 800901c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800901e:	60e8      	str	r0, [r5, #12]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e4      	bne.n	8008ff0 <_Balloc+0x20>
 8009026:	2000      	movs	r0, #0
 8009028:	bd70      	pop	{r4, r5, r6, pc}
 800902a:	6802      	ldr	r2, [r0, #0]
 800902c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009030:	2300      	movs	r3, #0
 8009032:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009036:	e7f7      	b.n	8009028 <_Balloc+0x58>

08009038 <_Bfree>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800903c:	4606      	mov	r6, r0
 800903e:	460d      	mov	r5, r1
 8009040:	b93c      	cbnz	r4, 8009052 <_Bfree+0x1a>
 8009042:	2010      	movs	r0, #16
 8009044:	f7fe fcec 	bl	8007a20 <malloc>
 8009048:	6270      	str	r0, [r6, #36]	; 0x24
 800904a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800904e:	6004      	str	r4, [r0, #0]
 8009050:	60c4      	str	r4, [r0, #12]
 8009052:	b13d      	cbz	r5, 8009064 <_Bfree+0x2c>
 8009054:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009056:	686a      	ldr	r2, [r5, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800905e:	6029      	str	r1, [r5, #0]
 8009060:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009064:	bd70      	pop	{r4, r5, r6, pc}

08009066 <__multadd>:
 8009066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906a:	690d      	ldr	r5, [r1, #16]
 800906c:	461f      	mov	r7, r3
 800906e:	4606      	mov	r6, r0
 8009070:	460c      	mov	r4, r1
 8009072:	f101 0c14 	add.w	ip, r1, #20
 8009076:	2300      	movs	r3, #0
 8009078:	f8dc 0000 	ldr.w	r0, [ip]
 800907c:	b281      	uxth	r1, r0
 800907e:	fb02 7101 	mla	r1, r2, r1, r7
 8009082:	0c0f      	lsrs	r7, r1, #16
 8009084:	0c00      	lsrs	r0, r0, #16
 8009086:	fb02 7000 	mla	r0, r2, r0, r7
 800908a:	b289      	uxth	r1, r1
 800908c:	3301      	adds	r3, #1
 800908e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009092:	429d      	cmp	r5, r3
 8009094:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009098:	f84c 1b04 	str.w	r1, [ip], #4
 800909c:	dcec      	bgt.n	8009078 <__multadd+0x12>
 800909e:	b1d7      	cbz	r7, 80090d6 <__multadd+0x70>
 80090a0:	68a3      	ldr	r3, [r4, #8]
 80090a2:	42ab      	cmp	r3, r5
 80090a4:	dc12      	bgt.n	80090cc <__multadd+0x66>
 80090a6:	6861      	ldr	r1, [r4, #4]
 80090a8:	4630      	mov	r0, r6
 80090aa:	3101      	adds	r1, #1
 80090ac:	f7ff ff90 	bl	8008fd0 <_Balloc>
 80090b0:	6922      	ldr	r2, [r4, #16]
 80090b2:	3202      	adds	r2, #2
 80090b4:	f104 010c 	add.w	r1, r4, #12
 80090b8:	4680      	mov	r8, r0
 80090ba:	0092      	lsls	r2, r2, #2
 80090bc:	300c      	adds	r0, #12
 80090be:	f7fe fcbf 	bl	8007a40 <memcpy>
 80090c2:	4621      	mov	r1, r4
 80090c4:	4630      	mov	r0, r6
 80090c6:	f7ff ffb7 	bl	8009038 <_Bfree>
 80090ca:	4644      	mov	r4, r8
 80090cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090d0:	3501      	adds	r5, #1
 80090d2:	615f      	str	r7, [r3, #20]
 80090d4:	6125      	str	r5, [r4, #16]
 80090d6:	4620      	mov	r0, r4
 80090d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080090dc <__hi0bits>:
 80090dc:	0c02      	lsrs	r2, r0, #16
 80090de:	0412      	lsls	r2, r2, #16
 80090e0:	4603      	mov	r3, r0
 80090e2:	b9b2      	cbnz	r2, 8009112 <__hi0bits+0x36>
 80090e4:	0403      	lsls	r3, r0, #16
 80090e6:	2010      	movs	r0, #16
 80090e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80090ec:	bf04      	itt	eq
 80090ee:	021b      	lsleq	r3, r3, #8
 80090f0:	3008      	addeq	r0, #8
 80090f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80090f6:	bf04      	itt	eq
 80090f8:	011b      	lsleq	r3, r3, #4
 80090fa:	3004      	addeq	r0, #4
 80090fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009100:	bf04      	itt	eq
 8009102:	009b      	lsleq	r3, r3, #2
 8009104:	3002      	addeq	r0, #2
 8009106:	2b00      	cmp	r3, #0
 8009108:	db06      	blt.n	8009118 <__hi0bits+0x3c>
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	d503      	bpl.n	8009116 <__hi0bits+0x3a>
 800910e:	3001      	adds	r0, #1
 8009110:	4770      	bx	lr
 8009112:	2000      	movs	r0, #0
 8009114:	e7e8      	b.n	80090e8 <__hi0bits+0xc>
 8009116:	2020      	movs	r0, #32
 8009118:	4770      	bx	lr

0800911a <__lo0bits>:
 800911a:	6803      	ldr	r3, [r0, #0]
 800911c:	f013 0207 	ands.w	r2, r3, #7
 8009120:	4601      	mov	r1, r0
 8009122:	d00b      	beq.n	800913c <__lo0bits+0x22>
 8009124:	07da      	lsls	r2, r3, #31
 8009126:	d423      	bmi.n	8009170 <__lo0bits+0x56>
 8009128:	0798      	lsls	r0, r3, #30
 800912a:	bf49      	itett	mi
 800912c:	085b      	lsrmi	r3, r3, #1
 800912e:	089b      	lsrpl	r3, r3, #2
 8009130:	2001      	movmi	r0, #1
 8009132:	600b      	strmi	r3, [r1, #0]
 8009134:	bf5c      	itt	pl
 8009136:	600b      	strpl	r3, [r1, #0]
 8009138:	2002      	movpl	r0, #2
 800913a:	4770      	bx	lr
 800913c:	b298      	uxth	r0, r3
 800913e:	b9a8      	cbnz	r0, 800916c <__lo0bits+0x52>
 8009140:	0c1b      	lsrs	r3, r3, #16
 8009142:	2010      	movs	r0, #16
 8009144:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009148:	bf04      	itt	eq
 800914a:	0a1b      	lsreq	r3, r3, #8
 800914c:	3008      	addeq	r0, #8
 800914e:	071a      	lsls	r2, r3, #28
 8009150:	bf04      	itt	eq
 8009152:	091b      	lsreq	r3, r3, #4
 8009154:	3004      	addeq	r0, #4
 8009156:	079a      	lsls	r2, r3, #30
 8009158:	bf04      	itt	eq
 800915a:	089b      	lsreq	r3, r3, #2
 800915c:	3002      	addeq	r0, #2
 800915e:	07da      	lsls	r2, r3, #31
 8009160:	d402      	bmi.n	8009168 <__lo0bits+0x4e>
 8009162:	085b      	lsrs	r3, r3, #1
 8009164:	d006      	beq.n	8009174 <__lo0bits+0x5a>
 8009166:	3001      	adds	r0, #1
 8009168:	600b      	str	r3, [r1, #0]
 800916a:	4770      	bx	lr
 800916c:	4610      	mov	r0, r2
 800916e:	e7e9      	b.n	8009144 <__lo0bits+0x2a>
 8009170:	2000      	movs	r0, #0
 8009172:	4770      	bx	lr
 8009174:	2020      	movs	r0, #32
 8009176:	4770      	bx	lr

08009178 <__i2b>:
 8009178:	b510      	push	{r4, lr}
 800917a:	460c      	mov	r4, r1
 800917c:	2101      	movs	r1, #1
 800917e:	f7ff ff27 	bl	8008fd0 <_Balloc>
 8009182:	2201      	movs	r2, #1
 8009184:	6144      	str	r4, [r0, #20]
 8009186:	6102      	str	r2, [r0, #16]
 8009188:	bd10      	pop	{r4, pc}

0800918a <__multiply>:
 800918a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918e:	4614      	mov	r4, r2
 8009190:	690a      	ldr	r2, [r1, #16]
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	429a      	cmp	r2, r3
 8009196:	bfb8      	it	lt
 8009198:	460b      	movlt	r3, r1
 800919a:	4688      	mov	r8, r1
 800919c:	bfbc      	itt	lt
 800919e:	46a0      	movlt	r8, r4
 80091a0:	461c      	movlt	r4, r3
 80091a2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091a6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80091aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091ae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091b2:	eb07 0609 	add.w	r6, r7, r9
 80091b6:	42b3      	cmp	r3, r6
 80091b8:	bfb8      	it	lt
 80091ba:	3101      	addlt	r1, #1
 80091bc:	f7ff ff08 	bl	8008fd0 <_Balloc>
 80091c0:	f100 0514 	add.w	r5, r0, #20
 80091c4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80091c8:	462b      	mov	r3, r5
 80091ca:	2200      	movs	r2, #0
 80091cc:	4573      	cmp	r3, lr
 80091ce:	d316      	bcc.n	80091fe <__multiply+0x74>
 80091d0:	f104 0214 	add.w	r2, r4, #20
 80091d4:	f108 0114 	add.w	r1, r8, #20
 80091d8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80091dc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	9b00      	ldr	r3, [sp, #0]
 80091e4:	9201      	str	r2, [sp, #4]
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d80c      	bhi.n	8009204 <__multiply+0x7a>
 80091ea:	2e00      	cmp	r6, #0
 80091ec:	dd03      	ble.n	80091f6 <__multiply+0x6c>
 80091ee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d05d      	beq.n	80092b2 <__multiply+0x128>
 80091f6:	6106      	str	r6, [r0, #16]
 80091f8:	b003      	add	sp, #12
 80091fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fe:	f843 2b04 	str.w	r2, [r3], #4
 8009202:	e7e3      	b.n	80091cc <__multiply+0x42>
 8009204:	f8b2 b000 	ldrh.w	fp, [r2]
 8009208:	f1bb 0f00 	cmp.w	fp, #0
 800920c:	d023      	beq.n	8009256 <__multiply+0xcc>
 800920e:	4689      	mov	r9, r1
 8009210:	46ac      	mov	ip, r5
 8009212:	f04f 0800 	mov.w	r8, #0
 8009216:	f859 4b04 	ldr.w	r4, [r9], #4
 800921a:	f8dc a000 	ldr.w	sl, [ip]
 800921e:	b2a3      	uxth	r3, r4
 8009220:	fa1f fa8a 	uxth.w	sl, sl
 8009224:	fb0b a303 	mla	r3, fp, r3, sl
 8009228:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800922c:	f8dc 4000 	ldr.w	r4, [ip]
 8009230:	4443      	add	r3, r8
 8009232:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009236:	fb0b 840a 	mla	r4, fp, sl, r8
 800923a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800923e:	46e2      	mov	sl, ip
 8009240:	b29b      	uxth	r3, r3
 8009242:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009246:	454f      	cmp	r7, r9
 8009248:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800924c:	f84a 3b04 	str.w	r3, [sl], #4
 8009250:	d82b      	bhi.n	80092aa <__multiply+0x120>
 8009252:	f8cc 8004 	str.w	r8, [ip, #4]
 8009256:	9b01      	ldr	r3, [sp, #4]
 8009258:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800925c:	3204      	adds	r2, #4
 800925e:	f1ba 0f00 	cmp.w	sl, #0
 8009262:	d020      	beq.n	80092a6 <__multiply+0x11c>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	4689      	mov	r9, r1
 8009268:	46a8      	mov	r8, r5
 800926a:	f04f 0b00 	mov.w	fp, #0
 800926e:	f8b9 c000 	ldrh.w	ip, [r9]
 8009272:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009276:	fb0a 440c 	mla	r4, sl, ip, r4
 800927a:	445c      	add	r4, fp
 800927c:	46c4      	mov	ip, r8
 800927e:	b29b      	uxth	r3, r3
 8009280:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009284:	f84c 3b04 	str.w	r3, [ip], #4
 8009288:	f859 3b04 	ldr.w	r3, [r9], #4
 800928c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009290:	0c1b      	lsrs	r3, r3, #16
 8009292:	fb0a b303 	mla	r3, sl, r3, fp
 8009296:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800929a:	454f      	cmp	r7, r9
 800929c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80092a0:	d805      	bhi.n	80092ae <__multiply+0x124>
 80092a2:	f8c8 3004 	str.w	r3, [r8, #4]
 80092a6:	3504      	adds	r5, #4
 80092a8:	e79b      	b.n	80091e2 <__multiply+0x58>
 80092aa:	46d4      	mov	ip, sl
 80092ac:	e7b3      	b.n	8009216 <__multiply+0x8c>
 80092ae:	46e0      	mov	r8, ip
 80092b0:	e7dd      	b.n	800926e <__multiply+0xe4>
 80092b2:	3e01      	subs	r6, #1
 80092b4:	e799      	b.n	80091ea <__multiply+0x60>
	...

080092b8 <__pow5mult>:
 80092b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092bc:	4615      	mov	r5, r2
 80092be:	f012 0203 	ands.w	r2, r2, #3
 80092c2:	4606      	mov	r6, r0
 80092c4:	460f      	mov	r7, r1
 80092c6:	d007      	beq.n	80092d8 <__pow5mult+0x20>
 80092c8:	3a01      	subs	r2, #1
 80092ca:	4c21      	ldr	r4, [pc, #132]	; (8009350 <__pow5mult+0x98>)
 80092cc:	2300      	movs	r3, #0
 80092ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092d2:	f7ff fec8 	bl	8009066 <__multadd>
 80092d6:	4607      	mov	r7, r0
 80092d8:	10ad      	asrs	r5, r5, #2
 80092da:	d035      	beq.n	8009348 <__pow5mult+0x90>
 80092dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092de:	b93c      	cbnz	r4, 80092f0 <__pow5mult+0x38>
 80092e0:	2010      	movs	r0, #16
 80092e2:	f7fe fb9d 	bl	8007a20 <malloc>
 80092e6:	6270      	str	r0, [r6, #36]	; 0x24
 80092e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092ec:	6004      	str	r4, [r0, #0]
 80092ee:	60c4      	str	r4, [r0, #12]
 80092f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092f8:	b94c      	cbnz	r4, 800930e <__pow5mult+0x56>
 80092fa:	f240 2171 	movw	r1, #625	; 0x271
 80092fe:	4630      	mov	r0, r6
 8009300:	f7ff ff3a 	bl	8009178 <__i2b>
 8009304:	2300      	movs	r3, #0
 8009306:	f8c8 0008 	str.w	r0, [r8, #8]
 800930a:	4604      	mov	r4, r0
 800930c:	6003      	str	r3, [r0, #0]
 800930e:	f04f 0800 	mov.w	r8, #0
 8009312:	07eb      	lsls	r3, r5, #31
 8009314:	d50a      	bpl.n	800932c <__pow5mult+0x74>
 8009316:	4639      	mov	r1, r7
 8009318:	4622      	mov	r2, r4
 800931a:	4630      	mov	r0, r6
 800931c:	f7ff ff35 	bl	800918a <__multiply>
 8009320:	4639      	mov	r1, r7
 8009322:	4681      	mov	r9, r0
 8009324:	4630      	mov	r0, r6
 8009326:	f7ff fe87 	bl	8009038 <_Bfree>
 800932a:	464f      	mov	r7, r9
 800932c:	106d      	asrs	r5, r5, #1
 800932e:	d00b      	beq.n	8009348 <__pow5mult+0x90>
 8009330:	6820      	ldr	r0, [r4, #0]
 8009332:	b938      	cbnz	r0, 8009344 <__pow5mult+0x8c>
 8009334:	4622      	mov	r2, r4
 8009336:	4621      	mov	r1, r4
 8009338:	4630      	mov	r0, r6
 800933a:	f7ff ff26 	bl	800918a <__multiply>
 800933e:	6020      	str	r0, [r4, #0]
 8009340:	f8c0 8000 	str.w	r8, [r0]
 8009344:	4604      	mov	r4, r0
 8009346:	e7e4      	b.n	8009312 <__pow5mult+0x5a>
 8009348:	4638      	mov	r0, r7
 800934a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800934e:	bf00      	nop
 8009350:	08009a30 	.word	0x08009a30

08009354 <__lshift>:
 8009354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009358:	460c      	mov	r4, r1
 800935a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800935e:	6923      	ldr	r3, [r4, #16]
 8009360:	6849      	ldr	r1, [r1, #4]
 8009362:	eb0a 0903 	add.w	r9, sl, r3
 8009366:	68a3      	ldr	r3, [r4, #8]
 8009368:	4607      	mov	r7, r0
 800936a:	4616      	mov	r6, r2
 800936c:	f109 0501 	add.w	r5, r9, #1
 8009370:	42ab      	cmp	r3, r5
 8009372:	db32      	blt.n	80093da <__lshift+0x86>
 8009374:	4638      	mov	r0, r7
 8009376:	f7ff fe2b 	bl	8008fd0 <_Balloc>
 800937a:	2300      	movs	r3, #0
 800937c:	4680      	mov	r8, r0
 800937e:	f100 0114 	add.w	r1, r0, #20
 8009382:	461a      	mov	r2, r3
 8009384:	4553      	cmp	r3, sl
 8009386:	db2b      	blt.n	80093e0 <__lshift+0x8c>
 8009388:	6920      	ldr	r0, [r4, #16]
 800938a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800938e:	f104 0314 	add.w	r3, r4, #20
 8009392:	f016 021f 	ands.w	r2, r6, #31
 8009396:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800939a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800939e:	d025      	beq.n	80093ec <__lshift+0x98>
 80093a0:	f1c2 0e20 	rsb	lr, r2, #32
 80093a4:	2000      	movs	r0, #0
 80093a6:	681e      	ldr	r6, [r3, #0]
 80093a8:	468a      	mov	sl, r1
 80093aa:	4096      	lsls	r6, r2
 80093ac:	4330      	orrs	r0, r6
 80093ae:	f84a 0b04 	str.w	r0, [sl], #4
 80093b2:	f853 0b04 	ldr.w	r0, [r3], #4
 80093b6:	459c      	cmp	ip, r3
 80093b8:	fa20 f00e 	lsr.w	r0, r0, lr
 80093bc:	d814      	bhi.n	80093e8 <__lshift+0x94>
 80093be:	6048      	str	r0, [r1, #4]
 80093c0:	b108      	cbz	r0, 80093c6 <__lshift+0x72>
 80093c2:	f109 0502 	add.w	r5, r9, #2
 80093c6:	3d01      	subs	r5, #1
 80093c8:	4638      	mov	r0, r7
 80093ca:	f8c8 5010 	str.w	r5, [r8, #16]
 80093ce:	4621      	mov	r1, r4
 80093d0:	f7ff fe32 	bl	8009038 <_Bfree>
 80093d4:	4640      	mov	r0, r8
 80093d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093da:	3101      	adds	r1, #1
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	e7c7      	b.n	8009370 <__lshift+0x1c>
 80093e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80093e4:	3301      	adds	r3, #1
 80093e6:	e7cd      	b.n	8009384 <__lshift+0x30>
 80093e8:	4651      	mov	r1, sl
 80093ea:	e7dc      	b.n	80093a6 <__lshift+0x52>
 80093ec:	3904      	subs	r1, #4
 80093ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80093f6:	459c      	cmp	ip, r3
 80093f8:	d8f9      	bhi.n	80093ee <__lshift+0x9a>
 80093fa:	e7e4      	b.n	80093c6 <__lshift+0x72>

080093fc <__mcmp>:
 80093fc:	6903      	ldr	r3, [r0, #16]
 80093fe:	690a      	ldr	r2, [r1, #16]
 8009400:	1a9b      	subs	r3, r3, r2
 8009402:	b530      	push	{r4, r5, lr}
 8009404:	d10c      	bne.n	8009420 <__mcmp+0x24>
 8009406:	0092      	lsls	r2, r2, #2
 8009408:	3014      	adds	r0, #20
 800940a:	3114      	adds	r1, #20
 800940c:	1884      	adds	r4, r0, r2
 800940e:	4411      	add	r1, r2
 8009410:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009414:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009418:	4295      	cmp	r5, r2
 800941a:	d003      	beq.n	8009424 <__mcmp+0x28>
 800941c:	d305      	bcc.n	800942a <__mcmp+0x2e>
 800941e:	2301      	movs	r3, #1
 8009420:	4618      	mov	r0, r3
 8009422:	bd30      	pop	{r4, r5, pc}
 8009424:	42a0      	cmp	r0, r4
 8009426:	d3f3      	bcc.n	8009410 <__mcmp+0x14>
 8009428:	e7fa      	b.n	8009420 <__mcmp+0x24>
 800942a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800942e:	e7f7      	b.n	8009420 <__mcmp+0x24>

08009430 <__mdiff>:
 8009430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009434:	460d      	mov	r5, r1
 8009436:	4607      	mov	r7, r0
 8009438:	4611      	mov	r1, r2
 800943a:	4628      	mov	r0, r5
 800943c:	4614      	mov	r4, r2
 800943e:	f7ff ffdd 	bl	80093fc <__mcmp>
 8009442:	1e06      	subs	r6, r0, #0
 8009444:	d108      	bne.n	8009458 <__mdiff+0x28>
 8009446:	4631      	mov	r1, r6
 8009448:	4638      	mov	r0, r7
 800944a:	f7ff fdc1 	bl	8008fd0 <_Balloc>
 800944e:	2301      	movs	r3, #1
 8009450:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009458:	bfa4      	itt	ge
 800945a:	4623      	movge	r3, r4
 800945c:	462c      	movge	r4, r5
 800945e:	4638      	mov	r0, r7
 8009460:	6861      	ldr	r1, [r4, #4]
 8009462:	bfa6      	itte	ge
 8009464:	461d      	movge	r5, r3
 8009466:	2600      	movge	r6, #0
 8009468:	2601      	movlt	r6, #1
 800946a:	f7ff fdb1 	bl	8008fd0 <_Balloc>
 800946e:	692b      	ldr	r3, [r5, #16]
 8009470:	60c6      	str	r6, [r0, #12]
 8009472:	6926      	ldr	r6, [r4, #16]
 8009474:	f105 0914 	add.w	r9, r5, #20
 8009478:	f104 0214 	add.w	r2, r4, #20
 800947c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009480:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009484:	f100 0514 	add.w	r5, r0, #20
 8009488:	f04f 0e00 	mov.w	lr, #0
 800948c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009490:	f859 4b04 	ldr.w	r4, [r9], #4
 8009494:	fa1e f18a 	uxtah	r1, lr, sl
 8009498:	b2a3      	uxth	r3, r4
 800949a:	1ac9      	subs	r1, r1, r3
 800949c:	0c23      	lsrs	r3, r4, #16
 800949e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80094a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80094a6:	b289      	uxth	r1, r1
 80094a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80094ac:	45c8      	cmp	r8, r9
 80094ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80094b2:	4694      	mov	ip, r2
 80094b4:	f845 3b04 	str.w	r3, [r5], #4
 80094b8:	d8e8      	bhi.n	800948c <__mdiff+0x5c>
 80094ba:	45bc      	cmp	ip, r7
 80094bc:	d304      	bcc.n	80094c8 <__mdiff+0x98>
 80094be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80094c2:	b183      	cbz	r3, 80094e6 <__mdiff+0xb6>
 80094c4:	6106      	str	r6, [r0, #16]
 80094c6:	e7c5      	b.n	8009454 <__mdiff+0x24>
 80094c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80094cc:	fa1e f381 	uxtah	r3, lr, r1
 80094d0:	141a      	asrs	r2, r3, #16
 80094d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80094e0:	f845 3b04 	str.w	r3, [r5], #4
 80094e4:	e7e9      	b.n	80094ba <__mdiff+0x8a>
 80094e6:	3e01      	subs	r6, #1
 80094e8:	e7e9      	b.n	80094be <__mdiff+0x8e>

080094ea <__d2b>:
 80094ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094ee:	460e      	mov	r6, r1
 80094f0:	2101      	movs	r1, #1
 80094f2:	ec59 8b10 	vmov	r8, r9, d0
 80094f6:	4615      	mov	r5, r2
 80094f8:	f7ff fd6a 	bl	8008fd0 <_Balloc>
 80094fc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009500:	4607      	mov	r7, r0
 8009502:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009506:	bb34      	cbnz	r4, 8009556 <__d2b+0x6c>
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	f1b8 0300 	subs.w	r3, r8, #0
 800950e:	d027      	beq.n	8009560 <__d2b+0x76>
 8009510:	a802      	add	r0, sp, #8
 8009512:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009516:	f7ff fe00 	bl	800911a <__lo0bits>
 800951a:	9900      	ldr	r1, [sp, #0]
 800951c:	b1f0      	cbz	r0, 800955c <__d2b+0x72>
 800951e:	9a01      	ldr	r2, [sp, #4]
 8009520:	f1c0 0320 	rsb	r3, r0, #32
 8009524:	fa02 f303 	lsl.w	r3, r2, r3
 8009528:	430b      	orrs	r3, r1
 800952a:	40c2      	lsrs	r2, r0
 800952c:	617b      	str	r3, [r7, #20]
 800952e:	9201      	str	r2, [sp, #4]
 8009530:	9b01      	ldr	r3, [sp, #4]
 8009532:	61bb      	str	r3, [r7, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	bf14      	ite	ne
 8009538:	2102      	movne	r1, #2
 800953a:	2101      	moveq	r1, #1
 800953c:	6139      	str	r1, [r7, #16]
 800953e:	b1c4      	cbz	r4, 8009572 <__d2b+0x88>
 8009540:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009544:	4404      	add	r4, r0
 8009546:	6034      	str	r4, [r6, #0]
 8009548:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800954c:	6028      	str	r0, [r5, #0]
 800954e:	4638      	mov	r0, r7
 8009550:	b003      	add	sp, #12
 8009552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800955a:	e7d5      	b.n	8009508 <__d2b+0x1e>
 800955c:	6179      	str	r1, [r7, #20]
 800955e:	e7e7      	b.n	8009530 <__d2b+0x46>
 8009560:	a801      	add	r0, sp, #4
 8009562:	f7ff fdda 	bl	800911a <__lo0bits>
 8009566:	9b01      	ldr	r3, [sp, #4]
 8009568:	617b      	str	r3, [r7, #20]
 800956a:	2101      	movs	r1, #1
 800956c:	6139      	str	r1, [r7, #16]
 800956e:	3020      	adds	r0, #32
 8009570:	e7e5      	b.n	800953e <__d2b+0x54>
 8009572:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009576:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800957a:	6030      	str	r0, [r6, #0]
 800957c:	6918      	ldr	r0, [r3, #16]
 800957e:	f7ff fdad 	bl	80090dc <__hi0bits>
 8009582:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009586:	e7e1      	b.n	800954c <__d2b+0x62>

08009588 <_calloc_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	fb02 f401 	mul.w	r4, r2, r1
 800958e:	4621      	mov	r1, r4
 8009590:	f7fe fad0 	bl	8007b34 <_malloc_r>
 8009594:	4605      	mov	r5, r0
 8009596:	b118      	cbz	r0, 80095a0 <_calloc_r+0x18>
 8009598:	4622      	mov	r2, r4
 800959a:	2100      	movs	r1, #0
 800959c:	f7fe fa74 	bl	8007a88 <memset>
 80095a0:	4628      	mov	r0, r5
 80095a2:	bd38      	pop	{r3, r4, r5, pc}

080095a4 <__ascii_mbtowc>:
 80095a4:	b082      	sub	sp, #8
 80095a6:	b901      	cbnz	r1, 80095aa <__ascii_mbtowc+0x6>
 80095a8:	a901      	add	r1, sp, #4
 80095aa:	b142      	cbz	r2, 80095be <__ascii_mbtowc+0x1a>
 80095ac:	b14b      	cbz	r3, 80095c2 <__ascii_mbtowc+0x1e>
 80095ae:	7813      	ldrb	r3, [r2, #0]
 80095b0:	600b      	str	r3, [r1, #0]
 80095b2:	7812      	ldrb	r2, [r2, #0]
 80095b4:	1c10      	adds	r0, r2, #0
 80095b6:	bf18      	it	ne
 80095b8:	2001      	movne	r0, #1
 80095ba:	b002      	add	sp, #8
 80095bc:	4770      	bx	lr
 80095be:	4610      	mov	r0, r2
 80095c0:	e7fb      	b.n	80095ba <__ascii_mbtowc+0x16>
 80095c2:	f06f 0001 	mvn.w	r0, #1
 80095c6:	e7f8      	b.n	80095ba <__ascii_mbtowc+0x16>

080095c8 <__ascii_wctomb>:
 80095c8:	b149      	cbz	r1, 80095de <__ascii_wctomb+0x16>
 80095ca:	2aff      	cmp	r2, #255	; 0xff
 80095cc:	bf85      	ittet	hi
 80095ce:	238a      	movhi	r3, #138	; 0x8a
 80095d0:	6003      	strhi	r3, [r0, #0]
 80095d2:	700a      	strbls	r2, [r1, #0]
 80095d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80095d8:	bf98      	it	ls
 80095da:	2001      	movls	r0, #1
 80095dc:	4770      	bx	lr
 80095de:	4608      	mov	r0, r1
 80095e0:	4770      	bx	lr
	...

080095e4 <_init>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	bf00      	nop
 80095e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ea:	bc08      	pop	{r3}
 80095ec:	469e      	mov	lr, r3
 80095ee:	4770      	bx	lr

080095f0 <_fini>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	bf00      	nop
 80095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f6:	bc08      	pop	{r3}
 80095f8:	469e      	mov	lr, r3
 80095fa:	4770      	bx	lr
