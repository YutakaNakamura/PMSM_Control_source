
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c73c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800c910  0800c910  0001c910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cee0  0800cee0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cee0  0800cee0  0001cee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cee8  0800cee8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cee8  0800cee8  0001cee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cef0  0800cef0  0001cef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800cef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030c0  200001dc  0800d0d4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000329c  0800d0d4  0002329c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005264d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000090da  00000000  00000000  00072859  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002398  00000000  00000000  0007b938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020f0  00000000  00000000  0007dcd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000317b9  00000000  00000000  0007fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fd59  00000000  00000000  000b1579  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001059ba  00000000  00000000  000d12d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d6c8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b990  00000000  00000000  001d6d08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c8f4 	.word	0x0800c8f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800c8f4 	.word	0x0800c8f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 fd05 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f006 fb3a 	bl	8007634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fd1d 	bl	8001a2a <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	f000 fce5 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004
 8001050:	20003294 	.word	0x20003294

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20003294 	.word	0x20003294

0800106c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e033      	b.n	80010ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f006 f83c 	bl	8007108 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d118      	bne.n	80010dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010b2:	f023 0302 	bic.w	r3, r3, #2
 80010b6:	f043 0202 	orr.w	r2, r3, #2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 faa8 	bl	8001614 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
 80010da:	e001      	b.n	80010e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b02      	cmp	r3, #2
 800110e:	bf0c      	ite	eq
 8001110:	2301      	moveq	r3, #1
 8001112:	2300      	movne	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0320 	and.w	r3, r3, #32
 8001122:	2b20      	cmp	r3, #32
 8001124:	bf0c      	ite	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	2300      	movne	r3, #0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d049      	beq.n	80011c8 <HAL_ADC_IRQHandler+0xd6>
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d046      	beq.n	80011c8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d12b      	bne.n	80011b8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001164:	2b00      	cmp	r3, #0
 8001166:	d127      	bne.n	80011b8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001180:	2b00      	cmp	r3, #0
 8001182:	d119      	bne.n	80011b8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0220 	bic.w	r2, r2, #32
 8001192:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d105      	bne.n	80011b8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f8db 	bl	8001374 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f06f 0212 	mvn.w	r2, #18
 80011c6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e8:	2b80      	cmp	r3, #128	; 0x80
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d057      	beq.n	80012aa <HAL_ADC_IRQHandler+0x1b8>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d054      	beq.n	80012aa <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d139      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800123e:	2b00      	cmp	r3, #0
 8001240:	d12b      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800124c:	2b00      	cmp	r3, #0
 800124e:	d124      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800125a:	2b00      	cmp	r3, #0
 800125c:	d11d      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001262:	2b00      	cmp	r3, #0
 8001264:	d119      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001274:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128a:	2b00      	cmp	r3, #0
 800128c:	d105      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f043 0201 	orr.w	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fab6 	bl	800180c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f06f 020c 	mvn.w	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ca:	2b40      	cmp	r3, #64	; 0x40
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d017      	beq.n	800130c <HAL_ADC_IRQHandler+0x21a>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d014      	beq.n	800130c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d10d      	bne.n	800130c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f843 	bl	8001388 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f06f 0201 	mvn.w	r2, #1
 800130a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0320 	and.w	r3, r3, #32
 8001316:	2b20      	cmp	r3, #32
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800132c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d015      	beq.n	800136c <HAL_ADC_IRQHandler+0x27a>
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d012      	beq.n	800136c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f043 0202 	orr.w	r2, r3, #2
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f06f 0220 	mvn.w	r2, #32
 800135a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f81d 	bl	800139c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f06f 0220 	mvn.w	r2, #32
 800136a:	601a      	str	r2, [r3, #0]
  }
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1c>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e113      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x244>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d925      	bls.n	8001428 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68d9      	ldr	r1, [r3, #12]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	3b1e      	subs	r3, #30
 80013f2:	2207      	movs	r2, #7
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43da      	mvns	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68d9      	ldr	r1, [r3, #12]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	4603      	mov	r3, r0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4403      	add	r3, r0
 800141a:	3b1e      	subs	r3, #30
 800141c:	409a      	lsls	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	e022      	b.n	800146e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	2207      	movs	r2, #7
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	400a      	ands	r2, r1
 800144a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6919      	ldr	r1, [r3, #16]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	4603      	mov	r3, r0
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4403      	add	r3, r0
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b06      	cmp	r3, #6
 8001474:	d824      	bhi.n	80014c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b05      	subs	r3, #5
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b05      	subs	r3, #5
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
 80014be:	e04c      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d824      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3b23      	subs	r3, #35	; 0x23
 80014da:	221f      	movs	r2, #31
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43da      	mvns	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	400a      	ands	r2, r1
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b23      	subs	r3, #35	; 0x23
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
 8001510:	e023      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	3b41      	subs	r3, #65	; 0x41
 8001524:	221f      	movs	r2, #31
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	400a      	ands	r2, r1
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b41      	subs	r3, #65	; 0x41
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_ADC_ConfigChannel+0x250>)
 800155c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a28      	ldr	r2, [pc, #160]	; (8001604 <HAL_ADC_ConfigChannel+0x254>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d10f      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1d8>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b12      	cmp	r3, #18
 800156e:	d10b      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_ADC_ConfigChannel+0x254>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12b      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x23a>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <HAL_ADC_ConfigChannel+0x258>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d003      	beq.n	80015a4 <HAL_ADC_ConfigChannel+0x1f4>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b11      	cmp	r3, #17
 80015a2:	d122      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_ADC_ConfigChannel+0x258>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d111      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_ADC_ConfigChannel+0x25c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a11      	ldr	r2, [pc, #68]	; (8001610 <HAL_ADC_ConfigChannel+0x260>)
 80015cc:	fba2 2303 	umull	r2, r3, r2, r3
 80015d0:	0c9a      	lsrs	r2, r3, #18
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f9      	bne.n	80015de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40012300 	.word	0x40012300
 8001604:	40012000 	.word	0x40012000
 8001608:	10000012 	.word	0x10000012
 800160c:	20000008 	.word	0x20000008
 8001610:	431bde83 	.word	0x431bde83

08001614 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800161c:	4b79      	ldr	r3, [pc, #484]	; (8001804 <ADC_Init+0x1f0>)
 800161e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	431a      	orrs	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	021a      	lsls	r2, r3, #8
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800166c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6899      	ldr	r1, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	4a58      	ldr	r2, [pc, #352]	; (8001808 <ADC_Init+0x1f4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d022      	beq.n	80016f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6899      	ldr	r1, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6899      	ldr	r1, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	e00f      	b.n	8001712 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001710:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0202 	bic.w	r2, r2, #2
 8001720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6899      	ldr	r1, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7e1b      	ldrb	r3, [r3, #24]
 800172c:	005a      	lsls	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01b      	beq.n	8001778 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800175e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6859      	ldr	r1, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	3b01      	subs	r3, #1
 800176c:	035a      	lsls	r2, r3, #13
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	e007      	b.n	8001788 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001786:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	051a      	lsls	r2, r3, #20
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6899      	ldr	r1, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ca:	025a      	lsls	r2, r3, #9
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6899      	ldr	r1, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	029a      	lsls	r2, r3, #10
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40012300 	.word	0x40012300
 8001808:	0f000001 	.word	0x0f000001

0800180c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a0:	f7ff ff8e 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff29 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff3e 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff8e 	bl	8001914 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5d 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff31 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffa2 	bl	800197c <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e165      	b.n	8001d2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	f040 8154 	bne.w	8001d26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x4a>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b12      	cmp	r3, #18
 8001a8c:	d123      	bne.n	8001ad6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	69b9      	ldr	r1, [r7, #24]
 8001ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0203 	and.w	r2, r3, #3
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d00b      	beq.n	8001b2a <HAL_GPIO_Init+0xe6>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d007      	beq.n	8001b2a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b1e:	2b11      	cmp	r3, #17
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b12      	cmp	r3, #18
 8001b28:	d130      	bne.n	8001b8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80ae 	beq.w	8001d26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b5c      	ldr	r3, [pc, #368]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a5b      	ldr	r2, [pc, #364]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b59      	ldr	r3, [pc, #356]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be6:	4a57      	ldr	r2, [pc, #348]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4e      	ldr	r2, [pc, #312]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d025      	beq.n	8001c5e <HAL_GPIO_Init+0x21a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4d      	ldr	r2, [pc, #308]	; (8001d4c <HAL_GPIO_Init+0x308>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01f      	beq.n	8001c5a <HAL_GPIO_Init+0x216>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_GPIO_Init+0x30c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d019      	beq.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4b      	ldr	r2, [pc, #300]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x20e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4a      	ldr	r2, [pc, #296]	; (8001d58 <HAL_GPIO_Init+0x314>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00d      	beq.n	8001c4e <HAL_GPIO_Init+0x20a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a49      	ldr	r2, [pc, #292]	; (8001d5c <HAL_GPIO_Init+0x318>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a48      	ldr	r2, [pc, #288]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_GPIO_Init+0x202>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e00c      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e00a      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	4934      	ldr	r1, [pc, #208]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca2:	4a30      	ldr	r2, [pc, #192]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ca8:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ccc:	4a25      	ldr	r2, [pc, #148]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	f67f ae96 	bls.w	8001a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	3724      	adds	r7, #36	; 0x24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40013c00 	.word	0x40013c00

08001d68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x94>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d94:	f7ff f95e 	bl	8001054 <HAL_GetTick>
 8001d98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d9a:	e009      	b.n	8001db0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d9c:	f7ff f95a 	bl	8001054 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001daa:	d901      	bls.n	8001db0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e01f      	b.n	8001df0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc4:	f7ff f946 	bl	8001054 <HAL_GetTick>
 8001dc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dca:	e009      	b.n	8001de0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dcc:	f7ff f942 	bl	8001054 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dda:	d901      	bls.n	8001de0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e007      	b.n	8001df0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dec:	d1ee      	bne.n	8001dcc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	420e0040 	.word	0x420e0040
 8001e00:	40007000 	.word	0x40007000
 8001e04:	420e0044 	.word	0x420e0044

08001e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0ca      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d90c      	bls.n	8001e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0b6      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e5c:	4b58      	ldr	r3, [pc, #352]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a57      	ldr	r2, [pc, #348]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e74:	4b52      	ldr	r3, [pc, #328]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a51      	ldr	r2, [pc, #324]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e80:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	494c      	ldr	r1, [pc, #304]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d044      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d119      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e07d      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d003      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e06d      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e065      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4933      	ldr	r1, [pc, #204]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7ff f8ac 	bl	8001054 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7ff f8a8 	bl	8001054 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e04d      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d20c      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e030      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4915      	ldr	r1, [pc, #84]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	490d      	ldr	r1, [pc, #52]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f8e:	f000 f81d 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001faa:	2004      	movs	r0, #4
 8001fac:	f7ff f80e 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023c00 	.word	0x40023c00
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	0800ca44 	.word	0x0800ca44
 8001fc8:	20000008 	.word	0x20000008

08001fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe6:	4bc6      	ldr	r3, [pc, #792]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	f200 817e 	bhi.w	80022f0 <HAL_RCC_GetSysClockFreq+0x324>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <HAL_RCC_GetSysClockFreq+0x30>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	08002031 	.word	0x08002031
 8002000:	080022f1 	.word	0x080022f1
 8002004:	080022f1 	.word	0x080022f1
 8002008:	080022f1 	.word	0x080022f1
 800200c:	08002037 	.word	0x08002037
 8002010:	080022f1 	.word	0x080022f1
 8002014:	080022f1 	.word	0x080022f1
 8002018:	080022f1 	.word	0x080022f1
 800201c:	0800203d 	.word	0x0800203d
 8002020:	080022f1 	.word	0x080022f1
 8002024:	080022f1 	.word	0x080022f1
 8002028:	080022f1 	.word	0x080022f1
 800202c:	08002199 	.word	0x08002199
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002030:	4bb4      	ldr	r3, [pc, #720]	; (8002304 <HAL_RCC_GetSysClockFreq+0x338>)
 8002032:	613b      	str	r3, [r7, #16]
       break;
 8002034:	e15f      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002036:	4bb4      	ldr	r3, [pc, #720]	; (8002308 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002038:	613b      	str	r3, [r7, #16]
      break;
 800203a:	e15c      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800203c:	4bb0      	ldr	r3, [pc, #704]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002044:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002046:	4bae      	ldr	r3, [pc, #696]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d04a      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002052:	4bab      	ldr	r3, [pc, #684]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	099b      	lsrs	r3, r3, #6
 8002058:	f04f 0400 	mov.w	r4, #0
 800205c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	ea03 0501 	and.w	r5, r3, r1
 8002068:	ea04 0602 	and.w	r6, r4, r2
 800206c:	4629      	mov	r1, r5
 800206e:	4632      	mov	r2, r6
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	f04f 0400 	mov.w	r4, #0
 8002078:	0154      	lsls	r4, r2, #5
 800207a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800207e:	014b      	lsls	r3, r1, #5
 8002080:	4619      	mov	r1, r3
 8002082:	4622      	mov	r2, r4
 8002084:	1b49      	subs	r1, r1, r5
 8002086:	eb62 0206 	sbc.w	r2, r2, r6
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	f04f 0400 	mov.w	r4, #0
 8002092:	0194      	lsls	r4, r2, #6
 8002094:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002098:	018b      	lsls	r3, r1, #6
 800209a:	1a5b      	subs	r3, r3, r1
 800209c:	eb64 0402 	sbc.w	r4, r4, r2
 80020a0:	f04f 0100 	mov.w	r1, #0
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	00e2      	lsls	r2, r4, #3
 80020aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020ae:	00d9      	lsls	r1, r3, #3
 80020b0:	460b      	mov	r3, r1
 80020b2:	4614      	mov	r4, r2
 80020b4:	195b      	adds	r3, r3, r5
 80020b6:	eb44 0406 	adc.w	r4, r4, r6
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	0262      	lsls	r2, r4, #9
 80020c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020c8:	0259      	lsls	r1, r3, #9
 80020ca:	460b      	mov	r3, r1
 80020cc:	4614      	mov	r4, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	4621      	mov	r1, r4
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f04f 0400 	mov.w	r4, #0
 80020d8:	461a      	mov	r2, r3
 80020da:	4623      	mov	r3, r4
 80020dc:	f7fe fdd4 	bl	8000c88 <__aeabi_uldivmod>
 80020e0:	4603      	mov	r3, r0
 80020e2:	460c      	mov	r4, r1
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e049      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e8:	4b85      	ldr	r3, [pc, #532]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	f04f 0400 	mov.w	r4, #0
 80020f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	ea03 0501 	and.w	r5, r3, r1
 80020fe:	ea04 0602 	and.w	r6, r4, r2
 8002102:	4629      	mov	r1, r5
 8002104:	4632      	mov	r2, r6
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	f04f 0400 	mov.w	r4, #0
 800210e:	0154      	lsls	r4, r2, #5
 8002110:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002114:	014b      	lsls	r3, r1, #5
 8002116:	4619      	mov	r1, r3
 8002118:	4622      	mov	r2, r4
 800211a:	1b49      	subs	r1, r1, r5
 800211c:	eb62 0206 	sbc.w	r2, r2, r6
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	f04f 0400 	mov.w	r4, #0
 8002128:	0194      	lsls	r4, r2, #6
 800212a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800212e:	018b      	lsls	r3, r1, #6
 8002130:	1a5b      	subs	r3, r3, r1
 8002132:	eb64 0402 	sbc.w	r4, r4, r2
 8002136:	f04f 0100 	mov.w	r1, #0
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	00e2      	lsls	r2, r4, #3
 8002140:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002144:	00d9      	lsls	r1, r3, #3
 8002146:	460b      	mov	r3, r1
 8002148:	4614      	mov	r4, r2
 800214a:	195b      	adds	r3, r3, r5
 800214c:	eb44 0406 	adc.w	r4, r4, r6
 8002150:	f04f 0100 	mov.w	r1, #0
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	02a2      	lsls	r2, r4, #10
 800215a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800215e:	0299      	lsls	r1, r3, #10
 8002160:	460b      	mov	r3, r1
 8002162:	4614      	mov	r4, r2
 8002164:	4618      	mov	r0, r3
 8002166:	4621      	mov	r1, r4
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f04f 0400 	mov.w	r4, #0
 800216e:	461a      	mov	r2, r3
 8002170:	4623      	mov	r3, r4
 8002172:	f7fe fd89 	bl	8000c88 <__aeabi_uldivmod>
 8002176:	4603      	mov	r3, r0
 8002178:	460c      	mov	r4, r1
 800217a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800217c:	4b60      	ldr	r3, [pc, #384]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	3301      	adds	r3, #1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	613b      	str	r3, [r7, #16]
      break;
 8002196:	e0ae      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a2:	4b57      	ldr	r3, [pc, #348]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d04a      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ae:	4b54      	ldr	r3, [pc, #336]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	099b      	lsrs	r3, r3, #6
 80021b4:	f04f 0400 	mov.w	r4, #0
 80021b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	ea03 0501 	and.w	r5, r3, r1
 80021c4:	ea04 0602 	and.w	r6, r4, r2
 80021c8:	4629      	mov	r1, r5
 80021ca:	4632      	mov	r2, r6
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	f04f 0400 	mov.w	r4, #0
 80021d4:	0154      	lsls	r4, r2, #5
 80021d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021da:	014b      	lsls	r3, r1, #5
 80021dc:	4619      	mov	r1, r3
 80021de:	4622      	mov	r2, r4
 80021e0:	1b49      	subs	r1, r1, r5
 80021e2:	eb62 0206 	sbc.w	r2, r2, r6
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	f04f 0400 	mov.w	r4, #0
 80021ee:	0194      	lsls	r4, r2, #6
 80021f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021f4:	018b      	lsls	r3, r1, #6
 80021f6:	1a5b      	subs	r3, r3, r1
 80021f8:	eb64 0402 	sbc.w	r4, r4, r2
 80021fc:	f04f 0100 	mov.w	r1, #0
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	00e2      	lsls	r2, r4, #3
 8002206:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800220a:	00d9      	lsls	r1, r3, #3
 800220c:	460b      	mov	r3, r1
 800220e:	4614      	mov	r4, r2
 8002210:	195b      	adds	r3, r3, r5
 8002212:	eb44 0406 	adc.w	r4, r4, r6
 8002216:	f04f 0100 	mov.w	r1, #0
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	0262      	lsls	r2, r4, #9
 8002220:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002224:	0259      	lsls	r1, r3, #9
 8002226:	460b      	mov	r3, r1
 8002228:	4614      	mov	r4, r2
 800222a:	4618      	mov	r0, r3
 800222c:	4621      	mov	r1, r4
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f04f 0400 	mov.w	r4, #0
 8002234:	461a      	mov	r2, r3
 8002236:	4623      	mov	r3, r4
 8002238:	f7fe fd26 	bl	8000c88 <__aeabi_uldivmod>
 800223c:	4603      	mov	r3, r0
 800223e:	460c      	mov	r4, r1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e049      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002244:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	f04f 0400 	mov.w	r4, #0
 800224e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	ea03 0501 	and.w	r5, r3, r1
 800225a:	ea04 0602 	and.w	r6, r4, r2
 800225e:	4629      	mov	r1, r5
 8002260:	4632      	mov	r2, r6
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	f04f 0400 	mov.w	r4, #0
 800226a:	0154      	lsls	r4, r2, #5
 800226c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002270:	014b      	lsls	r3, r1, #5
 8002272:	4619      	mov	r1, r3
 8002274:	4622      	mov	r2, r4
 8002276:	1b49      	subs	r1, r1, r5
 8002278:	eb62 0206 	sbc.w	r2, r2, r6
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	f04f 0400 	mov.w	r4, #0
 8002284:	0194      	lsls	r4, r2, #6
 8002286:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800228a:	018b      	lsls	r3, r1, #6
 800228c:	1a5b      	subs	r3, r3, r1
 800228e:	eb64 0402 	sbc.w	r4, r4, r2
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	00e2      	lsls	r2, r4, #3
 800229c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022a0:	00d9      	lsls	r1, r3, #3
 80022a2:	460b      	mov	r3, r1
 80022a4:	4614      	mov	r4, r2
 80022a6:	195b      	adds	r3, r3, r5
 80022a8:	eb44 0406 	adc.w	r4, r4, r6
 80022ac:	f04f 0100 	mov.w	r1, #0
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	02a2      	lsls	r2, r4, #10
 80022b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022ba:	0299      	lsls	r1, r3, #10
 80022bc:	460b      	mov	r3, r1
 80022be:	4614      	mov	r4, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	4621      	mov	r1, r4
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f04f 0400 	mov.w	r4, #0
 80022ca:	461a      	mov	r2, r3
 80022cc:	4623      	mov	r3, r4
 80022ce:	f7fe fcdb 	bl	8000c88 <__aeabi_uldivmod>
 80022d2:	4603      	mov	r3, r0
 80022d4:	460c      	mov	r4, r1
 80022d6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	0f1b      	lsrs	r3, r3, #28
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	613b      	str	r3, [r7, #16]
      break;
 80022ee:	e002      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCC_GetSysClockFreq+0x338>)
 80022f2:	613b      	str	r3, [r7, #16]
      break;
 80022f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f6:	693b      	ldr	r3, [r7, #16]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002300:	40023800 	.word	0x40023800
 8002304:	00f42400 	.word	0x00f42400
 8002308:	007a1200 	.word	0x007a1200

0800230c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8083 	beq.w	800242c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002326:	4b95      	ldr	r3, [pc, #596]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b04      	cmp	r3, #4
 8002330:	d019      	beq.n	8002366 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002332:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800233a:	2b08      	cmp	r3, #8
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800233e:	4b8f      	ldr	r3, [pc, #572]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234a:	d00c      	beq.n	8002366 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234c:	4b8b      	ldr	r3, [pc, #556]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002354:	2b0c      	cmp	r3, #12
 8002356:	d112      	bne.n	800237e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002358:	4b88      	ldr	r3, [pc, #544]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002364:	d10b      	bne.n	800237e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002366:	4b85      	ldr	r3, [pc, #532]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d05b      	beq.n	800242a <HAL_RCC_OscConfig+0x11e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d157      	bne.n	800242a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e216      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x8a>
 8002388:	4b7c      	ldr	r3, [pc, #496]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a7b      	ldr	r2, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e01d      	b.n	80023d2 <HAL_RCC_OscConfig+0xc6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800239e:	d10c      	bne.n	80023ba <HAL_RCC_OscConfig+0xae>
 80023a0:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a75      	ldr	r2, [pc, #468]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b73      	ldr	r3, [pc, #460]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a72      	ldr	r2, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e00b      	b.n	80023d2 <HAL_RCC_OscConfig+0xc6>
 80023ba:	4b70      	ldr	r3, [pc, #448]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6f      	ldr	r2, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6c      	ldr	r2, [pc, #432]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d013      	beq.n	8002402 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe fe3b 	bl	8001054 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e2:	f7fe fe37 	bl	8001054 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1db      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f4:	4b61      	ldr	r3, [pc, #388]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0xd6>
 8002400:	e014      	b.n	800242c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7fe fe27 	bl	8001054 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240a:	f7fe fe23 	bl	8001054 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	; 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e1c7      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241c:	4b57      	ldr	r3, [pc, #348]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f0      	bne.n	800240a <HAL_RCC_OscConfig+0xfe>
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d06f      	beq.n	8002518 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b00      	cmp	r3, #0
 8002442:	d017      	beq.n	8002474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800244c:	2b08      	cmp	r3, #8
 800244e:	d105      	bne.n	800245c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002450:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245c:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002464:	2b0c      	cmp	r3, #12
 8002466:	d11c      	bne.n	80024a2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002468:	4b44      	ldr	r3, [pc, #272]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d116      	bne.n	80024a2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002474:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_OscConfig+0x180>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d001      	beq.n	800248c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e18f      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4938      	ldr	r1, [pc, #224]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a0:	e03a      	b.n	8002518 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d020      	beq.n	80024ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024aa:	4b35      	ldr	r3, [pc, #212]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fdd0 	bl	8001054 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b8:	f7fe fdcc 	bl	8001054 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e170      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4925      	ldr	r1, [pc, #148]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
 80024ea:	e015      	b.n	8002518 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7fe fdaf 	bl	8001054 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fa:	f7fe fdab 	bl	8001054 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e14f      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f0      	bne.n	80024fa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d037      	beq.n	8002594 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d016      	beq.n	800255a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_RCC_OscConfig+0x278>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7fe fd8f 	bl	8001054 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe fd8b 	bl	8001054 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e12f      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x22e>
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_OscConfig+0x278>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe fd78 	bl	8001054 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002566:	e00f      	b.n	8002588 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe fd74 	bl	8001054 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d908      	bls.n	8002588 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e118      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	42470000 	.word	0x42470000
 8002584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800258a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e9      	bne.n	8002568 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8097 	beq.w	80026d0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b83      	ldr	r3, [pc, #524]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b7f      	ldr	r3, [pc, #508]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a7e      	ldr	r2, [pc, #504]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b7c      	ldr	r3, [pc, #496]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	4b79      	ldr	r3, [pc, #484]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d118      	bne.n	8002610 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025de:	4b76      	ldr	r3, [pc, #472]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a75      	ldr	r2, [pc, #468]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fd33 	bl	8001054 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f2:	f7fe fd2f 	bl	8001054 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0d3      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	4b6c      	ldr	r3, [pc, #432]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x31a>
 8002618:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	e01c      	b.n	8002660 <HAL_RCC_OscConfig+0x354>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b05      	cmp	r3, #5
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x33c>
 800262e:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a60      	ldr	r2, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
 800263a:	4b5e      	ldr	r3, [pc, #376]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a5d      	ldr	r2, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0x354>
 8002648:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
 8002654:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d015      	beq.n	8002694 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fcf4 	bl	8001054 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe fcf0 	bl	8001054 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e092      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002686:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0ee      	beq.n	8002670 <HAL_RCC_OscConfig+0x364>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fcde 	bl	8001054 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe fcda 	bl	8001054 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e07c      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b2:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ee      	bne.n	800269c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c4:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80026ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d068      	beq.n	80027aa <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d8:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d060      	beq.n	80027a6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d145      	bne.n	8002778 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ec:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe fcaf 	bl	8001054 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe fcab 	bl	8001054 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e04f      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270c:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	019b      	lsls	r3, r3, #6
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	3b01      	subs	r3, #1
 8002732:	041b      	lsls	r3, r3, #16
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	071b      	lsls	r3, r3, #28
 8002744:	491b      	ldr	r1, [pc, #108]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fc80 	bl	8001054 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe fc7c 	bl	8001054 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e020      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x44c>
 8002776:	e018      	b.n	80027aa <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fc69 	bl	8001054 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002786:	f7fe fc65 	bl	8001054 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e009      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x47a>
 80027a4:	e001      	b.n	80027aa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40007000 	.word	0x40007000
 80027bc:	42470060 	.word	0x42470060

080027c0 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_ADC_INJ_SetSequencerLength>:
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002842:	481c      	ldr	r0, [pc, #112]	; (80028b4 <LL_ADC_CommonInit+0x80>)
 8002844:	f7ff ffe2 	bl	800280c <LL_ADC_IsEnabled>
 8002848:	4604      	mov	r4, r0
 800284a:	481b      	ldr	r0, [pc, #108]	; (80028b8 <LL_ADC_CommonInit+0x84>)
 800284c:	f7ff ffde 	bl	800280c <LL_ADC_IsEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	431c      	orrs	r4, r3
 8002854:	4819      	ldr	r0, [pc, #100]	; (80028bc <LL_ADC_CommonInit+0x88>)
 8002856:	f7ff ffd9 	bl	800280c <LL_ADC_IsEnabled>
 800285a:	4603      	mov	r3, r0
 800285c:	4323      	orrs	r3, r4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d120      	bne.n	80028a4 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d012      	beq.n	8002890 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <LL_ADC_CommonInit+0x8c>)
 8002870:	4013      	ands	r3, r2
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	6811      	ldr	r1, [r2, #0]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	6852      	ldr	r2, [r2, #4]
 800287a:	4311      	orrs	r1, r2
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	6892      	ldr	r2, [r2, #8]
 8002880:	4311      	orrs	r1, r2
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	68d2      	ldr	r2, [r2, #12]
 8002886:	430a      	orrs	r2, r1
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	e00b      	b.n	80028a8 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <LL_ADC_CommonInit+0x8c>)
 8002896:	4013      	ands	r3, r2
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	e001      	b.n	80028a8 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd90      	pop	{r4, r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40012000 	.word	0x40012000
 80028b8:	40012100 	.word	0x40012100
 80028bc:	40012200 	.word	0x40012200
 80028c0:	fffc10e0 	.word	0xfffc10e0

080028c4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff9a 	bl	800280c <LL_ADC_IsEnabled>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d117      	bne.n	800290e <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80028e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	6811      	ldr	r1, [r2, #0]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	6892      	ldr	r2, [r2, #8]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	e001      	b.n	8002912 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ff6e 	bl	800280c <LL_ADC_IsEnabled>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d131      	bne.n	800299a <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	430b      	orrs	r3, r1
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	e008      	b.n	800296a <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <LL_ADC_REG_Init+0x8c>)
 8002970:	4013      	ands	r3, r2
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	68d2      	ldr	r2, [r2, #12]
 800297e:	4311      	orrs	r1, r2
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	6912      	ldr	r2, [r2, #16]
 8002984:	430a      	orrs	r2, r1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff14 	bl	80027c0 <LL_ADC_REG_SetSequencerLength>
 8002998:	e001      	b.n	800299e <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	c0fffcfd 	.word	0xc0fffcfd

080029ac <LL_ADC_INJ_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ff26 	bl	800280c <LL_ADC_IsEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d12b      	bne.n	8002a1e <LL_ADC_INJ_Init+0x72>
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <LL_ADC_INJ_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6899      	ldr	r1, [r3, #8]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	430b      	orrs	r3, r1
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	e008      	b.n	80029fa <LL_ADC_INJ_Init+0x4e>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	605a      	str	r2, [r3, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fee5 	bl	80027e6 <LL_ADC_INJ_SetSequencerLength>
 8002a1c:	e001      	b.n	8002a22 <LL_ADC_INJ_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <LL_EXTI_EnableIT_0_31+0x20>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4904      	ldr	r1, [pc, #16]	; (8002a4c <LL_EXTI_EnableIT_0_31+0x20>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40013c00 	.word	0x40013c00

08002a50 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <LL_EXTI_DisableIT_0_31+0x24>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	4904      	ldr	r1, [pc, #16]	; (8002a74 <LL_EXTI_DisableIT_0_31+0x24>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4904      	ldr	r1, [pc, #16]	; (8002a98 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]

}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40013c00 	.word	0x40013c00

08002a9c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	4904      	ldr	r1, [pc, #16]	; (8002ac0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40013c00 	.word	0x40013c00

08002ac4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	4904      	ldr	r1, [pc, #16]	; (8002ae4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]

}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	4904      	ldr	r1, [pc, #16]	; (8002b0c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]

}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40013c00 	.word	0x40013c00

08002b10 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4904      	ldr	r1, [pc, #16]	; (8002b30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60cb      	str	r3, [r1, #12]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	4904      	ldr	r1, [pc, #16]	; (8002b58 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	60cb      	str	r3, [r1, #12]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40013c00 	.word	0x40013c00

08002b5c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d060      	beq.n	8002c32 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d067      	beq.n	8002c48 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	795b      	ldrb	r3, [r3, #5]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d00e      	beq.n	8002b9e <LL_EXTI_Init+0x42>
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d017      	beq.n	8002bb4 <LL_EXTI_Init+0x58>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d120      	bne.n	8002bca <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff85 	bl	8002a9c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ff48 	bl	8002a2c <LL_EXTI_EnableIT_0_31>
          break;
 8002b9c:	e018      	b.n	8002bd0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff54 	bl	8002a50 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff63 	bl	8002a78 <LL_EXTI_EnableEvent_0_31>
          break;
 8002bb2:	e00d      	b.n	8002bd0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff37 	bl	8002a2c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff58 	bl	8002a78 <LL_EXTI_EnableEvent_0_31>
          break;
 8002bc8:	e002      	b.n	8002bd0 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
          break;
 8002bce:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	799b      	ldrb	r3, [r3, #6]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d037      	beq.n	8002c48 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	799b      	ldrb	r3, [r3, #6]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d00e      	beq.n	8002bfe <LL_EXTI_Init+0xa2>
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d017      	beq.n	8002c14 <LL_EXTI_Init+0xb8>
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d120      	bne.n	8002c2a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ffa1 	bl	8002b34 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff64 	bl	8002ac4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002bfc:	e025      	b.n	8002c4a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff70 	bl	8002ae8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff7f 	bl	8002b10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c12:	e01a      	b.n	8002c4a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff53 	bl	8002ac4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff74 	bl	8002b10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c28:	e00f      	b.n	8002c4a <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
            break;
 8002c2e:	bf00      	nop
 8002c30:	e00b      	b.n	8002c4a <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff ff0a 	bl	8002a50 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff2b 	bl	8002a9c <LL_EXTI_DisableEvent_0_31>
 8002c46:	e000      	b.n	8002c4a <LL_EXTI_Init+0xee>
      }
 8002c48:	bf00      	nop
  }
  return status;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	61bb      	str	r3, [r7, #24]
  return result;
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b089      	sub	sp, #36	; 0x24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	613b      	str	r3, [r7, #16]
  return result;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2103      	movs	r1, #3
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	61bb      	str	r3, [r7, #24]
  return result;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002d34:	bf00      	nop
 8002d36:	3724      	adds	r7, #36	; 0x24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	613b      	str	r3, [r7, #16]
  return result;
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2103      	movs	r1, #3
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	401a      	ands	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	61bb      	str	r3, [r7, #24]
  return result;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	60da      	str	r2, [r3, #12]
}
 8002d92:	bf00      	nop
 8002d94:	3724      	adds	r7, #36	; 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b089      	sub	sp, #36	; 0x24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	613b      	str	r3, [r7, #16]
  return result;
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	210f      	movs	r1, #15
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	401a      	ands	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	61bb      	str	r3, [r7, #24]
  return result;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002df0:	bf00      	nop
 8002df2:	3724      	adds	r7, #36	; 0x24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	613b      	str	r3, [r7, #16]
  return result;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	210f      	movs	r1, #15
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	61bb      	str	r3, [r7, #24]
  return result;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002e52:	bf00      	nop
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b088      	sub	sp, #32
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	613b      	str	r3, [r7, #16]
  return result;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002e88:	e049      	b.n	8002f1e <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	2101      	movs	r1, #1
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d03b      	beq.n	8002f18 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fed3 	bl	8002c54 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d003      	beq.n	8002ebe <LL_GPIO_Init+0x60>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d106      	bne.n	8002ecc <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	69b9      	ldr	r1, [r7, #24]
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ff0b 	bl	8002ce2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff33 	bl	8002d40 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d11a      	bne.n	8002f18 <LL_GPIO_Init+0xba>
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	60bb      	str	r3, [r7, #8]
  return result;
 8002eee:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b07      	cmp	r3, #7
 8002ef8:	d807      	bhi.n	8002f0a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	461a      	mov	r2, r3
 8002f00:	69b9      	ldr	r1, [r7, #24]
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ff4b 	bl	8002d9e <LL_GPIO_SetAFPin_0_7>
 8002f08:	e006      	b.n	8002f18 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	69b9      	ldr	r1, [r7, #24]
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ff72 	bl	8002dfc <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ae      	bne.n	8002e8a <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d003      	beq.n	8002f3c <LL_GPIO_Init+0xde>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d107      	bne.n	8002f4c <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	461a      	mov	r2, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff feb3 	bl	8002cb2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <LL_RCC_GetSysClkSource+0x18>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 030c 	and.w	r3, r3, #12
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800

08002f74 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <LL_RCC_GetAHBPrescaler+0x18>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800

08002f90 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800

08002fac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <LL_RCC_PLL_GetMainSource+0x18>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800

08002fe4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <LL_RCC_PLL_GetN+0x18>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40023800 	.word	0x40023800

08003000 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <LL_RCC_PLL_GetP+0x18>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800

0800301c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <LL_RCC_PLL_GetR+0x18>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800

08003038 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <LL_RCC_PLL_GetDivider+0x18>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800305c:	f000 f820 	bl	80030a0 <RCC_GetSystemClockFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f85c 	bl	8003128 <RCC_GetHCLKClockFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f86a 	bl	8003154 <RCC_GetPCLK1ClockFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f876 	bl	800317c <RCC_GetPCLK2ClockFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60da      	str	r2, [r3, #12]
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80030aa:	f7ff ff55 	bl	8002f58 <LL_RCC_GetSysClkSource>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d82d      	bhi.n	8003110 <RCC_GetSystemClockFreq+0x70>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <RCC_GetSystemClockFreq+0x1c>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003111 	.word	0x08003111
 80030c4:	08003111 	.word	0x08003111
 80030c8:	08003111 	.word	0x08003111
 80030cc:	080030f7 	.word	0x080030f7
 80030d0:	08003111 	.word	0x08003111
 80030d4:	08003111 	.word	0x08003111
 80030d8:	08003111 	.word	0x08003111
 80030dc:	080030fd 	.word	0x080030fd
 80030e0:	08003111 	.word	0x08003111
 80030e4:	08003111 	.word	0x08003111
 80030e8:	08003111 	.word	0x08003111
 80030ec:	08003107 	.word	0x08003107
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <RCC_GetSystemClockFreq+0x80>)
 80030f2:	607b      	str	r3, [r7, #4]
      break;
 80030f4:	e00f      	b.n	8003116 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <RCC_GetSystemClockFreq+0x84>)
 80030f8:	607b      	str	r3, [r7, #4]
      break;
 80030fa:	e00c      	b.n	8003116 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80030fc:	2008      	movs	r0, #8
 80030fe:	f000 f851 	bl	80031a4 <RCC_PLL_GetFreqDomain_SYS>
 8003102:	6078      	str	r0, [r7, #4]
      break;
 8003104:	e007      	b.n	8003116 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8003106:	200c      	movs	r0, #12
 8003108:	f000 f84c 	bl	80031a4 <RCC_PLL_GetFreqDomain_SYS>
 800310c:	6078      	str	r0, [r7, #4]
      break;
 800310e:	e002      	b.n	8003116 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <RCC_GetSystemClockFreq+0x80>)
 8003112:	607b      	str	r3, [r7, #4]
      break;
 8003114:	bf00      	nop
  }

  return frequency;
 8003116:	687b      	ldr	r3, [r7, #4]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	00f42400 	.word	0x00f42400
 8003124:	007a1200 	.word	0x007a1200

08003128 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003130:	f7ff ff20 	bl	8002f74 <LL_RCC_GetAHBPrescaler>
 8003134:	4603      	mov	r3, r0
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	4a04      	ldr	r2, [pc, #16]	; (8003150 <RCC_GetHCLKClockFreq+0x28>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	40d3      	lsrs	r3, r2
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	0800ca44 	.word	0x0800ca44

08003154 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800315c:	f7ff ff18 	bl	8002f90 <LL_RCC_GetAPB1Prescaler>
 8003160:	4603      	mov	r3, r0
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	4a04      	ldr	r2, [pc, #16]	; (8003178 <RCC_GetPCLK1ClockFreq+0x24>)
 8003166:	5cd3      	ldrb	r3, [r2, r3]
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	40d3      	lsrs	r3, r2
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	0800ca54 	.word	0x0800ca54

0800317c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003184:	f7ff ff12 	bl	8002fac <LL_RCC_GetAPB2Prescaler>
 8003188:	4603      	mov	r3, r0
 800318a:	0b5b      	lsrs	r3, r3, #13
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <RCC_GetPCLK2ClockFreq+0x24>)
 800318e:	5cd3      	ldrb	r3, [r2, r3]
 8003190:	461a      	mov	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	40d3      	lsrs	r3, r2
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	0800ca54 	.word	0x0800ca54

080031a4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80031b8:	f7ff ff06 	bl	8002fc8 <LL_RCC_PLL_GetMainSource>
 80031bc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <RCC_PLL_GetFreqDomain_SYS+0x28>
 80031c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c8:	d003      	beq.n	80031d2 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80031ca:	e005      	b.n	80031d8 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <RCC_PLL_GetFreqDomain_SYS+0x98>)
 80031ce:	617b      	str	r3, [r7, #20]
      break;
 80031d0:	e005      	b.n	80031de <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80031d2:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80031d4:	617b      	str	r3, [r7, #20]
      break;
 80031d6:	e002      	b.n	80031de <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <RCC_PLL_GetFreqDomain_SYS+0x98>)
 80031da:	617b      	str	r3, [r7, #20]
      break;
 80031dc:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d114      	bne.n	800320e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80031e4:	f7ff ff28 	bl	8003038 <LL_RCC_PLL_GetDivider>
 80031e8:	4602      	mov	r2, r0
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	fbb3 f4f2 	udiv	r4, r3, r2
 80031f0:	f7ff fef8 	bl	8002fe4 <LL_RCC_PLL_GetN>
 80031f4:	4603      	mov	r3, r0
 80031f6:	fb03 f404 	mul.w	r4, r3, r4
 80031fa:	f7ff ff01 	bl	8003000 <LL_RCC_PLL_GetP>
 80031fe:	4603      	mov	r3, r0
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	3301      	adds	r3, #1
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fbb4 f3f3 	udiv	r3, r4, r3
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	e011      	b.n	8003232 <RCC_PLL_GetFreqDomain_SYS+0x8e>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800320e:	f7ff ff13 	bl	8003038 <LL_RCC_PLL_GetDivider>
 8003212:	4602      	mov	r2, r0
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	fbb3 f4f2 	udiv	r4, r3, r2
 800321a:	f7ff fee3 	bl	8002fe4 <LL_RCC_PLL_GetN>
 800321e:	4603      	mov	r3, r0
 8003220:	fb03 f404 	mul.w	r4, r3, r4
 8003224:	f7ff fefa 	bl	800301c <LL_RCC_PLL_GetR>
 8003228:	4603      	mov	r3, r0
 800322a:	0f1b      	lsrs	r3, r3, #28
 800322c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003230:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003232:	693b      	ldr	r3, [r7, #16]
}
 8003234:	4618      	mov	r0, r3
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	00f42400 	.word	0x00f42400
 8003240:	007a1200 	.word	0x007a1200

08003244 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	615a      	str	r2, [r3, #20]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a3d      	ldr	r2, [pc, #244]	; (8003430 <LL_TIM_Init+0x108>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003346:	d00f      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a3a      	ldr	r2, [pc, #232]	; (8003434 <LL_TIM_Init+0x10c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a39      	ldr	r2, [pc, #228]	; (8003438 <LL_TIM_Init+0x110>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d007      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a38      	ldr	r2, [pc, #224]	; (800343c <LL_TIM_Init+0x114>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a37      	ldr	r2, [pc, #220]	; (8003440 <LL_TIM_Init+0x118>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d106      	bne.n	8003376 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a2d      	ldr	r2, [pc, #180]	; (8003430 <LL_TIM_Init+0x108>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d02b      	beq.n	80033d6 <LL_TIM_Init+0xae>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	d027      	beq.n	80033d6 <LL_TIM_Init+0xae>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2a      	ldr	r2, [pc, #168]	; (8003434 <LL_TIM_Init+0x10c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d023      	beq.n	80033d6 <LL_TIM_Init+0xae>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a29      	ldr	r2, [pc, #164]	; (8003438 <LL_TIM_Init+0x110>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01f      	beq.n	80033d6 <LL_TIM_Init+0xae>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a28      	ldr	r2, [pc, #160]	; (800343c <LL_TIM_Init+0x114>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01b      	beq.n	80033d6 <LL_TIM_Init+0xae>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a27      	ldr	r2, [pc, #156]	; (8003440 <LL_TIM_Init+0x118>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d017      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a26      	ldr	r2, [pc, #152]	; (8003444 <LL_TIM_Init+0x11c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a25      	ldr	r2, [pc, #148]	; (8003448 <LL_TIM_Init+0x120>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00f      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a24      	ldr	r2, [pc, #144]	; (800344c <LL_TIM_Init+0x124>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a23      	ldr	r2, [pc, #140]	; (8003450 <LL_TIM_Init+0x128>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a22      	ldr	r2, [pc, #136]	; (8003454 <LL_TIM_Init+0x12c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a21      	ldr	r2, [pc, #132]	; (8003458 <LL_TIM_Init+0x130>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d106      	bne.n	80033e4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4619      	mov	r1, r3
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff35 	bl	8003260 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff21 	bl	8003244 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <LL_TIM_Init+0x108>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <LL_TIM_Init+0xea>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <LL_TIM_Init+0x118>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d105      	bne.n	800341e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	7c1b      	ldrb	r3, [r3, #16]
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff2f 	bl	800327c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ff72 	bl	8003308 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40000c00 	.word	0x40000c00
 8003440:	40010400 	.word	0x40010400
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800
 8003450:	40001800 	.word	0x40001800
 8003454:	40001c00 	.word	0x40001c00
 8003458:	40002000 	.word	0x40002000

0800345c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b10      	cmp	r3, #16
 8003470:	d012      	beq.n	8003498 <LL_TIM_OC_Init+0x3c>
 8003472:	2b10      	cmp	r3, #16
 8003474:	d802      	bhi.n	800347c <LL_TIM_OC_Init+0x20>
 8003476:	2b01      	cmp	r3, #1
 8003478:	d007      	beq.n	800348a <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800347a:	e022      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 800347c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003480:	d011      	beq.n	80034a6 <LL_TIM_OC_Init+0x4a>
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d015      	beq.n	80034b4 <LL_TIM_OC_Init+0x58>
      break;
 8003488:	e01b      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f867 	bl	8003560 <OC1Config>
 8003492:	4603      	mov	r3, r0
 8003494:	75fb      	strb	r3, [r7, #23]
      break;
 8003496:	e014      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f8cc 	bl	8003638 <OC2Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	75fb      	strb	r3, [r7, #23]
      break;
 80034a4:	e00d      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f935 	bl	8003718 <OC3Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	75fb      	strb	r3, [r7, #23]
      break;
 80034b2:	e006      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f99e 	bl	80037f8 <OC4Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	75fb      	strb	r3, [r7, #23]
      break;
 80034c0:	bf00      	nop
  }

  return result;
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	7b12      	ldrb	r2, [r2, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	89d2      	ldrh	r2, [r2, #14]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0201 	bic.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 0202 	bic.w	r2, r3, #2
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0201 	bic.w	r2, r3, #1
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <OC1Config+0xd0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <OC1Config+0x6a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <OC1Config+0xd4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d11e      	bne.n	8003608 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 0208 	bic.w	r2, r3, #8
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 0204 	bic.w	r2, r3, #4
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4619      	mov	r1, r3
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff fe3c 	bl	8003298 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40010000 	.word	0x40010000
 8003634:	40010400 	.word	0x40010400

08003638 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0210 	bic.w	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0220 	bic.w	r2, r3, #32
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0210 	bic.w	r2, r3, #16
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <OC2Config+0xd8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <OC2Config+0x70>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <OC2Config+0xdc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d11f      	bne.n	80036e8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	019b      	lsls	r3, r3, #6
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	019b      	lsls	r3, r3, #6
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff fdda 	bl	80032b4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40010000 	.word	0x40010000
 8003714:	40010400 	.word	0x40010400

08003718 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1d      	ldr	r2, [pc, #116]	; (80037f0 <OC3Config+0xd8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <OC3Config+0x6e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <OC3Config+0xdc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d11f      	bne.n	80037c6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	029b      	lsls	r3, r3, #10
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	029b      	lsls	r3, r3, #10
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	015b      	lsls	r3, r3, #5
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fd79 	bl	80032d0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40010400 	.word	0x40010400

080037f8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	031b      	lsls	r3, r3, #12
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	031b      	lsls	r3, r3, #12
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <OC4Config+0xa8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <OC4Config+0x70>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <OC4Config+0xac>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d107      	bne.n	8003878 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	019b      	lsls	r3, r3, #6
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fd2e 	bl	80032ec <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40010400 	.word	0x40010400

080038a8 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038bc:	bf0c      	ite	eq
 80038be:	2301      	moveq	r3, #1
 80038c0:	2300      	movne	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	611a      	str	r2, [r3, #16]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	615a      	str	r2, [r3, #20]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003930:	d152      	bne.n	80039d8 <LL_USART_SetBaudRate+0xbc>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009a      	lsls	r2, r3, #2
 800393c:	441a      	add	r2, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	4a4f      	ldr	r2, [pc, #316]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	b29b      	uxth	r3, r3
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	b299      	uxth	r1, r3
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	009a      	lsls	r2, r3, #2
 800395e:	441a      	add	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fbb2 f2f3 	udiv	r2, r2, r3
 8003968:	4b46      	ldr	r3, [pc, #280]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 800396a:	fba3 0302 	umull	r0, r3, r3, r2
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2064      	movs	r0, #100	; 0x64
 8003972:	fb00 f303 	mul.w	r3, r0, r3
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	3332      	adds	r3, #50	; 0x32
 800397c:	4a41      	ldr	r2, [pc, #260]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	b29b      	uxth	r3, r3
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	b29b      	uxth	r3, r3
 800398a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800398e:	b29b      	uxth	r3, r3
 8003990:	440b      	add	r3, r1
 8003992:	b299      	uxth	r1, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009a      	lsls	r2, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 80039aa:	fba3 0302 	umull	r0, r3, r3, r2
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	2064      	movs	r0, #100	; 0x64
 80039b2:	fb00 f303 	mul.w	r3, r0, r3
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	3332      	adds	r3, #50	; 0x32
 80039bc:	4a31      	ldr	r2, [pc, #196]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	440b      	add	r3, r1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80039d6:	e04f      	b.n	8003a78 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	009a      	lsls	r2, r3, #2
 80039e2:	441a      	add	r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	4a25      	ldr	r2, [pc, #148]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	b299      	uxth	r1, r3
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009a      	lsls	r2, r3, #2
 8003a04:	441a      	add	r2, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003a10:	fba3 0302 	umull	r0, r3, r3, r2
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	2064      	movs	r0, #100	; 0x64
 8003a18:	fb00 f303 	mul.w	r3, r0, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	3332      	adds	r3, #50	; 0x32
 8003a22:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	440b      	add	r3, r1
 8003a34:	b299      	uxth	r1, r3
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009a      	lsls	r2, r3, #2
 8003a40:	441a      	add	r2, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003a4c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	2064      	movs	r0, #100	; 0x64
 8003a54:	fb00 f303 	mul.w	r3, r0, r3
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	3332      	adds	r3, #50	; 0x32
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	440b      	add	r3, r1
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	609a      	str	r2, [r3, #8]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	51eb851f 	.word	0x51eb851f

08003a88 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff04 	bl	80038a8 <LL_USART_IsEnabled>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d15e      	bne.n	8003b64 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003aae:	f023 030c 	bic.w	r3, r3, #12
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	6851      	ldr	r1, [r2, #4]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	68d2      	ldr	r2, [r2, #12]
 8003aba:	4311      	orrs	r1, r2
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	6912      	ldr	r2, [r2, #16]
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	6992      	ldr	r2, [r2, #24]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fefb 	bl	80038d0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff08 	bl	80038f6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003ae6:	f107 0308 	add.w	r3, r7, #8
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fab2 	bl	8003054 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <LL_USART_Init+0xe8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d102      	bne.n	8003afe <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e021      	b.n	8003b42 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <LL_USART_Init+0xec>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d102      	bne.n	8003b0c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	e01a      	b.n	8003b42 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <LL_USART_Init+0xf0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d102      	bne.n	8003b1a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	e013      	b.n	8003b42 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <LL_USART_Init+0xf4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d102      	bne.n	8003b28 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	e00c      	b.n	8003b42 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <LL_USART_Init+0xf8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d102      	bne.n	8003b36 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	e005      	b.n	8003b42 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <LL_USART_Init+0xfc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00d      	beq.n	8003b64 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003b50:	2300      	movs	r3, #0
 8003b52:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69b9      	ldr	r1, [r7, #24]
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fedc 	bl	800391c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40011000 	.word	0x40011000
 8003b74:	40004400 	.word	0x40004400
 8003b78:	40004800 	.word	0x40004800
 8003b7c:	40011400 	.word	0x40011400
 8003b80:	40004c00 	.word	0x40004c00
 8003b84:	40005000 	.word	0x40005000

08003b88 <_ZN9ArgSensorC1Ev>:
 * ABZエンコーダ等の物理エンコーダもここに実装する。
 */

#include "ArgSensor.hpp"

ArgSensor::ArgSensor() {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <_ZN9ArgSensorC1Ev+0x44>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3318      	adds	r3, #24
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f002 f87a 	bl	8005c94 <_ZN8ObserverC1Ev>
	// TODO Auto-generated constructor stub
	mArg = 0;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	605a      	str	r2, [r3, #4]
	mImArgcount = 0;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	615a      	str	r2, [r3, #20]
	mArg_delta = 0;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]
	mFCisON = 0;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	741a      	strb	r2, [r3, #16]
	mIsAccelerating = false;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	745a      	strb	r2, [r3, #17]
}
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	0800c9ac 	.word	0x0800c9ac

08003bd0 <_ZN9ArgSensorD1Ev>:

ArgSensor::~ArgSensor() {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	4a06      	ldr	r2, [pc, #24]	; (8003bf4 <_ZN9ArgSensorD1Ev+0x24>)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3318      	adds	r3, #24
 8003be2:	4618      	mov	r0, r3
 8003be4:	f002 f866 	bl	8005cb4 <_ZN8ObserverD1Ev>
	// TODO Auto-generated destructor stub
}
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	0800c9ac 	.word	0x0800c9ac

08003bf8 <_ZN9ArgSensorD0Ev>:
ArgSensor::~ArgSensor() {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
}
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ffe5 	bl	8003bd0 <_ZN9ArgSensorD1Ev>
 8003c06:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f005 fc2c 	bl	8009468 <_ZdlPvj>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <_ZN9ArgSensor4InitEv>:

void ArgSensor::Init(void) {
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
	mArgOld = 0;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
	mArg = 0;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	605a      	str	r2, [r3, #4]
	mArg_delta = 0;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	60da      	str	r2, [r3, #12]
	mFCisON = 0;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	741a      	strb	r2, [r3, #16]
	mIsAccelerating = false;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	745a      	strb	r2, [r3, #17]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <_ZN9DebugCtrlC1Ev>:
 *      Author: watashi
 */

#include "DebugCtrl.hpp"

DebugCtrl::DebugCtrl() {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <_ZN9DebugCtrlC1Ev+0x38>)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fa1e 	bl	80040a8 <_ZN9DebugInfoC1Ev>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3314      	adds	r3, #20
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 faab 	bl	80041cc <_ZN13DebugInfoTinyC1Ev>
	// TODO Auto-generated constructor stub
	mDebugStatus = 0;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 8003c7c:	3320      	adds	r3, #32
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
}
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	0800c9bc 	.word	0x0800c9bc

08003c90 <_ZN9DebugCtrlD1Ev>:

DebugCtrl::~DebugCtrl() {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <_ZN9DebugCtrlD1Ev+0x2c>)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3314      	adds	r3, #20
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 faa6 	bl	80041f4 <_ZN13DebugInfoTinyD1Ev>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fa0f 	bl	80040d0 <_ZN9DebugInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	0800c9bc 	.word	0x0800c9bc

08003cc0 <_ZN9DebugCtrlD0Ev>:
DebugCtrl::~DebugCtrl() {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
}
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ffe1 	bl	8003c90 <_ZN9DebugCtrlD1Ev>
 8003cce:	f642 5124 	movw	r1, #11556	; 0x2d24
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f005 fbc8 	bl	8009468 <_ZdlPvj>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8003ce2:	b408      	push	{r3}
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3307      	adds	r3, #7
 8003cf4:	3307      	adds	r3, #7
 8003cf6:	08db      	lsrs	r3, r3, #3
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	ebad 0d03 	sub.w	sp, sp, r3
 8003cfe:	466b      	mov	r3, sp
 8003d00:	3307      	adds	r3, #7
 8003d02:	08db      	lsrs	r3, r3, #3
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8003d08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d0c:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8003d0e:	68bc      	ldr	r4, [r7, #8]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	69f8      	ldr	r0, [r7, #28]
 8003d18:	47a0      	blx	r4
 8003d1a:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	18d4      	adds	r4, r2, r3
 8003d22:	f107 0314 	add.w	r3, r7, #20
 8003d26:	4618      	mov	r0, r3
 8003d28:	f005 fbb1 	bl	800948e <_ZNSaIcEC1Ev>
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	4622      	mov	r2, r4
 8003d32:	69f9      	ldr	r1, [r7, #28]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f827 	bl	8003d88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f005 fba6 	bl	8009490 <_ZNSaIcED1Ev>
    }
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003d4e:	b001      	add	sp, #4
 8003d50:	4770      	bx	lr

08003d52 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8003d52:	b5b0      	push	{r4, r5, r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681c      	ldr	r4, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f850 	bl	8003e0a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 8003d6a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4629      	mov	r1, r5
 8003d70:	4620      	mov	r0, r4
 8003d72:	f000 f855 	bl	8003e20 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f82c 	bl	8003dd6 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bdb0      	pop	{r4, r5, r7, pc}

08003d88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
      template<typename _InputIterator,
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
        basic_string(_InputIterator __beg, _InputIterator __end,
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a)
 8003d96:	68fc      	ldr	r4, [r7, #12]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f005 fb8b 	bl	80094b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	4620      	mov	r0, r4
 8003da6:	f005 fc57 	bl	8009658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f844 	bl	8003e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd90      	pop	{r4, r7, pc}

08003dbe <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f847 	bl	8003e5a <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6819      	ldr	r1, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8003de6:	461a      	mov	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	119b      	asrs	r3, r3, #6
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8003df0:	461a      	mov	r2, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f83d 	bl	8003e72 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff ffdf 	bl	8003dbe <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f832 	bl	8003e98 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>
    }
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f830 	bl	8003eb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8003e52:	bf00      	nop
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f836 	bl	8003ed4 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
	if (__p)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f82d 	bl	8003eea <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>
      }
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003ea2:	6839      	ldr	r1, [r7, #0]
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f83a 	bl	8003f1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>
    }
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8003eb2:	b590      	push	{r4, r7, lr}
 8003eb4:	b087      	sub	sp, #28
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8003ec0:	4623      	mov	r3, r4
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f842 	bl	8003f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8003ecc:	bf00      	nop
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd90      	pop	{r4, r7, pc}

08003ed4 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f870 	bl	8003fe0 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d00a      	beq.n	8003f46 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ffe9 	bl	8003f08 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 f85e 	bl	8003ffa <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>
	  for (; __first != __last; ++__first)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3340      	adds	r3, #64	; 0x40
 8003f42:	607b      	str	r3, [r7, #4]
 8003f44:	e7f0      	b.n	8003f28 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0xa>
	}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8003f5e:	68b8      	ldr	r0, [r7, #8]
 8003f60:	f000 f858 	bl	8004014 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d001      	beq.n	8003f76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8003f7c:	4817      	ldr	r0, [pc, #92]	; (8003fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8003f7e:	f005 fa8b 	bl	8009498 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	68b8      	ldr	r0, [r7, #8]
 8003f86:	f000 f85f 	bl	8004048 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b0f      	cmp	r3, #15
 8003f92:	d910      	bls.n	8003fb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	2200      	movs	r2, #0
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f005 fa93 	bl	80094c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f005 fa80 	bl	80094ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f005 fa81 	bl	80094b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f005 fa7a 	bl	80094b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f005 fab7 	bl	8009536 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f005 fa75 	bl	80094bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8003fd2:	bf00      	nop
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	0800c91c 	.word	0x0800c91c

08003fe0 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8003fec:	68b8      	ldr	r0, [r7, #8]
 8003fee:	f005 fa39 	bl	8009464 <_ZdlPv>
      }
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>:
    _Destroy(_Tp* __pointer)
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	4798      	blx	r3
 800400c:	bf00      	nop
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	bf0c      	ite	eq
 8004022:	2301      	moveq	r3, #1
 8004024:	2300      	movne	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004048:	b5b0      	push	{r4, r5, r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004052:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004054:	1d3b      	adds	r3, r7, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ffec 	bl	8004034 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800405c:	462a      	mov	r2, r5
 800405e:	6839      	ldr	r1, [r7, #0]
 8004060:	4620      	mov	r0, r4
 8004062:	f000 f805 	bl	8004070 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8004066:	4603      	mov	r3, r0
    }
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bdb0      	pop	{r4, r5, r7, pc}

08004070 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
    }
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <_ZN9DebugInfoC1Ev>:

DebugInfo::SendMotorData::~SendMotorData(){
	//destructor
}

DebugInfo::DebugInfo() {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	4a06      	ldr	r2, [pc, #24]	; (80040cc <_ZN9DebugInfoC1Ev+0x24>)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f82c 	bl	8004118 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
	// TODO Auto-generated constructor stub
}
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	0800c9cc 	.word	0x0800c9cc

080040d0 <_ZN9DebugInfoD1Ev>:

DebugInfo::~DebugInfo() {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	4a06      	ldr	r2, [pc, #24]	; (80040f4 <_ZN9DebugInfoD1Ev+0x24>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fe35 	bl	8003d52 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
	// TODO Auto-generated destructor stub
}
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	0800c9cc 	.word	0x0800c9cc

080040f8 <_ZN9DebugInfoD0Ev>:
DebugInfo::~DebugInfo() {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
}
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ffe5 	bl	80040d0 <_ZN9DebugInfoD1Ev>
 8004106:	2110      	movs	r1, #16
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f005 f9ad 	bl	8009468 <_ZdlPvj>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      vector()
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f805 	bl	8004132 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      _Vector_base()
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 f805 	bl	800414c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f80e 	bl	8004176 <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	609a      	str	r2, [r3, #8]
	{ }
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>:
      allocator() throw() { }
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f819 	bl	80041b6 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d201      	bcs.n	80041a8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	e000      	b.n	80041aa <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80041a8:	687b      	ldr	r3, [r7, #4]
    }
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_ZN13DebugInfoTinyC1Ev>:
 * 読み出しがVector型であるのは(float型でないのは)データの個数の変化に対応するため。
 *(配列のfor使って調理してください(にっこり))
 */
#include "DebugInfoTiny.hpp"

DebugInfoTiny::DebugInfoTiny() {
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	4a06      	ldr	r2, [pc, #24]	; (80041f0 <_ZN13DebugInfoTinyC1Ev+0x24>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mCNT = 0;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	605a      	str	r2, [r3, #4]
}
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	0800c9dc 	.word	0x0800c9dc

080041f4 <_ZN13DebugInfoTinyD1Ev>:

DebugInfoTiny::~DebugInfoTiny() {
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <_ZN13DebugInfoTinyD1Ev+0x1c>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	0800c9dc 	.word	0x0800c9dc

08004214 <_ZN13DebugInfoTinyD0Ev>:
DebugInfoTiny::~DebugInfoTiny() {
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
}
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff ffe9 	bl	80041f4 <_ZN13DebugInfoTinyD1Ev>
 8004222:	f642 5108 	movw	r1, #11528	; 0x2d08
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f005 f91e 	bl	8009468 <_ZdlPvj>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <LL_ADC_Enable>:
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	609a      	str	r2, [r3, #8]
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <LL_ADC_ClearFlag_JEOS>:
  * @rmtoll SR       JEOC           LL_ADC_ClearFlag_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f06f 0204 	mvn.w	r2, #4
 8004264:	601a      	str	r2, [r3, #0]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <LL_ADC_EnableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	605a      	str	r2, [r3, #4]
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	619a      	str	r2, [r3, #24]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <_ZN3PWMC1Ev>:

#include "STM32SystemPack.h"
#include "paramsetting.h"
//#include "stm32f4xx_ll_tim.h"//need

class PWM {
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	605a      	str	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <_ZN9MotorCtrlC1Ev>:
 *      Author: watashi
 */

#include "MotorCtrl.hpp"

MotorCtrl::MotorCtrl() {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	4a15      	ldr	r2, [pc, #84]	; (8004330 <_ZN9MotorCtrlC1Ev+0x60>)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4618      	mov	r0, r3
 80042e4:	f001 fbd8 	bl	8005a98 <_ZN9MotorInfoC1Ev>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff ffdd 	bl	80042ae <_ZN3PWMC1Ev>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff ffd7 	bl	80042ae <_ZN3PWMC1Ev>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff ffd1 	bl	80042ae <_ZN3PWMC1Ev>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff ffcb 	bl	80042ae <_ZN3PWMC1Ev>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fc98 	bl	8003c54 <_ZN9DebugCtrlC1Ev>
	// TODO Auto-generated constructor stub

}
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	0800c9ec 	.word	0x0800c9ec

08004334 <_ZN9MotorCtrlD1Ev>:

MotorCtrl::~MotorCtrl() {
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	4a09      	ldr	r2, [pc, #36]	; (8004364 <_ZN9MotorCtrlD1Ev+0x30>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff fca1 	bl	8003c90 <_ZN9DebugCtrlD1Ev>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	4618      	mov	r0, r3
 8004354:	f001 fbd4 	bl	8005b00 <_ZN9MotorInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	0800c9ec 	.word	0x0800c9ec

08004368 <_ZN9MotorCtrlD0Ev>:
MotorCtrl::~MotorCtrl() {
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
}
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ffdf 	bl	8004334 <_ZN9MotorCtrlD1Ev>
 8004376:	f243 0144 	movw	r1, #12356	; 0x3044
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f005 f874 	bl	8009468 <_ZdlPvj>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <_ZN7MathLibaSERKS_>:
#define MATHLIB_HPP_

#include <vector>
#include "math.h"

class MathLib {
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	1d1a      	adds	r2, r3, #4
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	3304      	adds	r3, #4
 800439c:	4619      	mov	r1, r3
 800439e:	4610      	mov	r0, r2
 80043a0:	f000 fe43 	bl	800502a <_ZNSt6vectorIfSaIfEEaSERKS1_>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f103 0210 	add.w	r2, r3, #16
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	3310      	adds	r3, #16
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f000 fe3a 	bl	800502a <_ZNSt6vectorIfSaIfEEaSERKS1_>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	61da      	str	r2, [r3, #28]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	621a      	str	r2, [r3, #32]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <_ZN7TimInfoaSERKS_>:
#ifndef TIMINFO_HPP_
#define TIMINFO_HPP_

#include "STM32SystemPack.h"

class TimInfo {
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	609a      	str	r2, [r3, #8]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	611a      	str	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <_ZN3PIDaSERKS_>:
#ifndef PID_HPP_
#define PID_HPP_

#include <array>

class PID {
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	3304      	adds	r3, #4
 8004418:	3204      	adds	r2, #4
 800441a:	ca07      	ldmia	r2, {r0, r1, r2}
 800441c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	611a      	str	r2, [r3, #16]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	615a      	str	r2, [r3, #20]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	699a      	ldr	r2, [r3, #24]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	619a      	str	r2, [r3, #24]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	61da      	str	r2, [r3, #28]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6a1a      	ldr	r2, [r3, #32]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	621a      	str	r2, [r3, #32]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	625a      	str	r2, [r3, #36]	; 0x24
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <_ZN8ObserveraSERKS_>:
 * Observerにゲインは置いておいて、それぞれに渡す。
 * そうするといくらか楽にはなるかもしれないね。
 *
 */

class Observer {
 800445e:	b4b0      	push	{r4, r5, r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	60da      	str	r2, [r3, #12]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	611a      	str	r2, [r3, #16]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	615a      	str	r2, [r3, #20]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	619a      	str	r2, [r3, #24]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	61da      	str	r2, [r3, #28]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	3320      	adds	r3, #32
 80044a6:	3220      	adds	r2, #32
 80044a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	3328      	adds	r3, #40	; 0x28
 80044b6:	3228      	adds	r2, #40	; 0x28
 80044b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	3330      	adds	r3, #48	; 0x30
 80044c6:	3230      	adds	r2, #48	; 0x30
 80044c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	3338      	adds	r3, #56	; 0x38
 80044d6:	3238      	adds	r2, #56	; 0x38
 80044d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	645a      	str	r2, [r3, #68]	; 0x44
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	649a      	str	r2, [r3, #72]	; 0x48
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	651a      	str	r2, [r3, #80]	; 0x50
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	3354      	adds	r3, #84	; 0x54
 800450e:	3254      	adds	r2, #84	; 0x54
 8004510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004514:	e883 0003 	stmia.w	r3, {r0, r1}
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	335c      	adds	r3, #92	; 0x5c
 800451e:	325c      	adds	r2, #92	; 0x5c
 8004520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004524:	e883 0003 	stmia.w	r3, {r0, r1}
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	3364      	adds	r3, #100	; 0x64
 800452e:	3264      	adds	r2, #100	; 0x64
 8004530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004534:	e883 0003 	stmia.w	r3, {r0, r1}
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f102 046c 	add.w	r4, r2, #108	; 0x6c
 8004540:	f103 056c 	add.w	r5, r3, #108	; 0x6c
 8004544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	3380      	adds	r3, #128	; 0x80
 8004552:	3280      	adds	r2, #128	; 0x80
 8004554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004558:	e883 0003 	stmia.w	r3, {r0, r1}
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	3388      	adds	r3, #136	; 0x88
 8004562:	3288      	adds	r2, #136	; 0x88
 8004564:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004568:	e883 0003 	stmia.w	r3, {r0, r1}
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	3390      	adds	r3, #144	; 0x90
 8004572:	3290      	adds	r2, #144	; 0x90
 8004574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004578:	e883 0003 	stmia.w	r3, {r0, r1}
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	3398      	adds	r3, #152	; 0x98
 8004582:	3298      	adds	r2, #152	; 0x98
 8004584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004588:	e883 0003 	stmia.w	r3, {r0, r1}
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	33a0      	adds	r3, #160	; 0xa0
 8004592:	32a0      	adds	r2, #160	; 0xa0
 8004594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004598:	e883 0003 	stmia.w	r3, {r0, r1}
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f102 04a8 	add.w	r4, r2, #168	; 0xa8
 80045a4:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
 80045a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	6023      	str	r3, [r4, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	33bc      	adds	r3, #188	; 0xbc
 80045b6:	32bc      	adds	r2, #188	; 0xbc
 80045b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	33c4      	adds	r3, #196	; 0xc4
 80045c6:	32c4      	adds	r2, #196	; 0xc4
 80045c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	33cc      	adds	r3, #204	; 0xcc
 80045d6:	32cc      	adds	r2, #204	; 0xcc
 80045d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	33e4      	adds	r3, #228	; 0xe4
 8004616:	32e4      	adds	r2, #228	; 0xe4
 8004618:	ca07      	ldmia	r2, {r0, r1, r2}
 800461a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	33f4      	adds	r3, #244	; 0xf4
 8004630:	32f4      	adds	r2, #244	; 0xf4
 8004632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004636:	e883 0003 	stmia.w	r3, {r0, r1}
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	33fc      	adds	r3, #252	; 0xfc
 8004640:	32fc      	adds	r2, #252	; 0xfc
 8004642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004646:	e883 0003 	stmia.w	r3, {r0, r1}
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004652:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8004656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800465a:	e883 0003 	stmia.w	r3, {r0, r1}
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004666:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800466a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800466e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800467a:	f502 728a 	add.w	r2, r2, #276	; 0x114
 800467e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004682:	e883 0003 	stmia.w	r3, {r0, r1}
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800468e:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 8004692:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004696:	e883 0003 	stmia.w	r3, {r0, r1}
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	f502 7492 	add.w	r4, r2, #292	; 0x124
 80046a2:	f503 7592 	add.w	r5, r3, #292	; 0x124
 80046a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046aa:	682b      	ldr	r3, [r5, #0]
 80046ac:	6023      	str	r3, [r4, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80046b6:	f502 729c 	add.w	r2, r2, #312	; 0x138
 80046ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046be:	e883 0003 	stmia.w	r3, {r0, r1}
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80046ca:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80046ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80046de:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 80046e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004722:	f502 72b0 	add.w	r2, r2, #352	; 0x160
 8004726:	ca07      	ldmia	r2, {r0, r1, r2}
 8004728:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8004740:	f502 72b8 	add.w	r2, r2, #368	; 0x170
 8004744:	ca07      	ldmia	r2, {r0, r1, r2}
 8004746:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800475e:	f502 72c0 	add.w	r2, r2, #384	; 0x180
 8004762:	ca07      	ldmia	r2, {r0, r1, r2}
 8004764:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bcb0      	pop	{r4, r5, r7}
 800478a:	4770      	bx	lr

0800478c <_ZN9ArgSensoraSERKS_>:
#define ARGSENSOR_HPP_

#include "math.h"
#include "Observer.hpp"

class ArgSensor {
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	609a      	str	r2, [r3, #8]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	7c1a      	ldrb	r2, [r3, #16]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	741a      	strb	r2, [r3, #16]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	7c5a      	ldrb	r2, [r3, #17]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	745a      	strb	r2, [r3, #17]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	615a      	str	r2, [r3, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f103 0218 	add.w	r2, r3, #24
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	3318      	adds	r3, #24
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f7ff fe43 	bl	800445e <_ZN8ObserveraSERKS_>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <_ZN9MotorCtrl10InitSystemEv>:

void MotorCtrl::SetPWMch4(PWM pPWM) {
	mPWMch4 = pPWM;
}

void MotorCtrl::InitSystem(void) {
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
	//以下CubeMXに頼らない定義たち
	//mainで既に定義されているとうまく動かないかもしれない。注意。
	GPIOInit::Init();
 80047ea:	f004 fa2f 	bl	8008c4c <_ZN8GPIOInit4InitEv>
	USARTInit::Init();
 80047ee:	f004 fde3 	bl	80093b8 <_ZN9USARTInit4InitEv>
	ADCInit::Init();
 80047f2:	f003 fe5d 	bl	80084b0 <_ZN7ADCInit4InitEv>
	TIMInit::Init();
 80047f6:	f004 fc67 	bl	80090c8 <_ZN7TIMInit4InitEv>
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <_ZN9MotorCtrl7InitPWMEv>:

void MotorCtrl::InitPWM(void) {
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b093      	sub	sp, #76	; 0x4c
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	PWM PWM_Object1; //PWMのHWを叩くClass
 800480c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fd4c 	bl	80042ae <_ZN3PWMC1Ev>
	PWM PWM_Object2;
 8004816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fd47 	bl	80042ae <_ZN3PWMC1Ev>
	PWM PWM_Object3;
 8004820:	f107 0318 	add.w	r3, r7, #24
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fd42 	bl	80042ae <_ZN3PWMC1Ev>
	PWM PWM_Object4;
 800482a:	f107 0308 	add.w	r3, r7, #8
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fd3d 	bl	80042ae <_ZN3PWMC1Ev>

	//LL_TIM_DisableBRK(TIM1);//こっちは未検証
	//LL_TIM_DisableIT_BRK(TIM1);//効かない

	PWM_Object1.setTIM(TIM1);
 8004834:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004838:	4953      	ldr	r1, [pc, #332]	; (8004988 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 800483a:	4618      	mov	r0, r3
 800483c:	f001 feb0 	bl	80065a0 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 8004840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004844:	4950      	ldr	r1, [pc, #320]	; (8004988 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 8004846:	4618      	mov	r0, r3
 8004848:	f001 feaa 	bl	80065a0 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 800484c:	f107 0318 	add.w	r3, r7, #24
 8004850:	494d      	ldr	r1, [pc, #308]	; (8004988 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 8004852:	4618      	mov	r0, r3
 8004854:	f001 fea4 	bl	80065a0 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 8004858:	f107 0308 	add.w	r3, r7, #8
 800485c:	494a      	ldr	r1, [pc, #296]	; (8004988 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 800485e:	4618      	mov	r0, r3
 8004860:	f001 fe9e 	bl	80065a0 <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 8004864:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004868:	2101      	movs	r1, #1
 800486a:	4618      	mov	r0, r3
 800486c:	f001 fea6 	bl	80065bc <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 8004870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004874:	2102      	movs	r1, #2
 8004876:	4618      	mov	r0, r3
 8004878:	f001 fea0 	bl	80065bc <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 800487c:	f107 0318 	add.w	r3, r7, #24
 8004880:	2103      	movs	r1, #3
 8004882:	4618      	mov	r0, r3
 8004884:	f001 fe9a 	bl	80065bc <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 8004888:	f107 0308 	add.w	r3, r7, #8
 800488c:	2104      	movs	r1, #4
 800488e:	4618      	mov	r0, r3
 8004890:	f001 fe94 	bl	80065bc <_ZN3PWM5setCHEi>

	PWM_Object1.fInit(PWM_COUNT);
 8004894:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004898:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800489c:	4618      	mov	r0, r3
 800489e:	f001 fe9b 	bl	80065d8 <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(PWM_COUNT);
 80048a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048a6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80048aa:	4618      	mov	r0, r3
 80048ac:	f001 fe94 	bl	80065d8 <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(PWM_COUNT);
 80048b0:	f107 0318 	add.w	r3, r7, #24
 80048b4:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 fe8d 	bl	80065d8 <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(PWM_COUNT);
 80048be:	f107 0308 	add.w	r3, r7, #8
 80048c2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f001 fe86 	bl	80065d8 <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 80048cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048d0:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800498c <_ZN9MotorCtrl7InitPWMEv+0x188>
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 fefd 	bl	80066d4 <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 80048da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048de:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800498c <_ZN9MotorCtrl7InitPWMEv+0x188>
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 fef6 	bl	80066d4 <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 80048e8:	f107 0318 	add.w	r3, r7, #24
 80048ec:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800498c <_ZN9MotorCtrl7InitPWMEv+0x188>
 80048f0:	4618      	mov	r0, r3
 80048f2:	f001 feef 	bl	80066d4 <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 80048f6:	f107 0308 	add.w	r3, r7, #8
 80048fa:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800498c <_ZN9MotorCtrl7InitPWMEv+0x188>
 80048fe:	4618      	mov	r0, r3
 8004900:	f001 fee8 	bl	80066d4 <_ZN3PWM6f2DutyEf>

	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_10);
 8004904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004908:	4821      	ldr	r0, [pc, #132]	; (8004990 <_ZN9MotorCtrl7InitPWMEv+0x18c>)
 800490a:	f7ff fcc2 	bl	8004292 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_11);
 800490e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004912:	481f      	ldr	r0, [pc, #124]	; (8004990 <_ZN9MotorCtrl7InitPWMEv+0x18c>)
 8004914:	f7ff fcbd 	bl	8004292 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_12);
 8004918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800491c:	481c      	ldr	r0, [pc, #112]	; (8004990 <_ZN9MotorCtrl7InitPWMEv+0x18c>)
 800491e:	f7ff fcb8 	bl	8004292 <LL_GPIO_SetOutputPin>

	mPWMch1 = PWM_Object1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f503 7438 	add.w	r4, r3, #736	; 0x2e0
 8004928:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800492c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800492e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch2 = PWM_Object2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
 8004938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800493c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800493e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch3 = PWM_Object3;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8004948:	f107 0318 	add.w	r3, r7, #24
 800494c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800494e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch4 = PWM_Object4;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f503 7444 	add.w	r4, r3, #784	; 0x310
 8004958:	f107 0308 	add.w	r3, r7, #8
 800495c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800495e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//ADC Start
    LL_ADC_Enable( ADC1 );
 8004962:	480c      	ldr	r0, [pc, #48]	; (8004994 <_ZN9MotorCtrl7InitPWMEv+0x190>)
 8004964:	f7ff fc67 	bl	8004236 <LL_ADC_Enable>
    LL_ADC_Enable( ADC2 );
 8004968:	480b      	ldr	r0, [pc, #44]	; (8004998 <_ZN9MotorCtrl7InitPWMEv+0x194>)
 800496a:	f7ff fc64 	bl	8004236 <LL_ADC_Enable>
    LL_ADC_Enable( ADC3 );
 800496e:	480b      	ldr	r0, [pc, #44]	; (800499c <_ZN9MotorCtrl7InitPWMEv+0x198>)
 8004970:	f7ff fc61 	bl	8004236 <LL_ADC_Enable>
    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 8004974:	4807      	ldr	r0, [pc, #28]	; (8004994 <_ZN9MotorCtrl7InitPWMEv+0x190>)
 8004976:	f7ff fc6e 	bl	8004256 <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 800497a:	4806      	ldr	r0, [pc, #24]	; (8004994 <_ZN9MotorCtrl7InitPWMEv+0x190>)
 800497c:	f7ff fc79 	bl	8004272 <LL_ADC_EnableIT_JEOS>
}
 8004980:	bf00      	nop
 8004982:	374c      	adds	r7, #76	; 0x4c
 8004984:	46bd      	mov	sp, r7
 8004986:	bd90      	pop	{r4, r7, pc}
 8004988:	40010000 	.word	0x40010000
 800498c:	00000000 	.word	0x00000000
 8004990:	40020800 	.word	0x40020800
 8004994:	40012000 	.word	0x40012000
 8004998:	40012100 	.word	0x40012100
 800499c:	40012200 	.word	0x40012200

080049a0 <_ZN7MathLibC1ERKS_>:
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
 80049aa:	4a10      	ldr	r2, [pc, #64]	; (80049ec <_ZN7MathLibC1ERKS_+0x4c>)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	1d1a      	adds	r2, r3, #4
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 fc2c 	bl	8005218 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f103 0210 	add.w	r2, r3, #16
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	3310      	adds	r3, #16
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f000 fc23 	bl	8005218 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	61da      	str	r2, [r3, #28]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6a1a      	ldr	r2, [r3, #32]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	621a      	str	r2, [r3, #32]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	0800ca1c 	.word	0x0800ca1c

080049f0 <_ZN8ObserverC1ERKS_>:
 80049f0:	b4b0      	push	{r4, r5, r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
 80049fa:	4ab6      	ldr	r2, [pc, #728]	; (8004cd4 <_ZN8ObserverC1ERKS_+0x2e4>)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	605a      	str	r2, [r3, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	60da      	str	r2, [r3, #12]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	611a      	str	r2, [r3, #16]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	615a      	str	r2, [r3, #20]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	699a      	ldr	r2, [r3, #24]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	61da      	str	r2, [r3, #28]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	3320      	adds	r3, #32
 8004a3e:	3220      	adds	r2, #32
 8004a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a44:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	3328      	adds	r3, #40	; 0x28
 8004a4e:	3228      	adds	r2, #40	; 0x28
 8004a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a54:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	3330      	adds	r3, #48	; 0x30
 8004a5e:	3230      	adds	r2, #48	; 0x30
 8004a60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a64:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	3338      	adds	r3, #56	; 0x38
 8004a6e:	3238      	adds	r2, #56	; 0x38
 8004a70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a74:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	645a      	str	r2, [r3, #68]	; 0x44
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	649a      	str	r2, [r3, #72]	; 0x48
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	651a      	str	r2, [r3, #80]	; 0x50
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	3354      	adds	r3, #84	; 0x54
 8004aa6:	3254      	adds	r2, #84	; 0x54
 8004aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004aac:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	335c      	adds	r3, #92	; 0x5c
 8004ab6:	325c      	adds	r2, #92	; 0x5c
 8004ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004abc:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	3364      	adds	r3, #100	; 0x64
 8004ac6:	3264      	adds	r2, #100	; 0x64
 8004ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004acc:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	f102 046c 	add.w	r4, r2, #108	; 0x6c
 8004ad8:	f103 056c 	add.w	r5, r3, #108	; 0x6c
 8004adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	6023      	str	r3, [r4, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	3380      	adds	r3, #128	; 0x80
 8004aea:	3280      	adds	r2, #128	; 0x80
 8004aec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004af0:	e883 0003 	stmia.w	r3, {r0, r1}
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	3388      	adds	r3, #136	; 0x88
 8004afa:	3288      	adds	r2, #136	; 0x88
 8004afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b00:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	3390      	adds	r3, #144	; 0x90
 8004b0a:	3290      	adds	r2, #144	; 0x90
 8004b0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b10:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	3398      	adds	r3, #152	; 0x98
 8004b1a:	3298      	adds	r2, #152	; 0x98
 8004b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b20:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	33a0      	adds	r3, #160	; 0xa0
 8004b2a:	32a0      	adds	r2, #160	; 0xa0
 8004b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b30:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	f102 04a8 	add.w	r4, r2, #168	; 0xa8
 8004b3c:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
 8004b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	6023      	str	r3, [r4, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	33bc      	adds	r3, #188	; 0xbc
 8004b4e:	32bc      	adds	r2, #188	; 0xbc
 8004b50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b54:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	33c4      	adds	r3, #196	; 0xc4
 8004b5e:	32c4      	adds	r2, #196	; 0xc4
 8004b60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b64:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	33cc      	adds	r3, #204	; 0xcc
 8004b6e:	32cc      	adds	r2, #204	; 0xcc
 8004b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b74:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	33e4      	adds	r3, #228	; 0xe4
 8004bae:	32e4      	adds	r2, #228	; 0xe4
 8004bb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8004bb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	33f4      	adds	r3, #244	; 0xf4
 8004bc8:	32f4      	adds	r2, #244	; 0xf4
 8004bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bce:	e883 0003 	stmia.w	r3, {r0, r1}
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	33fc      	adds	r3, #252	; 0xfc
 8004bd8:	32fc      	adds	r2, #252	; 0xfc
 8004bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bde:	e883 0003 	stmia.w	r3, {r0, r1}
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004bea:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8004bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bf2:	e883 0003 	stmia.w	r3, {r0, r1}
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004bfe:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 8004c02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c06:	e883 0003 	stmia.w	r3, {r0, r1}
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004c12:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8004c16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004c26:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 8004c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c2e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f502 7492 	add.w	r4, r2, #292	; 0x124
 8004c3a:	f503 7592 	add.w	r5, r3, #292	; 0x124
 8004c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c42:	682b      	ldr	r3, [r5, #0]
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004c4e:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8004c52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c56:	e883 0003 	stmia.w	r3, {r0, r1}
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c62:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8004c66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c6a:	e883 0003 	stmia.w	r3, {r0, r1}
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004c76:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 8004c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004cba:	f502 72b0 	add.w	r2, r2, #352	; 0x160
 8004cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8004cc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	e001      	b.n	8004cd8 <_ZN8ObserverC1ERKS_+0x2e8>
 8004cd4:	0800ca0c 	.word	0x0800ca0c
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8004cde:	f502 72b8 	add.w	r2, r2, #368	; 0x170
 8004ce2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ce4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004cfc:	f502 72c0 	add.w	r2, r2, #384	; 0x180
 8004d00:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bcb0      	pop	{r4, r5, r7}
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop

08004d2c <_ZN9ArgSensorC1ERKS_>:
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
 8004d36:	4a14      	ldr	r2, [pc, #80]	; (8004d88 <_ZN9ArgSensorC1ERKS_+0x5c>)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	605a      	str	r2, [r3, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	609a      	str	r2, [r3, #8]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60da      	str	r2, [r3, #12]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	7c1a      	ldrb	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	741a      	strb	r2, [r3, #16]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	7c5a      	ldrb	r2, [r3, #17]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	745a      	strb	r2, [r3, #17]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	695a      	ldr	r2, [r3, #20]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	615a      	str	r2, [r3, #20]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f103 0218 	add.w	r2, r3, #24
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	3318      	adds	r3, #24
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f7ff fe39 	bl	80049f0 <_ZN8ObserverC1ERKS_>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	0800c9ac 	.word	0x0800c9ac

08004d8c <_ZN7TimInfoC1ERKS_>:
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
 8004d96:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <_ZN7TimInfoC1ERKS_+0x40>)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	605a      	str	r2, [r3, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	609a      	str	r2, [r3, #8]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60da      	str	r2, [r3, #12]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	611a      	str	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	0800ca3c 	.word	0x0800ca3c

08004dd0 <_ZN3PIDC1ERKS_>:
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
 8004dda:	4a14      	ldr	r2, [pc, #80]	; (8004e2c <_ZN3PIDC1ERKS_+0x5c>)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	3304      	adds	r3, #4
 8004de6:	3204      	adds	r2, #4
 8004de8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	611a      	str	r2, [r3, #16]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	615a      	str	r2, [r3, #20]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	619a      	str	r2, [r3, #24]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	69da      	ldr	r2, [r3, #28]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	61da      	str	r2, [r3, #28]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6a1a      	ldr	r2, [r3, #32]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	621a      	str	r2, [r3, #32]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	0800ca2c 	.word	0x0800ca2c

08004e30 <_ZN9MotorCtrl13InitMotorInfoEv>:

void MotorCtrl::InitMotorInfo(void) {
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	1d3b      	adds	r3, r7, #4
 8004e3a:	6018      	str	r0, [r3, #0]
	{//MathLibの生存時間調整(メモリ空けてくれ!!)
		MathLib mathlibrary;//三角関数を取得
 8004e3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 ff59 	bl	8005cf8 <_ZN7MathLibC1Ev>
		int mathlib_size = 512;//ライブラリのサイズを指定
 8004e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e4a:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
		mathlibrary.fInit(mathlib_size);
 8004e4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e52:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 ffae 	bl	8005db8 <_ZN7MathLib5fInitEi>
		mMotorInfo.setMathLib(mathlibrary);//モータクラスに算術ライブラリを渡す
 8004e5c:	1d3b      	adds	r3, r7, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	1d1c      	adds	r4, r3, #4
 8004e62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004e66:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fd97 	bl	80049a0 <_ZN7MathLibC1ERKS_>
 8004e72:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004e76:	4619      	mov	r1, r3
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f000 fe86 	bl	8005b8a <_ZN9MotorInfo10setMathLibE7MathLib>
 8004e7e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 ff54 	bl	8005d30 <_ZN7MathLibD1Ev>
		MathLib mathlibrary;//三角関数を取得
 8004e88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 ff4f 	bl	8005d30 <_ZN7MathLibD1Ev>
	}
	{
		ArgSensor sensor; //角度を求める機能を持ったclass
 8004e92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fe76 	bl	8003b88 <_ZN9ArgSensorC1Ev>
		sensor.Init();
 8004e9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe feba 	bl	8003c1a <_ZN9ArgSensor4InitEv>
		mMotorInfo.setArgSensor(sensor);
 8004ea6:	1d3b      	adds	r3, r7, #4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	1d1c      	adds	r4, r3, #4
 8004eac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004eb0:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff ff38 	bl	8004d2c <_ZN9ArgSensorC1ERKS_>
 8004ebc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f000 fe70 	bl	8005ba8 <_ZN9MotorInfo12setArgSensorE9ArgSensor>
 8004ec8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fe fe7f 	bl	8003bd0 <_ZN9ArgSensorD1Ev>
		ArgSensor sensor; //角度を求める機能を持ったclass
 8004ed2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe fe7a 	bl	8003bd0 <_ZN9ArgSensorD1Ev>
	}
	{
		TimInfo Tim_Info;//タイマの経過時間測定Class
 8004edc:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f001 fc2b 	bl	800673c <_ZN7TimInfoC1Ev>
		Tim_Info.Init(TIM1);
 8004ee6:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8004eea:	4939      	ldr	r1, [pc, #228]	; (8004fd0 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a0>)
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 fc55 	bl	800679c <_ZN7TimInfo4InitEP11TIM_TypeDef>
		mMotorInfo.setTimInfo(Tim_Info);
 8004ef2:	1d3b      	adds	r3, r7, #4
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	1d1c      	adds	r4, r3, #4
 8004ef8:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8004efc:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8004f00:	4611      	mov	r1, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff ff42 	bl	8004d8c <_ZN7TimInfoC1ERKS_>
 8004f08:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f000 fe5a 	bl	8005bc8 <_ZN9MotorInfo10setTimInfoE7TimInfo>
 8004f14:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 fc1f 	bl	800675c <_ZN7TimInfoD1Ev>
		TimInfo Tim_Info;//タイマの経過時間測定Class
 8004f1e:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 fc1a 	bl	800675c <_ZN7TimInfoD1Ev>
	}
	{//PIDLibの生存時間調整(代入後メモリを解放する)
		PID IqPID;
 8004f28:	f107 0308 	add.w	r3, r7, #8
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f001 faaf 	bl	8006490 <_ZN3PIDC1Ev>
		PID IdPID;
 8004f32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 faaa 	bl	8006490 <_ZN3PIDC1Ev>
		IdPID.SetParam(PID_GAIN_ID_P, PID_GAIN_ID_I, PID_GAIN_ID_D);
 8004f3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f40:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8004fd4 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8004f44:	eddf 0a23 	vldr	s1, [pc, #140]	; 8004fd4 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8004f48:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8004fd4 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 facf 	bl	80064f0 <_ZN3PID8SetParamEfff>
		IqPID.SetParam(PID_GAIN_IQ_P, PID_GAIN_IQ_I, PID_GAIN_IQ_D);
 8004f52:	f107 0308 	add.w	r3, r7, #8
 8004f56:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8004fd4 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8004f5a:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8004fd4 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8004f5e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8004fd4 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8004f62:	4618      	mov	r0, r3
 8004f64:	f001 fac4 	bl	80064f0 <_ZN3PID8SetParamEfff>
		mMotorInfo.setIdqPIDLib(IdPID, IqPID);
 8004f68:	1d3b      	adds	r3, r7, #4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	1d1c      	adds	r4, r3, #4
 8004f6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f72:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8004f76:	4611      	mov	r1, r2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff ff29 	bl	8004dd0 <_ZN3PIDC1ERKS_>
 8004f7e:	f107 0208 	add.w	r2, r7, #8
 8004f82:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004f86:	4611      	mov	r1, r2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff ff21 	bl	8004dd0 <_ZN3PIDC1ERKS_>
 8004f8e:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8004f92:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8004f96:	4619      	mov	r1, r3
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f000 fe24 	bl	8005be6 <_ZN9MotorInfo12setIdqPIDLibE3PIDS0_>
 8004f9e:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 fa84 	bl	80064b0 <_ZN3PIDD1Ev>
 8004fa8:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 fa7f 	bl	80064b0 <_ZN3PIDD1Ev>
		PID IdPID;
 8004fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 fa7a 	bl	80064b0 <_ZN3PIDD1Ev>
		PID IqPID;
 8004fbc:	f107 0308 	add.w	r3, r7, #8
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 fa75 	bl	80064b0 <_ZN3PIDD1Ev>
		//mMotorInfo.setIganmadeltaPIDLib(IganmaPID, IdeltaPID);
	}
}
 8004fc6:	bf00      	nop
 8004fc8:	f207 472c 	addw	r7, r7, #1068	; 0x42c
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd90      	pop	{r4, r7, pc}
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	3dcccccd 	.word	0x3dcccccd

08004fd8 <_ZN9MotorCtrl7DbgUartENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	mMotorInfo.startForceCommutation();
}


////////////////func of debug ///////////////////
void MotorCtrl::DbgUart(std::string pStr) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
	UART::Transmit(pStr);
 8004fe2:	f107 0308 	add.w	r3, r7, #8
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f004 fb37 	bl	800965c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004fee:	f107 0308 	add.w	r3, r7, #8
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f001 fc14 	bl	8006820 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004ff8:	f107 0308 	add.w	r3, r7, #8
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f004 fae5 	bl	80095cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005002:	bf00      	nop
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800500a:	b480      	push	{r7}
 800500c:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800500e:	2300      	movs	r3, #0
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800501a:	b480      	push	{r7}
 800501c:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800501e:	2301      	movs	r3, #1
 8005020:	4618      	mov	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <_ZNSt6vectorIfSaIfEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 800502a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	f000 80e8 	beq.w	800520e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e4>
	{
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800503e:	f7ff ffe4 	bl	800500a <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d044      	beq.n	80050d2 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa8>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 8005048:	f7ff ffe7 	bl	800501a <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>
 800504c:	4603      	mov	r3, r0
 800504e:	f083 0301 	eor.w	r3, r3, #1
 8005052:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8005054:	2b00      	cmp	r3, #0
 8005056:	d012      	beq.n	800507e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f919 	bl	8005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005060:	4604      	mov	r4, r0
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	4618      	mov	r0, r3
 8005066:	f000 f91f 	bl	80052a8 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800506a:	4603      	mov	r3, r0
 800506c:	4619      	mov	r1, r3
 800506e:	4620      	mov	r0, r4
 8005070:	f000 f925 	bl	80052be <_ZStneIfEbRKSaIT_ES3_>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
 800507e:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8005080:	2b00      	cmp	r3, #0
 8005082:	d018      	beq.n	80050b6 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x8c>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f926 	bl	80052d6 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
				- this->_M_impl._M_start);
 8005094:	461a      	mov	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800509e:	461a      	mov	r2, r3
 80050a0:	f000 f927 	bl	80052f2 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 f8ea 	bl	8005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80050be:	4604      	mov	r4, r0
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 f8f0 	bl	80052a8 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80050c8:	4603      	mov	r3, r0
 80050ca:	4619      	mov	r1, r3
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 f923 	bl	8005318 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
 80050d2:	6838      	ldr	r0, [r7, #0]
 80050d4:	f000 f92e 	bl	8005334 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80050d8:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f93b 	bl	8005356 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4293      	cmp	r3, r2
 80050e6:	bf8c      	ite	hi
 80050e8:	2301      	movhi	r3, #1
 80050ea:	2300      	movls	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d033      	beq.n	800515a <_ZNSt6vectorIfSaIfEEaSERKS1_+0x130>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 80050f2:	6838      	ldr	r0, [r7, #0]
 80050f4:	f000 f940 	bl	8005378 <_ZNKSt6vectorIfSaIfEE5beginEv>
 80050f8:	4604      	mov	r4, r0
 80050fa:	6838      	ldr	r0, [r7, #0]
 80050fc:	f000 f950 	bl	80053a0 <_ZNKSt6vectorIfSaIfEE3endEv>
 8005100:	4603      	mov	r3, r0
 8005102:	4622      	mov	r2, r4
 8005104:	68f9      	ldr	r1, [r7, #12]
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f95e 	bl	80053c8 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 800510c:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681c      	ldr	r4, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4618      	mov	r0, r3
 800511a:	f000 f8ba 	bl	8005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800511e:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005120:	461a      	mov	r2, r3
 8005122:	4629      	mov	r1, r5
 8005124:	4620      	mov	r0, r4
 8005126:	f000 f96b 	bl	8005400 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8005134:	461a      	mov	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800513e:	461a      	mov	r2, r3
 8005140:	f000 f8d7 	bl	80052f2 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	441a      	add	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	e052      	b.n	8005200 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	    }
	  else if (size() >= __xlen)
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8ea 	bl	8005334 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005160:	4602      	mov	r2, r0
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4293      	cmp	r3, r2
 8005166:	bf94      	ite	ls
 8005168:	2301      	movls	r3, #1
 800516a:	2300      	movhi	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d020      	beq.n	80051b4 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18a>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8005172:	6838      	ldr	r0, [r7, #0]
 8005174:	f000 f900 	bl	8005378 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8005178:	4604      	mov	r4, r0
 800517a:	6838      	ldr	r0, [r7, #0]
 800517c:	f000 f910 	bl	80053a0 <_ZNKSt6vectorIfSaIfEE3endEv>
 8005180:	4605      	mov	r5, r0
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f94a 	bl	800541c <_ZNSt6vectorIfSaIfEE5beginEv>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	4629      	mov	r1, r5
 800518e:	4620      	mov	r0, r4
 8005190:	f000 f954 	bl	800543c <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 8005194:	4604      	mov	r4, r0
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f968 	bl	800546c <_ZNSt6vectorIfSaIfEE3endEv>
 800519c:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 f876 	bl	8005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80051a6:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 80051a8:	461a      	mov	r2, r3
 80051aa:	4629      	mov	r1, r5
 80051ac:	4620      	mov	r0, r4
 80051ae:	f000 f96e 	bl	800548e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 80051b2:	e025      	b.n	8005200 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681d      	ldr	r5, [r3, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681c      	ldr	r4, [r3, #0]
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f8b9 	bl	8005334 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80051c2:	4603      	mov	r3, r0
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	18e1      	adds	r1, r4, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 f96b 	bl	80054aa <_ZSt4copyIPfS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681c      	ldr	r4, [r3, #0]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f8ab 	bl	8005334 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80051de:	4603      	mov	r3, r0
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f84f 	bl	8005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80051f4:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80051f6:	4632      	mov	r2, r6
 80051f8:	4629      	mov	r1, r5
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 f96d 	bl	80054da <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	441a      	add	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	605a      	str	r2, [r3, #4]
	}
      return *this;
 800520e:	687b      	ldr	r3, [r7, #4]
    }
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005218 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8005218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8005222:	687c      	ldr	r4, [r7, #4]
 8005224:	6838      	ldr	r0, [r7, #0]
 8005226:	f000 f885 	bl	8005334 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800522a:	4605      	mov	r5, r0
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f83a 	bl	80052a8 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005234:	4602      	mov	r2, r0
 8005236:	f107 030c 	add.w	r3, r7, #12
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f95d 	bl	80054fc <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>
 8005242:	f107 030c 	add.w	r3, r7, #12
 8005246:	461a      	mov	r2, r3
 8005248:	4629      	mov	r1, r5
 800524a:	4620      	mov	r0, r4
 800524c:	f000 f970 	bl	8005530 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8005250:	f107 030c 	add.w	r3, r7, #12
 8005254:	4618      	mov	r0, r3
 8005256:	f000 f95f 	bl	8005518 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800525a:	6838      	ldr	r0, [r7, #0]
 800525c:	f000 f88c 	bl	8005378 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8005260:	4605      	mov	r5, r0
 8005262:	6838      	ldr	r0, [r7, #0]
 8005264:	f000 f89c 	bl	80053a0 <_ZNKSt6vectorIfSaIfEE3endEv>
 8005268:	4606      	mov	r6, r0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f80e 	bl	8005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005276:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8005278:	4622      	mov	r2, r4
 800527a:	4631      	mov	r1, r6
 800527c:	4628      	mov	r0, r5
 800527e:	f000 f96b 	bl	8005558 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 8005282:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	605a      	str	r2, [r3, #4]
      }
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <_ZStneIfEbRKSaIT_ES3_>:
    _GLIBCXX_USE_NOEXCEPT
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
    _GLIBCXX_USE_NOEXCEPT
    { return false; }
 80052c8:	2300      	movs	r3, #0
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f948 	bl	800557a <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
	if (__p)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f94d 	bl	80055aa <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 8005322:	461a      	mov	r2, r3
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f94e 	bl	80055c8 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	461a      	mov	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	109b      	asrs	r3, r3, #2
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 8005362:	461a      	mov	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	109b      	asrs	r3, r3, #2
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	f107 020c 	add.w	r2, r7, #12
 800538a:	f107 0308 	add.w	r3, r7, #8
 800538e:	4611      	mov	r1, r2
 8005390:	4618      	mov	r0, r3
 8005392:	f000 f925 	bl	80055e0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	f107 020c 	add.w	r2, r7, #12
 80053b2:	f107 0308 	add.w	r3, r7, #8
 80053b6:	4611      	mov	r1, r2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 f911 	bl	80055e0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f910 	bl	8005600 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80053e0:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff ff54 	bl	8005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80053ea:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f8b1 	bl	8005558 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 80053f6:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f90a 	bl	8005628 <_ZSt8_DestroyIPfEvT_S1_>
    }
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	f107 030c 	add.w	r3, r7, #12
 800542a:	4611      	mov	r1, r2
 800542c:	4618      	mov	r0, r3
 800542e:	f000 f908 	bl	8005642 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f90a 	bl	8005662 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800544e:	4604      	mov	r4, r0
 8005450:	68b8      	ldr	r0, [r7, #8]
 8005452:	f000 f906 	bl	8005662 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8005456:	4603      	mov	r3, r0
	       __result));
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	4619      	mov	r1, r3
 800545c:	4620      	mov	r0, r4
 800545e:	f000 f90b 	bl	8005678 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 8005462:	4603      	mov	r3, r0
    }
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	bd90      	pop	{r4, r7, pc}

0800546c <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	1d1a      	adds	r2, r3, #4
 8005478:	f107 030c 	add.w	r3, r7, #12
 800547c:	4611      	mov	r1, r2
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f8df 	bl	8005642 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f911 	bl	80056c4 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80054aa:	b590      	push	{r4, r7, lr}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f911 	bl	80056de <_ZSt12__miter_baseIPfET_S1_>
 80054bc:	4604      	mov	r4, r0
 80054be:	68b8      	ldr	r0, [r7, #8]
 80054c0:	f000 f90d 	bl	80056de <_ZSt12__miter_baseIPfET_S1_>
 80054c4:	4603      	mov	r3, r0
	       __result));
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	4619      	mov	r1, r3
 80054ca:	4620      	mov	r0, r4
 80054cc:	f000 f912 	bl	80056f4 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 80054d0:	4603      	mov	r3, r0
    }
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd90      	pop	{r4, r7, pc}

080054da <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f91d 	bl	800572c <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 80054f2:	4603      	mov	r3, r0
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>:
    static _Alloc _S_select_on_copy(const _Alloc& __a)
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f920 	bl	8005750 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <_ZNSaIfED1Ev>:
      ~allocator() throw() { }
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f930 	bl	8005786 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	f000 f92b 	bl	800579c <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f93e 	bl	80057ca <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 f948 	bl	8005800 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8005570:	4603      	mov	r3, r0
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800557a:	b590      	push	{r4, r7, lr}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685c      	ldr	r4, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fe81 	bl	8005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	4621      	mov	r1, r4
 8005596:	6838      	ldr	r0, [r7, #0]
 8005598:	f7ff ff32 	bl	8005400 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	605a      	str	r2, [r3, #4]
      }
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd90      	pop	{r4, r7, pc}

080055aa <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f932 	bl	8005824 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	713a      	strb	r2, [r7, #4]
    { }
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d006      	beq.n	800561e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 f912 	bl	800583e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 800561a:	4603      	mov	r3, r0
 800561c:	e000      	b.n	8005620 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 800561e:	2300      	movs	r3, #0
      }
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f911 	bl	800585c <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
    { return __it; }
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005678:	b5b0      	push	{r4, r5, r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f8f4 	bl	8005872 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800568a:	4604      	mov	r4, r0
 800568c:	68b8      	ldr	r0, [r7, #8]
 800568e:	f000 f8f0 	bl	8005872 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8005692:	4605      	mov	r5, r0
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f8fa 	bl	800588e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800569a:	4603      	mov	r3, r0
 800569c:	461a      	mov	r2, r3
 800569e:	4629      	mov	r1, r5
 80056a0:	4620      	mov	r0, r4
 80056a2:	f000 f902 	bl	80058aa <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80056a6:	4603      	mov	r3, r0
 80056a8:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 80056aa:	f107 0214 	add.w	r2, r7, #20
 80056ae:	f107 0310 	add.w	r3, r7, #16
 80056b2:	4611      	mov	r1, r2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff ffc4 	bl	8005642 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80056ba:	693b      	ldr	r3, [r7, #16]
    }
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bdb0      	pop	{r4, r5, r7, pc}

080056c4 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f8fc 	bl	80058ce <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 80056d6:	bf00      	nop
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80056f4:	b5b0      	push	{r4, r5, r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 f8ef 	bl	80058e4 <_ZSt12__niter_baseIPfET_S1_>
 8005706:	4604      	mov	r4, r0
 8005708:	68b8      	ldr	r0, [r7, #8]
 800570a:	f000 f8eb 	bl	80058e4 <_ZSt12__niter_baseIPfET_S1_>
 800570e:	4605      	mov	r5, r0
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f8e7 	bl	80058e4 <_ZSt12__niter_baseIPfET_S1_>
 8005716:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005718:	461a      	mov	r2, r3
 800571a:	4629      	mov	r1, r5
 800571c:	4620      	mov	r0, r4
 800571e:	f000 f8ec 	bl	80058fa <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 8005722:	4603      	mov	r3, r0
    }
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bdb0      	pop	{r4, r5, r7, pc}

0800572c <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005738:	2301      	movs	r3, #1
 800573a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f8ec 	bl	800591e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 8005746:	4603      	mov	r3, r0
    }
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800575a:	6839      	ldr	r1, [r7, #0]
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f804 	bl	800576a <_ZNSaIfEC1ERKS_>
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) throw()
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f8e1 	bl	800593e <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4618      	mov	r0, r3
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff ffde 	bl	800576a <_ZNSaIfEC1ERKS_>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	605a      	str	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	609a      	str	r2, [r3, #8]
	{ }
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff ff12 	bl	8005600 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80057dc:	4602      	mov	r2, r0
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	441a      	add	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	609a      	str	r2, [r3, #8]
      }
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800580c:	2301      	movs	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f89e 	bl	8005956 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 800581a:	4603      	mov	r3, r0
    }
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005830:	68b8      	ldr	r0, [r7, #8]
 8005832:	f003 fe17 	bl	8009464 <_ZdlPv>
      }
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005848:	2200      	movs	r2, #0
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f892 	bl	8005976 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8005852:	4603      	mov	r3, r0
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800587a:	1d3b      	adds	r3, r7, #4
 800587c:	4618      	mov	r0, r3
 800587e:	f000 f898 	bl	80059b2 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8005882:	4603      	mov	r3, r0
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005896:	1d3b      	adds	r3, r7, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f895 	bl	80059c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800589e:	4603      	mov	r3, r0
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b086      	sub	sp, #24
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80058b6:	2301      	movs	r3, #1
 80058b8:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f88d 	bl	80059de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80058c4:	4603      	mov	r3, r0
    }
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
    { return __it; }
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b086      	sub	sp, #24
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8005906:	2301      	movs	r3, #1
 8005908:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f865 	bl	80059de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8005914:	4603      	mov	r3, r0
    }
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff fdbb 	bl	80054aa <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 8005934:	4603      	mov	r3, r0
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 f856 	bl	8005a18 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800596c:	4603      	mov	r3, r0
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f860 	bl	8005a48 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8005988:	4602      	mov	r2, r0
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4293      	cmp	r3, r2
 800598e:	bf8c      	ite	hi
 8005990:	2301      	movhi	r3, #1
 8005992:	2300      	movls	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800599a:	f003 fd7a 	bl	8009492 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f003 fd62 	bl	800946c <_Znwj>
 80059a8:	4603      	mov	r3, r0
      }
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4618      	mov	r0, r3
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80059de:	b580      	push	{r7, lr}
 80059e0:	b086      	sub	sp, #24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	109b      	asrs	r3, r3, #2
 80059f2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d006      	beq.n	8005a08 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	461a      	mov	r2, r3
 8005a00:	68f9      	ldr	r1, [r7, #12]
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f004 fee5 	bl	800a7d2 <memmove>
	  return __result + _Num;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4413      	add	r3, r2
	}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8005a18:	b590      	push	{r4, r7, lr}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff fe1c 	bl	8005662 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	68b8      	ldr	r0, [r7, #8]
 8005a2e:	f7ff fe18 	bl	8005662 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8005a32:	4603      	mov	r3, r0
	       __result));
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	4619      	mov	r1, r3
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 f811 	bl	8005a60 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8005a3e:	4603      	mov	r3, r0
    }
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd90      	pop	{r4, r7, pc}

08005a48 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005a50:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005a60:	b5b0      	push	{r4, r5, r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff ff00 	bl	8005872 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8005a72:	4604      	mov	r4, r0
 8005a74:	68b8      	ldr	r0, [r7, #8]
 8005a76:	f7ff fefc 	bl	8005872 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff ff31 	bl	80058e4 <_ZSt12__niter_baseIPfET_S1_>
 8005a82:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005a84:	461a      	mov	r2, r3
 8005a86:	4629      	mov	r1, r5
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f7ff ff0e 	bl	80058aa <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8005a8e:	4603      	mov	r3, r0
    }
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bdb0      	pop	{r4, r5, r7, pc}

08005a98 <_ZN9MotorInfoC1Ev>:

#include "MotorInfo.hpp"

//Init

MotorInfo::MotorInfo() {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	4a16      	ldr	r2, [pc, #88]	; (8005afc <_ZN9MotorInfoC1Ev+0x64>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	334c      	adds	r3, #76	; 0x4c
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 f924 	bl	8005cf8 <_ZN7MathLibC1Ev>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	337c      	adds	r3, #124	; 0x7c
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fe41 	bl	800673c <_ZN7TimInfoC1Ev>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3390      	adds	r3, #144	; 0x90
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fce6 	bl	8006490 <_ZN3PIDC1Ev>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	33b8      	adds	r3, #184	; 0xb8
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fce1 	bl	8006490 <_ZN3PIDC1Ev>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	33e0      	adds	r3, #224	; 0xe0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fcdc 	bl	8006490 <_ZN3PIDC1Ev>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fcd6 	bl	8006490 <_ZN3PIDC1Ev>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe f84c 	bl	8003b88 <_ZN9ArgSensorC1Ev>
	// TODO Auto-generated constructor stub

}
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	0800c9fc 	.word	0x0800c9fc

08005b00 <_ZN9MotorInfoD1Ev>:

MotorInfo::~MotorInfo() {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	4a16      	ldr	r2, [pc, #88]	; (8005b64 <_ZN9MotorInfoD1Ev+0x64>)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fe f85b 	bl	8003bd0 <_ZN9ArgSensorD1Ev>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fcc5 	bl	80064b0 <_ZN3PIDD1Ev>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	33e0      	adds	r3, #224	; 0xe0
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fcc0 	bl	80064b0 <_ZN3PIDD1Ev>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	33b8      	adds	r3, #184	; 0xb8
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fcbb 	bl	80064b0 <_ZN3PIDD1Ev>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3390      	adds	r3, #144	; 0x90
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fcb6 	bl	80064b0 <_ZN3PIDD1Ev>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	337c      	adds	r3, #124	; 0x7c
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fe07 	bl	800675c <_ZN7TimInfoD1Ev>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	334c      	adds	r3, #76	; 0x4c
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 f8ec 	bl	8005d30 <_ZN7MathLibD1Ev>
	// TODO Auto-generated destructor stub
}
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	0800c9fc 	.word	0x0800c9fc

08005b68 <_ZN9MotorInfoD0Ev>:
MotorInfo::~MotorInfo() {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
}
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff ffc5 	bl	8005b00 <_ZN9MotorInfoD1Ev>
 8005b76:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f003 fc74 	bl	8009468 <_ZdlPvj>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <_ZN9MotorInfo10setMathLibE7MathLib>:

void MotorInfo::setMathLib(MathLib pLib){
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
	mLib = pLib;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	334c      	adds	r3, #76	; 0x4c
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe fbf5 	bl	800438a <_ZN7MathLibaSERKS_>
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <_ZN9MotorInfo12setArgSensorE9ArgSensor>:

MathLib MotorInfo::getMathLib(void){return mLib;}

void MotorInfo::setArgSensor(ArgSensor pSensor){
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	mSensor = pSensor;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fde6 	bl	800478c <_ZN9ArgSensoraSERKS_>
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <_ZN9MotorInfo10setTimInfoE7TimInfo>:

void MotorInfo::setTimInfo(TimInfo pTimInfo) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
	mTimInfo = pTimInfo;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	337c      	adds	r3, #124	; 0x7c
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fe fbf9 	bl	80043d0 <_ZN7TimInfoaSERKS_>
}
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <_ZN9MotorInfo12setIdqPIDLibE3PIDS0_>:


void MotorInfo::setIdqPIDLib(PID pdPID, PID pqPID){
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
	mIdPID = pdPID;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3390      	adds	r3, #144	; 0x90
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fc05 	bl	8004408 <_ZN3PIDaSERKS_>
	mIqPID = pqPID;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	33b8      	adds	r3, #184	; 0xb8
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fe fbff 	bl	8004408 <_ZN3PIDaSERKS_>
}
 8005c0a:	bf00      	nop
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8005c12:	b5b0      	push	{r4, r5, r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681c      	ldr	r4, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fb34 	bl	8005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005c2a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4629      	mov	r1, r5
 8005c30:	4620      	mov	r0, r4
 8005c32:	f7ff fbe5 	bl	8005400 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 f811 	bl	8005c60 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bdb0      	pop	{r4, r5, r7, pc}

08005c48 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff fc61 	bl	8005518 <_ZNSaIfED1Ev>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6819      	ldr	r1, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8005c70:	461a      	mov	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff fb38 	bl	80052f2 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		      - this->_M_impl._M_start); }
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff ffdf 	bl	8005c48 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <_ZN8ObserverC1Ev>:
	mVector.at(1) = mOldVec.at(1) + mK * pTime * pVector.at(1);
	return mOldVec;
}
///////////////////////////////////////////////////////

Observer::Observer() {
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <_ZN8ObserverC1Ev+0x1c>)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	0800ca0c 	.word	0x0800ca0c

08005cb4 <_ZN8ObserverD1Ev>:

Observer::~Observer() {
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	4a04      	ldr	r2, [pc, #16]	; (8005cd0 <_ZN8ObserverD1Ev+0x1c>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	0800ca0c 	.word	0x0800ca0c

08005cd4 <_ZN8ObserverD0Ev>:
Observer::~Observer() {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
}
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff ffe9 	bl	8005cb4 <_ZN8ObserverD1Ev>
 8005ce2:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f003 fbbe 	bl	8009468 <_ZdlPvj>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <_ZN7MathLibC1Ev>:
 *	256個の値を生成したならば、0~255の番地となることに注意すること。
 */

#include "MathLib.hpp"

MathLib::MathLib() {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <_ZN7MathLibC1Ev+0x34>)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 f92c 	bl	8005f68 <_ZNSt6vectorIfSaIfEEC1Ev>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3310      	adds	r3, #16
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 f927 	bl	8005f68 <_ZNSt6vectorIfSaIfEEC1Ev>
	mSize = 0;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	61da      	str	r2, [r3, #28]
}
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	0800ca1c 	.word	0x0800ca1c

08005d30 <_ZN7MathLibD1Ev>:

MathLib::~MathLib() {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	4a0f      	ldr	r2, [pc, #60]	; (8005d78 <_ZN7MathLibD1Ev+0x48>)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
	mSize = 0;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	61da      	str	r2, [r3, #28]
	mSinList.clear();
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff fac4 	bl	80052d6 <_ZNSt6vectorIfSaIfEE5clearEv>
	mCosList.clear();
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3310      	adds	r3, #16
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fabf 	bl	80052d6 <_ZNSt6vectorIfSaIfEE5clearEv>
MathLib::~MathLib() {
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3310      	adds	r3, #16
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff ff58 	bl	8005c12 <_ZNSt6vectorIfSaIfEED1Ev>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3304      	adds	r3, #4
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff ff53 	bl	8005c12 <_ZNSt6vectorIfSaIfEED1Ev>
}
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	0800ca1c 	.word	0x0800ca1c

08005d7c <_ZN7MathLibD0Ev>:
MathLib::~MathLib() {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
}
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff ffd3 	bl	8005d30 <_ZN7MathLibD1Ev>
 8005d8a:	2124      	movs	r1, #36	; 0x24
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f003 fb6b 	bl	8009468 <_ZdlPvj>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <_ZN7MathLib10setLibSizeEi>:

void MathLib::setLibSize(int pSize){
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	mSize = pSize;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	61da      	str	r2, [r3, #28]
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <_ZN7MathLib5fInitEi>:

void MathLib::fInit(int pSize){
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
	setLibSize(pSize);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff ffe9 	bl	8005d9c <_ZN7MathLib10setLibSizeEi>
	if(mSize == 0){
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d100      	bne.n	8005dd4 <_ZN7MathLib5fInitEi+0x1c>
		while(1){}//error check
 8005dd2:	e7fe      	b.n	8005dd2 <_ZN7MathLib5fInitEi+0x1a>
	}
	mRadvsSize = mSize / (2*M_PI);//サイズと1radianの比
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fa fbc3 	bl	8000564 <__aeabi_i2d>
 8005dde:	a310      	add	r3, pc, #64	; (adr r3, 8005e20 <_ZN7MathLib5fInitEi+0x68>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f7fa fd52 	bl	800088c <__aeabi_ddiv>
 8005de8:	4603      	mov	r3, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	4618      	mov	r0, r3
 8005dee:	4621      	mov	r1, r4
 8005df0:	f7fa fefa 	bl	8000be8 <__aeabi_d2f>
 8005df4:	4602      	mov	r2, r0
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

	fSinVectorInit(&mSinList);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f811 	bl	8005e28 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>
	fCosVectorInit(&mCosList);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3310      	adds	r3, #16
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f85b 	bl	8005ec8 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd90      	pop	{r4, r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	f3af 8000 	nop.w
 8005e20:	54442d18 	.word	0x54442d18
 8005e24:	401921fb 	.word	0x401921fb

08005e28 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>:

int MathLib::getLibSize(void){return mSize;}

void MathLib::fSinVectorInit(std::vector<float> *pVector){
 8005e28:	b5b0      	push	{r4, r5, r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	da39      	bge.n	8005eb4 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fsinval = sin(i*2*M_PI/(float)mSize);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fa fb8d 	bl	8000564 <__aeabi_i2d>
 8005e4a:	a31d      	add	r3, pc, #116	; (adr r3, 8005ec0 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x98>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f7fa fbf2 	bl	8000638 <__aeabi_dmul>
 8005e54:	4603      	mov	r3, r0
 8005e56:	460c      	mov	r4, r1
 8005e58:	4625      	mov	r5, r4
 8005e5a:	461c      	mov	r4, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	ee07 3a90 	vmov	s15, r3
 8005e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e68:	ee17 0a90 	vmov	r0, s15
 8005e6c:	f7fa fb8c 	bl	8000588 <__aeabi_f2d>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4620      	mov	r0, r4
 8005e76:	4629      	mov	r1, r5
 8005e78:	f7fa fd08 	bl	800088c <__aeabi_ddiv>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	ec44 3b17 	vmov	d7, r3, r4
 8005e84:	eeb0 0a47 	vmov.f32	s0, s14
 8005e88:	eef0 0a67 	vmov.f32	s1, s15
 8005e8c:	f003 fd48 	bl	8009920 <sin>
 8005e90:	ec54 3b10 	vmov	r3, r4, d0
 8005e94:	4618      	mov	r0, r3
 8005e96:	4621      	mov	r1, r4
 8005e98:	f7fa fea6 	bl	8000be8 <__aeabi_d2f>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fsinval);
 8005ea0:	f107 0308 	add.w	r3, r7, #8
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6838      	ldr	r0, [r7, #0]
 8005ea8:	f000 f86b 	bl	8005f82 <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	e7c0      	b.n	8005e36 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bdb0      	pop	{r4, r5, r7, pc}
 8005ebc:	f3af 8000 	nop.w
 8005ec0:	54442d18 	.word	0x54442d18
 8005ec4:	400921fb 	.word	0x400921fb

08005ec8 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fCosVectorInit(std::vector<float> *pVector){
 8005ec8:	b5b0      	push	{r4, r5, r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	da39      	bge.n	8005f54 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fcosval = cos(i*2*M_PI/(float)mSize);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fa fb3d 	bl	8000564 <__aeabi_i2d>
 8005eea:	a31d      	add	r3, pc, #116	; (adr r3, 8005f60 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x98>)
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f7fa fba2 	bl	8000638 <__aeabi_dmul>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	4625      	mov	r5, r4
 8005efa:	461c      	mov	r4, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f08:	ee17 0a90 	vmov	r0, s15
 8005f0c:	f7fa fb3c 	bl	8000588 <__aeabi_f2d>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4620      	mov	r0, r4
 8005f16:	4629      	mov	r1, r5
 8005f18:	f7fa fcb8 	bl	800088c <__aeabi_ddiv>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	ec44 3b17 	vmov	d7, r3, r4
 8005f24:	eeb0 0a47 	vmov.f32	s0, s14
 8005f28:	eef0 0a67 	vmov.f32	s1, s15
 8005f2c:	f003 fbac 	bl	8009688 <cos>
 8005f30:	ec54 3b10 	vmov	r3, r4, d0
 8005f34:	4618      	mov	r0, r3
 8005f36:	4621      	mov	r1, r4
 8005f38:	f7fa fe56 	bl	8000be8 <__aeabi_d2f>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fcosval);
 8005f40:	f107 0308 	add.w	r3, r7, #8
 8005f44:	4619      	mov	r1, r3
 8005f46:	6838      	ldr	r0, [r7, #0]
 8005f48:	f000 f81b 	bl	8005f82 <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	e7c0      	b.n	8005ed6 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 8005f54:	bf00      	nop
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f5c:	f3af 8000 	nop.w
 8005f60:	54442d18 	.word	0x54442d18
 8005f64:	400921fb 	.word	0x400921fb

08005f68 <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector()
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 f82a 	bl	8005fcc <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d00c      	beq.n	8005fb2 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	f000 f82b 	bl	8005ffc <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	1d1a      	adds	r2, r3, #4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	605a      	str	r2, [r3, #4]
      }
 8005fb0:	e008      	b.n	8005fc4 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff fa5a 	bl	800546c <_ZNSt6vectorIfSaIfEE3endEv>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f830 	bl	8006024 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base()
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 f8b0 	bl	800613c <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff ffec 	bl	8005fe6 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800600e:	4603      	mov	r3, r0
 8006010:	461a      	mov	r2, r3
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f8a6 	bl	8006166 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8006024:	b5b0      	push	{r4, r5, r7, lr}
 8006026:	b08a      	sub	sp, #40	; 0x28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8006030:	4a41      	ldr	r2, [pc, #260]	; (8006138 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x114>)
 8006032:	2101      	movs	r1, #1
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f8ae 	bl	8006196 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 800603a:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7ff f9ed 	bl	800541c <_ZNSt6vectorIfSaIfEE5beginEv>
 8006042:	4603      	mov	r3, r0
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	f107 0214 	add.w	r2, r7, #20
 800604a:	f107 0308 	add.w	r3, r7, #8
 800604e:	4611      	mov	r1, r2
 8006050:	4618      	mov	r0, r3
 8006052:	f000 f8e8 	bl	8006226 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8006056:	4603      	mov	r3, r0
 8006058:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff face 	bl	8005600 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8006064:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800606a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	18d5      	adds	r5, r2, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7ff ffb6 	bl	8005fe6 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800607a:	4603      	mov	r3, r0
 800607c:	461a      	mov	r2, r3
 800607e:	4629      	mov	r1, r5
 8006080:	4620      	mov	r0, r4
 8006082:	f7ff ffbb 	bl	8005ffc <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8006086:	2300      	movs	r3, #0
 8006088:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681c      	ldr	r4, [r3, #0]
 800608e:	f107 0308 	add.w	r3, r7, #8
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fc98 	bl	80059c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8006098:	4603      	mov	r3, r0
 800609a:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff f8f7 	bl	8005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80060a4:	4603      	mov	r3, r0
	  __new_finish
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	4629      	mov	r1, r5
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 f8d1 	bl	8006252 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80060b0:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	3304      	adds	r3, #4
 80060b6:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 80060b8:	f107 0308 	add.w	r3, r7, #8
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff fc83 	bl	80059c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80060c2:	4603      	mov	r3, r0
 80060c4:	681c      	ldr	r4, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff f8e0 	bl	8005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80060d2:	4603      	mov	r3, r0
	  __new_finish
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4629      	mov	r1, r5
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 f8ba 	bl	8006252 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80060de:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681c      	ldr	r4, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff f8d1 	bl	8005292 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80060f0:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80060f2:	461a      	mov	r2, r3
 80060f4:	4629      	mov	r1, r5
 80060f6:	4620      	mov	r0, r4
 80060f8:	f7ff f982 	bl	8005400 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8006106:	461a      	mov	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8006110:	461a      	mov	r2, r3
 8006112:	f7ff f8ee 	bl	80052f2 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	69fa      	ldr	r2, [r7, #28]
 800611a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	441a      	add	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	609a      	str	r2, [r3, #8]
    }
 800612e:	bf00      	nop
 8006130:	3728      	adds	r7, #40	; 0x28
 8006132:	46bd      	mov	sp, r7
 8006134:	bdb0      	pop	{r4, r5, r7, pc}
 8006136:	bf00      	nop
 8006138:	0800c948 	.word	0x0800c948

0800613c <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl()
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f89d 	bl	8006284 <_ZNSaIfEC1Ev>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	605a      	str	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	609a      	str	r2, [r3, #8]
	{ }
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>:

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8006166:	b590      	push	{r4, r7, lr}
 8006168:	b085      	sub	sp, #20
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7ff ff37 	bl	8005fe6 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8006178:	4603      	mov	r3, r0
 800617a:	681c      	ldr	r4, [r3, #0]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4619      	mov	r1, r3
 8006180:	2004      	movs	r0, #4
 8006182:	f7fd ff84 	bl	800408e <_ZnwjPv>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d000      	beq.n	800618e <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_+0x28>
 800618c:	601c      	str	r4, [r3, #0]
 800618e:	bf00      	nop
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	bd90      	pop	{r4, r7, pc}

08006196 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8006196:	b590      	push	{r4, r7, lr}
 8006198:	b087      	sub	sp, #28
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 f87a 	bl	800629c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80061a8:	4604      	mov	r4, r0
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff f8c2 	bl	8005334 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80061b0:	4603      	mov	r3, r0
 80061b2:	1ae2      	subs	r2, r4, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	bf34      	ite	cc
 80061ba:	2301      	movcc	r3, #1
 80061bc:	2300      	movcs	r3, #0
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f003 f969 	bl	800949e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff f8b1 	bl	8005334 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80061d2:	4604      	mov	r4, r0
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff f8ad 	bl	8005334 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80061da:	4603      	mov	r3, r0
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	f107 0208 	add.w	r2, r7, #8
 80061e2:	f107 0310 	add.w	r3, r7, #16
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fd ffd0 	bl	800418e <_ZSt3maxIjERKT_S2_S2_>
 80061ee:	4603      	mov	r3, r0
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4423      	add	r3, r4
 80061f4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff f89c 	bl	8005334 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80061fc:	4602      	mov	r2, r0
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	4293      	cmp	r3, r2
 8006202:	d306      	bcc.n	8006212 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7c>
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f849 	bl	800629c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 800620a:	4602      	mov	r2, r0
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	4293      	cmp	r3, r2
 8006210:	d904      	bls.n	800621c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f842 	bl	800629c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8006218:	4603      	mov	r3, r0
 800621a:	e000      	b.n	800621e <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x88>
 800621c:	697b      	ldr	r3, [r7, #20]
      }
 800621e:	4618      	mov	r0, r3
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	bd90      	pop	{r4, r7, pc}

08006226 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006226:	b590      	push	{r4, r7, lr}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff fbc9 	bl	80059c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8006236:	4603      	mov	r3, r0
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	461c      	mov	r4, r3
 800623c:	6838      	ldr	r0, [r7, #0]
 800623e:	f7ff fbc3 	bl	80059c8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8006242:	4603      	mov	r3, r0
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	1ae3      	subs	r3, r4, r3
 8006248:	109b      	asrs	r3, r3, #2
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	bd90      	pop	{r4, r7, pc}

08006252 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006252:	b590      	push	{r4, r7, lr}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
 800625e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f82c 	bl	80062be <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8006266:	4604      	mov	r4, r0
 8006268:	68b8      	ldr	r0, [r7, #8]
 800626a:	f000 f828 	bl	80062be <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800626e:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	4620      	mov	r0, r4
 8006276:	f000 f831 	bl	80062dc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 800627a:	4603      	mov	r3, r0
    }
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	bd90      	pop	{r4, r7, pc}

08006284 <_ZNSaIfEC1Ev>:
      allocator() throw() { }
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f836 	bl	80062fe <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fffe 	bl	80052a8 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80062ac:	4603      	mov	r3, r0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 f830 	bl	8006314 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 80062b4:	4603      	mov	r3, r0
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80062c6:	f107 030c 	add.w	r3, r7, #12
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 f82d 	bl	800632c <_ZNSt13move_iteratorIPfEC1ES0_>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f82b 	bl	800634a <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 80062f4:	4603      	mov	r3, r0
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff fb93 	bl	8005a48 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8006322:	4603      	mov	r3, r0
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800634a:	b580      	push	{r7, lr}
 800634c:	b086      	sub	sp, #24
 800634e:	af00      	add	r7, sp, #0
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006356:	2301      	movs	r3, #1
 8006358:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f805 	bl	800636e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8006364:	4603      	mov	r3, r0
    }
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 f805 	bl	800638e <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8006384:	4603      	mov	r3, r0
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800638e:	b590      	push	{r4, r7, lr}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 f80f 	bl	80063be <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80063a0:	4604      	mov	r4, r0
 80063a2:	68b8      	ldr	r0, [r7, #8]
 80063a4:	f000 f80b 	bl	80063be <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80063a8:	4603      	mov	r3, r0
	       __result));
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	4619      	mov	r1, r3
 80063ae:	4620      	mov	r0, r4
 80063b0:	f000 f816 	bl	80063e0 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 80063b4:	4603      	mov	r3, r0
    }
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd90      	pop	{r4, r7, pc}

080063be <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80063c6:	1d3b      	adds	r3, r7, #4
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f825 	bl	8006418 <_ZNKSt13move_iteratorIPfE4baseEv>
 80063ce:	4603      	mov	r3, r0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff f984 	bl	80056de <_ZSt12__miter_baseIPfET_S1_>
 80063d6:	4603      	mov	r3, r0
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80063e0:	b5b0      	push	{r4, r5, r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff fa79 	bl	80058e4 <_ZSt12__niter_baseIPfET_S1_>
 80063f2:	4604      	mov	r4, r0
 80063f4:	68b8      	ldr	r0, [r7, #8]
 80063f6:	f7ff fa75 	bl	80058e4 <_ZSt12__niter_baseIPfET_S1_>
 80063fa:	4605      	mov	r5, r0
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff fa71 	bl	80058e4 <_ZSt12__niter_baseIPfET_S1_>
 8006402:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8006404:	461a      	mov	r2, r3
 8006406:	4629      	mov	r1, r5
 8006408:	4620      	mov	r0, r4
 800640a:	f000 f811 	bl	8006430 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 800640e:	4603      	mov	r3, r0
    }
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bdb0      	pop	{r4, r5, r7, pc}

08006418 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800643c:	2301      	movs	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f805 	bl	8006454 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800644a:	4603      	mov	r3, r0
    }
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	109b      	asrs	r3, r3, #2
 8006468:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d006      	beq.n	800647e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	461a      	mov	r2, r3
 8006476:	68f9      	ldr	r1, [r7, #12]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f004 f9aa 	bl	800a7d2 <memmove>
	  return __result + _Num;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	4413      	add	r3, r2
	}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <_ZN3PIDC1Ev>:
 * OutPut()でFloatを取り出せば速度型のPID制御が簡単にできるはず。
 */

#include "PID.hpp"

PID::PID(){
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	4a04      	ldr	r2, [pc, #16]	; (80064ac <_ZN3PIDC1Ev+0x1c>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	601a      	str	r2, [r3, #0]

}
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4618      	mov	r0, r3
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	0800ca2c 	.word	0x0800ca2c

080064b0 <_ZN3PIDD1Ev>:
	// TODO Auto-generated constructor stub

	mError.fill(0);
}

PID::~PID() {
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	4a04      	ldr	r2, [pc, #16]	; (80064cc <_ZN3PIDD1Ev+0x1c>)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	0800ca2c 	.word	0x0800ca2c

080064d0 <_ZN3PIDD0Ev>:
PID::~PID() {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
}
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ffe9 	bl	80064b0 <_ZN3PIDD1Ev>
 80064de:	2128      	movs	r1, #40	; 0x28
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f002 ffc1 	bl	8009468 <_ZdlPvj>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZN3PID8SetParamEfff>:

void PID::SetParam(float pGain_p, float pGain_i, float pGain_d){
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80064fc:	edc7 0a01 	vstr	s1, [r7, #4]
 8006500:	ed87 1a00 	vstr	s2, [r7]
	mGain_p = pGain_p;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	615a      	str	r2, [r3, #20]
	mGain_i = pGain_i;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	619a      	str	r2, [r3, #24]
	mGain_d = pGain_d;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	61da      	str	r2, [r3, #28]
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <LL_TIM_EnableCounter>:
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f043 0201 	orr.w	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	601a      	str	r2, [r3, #0]
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <LL_TIM_SetAutoReload>:
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <LL_TIM_CC_EnableChannel>:
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1a      	ldr	r2, [r3, #32]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <LL_TIM_EnableAllOutputs>:
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	645a      	str	r2, [r3, #68]	; 0x44
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <_ZN3PWM6setTIMEP11TIM_TypeDef>:


#include "PWM.hpp"


void PWM::setTIM(TIM_TypeDef* pTIMx){
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	601a      	str	r2, [r3, #0]
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	605a      	str	r2, [r3, #4]
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <_ZN3PWM5fInitEi>:
	LL_TIM_EnableAllOutputs(mTIMx);// need
	//PWM TIM Init end

}

void PWM::fInit(int pTimReload){
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]

	mTimReload = pTimReload;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	609a      	str	r2, [r3, #8]

	if(mCH==0){//error check
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d100      	bne.n	80065f2 <_ZN3PWM5fInitEi+0x1a>
		while(1){}
 80065f0:	e7fe      	b.n	80065f0 <_ZN3PWM5fInitEi+0x18>
	}

	//mREG Init
	if (mCH == 1){
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d105      	bne.n	8006606 <_ZN3PWM5fInitEi+0x2e>
		mREG=&(mTIMx->CCR1);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 2){
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b02      	cmp	r3, #2
 800660c:	d105      	bne.n	800661a <_ZN3PWM5fInitEi+0x42>
		mREG=&(mTIMx->CCR2);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 3){
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2b03      	cmp	r3, #3
 8006620:	d105      	bne.n	800662e <_ZN3PWM5fInitEi+0x56>
		mREG=&(mTIMx->CCR3);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 4){
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b04      	cmp	r3, #4
 8006634:	d105      	bne.n	8006642 <_ZN3PWM5fInitEi+0x6a>
		mREG=&(mTIMx->CCR4);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60da      	str	r2, [r3, #12]
	}

	if(mREG==NULL){//error check
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d100      	bne.n	800664c <_ZN3PWM5fInitEi+0x74>
		while(1){}
 800664a:	e7fe      	b.n	800664a <_ZN3PWM5fInitEi+0x72>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d100      	bne.n	8006656 <_ZN3PWM5fInitEi+0x7e>
		while(1){}
 8006654:	e7fe      	b.n	8006654 <_ZN3PWM5fInitEi+0x7c>
	}
	if (mCH == 1){
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d105      	bne.n	800666a <_ZN3PWM5fInitEi+0x92>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2101      	movs	r1, #1
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff ff7a 	bl	800655e <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d105      	bne.n	800667e <_ZN3PWM5fInitEi+0xa6>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2110      	movs	r1, #16
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff ff70 	bl	800655e <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b03      	cmp	r3, #3
 8006684:	d106      	bne.n	8006694 <_ZN3PWM5fInitEi+0xbc>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff ff65 	bl	800655e <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b04      	cmp	r3, #4
 800669a:	d106      	bne.n	80066aa <_ZN3PWM5fInitEi+0xd2>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff ff5a 	bl	800655e <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff ff37 	bl	8006522 <LL_TIM_EnableCounter>

	//auto reload Init
	LL_TIM_SetAutoReload(mTIMx, pTimReload);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff ff40 	bl	8006542 <LL_TIM_SetAutoReload>

	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff ff5a 	bl	8006580 <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int pDuty = pfDuty * (float)mTimReload;
	WRITE_REG(*mREG, pDuty);
}

void PWM::f2Duty(float pfDuty){
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	ed87 0a00 	vstr	s0, [r7]
	int pDuty = (pfDuty + 1)/2 * (float)mTimReload;
 80066e0:	edd7 7a00 	vldr	s15, [r7]
 80066e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80066f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006708:	ee17 3a90 	vmov	r3, s15
 800670c:	60fb      	str	r3, [r7, #12]
	WRITE_REG(*mREG, pDuty);
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	601a      	str	r2, [r3, #0]
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <LL_TIM_GetAutoReload>:
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
	...

0800673c <_ZN7TimInfoC1Ev>:


#include "TimInfo.hpp"


TimInfo::TimInfo() {
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	4a04      	ldr	r2, [pc, #16]	; (8006758 <_ZN7TimInfoC1Ev+0x1c>)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	0800ca3c 	.word	0x0800ca3c

0800675c <_ZN7TimInfoD1Ev>:

TimInfo::~TimInfo() {
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	4a04      	ldr	r2, [pc, #16]	; (8006778 <_ZN7TimInfoD1Ev+0x1c>)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	0800ca3c 	.word	0x0800ca3c

0800677c <_ZN7TimInfoD0Ev>:
TimInfo::~TimInfo() {
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
}
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ffe9 	bl	800675c <_ZN7TimInfoD1Ev>
 800678a:	2114      	movs	r1, #20
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f002 fe6b 	bl	8009468 <_ZdlPvj>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <_ZN7TimInfo4InitEP11TIM_TypeDef>:

void TimInfo::Init(TIM_TypeDef *pTIMx) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]

	if(pTIMx == NULL) {
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d100      	bne.n	80067ae <_ZN7TimInfo4InitEP11TIM_TypeDef+0x12>
		//null ptr error
		while(1){}
 80067ac:	e7fe      	b.n	80067ac <_ZN7TimInfo4InitEP11TIM_TypeDef+0x10>
	}

	mReload = 0;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	609a      	str	r2, [r3, #8]
	mStartTime = 0;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	60da      	str	r2, [r3, #12]
	mStopTime = 0;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	611a      	str	r2, [r3, #16]

	mTIMx = pTIMx;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	605a      	str	r2, [r3, #4]
	mReload = LL_TIM_GetAutoReload(pTIMx);
 80067c6:	6838      	ldr	r0, [r7, #0]
 80067c8:	f7ff ffab 	bl	8006722 <LL_TIM_GetAutoReload>
 80067cc:	4603      	mov	r3, r0
 80067ce:	461a      	mov	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	609a      	str	r2, [r3, #8]

}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ec:	2b80      	cmp	r3, #128	; 0x80
 80067ee:	bf0c      	ite	eq
 80067f0:	2301      	moveq	r3, #1
 80067f2:	2300      	movne	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800680e:	78fa      	ldrb	r2, [r7, #3]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	605a      	str	r2, [r3, #4]
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	for(int i = 0; *(str + i) != '/0'; i++){
		//LL_USART_TransmitData8(USART2, *(str + i));
	}
}

void UART::Transmit(std::string	pStr){
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	const char* str = pStr.c_str();
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f002 ff13 	bl	8009654 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800682e:	60f8      	str	r0, [r7, #12]
	while(*str){ // forで回すと安定しないので、whileでイテレータとして利用する
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d014      	beq.n	8006862 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
		while(!LL_USART_IsActiveFlag_TXE(USART2)){}; // čekej než bude volno v Tx Bufferu
 8006838:	480c      	ldr	r0, [pc, #48]	; (800686c <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 800683a:	f7ff ffcf 	bl	80067dc <LL_USART_IsActiveFlag_TXE>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	bf0c      	ite	eq
 8006844:	2301      	moveq	r3, #1
 8006846:	2300      	movne	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d000      	beq.n	8006850 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>
 800684e:	e7f3      	b.n	8006838 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18>
		LL_USART_TransmitData8(USART2,*str++); // předej znak k odeslání
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	60fa      	str	r2, [r7, #12]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	4619      	mov	r1, r3
 800685a:	4804      	ldr	r0, [pc, #16]	; (800686c <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 800685c:	f7ff ffd1 	bl	8006802 <LL_USART_TransmitData8>
	while(*str){ // forで回すと安定しないので、whileでイテレータとして利用する
 8006860:	e7e6      	b.n	8006830 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10>
//		if(str + i){
//			LL_USART_TransmitData8(USART2, *(str + i));
//		}
////		HAL_Delay(20);
//	}
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40004400 	.word	0x40004400

08006870 <__NVIC_GetPriorityGrouping>:
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006874:	4b04      	ldr	r3, [pc, #16]	; (8006888 <__NVIC_GetPriorityGrouping+0x18>)
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	0a1b      	lsrs	r3, r3, #8
 800687a:	f003 0307 	and.w	r3, r3, #7
}
 800687e:	4618      	mov	r0, r3
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	e000ed00 	.word	0xe000ed00

0800688c <__NVIC_EnableIRQ>:
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	4603      	mov	r3, r0
 8006894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800689a:	2b00      	cmp	r3, #0
 800689c:	db0b      	blt.n	80068b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	f003 021f 	and.w	r2, r3, #31
 80068a4:	4907      	ldr	r1, [pc, #28]	; (80068c4 <__NVIC_EnableIRQ+0x38>)
 80068a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	2001      	movs	r0, #1
 80068ae:	fa00 f202 	lsl.w	r2, r0, r2
 80068b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	e000e100 	.word	0xe000e100

080068c8 <__NVIC_SetPriority>:
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	6039      	str	r1, [r7, #0]
 80068d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	db0a      	blt.n	80068f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	490c      	ldr	r1, [pc, #48]	; (8006914 <__NVIC_SetPriority+0x4c>)
 80068e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068e6:	0112      	lsls	r2, r2, #4
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	440b      	add	r3, r1
 80068ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80068f0:	e00a      	b.n	8006908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	4908      	ldr	r1, [pc, #32]	; (8006918 <__NVIC_SetPriority+0x50>)
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	3b04      	subs	r3, #4
 8006900:	0112      	lsls	r2, r2, #4
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	440b      	add	r3, r1
 8006906:	761a      	strb	r2, [r3, #24]
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	e000e100 	.word	0xe000e100
 8006918:	e000ed00 	.word	0xe000ed00

0800691c <NVIC_EncodePriority>:
{
 800691c:	b480      	push	{r7}
 800691e:	b089      	sub	sp, #36	; 0x24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f1c3 0307 	rsb	r3, r3, #7
 8006936:	2b04      	cmp	r3, #4
 8006938:	bf28      	it	cs
 800693a:	2304      	movcs	r3, #4
 800693c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	3304      	adds	r3, #4
 8006942:	2b06      	cmp	r3, #6
 8006944:	d902      	bls.n	800694c <NVIC_EncodePriority+0x30>
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	3b03      	subs	r3, #3
 800694a:	e000      	b.n	800694e <NVIC_EncodePriority+0x32>
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	43da      	mvns	r2, r3
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	401a      	ands	r2, r3
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006964:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	fa01 f303 	lsl.w	r3, r1, r3
 800696e:	43d9      	mvns	r1, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006974:	4313      	orrs	r3, r2
}
 8006976:	4618      	mov	r0, r3
 8006978:	3724      	adds	r7, #36	; 0x24
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <LL_ADC_REG_SetSequencerRanks>:
{
 8006982:	b490      	push	{r4, r7}
 8006984:	b086      	sub	sp, #24
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	332c      	adds	r3, #44	; 0x2c
 8006992:	4619      	mov	r1, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800699e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	fa92 f2a2 	rbit	r2, r2
 80069a6:	613a      	str	r2, [r7, #16]
  return result;
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	fab2 f282 	clz	r2, r2
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	40d3      	lsrs	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80069b8:	6822      	ldr	r2, [r4, #0]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f003 031f 	and.w	r3, r3, #31
 80069c0:	211f      	movs	r1, #31
 80069c2:	fa01 f303 	lsl.w	r3, r1, r3
 80069c6:	43db      	mvns	r3, r3
 80069c8:	401a      	ands	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f003 011f 	and.w	r1, r3, #31
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	fa01 f303 	lsl.w	r3, r1, r3
 80069da:	4313      	orrs	r3, r2
 80069dc:	6023      	str	r3, [r4, #0]
}
 80069de:	bf00      	nop
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc90      	pop	{r4, r7}
 80069e6:	4770      	bx	lr

080069e8 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	609a      	str	r2, [r3, #8]
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <LL_ADC_INJ_SetSequencerRanks>:
{
 8006a0e:	b490      	push	{r4, r7}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	0d1b      	lsrs	r3, r3, #20
 8006a20:	f003 0303 	and.w	r3, r3, #3
 8006a24:	1c5c      	adds	r4, r3, #1
  MODIFY_REG(ADCx->JSQR,
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	b2d9      	uxtb	r1, r3
 8006a2e:	b2e3      	uxtb	r3, r4
 8006a30:	1acb      	subs	r3, r1, r3
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	3303      	adds	r3, #3
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	4619      	mov	r1, r3
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	440b      	add	r3, r1
 8006a40:	211f      	movs	r1, #31
 8006a42:	fa01 f303 	lsl.w	r3, r1, r3
 8006a46:	43db      	mvns	r3, r3
 8006a48:	401a      	ands	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f003 011f 	and.w	r1, r3, #31
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	b2d8      	uxtb	r0, r3
 8006a54:	b2e3      	uxtb	r3, r4
 8006a56:	1ac3      	subs	r3, r0, r3
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	3303      	adds	r3, #3
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	4618      	mov	r0, r3
 8006a60:	4603      	mov	r3, r0
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4403      	add	r3, r0
 8006a66:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc90      	pop	{r4, r7}
 8006a78:	4770      	bx	lr

08006a7a <LL_ADC_INJ_SetOffset>:
{
 8006a7a:	b490      	push	{r4, r7}
 8006a7c:	b086      	sub	sp, #24
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3314      	adds	r3, #20
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a92:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006a96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	fa92 f2a2 	rbit	r2, r2
 8006a9e:	613a      	str	r2, [r7, #16]
  return result;
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	fab2 f282 	clz	r2, r2
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	40d3      	lsrs	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006ab6:	f023 030f 	bic.w	r3, r3, #15
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	6023      	str	r3, [r4, #0]
}
 8006ac0:	bf00      	nop
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bc90      	pop	{r4, r7}
 8006ac8:	4770      	bx	lr

08006aca <LL_ADC_SetChannelSamplingTime>:
{
 8006aca:	b490      	push	{r4, r7}
 8006acc:	b08a      	sub	sp, #40	; 0x28
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	4619      	mov	r1, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ae6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	fa92 f2a2 	rbit	r2, r2
 8006aee:	613a      	str	r2, [r7, #16]
  return result;
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	fab2 f282 	clz	r2, r2
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	40d3      	lsrs	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	440b      	add	r3, r1
 8006afe:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8006b00:	6822      	ldr	r2, [r4, #0]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8006b08:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8006b0c:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b0e:	69f9      	ldr	r1, [r7, #28]
 8006b10:	fa91 f1a1 	rbit	r1, r1
 8006b14:	61b9      	str	r1, [r7, #24]
  return result;
 8006b16:	69b9      	ldr	r1, [r7, #24]
 8006b18:	fab1 f181 	clz	r1, r1
 8006b1c:	b2c9      	uxtb	r1, r1
 8006b1e:	40cb      	lsrs	r3, r1
 8006b20:	2107      	movs	r1, #7
 8006b22:	fa01 f303 	lsl.w	r3, r1, r3
 8006b26:	43db      	mvns	r3, r3
 8006b28:	401a      	ands	r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8006b30:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8006b34:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b38:	fa91 f1a1 	rbit	r1, r1
 8006b3c:	6239      	str	r1, [r7, #32]
  return result;
 8006b3e:	6a39      	ldr	r1, [r7, #32]
 8006b40:	fab1 f181 	clz	r1, r1
 8006b44:	b2c9      	uxtb	r1, r1
 8006b46:	40cb      	lsrs	r3, r1
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	6023      	str	r3, [r4, #0]
}
 8006b52:	bf00      	nop
 8006b54:	3728      	adds	r7, #40	; 0x28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc90      	pop	{r4, r7}
 8006b5a:	4770      	bx	lr

08006b5c <LL_ADC_INJ_StartConversionExtTrig>:
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	609a      	str	r2, [r3, #8]
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f023 0220 	bic.w	r2, r3, #32
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	605a      	str	r2, [r3, #4]
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	605a      	str	r2, [r3, #4]
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
	...

08006bc0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006bc8:	4b08      	ldr	r3, [pc, #32]	; (8006bec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bcc:	4907      	ldr	r1, [pc, #28]	; (8006bec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006bd4:	4b05      	ldr	r3, [pc, #20]	; (8006bec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006bde:	68fb      	ldr	r3, [r7, #12]
}
 8006be0:	bf00      	nop
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	40023800 	.word	0x40023800

08006bf0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006bf8:	4b08      	ldr	r3, [pc, #32]	; (8006c1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8006bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bfc:	4907      	ldr	r1, [pc, #28]	; (8006c1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006c04:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8006c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
}
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	40023800 	.word	0x40023800

08006c20 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b096      	sub	sp, #88	; 0x58
 8006c24:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8006c26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	605a      	str	r2, [r3, #4]
 8006c30:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8006c32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	605a      	str	r2, [r3, #4]
 8006c3c:	609a      	str	r2, [r3, #8]
 8006c3e:	60da      	str	r2, [r3, #12]
 8006c40:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8006c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	605a      	str	r2, [r3, #4]
 8006c4c:	609a      	str	r2, [r3, #8]
 8006c4e:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8006c50:	f107 0318 	add.w	r3, r7, #24
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	605a      	str	r2, [r3, #4]
 8006c5a:	609a      	str	r2, [r3, #8]
 8006c5c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c5e:	463b      	mov	r3, r7
 8006c60:	2200      	movs	r2, #0
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	605a      	str	r2, [r3, #4]
 8006c66:	609a      	str	r2, [r3, #8]
 8006c68:	60da      	str	r2, [r3, #12]
 8006c6a:	611a      	str	r2, [r3, #16]
 8006c6c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8006c6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006c72:	f7ff ffbd 	bl	8006bf0 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006c76:	2004      	movs	r0, #4
 8006c78:	f7ff ffa2 	bl	8006bc0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006c7c:	2001      	movs	r0, #1
 8006c7e:	f7ff ff9f 	bl	8006bc0 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8006c82:	2307      	movs	r3, #7
 8006c84:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006c86:	2303      	movs	r3, #3
 8006c88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c8e:	463b      	mov	r3, r7
 8006c90:	4619      	mov	r1, r3
 8006c92:	4869      	ldr	r0, [pc, #420]	; (8006e38 <MX_ADC1_Init+0x218>)
 8006c94:	f7fc f8e3 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ca4:	463b      	mov	r3, r7
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4864      	ldr	r0, [pc, #400]	; (8006e3c <MX_ADC1_Init+0x21c>)
 8006caa:	f7fc f8d8 	bl	8002e5e <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8006cae:	f7ff fddf 	bl	8006870 <__NVIC_GetPriorityGrouping>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2102      	movs	r1, #2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff fe2f 	bl	800691c <NVIC_EncodePriority>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	2012      	movs	r0, #18
 8006cc4:	f7ff fe00 	bl	80068c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8006cc8:	2012      	movs	r0, #18
 8006cca:	f7ff fddf 	bl	800688c <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8006cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cda:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8006cdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4857      	ldr	r0, [pc, #348]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006ce4:	f7fb fdee 	bl	80028c4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8006cec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8006cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8006d00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d04:	4619      	mov	r1, r3
 8006d06:	484e      	ldr	r0, [pc, #312]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006d08:	f7fb fe08 	bl	800291c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8006d0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d10:	484b      	ldr	r0, [pc, #300]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006d12:	f7ff fe69 	bl	80069e8 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 8006d16:	484a      	ldr	r0, [pc, #296]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006d18:	f7ff ff31 	bl	8006b7e <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8006d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d20:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8006d22:	2300      	movs	r3, #0
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8006d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4845      	ldr	r0, [pc, #276]	; (8006e44 <MX_ADC1_Init+0x224>)
 8006d2e:	f7fb fd81 	bl	8002834 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8006d32:	4a45      	ldr	r2, [pc, #276]	; (8006e48 <MX_ADC1_Init+0x228>)
 8006d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d38:	4841      	ldr	r0, [pc, #260]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006d3a:	f7ff fe22 	bl	8006982 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 8006d3e:	2202      	movs	r2, #2
 8006d40:	4941      	ldr	r1, [pc, #260]	; (8006e48 <MX_ADC1_Init+0x228>)
 8006d42:	483f      	ldr	r0, [pc, #252]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006d44:	f7ff fec1 	bl	8006aca <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 8006d48:	4a40      	ldr	r2, [pc, #256]	; (8006e4c <MX_ADC1_Init+0x22c>)
 8006d4a:	f240 2105 	movw	r1, #517	; 0x205
 8006d4e:	483c      	ldr	r0, [pc, #240]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006d50:	f7ff fe17 	bl	8006982 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 8006d54:	2202      	movs	r2, #2
 8006d56:	493d      	ldr	r1, [pc, #244]	; (8006e4c <MX_ADC1_Init+0x22c>)
 8006d58:	4839      	ldr	r0, [pc, #228]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006d5a:	f7ff feb6 	bl	8006aca <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8006d5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d62:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8006d64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d68:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8006d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d6e:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8006d70:	2300      	movs	r3, #0
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8006d74:	f107 0318 	add.w	r3, r7, #24
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4831      	ldr	r0, [pc, #196]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006d7c:	f7fb fe16 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8006d80:	482f      	ldr	r0, [pc, #188]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006d82:	f7ff ff0c 	bl	8006b9e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8006d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	482c      	ldr	r0, [pc, #176]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006d8e:	f7ff fe3e 	bl	8006a0e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006d92:	2200      	movs	r2, #0
 8006d94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006d98:	4829      	ldr	r0, [pc, #164]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006d9a:	f7ff fe96 	bl	8006aca <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 8006d9e:	2200      	movs	r2, #0
 8006da0:	2101      	movs	r1, #1
 8006da2:	4827      	ldr	r0, [pc, #156]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006da4:	f7ff fe69 	bl	8006a7a <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8006da8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006dac:	4824      	ldr	r0, [pc, #144]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006dae:	f7ff fed5 	bl	8006b5c <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8006db2:	f107 0318 	add.w	r3, r7, #24
 8006db6:	4619      	mov	r1, r3
 8006db8:	4821      	ldr	r0, [pc, #132]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006dba:	f7fb fdf7 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8006dbe:	4820      	ldr	r0, [pc, #128]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006dc0:	f7ff feed 	bl	8006b9e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8006dc4:	4a22      	ldr	r2, [pc, #136]	; (8006e50 <MX_ADC1_Init+0x230>)
 8006dc6:	f241 1102 	movw	r1, #4354	; 0x1102
 8006dca:	481d      	ldr	r0, [pc, #116]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006dcc:	f7ff fe1f 	bl	8006a0e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	491f      	ldr	r1, [pc, #124]	; (8006e50 <MX_ADC1_Init+0x230>)
 8006dd4:	481a      	ldr	r0, [pc, #104]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006dd6:	f7ff fe78 	bl	8006aca <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f241 1102 	movw	r1, #4354	; 0x1102
 8006de0:	4817      	ldr	r0, [pc, #92]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006de2:	f7ff fe4a 	bl	8006a7a <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8006de6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006dea:	4815      	ldr	r0, [pc, #84]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006dec:	f7ff feb6 	bl	8006b5c <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8006df0:	f107 0318 	add.w	r3, r7, #24
 8006df4:	4619      	mov	r1, r3
 8006df6:	4812      	ldr	r0, [pc, #72]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006df8:	f7fb fdd8 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8006dfc:	4810      	ldr	r0, [pc, #64]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006dfe:	f7ff fece 	bl	8006b9e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8006e02:	220a      	movs	r2, #10
 8006e04:	f242 2103 	movw	r1, #8707	; 0x2203
 8006e08:	480d      	ldr	r0, [pc, #52]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006e0a:	f7ff fe00 	bl	8006a0e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006e0e:	2200      	movs	r2, #0
 8006e10:	210a      	movs	r1, #10
 8006e12:	480b      	ldr	r0, [pc, #44]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006e14:	f7ff fe59 	bl	8006aca <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f242 2103 	movw	r1, #8707	; 0x2203
 8006e1e:	4808      	ldr	r0, [pc, #32]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006e20:	f7ff fe2b 	bl	8006a7a <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8006e24:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006e28:	4805      	ldr	r0, [pc, #20]	; (8006e40 <MX_ADC1_Init+0x220>)
 8006e2a:	f7ff fe97 	bl	8006b5c <LL_ADC_INJ_StartConversionExtTrig>

}
 8006e2e:	bf00      	nop
 8006e30:	3758      	adds	r7, #88	; 0x58
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	40020800 	.word	0x40020800
 8006e3c:	40020000 	.word	0x40020000
 8006e40:	40012000 	.word	0x40012000
 8006e44:	40012300 	.word	0x40012300
 8006e48:	02300001 	.word	0x02300001
 8006e4c:	0060000c 	.word	0x0060000c
 8006e50:	0030000b 	.word	0x0030000b

08006e54 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b092      	sub	sp, #72	; 0x48
 8006e58:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8006e5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e5e:	2200      	movs	r2, #0
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	605a      	str	r2, [r3, #4]
 8006e64:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8006e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	605a      	str	r2, [r3, #4]
 8006e70:	609a      	str	r2, [r3, #8]
 8006e72:	60da      	str	r2, [r3, #12]
 8006e74:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8006e76:	f107 0318 	add.w	r3, r7, #24
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	605a      	str	r2, [r3, #4]
 8006e80:	609a      	str	r2, [r3, #8]
 8006e82:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e84:	463b      	mov	r3, r7
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	605a      	str	r2, [r3, #4]
 8006e8c:	609a      	str	r2, [r3, #8]
 8006e8e:	60da      	str	r2, [r3, #12]
 8006e90:	611a      	str	r2, [r3, #16]
 8006e92:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8006e94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006e98:	f7ff feaa 	bl	8006bf0 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006e9c:	2004      	movs	r0, #4
 8006e9e:	f7ff fe8f 	bl	8006bc0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	f7ff fe8c 	bl	8006bc0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006ea8:	2002      	movs	r0, #2
 8006eaa:	f7ff fe89 	bl	8006bc0 <LL_AHB1_GRP1_EnableClock>
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0
  PB1   ------> ADC2_IN9 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006eba:	463b      	mov	r3, r7
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4863      	ldr	r0, [pc, #396]	; (800704c <MX_ADC2_Init+0x1f8>)
 8006ec0:	f7fb ffcd 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	485e      	ldr	r0, [pc, #376]	; (8007050 <MX_ADC2_Init+0x1fc>)
 8006ed6:	f7fb ffc2 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8006eda:	2302      	movs	r3, #2
 8006edc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	4619      	mov	r1, r3
 8006eea:	485a      	ldr	r0, [pc, #360]	; (8007054 <MX_ADC2_Init+0x200>)
 8006eec:	f7fb ffb7 	bl	8002e5e <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8006ef0:	f7ff fcbe 	bl	8006870 <__NVIC_GetPriorityGrouping>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2102      	movs	r1, #2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fd0e 	bl	800691c <NVIC_EncodePriority>
 8006f00:	4603      	mov	r3, r0
 8006f02:	4619      	mov	r1, r3
 8006f04:	2012      	movs	r0, #18
 8006f06:	f7ff fcdf 	bl	80068c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8006f0a:	2012      	movs	r0, #18
 8006f0c:	f7ff fcbe 	bl	800688c <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8006f10:	2300      	movs	r3, #0
 8006f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8006f14:	2300      	movs	r3, #0
 8006f16:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8006f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f1c:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8006f1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006f22:	4619      	mov	r1, r3
 8006f24:	484c      	ldr	r0, [pc, #304]	; (8007058 <MX_ADC2_Init+0x204>)
 8006f26:	f7fb fccd 	bl	80028c4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8006f36:	2300      	movs	r3, #0
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8006f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8006f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f44:	4619      	mov	r1, r3
 8006f46:	4844      	ldr	r0, [pc, #272]	; (8007058 <MX_ADC2_Init+0x204>)
 8006f48:	f7fb fce8 	bl	800291c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8006f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f50:	4841      	ldr	r0, [pc, #260]	; (8007058 <MX_ADC2_Init+0x204>)
 8006f52:	f7ff fd49 	bl	80069e8 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 8006f56:	4840      	ldr	r0, [pc, #256]	; (8007058 <MX_ADC2_Init+0x204>)
 8006f58:	f7ff fe11 	bl	8006b7e <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_9);
 8006f5c:	4a3f      	ldr	r2, [pc, #252]	; (800705c <MX_ADC2_Init+0x208>)
 8006f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f62:	483d      	ldr	r0, [pc, #244]	; (8007058 <MX_ADC2_Init+0x204>)
 8006f64:	f7ff fd0d 	bl	8006982 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006f68:	2200      	movs	r2, #0
 8006f6a:	493c      	ldr	r1, [pc, #240]	; (800705c <MX_ADC2_Init+0x208>)
 8006f6c:	483a      	ldr	r0, [pc, #232]	; (8007058 <MX_ADC2_Init+0x204>)
 8006f6e:	f7ff fdac 	bl	8006aca <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8006f72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f76:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8006f78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f7c:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8006f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f82:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8006f84:	2300      	movs	r3, #0
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8006f88:	f107 0318 	add.w	r3, r7, #24
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4832      	ldr	r0, [pc, #200]	; (8007058 <MX_ADC2_Init+0x204>)
 8006f90:	f7fb fd0c 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8006f94:	4830      	ldr	r0, [pc, #192]	; (8007058 <MX_ADC2_Init+0x204>)
 8006f96:	f7ff fe02 	bl	8006b9e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8006f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	482d      	ldr	r0, [pc, #180]	; (8007058 <MX_ADC2_Init+0x204>)
 8006fa2:	f7ff fd34 	bl	8006a0e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006fac:	482a      	ldr	r0, [pc, #168]	; (8007058 <MX_ADC2_Init+0x204>)
 8006fae:	f7ff fd8c 	bl	8006aca <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	4828      	ldr	r0, [pc, #160]	; (8007058 <MX_ADC2_Init+0x204>)
 8006fb8:	f7ff fd5f 	bl	8006a7a <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8006fbc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006fc0:	4825      	ldr	r0, [pc, #148]	; (8007058 <MX_ADC2_Init+0x204>)
 8006fc2:	f7ff fdcb 	bl	8006b5c <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8006fc6:	f107 0318 	add.w	r3, r7, #24
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4822      	ldr	r0, [pc, #136]	; (8007058 <MX_ADC2_Init+0x204>)
 8006fce:	f7fb fced 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8006fd2:	4821      	ldr	r0, [pc, #132]	; (8007058 <MX_ADC2_Init+0x204>)
 8006fd4:	f7ff fde3 	bl	8006b9e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8006fd8:	4a21      	ldr	r2, [pc, #132]	; (8007060 <MX_ADC2_Init+0x20c>)
 8006fda:	f241 1102 	movw	r1, #4354	; 0x1102
 8006fde:	481e      	ldr	r0, [pc, #120]	; (8007058 <MX_ADC2_Init+0x204>)
 8006fe0:	f7ff fd15 	bl	8006a0e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	491e      	ldr	r1, [pc, #120]	; (8007060 <MX_ADC2_Init+0x20c>)
 8006fe8:	481b      	ldr	r0, [pc, #108]	; (8007058 <MX_ADC2_Init+0x204>)
 8006fea:	f7ff fd6e 	bl	8006aca <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f241 1102 	movw	r1, #4354	; 0x1102
 8006ff4:	4818      	ldr	r0, [pc, #96]	; (8007058 <MX_ADC2_Init+0x204>)
 8006ff6:	f7ff fd40 	bl	8006a7a <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8006ffa:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006ffe:	4816      	ldr	r0, [pc, #88]	; (8007058 <MX_ADC2_Init+0x204>)
 8007000:	f7ff fdac 	bl	8006b5c <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8007004:	f107 0318 	add.w	r3, r7, #24
 8007008:	4619      	mov	r1, r3
 800700a:	4813      	ldr	r0, [pc, #76]	; (8007058 <MX_ADC2_Init+0x204>)
 800700c:	f7fb fcce 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8007010:	4811      	ldr	r0, [pc, #68]	; (8007058 <MX_ADC2_Init+0x204>)
 8007012:	f7ff fdc4 	bl	8006b9e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8007016:	220a      	movs	r2, #10
 8007018:	f242 2103 	movw	r1, #8707	; 0x2203
 800701c:	480e      	ldr	r0, [pc, #56]	; (8007058 <MX_ADC2_Init+0x204>)
 800701e:	f7ff fcf6 	bl	8006a0e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007022:	2200      	movs	r2, #0
 8007024:	210a      	movs	r1, #10
 8007026:	480c      	ldr	r0, [pc, #48]	; (8007058 <MX_ADC2_Init+0x204>)
 8007028:	f7ff fd4f 	bl	8006aca <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 800702c:	2200      	movs	r2, #0
 800702e:	f242 2103 	movw	r1, #8707	; 0x2203
 8007032:	4809      	ldr	r0, [pc, #36]	; (8007058 <MX_ADC2_Init+0x204>)
 8007034:	f7ff fd21 	bl	8006a7a <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8007038:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800703c:	4806      	ldr	r0, [pc, #24]	; (8007058 <MX_ADC2_Init+0x204>)
 800703e:	f7ff fd8d 	bl	8006b5c <LL_ADC_INJ_StartConversionExtTrig>

}
 8007042:	bf00      	nop
 8007044:	3748      	adds	r7, #72	; 0x48
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40020800 	.word	0x40020800
 8007050:	40020000 	.word	0x40020000
 8007054:	40020400 	.word	0x40020400
 8007058:	40012100 	.word	0x40012100
 800705c:	03b00009 	.word	0x03b00009
 8007060:	0030000b 	.word	0x0030000b

08007064 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800706a:	463b      	mov	r3, r7
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	605a      	str	r2, [r3, #4]
 8007072:	609a      	str	r2, [r3, #8]
 8007074:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8007076:	4b21      	ldr	r3, [pc, #132]	; (80070fc <MX_ADC3_Init+0x98>)
 8007078:	4a21      	ldr	r2, [pc, #132]	; (8007100 <MX_ADC3_Init+0x9c>)
 800707a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800707c:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <MX_ADC3_Init+0x98>)
 800707e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007082:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8007084:	4b1d      	ldr	r3, [pc, #116]	; (80070fc <MX_ADC3_Init+0x98>)
 8007086:	2200      	movs	r2, #0
 8007088:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800708a:	4b1c      	ldr	r3, [pc, #112]	; (80070fc <MX_ADC3_Init+0x98>)
 800708c:	2201      	movs	r2, #1
 800708e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8007090:	4b1a      	ldr	r3, [pc, #104]	; (80070fc <MX_ADC3_Init+0x98>)
 8007092:	2200      	movs	r2, #0
 8007094:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8007096:	4b19      	ldr	r3, [pc, #100]	; (80070fc <MX_ADC3_Init+0x98>)
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800709e:	4b17      	ldr	r3, [pc, #92]	; (80070fc <MX_ADC3_Init+0x98>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80070a4:	4b15      	ldr	r3, [pc, #84]	; (80070fc <MX_ADC3_Init+0x98>)
 80070a6:	4a17      	ldr	r2, [pc, #92]	; (8007104 <MX_ADC3_Init+0xa0>)
 80070a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070aa:	4b14      	ldr	r3, [pc, #80]	; (80070fc <MX_ADC3_Init+0x98>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80070b0:	4b12      	ldr	r3, [pc, #72]	; (80070fc <MX_ADC3_Init+0x98>)
 80070b2:	2201      	movs	r2, #1
 80070b4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80070b6:	4b11      	ldr	r3, [pc, #68]	; (80070fc <MX_ADC3_Init+0x98>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80070be:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <MX_ADC3_Init+0x98>)
 80070c0:	2201      	movs	r2, #1
 80070c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80070c4:	480d      	ldr	r0, [pc, #52]	; (80070fc <MX_ADC3_Init+0x98>)
 80070c6:	f7f9 ffd1 	bl	800106c <HAL_ADC_Init>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80070d0:	f000 faa8 	bl	8007624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80070d4:	230d      	movs	r3, #13
 80070d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80070d8:	2301      	movs	r3, #1
 80070da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80070dc:	2300      	movs	r3, #0
 80070de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80070e0:	463b      	mov	r3, r7
 80070e2:	4619      	mov	r1, r3
 80070e4:	4805      	ldr	r0, [pc, #20]	; (80070fc <MX_ADC3_Init+0x98>)
 80070e6:	f7fa f963 	bl	80013b0 <HAL_ADC_ConfigChannel>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80070f0:	f000 fa98 	bl	8007624 <Error_Handler>
  }

}
 80070f4:	bf00      	nop
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20003240 	.word	0x20003240
 8007100:	40012200 	.word	0x40012200
 8007104:	0f000001 	.word	0x0f000001

08007108 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	; 0x28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007110:	f107 0314 	add.w	r3, r7, #20
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	605a      	str	r2, [r3, #4]
 800711a:	609a      	str	r2, [r3, #8]
 800711c:	60da      	str	r2, [r3, #12]
 800711e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1b      	ldr	r2, [pc, #108]	; (8007194 <HAL_ADC_MspInit+0x8c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d12f      	bne.n	800718a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800712a:	2300      	movs	r3, #0
 800712c:	613b      	str	r3, [r7, #16]
 800712e:	4b1a      	ldr	r3, [pc, #104]	; (8007198 <HAL_ADC_MspInit+0x90>)
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	4a19      	ldr	r2, [pc, #100]	; (8007198 <HAL_ADC_MspInit+0x90>)
 8007134:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007138:	6453      	str	r3, [r2, #68]	; 0x44
 800713a:	4b17      	ldr	r3, [pc, #92]	; (8007198 <HAL_ADC_MspInit+0x90>)
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007142:	613b      	str	r3, [r7, #16]
 8007144:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	4b13      	ldr	r3, [pc, #76]	; (8007198 <HAL_ADC_MspInit+0x90>)
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	4a12      	ldr	r2, [pc, #72]	; (8007198 <HAL_ADC_MspInit+0x90>)
 8007150:	f043 0304 	orr.w	r3, r3, #4
 8007154:	6313      	str	r3, [r2, #48]	; 0x30
 8007156:	4b10      	ldr	r3, [pc, #64]	; (8007198 <HAL_ADC_MspInit+0x90>)
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC3     ------> ADC3_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007162:	2308      	movs	r3, #8
 8007164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007166:	2303      	movs	r3, #3
 8007168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800716a:	2300      	movs	r3, #0
 800716c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800716e:	f107 0314 	add.w	r3, r7, #20
 8007172:	4619      	mov	r1, r3
 8007174:	4809      	ldr	r0, [pc, #36]	; (800719c <HAL_ADC_MspInit+0x94>)
 8007176:	f7fa fc65 	bl	8001a44 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800717a:	2200      	movs	r2, #0
 800717c:	2102      	movs	r1, #2
 800717e:	2012      	movs	r0, #18
 8007180:	f7fa fc29 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007184:	2012      	movs	r0, #18
 8007186:	f7fa fc42 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800718a:	bf00      	nop
 800718c:	3728      	adds	r7, #40	; 0x28
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	40012200 	.word	0x40012200
 8007198:	40023800 	.word	0x40023800
 800719c:	40020800 	.word	0x40020800

080071a0 <__NVIC_GetPriorityGrouping>:
{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071a4:	4b04      	ldr	r3, [pc, #16]	; (80071b8 <__NVIC_GetPriorityGrouping+0x18>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	0a1b      	lsrs	r3, r3, #8
 80071aa:	f003 0307 	and.w	r3, r3, #7
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	e000ed00 	.word	0xe000ed00

080071bc <__NVIC_EnableIRQ>:
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	db0b      	blt.n	80071e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	f003 021f 	and.w	r2, r3, #31
 80071d4:	4907      	ldr	r1, [pc, #28]	; (80071f4 <__NVIC_EnableIRQ+0x38>)
 80071d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	2001      	movs	r0, #1
 80071de:	fa00 f202 	lsl.w	r2, r0, r2
 80071e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	e000e100 	.word	0xe000e100

080071f8 <__NVIC_SetPriority>:
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	6039      	str	r1, [r7, #0]
 8007202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007208:	2b00      	cmp	r3, #0
 800720a:	db0a      	blt.n	8007222 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	b2da      	uxtb	r2, r3
 8007210:	490c      	ldr	r1, [pc, #48]	; (8007244 <__NVIC_SetPriority+0x4c>)
 8007212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007216:	0112      	lsls	r2, r2, #4
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	440b      	add	r3, r1
 800721c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007220:	e00a      	b.n	8007238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	b2da      	uxtb	r2, r3
 8007226:	4908      	ldr	r1, [pc, #32]	; (8007248 <__NVIC_SetPriority+0x50>)
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	f003 030f 	and.w	r3, r3, #15
 800722e:	3b04      	subs	r3, #4
 8007230:	0112      	lsls	r2, r2, #4
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	440b      	add	r3, r1
 8007236:	761a      	strb	r2, [r3, #24]
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	e000e100 	.word	0xe000e100
 8007248:	e000ed00 	.word	0xe000ed00

0800724c <NVIC_EncodePriority>:
{
 800724c:	b480      	push	{r7}
 800724e:	b089      	sub	sp, #36	; 0x24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	f1c3 0307 	rsb	r3, r3, #7
 8007266:	2b04      	cmp	r3, #4
 8007268:	bf28      	it	cs
 800726a:	2304      	movcs	r3, #4
 800726c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	3304      	adds	r3, #4
 8007272:	2b06      	cmp	r3, #6
 8007274:	d902      	bls.n	800727c <NVIC_EncodePriority+0x30>
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	3b03      	subs	r3, #3
 800727a:	e000      	b.n	800727e <NVIC_EncodePriority+0x32>
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	fa02 f303 	lsl.w	r3, r2, r3
 800728a:	43da      	mvns	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	401a      	ands	r2, r3
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007294:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	fa01 f303 	lsl.w	r3, r1, r3
 800729e:	43d9      	mvns	r1, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072a4:	4313      	orrs	r3, r2
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3724      	adds	r7, #36	; 0x24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80072be:	4a13      	ldr	r2, [pc, #76]	; (800730c <LL_SYSCFG_SetEXTISource+0x58>)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	3302      	adds	r3, #2
 80072c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	0c1b      	lsrs	r3, r3, #16
 80072ce:	43db      	mvns	r3, r3
 80072d0:	ea02 0103 	and.w	r1, r2, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	0c1b      	lsrs	r3, r3, #16
 80072d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	fa93 f3a3 	rbit	r3, r3
 80072e0:	60bb      	str	r3, [r7, #8]
  return result;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	fab3 f383 	clz	r3, r3
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	461a      	mov	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	fa03 f202 	lsl.w	r2, r3, r2
 80072f2:	4806      	ldr	r0, [pc, #24]	; (800730c <LL_SYSCFG_SetEXTISource+0x58>)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	430a      	orrs	r2, r1
 80072fa:	3302      	adds	r3, #2
 80072fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	40013800 	.word	0x40013800

08007310 <LL_GPIO_SetPinMode>:
{
 8007310:	b480      	push	{r7}
 8007312:	b089      	sub	sp, #36	; 0x24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	fa93 f3a3 	rbit	r3, r3
 800732a:	613b      	str	r3, [r7, #16]
  return result;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	fab3 f383 	clz	r3, r3
 8007332:	b2db      	uxtb	r3, r3
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	2103      	movs	r1, #3
 8007338:	fa01 f303 	lsl.w	r3, r1, r3
 800733c:	43db      	mvns	r3, r3
 800733e:	401a      	ands	r2, r3
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	fa93 f3a3 	rbit	r3, r3
 800734a:	61bb      	str	r3, [r7, #24]
  return result;
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	fab3 f383 	clz	r3, r3
 8007352:	b2db      	uxtb	r3, r3
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	fa01 f303 	lsl.w	r3, r1, r3
 800735c:	431a      	orrs	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	601a      	str	r2, [r3, #0]
}
 8007362:	bf00      	nop
 8007364:	3724      	adds	r7, #36	; 0x24
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <LL_GPIO_SetPinPull>:
{
 800736e:	b480      	push	{r7}
 8007370:	b089      	sub	sp, #36	; 0x24
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	fa93 f3a3 	rbit	r3, r3
 8007388:	613b      	str	r3, [r7, #16]
  return result;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	fab3 f383 	clz	r3, r3
 8007390:	b2db      	uxtb	r3, r3
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	2103      	movs	r1, #3
 8007396:	fa01 f303 	lsl.w	r3, r1, r3
 800739a:	43db      	mvns	r3, r3
 800739c:	401a      	ands	r2, r3
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	fa93 f3a3 	rbit	r3, r3
 80073a8:	61bb      	str	r3, [r7, #24]
  return result;
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	fab3 f383 	clz	r3, r3
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ba:	431a      	orrs	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	60da      	str	r2, [r3, #12]
}
 80073c0:	bf00      	nop
 80073c2:	3724      	adds	r7, #36	; 0x24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	041a      	lsls	r2, r3, #16
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	619a      	str	r2, [r3, #24]
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <LL_AHB1_GRP1_EnableClock>:
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80073f4:	4b08      	ldr	r3, [pc, #32]	; (8007418 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80073f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073f8:	4907      	ldr	r1, [pc, #28]	; (8007418 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007400:	4b05      	ldr	r3, [pc, #20]	; (8007418 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4013      	ands	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800740a:	68fb      	ldr	r3, [r7, #12]
}
 800740c:	bf00      	nop
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	40023800 	.word	0x40023800

0800741c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007422:	f107 0318 	add.w	r3, r7, #24
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800742c:	463b      	mov	r3, r7
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	605a      	str	r2, [r3, #4]
 8007434:	609a      	str	r2, [r3, #8]
 8007436:	60da      	str	r2, [r3, #12]
 8007438:	611a      	str	r2, [r3, #16]
 800743a:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800743c:	2004      	movs	r0, #4
 800743e:	f7ff ffd5 	bl	80073ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8007442:	2080      	movs	r0, #128	; 0x80
 8007444:	f7ff ffd2 	bl	80073ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007448:	2001      	movs	r0, #1
 800744a:	f7ff ffcf 	bl	80073ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800744e:	2002      	movs	r0, #2
 8007450:	f7ff ffcc 	bl	80073ec <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8007454:	2120      	movs	r1, #32
 8007456:	482c      	ldr	r0, [pc, #176]	; (8007508 <MX_GPIO_Init+0xec>)
 8007458:	f7ff ffb8 	bl	80073cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 800745c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8007460:	482a      	ldr	r0, [pc, #168]	; (800750c <MX_GPIO_Init+0xf0>)
 8007462:	f7ff ffb3 	bl	80073cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8007466:	492a      	ldr	r1, [pc, #168]	; (8007510 <MX_GPIO_Init+0xf4>)
 8007468:	2002      	movs	r0, #2
 800746a:	f7ff ff23 	bl	80072b4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800746e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007472:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007474:	2301      	movs	r3, #1
 8007476:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007478:	2300      	movs	r3, #0
 800747a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800747c:	2302      	movs	r3, #2
 800747e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8007480:	f107 0318 	add.w	r3, r7, #24
 8007484:	4618      	mov	r0, r3
 8007486:	f7fb fb69 	bl	8002b5c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800748a:	2200      	movs	r2, #0
 800748c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007490:	481e      	ldr	r0, [pc, #120]	; (800750c <MX_GPIO_Init+0xf0>)
 8007492:	f7ff ff6c 	bl	800736e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8007496:	2200      	movs	r2, #0
 8007498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800749c:	481b      	ldr	r0, [pc, #108]	; (800750c <MX_GPIO_Init+0xf0>)
 800749e:	f7ff ff37 	bl	8007310 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80074a2:	2320      	movs	r3, #32
 80074a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074a6:	2301      	movs	r3, #1
 80074a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074b2:	2300      	movs	r3, #0
 80074b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80074b6:	463b      	mov	r3, r7
 80074b8:	4619      	mov	r1, r3
 80074ba:	4813      	ldr	r0, [pc, #76]	; (8007508 <MX_GPIO_Init+0xec>)
 80074bc:	f7fb fccf 	bl	8002e5e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80074c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80074c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074c6:	2301      	movs	r3, #1
 80074c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80074ca:	2300      	movs	r3, #0
 80074cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074d2:	2300      	movs	r3, #0
 80074d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074d6:	463b      	mov	r3, r7
 80074d8:	4619      	mov	r1, r3
 80074da:	480c      	ldr	r0, [pc, #48]	; (800750c <MX_GPIO_Init+0xf0>)
 80074dc:	f7fb fcbf 	bl	8002e5e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80074e0:	f7ff fe5e 	bl	80071a0 <__NVIC_GetPriorityGrouping>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2200      	movs	r2, #0
 80074e8:	2100      	movs	r1, #0
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff feae 	bl	800724c <NVIC_EncodePriority>
 80074f0:	4603      	mov	r3, r0
 80074f2:	4619      	mov	r1, r3
 80074f4:	2028      	movs	r0, #40	; 0x28
 80074f6:	f7ff fe7f 	bl	80071f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80074fa:	2028      	movs	r0, #40	; 0x28
 80074fc:	f7ff fe5e 	bl	80071bc <__NVIC_EnableIRQ>

}
 8007500:	bf00      	nop
 8007502:	3720      	adds	r7, #32
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	40020000 	.word	0x40020000
 800750c:	40020800 	.word	0x40020800
 8007510:	00f00003 	.word	0x00f00003

08007514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007518:	f7f9 fd36 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800751c:	f000 f810 	bl	8007540 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  cppwrapper();
 8007520:	f000 fd42 	bl	8007fa8 <cppwrapper>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007524:	f7ff ff7a 	bl	800741c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8007528:	f000 fcd8 	bl	8007edc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800752c:	f000 fb62 	bl	8007bf4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8007530:	f7ff fb76 	bl	8006c20 <MX_ADC1_Init>
  MX_ADC2_Init();
 8007534:	f7ff fc8e 	bl	8006e54 <MX_ADC2_Init>
  MX_ADC3_Init();
 8007538:	f7ff fd94 	bl	8007064 <MX_ADC3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800753c:	e7fe      	b.n	800753c <main+0x28>
	...

08007540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b094      	sub	sp, #80	; 0x50
 8007544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007546:	f107 031c 	add.w	r3, r7, #28
 800754a:	2234      	movs	r2, #52	; 0x34
 800754c:	2100      	movs	r1, #0
 800754e:	4618      	mov	r0, r3
 8007550:	f003 f958 	bl	800a804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007554:	f107 0308 	add.w	r3, r7, #8
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	605a      	str	r2, [r3, #4]
 800755e:	609a      	str	r2, [r3, #8]
 8007560:	60da      	str	r2, [r3, #12]
 8007562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007564:	2300      	movs	r3, #0
 8007566:	607b      	str	r3, [r7, #4]
 8007568:	4b2c      	ldr	r3, [pc, #176]	; (800761c <SystemClock_Config+0xdc>)
 800756a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756c:	4a2b      	ldr	r2, [pc, #172]	; (800761c <SystemClock_Config+0xdc>)
 800756e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007572:	6413      	str	r3, [r2, #64]	; 0x40
 8007574:	4b29      	ldr	r3, [pc, #164]	; (800761c <SystemClock_Config+0xdc>)
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800757c:	607b      	str	r3, [r7, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007580:	2300      	movs	r3, #0
 8007582:	603b      	str	r3, [r7, #0]
 8007584:	4b26      	ldr	r3, [pc, #152]	; (8007620 <SystemClock_Config+0xe0>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a25      	ldr	r2, [pc, #148]	; (8007620 <SystemClock_Config+0xe0>)
 800758a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	4b23      	ldr	r3, [pc, #140]	; (8007620 <SystemClock_Config+0xe0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007598:	603b      	str	r3, [r7, #0]
 800759a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800759c:	2301      	movs	r3, #1
 800759e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80075a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075a6:	2302      	movs	r3, #2
 80075a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80075aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80075ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80075b0:	2304      	movs	r3, #4
 80075b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80075b4:	23b4      	movs	r3, #180	; 0xb4
 80075b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80075b8:	2302      	movs	r3, #2
 80075ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80075bc:	2302      	movs	r3, #2
 80075be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80075c0:	2302      	movs	r3, #2
 80075c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80075c4:	f107 031c 	add.w	r3, r7, #28
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fa fe9f 	bl	800230c <HAL_RCC_OscConfig>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80075d4:	f000 f826 	bl	8007624 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80075d8:	f7fa fbc6 	bl	8001d68 <HAL_PWREx_EnableOverDrive>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80075e2:	f000 f81f 	bl	8007624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80075e6:	230f      	movs	r3, #15
 80075e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075ea:	2302      	movs	r3, #2
 80075ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075ee:	2300      	movs	r3, #0
 80075f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80075f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80075f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80075f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80075fe:	f107 0308 	add.w	r3, r7, #8
 8007602:	2105      	movs	r1, #5
 8007604:	4618      	mov	r0, r3
 8007606:	f7fa fbff 	bl	8001e08 <HAL_RCC_ClockConfig>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007610:	f000 f808 	bl	8007624 <Error_Handler>
  }
}
 8007614:	bf00      	nop
 8007616:	3750      	adds	r7, #80	; 0x50
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	40023800 	.word	0x40023800
 8007620:	40007000 	.word	0x40007000

08007624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007628:	bf00      	nop
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
	...

08007634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800763a:	2300      	movs	r3, #0
 800763c:	607b      	str	r3, [r7, #4]
 800763e:	4b10      	ldr	r3, [pc, #64]	; (8007680 <HAL_MspInit+0x4c>)
 8007640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007642:	4a0f      	ldr	r2, [pc, #60]	; (8007680 <HAL_MspInit+0x4c>)
 8007644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007648:	6453      	str	r3, [r2, #68]	; 0x44
 800764a:	4b0d      	ldr	r3, [pc, #52]	; (8007680 <HAL_MspInit+0x4c>)
 800764c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007652:	607b      	str	r3, [r7, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007656:	2300      	movs	r3, #0
 8007658:	603b      	str	r3, [r7, #0]
 800765a:	4b09      	ldr	r3, [pc, #36]	; (8007680 <HAL_MspInit+0x4c>)
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	4a08      	ldr	r2, [pc, #32]	; (8007680 <HAL_MspInit+0x4c>)
 8007660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007664:	6413      	str	r3, [r2, #64]	; 0x40
 8007666:	4b06      	ldr	r3, [pc, #24]	; (8007680 <HAL_MspInit+0x4c>)
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8007672:	2004      	movs	r0, #4
 8007674:	f7fa f9a4 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	40023800 	.word	0x40023800

08007684 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800768c:	4b07      	ldr	r3, [pc, #28]	; (80076ac <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800768e:	695a      	ldr	r2, [r3, #20]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4013      	ands	r3, r2
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	429a      	cmp	r2, r3
 8007698:	bf0c      	ite	eq
 800769a:	2301      	moveq	r3, #1
 800769c:	2300      	movne	r3, #0
 800769e:	b2db      	uxtb	r3, r3
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	40013c00 	.word	0x40013c00

080076b0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80076b8:	4a04      	ldr	r2, [pc, #16]	; (80076cc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6153      	str	r3, [r2, #20]
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	40013c00 	.word	0x40013c00

080076d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076de:	b480      	push	{r7}
 80076e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076e2:	e7fe      	b.n	80076e2 <HardFault_Handler+0x4>

080076e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076e8:	e7fe      	b.n	80076e8 <MemManage_Handler+0x4>

080076ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076ea:	b480      	push	{r7}
 80076ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076ee:	e7fe      	b.n	80076ee <BusFault_Handler+0x4>

080076f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076f4:	e7fe      	b.n	80076f4 <UsageFault_Handler+0x4>

080076f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80076f6:	b480      	push	{r7}
 80076f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80076fa:	bf00      	nop
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007708:	bf00      	nop
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007712:	b480      	push	{r7}
 8007714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007716:	bf00      	nop
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007724:	f7f9 fc82 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007728:	bf00      	nop
 800772a:	bd80      	pop	{r7, pc}

0800772c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8007730:	4802      	ldr	r0, [pc, #8]	; (800773c <ADC_IRQHandler+0x10>)
 8007732:	f7f9 fcde 	bl	80010f2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007736:	bf00      	nop
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20003240 	.word	0x20003240

08007740 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8007740:	b480      	push	{r7}
 8007742:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8007744:	bf00      	nop
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800774e:	b480      	push	{r7}
 8007750:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007752:	bf00      	nop
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8007760:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007764:	f7ff ff8e 	bl	8007684 <LL_EXTI_IsActiveFlag_0_31>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 800776e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007772:	f7ff ff9d 	bl	80076b0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007776:	bf00      	nop
 8007778:	bd80      	pop	{r7, pc}

0800777a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800777a:	b480      	push	{r7}
 800777c:	af00      	add	r7, sp, #0
	return 1;
 800777e:	2301      	movs	r3, #1
}
 8007780:	4618      	mov	r0, r3
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <_kill>:

int _kill(int pid, int sig)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007794:	f002 ffd8 	bl	800a748 <__errno>
 8007798:	4602      	mov	r2, r0
 800779a:	2316      	movs	r3, #22
 800779c:	6013      	str	r3, [r2, #0]
	return -1;
 800779e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <_exit>:

void _exit (int status)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80077b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff ffe7 	bl	800778a <_kill>
	while (1) {}		/* Make sure we hang here */
 80077bc:	e7fe      	b.n	80077bc <_exit+0x12>
	...

080077c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80077c8:	4b11      	ldr	r3, [pc, #68]	; (8007810 <_sbrk+0x50>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d102      	bne.n	80077d6 <_sbrk+0x16>
		heap_end = &end;
 80077d0:	4b0f      	ldr	r3, [pc, #60]	; (8007810 <_sbrk+0x50>)
 80077d2:	4a10      	ldr	r2, [pc, #64]	; (8007814 <_sbrk+0x54>)
 80077d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80077d6:	4b0e      	ldr	r3, [pc, #56]	; (8007810 <_sbrk+0x50>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80077dc:	4b0c      	ldr	r3, [pc, #48]	; (8007810 <_sbrk+0x50>)
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4413      	add	r3, r2
 80077e4:	466a      	mov	r2, sp
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d907      	bls.n	80077fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80077ea:	f002 ffad 	bl	800a748 <__errno>
 80077ee:	4602      	mov	r2, r0
 80077f0:	230c      	movs	r3, #12
 80077f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80077f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077f8:	e006      	b.n	8007808 <_sbrk+0x48>
	}

	heap_end += incr;
 80077fa:	4b05      	ldr	r3, [pc, #20]	; (8007810 <_sbrk+0x50>)
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	4a03      	ldr	r2, [pc, #12]	; (8007810 <_sbrk+0x50>)
 8007804:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007806:	68fb      	ldr	r3, [r7, #12]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	200001f8 	.word	0x200001f8
 8007814:	200032a0 	.word	0x200032a0

08007818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800781c:	4b16      	ldr	r3, [pc, #88]	; (8007878 <SystemInit+0x60>)
 800781e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007822:	4a15      	ldr	r2, [pc, #84]	; (8007878 <SystemInit+0x60>)
 8007824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800782c:	4b13      	ldr	r3, [pc, #76]	; (800787c <SystemInit+0x64>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a12      	ldr	r2, [pc, #72]	; (800787c <SystemInit+0x64>)
 8007832:	f043 0301 	orr.w	r3, r3, #1
 8007836:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007838:	4b10      	ldr	r3, [pc, #64]	; (800787c <SystemInit+0x64>)
 800783a:	2200      	movs	r2, #0
 800783c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800783e:	4b0f      	ldr	r3, [pc, #60]	; (800787c <SystemInit+0x64>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a0e      	ldr	r2, [pc, #56]	; (800787c <SystemInit+0x64>)
 8007844:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800784c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800784e:	4b0b      	ldr	r3, [pc, #44]	; (800787c <SystemInit+0x64>)
 8007850:	4a0b      	ldr	r2, [pc, #44]	; (8007880 <SystemInit+0x68>)
 8007852:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007854:	4b09      	ldr	r3, [pc, #36]	; (800787c <SystemInit+0x64>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a08      	ldr	r2, [pc, #32]	; (800787c <SystemInit+0x64>)
 800785a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800785e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <SystemInit+0x64>)
 8007862:	2200      	movs	r2, #0
 8007864:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007866:	4b04      	ldr	r3, [pc, #16]	; (8007878 <SystemInit+0x60>)
 8007868:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800786c:	609a      	str	r2, [r3, #8]
#endif
}
 800786e:	bf00      	nop
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	e000ed00 	.word	0xe000ed00
 800787c:	40023800 	.word	0x40023800
 8007880:	24003010 	.word	0x24003010

08007884 <__NVIC_GetPriorityGrouping>:
{
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007888:	4b04      	ldr	r3, [pc, #16]	; (800789c <__NVIC_GetPriorityGrouping+0x18>)
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	0a1b      	lsrs	r3, r3, #8
 800788e:	f003 0307 	and.w	r3, r3, #7
}
 8007892:	4618      	mov	r0, r3
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	e000ed00 	.word	0xe000ed00

080078a0 <__NVIC_EnableIRQ>:
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	4603      	mov	r3, r0
 80078a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	db0b      	blt.n	80078ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	f003 021f 	and.w	r2, r3, #31
 80078b8:	4907      	ldr	r1, [pc, #28]	; (80078d8 <__NVIC_EnableIRQ+0x38>)
 80078ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078be:	095b      	lsrs	r3, r3, #5
 80078c0:	2001      	movs	r0, #1
 80078c2:	fa00 f202 	lsl.w	r2, r0, r2
 80078c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	e000e100 	.word	0xe000e100

080078dc <__NVIC_SetPriority>:
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4603      	mov	r3, r0
 80078e4:	6039      	str	r1, [r7, #0]
 80078e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	db0a      	blt.n	8007906 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	490c      	ldr	r1, [pc, #48]	; (8007928 <__NVIC_SetPriority+0x4c>)
 80078f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078fa:	0112      	lsls	r2, r2, #4
 80078fc:	b2d2      	uxtb	r2, r2
 80078fe:	440b      	add	r3, r1
 8007900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007904:	e00a      	b.n	800791c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	b2da      	uxtb	r2, r3
 800790a:	4908      	ldr	r1, [pc, #32]	; (800792c <__NVIC_SetPriority+0x50>)
 800790c:	79fb      	ldrb	r3, [r7, #7]
 800790e:	f003 030f 	and.w	r3, r3, #15
 8007912:	3b04      	subs	r3, #4
 8007914:	0112      	lsls	r2, r2, #4
 8007916:	b2d2      	uxtb	r2, r2
 8007918:	440b      	add	r3, r1
 800791a:	761a      	strb	r2, [r3, #24]
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	e000e100 	.word	0xe000e100
 800792c:	e000ed00 	.word	0xe000ed00

08007930 <NVIC_EncodePriority>:
{
 8007930:	b480      	push	{r7}
 8007932:	b089      	sub	sp, #36	; 0x24
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f003 0307 	and.w	r3, r3, #7
 8007942:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	f1c3 0307 	rsb	r3, r3, #7
 800794a:	2b04      	cmp	r3, #4
 800794c:	bf28      	it	cs
 800794e:	2304      	movcs	r3, #4
 8007950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	3304      	adds	r3, #4
 8007956:	2b06      	cmp	r3, #6
 8007958:	d902      	bls.n	8007960 <NVIC_EncodePriority+0x30>
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	3b03      	subs	r3, #3
 800795e:	e000      	b.n	8007962 <NVIC_EncodePriority+0x32>
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	fa02 f303 	lsl.w	r3, r2, r3
 800796e:	43da      	mvns	r2, r3
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	401a      	ands	r2, r3
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007978:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	fa01 f303 	lsl.w	r3, r1, r3
 8007982:	43d9      	mvns	r1, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007988:	4313      	orrs	r3, r2
}
 800798a:	4618      	mov	r0, r3
 800798c:	3724      	adds	r7, #36	; 0x24
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <LL_TIM_DisableARRPreload>:
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	601a      	str	r2, [r3, #0]
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
	...

080079b8 <LL_TIM_OC_DisableFast>:
{
 80079b8:	b4b0      	push	{r4, r5, r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d01c      	beq.n	8007a02 <LL_TIM_OC_DisableFast+0x4a>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d017      	beq.n	80079fe <LL_TIM_OC_DisableFast+0x46>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d012      	beq.n	80079fa <LL_TIM_OC_DisableFast+0x42>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b40      	cmp	r3, #64	; 0x40
 80079d8:	d00d      	beq.n	80079f6 <LL_TIM_OC_DisableFast+0x3e>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e0:	d007      	beq.n	80079f2 <LL_TIM_OC_DisableFast+0x3a>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079e8:	d101      	bne.n	80079ee <LL_TIM_OC_DisableFast+0x36>
 80079ea:	2305      	movs	r3, #5
 80079ec:	e00a      	b.n	8007a04 <LL_TIM_OC_DisableFast+0x4c>
 80079ee:	2306      	movs	r3, #6
 80079f0:	e008      	b.n	8007a04 <LL_TIM_OC_DisableFast+0x4c>
 80079f2:	2304      	movs	r3, #4
 80079f4:	e006      	b.n	8007a04 <LL_TIM_OC_DisableFast+0x4c>
 80079f6:	2303      	movs	r3, #3
 80079f8:	e004      	b.n	8007a04 <LL_TIM_OC_DisableFast+0x4c>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e002      	b.n	8007a04 <LL_TIM_OC_DisableFast+0x4c>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e000      	b.n	8007a04 <LL_TIM_OC_DisableFast+0x4c>
 8007a02:	2300      	movs	r3, #0
 8007a04:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3318      	adds	r3, #24
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <LL_TIM_OC_DisableFast+0x7c>)
 8007a10:	5c5b      	ldrb	r3, [r3, r1]
 8007a12:	4413      	add	r3, r2
 8007a14:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	4629      	mov	r1, r5
 8007a1a:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <LL_TIM_OC_DisableFast+0x80>)
 8007a1c:	5c5b      	ldrb	r3, [r3, r1]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	2304      	movs	r3, #4
 8007a22:	408b      	lsls	r3, r1
 8007a24:	43db      	mvns	r3, r3
 8007a26:	4013      	ands	r3, r2
 8007a28:	6023      	str	r3, [r4, #0]
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bcb0      	pop	{r4, r5, r7}
 8007a32:	4770      	bx	lr
 8007a34:	0800ca5c 	.word	0x0800ca5c
 8007a38:	0800ca64 	.word	0x0800ca64

08007a3c <LL_TIM_OC_EnablePreload>:
{
 8007a3c:	b4b0      	push	{r4, r5, r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d01c      	beq.n	8007a86 <LL_TIM_OC_EnablePreload+0x4a>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d017      	beq.n	8007a82 <LL_TIM_OC_EnablePreload+0x46>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b10      	cmp	r3, #16
 8007a56:	d012      	beq.n	8007a7e <LL_TIM_OC_EnablePreload+0x42>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b40      	cmp	r3, #64	; 0x40
 8007a5c:	d00d      	beq.n	8007a7a <LL_TIM_OC_EnablePreload+0x3e>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a64:	d007      	beq.n	8007a76 <LL_TIM_OC_EnablePreload+0x3a>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a6c:	d101      	bne.n	8007a72 <LL_TIM_OC_EnablePreload+0x36>
 8007a6e:	2305      	movs	r3, #5
 8007a70:	e00a      	b.n	8007a88 <LL_TIM_OC_EnablePreload+0x4c>
 8007a72:	2306      	movs	r3, #6
 8007a74:	e008      	b.n	8007a88 <LL_TIM_OC_EnablePreload+0x4c>
 8007a76:	2304      	movs	r3, #4
 8007a78:	e006      	b.n	8007a88 <LL_TIM_OC_EnablePreload+0x4c>
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e004      	b.n	8007a88 <LL_TIM_OC_EnablePreload+0x4c>
 8007a7e:	2302      	movs	r3, #2
 8007a80:	e002      	b.n	8007a88 <LL_TIM_OC_EnablePreload+0x4c>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <LL_TIM_OC_EnablePreload+0x4c>
 8007a86:	2300      	movs	r3, #0
 8007a88:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3318      	adds	r3, #24
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4629      	mov	r1, r5
 8007a92:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <LL_TIM_OC_EnablePreload+0x7c>)
 8007a94:	5c5b      	ldrb	r3, [r3, r1]
 8007a96:	4413      	add	r3, r2
 8007a98:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	4b07      	ldr	r3, [pc, #28]	; (8007abc <LL_TIM_OC_EnablePreload+0x80>)
 8007aa0:	5c5b      	ldrb	r3, [r3, r1]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	408b      	lsls	r3, r1
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	6023      	str	r3, [r4, #0]
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bcb0      	pop	{r4, r5, r7}
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	0800ca5c 	.word	0x0800ca5c
 8007abc:	0800ca64 	.word	0x0800ca64

08007ac0 <LL_TIM_SetTriggerOutput>:
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	605a      	str	r2, [r3, #4]
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <LL_TIM_SetSlaveMode>:
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f023 0207 	bic.w	r2, r3, #7
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	609a      	str	r2, [r3, #8]
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <LL_TIM_SetTriggerInput>:
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	431a      	orrs	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	609a      	str	r2, [r3, #8]
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <LL_TIM_DisableMasterSlaveMode>:
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	609a      	str	r2, [r3, #8]
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <LL_TIM_DisableIT_TRIG>:
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	60da      	str	r2, [r3, #12]
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <LL_TIM_DisableDMAReq_TRIG>:
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	60da      	str	r2, [r3, #12]
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
	...

08007b94 <LL_AHB1_GRP1_EnableClock>:
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007b9c:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ba0:	4907      	ldr	r1, [pc, #28]	; (8007bc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007ba8:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	40023800 	.word	0x40023800

08007bc4 <LL_APB2_GRP1_EnableClock>:
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007bcc:	4b08      	ldr	r3, [pc, #32]	; (8007bf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bd0:	4907      	ldr	r1, [pc, #28]	; (8007bf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007bd8:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4013      	ands	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007be2:	68fb      	ldr	r3, [r7, #12]
}
 8007be4:	bf00      	nop
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	40023800 	.word	0x40023800

08007bf4 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b09a      	sub	sp, #104	; 0x68
 8007bf8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8007bfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007bfe:	2200      	movs	r2, #0
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	605a      	str	r2, [r3, #4]
 8007c04:	609a      	str	r2, [r3, #8]
 8007c06:	60da      	str	r2, [r3, #12]
 8007c08:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8007c0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c0e:	2220      	movs	r2, #32
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f002 fdf6 	bl	800a804 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8007c18:	f107 031c 	add.w	r3, r7, #28
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	605a      	str	r2, [r3, #4]
 8007c22:	609a      	str	r2, [r3, #8]
 8007c24:	60da      	str	r2, [r3, #12]
 8007c26:	611a      	str	r2, [r3, #16]
 8007c28:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c2a:	1d3b      	adds	r3, r7, #4
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	605a      	str	r2, [r3, #4]
 8007c32:	609a      	str	r2, [r3, #8]
 8007c34:	60da      	str	r2, [r3, #12]
 8007c36:	611a      	str	r2, [r3, #16]
 8007c38:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	f7ff ffc2 	bl	8007bc4 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007c40:	2001      	movs	r0, #1
 8007c42:	f7ff ffa7 	bl	8007b94 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration  
  PA6   ------> TIM1_BKIN 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8007c46:	2340      	movs	r3, #64	; 0x40
 8007c48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007c56:	2302      	movs	r3, #2
 8007c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c5e:	1d3b      	adds	r3, r7, #4
 8007c60:	4619      	mov	r1, r3
 8007c62:	4871      	ldr	r0, [pc, #452]	; (8007e28 <MX_TIM1_Init+0x234>)
 8007c64:	f7fb f8fb 	bl	8002e5e <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 8007c68:	f7ff fe0c 	bl	8007884 <__NVIC_GetPriorityGrouping>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2201      	movs	r2, #1
 8007c70:	2104      	movs	r1, #4
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff fe5c 	bl	8007930 <NVIC_EncodePriority>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	2018      	movs	r0, #24
 8007c7e:	f7ff fe2d 	bl	80078dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007c82:	2018      	movs	r0, #24
 8007c84:	f7ff fe0c 	bl	80078a0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c88:	f7ff fdfc 	bl	8007884 <__NVIC_GetPriorityGrouping>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2100      	movs	r1, #0
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff fe4c 	bl	8007930 <NVIC_EncodePriority>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	2019      	movs	r0, #25
 8007c9e:	f7ff fe1d 	bl	80078dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007ca2:	2019      	movs	r0, #25
 8007ca4:	f7ff fdfc 	bl	80078a0 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8007cae:	2320      	movs	r3, #32
 8007cb0:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 8007cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8007cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cbc:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8007cc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4858      	ldr	r0, [pc, #352]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007ccc:	f7fb fb2c 	bl	8003328 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8007cd0:	4856      	ldr	r0, [pc, #344]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007cd2:	f7ff fe60 	bl	8007996 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	4854      	ldr	r0, [pc, #336]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007cda:	f7ff feaf 	bl	8007a3c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8007cde:	2360      	movs	r3, #96	; 0x60
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8007cfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d02:	461a      	mov	r2, r3
 8007d04:	2101      	movs	r1, #1
 8007d06:	4849      	ldr	r0, [pc, #292]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007d08:	f7fb fba8 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	4847      	ldr	r0, [pc, #284]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007d10:	f7ff fe52 	bl	80079b8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8007d14:	2110      	movs	r1, #16
 8007d16:	4845      	ldr	r0, [pc, #276]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007d18:	f7ff fe90 	bl	8007a3c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007d20:	2300      	movs	r3, #0
 8007d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8007d24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d28:	461a      	mov	r2, r3
 8007d2a:	2110      	movs	r1, #16
 8007d2c:	483f      	ldr	r0, [pc, #252]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007d2e:	f7fb fb95 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8007d32:	2110      	movs	r1, #16
 8007d34:	483d      	ldr	r0, [pc, #244]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007d36:	f7ff fe3f 	bl	80079b8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8007d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d3e:	483b      	ldr	r0, [pc, #236]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007d40:	f7ff fe7c 	bl	8007a3c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007d44:	2300      	movs	r3, #0
 8007d46:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8007d4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d50:	461a      	mov	r2, r3
 8007d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d56:	4835      	ldr	r0, [pc, #212]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007d58:	f7fb fb80 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8007d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d60:	4832      	ldr	r0, [pc, #200]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007d62:	f7ff fe29 	bl	80079b8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8007d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d6a:	4830      	ldr	r0, [pc, #192]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007d6c:	f7ff fe66 	bl	8007a3c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8007d70:	2370      	movs	r3, #112	; 0x70
 8007d72:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8007d7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d80:	461a      	mov	r2, r3
 8007d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d86:	4829      	ldr	r0, [pc, #164]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007d88:	f7fb fb68 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8007d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d90:	4826      	ldr	r0, [pc, #152]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007d92:	f7ff fe11 	bl	80079b8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8007d96:	2110      	movs	r1, #16
 8007d98:	4824      	ldr	r0, [pc, #144]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007d9a:	f7ff feb7 	bl	8007b0c <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8007d9e:	2106      	movs	r1, #6
 8007da0:	4822      	ldr	r0, [pc, #136]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007da2:	f7ff fea0 	bl	8007ae6 <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8007da6:	4821      	ldr	r0, [pc, #132]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007da8:	f7ff fed3 	bl	8007b52 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8007dac:	481f      	ldr	r0, [pc, #124]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007dae:	f7ff fee0 	bl	8007b72 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8007db2:	2100      	movs	r1, #0
 8007db4:	481d      	ldr	r0, [pc, #116]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007db6:	f7ff fe83 	bl	8007ac0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8007dba:	481c      	ldr	r0, [pc, #112]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007dbc:	f7ff feb9 	bl	8007b32 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8007dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007dc4:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 8007dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dca:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8007dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8007dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ddc:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8007dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8007de8:	f107 031c 	add.w	r3, r7, #28
 8007dec:	4619      	mov	r1, r3
 8007dee:	480f      	ldr	r0, [pc, #60]	; (8007e2c <MX_TIM1_Init+0x238>)
 8007df0:	f7fb fb6c 	bl	80034cc <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007df4:	2001      	movs	r0, #1
 8007df6:	f7ff fecd 	bl	8007b94 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8007dfa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007dfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007e00:	2302      	movs	r3, #2
 8007e02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8007e04:	2302      	movs	r3, #2
 8007e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8007e10:	2301      	movs	r3, #1
 8007e12:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e14:	1d3b      	adds	r3, r7, #4
 8007e16:	4619      	mov	r1, r3
 8007e18:	4803      	ldr	r0, [pc, #12]	; (8007e28 <MX_TIM1_Init+0x234>)
 8007e1a:	f7fb f820 	bl	8002e5e <LL_GPIO_Init>

}
 8007e1e:	bf00      	nop
 8007e20:	3768      	adds	r7, #104	; 0x68
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	40020000 	.word	0x40020000
 8007e2c:	40010000 	.word	0x40010000

08007e30 <LL_USART_Enable>:
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	60da      	str	r2, [r3, #12]
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <LL_USART_ConfigAsyncMode>:
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	615a      	str	r2, [r3, #20]
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <LL_AHB1_GRP1_EnableClock>:
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007e84:	4b08      	ldr	r3, [pc, #32]	; (8007ea8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e88:	4907      	ldr	r1, [pc, #28]	; (8007ea8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007e90:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4013      	ands	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
}
 8007e9c:	bf00      	nop
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	40023800 	.word	0x40023800

08007eac <LL_APB1_GRP1_EnableClock>:
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8007eb4:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eb8:	4907      	ldr	r1, [pc, #28]	; (8007ed8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007ec0:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007eca:	68fb      	ldr	r3, [r7, #12]
}
 8007ecc:	bf00      	nop
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	40023800 	.word	0x40023800

08007edc <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08e      	sub	sp, #56	; 0x38
 8007ee0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8007ee2:	f107 031c 	add.w	r3, r7, #28
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	605a      	str	r2, [r3, #4]
 8007eec:	609a      	str	r2, [r3, #8]
 8007eee:	60da      	str	r2, [r3, #12]
 8007ef0:	611a      	str	r2, [r3, #16]
 8007ef2:	615a      	str	r2, [r3, #20]
 8007ef4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef6:	1d3b      	adds	r3, r7, #4
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	605a      	str	r2, [r3, #4]
 8007efe:	609a      	str	r2, [r3, #8]
 8007f00:	60da      	str	r2, [r3, #12]
 8007f02:	611a      	str	r2, [r3, #16]
 8007f04:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8007f06:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007f0a:	f7ff ffcf 	bl	8007eac <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007f0e:	2001      	movs	r0, #1
 8007f10:	f7ff ffb4 	bl	8007e7c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007f14:	230c      	movs	r3, #12
 8007f16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f20:	2300      	movs	r3, #0
 8007f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007f24:	2301      	movs	r3, #1
 8007f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007f28:	2307      	movs	r3, #7
 8007f2a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f2c:	1d3b      	adds	r3, r7, #4
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4810      	ldr	r0, [pc, #64]	; (8007f74 <MX_USART2_UART_Init+0x98>)
 8007f32:	f7fa ff94 	bl	8002e5e <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8007f36:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007f3a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007f40:	2300      	movs	r3, #0
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007f44:	2300      	movs	r3, #0
 8007f46:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007f48:	230c      	movs	r3, #12
 8007f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007f50:	2300      	movs	r3, #0
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8007f54:	f107 031c 	add.w	r3, r7, #28
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4807      	ldr	r0, [pc, #28]	; (8007f78 <MX_USART2_UART_Init+0x9c>)
 8007f5c:	f7fb fd94 	bl	8003a88 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8007f60:	4805      	ldr	r0, [pc, #20]	; (8007f78 <MX_USART2_UART_Init+0x9c>)
 8007f62:	f7ff ff75 	bl	8007e50 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8007f66:	4804      	ldr	r0, [pc, #16]	; (8007f78 <MX_USART2_UART_Init+0x9c>)
 8007f68:	f7ff ff62 	bl	8007e30 <LL_USART_Enable>

}
 8007f6c:	bf00      	nop
 8007f6e:	3738      	adds	r7, #56	; 0x38
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	40020000 	.word	0x40020000
 8007f78:	40004400 	.word	0x40004400

08007f7c <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	4b04      	ldr	r3, [pc, #16]	; (8007fa0 <_ZNSt7__cxx119to_stringEi+0x24>)
 8007f8e:	2210      	movs	r2, #16
 8007f90:	4904      	ldr	r1, [pc, #16]	; (8007fa4 <_ZNSt7__cxx119to_stringEi+0x28>)
 8007f92:	f7fb fea6 	bl	8003ce2 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	0800c964 	.word	0x0800c964
 8007fa4:	0800b31d 	.word	0x0800b31d

08007fa8 <cppwrapper>:
//unsigned int debugCount = DEBUG_COUNT;

MotorCtrl M_Ctrl;


void cppwrapper(void){
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b094      	sub	sp, #80	; 0x50
 8007fac:	af00      	add	r7, sp, #0

	M_Ctrl.InitSystem();
 8007fae:	481f      	ldr	r0, [pc, #124]	; (800802c <cppwrapper+0x84>)
 8007fb0:	f7fc fc17 	bl	80047e2 <_ZN9MotorCtrl10InitSystemEv>

	//debug
	std::string DbgStr;
 8007fb4:	1d3b      	adds	r3, r7, #4
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 fb01 	bl	80095be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	int Dbgint=3456;
 8007fbc:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 8007fc0:	64fb      	str	r3, [r7, #76]	; 0x4c

	DbgStr.append("testnum:");
 8007fc2:	1d3b      	adds	r3, r7, #4
 8007fc4:	491a      	ldr	r1, [pc, #104]	; (8008030 <cppwrapper+0x88>)
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f001 fb2e 	bl	8009628 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
	DbgStr.append(std::to_string(Dbgint));
 8007fcc:	f107 031c 	add.w	r3, r7, #28
 8007fd0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff ffd2 	bl	8007f7c <_ZNSt7__cxx119to_stringEi>
 8007fd8:	f107 021c 	add.w	r2, r7, #28
 8007fdc:	1d3b      	adds	r3, r7, #4
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f001 fb1b 	bl	800961c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8007fe6:	f107 031c 	add.w	r3, r7, #28
 8007fea:	4618      	mov	r0, r3
 8007fec:	f001 faee 	bl	80095cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	DbgStr.append("\r\n");
 8007ff0:	1d3b      	adds	r3, r7, #4
 8007ff2:	4910      	ldr	r1, [pc, #64]	; (8008034 <cppwrapper+0x8c>)
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 fb17 	bl	8009628 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
	M_Ctrl.DbgUart(DbgStr);
 8007ffa:	1d3a      	adds	r2, r7, #4
 8007ffc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f001 fb2a 	bl	800965c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008008:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800800c:	4619      	mov	r1, r3
 800800e:	4807      	ldr	r0, [pc, #28]	; (800802c <cppwrapper+0x84>)
 8008010:	f7fc ffe2 	bl	8004fd8 <_ZN9MotorCtrl7DbgUartENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008014:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008018:	4618      	mov	r0, r3
 800801a:	f001 fad7 	bl	80095cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	M_Ctrl.InitMotorInfo();
 800801e:	4803      	ldr	r0, [pc, #12]	; (800802c <cppwrapper+0x84>)
 8008020:	f7fc ff06 	bl	8004e30 <_ZN9MotorCtrl13InitMotorInfoEv>
	M_Ctrl.InitPWM();
 8008024:	4801      	ldr	r0, [pc, #4]	; (800802c <cppwrapper+0x84>)
 8008026:	f7fc fbed 	bl	8004804 <_ZN9MotorCtrl7InitPWMEv>

	while(1){}
 800802a:	e7fe      	b.n	800802a <cppwrapper+0x82>
 800802c:	200001fc 	.word	0x200001fc
 8008030:	0800c968 	.word	0x0800c968
 8008034:	0800c974 	.word	0x0800c974

08008038 <_Z41__static_initialization_and_destruction_0ii>:
}


void BtnAct(void) { //割り込みラッパ
	M_Ctrl.BtnAct();
}
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d107      	bne.n	8008058 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800804e:	4293      	cmp	r3, r2
 8008050:	d102      	bne.n	8008058 <_Z41__static_initialization_and_destruction_0ii+0x20>
MotorCtrl M_Ctrl;
 8008052:	4809      	ldr	r0, [pc, #36]	; (8008078 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008054:	f7fc f93c 	bl	80042d0 <_ZN9MotorCtrlC1Ev>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d107      	bne.n	800806e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008064:	4293      	cmp	r3, r2
 8008066:	d102      	bne.n	800806e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008068:	4803      	ldr	r0, [pc, #12]	; (8008078 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800806a:	f7fc f963 	bl	8004334 <_ZN9MotorCtrlD1Ev>
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	200001fc 	.word	0x200001fc

0800807c <_GLOBAL__sub_I_M_Ctrl>:
 800807c:	b580      	push	{r7, lr}
 800807e:	af00      	add	r7, sp, #0
 8008080:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008084:	2001      	movs	r0, #1
 8008086:	f7ff ffd7 	bl	8008038 <_Z41__static_initialization_and_destruction_0ii>
 800808a:	bd80      	pop	{r7, pc}

0800808c <_GLOBAL__sub_D_M_Ctrl>:
 800808c:	b580      	push	{r7, lr}
 800808e:	af00      	add	r7, sp, #0
 8008090:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008094:	2000      	movs	r0, #0
 8008096:	f7ff ffcf 	bl	8008038 <_Z41__static_initialization_and_destruction_0ii>
 800809a:	bd80      	pop	{r7, pc}

0800809c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800809c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80080d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80080a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80080a2:	e003      	b.n	80080ac <LoopCopyDataInit>

080080a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80080a4:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80080a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80080a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80080aa:	3104      	adds	r1, #4

080080ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80080ac:	480b      	ldr	r0, [pc, #44]	; (80080dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80080ae:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80080b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80080b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80080b4:	d3f6      	bcc.n	80080a4 <CopyDataInit>
  ldr  r2, =_sbss
 80080b6:	4a0b      	ldr	r2, [pc, #44]	; (80080e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80080b8:	e002      	b.n	80080c0 <LoopFillZerobss>

080080ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80080ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80080bc:	f842 3b04 	str.w	r3, [r2], #4

080080c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80080c0:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80080c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80080c4:	d3f9      	bcc.n	80080ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80080c6:	f7ff fba7 	bl	8007818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80080ca:	f002 fb43 	bl	800a754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80080ce:	f7ff fa21 	bl	8007514 <main>
  bx  lr    
 80080d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80080d4:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 80080d8:	0800cef8 	.word	0x0800cef8
  ldr  r0, =_sdata
 80080dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80080e0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80080e4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80080e8:	2000329c 	.word	0x2000329c

080080ec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80080ec:	e7fe      	b.n	80080ec <CAN1_RX0_IRQHandler>
	...

080080f0 <__NVIC_GetPriorityGrouping>:
{
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80080f4:	4b04      	ldr	r3, [pc, #16]	; (8008108 <__NVIC_GetPriorityGrouping+0x18>)
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	0a1b      	lsrs	r3, r3, #8
 80080fa:	f003 0307 	and.w	r3, r3, #7
}
 80080fe:	4618      	mov	r0, r3
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	e000ed00 	.word	0xe000ed00

0800810c <__NVIC_EnableIRQ>:
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800811a:	2b00      	cmp	r3, #0
 800811c:	db0d      	blt.n	800813a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800811e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f003 021f 	and.w	r2, r3, #31
 8008128:	4907      	ldr	r1, [pc, #28]	; (8008148 <__NVIC_EnableIRQ+0x3c>)
 800812a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800812e:	095b      	lsrs	r3, r3, #5
 8008130:	2001      	movs	r0, #1
 8008132:	fa00 f202 	lsl.w	r2, r0, r2
 8008136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	e000e100 	.word	0xe000e100

0800814c <__NVIC_SetPriority>:
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	6039      	str	r1, [r7, #0]
 8008156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800815c:	2b00      	cmp	r3, #0
 800815e:	db0c      	blt.n	800817a <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	4a0e      	ldr	r2, [pc, #56]	; (80081a0 <__NVIC_SetPriority+0x54>)
 8008166:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800816a:	4608      	mov	r0, r1
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	b2d9      	uxtb	r1, r3
 8008170:	1813      	adds	r3, r2, r0
 8008172:	460a      	mov	r2, r1
 8008174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008178:	e00c      	b.n	8008194 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	b2da      	uxtb	r2, r3
 800817e:	4909      	ldr	r1, [pc, #36]	; (80081a4 <__NVIC_SetPriority+0x58>)
 8008180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	3b04      	subs	r3, #4
 800818c:	0112      	lsls	r2, r2, #4
 800818e:	b2d2      	uxtb	r2, r2
 8008190:	440b      	add	r3, r1
 8008192:	761a      	strb	r2, [r3, #24]
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	e000e100 	.word	0xe000e100
 80081a4:	e000ed00 	.word	0xe000ed00

080081a8 <NVIC_EncodePriority>:
{
 80081a8:	b480      	push	{r7}
 80081aa:	b089      	sub	sp, #36	; 0x24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	f1c3 0307 	rsb	r3, r3, #7
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	bf28      	it	cs
 80081c6:	2304      	movcs	r3, #4
 80081c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	3304      	adds	r3, #4
 80081ce:	2b06      	cmp	r3, #6
 80081d0:	d902      	bls.n	80081d8 <NVIC_EncodePriority+0x30>
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	3b03      	subs	r3, #3
 80081d6:	e000      	b.n	80081da <NVIC_EncodePriority+0x32>
 80081d8:	2300      	movs	r3, #0
 80081da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	2201      	movs	r2, #1
 80081e0:	fa02 f303 	lsl.w	r3, r2, r3
 80081e4:	1e5a      	subs	r2, r3, #1
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	401a      	ands	r2, r3
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2101      	movs	r1, #1
 80081f2:	fa01 f303 	lsl.w	r3, r1, r3
 80081f6:	1e59      	subs	r1, r3, #1
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	400b      	ands	r3, r1
         );
 80081fc:	4313      	orrs	r3, r2
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3724      	adds	r7, #36	; 0x24
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <LL_ADC_REG_SetSequencerRanks>:
{
 800820a:	b490      	push	{r4, r7}
 800820c:	b086      	sub	sp, #24
 800820e:	af00      	add	r7, sp, #0
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	332c      	adds	r3, #44	; 0x2c
 800821a:	4619      	mov	r1, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008222:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008226:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	fa92 f2a2 	rbit	r2, r2
 800822e:	613a      	str	r2, [r7, #16]
  return result;
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	fab2 f282 	clz	r2, r2
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	40d3      	lsrs	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	440b      	add	r3, r1
 800823e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8008240:	6822      	ldr	r2, [r4, #0]
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f003 031f 	and.w	r3, r3, #31
 8008248:	211f      	movs	r1, #31
 800824a:	fa01 f303 	lsl.w	r3, r1, r3
 800824e:	43db      	mvns	r3, r3
 8008250:	401a      	ands	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f003 011f 	and.w	r1, r3, #31
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f003 031f 	and.w	r3, r3, #31
 800825e:	fa01 f303 	lsl.w	r3, r1, r3
 8008262:	4313      	orrs	r3, r2
 8008264:	6023      	str	r3, [r4, #0]
}
 8008266:	bf00      	nop
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bc90      	pop	{r4, r7}
 800826e:	4770      	bx	lr

08008270 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	431a      	orrs	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	609a      	str	r2, [r3, #8]
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <LL_ADC_INJ_SetSequencerRanks>:
{
 8008296:	b480      	push	{r7}
 8008298:	b087      	sub	sp, #28
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	0d1b      	lsrs	r3, r3, #20
 80082a8:	f003 0303 	and.w	r3, r3, #3
 80082ac:	3301      	adds	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(ADCx->JSQR,
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	b2d9      	uxtb	r1, r3
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	1acb      	subs	r3, r1, r3
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	3303      	adds	r3, #3
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	4619      	mov	r1, r3
 80082c6:	460b      	mov	r3, r1
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	440b      	add	r3, r1
 80082cc:	211f      	movs	r1, #31
 80082ce:	fa01 f303 	lsl.w	r3, r1, r3
 80082d2:	43db      	mvns	r3, r3
 80082d4:	401a      	ands	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f003 011f 	and.w	r1, r3, #31
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	b2d8      	uxtb	r0, r3
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	1ac3      	subs	r3, r0, r3
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	3303      	adds	r3, #3
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	4618      	mov	r0, r3
 80082ee:	4603      	mov	r3, r0
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4403      	add	r3, r0
 80082f4:	fa01 f303 	lsl.w	r3, r1, r3
 80082f8:	431a      	orrs	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80082fe:	bf00      	nop
 8008300:	371c      	adds	r7, #28
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <LL_ADC_INJ_SetOffset>:
{
 800830a:	b490      	push	{r4, r7}
 800830c:	b086      	sub	sp, #24
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3314      	adds	r3, #20
 800831a:	4619      	mov	r1, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008322:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008326:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	fa92 f2a2 	rbit	r2, r2
 800832e:	613a      	str	r2, [r7, #16]
  return result;
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	fab2 f282 	clz	r2, r2
 8008336:	b2d2      	uxtb	r2, r2
 8008338:	40d3      	lsrs	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	440b      	add	r3, r1
 800833e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008346:	f023 030f 	bic.w	r3, r3, #15
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	4313      	orrs	r3, r2
 800834e:	6023      	str	r3, [r4, #0]
}
 8008350:	bf00      	nop
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bc90      	pop	{r4, r7}
 8008358:	4770      	bx	lr

0800835a <LL_ADC_SetChannelSamplingTime>:
{
 800835a:	b490      	push	{r4, r7}
 800835c:	b08a      	sub	sp, #40	; 0x28
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	330c      	adds	r3, #12
 800836a:	4619      	mov	r1, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008372:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008376:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	fa92 f2a2 	rbit	r2, r2
 800837e:	613a      	str	r2, [r7, #16]
  return result;
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	fab2 f282 	clz	r2, r2
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	40d3      	lsrs	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	440b      	add	r3, r1
 800838e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8008390:	6822      	ldr	r2, [r4, #0]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8008398:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800839c:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800839e:	69f9      	ldr	r1, [r7, #28]
 80083a0:	fa91 f1a1 	rbit	r1, r1
 80083a4:	61b9      	str	r1, [r7, #24]
  return result;
 80083a6:	69b9      	ldr	r1, [r7, #24]
 80083a8:	fab1 f181 	clz	r1, r1
 80083ac:	b2c9      	uxtb	r1, r1
 80083ae:	40cb      	lsrs	r3, r1
 80083b0:	2107      	movs	r1, #7
 80083b2:	fa01 f303 	lsl.w	r3, r1, r3
 80083b6:	43db      	mvns	r3, r3
 80083b8:	401a      	ands	r2, r3
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80083c0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80083c4:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083c8:	fa91 f1a1 	rbit	r1, r1
 80083cc:	6239      	str	r1, [r7, #32]
  return result;
 80083ce:	6a39      	ldr	r1, [r7, #32]
 80083d0:	fab1 f181 	clz	r1, r1
 80083d4:	b2c9      	uxtb	r1, r1
 80083d6:	40cb      	lsrs	r3, r1
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	fa01 f303 	lsl.w	r3, r1, r3
 80083de:	4313      	orrs	r3, r2
 80083e0:	6023      	str	r3, [r4, #0]
}
 80083e2:	bf00      	nop
 80083e4:	3728      	adds	r7, #40	; 0x28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bc90      	pop	{r4, r7}
 80083ea:	4770      	bx	lr

080083ec <LL_ADC_INJ_StartConversionExtTrig>:
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	689a      	ldr	r2, [r3, #8]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	431a      	orrs	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	609a      	str	r2, [r3, #8]
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <LL_ADC_DisableIT_EOCS>:
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f023 0220 	bic.w	r2, r3, #32
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	605a      	str	r2, [r3, #4]
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <LL_ADC_DisableIT_JEOS>:
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	605a      	str	r2, [r3, #4]
}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
	...

08008450 <LL_AHB1_GRP1_EnableClock>:
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008458:	4b08      	ldr	r3, [pc, #32]	; (800847c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800845a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4907      	ldr	r1, [pc, #28]	; (800847c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008460:	4313      	orrs	r3, r2
 8008462:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008464:	4b05      	ldr	r3, [pc, #20]	; (800847c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4013      	ands	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800846e:	68fb      	ldr	r3, [r7, #12]
}
 8008470:	bf00      	nop
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	40023800 	.word	0x40023800

08008480 <LL_APB2_GRP1_EnableClock>:
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8008488:	4b08      	ldr	r3, [pc, #32]	; (80084ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800848a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4907      	ldr	r1, [pc, #28]	; (80084ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8008490:	4313      	orrs	r3, r2
 8008492:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8008496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4013      	ands	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800849e:	68fb      	ldr	r3, [r7, #12]
}
 80084a0:	bf00      	nop
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	40023800 	.word	0x40023800

080084b0 <_ZN7ADCInit4InitEv>:
void MX_ADC3_Init(void);
ADC_HandleTypeDef hadc3;
//void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle);
//void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle);

void ADCInit::Init() {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 80084b4:	f000 f806 	bl	80084c4 <_Z12MX_ADC1_Initv>
	MX_ADC2_Init();
 80084b8:	f000 f91e 	bl	80086f8 <_Z12MX_ADC2_Initv>
	MX_ADC3_Init();
 80084bc:	f000 fa24 	bl	8008908 <_Z12MX_ADC3_Initv>
}
 80084c0:	bf00      	nop
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <_Z12MX_ADC1_Initv>:



/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b096      	sub	sp, #88	; 0x58
 80084c8:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80084ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	605a      	str	r2, [r3, #4]
 80084d4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80084d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	605a      	str	r2, [r3, #4]
 80084e0:	609a      	str	r2, [r3, #8]
 80084e2:	60da      	str	r2, [r3, #12]
 80084e4:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80084e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	605a      	str	r2, [r3, #4]
 80084f0:	609a      	str	r2, [r3, #8]
 80084f2:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 80084f4:	f107 0318 	add.w	r3, r7, #24
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	605a      	str	r2, [r3, #4]
 80084fe:	609a      	str	r2, [r3, #8]
 8008500:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008502:	463b      	mov	r3, r7
 8008504:	2200      	movs	r2, #0
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	605a      	str	r2, [r3, #4]
 800850a:	609a      	str	r2, [r3, #8]
 800850c:	60da      	str	r2, [r3, #12]
 800850e:	611a      	str	r2, [r3, #16]
 8008510:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8008512:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008516:	f7ff ffb3 	bl	8008480 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800851a:	2004      	movs	r0, #4
 800851c:	f7ff ff98 	bl	8008450 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008520:	2001      	movs	r0, #1
 8008522:	f7ff ff95 	bl	8008450 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8008526:	2307      	movs	r3, #7
 8008528:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800852a:	2303      	movs	r3, #3
 800852c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800852e:	2300      	movs	r3, #0
 8008530:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008532:	463b      	mov	r3, r7
 8008534:	4619      	mov	r1, r3
 8008536:	4869      	ldr	r0, [pc, #420]	; (80086dc <_Z12MX_ADC1_Initv+0x218>)
 8008538:	f7fa fc91 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 800853c:	2303      	movs	r3, #3
 800853e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008540:	2303      	movs	r3, #3
 8008542:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008544:	2300      	movs	r3, #0
 8008546:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008548:	463b      	mov	r3, r7
 800854a:	4619      	mov	r1, r3
 800854c:	4864      	ldr	r0, [pc, #400]	; (80086e0 <_Z12MX_ADC1_Initv+0x21c>)
 800854e:	f7fa fc86 	bl	8002e5e <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8008552:	f7ff fdcd 	bl	80080f0 <__NVIC_GetPriorityGrouping>
 8008556:	4603      	mov	r3, r0
 8008558:	2200      	movs	r2, #0
 800855a:	2102      	movs	r1, #2
 800855c:	4618      	mov	r0, r3
 800855e:	f7ff fe23 	bl	80081a8 <NVIC_EncodePriority>
 8008562:	4603      	mov	r3, r0
 8008564:	4619      	mov	r1, r3
 8008566:	2012      	movs	r0, #18
 8008568:	f7ff fdf0 	bl	800814c <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 800856c:	2012      	movs	r0, #18
 800856e:	f7ff fdcd 	bl	800810c <__NVIC_EnableIRQ>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8008572:	2300      	movs	r3, #0
 8008574:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8008576:	2300      	movs	r3, #0
 8008578:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800857a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800857e:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8008580:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008584:	4619      	mov	r1, r3
 8008586:	4857      	ldr	r0, [pc, #348]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 8008588:	f7fa f99c 	bl	80028c4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800858c:	2300      	movs	r3, #0
 800858e:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8008590:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008594:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8008596:	2300      	movs	r3, #0
 8008598:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800859a:	2300      	movs	r3, #0
 800859c:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800859e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085a2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80085a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80085a8:	4619      	mov	r1, r3
 80085aa:	484e      	ldr	r0, [pc, #312]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 80085ac:	f7fa f9b6 	bl	800291c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80085b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80085b4:	484b      	ldr	r0, [pc, #300]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 80085b6:	f7ff fe5b 	bl	8008270 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 80085ba:	484a      	ldr	r0, [pc, #296]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 80085bc:	f7ff ff27 	bl	800840e <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80085c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085c4:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80085c6:	2300      	movs	r3, #0
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80085ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085ce:	4619      	mov	r1, r3
 80085d0:	4845      	ldr	r0, [pc, #276]	; (80086e8 <_Z12MX_ADC1_Initv+0x224>)
 80085d2:	f7fa f92f 	bl	8002834 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80085d6:	4a45      	ldr	r2, [pc, #276]	; (80086ec <_Z12MX_ADC1_Initv+0x228>)
 80085d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085dc:	4841      	ldr	r0, [pc, #260]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 80085de:	f7ff fe14 	bl	800820a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 80085e2:	2202      	movs	r2, #2
 80085e4:	4941      	ldr	r1, [pc, #260]	; (80086ec <_Z12MX_ADC1_Initv+0x228>)
 80085e6:	483f      	ldr	r0, [pc, #252]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 80085e8:	f7ff feb7 	bl	800835a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 80085ec:	4a40      	ldr	r2, [pc, #256]	; (80086f0 <_Z12MX_ADC1_Initv+0x22c>)
 80085ee:	f240 2105 	movw	r1, #517	; 0x205
 80085f2:	483c      	ldr	r0, [pc, #240]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 80085f4:	f7ff fe09 	bl	800820a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 80085f8:	2202      	movs	r2, #2
 80085fa:	493d      	ldr	r1, [pc, #244]	; (80086f0 <_Z12MX_ADC1_Initv+0x22c>)
 80085fc:	4839      	ldr	r0, [pc, #228]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 80085fe:	f7ff feac 	bl	800835a <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8008602:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008606:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8008608:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800860c:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 800860e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008612:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8008614:	2300      	movs	r3, #0
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8008618:	f107 0318 	add.w	r3, r7, #24
 800861c:	4619      	mov	r1, r3
 800861e:	4831      	ldr	r0, [pc, #196]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 8008620:	f7fa f9c4 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8008624:	482f      	ldr	r0, [pc, #188]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 8008626:	f7ff ff02 	bl	800842e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 800862a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800862e:	2101      	movs	r1, #1
 8008630:	482c      	ldr	r0, [pc, #176]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 8008632:	f7ff fe30 	bl	8008296 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8008636:	2200      	movs	r2, #0
 8008638:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800863c:	4829      	ldr	r0, [pc, #164]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 800863e:	f7ff fe8c 	bl	800835a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 8008642:	2200      	movs	r2, #0
 8008644:	2101      	movs	r1, #1
 8008646:	4827      	ldr	r0, [pc, #156]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 8008648:	f7ff fe5f 	bl	800830a <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 800864c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8008650:	4824      	ldr	r0, [pc, #144]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 8008652:	f7ff fecb 	bl	80083ec <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8008656:	f107 0318 	add.w	r3, r7, #24
 800865a:	4619      	mov	r1, r3
 800865c:	4821      	ldr	r0, [pc, #132]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 800865e:	f7fa f9a5 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8008662:	4820      	ldr	r0, [pc, #128]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 8008664:	f7ff fee3 	bl	800842e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8008668:	4a22      	ldr	r2, [pc, #136]	; (80086f4 <_Z12MX_ADC1_Initv+0x230>)
 800866a:	f241 1102 	movw	r1, #4354	; 0x1102
 800866e:	481d      	ldr	r0, [pc, #116]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 8008670:	f7ff fe11 	bl	8008296 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8008674:	2200      	movs	r2, #0
 8008676:	491f      	ldr	r1, [pc, #124]	; (80086f4 <_Z12MX_ADC1_Initv+0x230>)
 8008678:	481a      	ldr	r0, [pc, #104]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 800867a:	f7ff fe6e 	bl	800835a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 800867e:	2200      	movs	r2, #0
 8008680:	f241 1102 	movw	r1, #4354	; 0x1102
 8008684:	4817      	ldr	r0, [pc, #92]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 8008686:	f7ff fe40 	bl	800830a <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 800868a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800868e:	4815      	ldr	r0, [pc, #84]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 8008690:	f7ff feac 	bl	80083ec <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8008694:	f107 0318 	add.w	r3, r7, #24
 8008698:	4619      	mov	r1, r3
 800869a:	4812      	ldr	r0, [pc, #72]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 800869c:	f7fa f986 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 80086a0:	4810      	ldr	r0, [pc, #64]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 80086a2:	f7ff fec4 	bl	800842e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 80086a6:	220a      	movs	r2, #10
 80086a8:	f242 2103 	movw	r1, #8707	; 0x2203
 80086ac:	480d      	ldr	r0, [pc, #52]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 80086ae:	f7ff fdf2 	bl	8008296 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 80086b2:	2200      	movs	r2, #0
 80086b4:	210a      	movs	r1, #10
 80086b6:	480b      	ldr	r0, [pc, #44]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 80086b8:	f7ff fe4f 	bl	800835a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 80086bc:	2200      	movs	r2, #0
 80086be:	f242 2103 	movw	r1, #8707	; 0x2203
 80086c2:	4808      	ldr	r0, [pc, #32]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 80086c4:	f7ff fe21 	bl	800830a <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 80086c8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80086cc:	4805      	ldr	r0, [pc, #20]	; (80086e4 <_Z12MX_ADC1_Initv+0x220>)
 80086ce:	f7ff fe8d 	bl	80083ec <LL_ADC_INJ_StartConversionExtTrig>

}
 80086d2:	bf00      	nop
 80086d4:	3758      	adds	r7, #88	; 0x58
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	40020800 	.word	0x40020800
 80086e0:	40020000 	.word	0x40020000
 80086e4:	40012000 	.word	0x40012000
 80086e8:	40012300 	.word	0x40012300
 80086ec:	02300001 	.word	0x02300001
 80086f0:	0060000c 	.word	0x0060000c
 80086f4:	0030000b 	.word	0x0030000b

080086f8 <_Z12MX_ADC2_Initv>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b092      	sub	sp, #72	; 0x48
 80086fc:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80086fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008702:	2200      	movs	r2, #0
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	605a      	str	r2, [r3, #4]
 8008708:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800870a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	605a      	str	r2, [r3, #4]
 8008714:	609a      	str	r2, [r3, #8]
 8008716:	60da      	str	r2, [r3, #12]
 8008718:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 800871a:	f107 0318 	add.w	r3, r7, #24
 800871e:	2200      	movs	r2, #0
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	605a      	str	r2, [r3, #4]
 8008724:	609a      	str	r2, [r3, #8]
 8008726:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008728:	463b      	mov	r3, r7
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	605a      	str	r2, [r3, #4]
 8008730:	609a      	str	r2, [r3, #8]
 8008732:	60da      	str	r2, [r3, #12]
 8008734:	611a      	str	r2, [r3, #16]
 8008736:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8008738:	f44f 7000 	mov.w	r0, #512	; 0x200
 800873c:	f7ff fea0 	bl	8008480 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008740:	2004      	movs	r0, #4
 8008742:	f7ff fe85 	bl	8008450 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008746:	2001      	movs	r0, #1
 8008748:	f7ff fe82 	bl	8008450 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800874c:	2002      	movs	r0, #2
 800874e:	f7ff fe7f 	bl	8008450 <LL_AHB1_GRP1_EnableClock>
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0
  PB1   ------> ADC2_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8008752:	2303      	movs	r3, #3
 8008754:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008756:	2303      	movs	r3, #3
 8008758:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800875a:	2300      	movs	r3, #0
 800875c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800875e:	463b      	mov	r3, r7
 8008760:	4619      	mov	r1, r3
 8008762:	4863      	ldr	r0, [pc, #396]	; (80088f0 <_Z12MX_ADC2_Initv+0x1f8>)
 8008764:	f7fa fb7b 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8008768:	2301      	movs	r3, #1
 800876a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800876c:	2303      	movs	r3, #3
 800876e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008770:	2300      	movs	r3, #0
 8008772:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008774:	463b      	mov	r3, r7
 8008776:	4619      	mov	r1, r3
 8008778:	485e      	ldr	r0, [pc, #376]	; (80088f4 <_Z12MX_ADC2_Initv+0x1fc>)
 800877a:	f7fa fb70 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800877e:	2302      	movs	r3, #2
 8008780:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008782:	2303      	movs	r3, #3
 8008784:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008786:	2300      	movs	r3, #0
 8008788:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800878a:	463b      	mov	r3, r7
 800878c:	4619      	mov	r1, r3
 800878e:	485a      	ldr	r0, [pc, #360]	; (80088f8 <_Z12MX_ADC2_Initv+0x200>)
 8008790:	f7fa fb65 	bl	8002e5e <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8008794:	f7ff fcac 	bl	80080f0 <__NVIC_GetPriorityGrouping>
 8008798:	4603      	mov	r3, r0
 800879a:	2200      	movs	r2, #0
 800879c:	2102      	movs	r1, #2
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff fd02 	bl	80081a8 <NVIC_EncodePriority>
 80087a4:	4603      	mov	r3, r0
 80087a6:	4619      	mov	r1, r3
 80087a8:	2012      	movs	r0, #18
 80087aa:	f7ff fccf 	bl	800814c <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 80087ae:	2012      	movs	r0, #18
 80087b0:	f7ff fcac 	bl	800810c <__NVIC_EnableIRQ>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80087b4:	2300      	movs	r3, #0
 80087b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80087b8:	2300      	movs	r3, #0
 80087ba:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80087bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087c0:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 80087c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80087c6:	4619      	mov	r1, r3
 80087c8:	484c      	ldr	r0, [pc, #304]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 80087ca:	f7fa f87b 	bl	80028c4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80087ce:	2300      	movs	r3, #0
 80087d0:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80087d2:	2300      	movs	r3, #0
 80087d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80087d6:	2300      	movs	r3, #0
 80087d8:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80087da:	2300      	movs	r3, #0
 80087dc:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80087de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087e2:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 80087e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087e8:	4619      	mov	r1, r3
 80087ea:	4844      	ldr	r0, [pc, #272]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 80087ec:	f7fa f896 	bl	800291c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80087f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087f4:	4841      	ldr	r0, [pc, #260]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 80087f6:	f7ff fd3b 	bl	8008270 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 80087fa:	4840      	ldr	r0, [pc, #256]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 80087fc:	f7ff fe07 	bl	800840e <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_9);
 8008800:	4a3f      	ldr	r2, [pc, #252]	; (8008900 <_Z12MX_ADC2_Initv+0x208>)
 8008802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008806:	483d      	ldr	r0, [pc, #244]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 8008808:	f7ff fcff 	bl	800820a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_3CYCLES);
 800880c:	2200      	movs	r2, #0
 800880e:	493c      	ldr	r1, [pc, #240]	; (8008900 <_Z12MX_ADC2_Initv+0x208>)
 8008810:	483a      	ldr	r0, [pc, #232]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 8008812:	f7ff fda2 	bl	800835a <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8008816:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800881a:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 800881c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008820:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8008822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008826:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8008828:	2300      	movs	r3, #0
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 800882c:	f107 0318 	add.w	r3, r7, #24
 8008830:	4619      	mov	r1, r3
 8008832:	4832      	ldr	r0, [pc, #200]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 8008834:	f7fa f8ba 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8008838:	4830      	ldr	r0, [pc, #192]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 800883a:	f7ff fdf8 	bl	800842e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 800883e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008842:	2101      	movs	r1, #1
 8008844:	482d      	ldr	r0, [pc, #180]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 8008846:	f7ff fd26 	bl	8008296 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 800884a:	2200      	movs	r2, #0
 800884c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008850:	482a      	ldr	r0, [pc, #168]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 8008852:	f7ff fd82 	bl	800835a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 8008856:	2200      	movs	r2, #0
 8008858:	2101      	movs	r1, #1
 800885a:	4828      	ldr	r0, [pc, #160]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 800885c:	f7ff fd55 	bl	800830a <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8008860:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8008864:	4825      	ldr	r0, [pc, #148]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 8008866:	f7ff fdc1 	bl	80083ec <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 800886a:	f107 0318 	add.w	r3, r7, #24
 800886e:	4619      	mov	r1, r3
 8008870:	4822      	ldr	r0, [pc, #136]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 8008872:	f7fa f89b 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8008876:	4821      	ldr	r0, [pc, #132]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 8008878:	f7ff fdd9 	bl	800842e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 800887c:	4a21      	ldr	r2, [pc, #132]	; (8008904 <_Z12MX_ADC2_Initv+0x20c>)
 800887e:	f241 1102 	movw	r1, #4354	; 0x1102
 8008882:	481e      	ldr	r0, [pc, #120]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 8008884:	f7ff fd07 	bl	8008296 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8008888:	2200      	movs	r2, #0
 800888a:	491e      	ldr	r1, [pc, #120]	; (8008904 <_Z12MX_ADC2_Initv+0x20c>)
 800888c:	481b      	ldr	r0, [pc, #108]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 800888e:	f7ff fd64 	bl	800835a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 8008892:	2200      	movs	r2, #0
 8008894:	f241 1102 	movw	r1, #4354	; 0x1102
 8008898:	4818      	ldr	r0, [pc, #96]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 800889a:	f7ff fd36 	bl	800830a <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 800889e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80088a2:	4816      	ldr	r0, [pc, #88]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 80088a4:	f7ff fda2 	bl	80083ec <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 80088a8:	f107 0318 	add.w	r3, r7, #24
 80088ac:	4619      	mov	r1, r3
 80088ae:	4813      	ldr	r0, [pc, #76]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 80088b0:	f7fa f87c 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 80088b4:	4811      	ldr	r0, [pc, #68]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 80088b6:	f7ff fdba 	bl	800842e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 80088ba:	220a      	movs	r2, #10
 80088bc:	f242 2103 	movw	r1, #8707	; 0x2203
 80088c0:	480e      	ldr	r0, [pc, #56]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 80088c2:	f7ff fce8 	bl	8008296 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 80088c6:	2200      	movs	r2, #0
 80088c8:	210a      	movs	r1, #10
 80088ca:	480c      	ldr	r0, [pc, #48]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 80088cc:	f7ff fd45 	bl	800835a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 80088d0:	2200      	movs	r2, #0
 80088d2:	f242 2103 	movw	r1, #8707	; 0x2203
 80088d6:	4809      	ldr	r0, [pc, #36]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 80088d8:	f7ff fd17 	bl	800830a <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 80088dc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80088e0:	4806      	ldr	r0, [pc, #24]	; (80088fc <_Z12MX_ADC2_Initv+0x204>)
 80088e2:	f7ff fd83 	bl	80083ec <LL_ADC_INJ_StartConversionExtTrig>

}
 80088e6:	bf00      	nop
 80088e8:	3748      	adds	r7, #72	; 0x48
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	40020800 	.word	0x40020800
 80088f4:	40020000 	.word	0x40020000
 80088f8:	40020400 	.word	0x40020400
 80088fc:	40012100 	.word	0x40012100
 8008900:	03b00009 	.word	0x03b00009
 8008904:	0030000b 	.word	0x0030000b

08008908 <_Z12MX_ADC3_Initv>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800890e:	463b      	mov	r3, r7
 8008910:	2200      	movs	r2, #0
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	605a      	str	r2, [r3, #4]
 8008916:	609a      	str	r2, [r3, #8]
 8008918:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800891a:	4b26      	ldr	r3, [pc, #152]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 800891c:	4a26      	ldr	r2, [pc, #152]	; (80089b8 <_Z12MX_ADC3_Initv+0xb0>)
 800891e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008920:	4b24      	ldr	r3, [pc, #144]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 8008922:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008926:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8008928:	4b22      	ldr	r3, [pc, #136]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 800892a:	2200      	movs	r2, #0
 800892c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800892e:	4b21      	ldr	r3, [pc, #132]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 8008930:	2201      	movs	r2, #1
 8008932:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8008934:	4b1f      	ldr	r3, [pc, #124]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 8008936:	2200      	movs	r2, #0
 8008938:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800893a:	4b1e      	ldr	r3, [pc, #120]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008942:	4b1c      	ldr	r3, [pc, #112]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 8008944:	2200      	movs	r2, #0
 8008946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008948:	4b1a      	ldr	r3, [pc, #104]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 800894a:	4a1c      	ldr	r2, [pc, #112]	; (80089bc <_Z12MX_ADC3_Initv+0xb4>)
 800894c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800894e:	4b19      	ldr	r3, [pc, #100]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 8008950:	2200      	movs	r2, #0
 8008952:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8008954:	4b17      	ldr	r3, [pc, #92]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 8008956:	2201      	movs	r2, #1
 8008958:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800895a:	4b16      	ldr	r3, [pc, #88]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008962:	4b14      	ldr	r3, [pc, #80]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 8008964:	2201      	movs	r2, #1
 8008966:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8008968:	4812      	ldr	r0, [pc, #72]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 800896a:	f7f8 fb7f 	bl	800106c <HAL_ADC_Init>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	bf14      	ite	ne
 8008974:	2301      	movne	r3, #1
 8008976:	2300      	moveq	r3, #0
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <_Z12MX_ADC3_Initv+0x7a>
  {
	  ErrorHandler::ADC_Error_Handler();
 800897e:	f000 f81f 	bl	80089c0 <_ZN12ErrorHandler17ADC_Error_HandlerEv>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8008982:	230d      	movs	r3, #13
 8008984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008986:	2301      	movs	r3, #1
 8008988:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800898a:	2300      	movs	r3, #0
 800898c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800898e:	463b      	mov	r3, r7
 8008990:	4619      	mov	r1, r3
 8008992:	4808      	ldr	r0, [pc, #32]	; (80089b4 <_Z12MX_ADC3_Initv+0xac>)
 8008994:	f7f8 fd0c 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	bf14      	ite	ne
 800899e:	2301      	movne	r3, #1
 80089a0:	2300      	moveq	r3, #0
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <_Z12MX_ADC3_Initv+0xa4>
  {
	  ErrorHandler::ADC_Error_Handler();
 80089a8:	f000 f80a 	bl	80089c0 <_ZN12ErrorHandler17ADC_Error_HandlerEv>
  }

}
 80089ac:	bf00      	nop
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	20003240 	.word	0x20003240
 80089b8:	40012200 	.word	0x40012200
 80089bc:	0f000001 	.word	0x0f000001

080089c0 <_ZN12ErrorHandler17ADC_Error_HandlerEv>:

ErrorHandler::~ErrorHandler() {
	// TODO Auto-generated destructor stub
}

void ErrorHandler::ADC_Error_Handler(){
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
	//ADC Error Handler
	  /* USER CODE BEGIN Error_Handler_Debug */
	while(1){}
 80089c4:	e7fe      	b.n	80089c4 <_ZN12ErrorHandler17ADC_Error_HandlerEv+0x4>
	...

080089c8 <__NVIC_GetPriorityGrouping>:
{
 80089c8:	b480      	push	{r7}
 80089ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089cc:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <__NVIC_GetPriorityGrouping+0x18>)
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	0a1b      	lsrs	r3, r3, #8
 80089d2:	f003 0307 	and.w	r3, r3, #7
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	e000ed00 	.word	0xe000ed00

080089e4 <__NVIC_EnableIRQ>:
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	db0d      	blt.n	8008a12 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f003 021f 	and.w	r2, r3, #31
 8008a00:	4907      	ldr	r1, [pc, #28]	; (8008a20 <__NVIC_EnableIRQ+0x3c>)
 8008a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a06:	095b      	lsrs	r3, r3, #5
 8008a08:	2001      	movs	r0, #1
 8008a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8008a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a12:	bf00      	nop
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	e000e100 	.word	0xe000e100

08008a24 <__NVIC_SetPriority>:
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	6039      	str	r1, [r7, #0]
 8008a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	db0c      	blt.n	8008a52 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	4a0e      	ldr	r2, [pc, #56]	; (8008a78 <__NVIC_SetPriority+0x54>)
 8008a3e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8008a42:	4608      	mov	r0, r1
 8008a44:	011b      	lsls	r3, r3, #4
 8008a46:	b2d9      	uxtb	r1, r3
 8008a48:	1813      	adds	r3, r2, r0
 8008a4a:	460a      	mov	r2, r1
 8008a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a50:	e00c      	b.n	8008a6c <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	4909      	ldr	r1, [pc, #36]	; (8008a7c <__NVIC_SetPriority+0x58>)
 8008a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	f003 030f 	and.w	r3, r3, #15
 8008a62:	3b04      	subs	r3, #4
 8008a64:	0112      	lsls	r2, r2, #4
 8008a66:	b2d2      	uxtb	r2, r2
 8008a68:	440b      	add	r3, r1
 8008a6a:	761a      	strb	r2, [r3, #24]
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	e000e100 	.word	0xe000e100
 8008a7c:	e000ed00 	.word	0xe000ed00

08008a80 <NVIC_EncodePriority>:
{
 8008a80:	b480      	push	{r7}
 8008a82:	b089      	sub	sp, #36	; 0x24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	f1c3 0307 	rsb	r3, r3, #7
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	bf28      	it	cs
 8008a9e:	2304      	movcs	r3, #4
 8008aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	2b06      	cmp	r3, #6
 8008aa8:	d902      	bls.n	8008ab0 <NVIC_EncodePriority+0x30>
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	3b03      	subs	r3, #3
 8008aae:	e000      	b.n	8008ab2 <NVIC_EncodePriority+0x32>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8008abc:	1e5a      	subs	r2, r3, #1
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	401a      	ands	r2, r3
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2101      	movs	r1, #1
 8008aca:	fa01 f303 	lsl.w	r3, r1, r3
 8008ace:	1e59      	subs	r1, r3, #1
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	400b      	ands	r3, r1
         );
 8008ad4:	4313      	orrs	r3, r2
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3724      	adds	r7, #36	; 0x24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
	...

08008ae4 <LL_SYSCFG_SetEXTISource>:
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8008aee:	4a13      	ldr	r2, [pc, #76]	; (8008b3c <LL_SYSCFG_SetEXTISource+0x58>)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	3302      	adds	r3, #2
 8008af6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	0c1b      	lsrs	r3, r3, #16
 8008afe:	43db      	mvns	r3, r3
 8008b00:	ea02 0103 	and.w	r1, r2, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	0c1b      	lsrs	r3, r3, #16
 8008b08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	fa93 f3a3 	rbit	r3, r3
 8008b10:	60bb      	str	r3, [r7, #8]
  return result;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	fab3 f383 	clz	r3, r3
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	fa03 f202 	lsl.w	r2, r3, r2
 8008b22:	4806      	ldr	r0, [pc, #24]	; (8008b3c <LL_SYSCFG_SetEXTISource+0x58>)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	3302      	adds	r3, #2
 8008b2c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8008b30:	bf00      	nop
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	40013800 	.word	0x40013800

08008b40 <LL_GPIO_SetPinMode>:
{
 8008b40:	b480      	push	{r7}
 8008b42:	b089      	sub	sp, #36	; 0x24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	fa93 f3a3 	rbit	r3, r3
 8008b5a:	613b      	str	r3, [r7, #16]
  return result;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	fab3 f383 	clz	r3, r3
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	2103      	movs	r1, #3
 8008b68:	fa01 f303 	lsl.w	r3, r1, r3
 8008b6c:	43db      	mvns	r3, r3
 8008b6e:	401a      	ands	r2, r3
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	fa93 f3a3 	rbit	r3, r3
 8008b7a:	61bb      	str	r3, [r7, #24]
  return result;
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	fab3 f383 	clz	r3, r3
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	fa01 f303 	lsl.w	r3, r1, r3
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	601a      	str	r2, [r3, #0]
}
 8008b92:	bf00      	nop
 8008b94:	3724      	adds	r7, #36	; 0x24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <LL_GPIO_SetPinPull>:
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b089      	sub	sp, #36	; 0x24
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	fa93 f3a3 	rbit	r3, r3
 8008bb8:	613b      	str	r3, [r7, #16]
  return result;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	fab3 f383 	clz	r3, r3
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	2103      	movs	r1, #3
 8008bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bca:	43db      	mvns	r3, r3
 8008bcc:	401a      	ands	r2, r3
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	fa93 f3a3 	rbit	r3, r3
 8008bd8:	61bb      	str	r3, [r7, #24]
  return result;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	fab3 f383 	clz	r3, r3
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bea:	431a      	orrs	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	60da      	str	r2, [r3, #12]
}
 8008bf0:	bf00      	nop
 8008bf2:	3724      	adds	r7, #36	; 0x24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <LL_GPIO_ResetOutputPin>:
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	041a      	lsls	r2, r3, #16
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	619a      	str	r2, [r3, #24]
}
 8008c0e:	bf00      	nop
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
	...

08008c1c <LL_AHB1_GRP1_EnableClock>:
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008c24:	4b08      	ldr	r3, [pc, #32]	; (8008c48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4907      	ldr	r1, [pc, #28]	; (8008c48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008c30:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4013      	ands	r3, r2
 8008c38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
}
 8008c3c:	bf00      	nop
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	40023800 	.word	0x40023800

08008c4c <_ZN8GPIOInit4InitEv>:
	// TODO Auto-generated destructor stub
}

void MX_GPIO_Init(void);

void GPIOInit::Init() {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8008c50:	f000 f802 	bl	8008c58 <_Z12MX_GPIO_Initv>
}
 8008c54:	bf00      	nop
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <_Z12MX_GPIO_Initv>:

void MX_GPIO_Init(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8008c5e:	f107 0318 	add.w	r3, r7, #24
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c68:	463b      	mov	r3, r7
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	605a      	str	r2, [r3, #4]
 8008c70:	609a      	str	r2, [r3, #8]
 8008c72:	60da      	str	r2, [r3, #12]
 8008c74:	611a      	str	r2, [r3, #16]
 8008c76:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008c78:	2004      	movs	r0, #4
 8008c7a:	f7ff ffcf 	bl	8008c1c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8008c7e:	2080      	movs	r0, #128	; 0x80
 8008c80:	f7ff ffcc 	bl	8008c1c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008c84:	2001      	movs	r0, #1
 8008c86:	f7ff ffc9 	bl	8008c1c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8008c8a:	2002      	movs	r0, #2
 8008c8c:	f7ff ffc6 	bl	8008c1c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8008c90:	2120      	movs	r1, #32
 8008c92:	482c      	ldr	r0, [pc, #176]	; (8008d44 <_Z12MX_GPIO_Initv+0xec>)
 8008c94:	f7ff ffb2 	bl	8008bfc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8008c98:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8008c9c:	482a      	ldr	r0, [pc, #168]	; (8008d48 <_Z12MX_GPIO_Initv+0xf0>)
 8008c9e:	f7ff ffad 	bl	8008bfc <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8008ca2:	492a      	ldr	r1, [pc, #168]	; (8008d4c <_Z12MX_GPIO_Initv+0xf4>)
 8008ca4:	2002      	movs	r0, #2
 8008ca6:	f7ff ff1d 	bl	8008ae4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8008caa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008cae:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8008cb8:	2302      	movs	r3, #2
 8008cba:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8008cbc:	f107 0318 	add.w	r3, r7, #24
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7f9 ff4b 	bl	8002b5c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008ccc:	481e      	ldr	r0, [pc, #120]	; (8008d48 <_Z12MX_GPIO_Initv+0xf0>)
 8008cce:	f7ff ff66 	bl	8008b9e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008cd8:	481b      	ldr	r0, [pc, #108]	; (8008d48 <_Z12MX_GPIO_Initv+0xf0>)
 8008cda:	f7ff ff31 	bl	8008b40 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8008cde:	2320      	movs	r3, #32
 8008ce0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008cf2:	463b      	mov	r3, r7
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4813      	ldr	r0, [pc, #76]	; (8008d44 <_Z12MX_GPIO_Initv+0xec>)
 8008cf8:	f7fa f8b1 	bl	8002e5e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8008cfc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008d00:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008d02:	2301      	movs	r3, #1
 8008d04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d12:	463b      	mov	r3, r7
 8008d14:	4619      	mov	r1, r3
 8008d16:	480c      	ldr	r0, [pc, #48]	; (8008d48 <_Z12MX_GPIO_Initv+0xf0>)
 8008d18:	f7fa f8a1 	bl	8002e5e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008d1c:	f7ff fe54 	bl	80089c8 <__NVIC_GetPriorityGrouping>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2200      	movs	r2, #0
 8008d24:	2100      	movs	r1, #0
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7ff feaa 	bl	8008a80 <NVIC_EncodePriority>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	4619      	mov	r1, r3
 8008d30:	2028      	movs	r0, #40	; 0x28
 8008d32:	f7ff fe77 	bl	8008a24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008d36:	2028      	movs	r0, #40	; 0x28
 8008d38:	f7ff fe54 	bl	80089e4 <__NVIC_EnableIRQ>

}
 8008d3c:	bf00      	nop
 8008d3e:	3720      	adds	r7, #32
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	40020000 	.word	0x40020000
 8008d48:	40020800 	.word	0x40020800
 8008d4c:	00f00003 	.word	0x00f00003

08008d50 <__NVIC_GetPriorityGrouping>:
{
 8008d50:	b480      	push	{r7}
 8008d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d54:	4b04      	ldr	r3, [pc, #16]	; (8008d68 <__NVIC_GetPriorityGrouping+0x18>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	0a1b      	lsrs	r3, r3, #8
 8008d5a:	f003 0307 	and.w	r3, r3, #7
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	e000ed00 	.word	0xe000ed00

08008d6c <__NVIC_EnableIRQ>:
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	db0d      	blt.n	8008d9a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	f003 021f 	and.w	r2, r3, #31
 8008d88:	4907      	ldr	r1, [pc, #28]	; (8008da8 <__NVIC_EnableIRQ+0x3c>)
 8008d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d8e:	095b      	lsrs	r3, r3, #5
 8008d90:	2001      	movs	r0, #1
 8008d92:	fa00 f202 	lsl.w	r2, r0, r2
 8008d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	e000e100 	.word	0xe000e100

08008dac <__NVIC_SetPriority>:
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	6039      	str	r1, [r7, #0]
 8008db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	db0c      	blt.n	8008dda <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	4a0e      	ldr	r2, [pc, #56]	; (8008e00 <__NVIC_SetPriority+0x54>)
 8008dc6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8008dca:	4608      	mov	r0, r1
 8008dcc:	011b      	lsls	r3, r3, #4
 8008dce:	b2d9      	uxtb	r1, r3
 8008dd0:	1813      	adds	r3, r2, r0
 8008dd2:	460a      	mov	r2, r1
 8008dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008dd8:	e00c      	b.n	8008df4 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	4909      	ldr	r1, [pc, #36]	; (8008e04 <__NVIC_SetPriority+0x58>)
 8008de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	3b04      	subs	r3, #4
 8008dec:	0112      	lsls	r2, r2, #4
 8008dee:	b2d2      	uxtb	r2, r2
 8008df0:	440b      	add	r3, r1
 8008df2:	761a      	strb	r2, [r3, #24]
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	e000e100 	.word	0xe000e100
 8008e04:	e000ed00 	.word	0xe000ed00

08008e08 <NVIC_EncodePriority>:
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b089      	sub	sp, #36	; 0x24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	f1c3 0307 	rsb	r3, r3, #7
 8008e22:	2b04      	cmp	r3, #4
 8008e24:	bf28      	it	cs
 8008e26:	2304      	movcs	r3, #4
 8008e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	2b06      	cmp	r3, #6
 8008e30:	d902      	bls.n	8008e38 <NVIC_EncodePriority+0x30>
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	3b03      	subs	r3, #3
 8008e36:	e000      	b.n	8008e3a <NVIC_EncodePriority+0x32>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	fa02 f303 	lsl.w	r3, r2, r3
 8008e44:	1e5a      	subs	r2, r3, #1
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	401a      	ands	r2, r3
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	2101      	movs	r1, #1
 8008e52:	fa01 f303 	lsl.w	r3, r1, r3
 8008e56:	1e59      	subs	r1, r3, #1
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	400b      	ands	r3, r1
         );
 8008e5c:	4313      	orrs	r3, r2
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3724      	adds	r7, #36	; 0x24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <LL_TIM_DisableARRPreload>:
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	601a      	str	r2, [r3, #0]
}
 8008e7e:	bf00      	nop
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
	...

08008e8c <LL_TIM_OC_DisableFast>:
{
 8008e8c:	b4b0      	push	{r4, r5, r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d01c      	beq.n	8008ed6 <LL_TIM_OC_DisableFast+0x4a>
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	d017      	beq.n	8008ed2 <LL_TIM_OC_DisableFast+0x46>
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b10      	cmp	r3, #16
 8008ea6:	d012      	beq.n	8008ece <LL_TIM_OC_DisableFast+0x42>
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	2b40      	cmp	r3, #64	; 0x40
 8008eac:	d00d      	beq.n	8008eca <LL_TIM_OC_DisableFast+0x3e>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb4:	d007      	beq.n	8008ec6 <LL_TIM_OC_DisableFast+0x3a>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ebc:	d101      	bne.n	8008ec2 <LL_TIM_OC_DisableFast+0x36>
 8008ebe:	2305      	movs	r3, #5
 8008ec0:	e00a      	b.n	8008ed8 <LL_TIM_OC_DisableFast+0x4c>
 8008ec2:	2306      	movs	r3, #6
 8008ec4:	e008      	b.n	8008ed8 <LL_TIM_OC_DisableFast+0x4c>
 8008ec6:	2304      	movs	r3, #4
 8008ec8:	e006      	b.n	8008ed8 <LL_TIM_OC_DisableFast+0x4c>
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e004      	b.n	8008ed8 <LL_TIM_OC_DisableFast+0x4c>
 8008ece:	2302      	movs	r3, #2
 8008ed0:	e002      	b.n	8008ed8 <LL_TIM_OC_DisableFast+0x4c>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e000      	b.n	8008ed8 <LL_TIM_OC_DisableFast+0x4c>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	3318      	adds	r3, #24
 8008ede:	461a      	mov	r2, r3
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <LL_TIM_OC_DisableFast+0x7c>)
 8008ee4:	5c5b      	ldrb	r3, [r3, r1]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8008eea:	6822      	ldr	r2, [r4, #0]
 8008eec:	4629      	mov	r1, r5
 8008eee:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <LL_TIM_OC_DisableFast+0x80>)
 8008ef0:	5c5b      	ldrb	r3, [r3, r1]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	2304      	movs	r3, #4
 8008ef6:	408b      	lsls	r3, r1
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	4013      	ands	r3, r2
 8008efc:	6023      	str	r3, [r4, #0]
}
 8008efe:	bf00      	nop
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bcb0      	pop	{r4, r5, r7}
 8008f06:	4770      	bx	lr
 8008f08:	0800ca6c 	.word	0x0800ca6c
 8008f0c:	0800ca74 	.word	0x0800ca74

08008f10 <LL_TIM_OC_EnablePreload>:
{
 8008f10:	b4b0      	push	{r4, r5, r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d01c      	beq.n	8008f5a <LL_TIM_OC_EnablePreload+0x4a>
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b04      	cmp	r3, #4
 8008f24:	d017      	beq.n	8008f56 <LL_TIM_OC_EnablePreload+0x46>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b10      	cmp	r3, #16
 8008f2a:	d012      	beq.n	8008f52 <LL_TIM_OC_EnablePreload+0x42>
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2b40      	cmp	r3, #64	; 0x40
 8008f30:	d00d      	beq.n	8008f4e <LL_TIM_OC_EnablePreload+0x3e>
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f38:	d007      	beq.n	8008f4a <LL_TIM_OC_EnablePreload+0x3a>
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f40:	d101      	bne.n	8008f46 <LL_TIM_OC_EnablePreload+0x36>
 8008f42:	2305      	movs	r3, #5
 8008f44:	e00a      	b.n	8008f5c <LL_TIM_OC_EnablePreload+0x4c>
 8008f46:	2306      	movs	r3, #6
 8008f48:	e008      	b.n	8008f5c <LL_TIM_OC_EnablePreload+0x4c>
 8008f4a:	2304      	movs	r3, #4
 8008f4c:	e006      	b.n	8008f5c <LL_TIM_OC_EnablePreload+0x4c>
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e004      	b.n	8008f5c <LL_TIM_OC_EnablePreload+0x4c>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e002      	b.n	8008f5c <LL_TIM_OC_EnablePreload+0x4c>
 8008f56:	2301      	movs	r3, #1
 8008f58:	e000      	b.n	8008f5c <LL_TIM_OC_EnablePreload+0x4c>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3318      	adds	r3, #24
 8008f62:	461a      	mov	r2, r3
 8008f64:	4629      	mov	r1, r5
 8008f66:	4b09      	ldr	r3, [pc, #36]	; (8008f8c <LL_TIM_OC_EnablePreload+0x7c>)
 8008f68:	5c5b      	ldrb	r3, [r3, r1]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008f6e:	6822      	ldr	r2, [r4, #0]
 8008f70:	4629      	mov	r1, r5
 8008f72:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <LL_TIM_OC_EnablePreload+0x80>)
 8008f74:	5c5b      	ldrb	r3, [r3, r1]
 8008f76:	4619      	mov	r1, r3
 8008f78:	2308      	movs	r3, #8
 8008f7a:	408b      	lsls	r3, r1
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	6023      	str	r3, [r4, #0]
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bcb0      	pop	{r4, r5, r7}
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	0800ca6c 	.word	0x0800ca6c
 8008f90:	0800ca74 	.word	0x0800ca74

08008f94 <LL_TIM_SetTriggerOutput>:
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	431a      	orrs	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	605a      	str	r2, [r3, #4]
}
 8008fae:	bf00      	nop
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <LL_TIM_SetSlaveMode>:
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f023 0207 	bic.w	r2, r3, #7
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	609a      	str	r2, [r3, #8]
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <LL_TIM_SetTriggerInput>:
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	431a      	orrs	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	609a      	str	r2, [r3, #8]
}
 8008ffa:	bf00      	nop
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <LL_TIM_DisableMasterSlaveMode>:
{
 8009006:	b480      	push	{r7}
 8009008:	b083      	sub	sp, #12
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	609a      	str	r2, [r3, #8]
}
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <LL_TIM_DisableIT_TRIG>:
{
 8009026:	b480      	push	{r7}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60da      	str	r2, [r3, #12]
}
 800903a:	bf00      	nop
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <LL_TIM_DisableDMAReq_TRIG>:
{
 8009046:	b480      	push	{r7}
 8009048:	b083      	sub	sp, #12
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	60da      	str	r2, [r3, #12]
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
	...

08009068 <LL_AHB1_GRP1_EnableClock>:
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8009070:	4b08      	ldr	r3, [pc, #32]	; (8009094 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4907      	ldr	r1, [pc, #28]	; (8009094 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009078:	4313      	orrs	r3, r2
 800907a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800907c:	4b05      	ldr	r3, [pc, #20]	; (8009094 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800907e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4013      	ands	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009086:	68fb      	ldr	r3, [r7, #12]
}
 8009088:	bf00      	nop
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	40023800 	.word	0x40023800

08009098 <LL_APB2_GRP1_EnableClock>:
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80090a0:	4b08      	ldr	r3, [pc, #32]	; (80090c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80090a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4907      	ldr	r1, [pc, #28]	; (80090c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80090ac:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80090ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4013      	ands	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80090b6:	68fb      	ldr	r3, [r7, #12]
}
 80090b8:	bf00      	nop
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	40023800 	.word	0x40023800

080090c8 <_ZN7TIMInit4InitEv>:
}

void MX_TIM1_Init(void);


void TIMInit::Init() {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 80090cc:	f000 f802 	bl	80090d4 <_Z12MX_TIM1_Initv>
}
 80090d0:	bf00      	nop
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <_Z12MX_TIM1_Initv>:

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b09a      	sub	sp, #104	; 0x68
 80090d8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80090da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80090de:	2200      	movs	r2, #0
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	605a      	str	r2, [r3, #4]
 80090e4:	609a      	str	r2, [r3, #8]
 80090e6:	60da      	str	r2, [r3, #12]
 80090e8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80090ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090ee:	2220      	movs	r2, #32
 80090f0:	2100      	movs	r1, #0
 80090f2:	4618      	mov	r0, r3
 80090f4:	f001 fb86 	bl	800a804 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80090f8:	f107 031c 	add.w	r3, r7, #28
 80090fc:	2200      	movs	r2, #0
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	605a      	str	r2, [r3, #4]
 8009102:	609a      	str	r2, [r3, #8]
 8009104:	60da      	str	r2, [r3, #12]
 8009106:	611a      	str	r2, [r3, #16]
 8009108:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800910a:	1d3b      	adds	r3, r7, #4
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	605a      	str	r2, [r3, #4]
 8009112:	609a      	str	r2, [r3, #8]
 8009114:	60da      	str	r2, [r3, #12]
 8009116:	611a      	str	r2, [r3, #16]
 8009118:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800911a:	2001      	movs	r0, #1
 800911c:	f7ff ffbc 	bl	8009098 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8009120:	2001      	movs	r0, #1
 8009122:	f7ff ffa1 	bl	8009068 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA6   ------> TIM1_BKIN
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8009126:	2340      	movs	r3, #64	; 0x40
 8009128:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800912a:	2302      	movs	r3, #2
 800912c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8009132:	2300      	movs	r3, #0
 8009134:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8009136:	2302      	movs	r3, #2
 8009138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800913a:	2301      	movs	r3, #1
 800913c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800913e:	1d3b      	adds	r3, r7, #4
 8009140:	4619      	mov	r1, r3
 8009142:	4870      	ldr	r0, [pc, #448]	; (8009304 <_Z12MX_TIM1_Initv+0x230>)
 8009144:	f7f9 fe8b 	bl	8002e5e <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 8009148:	f7ff fe02 	bl	8008d50 <__NVIC_GetPriorityGrouping>
 800914c:	4603      	mov	r3, r0
 800914e:	2201      	movs	r2, #1
 8009150:	2104      	movs	r1, #4
 8009152:	4618      	mov	r0, r3
 8009154:	f7ff fe58 	bl	8008e08 <NVIC_EncodePriority>
 8009158:	4603      	mov	r3, r0
 800915a:	4619      	mov	r1, r3
 800915c:	2018      	movs	r0, #24
 800915e:	f7ff fe25 	bl	8008dac <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8009162:	2018      	movs	r0, #24
 8009164:	f7ff fe02 	bl	8008d6c <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8009168:	f7ff fdf2 	bl	8008d50 <__NVIC_GetPriorityGrouping>
 800916c:	4603      	mov	r3, r0
 800916e:	2200      	movs	r2, #0
 8009170:	2100      	movs	r1, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f7ff fe48 	bl	8008e08 <NVIC_EncodePriority>
 8009178:	4603      	mov	r3, r0
 800917a:	4619      	mov	r1, r3
 800917c:	2019      	movs	r0, #25
 800917e:	f7ff fe15 	bl	8008dac <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009182:	2019      	movs	r0, #25
 8009184:	f7ff fdf2 	bl	8008d6c <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 800918e:	2320      	movs	r3, #32
 8009190:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 4000;
 8009192:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8009196:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8009198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800919c:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 800919e:	2300      	movs	r3, #0
 80091a0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80091a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80091a8:	4619      	mov	r1, r3
 80091aa:	4857      	ldr	r0, [pc, #348]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 80091ac:	f7fa f8bc 	bl	8003328 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80091b0:	4855      	ldr	r0, [pc, #340]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 80091b2:	f7ff fe5a 	bl	8008e6a <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80091b6:	2101      	movs	r1, #1
 80091b8:	4853      	ldr	r0, [pc, #332]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 80091ba:	f7ff fea9 	bl	8008f10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80091be:	2360      	movs	r3, #96	; 0x60
 80091c0:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80091c2:	2300      	movs	r3, #0
 80091c4:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80091c6:	2300      	movs	r3, #0
 80091c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80091ce:	2300      	movs	r3, #0
 80091d0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80091d2:	2300      	movs	r3, #0
 80091d4:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80091d6:	2300      	movs	r3, #0
 80091d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80091da:	2300      	movs	r3, #0
 80091dc:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80091de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091e2:	461a      	mov	r2, r3
 80091e4:	2101      	movs	r1, #1
 80091e6:	4848      	ldr	r0, [pc, #288]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 80091e8:	f7fa f938 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80091ec:	2101      	movs	r1, #1
 80091ee:	4846      	ldr	r0, [pc, #280]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 80091f0:	f7ff fe4c 	bl	8008e8c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 80091f4:	2110      	movs	r1, #16
 80091f6:	4844      	ldr	r0, [pc, #272]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 80091f8:	f7ff fe8a 	bl	8008f10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80091fc:	2300      	movs	r3, #0
 80091fe:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8009200:	2300      	movs	r3, #0
 8009202:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8009204:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009208:	461a      	mov	r2, r3
 800920a:	2110      	movs	r1, #16
 800920c:	483e      	ldr	r0, [pc, #248]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 800920e:	f7fa f925 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8009212:	2110      	movs	r1, #16
 8009214:	483c      	ldr	r0, [pc, #240]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 8009216:	f7ff fe39 	bl	8008e8c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 800921a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800921e:	483a      	ldr	r0, [pc, #232]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 8009220:	f7ff fe76 	bl	8008f10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8009224:	2300      	movs	r3, #0
 8009226:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8009228:	2300      	movs	r3, #0
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800922c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009230:	461a      	mov	r2, r3
 8009232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009236:	4834      	ldr	r0, [pc, #208]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 8009238:	f7fa f910 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 800923c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009240:	4831      	ldr	r0, [pc, #196]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 8009242:	f7ff fe23 	bl	8008e8c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8009246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800924a:	482f      	ldr	r0, [pc, #188]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 800924c:	f7ff fe60 	bl	8008f10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8009250:	2370      	movs	r3, #112	; 0x70
 8009252:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8009254:	2300      	movs	r3, #0
 8009256:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8009258:	2300      	movs	r3, #0
 800925a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800925c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009260:	461a      	mov	r2, r3
 8009262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009266:	4828      	ldr	r0, [pc, #160]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 8009268:	f7fa f8f8 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 800926c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009270:	4825      	ldr	r0, [pc, #148]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 8009272:	f7ff fe0b 	bl	8008e8c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8009276:	2110      	movs	r1, #16
 8009278:	4823      	ldr	r0, [pc, #140]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 800927a:	f7ff feb1 	bl	8008fe0 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 800927e:	2106      	movs	r1, #6
 8009280:	4821      	ldr	r0, [pc, #132]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 8009282:	f7ff fe9a 	bl	8008fba <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8009286:	4820      	ldr	r0, [pc, #128]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 8009288:	f7ff fecd 	bl	8009026 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 800928c:	481e      	ldr	r0, [pc, #120]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 800928e:	f7ff feda 	bl	8009046 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8009292:	2100      	movs	r1, #0
 8009294:	481c      	ldr	r0, [pc, #112]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 8009296:	f7ff fe7d 	bl	8008f94 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800929a:	481b      	ldr	r0, [pc, #108]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 800929c:	f7ff feb3 	bl	8009006 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 80092a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092a4:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 80092a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092aa:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 80092ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80092b8:	2300      	movs	r3, #0
 80092ba:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80092bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80092c2:	2300      	movs	r3, #0
 80092c4:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80092c6:	f107 031c 	add.w	r3, r7, #28
 80092ca:	4619      	mov	r1, r3
 80092cc:	480e      	ldr	r0, [pc, #56]	; (8009308 <_Z12MX_TIM1_Initv+0x234>)
 80092ce:	f7fa f8fd 	bl	80034cc <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80092d2:	2001      	movs	r0, #1
 80092d4:	f7ff fec8 	bl	8009068 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80092d8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80092dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80092de:	2302      	movs	r3, #2
 80092e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80092e2:	2302      	movs	r3, #2
 80092e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80092ea:	2302      	movs	r3, #2
 80092ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80092ee:	2301      	movs	r3, #1
 80092f0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092f2:	1d3b      	adds	r3, r7, #4
 80092f4:	4619      	mov	r1, r3
 80092f6:	4803      	ldr	r0, [pc, #12]	; (8009304 <_Z12MX_TIM1_Initv+0x230>)
 80092f8:	f7f9 fdb1 	bl	8002e5e <LL_GPIO_Init>

}
 80092fc:	bf00      	nop
 80092fe:	3768      	adds	r7, #104	; 0x68
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	40020000 	.word	0x40020000
 8009308:	40010000 	.word	0x40010000

0800930c <LL_USART_Enable>:
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60da      	str	r2, [r3, #12]
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <LL_USART_ConfigAsyncMode>:
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	695b      	ldr	r3, [r3, #20]
 8009344:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	615a      	str	r2, [r3, #20]
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <LL_AHB1_GRP1_EnableClock>:
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8009360:	4b08      	ldr	r3, [pc, #32]	; (8009384 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4907      	ldr	r1, [pc, #28]	; (8009384 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009368:	4313      	orrs	r3, r2
 800936a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800936c:	4b05      	ldr	r3, [pc, #20]	; (8009384 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800936e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4013      	ands	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009376:	68fb      	ldr	r3, [r7, #12]
}
 8009378:	bf00      	nop
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	40023800 	.word	0x40023800

08009388 <LL_APB1_GRP1_EnableClock>:
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8009390:	4b08      	ldr	r3, [pc, #32]	; (80093b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4907      	ldr	r1, [pc, #28]	; (80093b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009398:	4313      	orrs	r3, r2
 800939a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800939c:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800939e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4013      	ands	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80093a6:	68fb      	ldr	r3, [r7, #12]
}
 80093a8:	bf00      	nop
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	40023800 	.word	0x40023800

080093b8 <_ZN9USARTInit4InitEv>:
//UART_HandleTypeDef huart2;
//void MX_USART2_HAL_UART_Init(void);
//void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle);


void USARTInit::Init() {
 80093b8:	b580      	push	{r7, lr}
 80093ba:	af00      	add	r7, sp, #0
	MX_USART2_LL_UART_Init();
 80093bc:	f000 f802 	bl	80093c4 <_Z22MX_USART2_LL_UART_Initv>
	//MX_USART2_HAL_UART_Init();
}
 80093c0:	bf00      	nop
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <_Z22MX_USART2_LL_UART_Initv>:

void MX_USART2_LL_UART_Init(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08e      	sub	sp, #56	; 0x38
 80093c8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80093ca:	f107 031c 	add.w	r3, r7, #28
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	605a      	str	r2, [r3, #4]
 80093d4:	609a      	str	r2, [r3, #8]
 80093d6:	60da      	str	r2, [r3, #12]
 80093d8:	611a      	str	r2, [r3, #16]
 80093da:	615a      	str	r2, [r3, #20]
 80093dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093de:	1d3b      	adds	r3, r7, #4
 80093e0:	2200      	movs	r2, #0
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	605a      	str	r2, [r3, #4]
 80093e6:	609a      	str	r2, [r3, #8]
 80093e8:	60da      	str	r2, [r3, #12]
 80093ea:	611a      	str	r2, [r3, #16]
 80093ec:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80093ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80093f2:	f7ff ffc9 	bl	8009388 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80093f6:	2001      	movs	r0, #1
 80093f8:	f7ff ffae 	bl	8009358 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80093fc:	230c      	movs	r3, #12
 80093fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8009400:	2302      	movs	r3, #2
 8009402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8009404:	2303      	movs	r3, #3
 8009406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8009408:	2300      	movs	r3, #0
 800940a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800940c:	2301      	movs	r3, #1
 800940e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8009410:	2307      	movs	r3, #7
 8009412:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009414:	1d3b      	adds	r3, r7, #4
 8009416:	4619      	mov	r1, r3
 8009418:	4810      	ldr	r0, [pc, #64]	; (800945c <_Z22MX_USART2_LL_UART_Initv+0x98>)
 800941a:	f7f9 fd20 	bl	8002e5e <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 800941e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8009422:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8009424:	2300      	movs	r3, #0
 8009426:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8009428:	2300      	movs	r3, #0
 800942a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800942c:	2300      	movs	r3, #0
 800942e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8009430:	230c      	movs	r3, #12
 8009432:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8009434:	2300      	movs	r3, #0
 8009436:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8009438:	2300      	movs	r3, #0
 800943a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800943c:	f107 031c 	add.w	r3, r7, #28
 8009440:	4619      	mov	r1, r3
 8009442:	4807      	ldr	r0, [pc, #28]	; (8009460 <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 8009444:	f7fa fb20 	bl	8003a88 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8009448:	4805      	ldr	r0, [pc, #20]	; (8009460 <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 800944a:	f7ff ff6f 	bl	800932c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800944e:	4804      	ldr	r0, [pc, #16]	; (8009460 <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 8009450:	f7ff ff5c 	bl	800930c <LL_USART_Enable>

}
 8009454:	bf00      	nop
 8009456:	3738      	adds	r7, #56	; 0x38
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	40020000 	.word	0x40020000
 8009460:	40004400 	.word	0x40004400

08009464 <_ZdlPv>:
 8009464:	f001 b9a2 	b.w	800a7ac <free>

08009468 <_ZdlPvj>:
 8009468:	f7ff bffc 	b.w	8009464 <_ZdlPv>

0800946c <_Znwj>:
 800946c:	b510      	push	{r4, lr}
 800946e:	2800      	cmp	r0, #0
 8009470:	bf14      	ite	ne
 8009472:	4604      	movne	r4, r0
 8009474:	2401      	moveq	r4, #1
 8009476:	4620      	mov	r0, r4
 8009478:	f001 f990 	bl	800a79c <malloc>
 800947c:	b930      	cbnz	r0, 800948c <_Znwj+0x20>
 800947e:	f000 f8fb 	bl	8009678 <_ZSt15get_new_handlerv>
 8009482:	b908      	cbnz	r0, 8009488 <_Znwj+0x1c>
 8009484:	f001 f959 	bl	800a73a <abort>
 8009488:	4780      	blx	r0
 800948a:	e7f4      	b.n	8009476 <_Znwj+0xa>
 800948c:	bd10      	pop	{r4, pc}

0800948e <_ZNSaIcEC1Ev>:
 800948e:	4770      	bx	lr

08009490 <_ZNSaIcED1Ev>:
 8009490:	4770      	bx	lr

08009492 <_ZSt17__throw_bad_allocv>:
 8009492:	b508      	push	{r3, lr}
 8009494:	f001 f951 	bl	800a73a <abort>

08009498 <_ZSt19__throw_logic_errorPKc>:
 8009498:	b508      	push	{r3, lr}
 800949a:	f001 f94e 	bl	800a73a <abort>

0800949e <_ZSt20__throw_length_errorPKc>:
 800949e:	b508      	push	{r3, lr}
 80094a0:	f001 f94b 	bl	800a73a <abort>

080094a4 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80094a4:	b10a      	cbz	r2, 80094aa <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80094a6:	f001 b989 	b.w	800a7bc <memcpy>
 80094aa:	4770      	bx	lr

080094ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80094ac:	6001      	str	r1, [r0, #0]
 80094ae:	4770      	bx	lr

080094b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80094b0:	6800      	ldr	r0, [r0, #0]
 80094b2:	4770      	bx	lr

080094b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80094b4:	3008      	adds	r0, #8
 80094b6:	4770      	bx	lr

080094b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80094b8:	6081      	str	r1, [r0, #8]
 80094ba:	4770      	bx	lr

080094bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80094bc:	6803      	ldr	r3, [r0, #0]
 80094be:	6041      	str	r1, [r0, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	545a      	strb	r2, [r3, r1]
 80094c4:	4770      	bx	lr
	...

080094c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80094c8:	b508      	push	{r3, lr}
 80094ca:	680b      	ldr	r3, [r1, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	da02      	bge.n	80094d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 80094d0:	4809      	ldr	r0, [pc, #36]	; (80094f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 80094d2:	f7ff ffe4 	bl	800949e <_ZSt20__throw_length_errorPKc>
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d908      	bls.n	80094ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80094da:	0052      	lsls	r2, r2, #1
 80094dc:	4293      	cmp	r3, r2
 80094de:	d205      	bcs.n	80094ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80094e0:	2a00      	cmp	r2, #0
 80094e2:	bfb6      	itet	lt
 80094e4:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80094e8:	600a      	strge	r2, [r1, #0]
 80094ea:	600b      	strlt	r3, [r1, #0]
 80094ec:	6808      	ldr	r0, [r1, #0]
 80094ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80094f2:	3001      	adds	r0, #1
 80094f4:	f7ff bfba 	b.w	800946c <_Znwj>
 80094f8:	0800ca90 	.word	0x0800ca90

080094fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80094fc:	4603      	mov	r3, r0
 80094fe:	f853 0b08 	ldr.w	r0, [r3], #8
 8009502:	4298      	cmp	r0, r3
 8009504:	d001      	beq.n	800950a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8009506:	f7ff bfad 	b.w	8009464 <_ZdlPv>
 800950a:	4770      	bx	lr

0800950c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800950c:	b508      	push	{r3, lr}
 800950e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009512:	6840      	ldr	r0, [r0, #4]
 8009514:	3901      	subs	r1, #1
 8009516:	1a09      	subs	r1, r1, r0
 8009518:	4291      	cmp	r1, r2
 800951a:	d202      	bcs.n	8009522 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff ffbe 	bl	800949e <_ZSt20__throw_length_errorPKc>
 8009522:	bd08      	pop	{r3, pc}

08009524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8009524:	2a01      	cmp	r2, #1
 8009526:	b510      	push	{r4, lr}
 8009528:	d102      	bne.n	8009530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800952a:	780a      	ldrb	r2, [r1, #0]
 800952c:	7002      	strb	r2, [r0, #0]
 800952e:	bd10      	pop	{r4, pc}
 8009530:	f7ff ffb8 	bl	80094a4 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8009534:	e7fb      	b.n	800952e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08009536 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8009536:	b508      	push	{r3, lr}
 8009538:	1a52      	subs	r2, r2, r1
 800953a:	f7ff fff3 	bl	8009524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800953e:	bd08      	pop	{r3, pc}

08009540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8009540:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009544:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8009548:	4616      	mov	r6, r2
 800954a:	6842      	ldr	r2, [r0, #4]
 800954c:	469a      	mov	sl, r3
 800954e:	eba8 0306 	sub.w	r3, r8, r6
 8009552:	1a57      	subs	r7, r2, r1
 8009554:	4413      	add	r3, r2
 8009556:	6802      	ldr	r2, [r0, #0]
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	f100 0308 	add.w	r3, r0, #8
 800955e:	429a      	cmp	r2, r3
 8009560:	460d      	mov	r5, r1
 8009562:	bf14      	ite	ne
 8009564:	6882      	ldrne	r2, [r0, #8]
 8009566:	220f      	moveq	r2, #15
 8009568:	a901      	add	r1, sp, #4
 800956a:	4604      	mov	r4, r0
 800956c:	f7ff ffac 	bl	80094c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009570:	1bbf      	subs	r7, r7, r6
 8009572:	4681      	mov	r9, r0
 8009574:	b11d      	cbz	r5, 800957e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8009576:	462a      	mov	r2, r5
 8009578:	6821      	ldr	r1, [r4, #0]
 800957a:	f7ff ffd3 	bl	8009524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800957e:	f1ba 0f00 	cmp.w	sl, #0
 8009582:	d008      	beq.n	8009596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8009584:	f1b8 0f00 	cmp.w	r8, #0
 8009588:	d005      	beq.n	8009596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800958a:	4642      	mov	r2, r8
 800958c:	4651      	mov	r1, sl
 800958e:	eb09 0005 	add.w	r0, r9, r5
 8009592:	f7ff ffc7 	bl	8009524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009596:	b147      	cbz	r7, 80095aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8009598:	6821      	ldr	r1, [r4, #0]
 800959a:	442e      	add	r6, r5
 800959c:	eb05 0008 	add.w	r0, r5, r8
 80095a0:	463a      	mov	r2, r7
 80095a2:	4431      	add	r1, r6
 80095a4:	4448      	add	r0, r9
 80095a6:	f7ff ffbd 	bl	8009524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80095aa:	4620      	mov	r0, r4
 80095ac:	f7ff ffa6 	bl	80094fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80095b0:	9b01      	ldr	r3, [sp, #4]
 80095b2:	f8c4 9000 	str.w	r9, [r4]
 80095b6:	60a3      	str	r3, [r4, #8]
 80095b8:	b002      	add	sp, #8
 80095ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080095be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80095be:	f100 0208 	add.w	r2, r0, #8
 80095c2:	6002      	str	r2, [r0, #0]
 80095c4:	2200      	movs	r2, #0
 80095c6:	6042      	str	r2, [r0, #4]
 80095c8:	7202      	strb	r2, [r0, #8]
 80095ca:	4770      	bx	lr

080095cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80095cc:	b510      	push	{r4, lr}
 80095ce:	4604      	mov	r4, r0
 80095d0:	f7ff ff94 	bl	80094fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80095d4:	4620      	mov	r0, r4
 80095d6:	bd10      	pop	{r4, pc}

080095d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80095d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095da:	4604      	mov	r4, r0
 80095dc:	4626      	mov	r6, r4
 80095de:	6840      	ldr	r0, [r0, #4]
 80095e0:	f856 3b08 	ldr.w	r3, [r6], #8
 80095e4:	42b3      	cmp	r3, r6
 80095e6:	bf18      	it	ne
 80095e8:	68a6      	ldrne	r6, [r4, #8]
 80095ea:	eb00 0502 	add.w	r5, r0, r2
 80095ee:	bf08      	it	eq
 80095f0:	260f      	moveq	r6, #15
 80095f2:	42b5      	cmp	r5, r6
 80095f4:	d80a      	bhi.n	800960c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 80095f6:	b112      	cbz	r2, 80095fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 80095f8:	4418      	add	r0, r3
 80095fa:	f7ff ff93 	bl	8009524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	6065      	str	r5, [r4, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	4620      	mov	r0, r4
 8009606:	555a      	strb	r2, [r3, r5]
 8009608:	b002      	add	sp, #8
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	9200      	str	r2, [sp, #0]
 800960e:	460b      	mov	r3, r1
 8009610:	2200      	movs	r2, #0
 8009612:	4601      	mov	r1, r0
 8009614:	4620      	mov	r0, r4
 8009616:	f7ff ff93 	bl	8009540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800961a:	e7f0      	b.n	80095fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800961c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800961c:	b508      	push	{r3, lr}
 800961e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8009622:	f7ff ffd9 	bl	80095d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8009626:	bd08      	pop	{r3, pc}

08009628 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	4604      	mov	r4, r0
 800962c:	4608      	mov	r0, r1
 800962e:	460d      	mov	r5, r1
 8009630:	f7f6 fe3e 	bl	80002b0 <strlen>
 8009634:	4b06      	ldr	r3, [pc, #24]	; (8009650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8009636:	4606      	mov	r6, r0
 8009638:	4602      	mov	r2, r0
 800963a:	2100      	movs	r1, #0
 800963c:	4620      	mov	r0, r4
 800963e:	f7ff ff65 	bl	800950c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8009642:	4632      	mov	r2, r6
 8009644:	4629      	mov	r1, r5
 8009646:	4620      	mov	r0, r4
 8009648:	f7ff ffc6 	bl	80095d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800964c:	bd70      	pop	{r4, r5, r6, pc}
 800964e:	bf00      	nop
 8009650:	0800ca7b 	.word	0x0800ca7b

08009654 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8009654:	6800      	ldr	r0, [r0, #0]
 8009656:	4770      	bx	lr

08009658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8009658:	6001      	str	r1, [r0, #0]
 800965a:	4770      	bx	lr

0800965c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800965c:	b510      	push	{r4, lr}
 800965e:	f100 0208 	add.w	r2, r0, #8
 8009662:	6002      	str	r2, [r0, #0]
 8009664:	e9d1 1200 	ldrd	r1, r2, [r1]
 8009668:	4604      	mov	r4, r0
 800966a:	f04f 0300 	mov.w	r3, #0
 800966e:	440a      	add	r2, r1
 8009670:	f7fa fc6e 	bl	8003f50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8009674:	4620      	mov	r0, r4
 8009676:	bd10      	pop	{r4, pc}

08009678 <_ZSt15get_new_handlerv>:
 8009678:	4b02      	ldr	r3, [pc, #8]	; (8009684 <_ZSt15get_new_handlerv+0xc>)
 800967a:	6818      	ldr	r0, [r3, #0]
 800967c:	f3bf 8f5b 	dmb	ish
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	20003288 	.word	0x20003288

08009688 <cos>:
 8009688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800968a:	ec51 0b10 	vmov	r0, r1, d0
 800968e:	4a1e      	ldr	r2, [pc, #120]	; (8009708 <cos+0x80>)
 8009690:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009694:	4293      	cmp	r3, r2
 8009696:	dc06      	bgt.n	80096a6 <cos+0x1e>
 8009698:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8009700 <cos+0x78>
 800969c:	f000 fb7c 	bl	8009d98 <__kernel_cos>
 80096a0:	ec51 0b10 	vmov	r0, r1, d0
 80096a4:	e007      	b.n	80096b6 <cos+0x2e>
 80096a6:	4a19      	ldr	r2, [pc, #100]	; (800970c <cos+0x84>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	dd09      	ble.n	80096c0 <cos+0x38>
 80096ac:	ee10 2a10 	vmov	r2, s0
 80096b0:	460b      	mov	r3, r1
 80096b2:	f7f6 fe09 	bl	80002c8 <__aeabi_dsub>
 80096b6:	ec41 0b10 	vmov	d0, r0, r1
 80096ba:	b005      	add	sp, #20
 80096bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80096c0:	4668      	mov	r0, sp
 80096c2:	f000 f975 	bl	80099b0 <__ieee754_rem_pio2>
 80096c6:	f000 0003 	and.w	r0, r0, #3
 80096ca:	2801      	cmp	r0, #1
 80096cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096d0:	ed9d 0b00 	vldr	d0, [sp]
 80096d4:	d007      	beq.n	80096e6 <cos+0x5e>
 80096d6:	2802      	cmp	r0, #2
 80096d8:	d00e      	beq.n	80096f8 <cos+0x70>
 80096da:	2800      	cmp	r0, #0
 80096dc:	d0de      	beq.n	800969c <cos+0x14>
 80096de:	2001      	movs	r0, #1
 80096e0:	f000 ff62 	bl	800a5a8 <__kernel_sin>
 80096e4:	e7dc      	b.n	80096a0 <cos+0x18>
 80096e6:	f000 ff5f 	bl	800a5a8 <__kernel_sin>
 80096ea:	ec53 2b10 	vmov	r2, r3, d0
 80096ee:	ee10 0a10 	vmov	r0, s0
 80096f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80096f6:	e7de      	b.n	80096b6 <cos+0x2e>
 80096f8:	f000 fb4e 	bl	8009d98 <__kernel_cos>
 80096fc:	e7f5      	b.n	80096ea <cos+0x62>
 80096fe:	bf00      	nop
	...
 8009708:	3fe921fb 	.word	0x3fe921fb
 800970c:	7fefffff 	.word	0x7fefffff

08009710 <fabs>:
 8009710:	ec51 0b10 	vmov	r0, r1, d0
 8009714:	ee10 2a10 	vmov	r2, s0
 8009718:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800971c:	ec43 2b10 	vmov	d0, r2, r3
 8009720:	4770      	bx	lr
 8009722:	0000      	movs	r0, r0
 8009724:	0000      	movs	r0, r0
	...

08009728 <floor>:
 8009728:	ec51 0b10 	vmov	r0, r1, d0
 800972c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009730:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009734:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009738:	2e13      	cmp	r6, #19
 800973a:	460c      	mov	r4, r1
 800973c:	ee10 5a10 	vmov	r5, s0
 8009740:	4680      	mov	r8, r0
 8009742:	dc34      	bgt.n	80097ae <floor+0x86>
 8009744:	2e00      	cmp	r6, #0
 8009746:	da16      	bge.n	8009776 <floor+0x4e>
 8009748:	a335      	add	r3, pc, #212	; (adr r3, 8009820 <floor+0xf8>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f7f6 fdbd 	bl	80002cc <__adddf3>
 8009752:	2200      	movs	r2, #0
 8009754:	2300      	movs	r3, #0
 8009756:	f7f7 f9ff 	bl	8000b58 <__aeabi_dcmpgt>
 800975a:	b148      	cbz	r0, 8009770 <floor+0x48>
 800975c:	2c00      	cmp	r4, #0
 800975e:	da59      	bge.n	8009814 <floor+0xec>
 8009760:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009764:	4a30      	ldr	r2, [pc, #192]	; (8009828 <floor+0x100>)
 8009766:	432b      	orrs	r3, r5
 8009768:	2500      	movs	r5, #0
 800976a:	42ab      	cmp	r3, r5
 800976c:	bf18      	it	ne
 800976e:	4614      	movne	r4, r2
 8009770:	4621      	mov	r1, r4
 8009772:	4628      	mov	r0, r5
 8009774:	e025      	b.n	80097c2 <floor+0x9a>
 8009776:	4f2d      	ldr	r7, [pc, #180]	; (800982c <floor+0x104>)
 8009778:	4137      	asrs	r7, r6
 800977a:	ea01 0307 	and.w	r3, r1, r7
 800977e:	4303      	orrs	r3, r0
 8009780:	d01f      	beq.n	80097c2 <floor+0x9a>
 8009782:	a327      	add	r3, pc, #156	; (adr r3, 8009820 <floor+0xf8>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	f7f6 fda0 	bl	80002cc <__adddf3>
 800978c:	2200      	movs	r2, #0
 800978e:	2300      	movs	r3, #0
 8009790:	f7f7 f9e2 	bl	8000b58 <__aeabi_dcmpgt>
 8009794:	2800      	cmp	r0, #0
 8009796:	d0eb      	beq.n	8009770 <floor+0x48>
 8009798:	2c00      	cmp	r4, #0
 800979a:	bfbe      	ittt	lt
 800979c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80097a0:	fa43 f606 	asrlt.w	r6, r3, r6
 80097a4:	19a4      	addlt	r4, r4, r6
 80097a6:	ea24 0407 	bic.w	r4, r4, r7
 80097aa:	2500      	movs	r5, #0
 80097ac:	e7e0      	b.n	8009770 <floor+0x48>
 80097ae:	2e33      	cmp	r6, #51	; 0x33
 80097b0:	dd0b      	ble.n	80097ca <floor+0xa2>
 80097b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80097b6:	d104      	bne.n	80097c2 <floor+0x9a>
 80097b8:	ee10 2a10 	vmov	r2, s0
 80097bc:	460b      	mov	r3, r1
 80097be:	f7f6 fd85 	bl	80002cc <__adddf3>
 80097c2:	ec41 0b10 	vmov	d0, r0, r1
 80097c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80097ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097d2:	fa23 f707 	lsr.w	r7, r3, r7
 80097d6:	4207      	tst	r7, r0
 80097d8:	d0f3      	beq.n	80097c2 <floor+0x9a>
 80097da:	a311      	add	r3, pc, #68	; (adr r3, 8009820 <floor+0xf8>)
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	f7f6 fd74 	bl	80002cc <__adddf3>
 80097e4:	2200      	movs	r2, #0
 80097e6:	2300      	movs	r3, #0
 80097e8:	f7f7 f9b6 	bl	8000b58 <__aeabi_dcmpgt>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d0bf      	beq.n	8009770 <floor+0x48>
 80097f0:	2c00      	cmp	r4, #0
 80097f2:	da02      	bge.n	80097fa <floor+0xd2>
 80097f4:	2e14      	cmp	r6, #20
 80097f6:	d103      	bne.n	8009800 <floor+0xd8>
 80097f8:	3401      	adds	r4, #1
 80097fa:	ea25 0507 	bic.w	r5, r5, r7
 80097fe:	e7b7      	b.n	8009770 <floor+0x48>
 8009800:	2301      	movs	r3, #1
 8009802:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009806:	fa03 f606 	lsl.w	r6, r3, r6
 800980a:	4435      	add	r5, r6
 800980c:	4545      	cmp	r5, r8
 800980e:	bf38      	it	cc
 8009810:	18e4      	addcc	r4, r4, r3
 8009812:	e7f2      	b.n	80097fa <floor+0xd2>
 8009814:	2500      	movs	r5, #0
 8009816:	462c      	mov	r4, r5
 8009818:	e7aa      	b.n	8009770 <floor+0x48>
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w
 8009820:	8800759c 	.word	0x8800759c
 8009824:	7e37e43c 	.word	0x7e37e43c
 8009828:	bff00000 	.word	0xbff00000
 800982c:	000fffff 	.word	0x000fffff

08009830 <scalbn>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	ec55 4b10 	vmov	r4, r5, d0
 8009836:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800983a:	4606      	mov	r6, r0
 800983c:	462b      	mov	r3, r5
 800983e:	b9aa      	cbnz	r2, 800986c <scalbn+0x3c>
 8009840:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009844:	4323      	orrs	r3, r4
 8009846:	d03b      	beq.n	80098c0 <scalbn+0x90>
 8009848:	4b31      	ldr	r3, [pc, #196]	; (8009910 <scalbn+0xe0>)
 800984a:	4629      	mov	r1, r5
 800984c:	2200      	movs	r2, #0
 800984e:	ee10 0a10 	vmov	r0, s0
 8009852:	f7f6 fef1 	bl	8000638 <__aeabi_dmul>
 8009856:	4b2f      	ldr	r3, [pc, #188]	; (8009914 <scalbn+0xe4>)
 8009858:	429e      	cmp	r6, r3
 800985a:	4604      	mov	r4, r0
 800985c:	460d      	mov	r5, r1
 800985e:	da12      	bge.n	8009886 <scalbn+0x56>
 8009860:	a327      	add	r3, pc, #156	; (adr r3, 8009900 <scalbn+0xd0>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	f7f6 fee7 	bl	8000638 <__aeabi_dmul>
 800986a:	e009      	b.n	8009880 <scalbn+0x50>
 800986c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009870:	428a      	cmp	r2, r1
 8009872:	d10c      	bne.n	800988e <scalbn+0x5e>
 8009874:	ee10 2a10 	vmov	r2, s0
 8009878:	4620      	mov	r0, r4
 800987a:	4629      	mov	r1, r5
 800987c:	f7f6 fd26 	bl	80002cc <__adddf3>
 8009880:	4604      	mov	r4, r0
 8009882:	460d      	mov	r5, r1
 8009884:	e01c      	b.n	80098c0 <scalbn+0x90>
 8009886:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800988a:	460b      	mov	r3, r1
 800988c:	3a36      	subs	r2, #54	; 0x36
 800988e:	4432      	add	r2, r6
 8009890:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009894:	428a      	cmp	r2, r1
 8009896:	dd0b      	ble.n	80098b0 <scalbn+0x80>
 8009898:	ec45 4b11 	vmov	d1, r4, r5
 800989c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009908 <scalbn+0xd8>
 80098a0:	f000 ff3c 	bl	800a71c <copysign>
 80098a4:	a318      	add	r3, pc, #96	; (adr r3, 8009908 <scalbn+0xd8>)
 80098a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098aa:	ec51 0b10 	vmov	r0, r1, d0
 80098ae:	e7da      	b.n	8009866 <scalbn+0x36>
 80098b0:	2a00      	cmp	r2, #0
 80098b2:	dd08      	ble.n	80098c6 <scalbn+0x96>
 80098b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098c0:	ec45 4b10 	vmov	d0, r4, r5
 80098c4:	bd70      	pop	{r4, r5, r6, pc}
 80098c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80098ca:	da0d      	bge.n	80098e8 <scalbn+0xb8>
 80098cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80098d0:	429e      	cmp	r6, r3
 80098d2:	ec45 4b11 	vmov	d1, r4, r5
 80098d6:	dce1      	bgt.n	800989c <scalbn+0x6c>
 80098d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009900 <scalbn+0xd0>
 80098dc:	f000 ff1e 	bl	800a71c <copysign>
 80098e0:	a307      	add	r3, pc, #28	; (adr r3, 8009900 <scalbn+0xd0>)
 80098e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e6:	e7e0      	b.n	80098aa <scalbn+0x7a>
 80098e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098ec:	3236      	adds	r2, #54	; 0x36
 80098ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098f6:	4620      	mov	r0, r4
 80098f8:	4629      	mov	r1, r5
 80098fa:	2200      	movs	r2, #0
 80098fc:	4b06      	ldr	r3, [pc, #24]	; (8009918 <scalbn+0xe8>)
 80098fe:	e7b2      	b.n	8009866 <scalbn+0x36>
 8009900:	c2f8f359 	.word	0xc2f8f359
 8009904:	01a56e1f 	.word	0x01a56e1f
 8009908:	8800759c 	.word	0x8800759c
 800990c:	7e37e43c 	.word	0x7e37e43c
 8009910:	43500000 	.word	0x43500000
 8009914:	ffff3cb0 	.word	0xffff3cb0
 8009918:	3c900000 	.word	0x3c900000
 800991c:	00000000 	.word	0x00000000

08009920 <sin>:
 8009920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009922:	ec51 0b10 	vmov	r0, r1, d0
 8009926:	4a20      	ldr	r2, [pc, #128]	; (80099a8 <sin+0x88>)
 8009928:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800992c:	4293      	cmp	r3, r2
 800992e:	dc07      	bgt.n	8009940 <sin+0x20>
 8009930:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80099a0 <sin+0x80>
 8009934:	2000      	movs	r0, #0
 8009936:	f000 fe37 	bl	800a5a8 <__kernel_sin>
 800993a:	ec51 0b10 	vmov	r0, r1, d0
 800993e:	e007      	b.n	8009950 <sin+0x30>
 8009940:	4a1a      	ldr	r2, [pc, #104]	; (80099ac <sin+0x8c>)
 8009942:	4293      	cmp	r3, r2
 8009944:	dd09      	ble.n	800995a <sin+0x3a>
 8009946:	ee10 2a10 	vmov	r2, s0
 800994a:	460b      	mov	r3, r1
 800994c:	f7f6 fcbc 	bl	80002c8 <__aeabi_dsub>
 8009950:	ec41 0b10 	vmov	d0, r0, r1
 8009954:	b005      	add	sp, #20
 8009956:	f85d fb04 	ldr.w	pc, [sp], #4
 800995a:	4668      	mov	r0, sp
 800995c:	f000 f828 	bl	80099b0 <__ieee754_rem_pio2>
 8009960:	f000 0003 	and.w	r0, r0, #3
 8009964:	2801      	cmp	r0, #1
 8009966:	ed9d 1b02 	vldr	d1, [sp, #8]
 800996a:	ed9d 0b00 	vldr	d0, [sp]
 800996e:	d004      	beq.n	800997a <sin+0x5a>
 8009970:	2802      	cmp	r0, #2
 8009972:	d005      	beq.n	8009980 <sin+0x60>
 8009974:	b970      	cbnz	r0, 8009994 <sin+0x74>
 8009976:	2001      	movs	r0, #1
 8009978:	e7dd      	b.n	8009936 <sin+0x16>
 800997a:	f000 fa0d 	bl	8009d98 <__kernel_cos>
 800997e:	e7dc      	b.n	800993a <sin+0x1a>
 8009980:	2001      	movs	r0, #1
 8009982:	f000 fe11 	bl	800a5a8 <__kernel_sin>
 8009986:	ec53 2b10 	vmov	r2, r3, d0
 800998a:	ee10 0a10 	vmov	r0, s0
 800998e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009992:	e7dd      	b.n	8009950 <sin+0x30>
 8009994:	f000 fa00 	bl	8009d98 <__kernel_cos>
 8009998:	e7f5      	b.n	8009986 <sin+0x66>
 800999a:	bf00      	nop
 800999c:	f3af 8000 	nop.w
	...
 80099a8:	3fe921fb 	.word	0x3fe921fb
 80099ac:	7fefffff 	.word	0x7fefffff

080099b0 <__ieee754_rem_pio2>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	ec57 6b10 	vmov	r6, r7, d0
 80099b8:	4bc3      	ldr	r3, [pc, #780]	; (8009cc8 <__ieee754_rem_pio2+0x318>)
 80099ba:	b08d      	sub	sp, #52	; 0x34
 80099bc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80099c0:	4598      	cmp	r8, r3
 80099c2:	4604      	mov	r4, r0
 80099c4:	9704      	str	r7, [sp, #16]
 80099c6:	dc07      	bgt.n	80099d8 <__ieee754_rem_pio2+0x28>
 80099c8:	2200      	movs	r2, #0
 80099ca:	2300      	movs	r3, #0
 80099cc:	ed84 0b00 	vstr	d0, [r4]
 80099d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80099d4:	2500      	movs	r5, #0
 80099d6:	e027      	b.n	8009a28 <__ieee754_rem_pio2+0x78>
 80099d8:	4bbc      	ldr	r3, [pc, #752]	; (8009ccc <__ieee754_rem_pio2+0x31c>)
 80099da:	4598      	cmp	r8, r3
 80099dc:	dc75      	bgt.n	8009aca <__ieee754_rem_pio2+0x11a>
 80099de:	9b04      	ldr	r3, [sp, #16]
 80099e0:	4dbb      	ldr	r5, [pc, #748]	; (8009cd0 <__ieee754_rem_pio2+0x320>)
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	ee10 0a10 	vmov	r0, s0
 80099e8:	a3a9      	add	r3, pc, #676	; (adr r3, 8009c90 <__ieee754_rem_pio2+0x2e0>)
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	4639      	mov	r1, r7
 80099f0:	dd36      	ble.n	8009a60 <__ieee754_rem_pio2+0xb0>
 80099f2:	f7f6 fc69 	bl	80002c8 <__aeabi_dsub>
 80099f6:	45a8      	cmp	r8, r5
 80099f8:	4606      	mov	r6, r0
 80099fa:	460f      	mov	r7, r1
 80099fc:	d018      	beq.n	8009a30 <__ieee754_rem_pio2+0x80>
 80099fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8009c98 <__ieee754_rem_pio2+0x2e8>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f7f6 fc60 	bl	80002c8 <__aeabi_dsub>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	e9c4 2300 	strd	r2, r3, [r4]
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	f7f6 fc58 	bl	80002c8 <__aeabi_dsub>
 8009a18:	a39f      	add	r3, pc, #636	; (adr r3, 8009c98 <__ieee754_rem_pio2+0x2e8>)
 8009a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1e:	f7f6 fc53 	bl	80002c8 <__aeabi_dsub>
 8009a22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a26:	2501      	movs	r5, #1
 8009a28:	4628      	mov	r0, r5
 8009a2a:	b00d      	add	sp, #52	; 0x34
 8009a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a30:	a39b      	add	r3, pc, #620	; (adr r3, 8009ca0 <__ieee754_rem_pio2+0x2f0>)
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	f7f6 fc47 	bl	80002c8 <__aeabi_dsub>
 8009a3a:	a39b      	add	r3, pc, #620	; (adr r3, 8009ca8 <__ieee754_rem_pio2+0x2f8>)
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	4606      	mov	r6, r0
 8009a42:	460f      	mov	r7, r1
 8009a44:	f7f6 fc40 	bl	80002c8 <__aeabi_dsub>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	e9c4 2300 	strd	r2, r3, [r4]
 8009a50:	4630      	mov	r0, r6
 8009a52:	4639      	mov	r1, r7
 8009a54:	f7f6 fc38 	bl	80002c8 <__aeabi_dsub>
 8009a58:	a393      	add	r3, pc, #588	; (adr r3, 8009ca8 <__ieee754_rem_pio2+0x2f8>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	e7de      	b.n	8009a1e <__ieee754_rem_pio2+0x6e>
 8009a60:	f7f6 fc34 	bl	80002cc <__adddf3>
 8009a64:	45a8      	cmp	r8, r5
 8009a66:	4606      	mov	r6, r0
 8009a68:	460f      	mov	r7, r1
 8009a6a:	d016      	beq.n	8009a9a <__ieee754_rem_pio2+0xea>
 8009a6c:	a38a      	add	r3, pc, #552	; (adr r3, 8009c98 <__ieee754_rem_pio2+0x2e8>)
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f7f6 fc2b 	bl	80002cc <__adddf3>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	e9c4 2300 	strd	r2, r3, [r4]
 8009a7e:	4630      	mov	r0, r6
 8009a80:	4639      	mov	r1, r7
 8009a82:	f7f6 fc21 	bl	80002c8 <__aeabi_dsub>
 8009a86:	a384      	add	r3, pc, #528	; (adr r3, 8009c98 <__ieee754_rem_pio2+0x2e8>)
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f7f6 fc1e 	bl	80002cc <__adddf3>
 8009a90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009a94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a98:	e7c6      	b.n	8009a28 <__ieee754_rem_pio2+0x78>
 8009a9a:	a381      	add	r3, pc, #516	; (adr r3, 8009ca0 <__ieee754_rem_pio2+0x2f0>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f7f6 fc14 	bl	80002cc <__adddf3>
 8009aa4:	a380      	add	r3, pc, #512	; (adr r3, 8009ca8 <__ieee754_rem_pio2+0x2f8>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	4606      	mov	r6, r0
 8009aac:	460f      	mov	r7, r1
 8009aae:	f7f6 fc0d 	bl	80002cc <__adddf3>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	e9c4 2300 	strd	r2, r3, [r4]
 8009aba:	4630      	mov	r0, r6
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f6 fc03 	bl	80002c8 <__aeabi_dsub>
 8009ac2:	a379      	add	r3, pc, #484	; (adr r3, 8009ca8 <__ieee754_rem_pio2+0x2f8>)
 8009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac8:	e7e0      	b.n	8009a8c <__ieee754_rem_pio2+0xdc>
 8009aca:	4b82      	ldr	r3, [pc, #520]	; (8009cd4 <__ieee754_rem_pio2+0x324>)
 8009acc:	4598      	cmp	r8, r3
 8009ace:	f300 80d0 	bgt.w	8009c72 <__ieee754_rem_pio2+0x2c2>
 8009ad2:	f7ff fe1d 	bl	8009710 <fabs>
 8009ad6:	ec57 6b10 	vmov	r6, r7, d0
 8009ada:	ee10 0a10 	vmov	r0, s0
 8009ade:	a374      	add	r3, pc, #464	; (adr r3, 8009cb0 <__ieee754_rem_pio2+0x300>)
 8009ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	f7f6 fda7 	bl	8000638 <__aeabi_dmul>
 8009aea:	2200      	movs	r2, #0
 8009aec:	4b7a      	ldr	r3, [pc, #488]	; (8009cd8 <__ieee754_rem_pio2+0x328>)
 8009aee:	f7f6 fbed 	bl	80002cc <__adddf3>
 8009af2:	f7f7 f851 	bl	8000b98 <__aeabi_d2iz>
 8009af6:	4605      	mov	r5, r0
 8009af8:	f7f6 fd34 	bl	8000564 <__aeabi_i2d>
 8009afc:	a364      	add	r3, pc, #400	; (adr r3, 8009c90 <__ieee754_rem_pio2+0x2e0>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b06:	f7f6 fd97 	bl	8000638 <__aeabi_dmul>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4630      	mov	r0, r6
 8009b10:	4639      	mov	r1, r7
 8009b12:	f7f6 fbd9 	bl	80002c8 <__aeabi_dsub>
 8009b16:	a360      	add	r3, pc, #384	; (adr r3, 8009c98 <__ieee754_rem_pio2+0x2e8>)
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	4682      	mov	sl, r0
 8009b1e:	468b      	mov	fp, r1
 8009b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b24:	f7f6 fd88 	bl	8000638 <__aeabi_dmul>
 8009b28:	2d1f      	cmp	r5, #31
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	460f      	mov	r7, r1
 8009b2e:	dc0c      	bgt.n	8009b4a <__ieee754_rem_pio2+0x19a>
 8009b30:	1e6a      	subs	r2, r5, #1
 8009b32:	4b6a      	ldr	r3, [pc, #424]	; (8009cdc <__ieee754_rem_pio2+0x32c>)
 8009b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b38:	4543      	cmp	r3, r8
 8009b3a:	d006      	beq.n	8009b4a <__ieee754_rem_pio2+0x19a>
 8009b3c:	4632      	mov	r2, r6
 8009b3e:	463b      	mov	r3, r7
 8009b40:	4650      	mov	r0, sl
 8009b42:	4659      	mov	r1, fp
 8009b44:	f7f6 fbc0 	bl	80002c8 <__aeabi_dsub>
 8009b48:	e00e      	b.n	8009b68 <__ieee754_rem_pio2+0x1b8>
 8009b4a:	4632      	mov	r2, r6
 8009b4c:	463b      	mov	r3, r7
 8009b4e:	4650      	mov	r0, sl
 8009b50:	4659      	mov	r1, fp
 8009b52:	f7f6 fbb9 	bl	80002c8 <__aeabi_dsub>
 8009b56:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009b5a:	9305      	str	r3, [sp, #20]
 8009b5c:	9a05      	ldr	r2, [sp, #20]
 8009b5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	2b10      	cmp	r3, #16
 8009b66:	dc02      	bgt.n	8009b6e <__ieee754_rem_pio2+0x1be>
 8009b68:	e9c4 0100 	strd	r0, r1, [r4]
 8009b6c:	e039      	b.n	8009be2 <__ieee754_rem_pio2+0x232>
 8009b6e:	a34c      	add	r3, pc, #304	; (adr r3, 8009ca0 <__ieee754_rem_pio2+0x2f0>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b78:	f7f6 fd5e 	bl	8000638 <__aeabi_dmul>
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	460f      	mov	r7, r1
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	4650      	mov	r0, sl
 8009b86:	4659      	mov	r1, fp
 8009b88:	f7f6 fb9e 	bl	80002c8 <__aeabi_dsub>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4680      	mov	r8, r0
 8009b92:	4689      	mov	r9, r1
 8009b94:	4650      	mov	r0, sl
 8009b96:	4659      	mov	r1, fp
 8009b98:	f7f6 fb96 	bl	80002c8 <__aeabi_dsub>
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	463b      	mov	r3, r7
 8009ba0:	f7f6 fb92 	bl	80002c8 <__aeabi_dsub>
 8009ba4:	a340      	add	r3, pc, #256	; (adr r3, 8009ca8 <__ieee754_rem_pio2+0x2f8>)
 8009ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009baa:	4606      	mov	r6, r0
 8009bac:	460f      	mov	r7, r1
 8009bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb2:	f7f6 fd41 	bl	8000638 <__aeabi_dmul>
 8009bb6:	4632      	mov	r2, r6
 8009bb8:	463b      	mov	r3, r7
 8009bba:	f7f6 fb85 	bl	80002c8 <__aeabi_dsub>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	460f      	mov	r7, r1
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	4649      	mov	r1, r9
 8009bca:	f7f6 fb7d 	bl	80002c8 <__aeabi_dsub>
 8009bce:	9a05      	ldr	r2, [sp, #20]
 8009bd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	2b31      	cmp	r3, #49	; 0x31
 8009bd8:	dc20      	bgt.n	8009c1c <__ieee754_rem_pio2+0x26c>
 8009bda:	e9c4 0100 	strd	r0, r1, [r4]
 8009bde:	46c2      	mov	sl, r8
 8009be0:	46cb      	mov	fp, r9
 8009be2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009be6:	4650      	mov	r0, sl
 8009be8:	4642      	mov	r2, r8
 8009bea:	464b      	mov	r3, r9
 8009bec:	4659      	mov	r1, fp
 8009bee:	f7f6 fb6b 	bl	80002c8 <__aeabi_dsub>
 8009bf2:	463b      	mov	r3, r7
 8009bf4:	4632      	mov	r2, r6
 8009bf6:	f7f6 fb67 	bl	80002c8 <__aeabi_dsub>
 8009bfa:	9b04      	ldr	r3, [sp, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c02:	f6bf af11 	bge.w	8009a28 <__ieee754_rem_pio2+0x78>
 8009c06:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009c0a:	6063      	str	r3, [r4, #4]
 8009c0c:	f8c4 8000 	str.w	r8, [r4]
 8009c10:	60a0      	str	r0, [r4, #8]
 8009c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c16:	60e3      	str	r3, [r4, #12]
 8009c18:	426d      	negs	r5, r5
 8009c1a:	e705      	b.n	8009a28 <__ieee754_rem_pio2+0x78>
 8009c1c:	a326      	add	r3, pc, #152	; (adr r3, 8009cb8 <__ieee754_rem_pio2+0x308>)
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c26:	f7f6 fd07 	bl	8000638 <__aeabi_dmul>
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	460f      	mov	r7, r1
 8009c2e:	4602      	mov	r2, r0
 8009c30:	460b      	mov	r3, r1
 8009c32:	4640      	mov	r0, r8
 8009c34:	4649      	mov	r1, r9
 8009c36:	f7f6 fb47 	bl	80002c8 <__aeabi_dsub>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4682      	mov	sl, r0
 8009c40:	468b      	mov	fp, r1
 8009c42:	4640      	mov	r0, r8
 8009c44:	4649      	mov	r1, r9
 8009c46:	f7f6 fb3f 	bl	80002c8 <__aeabi_dsub>
 8009c4a:	4632      	mov	r2, r6
 8009c4c:	463b      	mov	r3, r7
 8009c4e:	f7f6 fb3b 	bl	80002c8 <__aeabi_dsub>
 8009c52:	a31b      	add	r3, pc, #108	; (adr r3, 8009cc0 <__ieee754_rem_pio2+0x310>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	4606      	mov	r6, r0
 8009c5a:	460f      	mov	r7, r1
 8009c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c60:	f7f6 fcea 	bl	8000638 <__aeabi_dmul>
 8009c64:	4632      	mov	r2, r6
 8009c66:	463b      	mov	r3, r7
 8009c68:	f7f6 fb2e 	bl	80002c8 <__aeabi_dsub>
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	460f      	mov	r7, r1
 8009c70:	e764      	b.n	8009b3c <__ieee754_rem_pio2+0x18c>
 8009c72:	4b1b      	ldr	r3, [pc, #108]	; (8009ce0 <__ieee754_rem_pio2+0x330>)
 8009c74:	4598      	cmp	r8, r3
 8009c76:	dd35      	ble.n	8009ce4 <__ieee754_rem_pio2+0x334>
 8009c78:	ee10 2a10 	vmov	r2, s0
 8009c7c:	463b      	mov	r3, r7
 8009c7e:	4630      	mov	r0, r6
 8009c80:	4639      	mov	r1, r7
 8009c82:	f7f6 fb21 	bl	80002c8 <__aeabi_dsub>
 8009c86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c8a:	e9c4 0100 	strd	r0, r1, [r4]
 8009c8e:	e6a1      	b.n	80099d4 <__ieee754_rem_pio2+0x24>
 8009c90:	54400000 	.word	0x54400000
 8009c94:	3ff921fb 	.word	0x3ff921fb
 8009c98:	1a626331 	.word	0x1a626331
 8009c9c:	3dd0b461 	.word	0x3dd0b461
 8009ca0:	1a600000 	.word	0x1a600000
 8009ca4:	3dd0b461 	.word	0x3dd0b461
 8009ca8:	2e037073 	.word	0x2e037073
 8009cac:	3ba3198a 	.word	0x3ba3198a
 8009cb0:	6dc9c883 	.word	0x6dc9c883
 8009cb4:	3fe45f30 	.word	0x3fe45f30
 8009cb8:	2e000000 	.word	0x2e000000
 8009cbc:	3ba3198a 	.word	0x3ba3198a
 8009cc0:	252049c1 	.word	0x252049c1
 8009cc4:	397b839a 	.word	0x397b839a
 8009cc8:	3fe921fb 	.word	0x3fe921fb
 8009ccc:	4002d97b 	.word	0x4002d97b
 8009cd0:	3ff921fb 	.word	0x3ff921fb
 8009cd4:	413921fb 	.word	0x413921fb
 8009cd8:	3fe00000 	.word	0x3fe00000
 8009cdc:	0800caa8 	.word	0x0800caa8
 8009ce0:	7fefffff 	.word	0x7fefffff
 8009ce4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009ce8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009cec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	460f      	mov	r7, r1
 8009cf4:	f7f6 ff50 	bl	8000b98 <__aeabi_d2iz>
 8009cf8:	f7f6 fc34 	bl	8000564 <__aeabi_i2d>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4630      	mov	r0, r6
 8009d02:	4639      	mov	r1, r7
 8009d04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d08:	f7f6 fade 	bl	80002c8 <__aeabi_dsub>
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	4b1f      	ldr	r3, [pc, #124]	; (8009d8c <__ieee754_rem_pio2+0x3dc>)
 8009d10:	f7f6 fc92 	bl	8000638 <__aeabi_dmul>
 8009d14:	460f      	mov	r7, r1
 8009d16:	4606      	mov	r6, r0
 8009d18:	f7f6 ff3e 	bl	8000b98 <__aeabi_d2iz>
 8009d1c:	f7f6 fc22 	bl	8000564 <__aeabi_i2d>
 8009d20:	4602      	mov	r2, r0
 8009d22:	460b      	mov	r3, r1
 8009d24:	4630      	mov	r0, r6
 8009d26:	4639      	mov	r1, r7
 8009d28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d2c:	f7f6 facc 	bl	80002c8 <__aeabi_dsub>
 8009d30:	2200      	movs	r2, #0
 8009d32:	4b16      	ldr	r3, [pc, #88]	; (8009d8c <__ieee754_rem_pio2+0x3dc>)
 8009d34:	f7f6 fc80 	bl	8000638 <__aeabi_dmul>
 8009d38:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009d3c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009d40:	f04f 0803 	mov.w	r8, #3
 8009d44:	2600      	movs	r6, #0
 8009d46:	2700      	movs	r7, #0
 8009d48:	4632      	mov	r2, r6
 8009d4a:	463b      	mov	r3, r7
 8009d4c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009d50:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8009d54:	f7f6 fed8 	bl	8000b08 <__aeabi_dcmpeq>
 8009d58:	b9b0      	cbnz	r0, 8009d88 <__ieee754_rem_pio2+0x3d8>
 8009d5a:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <__ieee754_rem_pio2+0x3e0>)
 8009d5c:	9301      	str	r3, [sp, #4]
 8009d5e:	2302      	movs	r3, #2
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	462a      	mov	r2, r5
 8009d64:	4643      	mov	r3, r8
 8009d66:	4621      	mov	r1, r4
 8009d68:	a806      	add	r0, sp, #24
 8009d6a:	f000 f8dd 	bl	8009f28 <__kernel_rem_pio2>
 8009d6e:	9b04      	ldr	r3, [sp, #16]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	4605      	mov	r5, r0
 8009d74:	f6bf ae58 	bge.w	8009a28 <__ieee754_rem_pio2+0x78>
 8009d78:	6863      	ldr	r3, [r4, #4]
 8009d7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d7e:	6063      	str	r3, [r4, #4]
 8009d80:	68e3      	ldr	r3, [r4, #12]
 8009d82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d86:	e746      	b.n	8009c16 <__ieee754_rem_pio2+0x266>
 8009d88:	46d0      	mov	r8, sl
 8009d8a:	e7dd      	b.n	8009d48 <__ieee754_rem_pio2+0x398>
 8009d8c:	41700000 	.word	0x41700000
 8009d90:	0800cb28 	.word	0x0800cb28
 8009d94:	00000000 	.word	0x00000000

08009d98 <__kernel_cos>:
 8009d98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	ec59 8b10 	vmov	r8, r9, d0
 8009da0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8009da4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009da8:	ed2d 8b02 	vpush	{d8}
 8009dac:	eeb0 8a41 	vmov.f32	s16, s2
 8009db0:	eef0 8a61 	vmov.f32	s17, s3
 8009db4:	da07      	bge.n	8009dc6 <__kernel_cos+0x2e>
 8009db6:	ee10 0a10 	vmov	r0, s0
 8009dba:	4649      	mov	r1, r9
 8009dbc:	f7f6 feec 	bl	8000b98 <__aeabi_d2iz>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	f000 8089 	beq.w	8009ed8 <__kernel_cos+0x140>
 8009dc6:	4642      	mov	r2, r8
 8009dc8:	464b      	mov	r3, r9
 8009dca:	4640      	mov	r0, r8
 8009dcc:	4649      	mov	r1, r9
 8009dce:	f7f6 fc33 	bl	8000638 <__aeabi_dmul>
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	4b4e      	ldr	r3, [pc, #312]	; (8009f10 <__kernel_cos+0x178>)
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	460d      	mov	r5, r1
 8009dda:	f7f6 fc2d 	bl	8000638 <__aeabi_dmul>
 8009dde:	a340      	add	r3, pc, #256	; (adr r3, 8009ee0 <__kernel_cos+0x148>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	4682      	mov	sl, r0
 8009de6:	468b      	mov	fp, r1
 8009de8:	4620      	mov	r0, r4
 8009dea:	4629      	mov	r1, r5
 8009dec:	f7f6 fc24 	bl	8000638 <__aeabi_dmul>
 8009df0:	a33d      	add	r3, pc, #244	; (adr r3, 8009ee8 <__kernel_cos+0x150>)
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	f7f6 fa69 	bl	80002cc <__adddf3>
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	462b      	mov	r3, r5
 8009dfe:	f7f6 fc1b 	bl	8000638 <__aeabi_dmul>
 8009e02:	a33b      	add	r3, pc, #236	; (adr r3, 8009ef0 <__kernel_cos+0x158>)
 8009e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e08:	f7f6 fa5e 	bl	80002c8 <__aeabi_dsub>
 8009e0c:	4622      	mov	r2, r4
 8009e0e:	462b      	mov	r3, r5
 8009e10:	f7f6 fc12 	bl	8000638 <__aeabi_dmul>
 8009e14:	a338      	add	r3, pc, #224	; (adr r3, 8009ef8 <__kernel_cos+0x160>)
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	f7f6 fa57 	bl	80002cc <__adddf3>
 8009e1e:	4622      	mov	r2, r4
 8009e20:	462b      	mov	r3, r5
 8009e22:	f7f6 fc09 	bl	8000638 <__aeabi_dmul>
 8009e26:	a336      	add	r3, pc, #216	; (adr r3, 8009f00 <__kernel_cos+0x168>)
 8009e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2c:	f7f6 fa4c 	bl	80002c8 <__aeabi_dsub>
 8009e30:	4622      	mov	r2, r4
 8009e32:	462b      	mov	r3, r5
 8009e34:	f7f6 fc00 	bl	8000638 <__aeabi_dmul>
 8009e38:	a333      	add	r3, pc, #204	; (adr r3, 8009f08 <__kernel_cos+0x170>)
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	f7f6 fa45 	bl	80002cc <__adddf3>
 8009e42:	4622      	mov	r2, r4
 8009e44:	462b      	mov	r3, r5
 8009e46:	f7f6 fbf7 	bl	8000638 <__aeabi_dmul>
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	462b      	mov	r3, r5
 8009e4e:	f7f6 fbf3 	bl	8000638 <__aeabi_dmul>
 8009e52:	ec53 2b18 	vmov	r2, r3, d8
 8009e56:	4604      	mov	r4, r0
 8009e58:	460d      	mov	r5, r1
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	f7f6 fbeb 	bl	8000638 <__aeabi_dmul>
 8009e62:	460b      	mov	r3, r1
 8009e64:	4602      	mov	r2, r0
 8009e66:	4629      	mov	r1, r5
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f7f6 fa2d 	bl	80002c8 <__aeabi_dsub>
 8009e6e:	4b29      	ldr	r3, [pc, #164]	; (8009f14 <__kernel_cos+0x17c>)
 8009e70:	429e      	cmp	r6, r3
 8009e72:	4680      	mov	r8, r0
 8009e74:	4689      	mov	r9, r1
 8009e76:	dc11      	bgt.n	8009e9c <__kernel_cos+0x104>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4650      	mov	r0, sl
 8009e7e:	4659      	mov	r1, fp
 8009e80:	f7f6 fa22 	bl	80002c8 <__aeabi_dsub>
 8009e84:	460b      	mov	r3, r1
 8009e86:	4924      	ldr	r1, [pc, #144]	; (8009f18 <__kernel_cos+0x180>)
 8009e88:	4602      	mov	r2, r0
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	f7f6 fa1c 	bl	80002c8 <__aeabi_dsub>
 8009e90:	ecbd 8b02 	vpop	{d8}
 8009e94:	ec41 0b10 	vmov	d0, r0, r1
 8009e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9c:	4b1f      	ldr	r3, [pc, #124]	; (8009f1c <__kernel_cos+0x184>)
 8009e9e:	491e      	ldr	r1, [pc, #120]	; (8009f18 <__kernel_cos+0x180>)
 8009ea0:	429e      	cmp	r6, r3
 8009ea2:	bfcc      	ite	gt
 8009ea4:	4d1e      	ldrgt	r5, [pc, #120]	; (8009f20 <__kernel_cos+0x188>)
 8009ea6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009eaa:	2400      	movs	r4, #0
 8009eac:	4622      	mov	r2, r4
 8009eae:	462b      	mov	r3, r5
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	f7f6 fa09 	bl	80002c8 <__aeabi_dsub>
 8009eb6:	4622      	mov	r2, r4
 8009eb8:	4606      	mov	r6, r0
 8009eba:	460f      	mov	r7, r1
 8009ebc:	462b      	mov	r3, r5
 8009ebe:	4650      	mov	r0, sl
 8009ec0:	4659      	mov	r1, fp
 8009ec2:	f7f6 fa01 	bl	80002c8 <__aeabi_dsub>
 8009ec6:	4642      	mov	r2, r8
 8009ec8:	464b      	mov	r3, r9
 8009eca:	f7f6 f9fd 	bl	80002c8 <__aeabi_dsub>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	e7d9      	b.n	8009e8c <__kernel_cos+0xf4>
 8009ed8:	2000      	movs	r0, #0
 8009eda:	490f      	ldr	r1, [pc, #60]	; (8009f18 <__kernel_cos+0x180>)
 8009edc:	e7d8      	b.n	8009e90 <__kernel_cos+0xf8>
 8009ede:	bf00      	nop
 8009ee0:	be8838d4 	.word	0xbe8838d4
 8009ee4:	bda8fae9 	.word	0xbda8fae9
 8009ee8:	bdb4b1c4 	.word	0xbdb4b1c4
 8009eec:	3e21ee9e 	.word	0x3e21ee9e
 8009ef0:	809c52ad 	.word	0x809c52ad
 8009ef4:	3e927e4f 	.word	0x3e927e4f
 8009ef8:	19cb1590 	.word	0x19cb1590
 8009efc:	3efa01a0 	.word	0x3efa01a0
 8009f00:	16c15177 	.word	0x16c15177
 8009f04:	3f56c16c 	.word	0x3f56c16c
 8009f08:	5555554c 	.word	0x5555554c
 8009f0c:	3fa55555 	.word	0x3fa55555
 8009f10:	3fe00000 	.word	0x3fe00000
 8009f14:	3fd33332 	.word	0x3fd33332
 8009f18:	3ff00000 	.word	0x3ff00000
 8009f1c:	3fe90000 	.word	0x3fe90000
 8009f20:	3fd20000 	.word	0x3fd20000
 8009f24:	00000000 	.word	0x00000000

08009f28 <__kernel_rem_pio2>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	ed2d 8b02 	vpush	{d8}
 8009f30:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009f34:	1ed4      	subs	r4, r2, #3
 8009f36:	9308      	str	r3, [sp, #32]
 8009f38:	9101      	str	r1, [sp, #4]
 8009f3a:	4bc5      	ldr	r3, [pc, #788]	; (800a250 <__kernel_rem_pio2+0x328>)
 8009f3c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009f3e:	9009      	str	r0, [sp, #36]	; 0x24
 8009f40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f44:	9304      	str	r3, [sp, #16]
 8009f46:	9b08      	ldr	r3, [sp, #32]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	9307      	str	r3, [sp, #28]
 8009f4c:	2318      	movs	r3, #24
 8009f4e:	fb94 f4f3 	sdiv	r4, r4, r3
 8009f52:	f06f 0317 	mvn.w	r3, #23
 8009f56:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009f5a:	fb04 3303 	mla	r3, r4, r3, r3
 8009f5e:	eb03 0a02 	add.w	sl, r3, r2
 8009f62:	9b04      	ldr	r3, [sp, #16]
 8009f64:	9a07      	ldr	r2, [sp, #28]
 8009f66:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a240 <__kernel_rem_pio2+0x318>
 8009f6a:	eb03 0802 	add.w	r8, r3, r2
 8009f6e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009f70:	1aa7      	subs	r7, r4, r2
 8009f72:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009f76:	ae22      	add	r6, sp, #136	; 0x88
 8009f78:	2500      	movs	r5, #0
 8009f7a:	4545      	cmp	r5, r8
 8009f7c:	dd13      	ble.n	8009fa6 <__kernel_rem_pio2+0x7e>
 8009f7e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a240 <__kernel_rem_pio2+0x318>
 8009f82:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009f86:	2600      	movs	r6, #0
 8009f88:	9b04      	ldr	r3, [sp, #16]
 8009f8a:	429e      	cmp	r6, r3
 8009f8c:	dc32      	bgt.n	8009ff4 <__kernel_rem_pio2+0xcc>
 8009f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f90:	9302      	str	r3, [sp, #8]
 8009f92:	9b08      	ldr	r3, [sp, #32]
 8009f94:	199d      	adds	r5, r3, r6
 8009f96:	ab22      	add	r3, sp, #136	; 0x88
 8009f98:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009f9c:	9306      	str	r3, [sp, #24]
 8009f9e:	ec59 8b18 	vmov	r8, r9, d8
 8009fa2:	2700      	movs	r7, #0
 8009fa4:	e01f      	b.n	8009fe6 <__kernel_rem_pio2+0xbe>
 8009fa6:	42ef      	cmn	r7, r5
 8009fa8:	d407      	bmi.n	8009fba <__kernel_rem_pio2+0x92>
 8009faa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009fae:	f7f6 fad9 	bl	8000564 <__aeabi_i2d>
 8009fb2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009fb6:	3501      	adds	r5, #1
 8009fb8:	e7df      	b.n	8009f7a <__kernel_rem_pio2+0x52>
 8009fba:	ec51 0b18 	vmov	r0, r1, d8
 8009fbe:	e7f8      	b.n	8009fb2 <__kernel_rem_pio2+0x8a>
 8009fc0:	9906      	ldr	r1, [sp, #24]
 8009fc2:	9d02      	ldr	r5, [sp, #8]
 8009fc4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009fc8:	9106      	str	r1, [sp, #24]
 8009fca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009fce:	9502      	str	r5, [sp, #8]
 8009fd0:	f7f6 fb32 	bl	8000638 <__aeabi_dmul>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4640      	mov	r0, r8
 8009fda:	4649      	mov	r1, r9
 8009fdc:	f7f6 f976 	bl	80002cc <__adddf3>
 8009fe0:	3701      	adds	r7, #1
 8009fe2:	4680      	mov	r8, r0
 8009fe4:	4689      	mov	r9, r1
 8009fe6:	9b07      	ldr	r3, [sp, #28]
 8009fe8:	429f      	cmp	r7, r3
 8009fea:	dde9      	ble.n	8009fc0 <__kernel_rem_pio2+0x98>
 8009fec:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009ff0:	3601      	adds	r6, #1
 8009ff2:	e7c9      	b.n	8009f88 <__kernel_rem_pio2+0x60>
 8009ff4:	9b04      	ldr	r3, [sp, #16]
 8009ff6:	aa0e      	add	r2, sp, #56	; 0x38
 8009ff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ffc:	930c      	str	r3, [sp, #48]	; 0x30
 8009ffe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a000:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a004:	9c04      	ldr	r4, [sp, #16]
 800a006:	930b      	str	r3, [sp, #44]	; 0x2c
 800a008:	ab9a      	add	r3, sp, #616	; 0x268
 800a00a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a00e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a012:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a016:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a01a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a01e:	ab9a      	add	r3, sp, #616	; 0x268
 800a020:	445b      	add	r3, fp
 800a022:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a026:	2500      	movs	r5, #0
 800a028:	1b63      	subs	r3, r4, r5
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	dc78      	bgt.n	800a120 <__kernel_rem_pio2+0x1f8>
 800a02e:	4650      	mov	r0, sl
 800a030:	ec49 8b10 	vmov	d0, r8, r9
 800a034:	f7ff fbfc 	bl	8009830 <scalbn>
 800a038:	ec57 6b10 	vmov	r6, r7, d0
 800a03c:	2200      	movs	r2, #0
 800a03e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a042:	ee10 0a10 	vmov	r0, s0
 800a046:	4639      	mov	r1, r7
 800a048:	f7f6 faf6 	bl	8000638 <__aeabi_dmul>
 800a04c:	ec41 0b10 	vmov	d0, r0, r1
 800a050:	f7ff fb6a 	bl	8009728 <floor>
 800a054:	2200      	movs	r2, #0
 800a056:	ec51 0b10 	vmov	r0, r1, d0
 800a05a:	4b7e      	ldr	r3, [pc, #504]	; (800a254 <__kernel_rem_pio2+0x32c>)
 800a05c:	f7f6 faec 	bl	8000638 <__aeabi_dmul>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4630      	mov	r0, r6
 800a066:	4639      	mov	r1, r7
 800a068:	f7f6 f92e 	bl	80002c8 <__aeabi_dsub>
 800a06c:	460f      	mov	r7, r1
 800a06e:	4606      	mov	r6, r0
 800a070:	f7f6 fd92 	bl	8000b98 <__aeabi_d2iz>
 800a074:	9006      	str	r0, [sp, #24]
 800a076:	f7f6 fa75 	bl	8000564 <__aeabi_i2d>
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	4630      	mov	r0, r6
 800a080:	4639      	mov	r1, r7
 800a082:	f7f6 f921 	bl	80002c8 <__aeabi_dsub>
 800a086:	f1ba 0f00 	cmp.w	sl, #0
 800a08a:	4606      	mov	r6, r0
 800a08c:	460f      	mov	r7, r1
 800a08e:	dd6c      	ble.n	800a16a <__kernel_rem_pio2+0x242>
 800a090:	1e62      	subs	r2, r4, #1
 800a092:	ab0e      	add	r3, sp, #56	; 0x38
 800a094:	f1ca 0118 	rsb	r1, sl, #24
 800a098:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a09c:	9d06      	ldr	r5, [sp, #24]
 800a09e:	fa40 f301 	asr.w	r3, r0, r1
 800a0a2:	441d      	add	r5, r3
 800a0a4:	408b      	lsls	r3, r1
 800a0a6:	1ac0      	subs	r0, r0, r3
 800a0a8:	ab0e      	add	r3, sp, #56	; 0x38
 800a0aa:	9506      	str	r5, [sp, #24]
 800a0ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a0b0:	f1ca 0317 	rsb	r3, sl, #23
 800a0b4:	fa40 f303 	asr.w	r3, r0, r3
 800a0b8:	9302      	str	r3, [sp, #8]
 800a0ba:	9b02      	ldr	r3, [sp, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	dd62      	ble.n	800a186 <__kernel_rem_pio2+0x25e>
 800a0c0:	9b06      	ldr	r3, [sp, #24]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	9306      	str	r3, [sp, #24]
 800a0c8:	4615      	mov	r5, r2
 800a0ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a0ce:	4294      	cmp	r4, r2
 800a0d0:	f300 8095 	bgt.w	800a1fe <__kernel_rem_pio2+0x2d6>
 800a0d4:	f1ba 0f00 	cmp.w	sl, #0
 800a0d8:	dd07      	ble.n	800a0ea <__kernel_rem_pio2+0x1c2>
 800a0da:	f1ba 0f01 	cmp.w	sl, #1
 800a0de:	f000 80a2 	beq.w	800a226 <__kernel_rem_pio2+0x2fe>
 800a0e2:	f1ba 0f02 	cmp.w	sl, #2
 800a0e6:	f000 80c1 	beq.w	800a26c <__kernel_rem_pio2+0x344>
 800a0ea:	9b02      	ldr	r3, [sp, #8]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d14a      	bne.n	800a186 <__kernel_rem_pio2+0x25e>
 800a0f0:	4632      	mov	r2, r6
 800a0f2:	463b      	mov	r3, r7
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	4958      	ldr	r1, [pc, #352]	; (800a258 <__kernel_rem_pio2+0x330>)
 800a0f8:	f7f6 f8e6 	bl	80002c8 <__aeabi_dsub>
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	460f      	mov	r7, r1
 800a100:	2d00      	cmp	r5, #0
 800a102:	d040      	beq.n	800a186 <__kernel_rem_pio2+0x25e>
 800a104:	4650      	mov	r0, sl
 800a106:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a248 <__kernel_rem_pio2+0x320>
 800a10a:	f7ff fb91 	bl	8009830 <scalbn>
 800a10e:	4630      	mov	r0, r6
 800a110:	4639      	mov	r1, r7
 800a112:	ec53 2b10 	vmov	r2, r3, d0
 800a116:	f7f6 f8d7 	bl	80002c8 <__aeabi_dsub>
 800a11a:	4606      	mov	r6, r0
 800a11c:	460f      	mov	r7, r1
 800a11e:	e032      	b.n	800a186 <__kernel_rem_pio2+0x25e>
 800a120:	2200      	movs	r2, #0
 800a122:	4b4e      	ldr	r3, [pc, #312]	; (800a25c <__kernel_rem_pio2+0x334>)
 800a124:	4640      	mov	r0, r8
 800a126:	4649      	mov	r1, r9
 800a128:	f7f6 fa86 	bl	8000638 <__aeabi_dmul>
 800a12c:	f7f6 fd34 	bl	8000b98 <__aeabi_d2iz>
 800a130:	f7f6 fa18 	bl	8000564 <__aeabi_i2d>
 800a134:	2200      	movs	r2, #0
 800a136:	4b4a      	ldr	r3, [pc, #296]	; (800a260 <__kernel_rem_pio2+0x338>)
 800a138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a13c:	f7f6 fa7c 	bl	8000638 <__aeabi_dmul>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	4640      	mov	r0, r8
 800a146:	4649      	mov	r1, r9
 800a148:	f7f6 f8be 	bl	80002c8 <__aeabi_dsub>
 800a14c:	f7f6 fd24 	bl	8000b98 <__aeabi_d2iz>
 800a150:	ab0e      	add	r3, sp, #56	; 0x38
 800a152:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a156:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a15a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a15e:	f7f6 f8b5 	bl	80002cc <__adddf3>
 800a162:	3501      	adds	r5, #1
 800a164:	4680      	mov	r8, r0
 800a166:	4689      	mov	r9, r1
 800a168:	e75e      	b.n	800a028 <__kernel_rem_pio2+0x100>
 800a16a:	d105      	bne.n	800a178 <__kernel_rem_pio2+0x250>
 800a16c:	1e63      	subs	r3, r4, #1
 800a16e:	aa0e      	add	r2, sp, #56	; 0x38
 800a170:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a174:	15c3      	asrs	r3, r0, #23
 800a176:	e79f      	b.n	800a0b8 <__kernel_rem_pio2+0x190>
 800a178:	2200      	movs	r2, #0
 800a17a:	4b3a      	ldr	r3, [pc, #232]	; (800a264 <__kernel_rem_pio2+0x33c>)
 800a17c:	f7f6 fce2 	bl	8000b44 <__aeabi_dcmpge>
 800a180:	2800      	cmp	r0, #0
 800a182:	d139      	bne.n	800a1f8 <__kernel_rem_pio2+0x2d0>
 800a184:	9002      	str	r0, [sp, #8]
 800a186:	2200      	movs	r2, #0
 800a188:	2300      	movs	r3, #0
 800a18a:	4630      	mov	r0, r6
 800a18c:	4639      	mov	r1, r7
 800a18e:	f7f6 fcbb 	bl	8000b08 <__aeabi_dcmpeq>
 800a192:	2800      	cmp	r0, #0
 800a194:	f000 80c7 	beq.w	800a326 <__kernel_rem_pio2+0x3fe>
 800a198:	1e65      	subs	r5, r4, #1
 800a19a:	462b      	mov	r3, r5
 800a19c:	2200      	movs	r2, #0
 800a19e:	9904      	ldr	r1, [sp, #16]
 800a1a0:	428b      	cmp	r3, r1
 800a1a2:	da6a      	bge.n	800a27a <__kernel_rem_pio2+0x352>
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	f000 8088 	beq.w	800a2ba <__kernel_rem_pio2+0x392>
 800a1aa:	ab0e      	add	r3, sp, #56	; 0x38
 800a1ac:	f1aa 0a18 	sub.w	sl, sl, #24
 800a1b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 80b4 	beq.w	800a322 <__kernel_rem_pio2+0x3fa>
 800a1ba:	4650      	mov	r0, sl
 800a1bc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a248 <__kernel_rem_pio2+0x320>
 800a1c0:	f7ff fb36 	bl	8009830 <scalbn>
 800a1c4:	00ec      	lsls	r4, r5, #3
 800a1c6:	ab72      	add	r3, sp, #456	; 0x1c8
 800a1c8:	191e      	adds	r6, r3, r4
 800a1ca:	ec59 8b10 	vmov	r8, r9, d0
 800a1ce:	f106 0a08 	add.w	sl, r6, #8
 800a1d2:	462f      	mov	r7, r5
 800a1d4:	2f00      	cmp	r7, #0
 800a1d6:	f280 80df 	bge.w	800a398 <__kernel_rem_pio2+0x470>
 800a1da:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a240 <__kernel_rem_pio2+0x318>
 800a1de:	f04f 0a00 	mov.w	sl, #0
 800a1e2:	eba5 030a 	sub.w	r3, r5, sl
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f2c0 810a 	blt.w	800a400 <__kernel_rem_pio2+0x4d8>
 800a1ec:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a268 <__kernel_rem_pio2+0x340>
 800a1f0:	ec59 8b18 	vmov	r8, r9, d8
 800a1f4:	2700      	movs	r7, #0
 800a1f6:	e0f5      	b.n	800a3e4 <__kernel_rem_pio2+0x4bc>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	9302      	str	r3, [sp, #8]
 800a1fc:	e760      	b.n	800a0c0 <__kernel_rem_pio2+0x198>
 800a1fe:	ab0e      	add	r3, sp, #56	; 0x38
 800a200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a204:	b94d      	cbnz	r5, 800a21a <__kernel_rem_pio2+0x2f2>
 800a206:	b12b      	cbz	r3, 800a214 <__kernel_rem_pio2+0x2ec>
 800a208:	a80e      	add	r0, sp, #56	; 0x38
 800a20a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a20e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a212:	2301      	movs	r3, #1
 800a214:	3201      	adds	r2, #1
 800a216:	461d      	mov	r5, r3
 800a218:	e759      	b.n	800a0ce <__kernel_rem_pio2+0x1a6>
 800a21a:	a80e      	add	r0, sp, #56	; 0x38
 800a21c:	1acb      	subs	r3, r1, r3
 800a21e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a222:	462b      	mov	r3, r5
 800a224:	e7f6      	b.n	800a214 <__kernel_rem_pio2+0x2ec>
 800a226:	1e62      	subs	r2, r4, #1
 800a228:	ab0e      	add	r3, sp, #56	; 0x38
 800a22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a22e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a232:	a90e      	add	r1, sp, #56	; 0x38
 800a234:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a238:	e757      	b.n	800a0ea <__kernel_rem_pio2+0x1c2>
 800a23a:	bf00      	nop
 800a23c:	f3af 8000 	nop.w
	...
 800a24c:	3ff00000 	.word	0x3ff00000
 800a250:	0800cc70 	.word	0x0800cc70
 800a254:	40200000 	.word	0x40200000
 800a258:	3ff00000 	.word	0x3ff00000
 800a25c:	3e700000 	.word	0x3e700000
 800a260:	41700000 	.word	0x41700000
 800a264:	3fe00000 	.word	0x3fe00000
 800a268:	0800cc30 	.word	0x0800cc30
 800a26c:	1e62      	subs	r2, r4, #1
 800a26e:	ab0e      	add	r3, sp, #56	; 0x38
 800a270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a274:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a278:	e7db      	b.n	800a232 <__kernel_rem_pio2+0x30a>
 800a27a:	a90e      	add	r1, sp, #56	; 0x38
 800a27c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a280:	3b01      	subs	r3, #1
 800a282:	430a      	orrs	r2, r1
 800a284:	e78b      	b.n	800a19e <__kernel_rem_pio2+0x276>
 800a286:	3301      	adds	r3, #1
 800a288:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a28c:	2900      	cmp	r1, #0
 800a28e:	d0fa      	beq.n	800a286 <__kernel_rem_pio2+0x35e>
 800a290:	9a08      	ldr	r2, [sp, #32]
 800a292:	4422      	add	r2, r4
 800a294:	00d2      	lsls	r2, r2, #3
 800a296:	a922      	add	r1, sp, #136	; 0x88
 800a298:	18e3      	adds	r3, r4, r3
 800a29a:	9206      	str	r2, [sp, #24]
 800a29c:	440a      	add	r2, r1
 800a29e:	9302      	str	r3, [sp, #8]
 800a2a0:	f10b 0108 	add.w	r1, fp, #8
 800a2a4:	f102 0308 	add.w	r3, r2, #8
 800a2a8:	1c66      	adds	r6, r4, #1
 800a2aa:	910a      	str	r1, [sp, #40]	; 0x28
 800a2ac:	2500      	movs	r5, #0
 800a2ae:	930d      	str	r3, [sp, #52]	; 0x34
 800a2b0:	9b02      	ldr	r3, [sp, #8]
 800a2b2:	42b3      	cmp	r3, r6
 800a2b4:	da04      	bge.n	800a2c0 <__kernel_rem_pio2+0x398>
 800a2b6:	461c      	mov	r4, r3
 800a2b8:	e6a6      	b.n	800a008 <__kernel_rem_pio2+0xe0>
 800a2ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e7e3      	b.n	800a288 <__kernel_rem_pio2+0x360>
 800a2c0:	9b06      	ldr	r3, [sp, #24]
 800a2c2:	18ef      	adds	r7, r5, r3
 800a2c4:	ab22      	add	r3, sp, #136	; 0x88
 800a2c6:	441f      	add	r7, r3
 800a2c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a2ce:	f7f6 f949 	bl	8000564 <__aeabi_i2d>
 800a2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d4:	461c      	mov	r4, r3
 800a2d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2d8:	e9c7 0100 	strd	r0, r1, [r7]
 800a2dc:	eb03 0b05 	add.w	fp, r3, r5
 800a2e0:	2700      	movs	r7, #0
 800a2e2:	f04f 0800 	mov.w	r8, #0
 800a2e6:	f04f 0900 	mov.w	r9, #0
 800a2ea:	9b07      	ldr	r3, [sp, #28]
 800a2ec:	429f      	cmp	r7, r3
 800a2ee:	dd08      	ble.n	800a302 <__kernel_rem_pio2+0x3da>
 800a2f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f2:	aa72      	add	r2, sp, #456	; 0x1c8
 800a2f4:	18eb      	adds	r3, r5, r3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a2fc:	3601      	adds	r6, #1
 800a2fe:	3508      	adds	r5, #8
 800a300:	e7d6      	b.n	800a2b0 <__kernel_rem_pio2+0x388>
 800a302:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a306:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a30a:	f7f6 f995 	bl	8000638 <__aeabi_dmul>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4640      	mov	r0, r8
 800a314:	4649      	mov	r1, r9
 800a316:	f7f5 ffd9 	bl	80002cc <__adddf3>
 800a31a:	3701      	adds	r7, #1
 800a31c:	4680      	mov	r8, r0
 800a31e:	4689      	mov	r9, r1
 800a320:	e7e3      	b.n	800a2ea <__kernel_rem_pio2+0x3c2>
 800a322:	3d01      	subs	r5, #1
 800a324:	e741      	b.n	800a1aa <__kernel_rem_pio2+0x282>
 800a326:	f1ca 0000 	rsb	r0, sl, #0
 800a32a:	ec47 6b10 	vmov	d0, r6, r7
 800a32e:	f7ff fa7f 	bl	8009830 <scalbn>
 800a332:	ec57 6b10 	vmov	r6, r7, d0
 800a336:	2200      	movs	r2, #0
 800a338:	4b99      	ldr	r3, [pc, #612]	; (800a5a0 <__kernel_rem_pio2+0x678>)
 800a33a:	ee10 0a10 	vmov	r0, s0
 800a33e:	4639      	mov	r1, r7
 800a340:	f7f6 fc00 	bl	8000b44 <__aeabi_dcmpge>
 800a344:	b1f8      	cbz	r0, 800a386 <__kernel_rem_pio2+0x45e>
 800a346:	2200      	movs	r2, #0
 800a348:	4b96      	ldr	r3, [pc, #600]	; (800a5a4 <__kernel_rem_pio2+0x67c>)
 800a34a:	4630      	mov	r0, r6
 800a34c:	4639      	mov	r1, r7
 800a34e:	f7f6 f973 	bl	8000638 <__aeabi_dmul>
 800a352:	f7f6 fc21 	bl	8000b98 <__aeabi_d2iz>
 800a356:	4680      	mov	r8, r0
 800a358:	f7f6 f904 	bl	8000564 <__aeabi_i2d>
 800a35c:	2200      	movs	r2, #0
 800a35e:	4b90      	ldr	r3, [pc, #576]	; (800a5a0 <__kernel_rem_pio2+0x678>)
 800a360:	f7f6 f96a 	bl	8000638 <__aeabi_dmul>
 800a364:	460b      	mov	r3, r1
 800a366:	4602      	mov	r2, r0
 800a368:	4639      	mov	r1, r7
 800a36a:	4630      	mov	r0, r6
 800a36c:	f7f5 ffac 	bl	80002c8 <__aeabi_dsub>
 800a370:	f7f6 fc12 	bl	8000b98 <__aeabi_d2iz>
 800a374:	1c65      	adds	r5, r4, #1
 800a376:	ab0e      	add	r3, sp, #56	; 0x38
 800a378:	f10a 0a18 	add.w	sl, sl, #24
 800a37c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a380:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a384:	e719      	b.n	800a1ba <__kernel_rem_pio2+0x292>
 800a386:	4630      	mov	r0, r6
 800a388:	4639      	mov	r1, r7
 800a38a:	f7f6 fc05 	bl	8000b98 <__aeabi_d2iz>
 800a38e:	ab0e      	add	r3, sp, #56	; 0x38
 800a390:	4625      	mov	r5, r4
 800a392:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a396:	e710      	b.n	800a1ba <__kernel_rem_pio2+0x292>
 800a398:	ab0e      	add	r3, sp, #56	; 0x38
 800a39a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a39e:	f7f6 f8e1 	bl	8000564 <__aeabi_i2d>
 800a3a2:	4642      	mov	r2, r8
 800a3a4:	464b      	mov	r3, r9
 800a3a6:	f7f6 f947 	bl	8000638 <__aeabi_dmul>
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a3b0:	4b7c      	ldr	r3, [pc, #496]	; (800a5a4 <__kernel_rem_pio2+0x67c>)
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	f7f6 f93f 	bl	8000638 <__aeabi_dmul>
 800a3ba:	3f01      	subs	r7, #1
 800a3bc:	4680      	mov	r8, r0
 800a3be:	4689      	mov	r9, r1
 800a3c0:	e708      	b.n	800a1d4 <__kernel_rem_pio2+0x2ac>
 800a3c2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a3ce:	f7f6 f933 	bl	8000638 <__aeabi_dmul>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	4640      	mov	r0, r8
 800a3d8:	4649      	mov	r1, r9
 800a3da:	f7f5 ff77 	bl	80002cc <__adddf3>
 800a3de:	3701      	adds	r7, #1
 800a3e0:	4680      	mov	r8, r0
 800a3e2:	4689      	mov	r9, r1
 800a3e4:	9b04      	ldr	r3, [sp, #16]
 800a3e6:	429f      	cmp	r7, r3
 800a3e8:	dc01      	bgt.n	800a3ee <__kernel_rem_pio2+0x4c6>
 800a3ea:	45ba      	cmp	sl, r7
 800a3ec:	dae9      	bge.n	800a3c2 <__kernel_rem_pio2+0x49a>
 800a3ee:	ab4a      	add	r3, sp, #296	; 0x128
 800a3f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3f4:	e9c3 8900 	strd	r8, r9, [r3]
 800a3f8:	f10a 0a01 	add.w	sl, sl, #1
 800a3fc:	3e08      	subs	r6, #8
 800a3fe:	e6f0      	b.n	800a1e2 <__kernel_rem_pio2+0x2ba>
 800a400:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a402:	2b03      	cmp	r3, #3
 800a404:	d85b      	bhi.n	800a4be <__kernel_rem_pio2+0x596>
 800a406:	e8df f003 	tbb	[pc, r3]
 800a40a:	264a      	.short	0x264a
 800a40c:	0226      	.short	0x0226
 800a40e:	ab9a      	add	r3, sp, #616	; 0x268
 800a410:	441c      	add	r4, r3
 800a412:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a416:	46a2      	mov	sl, r4
 800a418:	46ab      	mov	fp, r5
 800a41a:	f1bb 0f00 	cmp.w	fp, #0
 800a41e:	dc6c      	bgt.n	800a4fa <__kernel_rem_pio2+0x5d2>
 800a420:	46a2      	mov	sl, r4
 800a422:	46ab      	mov	fp, r5
 800a424:	f1bb 0f01 	cmp.w	fp, #1
 800a428:	f300 8086 	bgt.w	800a538 <__kernel_rem_pio2+0x610>
 800a42c:	2000      	movs	r0, #0
 800a42e:	2100      	movs	r1, #0
 800a430:	2d01      	cmp	r5, #1
 800a432:	f300 80a0 	bgt.w	800a576 <__kernel_rem_pio2+0x64e>
 800a436:	9b02      	ldr	r3, [sp, #8]
 800a438:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a43c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a440:	2b00      	cmp	r3, #0
 800a442:	f040 809e 	bne.w	800a582 <__kernel_rem_pio2+0x65a>
 800a446:	9b01      	ldr	r3, [sp, #4]
 800a448:	e9c3 7800 	strd	r7, r8, [r3]
 800a44c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a450:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a454:	e033      	b.n	800a4be <__kernel_rem_pio2+0x596>
 800a456:	3408      	adds	r4, #8
 800a458:	ab4a      	add	r3, sp, #296	; 0x128
 800a45a:	441c      	add	r4, r3
 800a45c:	462e      	mov	r6, r5
 800a45e:	2000      	movs	r0, #0
 800a460:	2100      	movs	r1, #0
 800a462:	2e00      	cmp	r6, #0
 800a464:	da3a      	bge.n	800a4dc <__kernel_rem_pio2+0x5b4>
 800a466:	9b02      	ldr	r3, [sp, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d03d      	beq.n	800a4e8 <__kernel_rem_pio2+0x5c0>
 800a46c:	4602      	mov	r2, r0
 800a46e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a472:	9c01      	ldr	r4, [sp, #4]
 800a474:	e9c4 2300 	strd	r2, r3, [r4]
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a480:	f7f5 ff22 	bl	80002c8 <__aeabi_dsub>
 800a484:	ae4c      	add	r6, sp, #304	; 0x130
 800a486:	2401      	movs	r4, #1
 800a488:	42a5      	cmp	r5, r4
 800a48a:	da30      	bge.n	800a4ee <__kernel_rem_pio2+0x5c6>
 800a48c:	9b02      	ldr	r3, [sp, #8]
 800a48e:	b113      	cbz	r3, 800a496 <__kernel_rem_pio2+0x56e>
 800a490:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a494:	4619      	mov	r1, r3
 800a496:	9b01      	ldr	r3, [sp, #4]
 800a498:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a49c:	e00f      	b.n	800a4be <__kernel_rem_pio2+0x596>
 800a49e:	ab9a      	add	r3, sp, #616	; 0x268
 800a4a0:	441c      	add	r4, r3
 800a4a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	2d00      	cmp	r5, #0
 800a4ac:	da10      	bge.n	800a4d0 <__kernel_rem_pio2+0x5a8>
 800a4ae:	9b02      	ldr	r3, [sp, #8]
 800a4b0:	b113      	cbz	r3, 800a4b8 <__kernel_rem_pio2+0x590>
 800a4b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	9b01      	ldr	r3, [sp, #4]
 800a4ba:	e9c3 0100 	strd	r0, r1, [r3]
 800a4be:	9b06      	ldr	r3, [sp, #24]
 800a4c0:	f003 0007 	and.w	r0, r3, #7
 800a4c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a4c8:	ecbd 8b02 	vpop	{d8}
 800a4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a4d4:	f7f5 fefa 	bl	80002cc <__adddf3>
 800a4d8:	3d01      	subs	r5, #1
 800a4da:	e7e6      	b.n	800a4aa <__kernel_rem_pio2+0x582>
 800a4dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a4e0:	f7f5 fef4 	bl	80002cc <__adddf3>
 800a4e4:	3e01      	subs	r6, #1
 800a4e6:	e7bc      	b.n	800a462 <__kernel_rem_pio2+0x53a>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	e7c1      	b.n	800a472 <__kernel_rem_pio2+0x54a>
 800a4ee:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a4f2:	f7f5 feeb 	bl	80002cc <__adddf3>
 800a4f6:	3401      	adds	r4, #1
 800a4f8:	e7c6      	b.n	800a488 <__kernel_rem_pio2+0x560>
 800a4fa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800a4fe:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a502:	4640      	mov	r0, r8
 800a504:	ec53 2b17 	vmov	r2, r3, d7
 800a508:	4649      	mov	r1, r9
 800a50a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a50e:	f7f5 fedd 	bl	80002cc <__adddf3>
 800a512:	4602      	mov	r2, r0
 800a514:	460b      	mov	r3, r1
 800a516:	4606      	mov	r6, r0
 800a518:	460f      	mov	r7, r1
 800a51a:	4640      	mov	r0, r8
 800a51c:	4649      	mov	r1, r9
 800a51e:	f7f5 fed3 	bl	80002c8 <__aeabi_dsub>
 800a522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a526:	f7f5 fed1 	bl	80002cc <__adddf3>
 800a52a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a52e:	e9ca 0100 	strd	r0, r1, [sl]
 800a532:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800a536:	e770      	b.n	800a41a <__kernel_rem_pio2+0x4f2>
 800a538:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800a53c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a540:	4630      	mov	r0, r6
 800a542:	ec53 2b17 	vmov	r2, r3, d7
 800a546:	4639      	mov	r1, r7
 800a548:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a54c:	f7f5 febe 	bl	80002cc <__adddf3>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	4680      	mov	r8, r0
 800a556:	4689      	mov	r9, r1
 800a558:	4630      	mov	r0, r6
 800a55a:	4639      	mov	r1, r7
 800a55c:	f7f5 feb4 	bl	80002c8 <__aeabi_dsub>
 800a560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a564:	f7f5 feb2 	bl	80002cc <__adddf3>
 800a568:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a56c:	e9ca 0100 	strd	r0, r1, [sl]
 800a570:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800a574:	e756      	b.n	800a424 <__kernel_rem_pio2+0x4fc>
 800a576:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a57a:	f7f5 fea7 	bl	80002cc <__adddf3>
 800a57e:	3d01      	subs	r5, #1
 800a580:	e756      	b.n	800a430 <__kernel_rem_pio2+0x508>
 800a582:	9b01      	ldr	r3, [sp, #4]
 800a584:	9a01      	ldr	r2, [sp, #4]
 800a586:	601f      	str	r7, [r3, #0]
 800a588:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a58c:	605c      	str	r4, [r3, #4]
 800a58e:	609d      	str	r5, [r3, #8]
 800a590:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a594:	60d3      	str	r3, [r2, #12]
 800a596:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a59a:	6110      	str	r0, [r2, #16]
 800a59c:	6153      	str	r3, [r2, #20]
 800a59e:	e78e      	b.n	800a4be <__kernel_rem_pio2+0x596>
 800a5a0:	41700000 	.word	0x41700000
 800a5a4:	3e700000 	.word	0x3e700000

0800a5a8 <__kernel_sin>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	ec55 4b10 	vmov	r4, r5, d0
 800a5b0:	b085      	sub	sp, #20
 800a5b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a5b6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a5ba:	ed8d 1b00 	vstr	d1, [sp]
 800a5be:	9002      	str	r0, [sp, #8]
 800a5c0:	da06      	bge.n	800a5d0 <__kernel_sin+0x28>
 800a5c2:	ee10 0a10 	vmov	r0, s0
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	f7f6 fae6 	bl	8000b98 <__aeabi_d2iz>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d051      	beq.n	800a674 <__kernel_sin+0xcc>
 800a5d0:	4622      	mov	r2, r4
 800a5d2:	462b      	mov	r3, r5
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	4629      	mov	r1, r5
 800a5d8:	f7f6 f82e 	bl	8000638 <__aeabi_dmul>
 800a5dc:	4682      	mov	sl, r0
 800a5de:	468b      	mov	fp, r1
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	f7f6 f826 	bl	8000638 <__aeabi_dmul>
 800a5ec:	a341      	add	r3, pc, #260	; (adr r3, 800a6f4 <__kernel_sin+0x14c>)
 800a5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f2:	4680      	mov	r8, r0
 800a5f4:	4689      	mov	r9, r1
 800a5f6:	4650      	mov	r0, sl
 800a5f8:	4659      	mov	r1, fp
 800a5fa:	f7f6 f81d 	bl	8000638 <__aeabi_dmul>
 800a5fe:	a33f      	add	r3, pc, #252	; (adr r3, 800a6fc <__kernel_sin+0x154>)
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	f7f5 fe60 	bl	80002c8 <__aeabi_dsub>
 800a608:	4652      	mov	r2, sl
 800a60a:	465b      	mov	r3, fp
 800a60c:	f7f6 f814 	bl	8000638 <__aeabi_dmul>
 800a610:	a33c      	add	r3, pc, #240	; (adr r3, 800a704 <__kernel_sin+0x15c>)
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	f7f5 fe59 	bl	80002cc <__adddf3>
 800a61a:	4652      	mov	r2, sl
 800a61c:	465b      	mov	r3, fp
 800a61e:	f7f6 f80b 	bl	8000638 <__aeabi_dmul>
 800a622:	a33a      	add	r3, pc, #232	; (adr r3, 800a70c <__kernel_sin+0x164>)
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	f7f5 fe4e 	bl	80002c8 <__aeabi_dsub>
 800a62c:	4652      	mov	r2, sl
 800a62e:	465b      	mov	r3, fp
 800a630:	f7f6 f802 	bl	8000638 <__aeabi_dmul>
 800a634:	a337      	add	r3, pc, #220	; (adr r3, 800a714 <__kernel_sin+0x16c>)
 800a636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63a:	f7f5 fe47 	bl	80002cc <__adddf3>
 800a63e:	9b02      	ldr	r3, [sp, #8]
 800a640:	4606      	mov	r6, r0
 800a642:	460f      	mov	r7, r1
 800a644:	b9db      	cbnz	r3, 800a67e <__kernel_sin+0xd6>
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	4650      	mov	r0, sl
 800a64c:	4659      	mov	r1, fp
 800a64e:	f7f5 fff3 	bl	8000638 <__aeabi_dmul>
 800a652:	a325      	add	r3, pc, #148	; (adr r3, 800a6e8 <__kernel_sin+0x140>)
 800a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a658:	f7f5 fe36 	bl	80002c8 <__aeabi_dsub>
 800a65c:	4642      	mov	r2, r8
 800a65e:	464b      	mov	r3, r9
 800a660:	f7f5 ffea 	bl	8000638 <__aeabi_dmul>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	4620      	mov	r0, r4
 800a66a:	4629      	mov	r1, r5
 800a66c:	f7f5 fe2e 	bl	80002cc <__adddf3>
 800a670:	4604      	mov	r4, r0
 800a672:	460d      	mov	r5, r1
 800a674:	ec45 4b10 	vmov	d0, r4, r5
 800a678:	b005      	add	sp, #20
 800a67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67e:	2200      	movs	r2, #0
 800a680:	4b1b      	ldr	r3, [pc, #108]	; (800a6f0 <__kernel_sin+0x148>)
 800a682:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a686:	f7f5 ffd7 	bl	8000638 <__aeabi_dmul>
 800a68a:	4632      	mov	r2, r6
 800a68c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a690:	463b      	mov	r3, r7
 800a692:	4640      	mov	r0, r8
 800a694:	4649      	mov	r1, r9
 800a696:	f7f5 ffcf 	bl	8000638 <__aeabi_dmul>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6a2:	f7f5 fe11 	bl	80002c8 <__aeabi_dsub>
 800a6a6:	4652      	mov	r2, sl
 800a6a8:	465b      	mov	r3, fp
 800a6aa:	f7f5 ffc5 	bl	8000638 <__aeabi_dmul>
 800a6ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6b2:	f7f5 fe09 	bl	80002c8 <__aeabi_dsub>
 800a6b6:	a30c      	add	r3, pc, #48	; (adr r3, 800a6e8 <__kernel_sin+0x140>)
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	4606      	mov	r6, r0
 800a6be:	460f      	mov	r7, r1
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	f7f5 ffb8 	bl	8000638 <__aeabi_dmul>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	4639      	mov	r1, r7
 800a6d0:	f7f5 fdfc 	bl	80002cc <__adddf3>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4620      	mov	r0, r4
 800a6da:	4629      	mov	r1, r5
 800a6dc:	f7f5 fdf4 	bl	80002c8 <__aeabi_dsub>
 800a6e0:	e7c6      	b.n	800a670 <__kernel_sin+0xc8>
 800a6e2:	bf00      	nop
 800a6e4:	f3af 8000 	nop.w
 800a6e8:	55555549 	.word	0x55555549
 800a6ec:	3fc55555 	.word	0x3fc55555
 800a6f0:	3fe00000 	.word	0x3fe00000
 800a6f4:	5acfd57c 	.word	0x5acfd57c
 800a6f8:	3de5d93a 	.word	0x3de5d93a
 800a6fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800a700:	3e5ae5e6 	.word	0x3e5ae5e6
 800a704:	57b1fe7d 	.word	0x57b1fe7d
 800a708:	3ec71de3 	.word	0x3ec71de3
 800a70c:	19c161d5 	.word	0x19c161d5
 800a710:	3f2a01a0 	.word	0x3f2a01a0
 800a714:	1110f8a6 	.word	0x1110f8a6
 800a718:	3f811111 	.word	0x3f811111

0800a71c <copysign>:
 800a71c:	ec51 0b10 	vmov	r0, r1, d0
 800a720:	ee11 0a90 	vmov	r0, s3
 800a724:	ee10 2a10 	vmov	r2, s0
 800a728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a72c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a730:	ea41 0300 	orr.w	r3, r1, r0
 800a734:	ec43 2b10 	vmov	d0, r2, r3
 800a738:	4770      	bx	lr

0800a73a <abort>:
 800a73a:	b508      	push	{r3, lr}
 800a73c:	2006      	movs	r0, #6
 800a73e:	f000 fda5 	bl	800b28c <raise>
 800a742:	2001      	movs	r0, #1
 800a744:	f7fd f831 	bl	80077aa <_exit>

0800a748 <__errno>:
 800a748:	4b01      	ldr	r3, [pc, #4]	; (800a750 <__errno+0x8>)
 800a74a:	6818      	ldr	r0, [r3, #0]
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	2000000c 	.word	0x2000000c

0800a754 <__libc_init_array>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	4e0d      	ldr	r6, [pc, #52]	; (800a78c <__libc_init_array+0x38>)
 800a758:	4c0d      	ldr	r4, [pc, #52]	; (800a790 <__libc_init_array+0x3c>)
 800a75a:	1ba4      	subs	r4, r4, r6
 800a75c:	10a4      	asrs	r4, r4, #2
 800a75e:	2500      	movs	r5, #0
 800a760:	42a5      	cmp	r5, r4
 800a762:	d109      	bne.n	800a778 <__libc_init_array+0x24>
 800a764:	4e0b      	ldr	r6, [pc, #44]	; (800a794 <__libc_init_array+0x40>)
 800a766:	4c0c      	ldr	r4, [pc, #48]	; (800a798 <__libc_init_array+0x44>)
 800a768:	f002 f8c4 	bl	800c8f4 <_init>
 800a76c:	1ba4      	subs	r4, r4, r6
 800a76e:	10a4      	asrs	r4, r4, #2
 800a770:	2500      	movs	r5, #0
 800a772:	42a5      	cmp	r5, r4
 800a774:	d105      	bne.n	800a782 <__libc_init_array+0x2e>
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a77c:	4798      	blx	r3
 800a77e:	3501      	adds	r5, #1
 800a780:	e7ee      	b.n	800a760 <__libc_init_array+0xc>
 800a782:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a786:	4798      	blx	r3
 800a788:	3501      	adds	r5, #1
 800a78a:	e7f2      	b.n	800a772 <__libc_init_array+0x1e>
 800a78c:	0800cee8 	.word	0x0800cee8
 800a790:	0800cee8 	.word	0x0800cee8
 800a794:	0800cee8 	.word	0x0800cee8
 800a798:	0800cef0 	.word	0x0800cef0

0800a79c <malloc>:
 800a79c:	4b02      	ldr	r3, [pc, #8]	; (800a7a8 <malloc+0xc>)
 800a79e:	4601      	mov	r1, r0
 800a7a0:	6818      	ldr	r0, [r3, #0]
 800a7a2:	f000 b885 	b.w	800a8b0 <_malloc_r>
 800a7a6:	bf00      	nop
 800a7a8:	2000000c 	.word	0x2000000c

0800a7ac <free>:
 800a7ac:	4b02      	ldr	r3, [pc, #8]	; (800a7b8 <free+0xc>)
 800a7ae:	4601      	mov	r1, r0
 800a7b0:	6818      	ldr	r0, [r3, #0]
 800a7b2:	f000 b82f 	b.w	800a814 <_free_r>
 800a7b6:	bf00      	nop
 800a7b8:	2000000c 	.word	0x2000000c

0800a7bc <memcpy>:
 800a7bc:	b510      	push	{r4, lr}
 800a7be:	1e43      	subs	r3, r0, #1
 800a7c0:	440a      	add	r2, r1
 800a7c2:	4291      	cmp	r1, r2
 800a7c4:	d100      	bne.n	800a7c8 <memcpy+0xc>
 800a7c6:	bd10      	pop	{r4, pc}
 800a7c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7d0:	e7f7      	b.n	800a7c2 <memcpy+0x6>

0800a7d2 <memmove>:
 800a7d2:	4288      	cmp	r0, r1
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	eb01 0302 	add.w	r3, r1, r2
 800a7da:	d807      	bhi.n	800a7ec <memmove+0x1a>
 800a7dc:	1e42      	subs	r2, r0, #1
 800a7de:	4299      	cmp	r1, r3
 800a7e0:	d00a      	beq.n	800a7f8 <memmove+0x26>
 800a7e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a7ea:	e7f8      	b.n	800a7de <memmove+0xc>
 800a7ec:	4283      	cmp	r3, r0
 800a7ee:	d9f5      	bls.n	800a7dc <memmove+0xa>
 800a7f0:	1881      	adds	r1, r0, r2
 800a7f2:	1ad2      	subs	r2, r2, r3
 800a7f4:	42d3      	cmn	r3, r2
 800a7f6:	d100      	bne.n	800a7fa <memmove+0x28>
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a802:	e7f7      	b.n	800a7f4 <memmove+0x22>

0800a804 <memset>:
 800a804:	4402      	add	r2, r0
 800a806:	4603      	mov	r3, r0
 800a808:	4293      	cmp	r3, r2
 800a80a:	d100      	bne.n	800a80e <memset+0xa>
 800a80c:	4770      	bx	lr
 800a80e:	f803 1b01 	strb.w	r1, [r3], #1
 800a812:	e7f9      	b.n	800a808 <memset+0x4>

0800a814 <_free_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	4605      	mov	r5, r0
 800a818:	2900      	cmp	r1, #0
 800a81a:	d045      	beq.n	800a8a8 <_free_r+0x94>
 800a81c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a820:	1f0c      	subs	r4, r1, #4
 800a822:	2b00      	cmp	r3, #0
 800a824:	bfb8      	it	lt
 800a826:	18e4      	addlt	r4, r4, r3
 800a828:	f001 fbd8 	bl	800bfdc <__malloc_lock>
 800a82c:	4a1f      	ldr	r2, [pc, #124]	; (800a8ac <_free_r+0x98>)
 800a82e:	6813      	ldr	r3, [r2, #0]
 800a830:	4610      	mov	r0, r2
 800a832:	b933      	cbnz	r3, 800a842 <_free_r+0x2e>
 800a834:	6063      	str	r3, [r4, #4]
 800a836:	6014      	str	r4, [r2, #0]
 800a838:	4628      	mov	r0, r5
 800a83a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a83e:	f001 bbce 	b.w	800bfde <__malloc_unlock>
 800a842:	42a3      	cmp	r3, r4
 800a844:	d90c      	bls.n	800a860 <_free_r+0x4c>
 800a846:	6821      	ldr	r1, [r4, #0]
 800a848:	1862      	adds	r2, r4, r1
 800a84a:	4293      	cmp	r3, r2
 800a84c:	bf04      	itt	eq
 800a84e:	681a      	ldreq	r2, [r3, #0]
 800a850:	685b      	ldreq	r3, [r3, #4]
 800a852:	6063      	str	r3, [r4, #4]
 800a854:	bf04      	itt	eq
 800a856:	1852      	addeq	r2, r2, r1
 800a858:	6022      	streq	r2, [r4, #0]
 800a85a:	6004      	str	r4, [r0, #0]
 800a85c:	e7ec      	b.n	800a838 <_free_r+0x24>
 800a85e:	4613      	mov	r3, r2
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	b10a      	cbz	r2, 800a868 <_free_r+0x54>
 800a864:	42a2      	cmp	r2, r4
 800a866:	d9fa      	bls.n	800a85e <_free_r+0x4a>
 800a868:	6819      	ldr	r1, [r3, #0]
 800a86a:	1858      	adds	r0, r3, r1
 800a86c:	42a0      	cmp	r0, r4
 800a86e:	d10b      	bne.n	800a888 <_free_r+0x74>
 800a870:	6820      	ldr	r0, [r4, #0]
 800a872:	4401      	add	r1, r0
 800a874:	1858      	adds	r0, r3, r1
 800a876:	4282      	cmp	r2, r0
 800a878:	6019      	str	r1, [r3, #0]
 800a87a:	d1dd      	bne.n	800a838 <_free_r+0x24>
 800a87c:	6810      	ldr	r0, [r2, #0]
 800a87e:	6852      	ldr	r2, [r2, #4]
 800a880:	605a      	str	r2, [r3, #4]
 800a882:	4401      	add	r1, r0
 800a884:	6019      	str	r1, [r3, #0]
 800a886:	e7d7      	b.n	800a838 <_free_r+0x24>
 800a888:	d902      	bls.n	800a890 <_free_r+0x7c>
 800a88a:	230c      	movs	r3, #12
 800a88c:	602b      	str	r3, [r5, #0]
 800a88e:	e7d3      	b.n	800a838 <_free_r+0x24>
 800a890:	6820      	ldr	r0, [r4, #0]
 800a892:	1821      	adds	r1, r4, r0
 800a894:	428a      	cmp	r2, r1
 800a896:	bf04      	itt	eq
 800a898:	6811      	ldreq	r1, [r2, #0]
 800a89a:	6852      	ldreq	r2, [r2, #4]
 800a89c:	6062      	str	r2, [r4, #4]
 800a89e:	bf04      	itt	eq
 800a8a0:	1809      	addeq	r1, r1, r0
 800a8a2:	6021      	streq	r1, [r4, #0]
 800a8a4:	605c      	str	r4, [r3, #4]
 800a8a6:	e7c7      	b.n	800a838 <_free_r+0x24>
 800a8a8:	bd38      	pop	{r3, r4, r5, pc}
 800a8aa:	bf00      	nop
 800a8ac:	2000328c 	.word	0x2000328c

0800a8b0 <_malloc_r>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	1ccd      	adds	r5, r1, #3
 800a8b4:	f025 0503 	bic.w	r5, r5, #3
 800a8b8:	3508      	adds	r5, #8
 800a8ba:	2d0c      	cmp	r5, #12
 800a8bc:	bf38      	it	cc
 800a8be:	250c      	movcc	r5, #12
 800a8c0:	2d00      	cmp	r5, #0
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	db01      	blt.n	800a8ca <_malloc_r+0x1a>
 800a8c6:	42a9      	cmp	r1, r5
 800a8c8:	d903      	bls.n	800a8d2 <_malloc_r+0x22>
 800a8ca:	230c      	movs	r3, #12
 800a8cc:	6033      	str	r3, [r6, #0]
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	bd70      	pop	{r4, r5, r6, pc}
 800a8d2:	f001 fb83 	bl	800bfdc <__malloc_lock>
 800a8d6:	4a21      	ldr	r2, [pc, #132]	; (800a95c <_malloc_r+0xac>)
 800a8d8:	6814      	ldr	r4, [r2, #0]
 800a8da:	4621      	mov	r1, r4
 800a8dc:	b991      	cbnz	r1, 800a904 <_malloc_r+0x54>
 800a8de:	4c20      	ldr	r4, [pc, #128]	; (800a960 <_malloc_r+0xb0>)
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	b91b      	cbnz	r3, 800a8ec <_malloc_r+0x3c>
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	f000 fc99 	bl	800b21c <_sbrk_r>
 800a8ea:	6020      	str	r0, [r4, #0]
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f000 fc94 	bl	800b21c <_sbrk_r>
 800a8f4:	1c43      	adds	r3, r0, #1
 800a8f6:	d124      	bne.n	800a942 <_malloc_r+0x92>
 800a8f8:	230c      	movs	r3, #12
 800a8fa:	6033      	str	r3, [r6, #0]
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f001 fb6e 	bl	800bfde <__malloc_unlock>
 800a902:	e7e4      	b.n	800a8ce <_malloc_r+0x1e>
 800a904:	680b      	ldr	r3, [r1, #0]
 800a906:	1b5b      	subs	r3, r3, r5
 800a908:	d418      	bmi.n	800a93c <_malloc_r+0x8c>
 800a90a:	2b0b      	cmp	r3, #11
 800a90c:	d90f      	bls.n	800a92e <_malloc_r+0x7e>
 800a90e:	600b      	str	r3, [r1, #0]
 800a910:	50cd      	str	r5, [r1, r3]
 800a912:	18cc      	adds	r4, r1, r3
 800a914:	4630      	mov	r0, r6
 800a916:	f001 fb62 	bl	800bfde <__malloc_unlock>
 800a91a:	f104 000b 	add.w	r0, r4, #11
 800a91e:	1d23      	adds	r3, r4, #4
 800a920:	f020 0007 	bic.w	r0, r0, #7
 800a924:	1ac3      	subs	r3, r0, r3
 800a926:	d0d3      	beq.n	800a8d0 <_malloc_r+0x20>
 800a928:	425a      	negs	r2, r3
 800a92a:	50e2      	str	r2, [r4, r3]
 800a92c:	e7d0      	b.n	800a8d0 <_malloc_r+0x20>
 800a92e:	428c      	cmp	r4, r1
 800a930:	684b      	ldr	r3, [r1, #4]
 800a932:	bf16      	itet	ne
 800a934:	6063      	strne	r3, [r4, #4]
 800a936:	6013      	streq	r3, [r2, #0]
 800a938:	460c      	movne	r4, r1
 800a93a:	e7eb      	b.n	800a914 <_malloc_r+0x64>
 800a93c:	460c      	mov	r4, r1
 800a93e:	6849      	ldr	r1, [r1, #4]
 800a940:	e7cc      	b.n	800a8dc <_malloc_r+0x2c>
 800a942:	1cc4      	adds	r4, r0, #3
 800a944:	f024 0403 	bic.w	r4, r4, #3
 800a948:	42a0      	cmp	r0, r4
 800a94a:	d005      	beq.n	800a958 <_malloc_r+0xa8>
 800a94c:	1a21      	subs	r1, r4, r0
 800a94e:	4630      	mov	r0, r6
 800a950:	f000 fc64 	bl	800b21c <_sbrk_r>
 800a954:	3001      	adds	r0, #1
 800a956:	d0cf      	beq.n	800a8f8 <_malloc_r+0x48>
 800a958:	6025      	str	r5, [r4, #0]
 800a95a:	e7db      	b.n	800a914 <_malloc_r+0x64>
 800a95c:	2000328c 	.word	0x2000328c
 800a960:	20003290 	.word	0x20003290

0800a964 <__cvt>:
 800a964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a968:	ec55 4b10 	vmov	r4, r5, d0
 800a96c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a96e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a972:	2d00      	cmp	r5, #0
 800a974:	460e      	mov	r6, r1
 800a976:	4691      	mov	r9, r2
 800a978:	4619      	mov	r1, r3
 800a97a:	bfb8      	it	lt
 800a97c:	4622      	movlt	r2, r4
 800a97e:	462b      	mov	r3, r5
 800a980:	f027 0720 	bic.w	r7, r7, #32
 800a984:	bfbb      	ittet	lt
 800a986:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a98a:	461d      	movlt	r5, r3
 800a98c:	2300      	movge	r3, #0
 800a98e:	232d      	movlt	r3, #45	; 0x2d
 800a990:	bfb8      	it	lt
 800a992:	4614      	movlt	r4, r2
 800a994:	2f46      	cmp	r7, #70	; 0x46
 800a996:	700b      	strb	r3, [r1, #0]
 800a998:	d004      	beq.n	800a9a4 <__cvt+0x40>
 800a99a:	2f45      	cmp	r7, #69	; 0x45
 800a99c:	d100      	bne.n	800a9a0 <__cvt+0x3c>
 800a99e:	3601      	adds	r6, #1
 800a9a0:	2102      	movs	r1, #2
 800a9a2:	e000      	b.n	800a9a6 <__cvt+0x42>
 800a9a4:	2103      	movs	r1, #3
 800a9a6:	ab03      	add	r3, sp, #12
 800a9a8:	9301      	str	r3, [sp, #4]
 800a9aa:	ab02      	add	r3, sp, #8
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	4632      	mov	r2, r6
 800a9b0:	4653      	mov	r3, sl
 800a9b2:	ec45 4b10 	vmov	d0, r4, r5
 800a9b6:	f000 fd4b 	bl	800b450 <_dtoa_r>
 800a9ba:	2f47      	cmp	r7, #71	; 0x47
 800a9bc:	4680      	mov	r8, r0
 800a9be:	d102      	bne.n	800a9c6 <__cvt+0x62>
 800a9c0:	f019 0f01 	tst.w	r9, #1
 800a9c4:	d026      	beq.n	800aa14 <__cvt+0xb0>
 800a9c6:	2f46      	cmp	r7, #70	; 0x46
 800a9c8:	eb08 0906 	add.w	r9, r8, r6
 800a9cc:	d111      	bne.n	800a9f2 <__cvt+0x8e>
 800a9ce:	f898 3000 	ldrb.w	r3, [r8]
 800a9d2:	2b30      	cmp	r3, #48	; 0x30
 800a9d4:	d10a      	bne.n	800a9ec <__cvt+0x88>
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	2300      	movs	r3, #0
 800a9da:	4620      	mov	r0, r4
 800a9dc:	4629      	mov	r1, r5
 800a9de:	f7f6 f893 	bl	8000b08 <__aeabi_dcmpeq>
 800a9e2:	b918      	cbnz	r0, 800a9ec <__cvt+0x88>
 800a9e4:	f1c6 0601 	rsb	r6, r6, #1
 800a9e8:	f8ca 6000 	str.w	r6, [sl]
 800a9ec:	f8da 3000 	ldr.w	r3, [sl]
 800a9f0:	4499      	add	r9, r3
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	f7f6 f885 	bl	8000b08 <__aeabi_dcmpeq>
 800a9fe:	b938      	cbnz	r0, 800aa10 <__cvt+0xac>
 800aa00:	2230      	movs	r2, #48	; 0x30
 800aa02:	9b03      	ldr	r3, [sp, #12]
 800aa04:	454b      	cmp	r3, r9
 800aa06:	d205      	bcs.n	800aa14 <__cvt+0xb0>
 800aa08:	1c59      	adds	r1, r3, #1
 800aa0a:	9103      	str	r1, [sp, #12]
 800aa0c:	701a      	strb	r2, [r3, #0]
 800aa0e:	e7f8      	b.n	800aa02 <__cvt+0x9e>
 800aa10:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa14:	9b03      	ldr	r3, [sp, #12]
 800aa16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa18:	eba3 0308 	sub.w	r3, r3, r8
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	b004      	add	sp, #16
 800aa22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aa26 <__exponent>:
 800aa26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa28:	2900      	cmp	r1, #0
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	bfba      	itte	lt
 800aa2e:	4249      	neglt	r1, r1
 800aa30:	232d      	movlt	r3, #45	; 0x2d
 800aa32:	232b      	movge	r3, #43	; 0x2b
 800aa34:	2909      	cmp	r1, #9
 800aa36:	f804 2b02 	strb.w	r2, [r4], #2
 800aa3a:	7043      	strb	r3, [r0, #1]
 800aa3c:	dd20      	ble.n	800aa80 <__exponent+0x5a>
 800aa3e:	f10d 0307 	add.w	r3, sp, #7
 800aa42:	461f      	mov	r7, r3
 800aa44:	260a      	movs	r6, #10
 800aa46:	fb91 f5f6 	sdiv	r5, r1, r6
 800aa4a:	fb06 1115 	mls	r1, r6, r5, r1
 800aa4e:	3130      	adds	r1, #48	; 0x30
 800aa50:	2d09      	cmp	r5, #9
 800aa52:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aa56:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	dc09      	bgt.n	800aa72 <__exponent+0x4c>
 800aa5e:	3130      	adds	r1, #48	; 0x30
 800aa60:	3b02      	subs	r3, #2
 800aa62:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aa66:	42bb      	cmp	r3, r7
 800aa68:	4622      	mov	r2, r4
 800aa6a:	d304      	bcc.n	800aa76 <__exponent+0x50>
 800aa6c:	1a10      	subs	r0, r2, r0
 800aa6e:	b003      	add	sp, #12
 800aa70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa72:	4613      	mov	r3, r2
 800aa74:	e7e7      	b.n	800aa46 <__exponent+0x20>
 800aa76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa7a:	f804 2b01 	strb.w	r2, [r4], #1
 800aa7e:	e7f2      	b.n	800aa66 <__exponent+0x40>
 800aa80:	2330      	movs	r3, #48	; 0x30
 800aa82:	4419      	add	r1, r3
 800aa84:	7083      	strb	r3, [r0, #2]
 800aa86:	1d02      	adds	r2, r0, #4
 800aa88:	70c1      	strb	r1, [r0, #3]
 800aa8a:	e7ef      	b.n	800aa6c <__exponent+0x46>

0800aa8c <_printf_float>:
 800aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa90:	b08d      	sub	sp, #52	; 0x34
 800aa92:	460c      	mov	r4, r1
 800aa94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800aa98:	4616      	mov	r6, r2
 800aa9a:	461f      	mov	r7, r3
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	f001 fa8f 	bl	800bfc0 <_localeconv_r>
 800aaa2:	6803      	ldr	r3, [r0, #0]
 800aaa4:	9304      	str	r3, [sp, #16]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7f5 fc02 	bl	80002b0 <strlen>
 800aaac:	2300      	movs	r3, #0
 800aaae:	930a      	str	r3, [sp, #40]	; 0x28
 800aab0:	f8d8 3000 	ldr.w	r3, [r8]
 800aab4:	9005      	str	r0, [sp, #20]
 800aab6:	3307      	adds	r3, #7
 800aab8:	f023 0307 	bic.w	r3, r3, #7
 800aabc:	f103 0208 	add.w	r2, r3, #8
 800aac0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aac4:	f8d4 b000 	ldr.w	fp, [r4]
 800aac8:	f8c8 2000 	str.w	r2, [r8]
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aad4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aad8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aadc:	9307      	str	r3, [sp, #28]
 800aade:	f8cd 8018 	str.w	r8, [sp, #24]
 800aae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aae6:	4ba7      	ldr	r3, [pc, #668]	; (800ad84 <_printf_float+0x2f8>)
 800aae8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aaec:	f7f6 f83e 	bl	8000b6c <__aeabi_dcmpun>
 800aaf0:	bb70      	cbnz	r0, 800ab50 <_printf_float+0xc4>
 800aaf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aaf6:	4ba3      	ldr	r3, [pc, #652]	; (800ad84 <_printf_float+0x2f8>)
 800aaf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aafc:	f7f6 f818 	bl	8000b30 <__aeabi_dcmple>
 800ab00:	bb30      	cbnz	r0, 800ab50 <_printf_float+0xc4>
 800ab02:	2200      	movs	r2, #0
 800ab04:	2300      	movs	r3, #0
 800ab06:	4640      	mov	r0, r8
 800ab08:	4649      	mov	r1, r9
 800ab0a:	f7f6 f807 	bl	8000b1c <__aeabi_dcmplt>
 800ab0e:	b110      	cbz	r0, 800ab16 <_printf_float+0x8a>
 800ab10:	232d      	movs	r3, #45	; 0x2d
 800ab12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab16:	4a9c      	ldr	r2, [pc, #624]	; (800ad88 <_printf_float+0x2fc>)
 800ab18:	4b9c      	ldr	r3, [pc, #624]	; (800ad8c <_printf_float+0x300>)
 800ab1a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ab1e:	bf8c      	ite	hi
 800ab20:	4690      	movhi	r8, r2
 800ab22:	4698      	movls	r8, r3
 800ab24:	2303      	movs	r3, #3
 800ab26:	f02b 0204 	bic.w	r2, fp, #4
 800ab2a:	6123      	str	r3, [r4, #16]
 800ab2c:	6022      	str	r2, [r4, #0]
 800ab2e:	f04f 0900 	mov.w	r9, #0
 800ab32:	9700      	str	r7, [sp, #0]
 800ab34:	4633      	mov	r3, r6
 800ab36:	aa0b      	add	r2, sp, #44	; 0x2c
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	f000 f9e6 	bl	800af0c <_printf_common>
 800ab40:	3001      	adds	r0, #1
 800ab42:	f040 808d 	bne.w	800ac60 <_printf_float+0x1d4>
 800ab46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab4a:	b00d      	add	sp, #52	; 0x34
 800ab4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab50:	4642      	mov	r2, r8
 800ab52:	464b      	mov	r3, r9
 800ab54:	4640      	mov	r0, r8
 800ab56:	4649      	mov	r1, r9
 800ab58:	f7f6 f808 	bl	8000b6c <__aeabi_dcmpun>
 800ab5c:	b110      	cbz	r0, 800ab64 <_printf_float+0xd8>
 800ab5e:	4a8c      	ldr	r2, [pc, #560]	; (800ad90 <_printf_float+0x304>)
 800ab60:	4b8c      	ldr	r3, [pc, #560]	; (800ad94 <_printf_float+0x308>)
 800ab62:	e7da      	b.n	800ab1a <_printf_float+0x8e>
 800ab64:	6861      	ldr	r1, [r4, #4]
 800ab66:	1c4b      	adds	r3, r1, #1
 800ab68:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ab6c:	a80a      	add	r0, sp, #40	; 0x28
 800ab6e:	d13e      	bne.n	800abee <_printf_float+0x162>
 800ab70:	2306      	movs	r3, #6
 800ab72:	6063      	str	r3, [r4, #4]
 800ab74:	2300      	movs	r3, #0
 800ab76:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ab7a:	ab09      	add	r3, sp, #36	; 0x24
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	ec49 8b10 	vmov	d0, r8, r9
 800ab82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab86:	6022      	str	r2, [r4, #0]
 800ab88:	f8cd a004 	str.w	sl, [sp, #4]
 800ab8c:	6861      	ldr	r1, [r4, #4]
 800ab8e:	4628      	mov	r0, r5
 800ab90:	f7ff fee8 	bl	800a964 <__cvt>
 800ab94:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ab98:	2b47      	cmp	r3, #71	; 0x47
 800ab9a:	4680      	mov	r8, r0
 800ab9c:	d109      	bne.n	800abb2 <_printf_float+0x126>
 800ab9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba0:	1cd8      	adds	r0, r3, #3
 800aba2:	db02      	blt.n	800abaa <_printf_float+0x11e>
 800aba4:	6862      	ldr	r2, [r4, #4]
 800aba6:	4293      	cmp	r3, r2
 800aba8:	dd47      	ble.n	800ac3a <_printf_float+0x1ae>
 800abaa:	f1aa 0a02 	sub.w	sl, sl, #2
 800abae:	fa5f fa8a 	uxtb.w	sl, sl
 800abb2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800abb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abb8:	d824      	bhi.n	800ac04 <_printf_float+0x178>
 800abba:	3901      	subs	r1, #1
 800abbc:	4652      	mov	r2, sl
 800abbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800abc2:	9109      	str	r1, [sp, #36]	; 0x24
 800abc4:	f7ff ff2f 	bl	800aa26 <__exponent>
 800abc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abca:	1813      	adds	r3, r2, r0
 800abcc:	2a01      	cmp	r2, #1
 800abce:	4681      	mov	r9, r0
 800abd0:	6123      	str	r3, [r4, #16]
 800abd2:	dc02      	bgt.n	800abda <_printf_float+0x14e>
 800abd4:	6822      	ldr	r2, [r4, #0]
 800abd6:	07d1      	lsls	r1, r2, #31
 800abd8:	d501      	bpl.n	800abde <_printf_float+0x152>
 800abda:	3301      	adds	r3, #1
 800abdc:	6123      	str	r3, [r4, #16]
 800abde:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d0a5      	beq.n	800ab32 <_printf_float+0xa6>
 800abe6:	232d      	movs	r3, #45	; 0x2d
 800abe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abec:	e7a1      	b.n	800ab32 <_printf_float+0xa6>
 800abee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800abf2:	f000 8177 	beq.w	800aee4 <_printf_float+0x458>
 800abf6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800abfa:	d1bb      	bne.n	800ab74 <_printf_float+0xe8>
 800abfc:	2900      	cmp	r1, #0
 800abfe:	d1b9      	bne.n	800ab74 <_printf_float+0xe8>
 800ac00:	2301      	movs	r3, #1
 800ac02:	e7b6      	b.n	800ab72 <_printf_float+0xe6>
 800ac04:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ac08:	d119      	bne.n	800ac3e <_printf_float+0x1b2>
 800ac0a:	2900      	cmp	r1, #0
 800ac0c:	6863      	ldr	r3, [r4, #4]
 800ac0e:	dd0c      	ble.n	800ac2a <_printf_float+0x19e>
 800ac10:	6121      	str	r1, [r4, #16]
 800ac12:	b913      	cbnz	r3, 800ac1a <_printf_float+0x18e>
 800ac14:	6822      	ldr	r2, [r4, #0]
 800ac16:	07d2      	lsls	r2, r2, #31
 800ac18:	d502      	bpl.n	800ac20 <_printf_float+0x194>
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	440b      	add	r3, r1
 800ac1e:	6123      	str	r3, [r4, #16]
 800ac20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac22:	65a3      	str	r3, [r4, #88]	; 0x58
 800ac24:	f04f 0900 	mov.w	r9, #0
 800ac28:	e7d9      	b.n	800abde <_printf_float+0x152>
 800ac2a:	b913      	cbnz	r3, 800ac32 <_printf_float+0x1a6>
 800ac2c:	6822      	ldr	r2, [r4, #0]
 800ac2e:	07d0      	lsls	r0, r2, #31
 800ac30:	d501      	bpl.n	800ac36 <_printf_float+0x1aa>
 800ac32:	3302      	adds	r3, #2
 800ac34:	e7f3      	b.n	800ac1e <_printf_float+0x192>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e7f1      	b.n	800ac1e <_printf_float+0x192>
 800ac3a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ac3e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ac42:	4293      	cmp	r3, r2
 800ac44:	db05      	blt.n	800ac52 <_printf_float+0x1c6>
 800ac46:	6822      	ldr	r2, [r4, #0]
 800ac48:	6123      	str	r3, [r4, #16]
 800ac4a:	07d1      	lsls	r1, r2, #31
 800ac4c:	d5e8      	bpl.n	800ac20 <_printf_float+0x194>
 800ac4e:	3301      	adds	r3, #1
 800ac50:	e7e5      	b.n	800ac1e <_printf_float+0x192>
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	bfd4      	ite	le
 800ac56:	f1c3 0302 	rsble	r3, r3, #2
 800ac5a:	2301      	movgt	r3, #1
 800ac5c:	4413      	add	r3, r2
 800ac5e:	e7de      	b.n	800ac1e <_printf_float+0x192>
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	055a      	lsls	r2, r3, #21
 800ac64:	d407      	bmi.n	800ac76 <_printf_float+0x1ea>
 800ac66:	6923      	ldr	r3, [r4, #16]
 800ac68:	4642      	mov	r2, r8
 800ac6a:	4631      	mov	r1, r6
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	47b8      	blx	r7
 800ac70:	3001      	adds	r0, #1
 800ac72:	d12b      	bne.n	800accc <_printf_float+0x240>
 800ac74:	e767      	b.n	800ab46 <_printf_float+0xba>
 800ac76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ac7a:	f240 80dc 	bls.w	800ae36 <_printf_float+0x3aa>
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2300      	movs	r3, #0
 800ac82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac86:	f7f5 ff3f 	bl	8000b08 <__aeabi_dcmpeq>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d033      	beq.n	800acf6 <_printf_float+0x26a>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	4a41      	ldr	r2, [pc, #260]	; (800ad98 <_printf_float+0x30c>)
 800ac92:	4631      	mov	r1, r6
 800ac94:	4628      	mov	r0, r5
 800ac96:	47b8      	blx	r7
 800ac98:	3001      	adds	r0, #1
 800ac9a:	f43f af54 	beq.w	800ab46 <_printf_float+0xba>
 800ac9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aca2:	429a      	cmp	r2, r3
 800aca4:	db02      	blt.n	800acac <_printf_float+0x220>
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	07d8      	lsls	r0, r3, #31
 800acaa:	d50f      	bpl.n	800accc <_printf_float+0x240>
 800acac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acb0:	4631      	mov	r1, r6
 800acb2:	4628      	mov	r0, r5
 800acb4:	47b8      	blx	r7
 800acb6:	3001      	adds	r0, #1
 800acb8:	f43f af45 	beq.w	800ab46 <_printf_float+0xba>
 800acbc:	f04f 0800 	mov.w	r8, #0
 800acc0:	f104 091a 	add.w	r9, r4, #26
 800acc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acc6:	3b01      	subs	r3, #1
 800acc8:	4543      	cmp	r3, r8
 800acca:	dc09      	bgt.n	800ace0 <_printf_float+0x254>
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	079b      	lsls	r3, r3, #30
 800acd0:	f100 8103 	bmi.w	800aeda <_printf_float+0x44e>
 800acd4:	68e0      	ldr	r0, [r4, #12]
 800acd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acd8:	4298      	cmp	r0, r3
 800acda:	bfb8      	it	lt
 800acdc:	4618      	movlt	r0, r3
 800acde:	e734      	b.n	800ab4a <_printf_float+0xbe>
 800ace0:	2301      	movs	r3, #1
 800ace2:	464a      	mov	r2, r9
 800ace4:	4631      	mov	r1, r6
 800ace6:	4628      	mov	r0, r5
 800ace8:	47b8      	blx	r7
 800acea:	3001      	adds	r0, #1
 800acec:	f43f af2b 	beq.w	800ab46 <_printf_float+0xba>
 800acf0:	f108 0801 	add.w	r8, r8, #1
 800acf4:	e7e6      	b.n	800acc4 <_printf_float+0x238>
 800acf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	dc2b      	bgt.n	800ad54 <_printf_float+0x2c8>
 800acfc:	2301      	movs	r3, #1
 800acfe:	4a26      	ldr	r2, [pc, #152]	; (800ad98 <_printf_float+0x30c>)
 800ad00:	4631      	mov	r1, r6
 800ad02:	4628      	mov	r0, r5
 800ad04:	47b8      	blx	r7
 800ad06:	3001      	adds	r0, #1
 800ad08:	f43f af1d 	beq.w	800ab46 <_printf_float+0xba>
 800ad0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad0e:	b923      	cbnz	r3, 800ad1a <_printf_float+0x28e>
 800ad10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad12:	b913      	cbnz	r3, 800ad1a <_printf_float+0x28e>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	07d9      	lsls	r1, r3, #31
 800ad18:	d5d8      	bpl.n	800accc <_printf_float+0x240>
 800ad1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad1e:	4631      	mov	r1, r6
 800ad20:	4628      	mov	r0, r5
 800ad22:	47b8      	blx	r7
 800ad24:	3001      	adds	r0, #1
 800ad26:	f43f af0e 	beq.w	800ab46 <_printf_float+0xba>
 800ad2a:	f04f 0900 	mov.w	r9, #0
 800ad2e:	f104 0a1a 	add.w	sl, r4, #26
 800ad32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad34:	425b      	negs	r3, r3
 800ad36:	454b      	cmp	r3, r9
 800ad38:	dc01      	bgt.n	800ad3e <_printf_float+0x2b2>
 800ad3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad3c:	e794      	b.n	800ac68 <_printf_float+0x1dc>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	4652      	mov	r2, sl
 800ad42:	4631      	mov	r1, r6
 800ad44:	4628      	mov	r0, r5
 800ad46:	47b8      	blx	r7
 800ad48:	3001      	adds	r0, #1
 800ad4a:	f43f aefc 	beq.w	800ab46 <_printf_float+0xba>
 800ad4e:	f109 0901 	add.w	r9, r9, #1
 800ad52:	e7ee      	b.n	800ad32 <_printf_float+0x2a6>
 800ad54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	bfa8      	it	ge
 800ad5c:	461a      	movge	r2, r3
 800ad5e:	2a00      	cmp	r2, #0
 800ad60:	4691      	mov	r9, r2
 800ad62:	dd07      	ble.n	800ad74 <_printf_float+0x2e8>
 800ad64:	4613      	mov	r3, r2
 800ad66:	4631      	mov	r1, r6
 800ad68:	4642      	mov	r2, r8
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	47b8      	blx	r7
 800ad6e:	3001      	adds	r0, #1
 800ad70:	f43f aee9 	beq.w	800ab46 <_printf_float+0xba>
 800ad74:	f104 031a 	add.w	r3, r4, #26
 800ad78:	f04f 0b00 	mov.w	fp, #0
 800ad7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad80:	9306      	str	r3, [sp, #24]
 800ad82:	e015      	b.n	800adb0 <_printf_float+0x324>
 800ad84:	7fefffff 	.word	0x7fefffff
 800ad88:	0800cc84 	.word	0x0800cc84
 800ad8c:	0800cc80 	.word	0x0800cc80
 800ad90:	0800cc8c 	.word	0x0800cc8c
 800ad94:	0800cc88 	.word	0x0800cc88
 800ad98:	0800cc90 	.word	0x0800cc90
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	9a06      	ldr	r2, [sp, #24]
 800ada0:	4631      	mov	r1, r6
 800ada2:	4628      	mov	r0, r5
 800ada4:	47b8      	blx	r7
 800ada6:	3001      	adds	r0, #1
 800ada8:	f43f aecd 	beq.w	800ab46 <_printf_float+0xba>
 800adac:	f10b 0b01 	add.w	fp, fp, #1
 800adb0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800adb4:	ebaa 0309 	sub.w	r3, sl, r9
 800adb8:	455b      	cmp	r3, fp
 800adba:	dcef      	bgt.n	800ad9c <_printf_float+0x310>
 800adbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adc0:	429a      	cmp	r2, r3
 800adc2:	44d0      	add	r8, sl
 800adc4:	db15      	blt.n	800adf2 <_printf_float+0x366>
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	07da      	lsls	r2, r3, #31
 800adca:	d412      	bmi.n	800adf2 <_printf_float+0x366>
 800adcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800add0:	eba3 020a 	sub.w	r2, r3, sl
 800add4:	eba3 0a01 	sub.w	sl, r3, r1
 800add8:	4592      	cmp	sl, r2
 800adda:	bfa8      	it	ge
 800addc:	4692      	movge	sl, r2
 800adde:	f1ba 0f00 	cmp.w	sl, #0
 800ade2:	dc0e      	bgt.n	800ae02 <_printf_float+0x376>
 800ade4:	f04f 0800 	mov.w	r8, #0
 800ade8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800adec:	f104 091a 	add.w	r9, r4, #26
 800adf0:	e019      	b.n	800ae26 <_printf_float+0x39a>
 800adf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adf6:	4631      	mov	r1, r6
 800adf8:	4628      	mov	r0, r5
 800adfa:	47b8      	blx	r7
 800adfc:	3001      	adds	r0, #1
 800adfe:	d1e5      	bne.n	800adcc <_printf_float+0x340>
 800ae00:	e6a1      	b.n	800ab46 <_printf_float+0xba>
 800ae02:	4653      	mov	r3, sl
 800ae04:	4642      	mov	r2, r8
 800ae06:	4631      	mov	r1, r6
 800ae08:	4628      	mov	r0, r5
 800ae0a:	47b8      	blx	r7
 800ae0c:	3001      	adds	r0, #1
 800ae0e:	d1e9      	bne.n	800ade4 <_printf_float+0x358>
 800ae10:	e699      	b.n	800ab46 <_printf_float+0xba>
 800ae12:	2301      	movs	r3, #1
 800ae14:	464a      	mov	r2, r9
 800ae16:	4631      	mov	r1, r6
 800ae18:	4628      	mov	r0, r5
 800ae1a:	47b8      	blx	r7
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	f43f ae92 	beq.w	800ab46 <_printf_float+0xba>
 800ae22:	f108 0801 	add.w	r8, r8, #1
 800ae26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae2a:	1a9b      	subs	r3, r3, r2
 800ae2c:	eba3 030a 	sub.w	r3, r3, sl
 800ae30:	4543      	cmp	r3, r8
 800ae32:	dcee      	bgt.n	800ae12 <_printf_float+0x386>
 800ae34:	e74a      	b.n	800accc <_printf_float+0x240>
 800ae36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae38:	2a01      	cmp	r2, #1
 800ae3a:	dc01      	bgt.n	800ae40 <_printf_float+0x3b4>
 800ae3c:	07db      	lsls	r3, r3, #31
 800ae3e:	d53a      	bpl.n	800aeb6 <_printf_float+0x42a>
 800ae40:	2301      	movs	r3, #1
 800ae42:	4642      	mov	r2, r8
 800ae44:	4631      	mov	r1, r6
 800ae46:	4628      	mov	r0, r5
 800ae48:	47b8      	blx	r7
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	f43f ae7b 	beq.w	800ab46 <_printf_float+0xba>
 800ae50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae54:	4631      	mov	r1, r6
 800ae56:	4628      	mov	r0, r5
 800ae58:	47b8      	blx	r7
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	f108 0801 	add.w	r8, r8, #1
 800ae60:	f43f ae71 	beq.w	800ab46 <_printf_float+0xba>
 800ae64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae66:	2200      	movs	r2, #0
 800ae68:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800ae6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae70:	2300      	movs	r3, #0
 800ae72:	f7f5 fe49 	bl	8000b08 <__aeabi_dcmpeq>
 800ae76:	b9c8      	cbnz	r0, 800aeac <_printf_float+0x420>
 800ae78:	4653      	mov	r3, sl
 800ae7a:	4642      	mov	r2, r8
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b8      	blx	r7
 800ae82:	3001      	adds	r0, #1
 800ae84:	d10e      	bne.n	800aea4 <_printf_float+0x418>
 800ae86:	e65e      	b.n	800ab46 <_printf_float+0xba>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	4652      	mov	r2, sl
 800ae8c:	4631      	mov	r1, r6
 800ae8e:	4628      	mov	r0, r5
 800ae90:	47b8      	blx	r7
 800ae92:	3001      	adds	r0, #1
 800ae94:	f43f ae57 	beq.w	800ab46 <_printf_float+0xba>
 800ae98:	f108 0801 	add.w	r8, r8, #1
 800ae9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	4543      	cmp	r3, r8
 800aea2:	dcf1      	bgt.n	800ae88 <_printf_float+0x3fc>
 800aea4:	464b      	mov	r3, r9
 800aea6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aeaa:	e6de      	b.n	800ac6a <_printf_float+0x1de>
 800aeac:	f04f 0800 	mov.w	r8, #0
 800aeb0:	f104 0a1a 	add.w	sl, r4, #26
 800aeb4:	e7f2      	b.n	800ae9c <_printf_float+0x410>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e7df      	b.n	800ae7a <_printf_float+0x3ee>
 800aeba:	2301      	movs	r3, #1
 800aebc:	464a      	mov	r2, r9
 800aebe:	4631      	mov	r1, r6
 800aec0:	4628      	mov	r0, r5
 800aec2:	47b8      	blx	r7
 800aec4:	3001      	adds	r0, #1
 800aec6:	f43f ae3e 	beq.w	800ab46 <_printf_float+0xba>
 800aeca:	f108 0801 	add.w	r8, r8, #1
 800aece:	68e3      	ldr	r3, [r4, #12]
 800aed0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aed2:	1a9b      	subs	r3, r3, r2
 800aed4:	4543      	cmp	r3, r8
 800aed6:	dcf0      	bgt.n	800aeba <_printf_float+0x42e>
 800aed8:	e6fc      	b.n	800acd4 <_printf_float+0x248>
 800aeda:	f04f 0800 	mov.w	r8, #0
 800aede:	f104 0919 	add.w	r9, r4, #25
 800aee2:	e7f4      	b.n	800aece <_printf_float+0x442>
 800aee4:	2900      	cmp	r1, #0
 800aee6:	f43f ae8b 	beq.w	800ac00 <_printf_float+0x174>
 800aeea:	2300      	movs	r3, #0
 800aeec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800aef0:	ab09      	add	r3, sp, #36	; 0x24
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	ec49 8b10 	vmov	d0, r8, r9
 800aef8:	6022      	str	r2, [r4, #0]
 800aefa:	f8cd a004 	str.w	sl, [sp, #4]
 800aefe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af02:	4628      	mov	r0, r5
 800af04:	f7ff fd2e 	bl	800a964 <__cvt>
 800af08:	4680      	mov	r8, r0
 800af0a:	e648      	b.n	800ab9e <_printf_float+0x112>

0800af0c <_printf_common>:
 800af0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af10:	4691      	mov	r9, r2
 800af12:	461f      	mov	r7, r3
 800af14:	688a      	ldr	r2, [r1, #8]
 800af16:	690b      	ldr	r3, [r1, #16]
 800af18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af1c:	4293      	cmp	r3, r2
 800af1e:	bfb8      	it	lt
 800af20:	4613      	movlt	r3, r2
 800af22:	f8c9 3000 	str.w	r3, [r9]
 800af26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af2a:	4606      	mov	r6, r0
 800af2c:	460c      	mov	r4, r1
 800af2e:	b112      	cbz	r2, 800af36 <_printf_common+0x2a>
 800af30:	3301      	adds	r3, #1
 800af32:	f8c9 3000 	str.w	r3, [r9]
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	0699      	lsls	r1, r3, #26
 800af3a:	bf42      	ittt	mi
 800af3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800af40:	3302      	addmi	r3, #2
 800af42:	f8c9 3000 	strmi.w	r3, [r9]
 800af46:	6825      	ldr	r5, [r4, #0]
 800af48:	f015 0506 	ands.w	r5, r5, #6
 800af4c:	d107      	bne.n	800af5e <_printf_common+0x52>
 800af4e:	f104 0a19 	add.w	sl, r4, #25
 800af52:	68e3      	ldr	r3, [r4, #12]
 800af54:	f8d9 2000 	ldr.w	r2, [r9]
 800af58:	1a9b      	subs	r3, r3, r2
 800af5a:	42ab      	cmp	r3, r5
 800af5c:	dc28      	bgt.n	800afb0 <_printf_common+0xa4>
 800af5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800af62:	6822      	ldr	r2, [r4, #0]
 800af64:	3300      	adds	r3, #0
 800af66:	bf18      	it	ne
 800af68:	2301      	movne	r3, #1
 800af6a:	0692      	lsls	r2, r2, #26
 800af6c:	d42d      	bmi.n	800afca <_printf_common+0xbe>
 800af6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af72:	4639      	mov	r1, r7
 800af74:	4630      	mov	r0, r6
 800af76:	47c0      	blx	r8
 800af78:	3001      	adds	r0, #1
 800af7a:	d020      	beq.n	800afbe <_printf_common+0xb2>
 800af7c:	6823      	ldr	r3, [r4, #0]
 800af7e:	68e5      	ldr	r5, [r4, #12]
 800af80:	f8d9 2000 	ldr.w	r2, [r9]
 800af84:	f003 0306 	and.w	r3, r3, #6
 800af88:	2b04      	cmp	r3, #4
 800af8a:	bf08      	it	eq
 800af8c:	1aad      	subeq	r5, r5, r2
 800af8e:	68a3      	ldr	r3, [r4, #8]
 800af90:	6922      	ldr	r2, [r4, #16]
 800af92:	bf0c      	ite	eq
 800af94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af98:	2500      	movne	r5, #0
 800af9a:	4293      	cmp	r3, r2
 800af9c:	bfc4      	itt	gt
 800af9e:	1a9b      	subgt	r3, r3, r2
 800afa0:	18ed      	addgt	r5, r5, r3
 800afa2:	f04f 0900 	mov.w	r9, #0
 800afa6:	341a      	adds	r4, #26
 800afa8:	454d      	cmp	r5, r9
 800afaa:	d11a      	bne.n	800afe2 <_printf_common+0xd6>
 800afac:	2000      	movs	r0, #0
 800afae:	e008      	b.n	800afc2 <_printf_common+0xb6>
 800afb0:	2301      	movs	r3, #1
 800afb2:	4652      	mov	r2, sl
 800afb4:	4639      	mov	r1, r7
 800afb6:	4630      	mov	r0, r6
 800afb8:	47c0      	blx	r8
 800afba:	3001      	adds	r0, #1
 800afbc:	d103      	bne.n	800afc6 <_printf_common+0xba>
 800afbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc6:	3501      	adds	r5, #1
 800afc8:	e7c3      	b.n	800af52 <_printf_common+0x46>
 800afca:	18e1      	adds	r1, r4, r3
 800afcc:	1c5a      	adds	r2, r3, #1
 800afce:	2030      	movs	r0, #48	; 0x30
 800afd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afd4:	4422      	add	r2, r4
 800afd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afde:	3302      	adds	r3, #2
 800afe0:	e7c5      	b.n	800af6e <_printf_common+0x62>
 800afe2:	2301      	movs	r3, #1
 800afe4:	4622      	mov	r2, r4
 800afe6:	4639      	mov	r1, r7
 800afe8:	4630      	mov	r0, r6
 800afea:	47c0      	blx	r8
 800afec:	3001      	adds	r0, #1
 800afee:	d0e6      	beq.n	800afbe <_printf_common+0xb2>
 800aff0:	f109 0901 	add.w	r9, r9, #1
 800aff4:	e7d8      	b.n	800afa8 <_printf_common+0x9c>
	...

0800aff8 <_printf_i>:
 800aff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800affc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b000:	460c      	mov	r4, r1
 800b002:	7e09      	ldrb	r1, [r1, #24]
 800b004:	b085      	sub	sp, #20
 800b006:	296e      	cmp	r1, #110	; 0x6e
 800b008:	4617      	mov	r7, r2
 800b00a:	4606      	mov	r6, r0
 800b00c:	4698      	mov	r8, r3
 800b00e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b010:	f000 80b3 	beq.w	800b17a <_printf_i+0x182>
 800b014:	d822      	bhi.n	800b05c <_printf_i+0x64>
 800b016:	2963      	cmp	r1, #99	; 0x63
 800b018:	d036      	beq.n	800b088 <_printf_i+0x90>
 800b01a:	d80a      	bhi.n	800b032 <_printf_i+0x3a>
 800b01c:	2900      	cmp	r1, #0
 800b01e:	f000 80b9 	beq.w	800b194 <_printf_i+0x19c>
 800b022:	2958      	cmp	r1, #88	; 0x58
 800b024:	f000 8083 	beq.w	800b12e <_printf_i+0x136>
 800b028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b02c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b030:	e032      	b.n	800b098 <_printf_i+0xa0>
 800b032:	2964      	cmp	r1, #100	; 0x64
 800b034:	d001      	beq.n	800b03a <_printf_i+0x42>
 800b036:	2969      	cmp	r1, #105	; 0x69
 800b038:	d1f6      	bne.n	800b028 <_printf_i+0x30>
 800b03a:	6820      	ldr	r0, [r4, #0]
 800b03c:	6813      	ldr	r3, [r2, #0]
 800b03e:	0605      	lsls	r5, r0, #24
 800b040:	f103 0104 	add.w	r1, r3, #4
 800b044:	d52a      	bpl.n	800b09c <_printf_i+0xa4>
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6011      	str	r1, [r2, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	da03      	bge.n	800b056 <_printf_i+0x5e>
 800b04e:	222d      	movs	r2, #45	; 0x2d
 800b050:	425b      	negs	r3, r3
 800b052:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b056:	486f      	ldr	r0, [pc, #444]	; (800b214 <_printf_i+0x21c>)
 800b058:	220a      	movs	r2, #10
 800b05a:	e039      	b.n	800b0d0 <_printf_i+0xd8>
 800b05c:	2973      	cmp	r1, #115	; 0x73
 800b05e:	f000 809d 	beq.w	800b19c <_printf_i+0x1a4>
 800b062:	d808      	bhi.n	800b076 <_printf_i+0x7e>
 800b064:	296f      	cmp	r1, #111	; 0x6f
 800b066:	d020      	beq.n	800b0aa <_printf_i+0xb2>
 800b068:	2970      	cmp	r1, #112	; 0x70
 800b06a:	d1dd      	bne.n	800b028 <_printf_i+0x30>
 800b06c:	6823      	ldr	r3, [r4, #0]
 800b06e:	f043 0320 	orr.w	r3, r3, #32
 800b072:	6023      	str	r3, [r4, #0]
 800b074:	e003      	b.n	800b07e <_printf_i+0x86>
 800b076:	2975      	cmp	r1, #117	; 0x75
 800b078:	d017      	beq.n	800b0aa <_printf_i+0xb2>
 800b07a:	2978      	cmp	r1, #120	; 0x78
 800b07c:	d1d4      	bne.n	800b028 <_printf_i+0x30>
 800b07e:	2378      	movs	r3, #120	; 0x78
 800b080:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b084:	4864      	ldr	r0, [pc, #400]	; (800b218 <_printf_i+0x220>)
 800b086:	e055      	b.n	800b134 <_printf_i+0x13c>
 800b088:	6813      	ldr	r3, [r2, #0]
 800b08a:	1d19      	adds	r1, r3, #4
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	6011      	str	r1, [r2, #0]
 800b090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b098:	2301      	movs	r3, #1
 800b09a:	e08c      	b.n	800b1b6 <_printf_i+0x1be>
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6011      	str	r1, [r2, #0]
 800b0a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0a4:	bf18      	it	ne
 800b0a6:	b21b      	sxthne	r3, r3
 800b0a8:	e7cf      	b.n	800b04a <_printf_i+0x52>
 800b0aa:	6813      	ldr	r3, [r2, #0]
 800b0ac:	6825      	ldr	r5, [r4, #0]
 800b0ae:	1d18      	adds	r0, r3, #4
 800b0b0:	6010      	str	r0, [r2, #0]
 800b0b2:	0628      	lsls	r0, r5, #24
 800b0b4:	d501      	bpl.n	800b0ba <_printf_i+0xc2>
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	e002      	b.n	800b0c0 <_printf_i+0xc8>
 800b0ba:	0668      	lsls	r0, r5, #25
 800b0bc:	d5fb      	bpl.n	800b0b6 <_printf_i+0xbe>
 800b0be:	881b      	ldrh	r3, [r3, #0]
 800b0c0:	4854      	ldr	r0, [pc, #336]	; (800b214 <_printf_i+0x21c>)
 800b0c2:	296f      	cmp	r1, #111	; 0x6f
 800b0c4:	bf14      	ite	ne
 800b0c6:	220a      	movne	r2, #10
 800b0c8:	2208      	moveq	r2, #8
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0d0:	6865      	ldr	r5, [r4, #4]
 800b0d2:	60a5      	str	r5, [r4, #8]
 800b0d4:	2d00      	cmp	r5, #0
 800b0d6:	f2c0 8095 	blt.w	800b204 <_printf_i+0x20c>
 800b0da:	6821      	ldr	r1, [r4, #0]
 800b0dc:	f021 0104 	bic.w	r1, r1, #4
 800b0e0:	6021      	str	r1, [r4, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d13d      	bne.n	800b162 <_printf_i+0x16a>
 800b0e6:	2d00      	cmp	r5, #0
 800b0e8:	f040 808e 	bne.w	800b208 <_printf_i+0x210>
 800b0ec:	4665      	mov	r5, ip
 800b0ee:	2a08      	cmp	r2, #8
 800b0f0:	d10b      	bne.n	800b10a <_printf_i+0x112>
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	07db      	lsls	r3, r3, #31
 800b0f6:	d508      	bpl.n	800b10a <_printf_i+0x112>
 800b0f8:	6923      	ldr	r3, [r4, #16]
 800b0fa:	6862      	ldr	r2, [r4, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	bfde      	ittt	le
 800b100:	2330      	movle	r3, #48	; 0x30
 800b102:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b106:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b10a:	ebac 0305 	sub.w	r3, ip, r5
 800b10e:	6123      	str	r3, [r4, #16]
 800b110:	f8cd 8000 	str.w	r8, [sp]
 800b114:	463b      	mov	r3, r7
 800b116:	aa03      	add	r2, sp, #12
 800b118:	4621      	mov	r1, r4
 800b11a:	4630      	mov	r0, r6
 800b11c:	f7ff fef6 	bl	800af0c <_printf_common>
 800b120:	3001      	adds	r0, #1
 800b122:	d14d      	bne.n	800b1c0 <_printf_i+0x1c8>
 800b124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b128:	b005      	add	sp, #20
 800b12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b12e:	4839      	ldr	r0, [pc, #228]	; (800b214 <_printf_i+0x21c>)
 800b130:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b134:	6813      	ldr	r3, [r2, #0]
 800b136:	6821      	ldr	r1, [r4, #0]
 800b138:	1d1d      	adds	r5, r3, #4
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6015      	str	r5, [r2, #0]
 800b13e:	060a      	lsls	r2, r1, #24
 800b140:	d50b      	bpl.n	800b15a <_printf_i+0x162>
 800b142:	07ca      	lsls	r2, r1, #31
 800b144:	bf44      	itt	mi
 800b146:	f041 0120 	orrmi.w	r1, r1, #32
 800b14a:	6021      	strmi	r1, [r4, #0]
 800b14c:	b91b      	cbnz	r3, 800b156 <_printf_i+0x15e>
 800b14e:	6822      	ldr	r2, [r4, #0]
 800b150:	f022 0220 	bic.w	r2, r2, #32
 800b154:	6022      	str	r2, [r4, #0]
 800b156:	2210      	movs	r2, #16
 800b158:	e7b7      	b.n	800b0ca <_printf_i+0xd2>
 800b15a:	064d      	lsls	r5, r1, #25
 800b15c:	bf48      	it	mi
 800b15e:	b29b      	uxthmi	r3, r3
 800b160:	e7ef      	b.n	800b142 <_printf_i+0x14a>
 800b162:	4665      	mov	r5, ip
 800b164:	fbb3 f1f2 	udiv	r1, r3, r2
 800b168:	fb02 3311 	mls	r3, r2, r1, r3
 800b16c:	5cc3      	ldrb	r3, [r0, r3]
 800b16e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b172:	460b      	mov	r3, r1
 800b174:	2900      	cmp	r1, #0
 800b176:	d1f5      	bne.n	800b164 <_printf_i+0x16c>
 800b178:	e7b9      	b.n	800b0ee <_printf_i+0xf6>
 800b17a:	6813      	ldr	r3, [r2, #0]
 800b17c:	6825      	ldr	r5, [r4, #0]
 800b17e:	6961      	ldr	r1, [r4, #20]
 800b180:	1d18      	adds	r0, r3, #4
 800b182:	6010      	str	r0, [r2, #0]
 800b184:	0628      	lsls	r0, r5, #24
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	d501      	bpl.n	800b18e <_printf_i+0x196>
 800b18a:	6019      	str	r1, [r3, #0]
 800b18c:	e002      	b.n	800b194 <_printf_i+0x19c>
 800b18e:	066a      	lsls	r2, r5, #25
 800b190:	d5fb      	bpl.n	800b18a <_printf_i+0x192>
 800b192:	8019      	strh	r1, [r3, #0]
 800b194:	2300      	movs	r3, #0
 800b196:	6123      	str	r3, [r4, #16]
 800b198:	4665      	mov	r5, ip
 800b19a:	e7b9      	b.n	800b110 <_printf_i+0x118>
 800b19c:	6813      	ldr	r3, [r2, #0]
 800b19e:	1d19      	adds	r1, r3, #4
 800b1a0:	6011      	str	r1, [r2, #0]
 800b1a2:	681d      	ldr	r5, [r3, #0]
 800b1a4:	6862      	ldr	r2, [r4, #4]
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	f7f5 f831 	bl	8000210 <memchr>
 800b1ae:	b108      	cbz	r0, 800b1b4 <_printf_i+0x1bc>
 800b1b0:	1b40      	subs	r0, r0, r5
 800b1b2:	6060      	str	r0, [r4, #4]
 800b1b4:	6863      	ldr	r3, [r4, #4]
 800b1b6:	6123      	str	r3, [r4, #16]
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1be:	e7a7      	b.n	800b110 <_printf_i+0x118>
 800b1c0:	6923      	ldr	r3, [r4, #16]
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	4639      	mov	r1, r7
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	47c0      	blx	r8
 800b1ca:	3001      	adds	r0, #1
 800b1cc:	d0aa      	beq.n	800b124 <_printf_i+0x12c>
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	079b      	lsls	r3, r3, #30
 800b1d2:	d413      	bmi.n	800b1fc <_printf_i+0x204>
 800b1d4:	68e0      	ldr	r0, [r4, #12]
 800b1d6:	9b03      	ldr	r3, [sp, #12]
 800b1d8:	4298      	cmp	r0, r3
 800b1da:	bfb8      	it	lt
 800b1dc:	4618      	movlt	r0, r3
 800b1de:	e7a3      	b.n	800b128 <_printf_i+0x130>
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	464a      	mov	r2, r9
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	47c0      	blx	r8
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	d09a      	beq.n	800b124 <_printf_i+0x12c>
 800b1ee:	3501      	adds	r5, #1
 800b1f0:	68e3      	ldr	r3, [r4, #12]
 800b1f2:	9a03      	ldr	r2, [sp, #12]
 800b1f4:	1a9b      	subs	r3, r3, r2
 800b1f6:	42ab      	cmp	r3, r5
 800b1f8:	dcf2      	bgt.n	800b1e0 <_printf_i+0x1e8>
 800b1fa:	e7eb      	b.n	800b1d4 <_printf_i+0x1dc>
 800b1fc:	2500      	movs	r5, #0
 800b1fe:	f104 0919 	add.w	r9, r4, #25
 800b202:	e7f5      	b.n	800b1f0 <_printf_i+0x1f8>
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1ac      	bne.n	800b162 <_printf_i+0x16a>
 800b208:	7803      	ldrb	r3, [r0, #0]
 800b20a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b20e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b212:	e76c      	b.n	800b0ee <_printf_i+0xf6>
 800b214:	0800cc92 	.word	0x0800cc92
 800b218:	0800cca3 	.word	0x0800cca3

0800b21c <_sbrk_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	4c06      	ldr	r4, [pc, #24]	; (800b238 <_sbrk_r+0x1c>)
 800b220:	2300      	movs	r3, #0
 800b222:	4605      	mov	r5, r0
 800b224:	4608      	mov	r0, r1
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	f7fc faca 	bl	80077c0 <_sbrk>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d102      	bne.n	800b236 <_sbrk_r+0x1a>
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	b103      	cbz	r3, 800b236 <_sbrk_r+0x1a>
 800b234:	602b      	str	r3, [r5, #0]
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	20003298 	.word	0x20003298

0800b23c <_raise_r>:
 800b23c:	291f      	cmp	r1, #31
 800b23e:	b538      	push	{r3, r4, r5, lr}
 800b240:	4604      	mov	r4, r0
 800b242:	460d      	mov	r5, r1
 800b244:	d904      	bls.n	800b250 <_raise_r+0x14>
 800b246:	2316      	movs	r3, #22
 800b248:	6003      	str	r3, [r0, #0]
 800b24a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b24e:	bd38      	pop	{r3, r4, r5, pc}
 800b250:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b252:	b112      	cbz	r2, 800b25a <_raise_r+0x1e>
 800b254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b258:	b94b      	cbnz	r3, 800b26e <_raise_r+0x32>
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 f830 	bl	800b2c0 <_getpid_r>
 800b260:	462a      	mov	r2, r5
 800b262:	4601      	mov	r1, r0
 800b264:	4620      	mov	r0, r4
 800b266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b26a:	f000 b817 	b.w	800b29c <_kill_r>
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d00a      	beq.n	800b288 <_raise_r+0x4c>
 800b272:	1c59      	adds	r1, r3, #1
 800b274:	d103      	bne.n	800b27e <_raise_r+0x42>
 800b276:	2316      	movs	r3, #22
 800b278:	6003      	str	r3, [r0, #0]
 800b27a:	2001      	movs	r0, #1
 800b27c:	e7e7      	b.n	800b24e <_raise_r+0x12>
 800b27e:	2400      	movs	r4, #0
 800b280:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b284:	4628      	mov	r0, r5
 800b286:	4798      	blx	r3
 800b288:	2000      	movs	r0, #0
 800b28a:	e7e0      	b.n	800b24e <_raise_r+0x12>

0800b28c <raise>:
 800b28c:	4b02      	ldr	r3, [pc, #8]	; (800b298 <raise+0xc>)
 800b28e:	4601      	mov	r1, r0
 800b290:	6818      	ldr	r0, [r3, #0]
 800b292:	f7ff bfd3 	b.w	800b23c <_raise_r>
 800b296:	bf00      	nop
 800b298:	2000000c 	.word	0x2000000c

0800b29c <_kill_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4c07      	ldr	r4, [pc, #28]	; (800b2bc <_kill_r+0x20>)
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	f7fc fa6e 	bl	800778a <_kill>
 800b2ae:	1c43      	adds	r3, r0, #1
 800b2b0:	d102      	bne.n	800b2b8 <_kill_r+0x1c>
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	b103      	cbz	r3, 800b2b8 <_kill_r+0x1c>
 800b2b6:	602b      	str	r3, [r5, #0]
 800b2b8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20003298 	.word	0x20003298

0800b2c0 <_getpid_r>:
 800b2c0:	f7fc ba5b 	b.w	800777a <_getpid>

0800b2c4 <_vsniprintf_r>:
 800b2c4:	b530      	push	{r4, r5, lr}
 800b2c6:	1e14      	subs	r4, r2, #0
 800b2c8:	4605      	mov	r5, r0
 800b2ca:	b09b      	sub	sp, #108	; 0x6c
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	da05      	bge.n	800b2dc <_vsniprintf_r+0x18>
 800b2d0:	238b      	movs	r3, #139	; 0x8b
 800b2d2:	602b      	str	r3, [r5, #0]
 800b2d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2d8:	b01b      	add	sp, #108	; 0x6c
 800b2da:	bd30      	pop	{r4, r5, pc}
 800b2dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b2e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b2e4:	bf14      	ite	ne
 800b2e6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b2ea:	4623      	moveq	r3, r4
 800b2ec:	9302      	str	r3, [sp, #8]
 800b2ee:	9305      	str	r3, [sp, #20]
 800b2f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2f4:	9100      	str	r1, [sp, #0]
 800b2f6:	9104      	str	r1, [sp, #16]
 800b2f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b300:	4669      	mov	r1, sp
 800b302:	4628      	mov	r0, r5
 800b304:	f001 f9b0 	bl	800c668 <_svfiprintf_r>
 800b308:	1c43      	adds	r3, r0, #1
 800b30a:	bfbc      	itt	lt
 800b30c:	238b      	movlt	r3, #139	; 0x8b
 800b30e:	602b      	strlt	r3, [r5, #0]
 800b310:	2c00      	cmp	r4, #0
 800b312:	d0e1      	beq.n	800b2d8 <_vsniprintf_r+0x14>
 800b314:	9b00      	ldr	r3, [sp, #0]
 800b316:	2200      	movs	r2, #0
 800b318:	701a      	strb	r2, [r3, #0]
 800b31a:	e7dd      	b.n	800b2d8 <_vsniprintf_r+0x14>

0800b31c <vsniprintf>:
 800b31c:	b507      	push	{r0, r1, r2, lr}
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	4613      	mov	r3, r2
 800b322:	460a      	mov	r2, r1
 800b324:	4601      	mov	r1, r0
 800b326:	4803      	ldr	r0, [pc, #12]	; (800b334 <vsniprintf+0x18>)
 800b328:	6800      	ldr	r0, [r0, #0]
 800b32a:	f7ff ffcb 	bl	800b2c4 <_vsniprintf_r>
 800b32e:	b003      	add	sp, #12
 800b330:	f85d fb04 	ldr.w	pc, [sp], #4
 800b334:	2000000c 	.word	0x2000000c

0800b338 <quorem>:
 800b338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	6903      	ldr	r3, [r0, #16]
 800b33e:	690c      	ldr	r4, [r1, #16]
 800b340:	42a3      	cmp	r3, r4
 800b342:	4680      	mov	r8, r0
 800b344:	f2c0 8082 	blt.w	800b44c <quorem+0x114>
 800b348:	3c01      	subs	r4, #1
 800b34a:	f101 0714 	add.w	r7, r1, #20
 800b34e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b352:	f100 0614 	add.w	r6, r0, #20
 800b356:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b35a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b35e:	eb06 030c 	add.w	r3, r6, ip
 800b362:	3501      	adds	r5, #1
 800b364:	eb07 090c 	add.w	r9, r7, ip
 800b368:	9301      	str	r3, [sp, #4]
 800b36a:	fbb0 f5f5 	udiv	r5, r0, r5
 800b36e:	b395      	cbz	r5, 800b3d6 <quorem+0x9e>
 800b370:	f04f 0a00 	mov.w	sl, #0
 800b374:	4638      	mov	r0, r7
 800b376:	46b6      	mov	lr, r6
 800b378:	46d3      	mov	fp, sl
 800b37a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b37e:	b293      	uxth	r3, r2
 800b380:	fb05 a303 	mla	r3, r5, r3, sl
 800b384:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b388:	b29b      	uxth	r3, r3
 800b38a:	ebab 0303 	sub.w	r3, fp, r3
 800b38e:	0c12      	lsrs	r2, r2, #16
 800b390:	f8de b000 	ldr.w	fp, [lr]
 800b394:	fb05 a202 	mla	r2, r5, r2, sl
 800b398:	fa13 f38b 	uxtah	r3, r3, fp
 800b39c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b3a0:	fa1f fb82 	uxth.w	fp, r2
 800b3a4:	f8de 2000 	ldr.w	r2, [lr]
 800b3a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b3ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3b6:	4581      	cmp	r9, r0
 800b3b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b3bc:	f84e 3b04 	str.w	r3, [lr], #4
 800b3c0:	d2db      	bcs.n	800b37a <quorem+0x42>
 800b3c2:	f856 300c 	ldr.w	r3, [r6, ip]
 800b3c6:	b933      	cbnz	r3, 800b3d6 <quorem+0x9e>
 800b3c8:	9b01      	ldr	r3, [sp, #4]
 800b3ca:	3b04      	subs	r3, #4
 800b3cc:	429e      	cmp	r6, r3
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	d330      	bcc.n	800b434 <quorem+0xfc>
 800b3d2:	f8c8 4010 	str.w	r4, [r8, #16]
 800b3d6:	4640      	mov	r0, r8
 800b3d8:	f001 f818 	bl	800c40c <__mcmp>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	db25      	blt.n	800b42c <quorem+0xf4>
 800b3e0:	3501      	adds	r5, #1
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f04f 0c00 	mov.w	ip, #0
 800b3e8:	f857 2b04 	ldr.w	r2, [r7], #4
 800b3ec:	f8d0 e000 	ldr.w	lr, [r0]
 800b3f0:	b293      	uxth	r3, r2
 800b3f2:	ebac 0303 	sub.w	r3, ip, r3
 800b3f6:	0c12      	lsrs	r2, r2, #16
 800b3f8:	fa13 f38e 	uxtah	r3, r3, lr
 800b3fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b404:	b29b      	uxth	r3, r3
 800b406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b40a:	45b9      	cmp	r9, r7
 800b40c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b410:	f840 3b04 	str.w	r3, [r0], #4
 800b414:	d2e8      	bcs.n	800b3e8 <quorem+0xb0>
 800b416:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b41a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b41e:	b92a      	cbnz	r2, 800b42c <quorem+0xf4>
 800b420:	3b04      	subs	r3, #4
 800b422:	429e      	cmp	r6, r3
 800b424:	461a      	mov	r2, r3
 800b426:	d30b      	bcc.n	800b440 <quorem+0x108>
 800b428:	f8c8 4010 	str.w	r4, [r8, #16]
 800b42c:	4628      	mov	r0, r5
 800b42e:	b003      	add	sp, #12
 800b430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b434:	6812      	ldr	r2, [r2, #0]
 800b436:	3b04      	subs	r3, #4
 800b438:	2a00      	cmp	r2, #0
 800b43a:	d1ca      	bne.n	800b3d2 <quorem+0x9a>
 800b43c:	3c01      	subs	r4, #1
 800b43e:	e7c5      	b.n	800b3cc <quorem+0x94>
 800b440:	6812      	ldr	r2, [r2, #0]
 800b442:	3b04      	subs	r3, #4
 800b444:	2a00      	cmp	r2, #0
 800b446:	d1ef      	bne.n	800b428 <quorem+0xf0>
 800b448:	3c01      	subs	r4, #1
 800b44a:	e7ea      	b.n	800b422 <quorem+0xea>
 800b44c:	2000      	movs	r0, #0
 800b44e:	e7ee      	b.n	800b42e <quorem+0xf6>

0800b450 <_dtoa_r>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	ec57 6b10 	vmov	r6, r7, d0
 800b458:	b097      	sub	sp, #92	; 0x5c
 800b45a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b45c:	9106      	str	r1, [sp, #24]
 800b45e:	4604      	mov	r4, r0
 800b460:	920b      	str	r2, [sp, #44]	; 0x2c
 800b462:	9312      	str	r3, [sp, #72]	; 0x48
 800b464:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b468:	e9cd 6700 	strd	r6, r7, [sp]
 800b46c:	b93d      	cbnz	r5, 800b47e <_dtoa_r+0x2e>
 800b46e:	2010      	movs	r0, #16
 800b470:	f7ff f994 	bl	800a79c <malloc>
 800b474:	6260      	str	r0, [r4, #36]	; 0x24
 800b476:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b47a:	6005      	str	r5, [r0, #0]
 800b47c:	60c5      	str	r5, [r0, #12]
 800b47e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b480:	6819      	ldr	r1, [r3, #0]
 800b482:	b151      	cbz	r1, 800b49a <_dtoa_r+0x4a>
 800b484:	685a      	ldr	r2, [r3, #4]
 800b486:	604a      	str	r2, [r1, #4]
 800b488:	2301      	movs	r3, #1
 800b48a:	4093      	lsls	r3, r2
 800b48c:	608b      	str	r3, [r1, #8]
 800b48e:	4620      	mov	r0, r4
 800b490:	f000 fdda 	bl	800c048 <_Bfree>
 800b494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b496:	2200      	movs	r2, #0
 800b498:	601a      	str	r2, [r3, #0]
 800b49a:	1e3b      	subs	r3, r7, #0
 800b49c:	bfbb      	ittet	lt
 800b49e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b4a2:	9301      	strlt	r3, [sp, #4]
 800b4a4:	2300      	movge	r3, #0
 800b4a6:	2201      	movlt	r2, #1
 800b4a8:	bfac      	ite	ge
 800b4aa:	f8c8 3000 	strge.w	r3, [r8]
 800b4ae:	f8c8 2000 	strlt.w	r2, [r8]
 800b4b2:	4baf      	ldr	r3, [pc, #700]	; (800b770 <_dtoa_r+0x320>)
 800b4b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b4b8:	ea33 0308 	bics.w	r3, r3, r8
 800b4bc:	d114      	bne.n	800b4e8 <_dtoa_r+0x98>
 800b4be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b4c4:	6013      	str	r3, [r2, #0]
 800b4c6:	9b00      	ldr	r3, [sp, #0]
 800b4c8:	b923      	cbnz	r3, 800b4d4 <_dtoa_r+0x84>
 800b4ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	f000 8542 	beq.w	800bf58 <_dtoa_r+0xb08>
 800b4d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b784 <_dtoa_r+0x334>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 8544 	beq.w	800bf68 <_dtoa_r+0xb18>
 800b4e0:	f10b 0303 	add.w	r3, fp, #3
 800b4e4:	f000 bd3e 	b.w	800bf64 <_dtoa_r+0xb14>
 800b4e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f7f5 fb08 	bl	8000b08 <__aeabi_dcmpeq>
 800b4f8:	4681      	mov	r9, r0
 800b4fa:	b168      	cbz	r0, 800b518 <_dtoa_r+0xc8>
 800b4fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4fe:	2301      	movs	r3, #1
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 8524 	beq.w	800bf52 <_dtoa_r+0xb02>
 800b50a:	4b9a      	ldr	r3, [pc, #616]	; (800b774 <_dtoa_r+0x324>)
 800b50c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b50e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800b512:	6013      	str	r3, [r2, #0]
 800b514:	f000 bd28 	b.w	800bf68 <_dtoa_r+0xb18>
 800b518:	aa14      	add	r2, sp, #80	; 0x50
 800b51a:	a915      	add	r1, sp, #84	; 0x54
 800b51c:	ec47 6b10 	vmov	d0, r6, r7
 800b520:	4620      	mov	r0, r4
 800b522:	f000 ffea 	bl	800c4fa <__d2b>
 800b526:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b52a:	9004      	str	r0, [sp, #16]
 800b52c:	2d00      	cmp	r5, #0
 800b52e:	d07c      	beq.n	800b62a <_dtoa_r+0x1da>
 800b530:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b534:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b538:	46b2      	mov	sl, r6
 800b53a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b53e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b542:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b546:	2200      	movs	r2, #0
 800b548:	4b8b      	ldr	r3, [pc, #556]	; (800b778 <_dtoa_r+0x328>)
 800b54a:	4650      	mov	r0, sl
 800b54c:	4659      	mov	r1, fp
 800b54e:	f7f4 febb 	bl	80002c8 <__aeabi_dsub>
 800b552:	a381      	add	r3, pc, #516	; (adr r3, 800b758 <_dtoa_r+0x308>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f7f5 f86e 	bl	8000638 <__aeabi_dmul>
 800b55c:	a380      	add	r3, pc, #512	; (adr r3, 800b760 <_dtoa_r+0x310>)
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	f7f4 feb3 	bl	80002cc <__adddf3>
 800b566:	4606      	mov	r6, r0
 800b568:	4628      	mov	r0, r5
 800b56a:	460f      	mov	r7, r1
 800b56c:	f7f4 fffa 	bl	8000564 <__aeabi_i2d>
 800b570:	a37d      	add	r3, pc, #500	; (adr r3, 800b768 <_dtoa_r+0x318>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	f7f5 f85f 	bl	8000638 <__aeabi_dmul>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	4630      	mov	r0, r6
 800b580:	4639      	mov	r1, r7
 800b582:	f7f4 fea3 	bl	80002cc <__adddf3>
 800b586:	4606      	mov	r6, r0
 800b588:	460f      	mov	r7, r1
 800b58a:	f7f5 fb05 	bl	8000b98 <__aeabi_d2iz>
 800b58e:	2200      	movs	r2, #0
 800b590:	4682      	mov	sl, r0
 800b592:	2300      	movs	r3, #0
 800b594:	4630      	mov	r0, r6
 800b596:	4639      	mov	r1, r7
 800b598:	f7f5 fac0 	bl	8000b1c <__aeabi_dcmplt>
 800b59c:	b148      	cbz	r0, 800b5b2 <_dtoa_r+0x162>
 800b59e:	4650      	mov	r0, sl
 800b5a0:	f7f4 ffe0 	bl	8000564 <__aeabi_i2d>
 800b5a4:	4632      	mov	r2, r6
 800b5a6:	463b      	mov	r3, r7
 800b5a8:	f7f5 faae 	bl	8000b08 <__aeabi_dcmpeq>
 800b5ac:	b908      	cbnz	r0, 800b5b2 <_dtoa_r+0x162>
 800b5ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b5b2:	f1ba 0f16 	cmp.w	sl, #22
 800b5b6:	d859      	bhi.n	800b66c <_dtoa_r+0x21c>
 800b5b8:	4970      	ldr	r1, [pc, #448]	; (800b77c <_dtoa_r+0x32c>)
 800b5ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b5be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5c6:	f7f5 fac7 	bl	8000b58 <__aeabi_dcmpgt>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d050      	beq.n	800b670 <_dtoa_r+0x220>
 800b5ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5d8:	1b5d      	subs	r5, r3, r5
 800b5da:	f1b5 0801 	subs.w	r8, r5, #1
 800b5de:	bf49      	itett	mi
 800b5e0:	f1c5 0301 	rsbmi	r3, r5, #1
 800b5e4:	2300      	movpl	r3, #0
 800b5e6:	9305      	strmi	r3, [sp, #20]
 800b5e8:	f04f 0800 	movmi.w	r8, #0
 800b5ec:	bf58      	it	pl
 800b5ee:	9305      	strpl	r3, [sp, #20]
 800b5f0:	f1ba 0f00 	cmp.w	sl, #0
 800b5f4:	db3e      	blt.n	800b674 <_dtoa_r+0x224>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	44d0      	add	r8, sl
 800b5fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b5fe:	9307      	str	r3, [sp, #28]
 800b600:	9b06      	ldr	r3, [sp, #24]
 800b602:	2b09      	cmp	r3, #9
 800b604:	f200 8090 	bhi.w	800b728 <_dtoa_r+0x2d8>
 800b608:	2b05      	cmp	r3, #5
 800b60a:	bfc4      	itt	gt
 800b60c:	3b04      	subgt	r3, #4
 800b60e:	9306      	strgt	r3, [sp, #24]
 800b610:	9b06      	ldr	r3, [sp, #24]
 800b612:	f1a3 0302 	sub.w	r3, r3, #2
 800b616:	bfcc      	ite	gt
 800b618:	2500      	movgt	r5, #0
 800b61a:	2501      	movle	r5, #1
 800b61c:	2b03      	cmp	r3, #3
 800b61e:	f200 808f 	bhi.w	800b740 <_dtoa_r+0x2f0>
 800b622:	e8df f003 	tbb	[pc, r3]
 800b626:	7f7d      	.short	0x7f7d
 800b628:	7131      	.short	0x7131
 800b62a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b62e:	441d      	add	r5, r3
 800b630:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b634:	2820      	cmp	r0, #32
 800b636:	dd13      	ble.n	800b660 <_dtoa_r+0x210>
 800b638:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b63c:	9b00      	ldr	r3, [sp, #0]
 800b63e:	fa08 f800 	lsl.w	r8, r8, r0
 800b642:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b646:	fa23 f000 	lsr.w	r0, r3, r0
 800b64a:	ea48 0000 	orr.w	r0, r8, r0
 800b64e:	f7f4 ff79 	bl	8000544 <__aeabi_ui2d>
 800b652:	2301      	movs	r3, #1
 800b654:	4682      	mov	sl, r0
 800b656:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b65a:	3d01      	subs	r5, #1
 800b65c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b65e:	e772      	b.n	800b546 <_dtoa_r+0xf6>
 800b660:	9b00      	ldr	r3, [sp, #0]
 800b662:	f1c0 0020 	rsb	r0, r0, #32
 800b666:	fa03 f000 	lsl.w	r0, r3, r0
 800b66a:	e7f0      	b.n	800b64e <_dtoa_r+0x1fe>
 800b66c:	2301      	movs	r3, #1
 800b66e:	e7b1      	b.n	800b5d4 <_dtoa_r+0x184>
 800b670:	900f      	str	r0, [sp, #60]	; 0x3c
 800b672:	e7b0      	b.n	800b5d6 <_dtoa_r+0x186>
 800b674:	9b05      	ldr	r3, [sp, #20]
 800b676:	eba3 030a 	sub.w	r3, r3, sl
 800b67a:	9305      	str	r3, [sp, #20]
 800b67c:	f1ca 0300 	rsb	r3, sl, #0
 800b680:	9307      	str	r3, [sp, #28]
 800b682:	2300      	movs	r3, #0
 800b684:	930e      	str	r3, [sp, #56]	; 0x38
 800b686:	e7bb      	b.n	800b600 <_dtoa_r+0x1b0>
 800b688:	2301      	movs	r3, #1
 800b68a:	930a      	str	r3, [sp, #40]	; 0x28
 800b68c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b68e:	2b00      	cmp	r3, #0
 800b690:	dd59      	ble.n	800b746 <_dtoa_r+0x2f6>
 800b692:	9302      	str	r3, [sp, #8]
 800b694:	4699      	mov	r9, r3
 800b696:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b698:	2200      	movs	r2, #0
 800b69a:	6072      	str	r2, [r6, #4]
 800b69c:	2204      	movs	r2, #4
 800b69e:	f102 0014 	add.w	r0, r2, #20
 800b6a2:	4298      	cmp	r0, r3
 800b6a4:	6871      	ldr	r1, [r6, #4]
 800b6a6:	d953      	bls.n	800b750 <_dtoa_r+0x300>
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f000 fc99 	bl	800bfe0 <_Balloc>
 800b6ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6b0:	6030      	str	r0, [r6, #0]
 800b6b2:	f1b9 0f0e 	cmp.w	r9, #14
 800b6b6:	f8d3 b000 	ldr.w	fp, [r3]
 800b6ba:	f200 80e6 	bhi.w	800b88a <_dtoa_r+0x43a>
 800b6be:	2d00      	cmp	r5, #0
 800b6c0:	f000 80e3 	beq.w	800b88a <_dtoa_r+0x43a>
 800b6c4:	ed9d 7b00 	vldr	d7, [sp]
 800b6c8:	f1ba 0f00 	cmp.w	sl, #0
 800b6cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b6d0:	dd74      	ble.n	800b7bc <_dtoa_r+0x36c>
 800b6d2:	4a2a      	ldr	r2, [pc, #168]	; (800b77c <_dtoa_r+0x32c>)
 800b6d4:	f00a 030f 	and.w	r3, sl, #15
 800b6d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b6dc:	ed93 7b00 	vldr	d7, [r3]
 800b6e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b6e4:	06f0      	lsls	r0, r6, #27
 800b6e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b6ea:	d565      	bpl.n	800b7b8 <_dtoa_r+0x368>
 800b6ec:	4b24      	ldr	r3, [pc, #144]	; (800b780 <_dtoa_r+0x330>)
 800b6ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6f6:	f7f5 f8c9 	bl	800088c <__aeabi_ddiv>
 800b6fa:	e9cd 0100 	strd	r0, r1, [sp]
 800b6fe:	f006 060f 	and.w	r6, r6, #15
 800b702:	2503      	movs	r5, #3
 800b704:	4f1e      	ldr	r7, [pc, #120]	; (800b780 <_dtoa_r+0x330>)
 800b706:	e04c      	b.n	800b7a2 <_dtoa_r+0x352>
 800b708:	2301      	movs	r3, #1
 800b70a:	930a      	str	r3, [sp, #40]	; 0x28
 800b70c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b70e:	4453      	add	r3, sl
 800b710:	f103 0901 	add.w	r9, r3, #1
 800b714:	9302      	str	r3, [sp, #8]
 800b716:	464b      	mov	r3, r9
 800b718:	2b01      	cmp	r3, #1
 800b71a:	bfb8      	it	lt
 800b71c:	2301      	movlt	r3, #1
 800b71e:	e7ba      	b.n	800b696 <_dtoa_r+0x246>
 800b720:	2300      	movs	r3, #0
 800b722:	e7b2      	b.n	800b68a <_dtoa_r+0x23a>
 800b724:	2300      	movs	r3, #0
 800b726:	e7f0      	b.n	800b70a <_dtoa_r+0x2ba>
 800b728:	2501      	movs	r5, #1
 800b72a:	2300      	movs	r3, #0
 800b72c:	9306      	str	r3, [sp, #24]
 800b72e:	950a      	str	r5, [sp, #40]	; 0x28
 800b730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b734:	9302      	str	r3, [sp, #8]
 800b736:	4699      	mov	r9, r3
 800b738:	2200      	movs	r2, #0
 800b73a:	2312      	movs	r3, #18
 800b73c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b73e:	e7aa      	b.n	800b696 <_dtoa_r+0x246>
 800b740:	2301      	movs	r3, #1
 800b742:	930a      	str	r3, [sp, #40]	; 0x28
 800b744:	e7f4      	b.n	800b730 <_dtoa_r+0x2e0>
 800b746:	2301      	movs	r3, #1
 800b748:	9302      	str	r3, [sp, #8]
 800b74a:	4699      	mov	r9, r3
 800b74c:	461a      	mov	r2, r3
 800b74e:	e7f5      	b.n	800b73c <_dtoa_r+0x2ec>
 800b750:	3101      	adds	r1, #1
 800b752:	6071      	str	r1, [r6, #4]
 800b754:	0052      	lsls	r2, r2, #1
 800b756:	e7a2      	b.n	800b69e <_dtoa_r+0x24e>
 800b758:	636f4361 	.word	0x636f4361
 800b75c:	3fd287a7 	.word	0x3fd287a7
 800b760:	8b60c8b3 	.word	0x8b60c8b3
 800b764:	3fc68a28 	.word	0x3fc68a28
 800b768:	509f79fb 	.word	0x509f79fb
 800b76c:	3fd34413 	.word	0x3fd34413
 800b770:	7ff00000 	.word	0x7ff00000
 800b774:	0800cc91 	.word	0x0800cc91
 800b778:	3ff80000 	.word	0x3ff80000
 800b77c:	0800ccf0 	.word	0x0800ccf0
 800b780:	0800ccc8 	.word	0x0800ccc8
 800b784:	0800ccbd 	.word	0x0800ccbd
 800b788:	07f1      	lsls	r1, r6, #31
 800b78a:	d508      	bpl.n	800b79e <_dtoa_r+0x34e>
 800b78c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b794:	f7f4 ff50 	bl	8000638 <__aeabi_dmul>
 800b798:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b79c:	3501      	adds	r5, #1
 800b79e:	1076      	asrs	r6, r6, #1
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	2e00      	cmp	r6, #0
 800b7a4:	d1f0      	bne.n	800b788 <_dtoa_r+0x338>
 800b7a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b7aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7ae:	f7f5 f86d 	bl	800088c <__aeabi_ddiv>
 800b7b2:	e9cd 0100 	strd	r0, r1, [sp]
 800b7b6:	e01a      	b.n	800b7ee <_dtoa_r+0x39e>
 800b7b8:	2502      	movs	r5, #2
 800b7ba:	e7a3      	b.n	800b704 <_dtoa_r+0x2b4>
 800b7bc:	f000 80a0 	beq.w	800b900 <_dtoa_r+0x4b0>
 800b7c0:	f1ca 0600 	rsb	r6, sl, #0
 800b7c4:	4b9f      	ldr	r3, [pc, #636]	; (800ba44 <_dtoa_r+0x5f4>)
 800b7c6:	4fa0      	ldr	r7, [pc, #640]	; (800ba48 <_dtoa_r+0x5f8>)
 800b7c8:	f006 020f 	and.w	r2, r6, #15
 800b7cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b7d8:	f7f4 ff2e 	bl	8000638 <__aeabi_dmul>
 800b7dc:	e9cd 0100 	strd	r0, r1, [sp]
 800b7e0:	1136      	asrs	r6, r6, #4
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	2502      	movs	r5, #2
 800b7e6:	2e00      	cmp	r6, #0
 800b7e8:	d17f      	bne.n	800b8ea <_dtoa_r+0x49a>
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1e1      	bne.n	800b7b2 <_dtoa_r+0x362>
 800b7ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 8087 	beq.w	800b904 <_dtoa_r+0x4b4>
 800b7f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	4b93      	ldr	r3, [pc, #588]	; (800ba4c <_dtoa_r+0x5fc>)
 800b7fe:	4630      	mov	r0, r6
 800b800:	4639      	mov	r1, r7
 800b802:	f7f5 f98b 	bl	8000b1c <__aeabi_dcmplt>
 800b806:	2800      	cmp	r0, #0
 800b808:	d07c      	beq.n	800b904 <_dtoa_r+0x4b4>
 800b80a:	f1b9 0f00 	cmp.w	r9, #0
 800b80e:	d079      	beq.n	800b904 <_dtoa_r+0x4b4>
 800b810:	9b02      	ldr	r3, [sp, #8]
 800b812:	2b00      	cmp	r3, #0
 800b814:	dd35      	ble.n	800b882 <_dtoa_r+0x432>
 800b816:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b81a:	9308      	str	r3, [sp, #32]
 800b81c:	4639      	mov	r1, r7
 800b81e:	2200      	movs	r2, #0
 800b820:	4b8b      	ldr	r3, [pc, #556]	; (800ba50 <_dtoa_r+0x600>)
 800b822:	4630      	mov	r0, r6
 800b824:	f7f4 ff08 	bl	8000638 <__aeabi_dmul>
 800b828:	e9cd 0100 	strd	r0, r1, [sp]
 800b82c:	9f02      	ldr	r7, [sp, #8]
 800b82e:	3501      	adds	r5, #1
 800b830:	4628      	mov	r0, r5
 800b832:	f7f4 fe97 	bl	8000564 <__aeabi_i2d>
 800b836:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b83a:	f7f4 fefd 	bl	8000638 <__aeabi_dmul>
 800b83e:	2200      	movs	r2, #0
 800b840:	4b84      	ldr	r3, [pc, #528]	; (800ba54 <_dtoa_r+0x604>)
 800b842:	f7f4 fd43 	bl	80002cc <__adddf3>
 800b846:	4605      	mov	r5, r0
 800b848:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b84c:	2f00      	cmp	r7, #0
 800b84e:	d15d      	bne.n	800b90c <_dtoa_r+0x4bc>
 800b850:	2200      	movs	r2, #0
 800b852:	4b81      	ldr	r3, [pc, #516]	; (800ba58 <_dtoa_r+0x608>)
 800b854:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b858:	f7f4 fd36 	bl	80002c8 <__aeabi_dsub>
 800b85c:	462a      	mov	r2, r5
 800b85e:	4633      	mov	r3, r6
 800b860:	e9cd 0100 	strd	r0, r1, [sp]
 800b864:	f7f5 f978 	bl	8000b58 <__aeabi_dcmpgt>
 800b868:	2800      	cmp	r0, #0
 800b86a:	f040 8288 	bne.w	800bd7e <_dtoa_r+0x92e>
 800b86e:	462a      	mov	r2, r5
 800b870:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b874:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b878:	f7f5 f950 	bl	8000b1c <__aeabi_dcmplt>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	f040 827c 	bne.w	800bd7a <_dtoa_r+0x92a>
 800b882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b886:	e9cd 2300 	strd	r2, r3, [sp]
 800b88a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f2c0 8150 	blt.w	800bb32 <_dtoa_r+0x6e2>
 800b892:	f1ba 0f0e 	cmp.w	sl, #14
 800b896:	f300 814c 	bgt.w	800bb32 <_dtoa_r+0x6e2>
 800b89a:	4b6a      	ldr	r3, [pc, #424]	; (800ba44 <_dtoa_r+0x5f4>)
 800b89c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b8a0:	ed93 7b00 	vldr	d7, [r3]
 800b8a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b8ac:	f280 80d8 	bge.w	800ba60 <_dtoa_r+0x610>
 800b8b0:	f1b9 0f00 	cmp.w	r9, #0
 800b8b4:	f300 80d4 	bgt.w	800ba60 <_dtoa_r+0x610>
 800b8b8:	f040 825e 	bne.w	800bd78 <_dtoa_r+0x928>
 800b8bc:	2200      	movs	r2, #0
 800b8be:	4b66      	ldr	r3, [pc, #408]	; (800ba58 <_dtoa_r+0x608>)
 800b8c0:	ec51 0b17 	vmov	r0, r1, d7
 800b8c4:	f7f4 feb8 	bl	8000638 <__aeabi_dmul>
 800b8c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8cc:	f7f5 f93a 	bl	8000b44 <__aeabi_dcmpge>
 800b8d0:	464f      	mov	r7, r9
 800b8d2:	464e      	mov	r6, r9
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	f040 8234 	bne.w	800bd42 <_dtoa_r+0x8f2>
 800b8da:	2331      	movs	r3, #49	; 0x31
 800b8dc:	f10b 0501 	add.w	r5, fp, #1
 800b8e0:	f88b 3000 	strb.w	r3, [fp]
 800b8e4:	f10a 0a01 	add.w	sl, sl, #1
 800b8e8:	e22f      	b.n	800bd4a <_dtoa_r+0x8fa>
 800b8ea:	07f2      	lsls	r2, r6, #31
 800b8ec:	d505      	bpl.n	800b8fa <_dtoa_r+0x4aa>
 800b8ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8f2:	f7f4 fea1 	bl	8000638 <__aeabi_dmul>
 800b8f6:	3501      	adds	r5, #1
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	1076      	asrs	r6, r6, #1
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	e772      	b.n	800b7e6 <_dtoa_r+0x396>
 800b900:	2502      	movs	r5, #2
 800b902:	e774      	b.n	800b7ee <_dtoa_r+0x39e>
 800b904:	f8cd a020 	str.w	sl, [sp, #32]
 800b908:	464f      	mov	r7, r9
 800b90a:	e791      	b.n	800b830 <_dtoa_r+0x3e0>
 800b90c:	4b4d      	ldr	r3, [pc, #308]	; (800ba44 <_dtoa_r+0x5f4>)
 800b90e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b912:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d047      	beq.n	800b9ac <_dtoa_r+0x55c>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	2000      	movs	r0, #0
 800b922:	494e      	ldr	r1, [pc, #312]	; (800ba5c <_dtoa_r+0x60c>)
 800b924:	f7f4 ffb2 	bl	800088c <__aeabi_ddiv>
 800b928:	462a      	mov	r2, r5
 800b92a:	4633      	mov	r3, r6
 800b92c:	f7f4 fccc 	bl	80002c8 <__aeabi_dsub>
 800b930:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b934:	465d      	mov	r5, fp
 800b936:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b93a:	f7f5 f92d 	bl	8000b98 <__aeabi_d2iz>
 800b93e:	4606      	mov	r6, r0
 800b940:	f7f4 fe10 	bl	8000564 <__aeabi_i2d>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b94c:	f7f4 fcbc 	bl	80002c8 <__aeabi_dsub>
 800b950:	3630      	adds	r6, #48	; 0x30
 800b952:	f805 6b01 	strb.w	r6, [r5], #1
 800b956:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b95a:	e9cd 0100 	strd	r0, r1, [sp]
 800b95e:	f7f5 f8dd 	bl	8000b1c <__aeabi_dcmplt>
 800b962:	2800      	cmp	r0, #0
 800b964:	d163      	bne.n	800ba2e <_dtoa_r+0x5de>
 800b966:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b96a:	2000      	movs	r0, #0
 800b96c:	4937      	ldr	r1, [pc, #220]	; (800ba4c <_dtoa_r+0x5fc>)
 800b96e:	f7f4 fcab 	bl	80002c8 <__aeabi_dsub>
 800b972:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b976:	f7f5 f8d1 	bl	8000b1c <__aeabi_dcmplt>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	f040 80b7 	bne.w	800baee <_dtoa_r+0x69e>
 800b980:	eba5 030b 	sub.w	r3, r5, fp
 800b984:	429f      	cmp	r7, r3
 800b986:	f77f af7c 	ble.w	800b882 <_dtoa_r+0x432>
 800b98a:	2200      	movs	r2, #0
 800b98c:	4b30      	ldr	r3, [pc, #192]	; (800ba50 <_dtoa_r+0x600>)
 800b98e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b992:	f7f4 fe51 	bl	8000638 <__aeabi_dmul>
 800b996:	2200      	movs	r2, #0
 800b998:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b99c:	4b2c      	ldr	r3, [pc, #176]	; (800ba50 <_dtoa_r+0x600>)
 800b99e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9a2:	f7f4 fe49 	bl	8000638 <__aeabi_dmul>
 800b9a6:	e9cd 0100 	strd	r0, r1, [sp]
 800b9aa:	e7c4      	b.n	800b936 <_dtoa_r+0x4e6>
 800b9ac:	462a      	mov	r2, r5
 800b9ae:	4633      	mov	r3, r6
 800b9b0:	f7f4 fe42 	bl	8000638 <__aeabi_dmul>
 800b9b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b9b8:	eb0b 0507 	add.w	r5, fp, r7
 800b9bc:	465e      	mov	r6, fp
 800b9be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9c2:	f7f5 f8e9 	bl	8000b98 <__aeabi_d2iz>
 800b9c6:	4607      	mov	r7, r0
 800b9c8:	f7f4 fdcc 	bl	8000564 <__aeabi_i2d>
 800b9cc:	3730      	adds	r7, #48	; 0x30
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9d6:	f7f4 fc77 	bl	80002c8 <__aeabi_dsub>
 800b9da:	f806 7b01 	strb.w	r7, [r6], #1
 800b9de:	42ae      	cmp	r6, r5
 800b9e0:	e9cd 0100 	strd	r0, r1, [sp]
 800b9e4:	f04f 0200 	mov.w	r2, #0
 800b9e8:	d126      	bne.n	800ba38 <_dtoa_r+0x5e8>
 800b9ea:	4b1c      	ldr	r3, [pc, #112]	; (800ba5c <_dtoa_r+0x60c>)
 800b9ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9f0:	f7f4 fc6c 	bl	80002cc <__adddf3>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9fc:	f7f5 f8ac 	bl	8000b58 <__aeabi_dcmpgt>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d174      	bne.n	800baee <_dtoa_r+0x69e>
 800ba04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ba08:	2000      	movs	r0, #0
 800ba0a:	4914      	ldr	r1, [pc, #80]	; (800ba5c <_dtoa_r+0x60c>)
 800ba0c:	f7f4 fc5c 	bl	80002c8 <__aeabi_dsub>
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba18:	f7f5 f880 	bl	8000b1c <__aeabi_dcmplt>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	f43f af30 	beq.w	800b882 <_dtoa_r+0x432>
 800ba22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba26:	2b30      	cmp	r3, #48	; 0x30
 800ba28:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ba2c:	d002      	beq.n	800ba34 <_dtoa_r+0x5e4>
 800ba2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ba32:	e04a      	b.n	800baca <_dtoa_r+0x67a>
 800ba34:	4615      	mov	r5, r2
 800ba36:	e7f4      	b.n	800ba22 <_dtoa_r+0x5d2>
 800ba38:	4b05      	ldr	r3, [pc, #20]	; (800ba50 <_dtoa_r+0x600>)
 800ba3a:	f7f4 fdfd 	bl	8000638 <__aeabi_dmul>
 800ba3e:	e9cd 0100 	strd	r0, r1, [sp]
 800ba42:	e7bc      	b.n	800b9be <_dtoa_r+0x56e>
 800ba44:	0800ccf0 	.word	0x0800ccf0
 800ba48:	0800ccc8 	.word	0x0800ccc8
 800ba4c:	3ff00000 	.word	0x3ff00000
 800ba50:	40240000 	.word	0x40240000
 800ba54:	401c0000 	.word	0x401c0000
 800ba58:	40140000 	.word	0x40140000
 800ba5c:	3fe00000 	.word	0x3fe00000
 800ba60:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ba64:	465d      	mov	r5, fp
 800ba66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	f7f4 ff0d 	bl	800088c <__aeabi_ddiv>
 800ba72:	f7f5 f891 	bl	8000b98 <__aeabi_d2iz>
 800ba76:	4680      	mov	r8, r0
 800ba78:	f7f4 fd74 	bl	8000564 <__aeabi_i2d>
 800ba7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba80:	f7f4 fdda 	bl	8000638 <__aeabi_dmul>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	4630      	mov	r0, r6
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ba90:	f7f4 fc1a 	bl	80002c8 <__aeabi_dsub>
 800ba94:	f805 6b01 	strb.w	r6, [r5], #1
 800ba98:	eba5 060b 	sub.w	r6, r5, fp
 800ba9c:	45b1      	cmp	r9, r6
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	d139      	bne.n	800bb18 <_dtoa_r+0x6c8>
 800baa4:	f7f4 fc12 	bl	80002cc <__adddf3>
 800baa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800baac:	4606      	mov	r6, r0
 800baae:	460f      	mov	r7, r1
 800bab0:	f7f5 f852 	bl	8000b58 <__aeabi_dcmpgt>
 800bab4:	b9c8      	cbnz	r0, 800baea <_dtoa_r+0x69a>
 800bab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800baba:	4630      	mov	r0, r6
 800babc:	4639      	mov	r1, r7
 800babe:	f7f5 f823 	bl	8000b08 <__aeabi_dcmpeq>
 800bac2:	b110      	cbz	r0, 800baca <_dtoa_r+0x67a>
 800bac4:	f018 0f01 	tst.w	r8, #1
 800bac8:	d10f      	bne.n	800baea <_dtoa_r+0x69a>
 800baca:	9904      	ldr	r1, [sp, #16]
 800bacc:	4620      	mov	r0, r4
 800bace:	f000 fabb 	bl	800c048 <_Bfree>
 800bad2:	2300      	movs	r3, #0
 800bad4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bad6:	702b      	strb	r3, [r5, #0]
 800bad8:	f10a 0301 	add.w	r3, sl, #1
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f000 8241 	beq.w	800bf68 <_dtoa_r+0xb18>
 800bae6:	601d      	str	r5, [r3, #0]
 800bae8:	e23e      	b.n	800bf68 <_dtoa_r+0xb18>
 800baea:	f8cd a020 	str.w	sl, [sp, #32]
 800baee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800baf2:	2a39      	cmp	r2, #57	; 0x39
 800baf4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800baf8:	d108      	bne.n	800bb0c <_dtoa_r+0x6bc>
 800bafa:	459b      	cmp	fp, r3
 800bafc:	d10a      	bne.n	800bb14 <_dtoa_r+0x6c4>
 800bafe:	9b08      	ldr	r3, [sp, #32]
 800bb00:	3301      	adds	r3, #1
 800bb02:	9308      	str	r3, [sp, #32]
 800bb04:	2330      	movs	r3, #48	; 0x30
 800bb06:	f88b 3000 	strb.w	r3, [fp]
 800bb0a:	465b      	mov	r3, fp
 800bb0c:	781a      	ldrb	r2, [r3, #0]
 800bb0e:	3201      	adds	r2, #1
 800bb10:	701a      	strb	r2, [r3, #0]
 800bb12:	e78c      	b.n	800ba2e <_dtoa_r+0x5de>
 800bb14:	461d      	mov	r5, r3
 800bb16:	e7ea      	b.n	800baee <_dtoa_r+0x69e>
 800bb18:	2200      	movs	r2, #0
 800bb1a:	4b9b      	ldr	r3, [pc, #620]	; (800bd88 <_dtoa_r+0x938>)
 800bb1c:	f7f4 fd8c 	bl	8000638 <__aeabi_dmul>
 800bb20:	2200      	movs	r2, #0
 800bb22:	2300      	movs	r3, #0
 800bb24:	4606      	mov	r6, r0
 800bb26:	460f      	mov	r7, r1
 800bb28:	f7f4 ffee 	bl	8000b08 <__aeabi_dcmpeq>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d09a      	beq.n	800ba66 <_dtoa_r+0x616>
 800bb30:	e7cb      	b.n	800baca <_dtoa_r+0x67a>
 800bb32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb34:	2a00      	cmp	r2, #0
 800bb36:	f000 808b 	beq.w	800bc50 <_dtoa_r+0x800>
 800bb3a:	9a06      	ldr	r2, [sp, #24]
 800bb3c:	2a01      	cmp	r2, #1
 800bb3e:	dc6e      	bgt.n	800bc1e <_dtoa_r+0x7ce>
 800bb40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb42:	2a00      	cmp	r2, #0
 800bb44:	d067      	beq.n	800bc16 <_dtoa_r+0x7c6>
 800bb46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb4a:	9f07      	ldr	r7, [sp, #28]
 800bb4c:	9d05      	ldr	r5, [sp, #20]
 800bb4e:	9a05      	ldr	r2, [sp, #20]
 800bb50:	2101      	movs	r1, #1
 800bb52:	441a      	add	r2, r3
 800bb54:	4620      	mov	r0, r4
 800bb56:	9205      	str	r2, [sp, #20]
 800bb58:	4498      	add	r8, r3
 800bb5a:	f000 fb15 	bl	800c188 <__i2b>
 800bb5e:	4606      	mov	r6, r0
 800bb60:	2d00      	cmp	r5, #0
 800bb62:	dd0c      	ble.n	800bb7e <_dtoa_r+0x72e>
 800bb64:	f1b8 0f00 	cmp.w	r8, #0
 800bb68:	dd09      	ble.n	800bb7e <_dtoa_r+0x72e>
 800bb6a:	4545      	cmp	r5, r8
 800bb6c:	9a05      	ldr	r2, [sp, #20]
 800bb6e:	462b      	mov	r3, r5
 800bb70:	bfa8      	it	ge
 800bb72:	4643      	movge	r3, r8
 800bb74:	1ad2      	subs	r2, r2, r3
 800bb76:	9205      	str	r2, [sp, #20]
 800bb78:	1aed      	subs	r5, r5, r3
 800bb7a:	eba8 0803 	sub.w	r8, r8, r3
 800bb7e:	9b07      	ldr	r3, [sp, #28]
 800bb80:	b1eb      	cbz	r3, 800bbbe <_dtoa_r+0x76e>
 800bb82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d067      	beq.n	800bc58 <_dtoa_r+0x808>
 800bb88:	b18f      	cbz	r7, 800bbae <_dtoa_r+0x75e>
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	463a      	mov	r2, r7
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f000 fb9a 	bl	800c2c8 <__pow5mult>
 800bb94:	9a04      	ldr	r2, [sp, #16]
 800bb96:	4601      	mov	r1, r0
 800bb98:	4606      	mov	r6, r0
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 fafd 	bl	800c19a <__multiply>
 800bba0:	9904      	ldr	r1, [sp, #16]
 800bba2:	9008      	str	r0, [sp, #32]
 800bba4:	4620      	mov	r0, r4
 800bba6:	f000 fa4f 	bl	800c048 <_Bfree>
 800bbaa:	9b08      	ldr	r3, [sp, #32]
 800bbac:	9304      	str	r3, [sp, #16]
 800bbae:	9b07      	ldr	r3, [sp, #28]
 800bbb0:	1bda      	subs	r2, r3, r7
 800bbb2:	d004      	beq.n	800bbbe <_dtoa_r+0x76e>
 800bbb4:	9904      	ldr	r1, [sp, #16]
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f000 fb86 	bl	800c2c8 <__pow5mult>
 800bbbc:	9004      	str	r0, [sp, #16]
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 fae1 	bl	800c188 <__i2b>
 800bbc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbc8:	4607      	mov	r7, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f000 81d0 	beq.w	800bf70 <_dtoa_r+0xb20>
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f000 fb77 	bl	800c2c8 <__pow5mult>
 800bbda:	9b06      	ldr	r3, [sp, #24]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	4607      	mov	r7, r0
 800bbe0:	dc40      	bgt.n	800bc64 <_dtoa_r+0x814>
 800bbe2:	9b00      	ldr	r3, [sp, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d139      	bne.n	800bc5c <_dtoa_r+0x80c>
 800bbe8:	9b01      	ldr	r3, [sp, #4]
 800bbea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d136      	bne.n	800bc60 <_dtoa_r+0x810>
 800bbf2:	9b01      	ldr	r3, [sp, #4]
 800bbf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbf8:	0d1b      	lsrs	r3, r3, #20
 800bbfa:	051b      	lsls	r3, r3, #20
 800bbfc:	b12b      	cbz	r3, 800bc0a <_dtoa_r+0x7ba>
 800bbfe:	9b05      	ldr	r3, [sp, #20]
 800bc00:	3301      	adds	r3, #1
 800bc02:	9305      	str	r3, [sp, #20]
 800bc04:	f108 0801 	add.w	r8, r8, #1
 800bc08:	2301      	movs	r3, #1
 800bc0a:	9307      	str	r3, [sp, #28]
 800bc0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d12a      	bne.n	800bc68 <_dtoa_r+0x818>
 800bc12:	2001      	movs	r0, #1
 800bc14:	e030      	b.n	800bc78 <_dtoa_r+0x828>
 800bc16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc1c:	e795      	b.n	800bb4a <_dtoa_r+0x6fa>
 800bc1e:	9b07      	ldr	r3, [sp, #28]
 800bc20:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800bc24:	42bb      	cmp	r3, r7
 800bc26:	bfbf      	itttt	lt
 800bc28:	9b07      	ldrlt	r3, [sp, #28]
 800bc2a:	9707      	strlt	r7, [sp, #28]
 800bc2c:	1afa      	sublt	r2, r7, r3
 800bc2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bc30:	bfbb      	ittet	lt
 800bc32:	189b      	addlt	r3, r3, r2
 800bc34:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bc36:	1bdf      	subge	r7, r3, r7
 800bc38:	2700      	movlt	r7, #0
 800bc3a:	f1b9 0f00 	cmp.w	r9, #0
 800bc3e:	bfb5      	itete	lt
 800bc40:	9b05      	ldrlt	r3, [sp, #20]
 800bc42:	9d05      	ldrge	r5, [sp, #20]
 800bc44:	eba3 0509 	sublt.w	r5, r3, r9
 800bc48:	464b      	movge	r3, r9
 800bc4a:	bfb8      	it	lt
 800bc4c:	2300      	movlt	r3, #0
 800bc4e:	e77e      	b.n	800bb4e <_dtoa_r+0x6fe>
 800bc50:	9f07      	ldr	r7, [sp, #28]
 800bc52:	9d05      	ldr	r5, [sp, #20]
 800bc54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bc56:	e783      	b.n	800bb60 <_dtoa_r+0x710>
 800bc58:	9a07      	ldr	r2, [sp, #28]
 800bc5a:	e7ab      	b.n	800bbb4 <_dtoa_r+0x764>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	e7d4      	b.n	800bc0a <_dtoa_r+0x7ba>
 800bc60:	9b00      	ldr	r3, [sp, #0]
 800bc62:	e7d2      	b.n	800bc0a <_dtoa_r+0x7ba>
 800bc64:	2300      	movs	r3, #0
 800bc66:	9307      	str	r3, [sp, #28]
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bc6e:	6918      	ldr	r0, [r3, #16]
 800bc70:	f000 fa3c 	bl	800c0ec <__hi0bits>
 800bc74:	f1c0 0020 	rsb	r0, r0, #32
 800bc78:	4440      	add	r0, r8
 800bc7a:	f010 001f 	ands.w	r0, r0, #31
 800bc7e:	d047      	beq.n	800bd10 <_dtoa_r+0x8c0>
 800bc80:	f1c0 0320 	rsb	r3, r0, #32
 800bc84:	2b04      	cmp	r3, #4
 800bc86:	dd3b      	ble.n	800bd00 <_dtoa_r+0x8b0>
 800bc88:	9b05      	ldr	r3, [sp, #20]
 800bc8a:	f1c0 001c 	rsb	r0, r0, #28
 800bc8e:	4403      	add	r3, r0
 800bc90:	9305      	str	r3, [sp, #20]
 800bc92:	4405      	add	r5, r0
 800bc94:	4480      	add	r8, r0
 800bc96:	9b05      	ldr	r3, [sp, #20]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	dd05      	ble.n	800bca8 <_dtoa_r+0x858>
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	9904      	ldr	r1, [sp, #16]
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 fb5f 	bl	800c364 <__lshift>
 800bca6:	9004      	str	r0, [sp, #16]
 800bca8:	f1b8 0f00 	cmp.w	r8, #0
 800bcac:	dd05      	ble.n	800bcba <_dtoa_r+0x86a>
 800bcae:	4639      	mov	r1, r7
 800bcb0:	4642      	mov	r2, r8
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 fb56 	bl	800c364 <__lshift>
 800bcb8:	4607      	mov	r7, r0
 800bcba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcbc:	b353      	cbz	r3, 800bd14 <_dtoa_r+0x8c4>
 800bcbe:	4639      	mov	r1, r7
 800bcc0:	9804      	ldr	r0, [sp, #16]
 800bcc2:	f000 fba3 	bl	800c40c <__mcmp>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	da24      	bge.n	800bd14 <_dtoa_r+0x8c4>
 800bcca:	2300      	movs	r3, #0
 800bccc:	220a      	movs	r2, #10
 800bcce:	9904      	ldr	r1, [sp, #16]
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f000 f9d0 	bl	800c076 <__multadd>
 800bcd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd8:	9004      	str	r0, [sp, #16]
 800bcda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f000 814d 	beq.w	800bf7e <_dtoa_r+0xb2e>
 800bce4:	2300      	movs	r3, #0
 800bce6:	4631      	mov	r1, r6
 800bce8:	220a      	movs	r2, #10
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 f9c3 	bl	800c076 <__multadd>
 800bcf0:	9b02      	ldr	r3, [sp, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	dc4f      	bgt.n	800bd98 <_dtoa_r+0x948>
 800bcf8:	9b06      	ldr	r3, [sp, #24]
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	dd4c      	ble.n	800bd98 <_dtoa_r+0x948>
 800bcfe:	e011      	b.n	800bd24 <_dtoa_r+0x8d4>
 800bd00:	d0c9      	beq.n	800bc96 <_dtoa_r+0x846>
 800bd02:	9a05      	ldr	r2, [sp, #20]
 800bd04:	331c      	adds	r3, #28
 800bd06:	441a      	add	r2, r3
 800bd08:	9205      	str	r2, [sp, #20]
 800bd0a:	441d      	add	r5, r3
 800bd0c:	4498      	add	r8, r3
 800bd0e:	e7c2      	b.n	800bc96 <_dtoa_r+0x846>
 800bd10:	4603      	mov	r3, r0
 800bd12:	e7f6      	b.n	800bd02 <_dtoa_r+0x8b2>
 800bd14:	f1b9 0f00 	cmp.w	r9, #0
 800bd18:	dc38      	bgt.n	800bd8c <_dtoa_r+0x93c>
 800bd1a:	9b06      	ldr	r3, [sp, #24]
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	dd35      	ble.n	800bd8c <_dtoa_r+0x93c>
 800bd20:	f8cd 9008 	str.w	r9, [sp, #8]
 800bd24:	9b02      	ldr	r3, [sp, #8]
 800bd26:	b963      	cbnz	r3, 800bd42 <_dtoa_r+0x8f2>
 800bd28:	4639      	mov	r1, r7
 800bd2a:	2205      	movs	r2, #5
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f000 f9a2 	bl	800c076 <__multadd>
 800bd32:	4601      	mov	r1, r0
 800bd34:	4607      	mov	r7, r0
 800bd36:	9804      	ldr	r0, [sp, #16]
 800bd38:	f000 fb68 	bl	800c40c <__mcmp>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	f73f adcc 	bgt.w	800b8da <_dtoa_r+0x48a>
 800bd42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd44:	465d      	mov	r5, fp
 800bd46:	ea6f 0a03 	mvn.w	sl, r3
 800bd4a:	f04f 0900 	mov.w	r9, #0
 800bd4e:	4639      	mov	r1, r7
 800bd50:	4620      	mov	r0, r4
 800bd52:	f000 f979 	bl	800c048 <_Bfree>
 800bd56:	2e00      	cmp	r6, #0
 800bd58:	f43f aeb7 	beq.w	800baca <_dtoa_r+0x67a>
 800bd5c:	f1b9 0f00 	cmp.w	r9, #0
 800bd60:	d005      	beq.n	800bd6e <_dtoa_r+0x91e>
 800bd62:	45b1      	cmp	r9, r6
 800bd64:	d003      	beq.n	800bd6e <_dtoa_r+0x91e>
 800bd66:	4649      	mov	r1, r9
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f000 f96d 	bl	800c048 <_Bfree>
 800bd6e:	4631      	mov	r1, r6
 800bd70:	4620      	mov	r0, r4
 800bd72:	f000 f969 	bl	800c048 <_Bfree>
 800bd76:	e6a8      	b.n	800baca <_dtoa_r+0x67a>
 800bd78:	2700      	movs	r7, #0
 800bd7a:	463e      	mov	r6, r7
 800bd7c:	e7e1      	b.n	800bd42 <_dtoa_r+0x8f2>
 800bd7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bd82:	463e      	mov	r6, r7
 800bd84:	e5a9      	b.n	800b8da <_dtoa_r+0x48a>
 800bd86:	bf00      	nop
 800bd88:	40240000 	.word	0x40240000
 800bd8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd8e:	f8cd 9008 	str.w	r9, [sp, #8]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f000 80fa 	beq.w	800bf8c <_dtoa_r+0xb3c>
 800bd98:	2d00      	cmp	r5, #0
 800bd9a:	dd05      	ble.n	800bda8 <_dtoa_r+0x958>
 800bd9c:	4631      	mov	r1, r6
 800bd9e:	462a      	mov	r2, r5
 800bda0:	4620      	mov	r0, r4
 800bda2:	f000 fadf 	bl	800c364 <__lshift>
 800bda6:	4606      	mov	r6, r0
 800bda8:	9b07      	ldr	r3, [sp, #28]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d04c      	beq.n	800be48 <_dtoa_r+0x9f8>
 800bdae:	6871      	ldr	r1, [r6, #4]
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f000 f915 	bl	800bfe0 <_Balloc>
 800bdb6:	6932      	ldr	r2, [r6, #16]
 800bdb8:	3202      	adds	r2, #2
 800bdba:	4605      	mov	r5, r0
 800bdbc:	0092      	lsls	r2, r2, #2
 800bdbe:	f106 010c 	add.w	r1, r6, #12
 800bdc2:	300c      	adds	r0, #12
 800bdc4:	f7fe fcfa 	bl	800a7bc <memcpy>
 800bdc8:	2201      	movs	r2, #1
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f000 fac9 	bl	800c364 <__lshift>
 800bdd2:	9b00      	ldr	r3, [sp, #0]
 800bdd4:	f8cd b014 	str.w	fp, [sp, #20]
 800bdd8:	f003 0301 	and.w	r3, r3, #1
 800bddc:	46b1      	mov	r9, r6
 800bdde:	9307      	str	r3, [sp, #28]
 800bde0:	4606      	mov	r6, r0
 800bde2:	4639      	mov	r1, r7
 800bde4:	9804      	ldr	r0, [sp, #16]
 800bde6:	f7ff faa7 	bl	800b338 <quorem>
 800bdea:	4649      	mov	r1, r9
 800bdec:	4605      	mov	r5, r0
 800bdee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bdf2:	9804      	ldr	r0, [sp, #16]
 800bdf4:	f000 fb0a 	bl	800c40c <__mcmp>
 800bdf8:	4632      	mov	r2, r6
 800bdfa:	9000      	str	r0, [sp, #0]
 800bdfc:	4639      	mov	r1, r7
 800bdfe:	4620      	mov	r0, r4
 800be00:	f000 fb1e 	bl	800c440 <__mdiff>
 800be04:	68c3      	ldr	r3, [r0, #12]
 800be06:	4602      	mov	r2, r0
 800be08:	bb03      	cbnz	r3, 800be4c <_dtoa_r+0x9fc>
 800be0a:	4601      	mov	r1, r0
 800be0c:	9008      	str	r0, [sp, #32]
 800be0e:	9804      	ldr	r0, [sp, #16]
 800be10:	f000 fafc 	bl	800c40c <__mcmp>
 800be14:	9a08      	ldr	r2, [sp, #32]
 800be16:	4603      	mov	r3, r0
 800be18:	4611      	mov	r1, r2
 800be1a:	4620      	mov	r0, r4
 800be1c:	9308      	str	r3, [sp, #32]
 800be1e:	f000 f913 	bl	800c048 <_Bfree>
 800be22:	9b08      	ldr	r3, [sp, #32]
 800be24:	b9a3      	cbnz	r3, 800be50 <_dtoa_r+0xa00>
 800be26:	9a06      	ldr	r2, [sp, #24]
 800be28:	b992      	cbnz	r2, 800be50 <_dtoa_r+0xa00>
 800be2a:	9a07      	ldr	r2, [sp, #28]
 800be2c:	b982      	cbnz	r2, 800be50 <_dtoa_r+0xa00>
 800be2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800be32:	d029      	beq.n	800be88 <_dtoa_r+0xa38>
 800be34:	9b00      	ldr	r3, [sp, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	dd01      	ble.n	800be3e <_dtoa_r+0x9ee>
 800be3a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800be3e:	9b05      	ldr	r3, [sp, #20]
 800be40:	1c5d      	adds	r5, r3, #1
 800be42:	f883 8000 	strb.w	r8, [r3]
 800be46:	e782      	b.n	800bd4e <_dtoa_r+0x8fe>
 800be48:	4630      	mov	r0, r6
 800be4a:	e7c2      	b.n	800bdd2 <_dtoa_r+0x982>
 800be4c:	2301      	movs	r3, #1
 800be4e:	e7e3      	b.n	800be18 <_dtoa_r+0x9c8>
 800be50:	9a00      	ldr	r2, [sp, #0]
 800be52:	2a00      	cmp	r2, #0
 800be54:	db04      	blt.n	800be60 <_dtoa_r+0xa10>
 800be56:	d125      	bne.n	800bea4 <_dtoa_r+0xa54>
 800be58:	9a06      	ldr	r2, [sp, #24]
 800be5a:	bb1a      	cbnz	r2, 800bea4 <_dtoa_r+0xa54>
 800be5c:	9a07      	ldr	r2, [sp, #28]
 800be5e:	bb0a      	cbnz	r2, 800bea4 <_dtoa_r+0xa54>
 800be60:	2b00      	cmp	r3, #0
 800be62:	ddec      	ble.n	800be3e <_dtoa_r+0x9ee>
 800be64:	2201      	movs	r2, #1
 800be66:	9904      	ldr	r1, [sp, #16]
 800be68:	4620      	mov	r0, r4
 800be6a:	f000 fa7b 	bl	800c364 <__lshift>
 800be6e:	4639      	mov	r1, r7
 800be70:	9004      	str	r0, [sp, #16]
 800be72:	f000 facb 	bl	800c40c <__mcmp>
 800be76:	2800      	cmp	r0, #0
 800be78:	dc03      	bgt.n	800be82 <_dtoa_r+0xa32>
 800be7a:	d1e0      	bne.n	800be3e <_dtoa_r+0x9ee>
 800be7c:	f018 0f01 	tst.w	r8, #1
 800be80:	d0dd      	beq.n	800be3e <_dtoa_r+0x9ee>
 800be82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800be86:	d1d8      	bne.n	800be3a <_dtoa_r+0x9ea>
 800be88:	9b05      	ldr	r3, [sp, #20]
 800be8a:	9a05      	ldr	r2, [sp, #20]
 800be8c:	1c5d      	adds	r5, r3, #1
 800be8e:	2339      	movs	r3, #57	; 0x39
 800be90:	7013      	strb	r3, [r2, #0]
 800be92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be96:	2b39      	cmp	r3, #57	; 0x39
 800be98:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800be9c:	d04f      	beq.n	800bf3e <_dtoa_r+0xaee>
 800be9e:	3301      	adds	r3, #1
 800bea0:	7013      	strb	r3, [r2, #0]
 800bea2:	e754      	b.n	800bd4e <_dtoa_r+0x8fe>
 800bea4:	9a05      	ldr	r2, [sp, #20]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	f102 0501 	add.w	r5, r2, #1
 800beac:	dd06      	ble.n	800bebc <_dtoa_r+0xa6c>
 800beae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800beb2:	d0e9      	beq.n	800be88 <_dtoa_r+0xa38>
 800beb4:	f108 0801 	add.w	r8, r8, #1
 800beb8:	9b05      	ldr	r3, [sp, #20]
 800beba:	e7c2      	b.n	800be42 <_dtoa_r+0x9f2>
 800bebc:	9a02      	ldr	r2, [sp, #8]
 800bebe:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bec2:	eba5 030b 	sub.w	r3, r5, fp
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d021      	beq.n	800bf0e <_dtoa_r+0xabe>
 800beca:	2300      	movs	r3, #0
 800becc:	220a      	movs	r2, #10
 800bece:	9904      	ldr	r1, [sp, #16]
 800bed0:	4620      	mov	r0, r4
 800bed2:	f000 f8d0 	bl	800c076 <__multadd>
 800bed6:	45b1      	cmp	r9, r6
 800bed8:	9004      	str	r0, [sp, #16]
 800beda:	f04f 0300 	mov.w	r3, #0
 800bede:	f04f 020a 	mov.w	r2, #10
 800bee2:	4649      	mov	r1, r9
 800bee4:	4620      	mov	r0, r4
 800bee6:	d105      	bne.n	800bef4 <_dtoa_r+0xaa4>
 800bee8:	f000 f8c5 	bl	800c076 <__multadd>
 800beec:	4681      	mov	r9, r0
 800beee:	4606      	mov	r6, r0
 800bef0:	9505      	str	r5, [sp, #20]
 800bef2:	e776      	b.n	800bde2 <_dtoa_r+0x992>
 800bef4:	f000 f8bf 	bl	800c076 <__multadd>
 800bef8:	4631      	mov	r1, r6
 800befa:	4681      	mov	r9, r0
 800befc:	2300      	movs	r3, #0
 800befe:	220a      	movs	r2, #10
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 f8b8 	bl	800c076 <__multadd>
 800bf06:	4606      	mov	r6, r0
 800bf08:	e7f2      	b.n	800bef0 <_dtoa_r+0xaa0>
 800bf0a:	f04f 0900 	mov.w	r9, #0
 800bf0e:	2201      	movs	r2, #1
 800bf10:	9904      	ldr	r1, [sp, #16]
 800bf12:	4620      	mov	r0, r4
 800bf14:	f000 fa26 	bl	800c364 <__lshift>
 800bf18:	4639      	mov	r1, r7
 800bf1a:	9004      	str	r0, [sp, #16]
 800bf1c:	f000 fa76 	bl	800c40c <__mcmp>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	dcb6      	bgt.n	800be92 <_dtoa_r+0xa42>
 800bf24:	d102      	bne.n	800bf2c <_dtoa_r+0xadc>
 800bf26:	f018 0f01 	tst.w	r8, #1
 800bf2a:	d1b2      	bne.n	800be92 <_dtoa_r+0xa42>
 800bf2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf30:	2b30      	cmp	r3, #48	; 0x30
 800bf32:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800bf36:	f47f af0a 	bne.w	800bd4e <_dtoa_r+0x8fe>
 800bf3a:	4615      	mov	r5, r2
 800bf3c:	e7f6      	b.n	800bf2c <_dtoa_r+0xadc>
 800bf3e:	4593      	cmp	fp, r2
 800bf40:	d105      	bne.n	800bf4e <_dtoa_r+0xafe>
 800bf42:	2331      	movs	r3, #49	; 0x31
 800bf44:	f10a 0a01 	add.w	sl, sl, #1
 800bf48:	f88b 3000 	strb.w	r3, [fp]
 800bf4c:	e6ff      	b.n	800bd4e <_dtoa_r+0x8fe>
 800bf4e:	4615      	mov	r5, r2
 800bf50:	e79f      	b.n	800be92 <_dtoa_r+0xa42>
 800bf52:	f8df b064 	ldr.w	fp, [pc, #100]	; 800bfb8 <_dtoa_r+0xb68>
 800bf56:	e007      	b.n	800bf68 <_dtoa_r+0xb18>
 800bf58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800bfbc <_dtoa_r+0xb6c>
 800bf5e:	b11b      	cbz	r3, 800bf68 <_dtoa_r+0xb18>
 800bf60:	f10b 0308 	add.w	r3, fp, #8
 800bf64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf66:	6013      	str	r3, [r2, #0]
 800bf68:	4658      	mov	r0, fp
 800bf6a:	b017      	add	sp, #92	; 0x5c
 800bf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf70:	9b06      	ldr	r3, [sp, #24]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	f77f ae35 	ble.w	800bbe2 <_dtoa_r+0x792>
 800bf78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf7a:	9307      	str	r3, [sp, #28]
 800bf7c:	e649      	b.n	800bc12 <_dtoa_r+0x7c2>
 800bf7e:	9b02      	ldr	r3, [sp, #8]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	dc03      	bgt.n	800bf8c <_dtoa_r+0xb3c>
 800bf84:	9b06      	ldr	r3, [sp, #24]
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	f73f aecc 	bgt.w	800bd24 <_dtoa_r+0x8d4>
 800bf8c:	465d      	mov	r5, fp
 800bf8e:	4639      	mov	r1, r7
 800bf90:	9804      	ldr	r0, [sp, #16]
 800bf92:	f7ff f9d1 	bl	800b338 <quorem>
 800bf96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bf9a:	f805 8b01 	strb.w	r8, [r5], #1
 800bf9e:	9a02      	ldr	r2, [sp, #8]
 800bfa0:	eba5 030b 	sub.w	r3, r5, fp
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	ddb0      	ble.n	800bf0a <_dtoa_r+0xaba>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	220a      	movs	r2, #10
 800bfac:	9904      	ldr	r1, [sp, #16]
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f000 f861 	bl	800c076 <__multadd>
 800bfb4:	9004      	str	r0, [sp, #16]
 800bfb6:	e7ea      	b.n	800bf8e <_dtoa_r+0xb3e>
 800bfb8:	0800cc90 	.word	0x0800cc90
 800bfbc:	0800ccb4 	.word	0x0800ccb4

0800bfc0 <_localeconv_r>:
 800bfc0:	4b04      	ldr	r3, [pc, #16]	; (800bfd4 <_localeconv_r+0x14>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	6a18      	ldr	r0, [r3, #32]
 800bfc6:	4b04      	ldr	r3, [pc, #16]	; (800bfd8 <_localeconv_r+0x18>)
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	bf08      	it	eq
 800bfcc:	4618      	moveq	r0, r3
 800bfce:	30f0      	adds	r0, #240	; 0xf0
 800bfd0:	4770      	bx	lr
 800bfd2:	bf00      	nop
 800bfd4:	2000000c 	.word	0x2000000c
 800bfd8:	20000070 	.word	0x20000070

0800bfdc <__malloc_lock>:
 800bfdc:	4770      	bx	lr

0800bfde <__malloc_unlock>:
 800bfde:	4770      	bx	lr

0800bfe0 <_Balloc>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	460e      	mov	r6, r1
 800bfe8:	b93d      	cbnz	r5, 800bffa <_Balloc+0x1a>
 800bfea:	2010      	movs	r0, #16
 800bfec:	f7fe fbd6 	bl	800a79c <malloc>
 800bff0:	6260      	str	r0, [r4, #36]	; 0x24
 800bff2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bff6:	6005      	str	r5, [r0, #0]
 800bff8:	60c5      	str	r5, [r0, #12]
 800bffa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bffc:	68eb      	ldr	r3, [r5, #12]
 800bffe:	b183      	cbz	r3, 800c022 <_Balloc+0x42>
 800c000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c008:	b9b8      	cbnz	r0, 800c03a <_Balloc+0x5a>
 800c00a:	2101      	movs	r1, #1
 800c00c:	fa01 f506 	lsl.w	r5, r1, r6
 800c010:	1d6a      	adds	r2, r5, #5
 800c012:	0092      	lsls	r2, r2, #2
 800c014:	4620      	mov	r0, r4
 800c016:	f000 fabf 	bl	800c598 <_calloc_r>
 800c01a:	b160      	cbz	r0, 800c036 <_Balloc+0x56>
 800c01c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c020:	e00e      	b.n	800c040 <_Balloc+0x60>
 800c022:	2221      	movs	r2, #33	; 0x21
 800c024:	2104      	movs	r1, #4
 800c026:	4620      	mov	r0, r4
 800c028:	f000 fab6 	bl	800c598 <_calloc_r>
 800c02c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c02e:	60e8      	str	r0, [r5, #12]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1e4      	bne.n	800c000 <_Balloc+0x20>
 800c036:	2000      	movs	r0, #0
 800c038:	bd70      	pop	{r4, r5, r6, pc}
 800c03a:	6802      	ldr	r2, [r0, #0]
 800c03c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c040:	2300      	movs	r3, #0
 800c042:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c046:	e7f7      	b.n	800c038 <_Balloc+0x58>

0800c048 <_Bfree>:
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c04c:	4606      	mov	r6, r0
 800c04e:	460d      	mov	r5, r1
 800c050:	b93c      	cbnz	r4, 800c062 <_Bfree+0x1a>
 800c052:	2010      	movs	r0, #16
 800c054:	f7fe fba2 	bl	800a79c <malloc>
 800c058:	6270      	str	r0, [r6, #36]	; 0x24
 800c05a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c05e:	6004      	str	r4, [r0, #0]
 800c060:	60c4      	str	r4, [r0, #12]
 800c062:	b13d      	cbz	r5, 800c074 <_Bfree+0x2c>
 800c064:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c066:	686a      	ldr	r2, [r5, #4]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c06e:	6029      	str	r1, [r5, #0]
 800c070:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c074:	bd70      	pop	{r4, r5, r6, pc}

0800c076 <__multadd>:
 800c076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c07a:	690d      	ldr	r5, [r1, #16]
 800c07c:	461f      	mov	r7, r3
 800c07e:	4606      	mov	r6, r0
 800c080:	460c      	mov	r4, r1
 800c082:	f101 0c14 	add.w	ip, r1, #20
 800c086:	2300      	movs	r3, #0
 800c088:	f8dc 0000 	ldr.w	r0, [ip]
 800c08c:	b281      	uxth	r1, r0
 800c08e:	fb02 7101 	mla	r1, r2, r1, r7
 800c092:	0c0f      	lsrs	r7, r1, #16
 800c094:	0c00      	lsrs	r0, r0, #16
 800c096:	fb02 7000 	mla	r0, r2, r0, r7
 800c09a:	b289      	uxth	r1, r1
 800c09c:	3301      	adds	r3, #1
 800c09e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c0a2:	429d      	cmp	r5, r3
 800c0a4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c0a8:	f84c 1b04 	str.w	r1, [ip], #4
 800c0ac:	dcec      	bgt.n	800c088 <__multadd+0x12>
 800c0ae:	b1d7      	cbz	r7, 800c0e6 <__multadd+0x70>
 800c0b0:	68a3      	ldr	r3, [r4, #8]
 800c0b2:	42ab      	cmp	r3, r5
 800c0b4:	dc12      	bgt.n	800c0dc <__multadd+0x66>
 800c0b6:	6861      	ldr	r1, [r4, #4]
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	3101      	adds	r1, #1
 800c0bc:	f7ff ff90 	bl	800bfe0 <_Balloc>
 800c0c0:	6922      	ldr	r2, [r4, #16]
 800c0c2:	3202      	adds	r2, #2
 800c0c4:	f104 010c 	add.w	r1, r4, #12
 800c0c8:	4680      	mov	r8, r0
 800c0ca:	0092      	lsls	r2, r2, #2
 800c0cc:	300c      	adds	r0, #12
 800c0ce:	f7fe fb75 	bl	800a7bc <memcpy>
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f7ff ffb7 	bl	800c048 <_Bfree>
 800c0da:	4644      	mov	r4, r8
 800c0dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0e0:	3501      	adds	r5, #1
 800c0e2:	615f      	str	r7, [r3, #20]
 800c0e4:	6125      	str	r5, [r4, #16]
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c0ec <__hi0bits>:
 800c0ec:	0c02      	lsrs	r2, r0, #16
 800c0ee:	0412      	lsls	r2, r2, #16
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	b9b2      	cbnz	r2, 800c122 <__hi0bits+0x36>
 800c0f4:	0403      	lsls	r3, r0, #16
 800c0f6:	2010      	movs	r0, #16
 800c0f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c0fc:	bf04      	itt	eq
 800c0fe:	021b      	lsleq	r3, r3, #8
 800c100:	3008      	addeq	r0, #8
 800c102:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c106:	bf04      	itt	eq
 800c108:	011b      	lsleq	r3, r3, #4
 800c10a:	3004      	addeq	r0, #4
 800c10c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c110:	bf04      	itt	eq
 800c112:	009b      	lsleq	r3, r3, #2
 800c114:	3002      	addeq	r0, #2
 800c116:	2b00      	cmp	r3, #0
 800c118:	db06      	blt.n	800c128 <__hi0bits+0x3c>
 800c11a:	005b      	lsls	r3, r3, #1
 800c11c:	d503      	bpl.n	800c126 <__hi0bits+0x3a>
 800c11e:	3001      	adds	r0, #1
 800c120:	4770      	bx	lr
 800c122:	2000      	movs	r0, #0
 800c124:	e7e8      	b.n	800c0f8 <__hi0bits+0xc>
 800c126:	2020      	movs	r0, #32
 800c128:	4770      	bx	lr

0800c12a <__lo0bits>:
 800c12a:	6803      	ldr	r3, [r0, #0]
 800c12c:	f013 0207 	ands.w	r2, r3, #7
 800c130:	4601      	mov	r1, r0
 800c132:	d00b      	beq.n	800c14c <__lo0bits+0x22>
 800c134:	07da      	lsls	r2, r3, #31
 800c136:	d423      	bmi.n	800c180 <__lo0bits+0x56>
 800c138:	0798      	lsls	r0, r3, #30
 800c13a:	bf49      	itett	mi
 800c13c:	085b      	lsrmi	r3, r3, #1
 800c13e:	089b      	lsrpl	r3, r3, #2
 800c140:	2001      	movmi	r0, #1
 800c142:	600b      	strmi	r3, [r1, #0]
 800c144:	bf5c      	itt	pl
 800c146:	600b      	strpl	r3, [r1, #0]
 800c148:	2002      	movpl	r0, #2
 800c14a:	4770      	bx	lr
 800c14c:	b298      	uxth	r0, r3
 800c14e:	b9a8      	cbnz	r0, 800c17c <__lo0bits+0x52>
 800c150:	0c1b      	lsrs	r3, r3, #16
 800c152:	2010      	movs	r0, #16
 800c154:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c158:	bf04      	itt	eq
 800c15a:	0a1b      	lsreq	r3, r3, #8
 800c15c:	3008      	addeq	r0, #8
 800c15e:	071a      	lsls	r2, r3, #28
 800c160:	bf04      	itt	eq
 800c162:	091b      	lsreq	r3, r3, #4
 800c164:	3004      	addeq	r0, #4
 800c166:	079a      	lsls	r2, r3, #30
 800c168:	bf04      	itt	eq
 800c16a:	089b      	lsreq	r3, r3, #2
 800c16c:	3002      	addeq	r0, #2
 800c16e:	07da      	lsls	r2, r3, #31
 800c170:	d402      	bmi.n	800c178 <__lo0bits+0x4e>
 800c172:	085b      	lsrs	r3, r3, #1
 800c174:	d006      	beq.n	800c184 <__lo0bits+0x5a>
 800c176:	3001      	adds	r0, #1
 800c178:	600b      	str	r3, [r1, #0]
 800c17a:	4770      	bx	lr
 800c17c:	4610      	mov	r0, r2
 800c17e:	e7e9      	b.n	800c154 <__lo0bits+0x2a>
 800c180:	2000      	movs	r0, #0
 800c182:	4770      	bx	lr
 800c184:	2020      	movs	r0, #32
 800c186:	4770      	bx	lr

0800c188 <__i2b>:
 800c188:	b510      	push	{r4, lr}
 800c18a:	460c      	mov	r4, r1
 800c18c:	2101      	movs	r1, #1
 800c18e:	f7ff ff27 	bl	800bfe0 <_Balloc>
 800c192:	2201      	movs	r2, #1
 800c194:	6144      	str	r4, [r0, #20]
 800c196:	6102      	str	r2, [r0, #16]
 800c198:	bd10      	pop	{r4, pc}

0800c19a <__multiply>:
 800c19a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19e:	4614      	mov	r4, r2
 800c1a0:	690a      	ldr	r2, [r1, #16]
 800c1a2:	6923      	ldr	r3, [r4, #16]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	bfb8      	it	lt
 800c1a8:	460b      	movlt	r3, r1
 800c1aa:	4688      	mov	r8, r1
 800c1ac:	bfbc      	itt	lt
 800c1ae:	46a0      	movlt	r8, r4
 800c1b0:	461c      	movlt	r4, r3
 800c1b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c1ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c1c2:	eb07 0609 	add.w	r6, r7, r9
 800c1c6:	42b3      	cmp	r3, r6
 800c1c8:	bfb8      	it	lt
 800c1ca:	3101      	addlt	r1, #1
 800c1cc:	f7ff ff08 	bl	800bfe0 <_Balloc>
 800c1d0:	f100 0514 	add.w	r5, r0, #20
 800c1d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c1d8:	462b      	mov	r3, r5
 800c1da:	2200      	movs	r2, #0
 800c1dc:	4573      	cmp	r3, lr
 800c1de:	d316      	bcc.n	800c20e <__multiply+0x74>
 800c1e0:	f104 0214 	add.w	r2, r4, #20
 800c1e4:	f108 0114 	add.w	r1, r8, #20
 800c1e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c1ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	9b00      	ldr	r3, [sp, #0]
 800c1f4:	9201      	str	r2, [sp, #4]
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d80c      	bhi.n	800c214 <__multiply+0x7a>
 800c1fa:	2e00      	cmp	r6, #0
 800c1fc:	dd03      	ble.n	800c206 <__multiply+0x6c>
 800c1fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c202:	2b00      	cmp	r3, #0
 800c204:	d05d      	beq.n	800c2c2 <__multiply+0x128>
 800c206:	6106      	str	r6, [r0, #16]
 800c208:	b003      	add	sp, #12
 800c20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20e:	f843 2b04 	str.w	r2, [r3], #4
 800c212:	e7e3      	b.n	800c1dc <__multiply+0x42>
 800c214:	f8b2 b000 	ldrh.w	fp, [r2]
 800c218:	f1bb 0f00 	cmp.w	fp, #0
 800c21c:	d023      	beq.n	800c266 <__multiply+0xcc>
 800c21e:	4689      	mov	r9, r1
 800c220:	46ac      	mov	ip, r5
 800c222:	f04f 0800 	mov.w	r8, #0
 800c226:	f859 4b04 	ldr.w	r4, [r9], #4
 800c22a:	f8dc a000 	ldr.w	sl, [ip]
 800c22e:	b2a3      	uxth	r3, r4
 800c230:	fa1f fa8a 	uxth.w	sl, sl
 800c234:	fb0b a303 	mla	r3, fp, r3, sl
 800c238:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c23c:	f8dc 4000 	ldr.w	r4, [ip]
 800c240:	4443      	add	r3, r8
 800c242:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c246:	fb0b 840a 	mla	r4, fp, sl, r8
 800c24a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c24e:	46e2      	mov	sl, ip
 800c250:	b29b      	uxth	r3, r3
 800c252:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c256:	454f      	cmp	r7, r9
 800c258:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c25c:	f84a 3b04 	str.w	r3, [sl], #4
 800c260:	d82b      	bhi.n	800c2ba <__multiply+0x120>
 800c262:	f8cc 8004 	str.w	r8, [ip, #4]
 800c266:	9b01      	ldr	r3, [sp, #4]
 800c268:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c26c:	3204      	adds	r2, #4
 800c26e:	f1ba 0f00 	cmp.w	sl, #0
 800c272:	d020      	beq.n	800c2b6 <__multiply+0x11c>
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	4689      	mov	r9, r1
 800c278:	46a8      	mov	r8, r5
 800c27a:	f04f 0b00 	mov.w	fp, #0
 800c27e:	f8b9 c000 	ldrh.w	ip, [r9]
 800c282:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c286:	fb0a 440c 	mla	r4, sl, ip, r4
 800c28a:	445c      	add	r4, fp
 800c28c:	46c4      	mov	ip, r8
 800c28e:	b29b      	uxth	r3, r3
 800c290:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c294:	f84c 3b04 	str.w	r3, [ip], #4
 800c298:	f859 3b04 	ldr.w	r3, [r9], #4
 800c29c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c2a0:	0c1b      	lsrs	r3, r3, #16
 800c2a2:	fb0a b303 	mla	r3, sl, r3, fp
 800c2a6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c2aa:	454f      	cmp	r7, r9
 800c2ac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c2b0:	d805      	bhi.n	800c2be <__multiply+0x124>
 800c2b2:	f8c8 3004 	str.w	r3, [r8, #4]
 800c2b6:	3504      	adds	r5, #4
 800c2b8:	e79b      	b.n	800c1f2 <__multiply+0x58>
 800c2ba:	46d4      	mov	ip, sl
 800c2bc:	e7b3      	b.n	800c226 <__multiply+0x8c>
 800c2be:	46e0      	mov	r8, ip
 800c2c0:	e7dd      	b.n	800c27e <__multiply+0xe4>
 800c2c2:	3e01      	subs	r6, #1
 800c2c4:	e799      	b.n	800c1fa <__multiply+0x60>
	...

0800c2c8 <__pow5mult>:
 800c2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2cc:	4615      	mov	r5, r2
 800c2ce:	f012 0203 	ands.w	r2, r2, #3
 800c2d2:	4606      	mov	r6, r0
 800c2d4:	460f      	mov	r7, r1
 800c2d6:	d007      	beq.n	800c2e8 <__pow5mult+0x20>
 800c2d8:	3a01      	subs	r2, #1
 800c2da:	4c21      	ldr	r4, [pc, #132]	; (800c360 <__pow5mult+0x98>)
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2e2:	f7ff fec8 	bl	800c076 <__multadd>
 800c2e6:	4607      	mov	r7, r0
 800c2e8:	10ad      	asrs	r5, r5, #2
 800c2ea:	d035      	beq.n	800c358 <__pow5mult+0x90>
 800c2ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c2ee:	b93c      	cbnz	r4, 800c300 <__pow5mult+0x38>
 800c2f0:	2010      	movs	r0, #16
 800c2f2:	f7fe fa53 	bl	800a79c <malloc>
 800c2f6:	6270      	str	r0, [r6, #36]	; 0x24
 800c2f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2fc:	6004      	str	r4, [r0, #0]
 800c2fe:	60c4      	str	r4, [r0, #12]
 800c300:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c304:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c308:	b94c      	cbnz	r4, 800c31e <__pow5mult+0x56>
 800c30a:	f240 2171 	movw	r1, #625	; 0x271
 800c30e:	4630      	mov	r0, r6
 800c310:	f7ff ff3a 	bl	800c188 <__i2b>
 800c314:	2300      	movs	r3, #0
 800c316:	f8c8 0008 	str.w	r0, [r8, #8]
 800c31a:	4604      	mov	r4, r0
 800c31c:	6003      	str	r3, [r0, #0]
 800c31e:	f04f 0800 	mov.w	r8, #0
 800c322:	07eb      	lsls	r3, r5, #31
 800c324:	d50a      	bpl.n	800c33c <__pow5mult+0x74>
 800c326:	4639      	mov	r1, r7
 800c328:	4622      	mov	r2, r4
 800c32a:	4630      	mov	r0, r6
 800c32c:	f7ff ff35 	bl	800c19a <__multiply>
 800c330:	4639      	mov	r1, r7
 800c332:	4681      	mov	r9, r0
 800c334:	4630      	mov	r0, r6
 800c336:	f7ff fe87 	bl	800c048 <_Bfree>
 800c33a:	464f      	mov	r7, r9
 800c33c:	106d      	asrs	r5, r5, #1
 800c33e:	d00b      	beq.n	800c358 <__pow5mult+0x90>
 800c340:	6820      	ldr	r0, [r4, #0]
 800c342:	b938      	cbnz	r0, 800c354 <__pow5mult+0x8c>
 800c344:	4622      	mov	r2, r4
 800c346:	4621      	mov	r1, r4
 800c348:	4630      	mov	r0, r6
 800c34a:	f7ff ff26 	bl	800c19a <__multiply>
 800c34e:	6020      	str	r0, [r4, #0]
 800c350:	f8c0 8000 	str.w	r8, [r0]
 800c354:	4604      	mov	r4, r0
 800c356:	e7e4      	b.n	800c322 <__pow5mult+0x5a>
 800c358:	4638      	mov	r0, r7
 800c35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c35e:	bf00      	nop
 800c360:	0800cdb8 	.word	0x0800cdb8

0800c364 <__lshift>:
 800c364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c368:	460c      	mov	r4, r1
 800c36a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c36e:	6923      	ldr	r3, [r4, #16]
 800c370:	6849      	ldr	r1, [r1, #4]
 800c372:	eb0a 0903 	add.w	r9, sl, r3
 800c376:	68a3      	ldr	r3, [r4, #8]
 800c378:	4607      	mov	r7, r0
 800c37a:	4616      	mov	r6, r2
 800c37c:	f109 0501 	add.w	r5, r9, #1
 800c380:	42ab      	cmp	r3, r5
 800c382:	db32      	blt.n	800c3ea <__lshift+0x86>
 800c384:	4638      	mov	r0, r7
 800c386:	f7ff fe2b 	bl	800bfe0 <_Balloc>
 800c38a:	2300      	movs	r3, #0
 800c38c:	4680      	mov	r8, r0
 800c38e:	f100 0114 	add.w	r1, r0, #20
 800c392:	461a      	mov	r2, r3
 800c394:	4553      	cmp	r3, sl
 800c396:	db2b      	blt.n	800c3f0 <__lshift+0x8c>
 800c398:	6920      	ldr	r0, [r4, #16]
 800c39a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c39e:	f104 0314 	add.w	r3, r4, #20
 800c3a2:	f016 021f 	ands.w	r2, r6, #31
 800c3a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3ae:	d025      	beq.n	800c3fc <__lshift+0x98>
 800c3b0:	f1c2 0e20 	rsb	lr, r2, #32
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	681e      	ldr	r6, [r3, #0]
 800c3b8:	468a      	mov	sl, r1
 800c3ba:	4096      	lsls	r6, r2
 800c3bc:	4330      	orrs	r0, r6
 800c3be:	f84a 0b04 	str.w	r0, [sl], #4
 800c3c2:	f853 0b04 	ldr.w	r0, [r3], #4
 800c3c6:	459c      	cmp	ip, r3
 800c3c8:	fa20 f00e 	lsr.w	r0, r0, lr
 800c3cc:	d814      	bhi.n	800c3f8 <__lshift+0x94>
 800c3ce:	6048      	str	r0, [r1, #4]
 800c3d0:	b108      	cbz	r0, 800c3d6 <__lshift+0x72>
 800c3d2:	f109 0502 	add.w	r5, r9, #2
 800c3d6:	3d01      	subs	r5, #1
 800c3d8:	4638      	mov	r0, r7
 800c3da:	f8c8 5010 	str.w	r5, [r8, #16]
 800c3de:	4621      	mov	r1, r4
 800c3e0:	f7ff fe32 	bl	800c048 <_Bfree>
 800c3e4:	4640      	mov	r0, r8
 800c3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ea:	3101      	adds	r1, #1
 800c3ec:	005b      	lsls	r3, r3, #1
 800c3ee:	e7c7      	b.n	800c380 <__lshift+0x1c>
 800c3f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	e7cd      	b.n	800c394 <__lshift+0x30>
 800c3f8:	4651      	mov	r1, sl
 800c3fa:	e7dc      	b.n	800c3b6 <__lshift+0x52>
 800c3fc:	3904      	subs	r1, #4
 800c3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c402:	f841 2f04 	str.w	r2, [r1, #4]!
 800c406:	459c      	cmp	ip, r3
 800c408:	d8f9      	bhi.n	800c3fe <__lshift+0x9a>
 800c40a:	e7e4      	b.n	800c3d6 <__lshift+0x72>

0800c40c <__mcmp>:
 800c40c:	6903      	ldr	r3, [r0, #16]
 800c40e:	690a      	ldr	r2, [r1, #16]
 800c410:	1a9b      	subs	r3, r3, r2
 800c412:	b530      	push	{r4, r5, lr}
 800c414:	d10c      	bne.n	800c430 <__mcmp+0x24>
 800c416:	0092      	lsls	r2, r2, #2
 800c418:	3014      	adds	r0, #20
 800c41a:	3114      	adds	r1, #20
 800c41c:	1884      	adds	r4, r0, r2
 800c41e:	4411      	add	r1, r2
 800c420:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c424:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c428:	4295      	cmp	r5, r2
 800c42a:	d003      	beq.n	800c434 <__mcmp+0x28>
 800c42c:	d305      	bcc.n	800c43a <__mcmp+0x2e>
 800c42e:	2301      	movs	r3, #1
 800c430:	4618      	mov	r0, r3
 800c432:	bd30      	pop	{r4, r5, pc}
 800c434:	42a0      	cmp	r0, r4
 800c436:	d3f3      	bcc.n	800c420 <__mcmp+0x14>
 800c438:	e7fa      	b.n	800c430 <__mcmp+0x24>
 800c43a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c43e:	e7f7      	b.n	800c430 <__mcmp+0x24>

0800c440 <__mdiff>:
 800c440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c444:	460d      	mov	r5, r1
 800c446:	4607      	mov	r7, r0
 800c448:	4611      	mov	r1, r2
 800c44a:	4628      	mov	r0, r5
 800c44c:	4614      	mov	r4, r2
 800c44e:	f7ff ffdd 	bl	800c40c <__mcmp>
 800c452:	1e06      	subs	r6, r0, #0
 800c454:	d108      	bne.n	800c468 <__mdiff+0x28>
 800c456:	4631      	mov	r1, r6
 800c458:	4638      	mov	r0, r7
 800c45a:	f7ff fdc1 	bl	800bfe0 <_Balloc>
 800c45e:	2301      	movs	r3, #1
 800c460:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c468:	bfa4      	itt	ge
 800c46a:	4623      	movge	r3, r4
 800c46c:	462c      	movge	r4, r5
 800c46e:	4638      	mov	r0, r7
 800c470:	6861      	ldr	r1, [r4, #4]
 800c472:	bfa6      	itte	ge
 800c474:	461d      	movge	r5, r3
 800c476:	2600      	movge	r6, #0
 800c478:	2601      	movlt	r6, #1
 800c47a:	f7ff fdb1 	bl	800bfe0 <_Balloc>
 800c47e:	692b      	ldr	r3, [r5, #16]
 800c480:	60c6      	str	r6, [r0, #12]
 800c482:	6926      	ldr	r6, [r4, #16]
 800c484:	f105 0914 	add.w	r9, r5, #20
 800c488:	f104 0214 	add.w	r2, r4, #20
 800c48c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c490:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c494:	f100 0514 	add.w	r5, r0, #20
 800c498:	f04f 0e00 	mov.w	lr, #0
 800c49c:	f852 ab04 	ldr.w	sl, [r2], #4
 800c4a0:	f859 4b04 	ldr.w	r4, [r9], #4
 800c4a4:	fa1e f18a 	uxtah	r1, lr, sl
 800c4a8:	b2a3      	uxth	r3, r4
 800c4aa:	1ac9      	subs	r1, r1, r3
 800c4ac:	0c23      	lsrs	r3, r4, #16
 800c4ae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c4b2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c4b6:	b289      	uxth	r1, r1
 800c4b8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c4bc:	45c8      	cmp	r8, r9
 800c4be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c4c2:	4694      	mov	ip, r2
 800c4c4:	f845 3b04 	str.w	r3, [r5], #4
 800c4c8:	d8e8      	bhi.n	800c49c <__mdiff+0x5c>
 800c4ca:	45bc      	cmp	ip, r7
 800c4cc:	d304      	bcc.n	800c4d8 <__mdiff+0x98>
 800c4ce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c4d2:	b183      	cbz	r3, 800c4f6 <__mdiff+0xb6>
 800c4d4:	6106      	str	r6, [r0, #16]
 800c4d6:	e7c5      	b.n	800c464 <__mdiff+0x24>
 800c4d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c4dc:	fa1e f381 	uxtah	r3, lr, r1
 800c4e0:	141a      	asrs	r2, r3, #16
 800c4e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4ec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c4f0:	f845 3b04 	str.w	r3, [r5], #4
 800c4f4:	e7e9      	b.n	800c4ca <__mdiff+0x8a>
 800c4f6:	3e01      	subs	r6, #1
 800c4f8:	e7e9      	b.n	800c4ce <__mdiff+0x8e>

0800c4fa <__d2b>:
 800c4fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4fe:	460e      	mov	r6, r1
 800c500:	2101      	movs	r1, #1
 800c502:	ec59 8b10 	vmov	r8, r9, d0
 800c506:	4615      	mov	r5, r2
 800c508:	f7ff fd6a 	bl	800bfe0 <_Balloc>
 800c50c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c510:	4607      	mov	r7, r0
 800c512:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c516:	bb34      	cbnz	r4, 800c566 <__d2b+0x6c>
 800c518:	9301      	str	r3, [sp, #4]
 800c51a:	f1b8 0300 	subs.w	r3, r8, #0
 800c51e:	d027      	beq.n	800c570 <__d2b+0x76>
 800c520:	a802      	add	r0, sp, #8
 800c522:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c526:	f7ff fe00 	bl	800c12a <__lo0bits>
 800c52a:	9900      	ldr	r1, [sp, #0]
 800c52c:	b1f0      	cbz	r0, 800c56c <__d2b+0x72>
 800c52e:	9a01      	ldr	r2, [sp, #4]
 800c530:	f1c0 0320 	rsb	r3, r0, #32
 800c534:	fa02 f303 	lsl.w	r3, r2, r3
 800c538:	430b      	orrs	r3, r1
 800c53a:	40c2      	lsrs	r2, r0
 800c53c:	617b      	str	r3, [r7, #20]
 800c53e:	9201      	str	r2, [sp, #4]
 800c540:	9b01      	ldr	r3, [sp, #4]
 800c542:	61bb      	str	r3, [r7, #24]
 800c544:	2b00      	cmp	r3, #0
 800c546:	bf14      	ite	ne
 800c548:	2102      	movne	r1, #2
 800c54a:	2101      	moveq	r1, #1
 800c54c:	6139      	str	r1, [r7, #16]
 800c54e:	b1c4      	cbz	r4, 800c582 <__d2b+0x88>
 800c550:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c554:	4404      	add	r4, r0
 800c556:	6034      	str	r4, [r6, #0]
 800c558:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c55c:	6028      	str	r0, [r5, #0]
 800c55e:	4638      	mov	r0, r7
 800c560:	b003      	add	sp, #12
 800c562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c56a:	e7d5      	b.n	800c518 <__d2b+0x1e>
 800c56c:	6179      	str	r1, [r7, #20]
 800c56e:	e7e7      	b.n	800c540 <__d2b+0x46>
 800c570:	a801      	add	r0, sp, #4
 800c572:	f7ff fdda 	bl	800c12a <__lo0bits>
 800c576:	9b01      	ldr	r3, [sp, #4]
 800c578:	617b      	str	r3, [r7, #20]
 800c57a:	2101      	movs	r1, #1
 800c57c:	6139      	str	r1, [r7, #16]
 800c57e:	3020      	adds	r0, #32
 800c580:	e7e5      	b.n	800c54e <__d2b+0x54>
 800c582:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c586:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c58a:	6030      	str	r0, [r6, #0]
 800c58c:	6918      	ldr	r0, [r3, #16]
 800c58e:	f7ff fdad 	bl	800c0ec <__hi0bits>
 800c592:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c596:	e7e1      	b.n	800c55c <__d2b+0x62>

0800c598 <_calloc_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	fb02 f401 	mul.w	r4, r2, r1
 800c59e:	4621      	mov	r1, r4
 800c5a0:	f7fe f986 	bl	800a8b0 <_malloc_r>
 800c5a4:	4605      	mov	r5, r0
 800c5a6:	b118      	cbz	r0, 800c5b0 <_calloc_r+0x18>
 800c5a8:	4622      	mov	r2, r4
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	f7fe f92a 	bl	800a804 <memset>
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}

0800c5b4 <__ssputs_r>:
 800c5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b8:	688e      	ldr	r6, [r1, #8]
 800c5ba:	429e      	cmp	r6, r3
 800c5bc:	4682      	mov	sl, r0
 800c5be:	460c      	mov	r4, r1
 800c5c0:	4690      	mov	r8, r2
 800c5c2:	4699      	mov	r9, r3
 800c5c4:	d837      	bhi.n	800c636 <__ssputs_r+0x82>
 800c5c6:	898a      	ldrh	r2, [r1, #12]
 800c5c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5cc:	d031      	beq.n	800c632 <__ssputs_r+0x7e>
 800c5ce:	6825      	ldr	r5, [r4, #0]
 800c5d0:	6909      	ldr	r1, [r1, #16]
 800c5d2:	1a6f      	subs	r7, r5, r1
 800c5d4:	6965      	ldr	r5, [r4, #20]
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5dc:	fb95 f5f3 	sdiv	r5, r5, r3
 800c5e0:	f109 0301 	add.w	r3, r9, #1
 800c5e4:	443b      	add	r3, r7
 800c5e6:	429d      	cmp	r5, r3
 800c5e8:	bf38      	it	cc
 800c5ea:	461d      	movcc	r5, r3
 800c5ec:	0553      	lsls	r3, r2, #21
 800c5ee:	d530      	bpl.n	800c652 <__ssputs_r+0x9e>
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	f7fe f95d 	bl	800a8b0 <_malloc_r>
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	b950      	cbnz	r0, 800c610 <__ssputs_r+0x5c>
 800c5fa:	230c      	movs	r3, #12
 800c5fc:	f8ca 3000 	str.w	r3, [sl]
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c606:	81a3      	strh	r3, [r4, #12]
 800c608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c610:	463a      	mov	r2, r7
 800c612:	6921      	ldr	r1, [r4, #16]
 800c614:	f7fe f8d2 	bl	800a7bc <memcpy>
 800c618:	89a3      	ldrh	r3, [r4, #12]
 800c61a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c61e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c622:	81a3      	strh	r3, [r4, #12]
 800c624:	6126      	str	r6, [r4, #16]
 800c626:	6165      	str	r5, [r4, #20]
 800c628:	443e      	add	r6, r7
 800c62a:	1bed      	subs	r5, r5, r7
 800c62c:	6026      	str	r6, [r4, #0]
 800c62e:	60a5      	str	r5, [r4, #8]
 800c630:	464e      	mov	r6, r9
 800c632:	454e      	cmp	r6, r9
 800c634:	d900      	bls.n	800c638 <__ssputs_r+0x84>
 800c636:	464e      	mov	r6, r9
 800c638:	4632      	mov	r2, r6
 800c63a:	4641      	mov	r1, r8
 800c63c:	6820      	ldr	r0, [r4, #0]
 800c63e:	f7fe f8c8 	bl	800a7d2 <memmove>
 800c642:	68a3      	ldr	r3, [r4, #8]
 800c644:	1b9b      	subs	r3, r3, r6
 800c646:	60a3      	str	r3, [r4, #8]
 800c648:	6823      	ldr	r3, [r4, #0]
 800c64a:	441e      	add	r6, r3
 800c64c:	6026      	str	r6, [r4, #0]
 800c64e:	2000      	movs	r0, #0
 800c650:	e7dc      	b.n	800c60c <__ssputs_r+0x58>
 800c652:	462a      	mov	r2, r5
 800c654:	f000 f912 	bl	800c87c <_realloc_r>
 800c658:	4606      	mov	r6, r0
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d1e2      	bne.n	800c624 <__ssputs_r+0x70>
 800c65e:	6921      	ldr	r1, [r4, #16]
 800c660:	4650      	mov	r0, sl
 800c662:	f7fe f8d7 	bl	800a814 <_free_r>
 800c666:	e7c8      	b.n	800c5fa <__ssputs_r+0x46>

0800c668 <_svfiprintf_r>:
 800c668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	461d      	mov	r5, r3
 800c66e:	898b      	ldrh	r3, [r1, #12]
 800c670:	061f      	lsls	r7, r3, #24
 800c672:	b09d      	sub	sp, #116	; 0x74
 800c674:	4680      	mov	r8, r0
 800c676:	460c      	mov	r4, r1
 800c678:	4616      	mov	r6, r2
 800c67a:	d50f      	bpl.n	800c69c <_svfiprintf_r+0x34>
 800c67c:	690b      	ldr	r3, [r1, #16]
 800c67e:	b96b      	cbnz	r3, 800c69c <_svfiprintf_r+0x34>
 800c680:	2140      	movs	r1, #64	; 0x40
 800c682:	f7fe f915 	bl	800a8b0 <_malloc_r>
 800c686:	6020      	str	r0, [r4, #0]
 800c688:	6120      	str	r0, [r4, #16]
 800c68a:	b928      	cbnz	r0, 800c698 <_svfiprintf_r+0x30>
 800c68c:	230c      	movs	r3, #12
 800c68e:	f8c8 3000 	str.w	r3, [r8]
 800c692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c696:	e0c8      	b.n	800c82a <_svfiprintf_r+0x1c2>
 800c698:	2340      	movs	r3, #64	; 0x40
 800c69a:	6163      	str	r3, [r4, #20]
 800c69c:	2300      	movs	r3, #0
 800c69e:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a0:	2320      	movs	r3, #32
 800c6a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6a6:	2330      	movs	r3, #48	; 0x30
 800c6a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6ac:	9503      	str	r5, [sp, #12]
 800c6ae:	f04f 0b01 	mov.w	fp, #1
 800c6b2:	4637      	mov	r7, r6
 800c6b4:	463d      	mov	r5, r7
 800c6b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c6ba:	b10b      	cbz	r3, 800c6c0 <_svfiprintf_r+0x58>
 800c6bc:	2b25      	cmp	r3, #37	; 0x25
 800c6be:	d13e      	bne.n	800c73e <_svfiprintf_r+0xd6>
 800c6c0:	ebb7 0a06 	subs.w	sl, r7, r6
 800c6c4:	d00b      	beq.n	800c6de <_svfiprintf_r+0x76>
 800c6c6:	4653      	mov	r3, sl
 800c6c8:	4632      	mov	r2, r6
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	4640      	mov	r0, r8
 800c6ce:	f7ff ff71 	bl	800c5b4 <__ssputs_r>
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	f000 80a4 	beq.w	800c820 <_svfiprintf_r+0x1b8>
 800c6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6da:	4453      	add	r3, sl
 800c6dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6de:	783b      	ldrb	r3, [r7, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 809d 	beq.w	800c820 <_svfiprintf_r+0x1b8>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6f0:	9304      	str	r3, [sp, #16]
 800c6f2:	9307      	str	r3, [sp, #28]
 800c6f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6f8:	931a      	str	r3, [sp, #104]	; 0x68
 800c6fa:	462f      	mov	r7, r5
 800c6fc:	2205      	movs	r2, #5
 800c6fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c702:	4850      	ldr	r0, [pc, #320]	; (800c844 <_svfiprintf_r+0x1dc>)
 800c704:	f7f3 fd84 	bl	8000210 <memchr>
 800c708:	9b04      	ldr	r3, [sp, #16]
 800c70a:	b9d0      	cbnz	r0, 800c742 <_svfiprintf_r+0xda>
 800c70c:	06d9      	lsls	r1, r3, #27
 800c70e:	bf44      	itt	mi
 800c710:	2220      	movmi	r2, #32
 800c712:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c716:	071a      	lsls	r2, r3, #28
 800c718:	bf44      	itt	mi
 800c71a:	222b      	movmi	r2, #43	; 0x2b
 800c71c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c720:	782a      	ldrb	r2, [r5, #0]
 800c722:	2a2a      	cmp	r2, #42	; 0x2a
 800c724:	d015      	beq.n	800c752 <_svfiprintf_r+0xea>
 800c726:	9a07      	ldr	r2, [sp, #28]
 800c728:	462f      	mov	r7, r5
 800c72a:	2000      	movs	r0, #0
 800c72c:	250a      	movs	r5, #10
 800c72e:	4639      	mov	r1, r7
 800c730:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c734:	3b30      	subs	r3, #48	; 0x30
 800c736:	2b09      	cmp	r3, #9
 800c738:	d94d      	bls.n	800c7d6 <_svfiprintf_r+0x16e>
 800c73a:	b1b8      	cbz	r0, 800c76c <_svfiprintf_r+0x104>
 800c73c:	e00f      	b.n	800c75e <_svfiprintf_r+0xf6>
 800c73e:	462f      	mov	r7, r5
 800c740:	e7b8      	b.n	800c6b4 <_svfiprintf_r+0x4c>
 800c742:	4a40      	ldr	r2, [pc, #256]	; (800c844 <_svfiprintf_r+0x1dc>)
 800c744:	1a80      	subs	r0, r0, r2
 800c746:	fa0b f000 	lsl.w	r0, fp, r0
 800c74a:	4318      	orrs	r0, r3
 800c74c:	9004      	str	r0, [sp, #16]
 800c74e:	463d      	mov	r5, r7
 800c750:	e7d3      	b.n	800c6fa <_svfiprintf_r+0x92>
 800c752:	9a03      	ldr	r2, [sp, #12]
 800c754:	1d11      	adds	r1, r2, #4
 800c756:	6812      	ldr	r2, [r2, #0]
 800c758:	9103      	str	r1, [sp, #12]
 800c75a:	2a00      	cmp	r2, #0
 800c75c:	db01      	blt.n	800c762 <_svfiprintf_r+0xfa>
 800c75e:	9207      	str	r2, [sp, #28]
 800c760:	e004      	b.n	800c76c <_svfiprintf_r+0x104>
 800c762:	4252      	negs	r2, r2
 800c764:	f043 0302 	orr.w	r3, r3, #2
 800c768:	9207      	str	r2, [sp, #28]
 800c76a:	9304      	str	r3, [sp, #16]
 800c76c:	783b      	ldrb	r3, [r7, #0]
 800c76e:	2b2e      	cmp	r3, #46	; 0x2e
 800c770:	d10c      	bne.n	800c78c <_svfiprintf_r+0x124>
 800c772:	787b      	ldrb	r3, [r7, #1]
 800c774:	2b2a      	cmp	r3, #42	; 0x2a
 800c776:	d133      	bne.n	800c7e0 <_svfiprintf_r+0x178>
 800c778:	9b03      	ldr	r3, [sp, #12]
 800c77a:	1d1a      	adds	r2, r3, #4
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	9203      	str	r2, [sp, #12]
 800c780:	2b00      	cmp	r3, #0
 800c782:	bfb8      	it	lt
 800c784:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c788:	3702      	adds	r7, #2
 800c78a:	9305      	str	r3, [sp, #20]
 800c78c:	4d2e      	ldr	r5, [pc, #184]	; (800c848 <_svfiprintf_r+0x1e0>)
 800c78e:	7839      	ldrb	r1, [r7, #0]
 800c790:	2203      	movs	r2, #3
 800c792:	4628      	mov	r0, r5
 800c794:	f7f3 fd3c 	bl	8000210 <memchr>
 800c798:	b138      	cbz	r0, 800c7aa <_svfiprintf_r+0x142>
 800c79a:	2340      	movs	r3, #64	; 0x40
 800c79c:	1b40      	subs	r0, r0, r5
 800c79e:	fa03 f000 	lsl.w	r0, r3, r0
 800c7a2:	9b04      	ldr	r3, [sp, #16]
 800c7a4:	4303      	orrs	r3, r0
 800c7a6:	3701      	adds	r7, #1
 800c7a8:	9304      	str	r3, [sp, #16]
 800c7aa:	7839      	ldrb	r1, [r7, #0]
 800c7ac:	4827      	ldr	r0, [pc, #156]	; (800c84c <_svfiprintf_r+0x1e4>)
 800c7ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7b2:	2206      	movs	r2, #6
 800c7b4:	1c7e      	adds	r6, r7, #1
 800c7b6:	f7f3 fd2b 	bl	8000210 <memchr>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d038      	beq.n	800c830 <_svfiprintf_r+0x1c8>
 800c7be:	4b24      	ldr	r3, [pc, #144]	; (800c850 <_svfiprintf_r+0x1e8>)
 800c7c0:	bb13      	cbnz	r3, 800c808 <_svfiprintf_r+0x1a0>
 800c7c2:	9b03      	ldr	r3, [sp, #12]
 800c7c4:	3307      	adds	r3, #7
 800c7c6:	f023 0307 	bic.w	r3, r3, #7
 800c7ca:	3308      	adds	r3, #8
 800c7cc:	9303      	str	r3, [sp, #12]
 800c7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d0:	444b      	add	r3, r9
 800c7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d4:	e76d      	b.n	800c6b2 <_svfiprintf_r+0x4a>
 800c7d6:	fb05 3202 	mla	r2, r5, r2, r3
 800c7da:	2001      	movs	r0, #1
 800c7dc:	460f      	mov	r7, r1
 800c7de:	e7a6      	b.n	800c72e <_svfiprintf_r+0xc6>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	3701      	adds	r7, #1
 800c7e4:	9305      	str	r3, [sp, #20]
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	250a      	movs	r5, #10
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7f0:	3a30      	subs	r2, #48	; 0x30
 800c7f2:	2a09      	cmp	r2, #9
 800c7f4:	d903      	bls.n	800c7fe <_svfiprintf_r+0x196>
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d0c8      	beq.n	800c78c <_svfiprintf_r+0x124>
 800c7fa:	9105      	str	r1, [sp, #20]
 800c7fc:	e7c6      	b.n	800c78c <_svfiprintf_r+0x124>
 800c7fe:	fb05 2101 	mla	r1, r5, r1, r2
 800c802:	2301      	movs	r3, #1
 800c804:	4607      	mov	r7, r0
 800c806:	e7f0      	b.n	800c7ea <_svfiprintf_r+0x182>
 800c808:	ab03      	add	r3, sp, #12
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	4622      	mov	r2, r4
 800c80e:	4b11      	ldr	r3, [pc, #68]	; (800c854 <_svfiprintf_r+0x1ec>)
 800c810:	a904      	add	r1, sp, #16
 800c812:	4640      	mov	r0, r8
 800c814:	f7fe f93a 	bl	800aa8c <_printf_float>
 800c818:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c81c:	4681      	mov	r9, r0
 800c81e:	d1d6      	bne.n	800c7ce <_svfiprintf_r+0x166>
 800c820:	89a3      	ldrh	r3, [r4, #12]
 800c822:	065b      	lsls	r3, r3, #25
 800c824:	f53f af35 	bmi.w	800c692 <_svfiprintf_r+0x2a>
 800c828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c82a:	b01d      	add	sp, #116	; 0x74
 800c82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c830:	ab03      	add	r3, sp, #12
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	4622      	mov	r2, r4
 800c836:	4b07      	ldr	r3, [pc, #28]	; (800c854 <_svfiprintf_r+0x1ec>)
 800c838:	a904      	add	r1, sp, #16
 800c83a:	4640      	mov	r0, r8
 800c83c:	f7fe fbdc 	bl	800aff8 <_printf_i>
 800c840:	e7ea      	b.n	800c818 <_svfiprintf_r+0x1b0>
 800c842:	bf00      	nop
 800c844:	0800cdc4 	.word	0x0800cdc4
 800c848:	0800cdca 	.word	0x0800cdca
 800c84c:	0800cdce 	.word	0x0800cdce
 800c850:	0800aa8d 	.word	0x0800aa8d
 800c854:	0800c5b5 	.word	0x0800c5b5

0800c858 <__ascii_mbtowc>:
 800c858:	b082      	sub	sp, #8
 800c85a:	b901      	cbnz	r1, 800c85e <__ascii_mbtowc+0x6>
 800c85c:	a901      	add	r1, sp, #4
 800c85e:	b142      	cbz	r2, 800c872 <__ascii_mbtowc+0x1a>
 800c860:	b14b      	cbz	r3, 800c876 <__ascii_mbtowc+0x1e>
 800c862:	7813      	ldrb	r3, [r2, #0]
 800c864:	600b      	str	r3, [r1, #0]
 800c866:	7812      	ldrb	r2, [r2, #0]
 800c868:	1c10      	adds	r0, r2, #0
 800c86a:	bf18      	it	ne
 800c86c:	2001      	movne	r0, #1
 800c86e:	b002      	add	sp, #8
 800c870:	4770      	bx	lr
 800c872:	4610      	mov	r0, r2
 800c874:	e7fb      	b.n	800c86e <__ascii_mbtowc+0x16>
 800c876:	f06f 0001 	mvn.w	r0, #1
 800c87a:	e7f8      	b.n	800c86e <__ascii_mbtowc+0x16>

0800c87c <_realloc_r>:
 800c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87e:	4607      	mov	r7, r0
 800c880:	4614      	mov	r4, r2
 800c882:	460e      	mov	r6, r1
 800c884:	b921      	cbnz	r1, 800c890 <_realloc_r+0x14>
 800c886:	4611      	mov	r1, r2
 800c888:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c88c:	f7fe b810 	b.w	800a8b0 <_malloc_r>
 800c890:	b922      	cbnz	r2, 800c89c <_realloc_r+0x20>
 800c892:	f7fd ffbf 	bl	800a814 <_free_r>
 800c896:	4625      	mov	r5, r4
 800c898:	4628      	mov	r0, r5
 800c89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c89c:	f000 f821 	bl	800c8e2 <_malloc_usable_size_r>
 800c8a0:	42a0      	cmp	r0, r4
 800c8a2:	d20f      	bcs.n	800c8c4 <_realloc_r+0x48>
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	f7fe f802 	bl	800a8b0 <_malloc_r>
 800c8ac:	4605      	mov	r5, r0
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d0f2      	beq.n	800c898 <_realloc_r+0x1c>
 800c8b2:	4631      	mov	r1, r6
 800c8b4:	4622      	mov	r2, r4
 800c8b6:	f7fd ff81 	bl	800a7bc <memcpy>
 800c8ba:	4631      	mov	r1, r6
 800c8bc:	4638      	mov	r0, r7
 800c8be:	f7fd ffa9 	bl	800a814 <_free_r>
 800c8c2:	e7e9      	b.n	800c898 <_realloc_r+0x1c>
 800c8c4:	4635      	mov	r5, r6
 800c8c6:	e7e7      	b.n	800c898 <_realloc_r+0x1c>

0800c8c8 <__ascii_wctomb>:
 800c8c8:	b149      	cbz	r1, 800c8de <__ascii_wctomb+0x16>
 800c8ca:	2aff      	cmp	r2, #255	; 0xff
 800c8cc:	bf85      	ittet	hi
 800c8ce:	238a      	movhi	r3, #138	; 0x8a
 800c8d0:	6003      	strhi	r3, [r0, #0]
 800c8d2:	700a      	strbls	r2, [r1, #0]
 800c8d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c8d8:	bf98      	it	ls
 800c8da:	2001      	movls	r0, #1
 800c8dc:	4770      	bx	lr
 800c8de:	4608      	mov	r0, r1
 800c8e0:	4770      	bx	lr

0800c8e2 <_malloc_usable_size_r>:
 800c8e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8e6:	1f18      	subs	r0, r3, #4
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	bfbc      	itt	lt
 800c8ec:	580b      	ldrlt	r3, [r1, r0]
 800c8ee:	18c0      	addlt	r0, r0, r3
 800c8f0:	4770      	bx	lr
	...

0800c8f4 <_init>:
 800c8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f6:	bf00      	nop
 800c8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8fa:	bc08      	pop	{r3}
 800c8fc:	469e      	mov	lr, r3
 800c8fe:	4770      	bx	lr

0800c900 <_fini>:
 800c900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c902:	bf00      	nop
 800c904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c906:	bc08      	pop	{r3}
 800c908:	469e      	mov	lr, r3
 800c90a:	4770      	bx	lr
