
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  080096c0  080096c0  000196c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c08  08009c08  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009c08  08009c08  00019c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c10  08009c10  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009c10  08009c10  00019c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009c18  08009c18  00019c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200001e0  08009e00  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08009e00  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021eaa  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000042e6  00000000  00000000  000420ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001468  00000000  00000000  000463a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  00047808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026d32  00000000  00000000  00048ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000109a3  00000000  00000000  0006f7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f87a9  00000000  00000000  0008019d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00178946  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b4  00000000  00000000  001789c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e0 	.word	0x200001e0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080096a4 	.word	0x080096a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e4 	.word	0x200001e4
 8000204:	080096a4 	.word	0x080096a4

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f92f 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2004      	movs	r0, #4
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f004 fc56 	bl	80057c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f939 	bl	80011ba <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	f000 f90f 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	200002c0 	.word	0x200002c0

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200002c0 	.word	0x200002c0

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff ffee 	bl	8000fac <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_Delay+0x40>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffde 	bl	8000fac <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000004 	.word	0x20000004

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	60d3      	str	r3, [r2, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff47 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff5c 	bl	8001050 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffb0 	bl	8001128 <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e165      	b.n	80014bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 8154 	bne.w	80014b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x4a>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b12      	cmp	r3, #18
 800121c:	d123      	bne.n	8001266 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	691a      	ldr	r2, [r3, #16]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	08da      	lsrs	r2, r3, #3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3208      	adds	r2, #8
 8001260:	69b9      	ldr	r1, [r7, #24]
 8001262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2203      	movs	r2, #3
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0203 	and.w	r2, r3, #3
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d00b      	beq.n	80012ba <HAL_GPIO_Init+0xe6>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ae:	2b11      	cmp	r3, #17
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d130      	bne.n	800131c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f0:	2201      	movs	r2, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	f003 0201 	and.w	r2, r3, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80ae 	beq.w	80014b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b5c      	ldr	r3, [pc, #368]	; (80014d0 <HAL_GPIO_Init+0x2fc>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a5b      	ldr	r2, [pc, #364]	; (80014d0 <HAL_GPIO_Init+0x2fc>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <HAL_GPIO_Init+0x2fc>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001376:	4a57      	ldr	r2, [pc, #348]	; (80014d4 <HAL_GPIO_Init+0x300>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <HAL_GPIO_Init+0x304>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d025      	beq.n	80013ee <HAL_GPIO_Init+0x21a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4d      	ldr	r2, [pc, #308]	; (80014dc <HAL_GPIO_Init+0x308>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01f      	beq.n	80013ea <HAL_GPIO_Init+0x216>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4c      	ldr	r2, [pc, #304]	; (80014e0 <HAL_GPIO_Init+0x30c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x212>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4b      	ldr	r2, [pc, #300]	; (80014e4 <HAL_GPIO_Init+0x310>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4a      	ldr	r2, [pc, #296]	; (80014e8 <HAL_GPIO_Init+0x314>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x20a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a49      	ldr	r2, [pc, #292]	; (80014ec <HAL_GPIO_Init+0x318>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x206>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a48      	ldr	r2, [pc, #288]	; (80014f0 <HAL_GPIO_Init+0x31c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x202>
 80013d2:	2306      	movs	r3, #6
 80013d4:	e00c      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e00a      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013de:	2304      	movs	r3, #4
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013ee:	2300      	movs	r3, #0
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001400:	4934      	ldr	r1, [pc, #208]	; (80014d4 <HAL_GPIO_Init+0x300>)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140e:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <HAL_GPIO_Init+0x320>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001432:	4a30      	ldr	r2, [pc, #192]	; (80014f4 <HAL_GPIO_Init+0x320>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001438:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <HAL_GPIO_Init+0x320>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145c:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <HAL_GPIO_Init+0x320>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <HAL_GPIO_Init+0x320>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001486:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <HAL_GPIO_Init+0x320>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_GPIO_Init+0x320>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b0:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <HAL_GPIO_Init+0x320>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	f67f ae96 	bls.w	80011f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	3724      	adds	r7, #36	; 0x24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40021400 	.word	0x40021400
 80014f0:	40021800 	.word	0x40021800
 80014f4:	40013c00 	.word	0x40013c00

080014f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_PWREx_EnableOverDrive+0x90>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <HAL_PWREx_EnableOverDrive+0x90>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_PWREx_EnableOverDrive+0x90>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_PWREx_EnableOverDrive+0x94>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001524:	f7ff fd42 	bl	8000fac <HAL_GetTick>
 8001528:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800152a:	e009      	b.n	8001540 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800152c:	f7ff fd3e 	bl	8000fac <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800153a:	d901      	bls.n	8001540 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e01f      	b.n	8001580 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_PWREx_EnableOverDrive+0x98>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154c:	d1ee      	bne.n	800152c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001554:	f7ff fd2a 	bl	8000fac <HAL_GetTick>
 8001558:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800155a:	e009      	b.n	8001570 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800155c:	f7ff fd26 	bl	8000fac <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800156a:	d901      	bls.n	8001570 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e007      	b.n	8001580 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <HAL_PWREx_EnableOverDrive+0x98>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800157c:	d1ee      	bne.n	800155c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	420e0040 	.word	0x420e0040
 8001590:	40007000 	.word	0x40007000
 8001594:	420e0044 	.word	0x420e0044

08001598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0ca      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b67      	ldr	r3, [pc, #412]	; (800174c <HAL_RCC_ClockConfig+0x1b4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d90c      	bls.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b64      	ldr	r3, [pc, #400]	; (800174c <HAL_RCC_ClockConfig+0x1b4>)
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b62      	ldr	r3, [pc, #392]	; (800174c <HAL_RCC_ClockConfig+0x1b4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0b6      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ec:	4b58      	ldr	r3, [pc, #352]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a57      	ldr	r2, [pc, #348]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001604:	4b52      	ldr	r3, [pc, #328]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a51      	ldr	r2, [pc, #324]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 800160a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800160e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001610:	4b4f      	ldr	r3, [pc, #316]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	494c      	ldr	r1, [pc, #304]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d044      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b46      	ldr	r3, [pc, #280]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d119      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e07d      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d003      	beq.n	8001656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001652:	2b03      	cmp	r3, #3
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e06d      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e065      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4b36      	ldr	r3, [pc, #216]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f023 0203 	bic.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4933      	ldr	r1, [pc, #204]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001688:	f7ff fc90 	bl	8000fac <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff fc8c 	bl	8000fac <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e04d      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 020c 	and.w	r2, r3, #12
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1eb      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_RCC_ClockConfig+0x1b4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d20c      	bcs.n	80016e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_RCC_ClockConfig+0x1b4>)
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <HAL_RCC_ClockConfig+0x1b4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e030      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4915      	ldr	r1, [pc, #84]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	490d      	ldr	r1, [pc, #52]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800171e:	f000 f851 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 8001722:	4601      	mov	r1, r0
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	fa21 f303 	lsr.w	r3, r1, r3
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800173a:	2004      	movs	r0, #4
 800173c:	f7ff fbf2 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00
 8001750:	40023800 	.word	0x40023800
 8001754:	08009758 	.word	0x08009758
 8001758:	20000008 	.word	0x20000008

0800175c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_RCC_GetHCLKFreq+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008

08001774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001778:	f7ff fff0 	bl	800175c <HAL_RCC_GetHCLKFreq>
 800177c:	4601      	mov	r1, r0
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	0a9b      	lsrs	r3, r3, #10
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	4a03      	ldr	r2, [pc, #12]	; (8001798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	08009768 	.word	0x08009768

0800179c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017a0:	f7ff ffdc 	bl	800175c <HAL_RCC_GetHCLKFreq>
 80017a4:	4601      	mov	r1, r0
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	0b5b      	lsrs	r3, r3, #13
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	4a03      	ldr	r2, [pc, #12]	; (80017c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	08009768 	.word	0x08009768

080017c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017de:	4bc6      	ldr	r3, [pc, #792]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	f200 817e 	bhi.w	8001ae8 <HAL_RCC_GetSysClockFreq+0x324>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <HAL_RCC_GetSysClockFreq+0x30>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001829 	.word	0x08001829
 80017f8:	08001ae9 	.word	0x08001ae9
 80017fc:	08001ae9 	.word	0x08001ae9
 8001800:	08001ae9 	.word	0x08001ae9
 8001804:	0800182f 	.word	0x0800182f
 8001808:	08001ae9 	.word	0x08001ae9
 800180c:	08001ae9 	.word	0x08001ae9
 8001810:	08001ae9 	.word	0x08001ae9
 8001814:	08001835 	.word	0x08001835
 8001818:	08001ae9 	.word	0x08001ae9
 800181c:	08001ae9 	.word	0x08001ae9
 8001820:	08001ae9 	.word	0x08001ae9
 8001824:	08001991 	.word	0x08001991
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4bb4      	ldr	r3, [pc, #720]	; (8001afc <HAL_RCC_GetSysClockFreq+0x338>)
 800182a:	613b      	str	r3, [r7, #16]
       break;
 800182c:	e15f      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800182e:	4bb4      	ldr	r3, [pc, #720]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001830:	613b      	str	r3, [r7, #16]
      break;
 8001832:	e15c      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001834:	4bb0      	ldr	r3, [pc, #704]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800183c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800183e:	4bae      	ldr	r3, [pc, #696]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d04a      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184a:	4bab      	ldr	r3, [pc, #684]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	f04f 0400 	mov.w	r4, #0
 8001854:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	ea03 0501 	and.w	r5, r3, r1
 8001860:	ea04 0602 	and.w	r6, r4, r2
 8001864:	4629      	mov	r1, r5
 8001866:	4632      	mov	r2, r6
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	f04f 0400 	mov.w	r4, #0
 8001870:	0154      	lsls	r4, r2, #5
 8001872:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001876:	014b      	lsls	r3, r1, #5
 8001878:	4619      	mov	r1, r3
 800187a:	4622      	mov	r2, r4
 800187c:	1b49      	subs	r1, r1, r5
 800187e:	eb62 0206 	sbc.w	r2, r2, r6
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	f04f 0400 	mov.w	r4, #0
 800188a:	0194      	lsls	r4, r2, #6
 800188c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001890:	018b      	lsls	r3, r1, #6
 8001892:	1a5b      	subs	r3, r3, r1
 8001894:	eb64 0402 	sbc.w	r4, r4, r2
 8001898:	f04f 0100 	mov.w	r1, #0
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	00e2      	lsls	r2, r4, #3
 80018a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018a6:	00d9      	lsls	r1, r3, #3
 80018a8:	460b      	mov	r3, r1
 80018aa:	4614      	mov	r4, r2
 80018ac:	195b      	adds	r3, r3, r5
 80018ae:	eb44 0406 	adc.w	r4, r4, r6
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	0262      	lsls	r2, r4, #9
 80018bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018c0:	0259      	lsls	r1, r3, #9
 80018c2:	460b      	mov	r3, r1
 80018c4:	4614      	mov	r4, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	4621      	mov	r1, r4
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f04f 0400 	mov.w	r4, #0
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	f7ff f984 	bl	8000be0 <__aeabi_uldivmod>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e049      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e0:	4b85      	ldr	r3, [pc, #532]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	f04f 0400 	mov.w	r4, #0
 80018ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	ea03 0501 	and.w	r5, r3, r1
 80018f6:	ea04 0602 	and.w	r6, r4, r2
 80018fa:	4629      	mov	r1, r5
 80018fc:	4632      	mov	r2, r6
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	f04f 0400 	mov.w	r4, #0
 8001906:	0154      	lsls	r4, r2, #5
 8001908:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800190c:	014b      	lsls	r3, r1, #5
 800190e:	4619      	mov	r1, r3
 8001910:	4622      	mov	r2, r4
 8001912:	1b49      	subs	r1, r1, r5
 8001914:	eb62 0206 	sbc.w	r2, r2, r6
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	f04f 0400 	mov.w	r4, #0
 8001920:	0194      	lsls	r4, r2, #6
 8001922:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001926:	018b      	lsls	r3, r1, #6
 8001928:	1a5b      	subs	r3, r3, r1
 800192a:	eb64 0402 	sbc.w	r4, r4, r2
 800192e:	f04f 0100 	mov.w	r1, #0
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	00e2      	lsls	r2, r4, #3
 8001938:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800193c:	00d9      	lsls	r1, r3, #3
 800193e:	460b      	mov	r3, r1
 8001940:	4614      	mov	r4, r2
 8001942:	195b      	adds	r3, r3, r5
 8001944:	eb44 0406 	adc.w	r4, r4, r6
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	02a2      	lsls	r2, r4, #10
 8001952:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001956:	0299      	lsls	r1, r3, #10
 8001958:	460b      	mov	r3, r1
 800195a:	4614      	mov	r4, r2
 800195c:	4618      	mov	r0, r3
 800195e:	4621      	mov	r1, r4
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f04f 0400 	mov.w	r4, #0
 8001966:	461a      	mov	r2, r3
 8001968:	4623      	mov	r3, r4
 800196a:	f7ff f939 	bl	8000be0 <__aeabi_uldivmod>
 800196e:	4603      	mov	r3, r0
 8001970:	460c      	mov	r4, r1
 8001972:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001974:	4b60      	ldr	r3, [pc, #384]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	3301      	adds	r3, #1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	613b      	str	r3, [r7, #16]
      break;
 800198e:	e0ae      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001998:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800199a:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d04a      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a6:	4b54      	ldr	r3, [pc, #336]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	099b      	lsrs	r3, r3, #6
 80019ac:	f04f 0400 	mov.w	r4, #0
 80019b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	ea03 0501 	and.w	r5, r3, r1
 80019bc:	ea04 0602 	and.w	r6, r4, r2
 80019c0:	4629      	mov	r1, r5
 80019c2:	4632      	mov	r2, r6
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	f04f 0400 	mov.w	r4, #0
 80019cc:	0154      	lsls	r4, r2, #5
 80019ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019d2:	014b      	lsls	r3, r1, #5
 80019d4:	4619      	mov	r1, r3
 80019d6:	4622      	mov	r2, r4
 80019d8:	1b49      	subs	r1, r1, r5
 80019da:	eb62 0206 	sbc.w	r2, r2, r6
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	f04f 0400 	mov.w	r4, #0
 80019e6:	0194      	lsls	r4, r2, #6
 80019e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019ec:	018b      	lsls	r3, r1, #6
 80019ee:	1a5b      	subs	r3, r3, r1
 80019f0:	eb64 0402 	sbc.w	r4, r4, r2
 80019f4:	f04f 0100 	mov.w	r1, #0
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	00e2      	lsls	r2, r4, #3
 80019fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a02:	00d9      	lsls	r1, r3, #3
 8001a04:	460b      	mov	r3, r1
 8001a06:	4614      	mov	r4, r2
 8001a08:	195b      	adds	r3, r3, r5
 8001a0a:	eb44 0406 	adc.w	r4, r4, r6
 8001a0e:	f04f 0100 	mov.w	r1, #0
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	0262      	lsls	r2, r4, #9
 8001a18:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a1c:	0259      	lsls	r1, r3, #9
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4614      	mov	r4, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	4621      	mov	r1, r4
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f04f 0400 	mov.w	r4, #0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4623      	mov	r3, r4
 8001a30:	f7ff f8d6 	bl	8000be0 <__aeabi_uldivmod>
 8001a34:	4603      	mov	r3, r0
 8001a36:	460c      	mov	r4, r1
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e049      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	f04f 0400 	mov.w	r4, #0
 8001a46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	ea03 0501 	and.w	r5, r3, r1
 8001a52:	ea04 0602 	and.w	r6, r4, r2
 8001a56:	4629      	mov	r1, r5
 8001a58:	4632      	mov	r2, r6
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	f04f 0400 	mov.w	r4, #0
 8001a62:	0154      	lsls	r4, r2, #5
 8001a64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a68:	014b      	lsls	r3, r1, #5
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	1b49      	subs	r1, r1, r5
 8001a70:	eb62 0206 	sbc.w	r2, r2, r6
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	f04f 0400 	mov.w	r4, #0
 8001a7c:	0194      	lsls	r4, r2, #6
 8001a7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a82:	018b      	lsls	r3, r1, #6
 8001a84:	1a5b      	subs	r3, r3, r1
 8001a86:	eb64 0402 	sbc.w	r4, r4, r2
 8001a8a:	f04f 0100 	mov.w	r1, #0
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	00e2      	lsls	r2, r4, #3
 8001a94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a98:	00d9      	lsls	r1, r3, #3
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4614      	mov	r4, r2
 8001a9e:	195b      	adds	r3, r3, r5
 8001aa0:	eb44 0406 	adc.w	r4, r4, r6
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	02a2      	lsls	r2, r4, #10
 8001aae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ab2:	0299      	lsls	r1, r3, #10
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	4621      	mov	r1, r4
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f04f 0400 	mov.w	r4, #0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	f7ff f88b 	bl	8000be0 <__aeabi_uldivmod>
 8001aca:	4603      	mov	r3, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	0f1b      	lsrs	r3, r3, #28
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	613b      	str	r3, [r7, #16]
      break;
 8001ae6:	e002      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_RCC_GetSysClockFreq+0x338>)
 8001aea:	613b      	str	r3, [r7, #16]
      break;
 8001aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aee:	693b      	ldr	r3, [r7, #16]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 8083 	beq.w	8001c24 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b1e:	4b95      	ldr	r3, [pc, #596]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d019      	beq.n	8001b5e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b2a:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b36:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b42:	d00c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b44:	4b8b      	ldr	r3, [pc, #556]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	d112      	bne.n	8001b76 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b50:	4b88      	ldr	r3, [pc, #544]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b5c:	d10b      	bne.n	8001b76 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	4b85      	ldr	r3, [pc, #532]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d05b      	beq.n	8001c22 <HAL_RCC_OscConfig+0x11e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d157      	bne.n	8001c22 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e216      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x8a>
 8001b80:	4b7c      	ldr	r3, [pc, #496]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a7b      	ldr	r2, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e01d      	b.n	8001bca <HAL_RCC_OscConfig+0xc6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b96:	d10c      	bne.n	8001bb2 <HAL_RCC_OscConfig+0xae>
 8001b98:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a75      	ldr	r2, [pc, #468]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a72      	ldr	r2, [pc, #456]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e00b      	b.n	8001bca <HAL_RCC_OscConfig+0xc6>
 8001bb2:	4b70      	ldr	r3, [pc, #448]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6f      	ldr	r2, [pc, #444]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a6c      	ldr	r2, [pc, #432]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d013      	beq.n	8001bfa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f9eb 	bl	8000fac <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bda:	f7ff f9e7 	bl	8000fac <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b64      	cmp	r3, #100	; 0x64
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1db      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bec:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0xd6>
 8001bf8:	e014      	b.n	8001c24 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f9d7 	bl	8000fac <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c02:	f7ff f9d3 	bl	8000fac <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b64      	cmp	r3, #100	; 0x64
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e1c7      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c14:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0xfe>
 8001c20:	e000      	b.n	8001c24 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d06f      	beq.n	8001d10 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c30:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d017      	beq.n	8001c6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c3c:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d105      	bne.n	8001c54 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c48:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00b      	beq.n	8001c6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c54:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d11c      	bne.n	8001c9a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c60:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d116      	bne.n	8001c9a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6c:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x180>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e18f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4938      	ldr	r1, [pc, #224]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c98:	e03a      	b.n	8001d10 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f980 	bl	8000fac <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f97c 	bl	8000fac <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e170      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4925      	ldr	r1, [pc, #148]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
 8001ce2:	e015      	b.n	8001d10 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7ff f95f 	bl	8000fac <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff f95b 	bl	8000fac <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e14f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f0      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d037      	beq.n	8001d8c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d016      	beq.n	8001d52 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d24:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <HAL_RCC_OscConfig+0x278>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2a:	f7ff f93f 	bl	8000fac <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d32:	f7ff f93b 	bl	8000fac <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e12f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x22e>
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_OscConfig+0x278>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff f928 	bl	8000fac <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5e:	e00f      	b.n	8001d80 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff f924 	bl	8000fac <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d908      	bls.n	8001d80 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e118      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	42470000 	.word	0x42470000
 8001d7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e9      	bne.n	8001d60 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 8097 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9e:	4b83      	ldr	r3, [pc, #524]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10f      	bne.n	8001dca <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b7f      	ldr	r3, [pc, #508]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a7e      	ldr	r2, [pc, #504]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b7c      	ldr	r3, [pc, #496]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	4b79      	ldr	r3, [pc, #484]	; (8001fb0 <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d118      	bne.n	8001e08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd6:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a75      	ldr	r2, [pc, #468]	; (8001fb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de2:	f7ff f8e3 	bl	8000fac <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dea:	f7ff f8df 	bl	8000fac <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0d3      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	4b6c      	ldr	r3, [pc, #432]	; (8001fb0 <HAL_RCC_OscConfig+0x4ac>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x31a>
 8001e10:	4b66      	ldr	r3, [pc, #408]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a65      	ldr	r2, [pc, #404]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1c:	e01c      	b.n	8001e58 <HAL_RCC_OscConfig+0x354>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x33c>
 8001e26:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	4a60      	ldr	r2, [pc, #384]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	6713      	str	r3, [r2, #112]	; 0x70
 8001e32:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0x354>
 8001e40:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a59      	ldr	r2, [pc, #356]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	4b57      	ldr	r3, [pc, #348]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	4a56      	ldr	r2, [pc, #344]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e52:	f023 0304 	bic.w	r3, r3, #4
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d015      	beq.n	8001e8c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff f8a4 	bl	8000fac <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7ff f8a0 	bl	8000fac <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e092      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ee      	beq.n	8001e68 <HAL_RCC_OscConfig+0x364>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f88e 	bl	8000fac <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7ff f88a 	bl	8000fac <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e07c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1ee      	bne.n	8001e94 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d105      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d068      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d060      	beq.n	8001f9e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d145      	bne.n	8001f70 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee4:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <HAL_RCC_OscConfig+0x4b0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff f85f 	bl	8000fac <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff f85b 	bl	8000fac <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e04f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	019b      	lsls	r3, r3, #6
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	061b      	lsls	r3, r3, #24
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	071b      	lsls	r3, r3, #28
 8001f3c:	491b      	ldr	r1, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_RCC_OscConfig+0x4b0>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff f830 	bl	8000fac <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff f82c 	bl	8000fac <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e020      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x44c>
 8001f6e:	e018      	b.n	8001fa2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_RCC_OscConfig+0x4b0>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff f819 	bl	8000fac <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff f815 	bl	8000fac <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e009      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x47a>
 8001f9c:	e001      	b.n	8001fa2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	42470060 	.word	0x42470060

08001fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e03f      	b.n	800204a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f003 ffde 	bl	8005fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2224      	movs	r2, #36	; 0x24
 8001fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f829 	bl	8002054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002054:	b5b0      	push	{r4, r5, r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002094:	f023 030c 	bic.w	r3, r3, #12
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	68f9      	ldr	r1, [r7, #12]
 800209e:	430b      	orrs	r3, r1
 80020a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c0:	f040 80e4 	bne.w	800228c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4aab      	ldr	r2, [pc, #684]	; (8002378 <UART_SetConfig+0x324>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d004      	beq.n	80020d8 <UART_SetConfig+0x84>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4aaa      	ldr	r2, [pc, #680]	; (800237c <UART_SetConfig+0x328>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d16c      	bne.n	80021b2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020d8:	f7ff fb60 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 80020dc:	4602      	mov	r2, r0
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	009a      	lsls	r2, r3, #2
 80020e6:	441a      	add	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	4aa3      	ldr	r2, [pc, #652]	; (8002380 <UART_SetConfig+0x32c>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	011c      	lsls	r4, r3, #4
 80020fc:	f7ff fb4e 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 8002100:	4602      	mov	r2, r0
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	009a      	lsls	r2, r3, #2
 800210a:	441a      	add	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fbb2 f5f3 	udiv	r5, r2, r3
 8002116:	f7ff fb41 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 800211a:	4602      	mov	r2, r0
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	009a      	lsls	r2, r3, #2
 8002124:	441a      	add	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	4a93      	ldr	r2, [pc, #588]	; (8002380 <UART_SetConfig+0x32c>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2264      	movs	r2, #100	; 0x64
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	1aeb      	subs	r3, r5, r3
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	3332      	adds	r3, #50	; 0x32
 8002144:	4a8e      	ldr	r2, [pc, #568]	; (8002380 <UART_SetConfig+0x32c>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002152:	441c      	add	r4, r3
 8002154:	f7ff fb22 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 8002158:	4602      	mov	r2, r0
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	009a      	lsls	r2, r3, #2
 8002162:	441a      	add	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fbb2 f5f3 	udiv	r5, r2, r3
 800216e:	f7ff fb15 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 8002172:	4602      	mov	r2, r0
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	009a      	lsls	r2, r3, #2
 800217c:	441a      	add	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	4a7d      	ldr	r2, [pc, #500]	; (8002380 <UART_SetConfig+0x32c>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2264      	movs	r2, #100	; 0x64
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	1aeb      	subs	r3, r5, r3
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	3332      	adds	r3, #50	; 0x32
 800219c:	4a78      	ldr	r2, [pc, #480]	; (8002380 <UART_SetConfig+0x32c>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	f003 0207 	and.w	r2, r3, #7
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4422      	add	r2, r4
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e154      	b.n	800245c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021b2:	f7ff fadf 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	009a      	lsls	r2, r3, #2
 80021c0:	441a      	add	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	4a6c      	ldr	r2, [pc, #432]	; (8002380 <UART_SetConfig+0x32c>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	011c      	lsls	r4, r3, #4
 80021d6:	f7ff facd 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 80021da:	4602      	mov	r2, r0
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	009a      	lsls	r2, r3, #2
 80021e4:	441a      	add	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fbb2 f5f3 	udiv	r5, r2, r3
 80021f0:	f7ff fac0 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	009a      	lsls	r2, r3, #2
 80021fe:	441a      	add	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	4a5d      	ldr	r2, [pc, #372]	; (8002380 <UART_SetConfig+0x32c>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	2264      	movs	r2, #100	; 0x64
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	1aeb      	subs	r3, r5, r3
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	3332      	adds	r3, #50	; 0x32
 800221e:	4a58      	ldr	r2, [pc, #352]	; (8002380 <UART_SetConfig+0x32c>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800222c:	441c      	add	r4, r3
 800222e:	f7ff faa1 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 8002232:	4602      	mov	r2, r0
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	009a      	lsls	r2, r3, #2
 800223c:	441a      	add	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fbb2 f5f3 	udiv	r5, r2, r3
 8002248:	f7ff fa94 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 800224c:	4602      	mov	r2, r0
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	009a      	lsls	r2, r3, #2
 8002256:	441a      	add	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4a47      	ldr	r2, [pc, #284]	; (8002380 <UART_SetConfig+0x32c>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	2264      	movs	r2, #100	; 0x64
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	1aeb      	subs	r3, r5, r3
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	3332      	adds	r3, #50	; 0x32
 8002276:	4a42      	ldr	r2, [pc, #264]	; (8002380 <UART_SetConfig+0x32c>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	f003 0207 	and.w	r2, r3, #7
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4422      	add	r2, r4
 8002288:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800228a:	e0e7      	b.n	800245c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a39      	ldr	r2, [pc, #228]	; (8002378 <UART_SetConfig+0x324>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d004      	beq.n	80022a0 <UART_SetConfig+0x24c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a38      	ldr	r2, [pc, #224]	; (800237c <UART_SetConfig+0x328>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d171      	bne.n	8002384 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022a0:	f7ff fa7c 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	009a      	lsls	r2, r3, #2
 80022ae:	441a      	add	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4a31      	ldr	r2, [pc, #196]	; (8002380 <UART_SetConfig+0x32c>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	011c      	lsls	r4, r3, #4
 80022c4:	f7ff fa6a 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	009a      	lsls	r2, r3, #2
 80022d2:	441a      	add	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	fbb2 f5f3 	udiv	r5, r2, r3
 80022de:	f7ff fa5d 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	009a      	lsls	r2, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	4a21      	ldr	r2, [pc, #132]	; (8002380 <UART_SetConfig+0x32c>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2264      	movs	r2, #100	; 0x64
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	1aeb      	subs	r3, r5, r3
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	3332      	adds	r3, #50	; 0x32
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <UART_SetConfig+0x32c>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002318:	441c      	add	r4, r3
 800231a:	f7ff fa3f 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 800231e:	4602      	mov	r2, r0
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	009a      	lsls	r2, r3, #2
 8002328:	441a      	add	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	fbb2 f5f3 	udiv	r5, r2, r3
 8002334:	f7ff fa32 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 8002338:	4602      	mov	r2, r0
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	009a      	lsls	r2, r3, #2
 8002342:	441a      	add	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <UART_SetConfig+0x32c>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	2264      	movs	r2, #100	; 0x64
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	1aeb      	subs	r3, r5, r3
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	3332      	adds	r3, #50	; 0x32
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <UART_SetConfig+0x32c>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	f003 020f 	and.w	r2, r3, #15
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4422      	add	r2, r4
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	e071      	b.n	800245c <UART_SetConfig+0x408>
 8002378:	40011000 	.word	0x40011000
 800237c:	40011400 	.word	0x40011400
 8002380:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002384:	f7ff f9f6 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 8002388:	4602      	mov	r2, r0
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	009a      	lsls	r2, r3, #2
 8002392:	441a      	add	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	4a31      	ldr	r2, [pc, #196]	; (8002464 <UART_SetConfig+0x410>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	095b      	lsrs	r3, r3, #5
 80023a6:	011c      	lsls	r4, r3, #4
 80023a8:	f7ff f9e4 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	009a      	lsls	r2, r3, #2
 80023b6:	441a      	add	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	fbb2 f5f3 	udiv	r5, r2, r3
 80023c2:	f7ff f9d7 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	4a21      	ldr	r2, [pc, #132]	; (8002464 <UART_SetConfig+0x410>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2264      	movs	r2, #100	; 0x64
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	1aeb      	subs	r3, r5, r3
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	3332      	adds	r3, #50	; 0x32
 80023f0:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <UART_SetConfig+0x410>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fc:	441c      	add	r4, r3
 80023fe:	f7ff f9b9 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 8002402:	4602      	mov	r2, r0
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009a      	lsls	r2, r3, #2
 800240c:	441a      	add	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fbb2 f5f3 	udiv	r5, r2, r3
 8002418:	f7ff f9ac 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 800241c:	4602      	mov	r2, r0
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	009a      	lsls	r2, r3, #2
 8002426:	441a      	add	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <UART_SetConfig+0x410>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	2264      	movs	r2, #100	; 0x64
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	1aeb      	subs	r3, r5, r3
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	3332      	adds	r3, #50	; 0x32
 8002446:	4a07      	ldr	r2, [pc, #28]	; (8002464 <UART_SetConfig+0x410>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	f003 020f 	and.w	r2, r3, #15
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4422      	add	r2, r4
 8002458:	609a      	str	r2, [r3, #8]
}
 800245a:	e7ff      	b.n	800245c <UART_SetConfig+0x408>
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bdb0      	pop	{r4, r5, r7, pc}
 8002464:	51eb851f 	.word	0x51eb851f

08002468 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_ADC_INJ_SetSequencerLength>:
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80024ea:	481c      	ldr	r0, [pc, #112]	; (800255c <LL_ADC_CommonInit+0x80>)
 80024ec:	f7ff ffe2 	bl	80024b4 <LL_ADC_IsEnabled>
 80024f0:	4604      	mov	r4, r0
 80024f2:	481b      	ldr	r0, [pc, #108]	; (8002560 <LL_ADC_CommonInit+0x84>)
 80024f4:	f7ff ffde 	bl	80024b4 <LL_ADC_IsEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	431c      	orrs	r4, r3
 80024fc:	4819      	ldr	r0, [pc, #100]	; (8002564 <LL_ADC_CommonInit+0x88>)
 80024fe:	f7ff ffd9 	bl	80024b4 <LL_ADC_IsEnabled>
 8002502:	4603      	mov	r3, r0
 8002504:	4323      	orrs	r3, r4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d120      	bne.n	800254c <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d012      	beq.n	8002538 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <LL_ADC_CommonInit+0x8c>)
 8002518:	4013      	ands	r3, r2
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	6811      	ldr	r1, [r2, #0]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	6852      	ldr	r2, [r2, #4]
 8002522:	4311      	orrs	r1, r2
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	6892      	ldr	r2, [r2, #8]
 8002528:	4311      	orrs	r1, r2
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	68d2      	ldr	r2, [r2, #12]
 800252e:	430a      	orrs	r2, r1
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	e00b      	b.n	8002550 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <LL_ADC_CommonInit+0x8c>)
 800253e:	4013      	ands	r3, r2
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	e001      	b.n	8002550 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	bd90      	pop	{r4, r7, pc}
 800255a:	bf00      	nop
 800255c:	40012000 	.word	0x40012000
 8002560:	40012100 	.word	0x40012100
 8002564:	40012200 	.word	0x40012200
 8002568:	fffc10e0 	.word	0xfffc10e0

0800256c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ff9a 	bl	80024b4 <LL_ADC_IsEnabled>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d117      	bne.n	80025b6 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800258e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	6811      	ldr	r1, [r2, #0]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	6892      	ldr	r2, [r2, #8]
 800259a:	430a      	orrs	r2, r1
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	e001      	b.n	80025ba <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ff6e 	bl	80024b4 <LL_ADC_IsEnabled>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d131      	bne.n	8002642 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00c      	beq.n	8002600 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	430b      	orrs	r3, r1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	e008      	b.n	8002612 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <LL_ADC_REG_Init+0x8c>)
 8002618:	4013      	ands	r3, r2
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	68d2      	ldr	r2, [r2, #12]
 8002626:	4311      	orrs	r1, r2
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	6912      	ldr	r2, [r2, #16]
 800262c:	430a      	orrs	r2, r1
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ff14 	bl	8002468 <LL_ADC_REG_SetSequencerLength>
 8002640:	e001      	b.n	8002646 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	c0fffcfd 	.word	0xc0fffcfd

08002654 <LL_ADC_INJ_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ff26 	bl	80024b4 <LL_ADC_IsEnabled>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d12b      	bne.n	80026c6 <LL_ADC_INJ_Init+0x72>
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <LL_ADC_INJ_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	430b      	orrs	r3, r1
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e008      	b.n	80026a2 <LL_ADC_INJ_Init+0x4e>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	605a      	str	r2, [r3, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fee5 	bl	800248e <LL_ADC_INJ_SetSequencerLength>
 80026c4:	e001      	b.n	80026ca <LL_ADC_INJ_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <LL_EXTI_EnableIT_0_31+0x20>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4904      	ldr	r1, [pc, #16]	; (80026f4 <LL_EXTI_EnableIT_0_31+0x20>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40013c00 	.word	0x40013c00

080026f8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <LL_EXTI_DisableIT_0_31+0x24>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	43db      	mvns	r3, r3
 8002708:	4904      	ldr	r1, [pc, #16]	; (800271c <LL_EXTI_DisableIT_0_31+0x24>)
 800270a:	4013      	ands	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40013c00 	.word	0x40013c00

08002720 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <LL_EXTI_EnableEvent_0_31+0x20>)
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4904      	ldr	r1, [pc, #16]	; (8002740 <LL_EXTI_EnableEvent_0_31+0x20>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]

}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40013c00 	.word	0x40013c00

08002744 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <LL_EXTI_DisableEvent_0_31+0x24>)
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	43db      	mvns	r3, r3
 8002754:	4904      	ldr	r1, [pc, #16]	; (8002768 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002756:	4013      	ands	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40013c00 	.word	0x40013c00

0800276c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	4904      	ldr	r1, [pc, #16]	; (800278c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4313      	orrs	r3, r2
 800277e:	608b      	str	r3, [r1, #8]

}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40013c00 	.word	0x40013c00

08002790 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	43db      	mvns	r3, r3
 80027a0:	4904      	ldr	r1, [pc, #16]	; (80027b4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]

}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40013c00 	.word	0x40013c00

080027b8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	4904      	ldr	r1, [pc, #16]	; (80027d8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40013c00 	.word	0x40013c00

080027dc <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	4904      	ldr	r1, [pc, #16]	; (8002800 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	60cb      	str	r3, [r1, #12]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40013c00 	.word	0x40013c00

08002804 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	791b      	ldrb	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d060      	beq.n	80028da <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d067      	beq.n	80028f0 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	795b      	ldrb	r3, [r3, #5]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d00e      	beq.n	8002846 <LL_EXTI_Init+0x42>
 8002828:	2b02      	cmp	r3, #2
 800282a:	d017      	beq.n	800285c <LL_EXTI_Init+0x58>
 800282c:	2b00      	cmp	r3, #0
 800282e:	d120      	bne.n	8002872 <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff85 	bl	8002744 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff48 	bl	80026d4 <LL_EXTI_EnableIT_0_31>
          break;
 8002844:	e018      	b.n	8002878 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff54 	bl	80026f8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff63 	bl	8002720 <LL_EXTI_EnableEvent_0_31>
          break;
 800285a:	e00d      	b.n	8002878 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff37 	bl	80026d4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff58 	bl	8002720 <LL_EXTI_EnableEvent_0_31>
          break;
 8002870:	e002      	b.n	8002878 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
          break;
 8002876:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	799b      	ldrb	r3, [r3, #6]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d037      	beq.n	80028f0 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	799b      	ldrb	r3, [r3, #6]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d00e      	beq.n	80028a6 <LL_EXTI_Init+0xa2>
 8002888:	2b03      	cmp	r3, #3
 800288a:	d017      	beq.n	80028bc <LL_EXTI_Init+0xb8>
 800288c:	2b01      	cmp	r3, #1
 800288e:	d120      	bne.n	80028d2 <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ffa1 	bl	80027dc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff64 	bl	800276c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80028a4:	e025      	b.n	80028f2 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff70 	bl	8002790 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff7f 	bl	80027b8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80028ba:	e01a      	b.n	80028f2 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff53 	bl	800276c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff74 	bl	80027b8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80028d0:	e00f      	b.n	80028f2 <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
            break;
 80028d6:	bf00      	nop
 80028d8:	e00b      	b.n	80028f2 <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff0a 	bl	80026f8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff2b 	bl	8002744 <LL_EXTI_DisableEvent_0_31>
 80028ee:	e000      	b.n	80028f2 <LL_EXTI_Init+0xee>
      }
 80028f0:	bf00      	nop
  }
  return status;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2103      	movs	r1, #3
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	401a      	ands	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	61bb      	str	r3, [r7, #24]
  return result;
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	431a      	orrs	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	601a      	str	r2, [r3, #0]
}
 800294e:	bf00      	nop
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	43db      	mvns	r3, r3
 800296e:	401a      	ands	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	431a      	orrs	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	605a      	str	r2, [r3, #4]
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800298a:	b480      	push	{r7}
 800298c:	b089      	sub	sp, #36	; 0x24
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	613b      	str	r3, [r7, #16]
  return result;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2103      	movs	r1, #3
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	401a      	ands	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	61bb      	str	r3, [r7, #24]
  return result;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	431a      	orrs	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80029dc:	bf00      	nop
 80029de:	3724      	adds	r7, #36	; 0x24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	613b      	str	r3, [r7, #16]
  return result;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2103      	movs	r1, #3
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	401a      	ands	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	61bb      	str	r3, [r7, #24]
  return result;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	431a      	orrs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	60da      	str	r2, [r3, #12]
}
 8002a3a:	bf00      	nop
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b089      	sub	sp, #36	; 0x24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1a      	ldr	r2, [r3, #32]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	613b      	str	r3, [r7, #16]
  return result;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	210f      	movs	r1, #15
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	401a      	ands	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	61bb      	str	r3, [r7, #24]
  return result;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002a98:	bf00      	nop
 8002a9a:	3724      	adds	r7, #36	; 0x24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	613b      	str	r3, [r7, #16]
  return result;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	210f      	movs	r1, #15
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002afa:	bf00      	nop
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b088      	sub	sp, #32
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	613b      	str	r3, [r7, #16]
  return result;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b30:	e049      	b.n	8002bc6 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2101      	movs	r1, #1
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d03b      	beq.n	8002bc0 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	69b9      	ldr	r1, [r7, #24]
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff fed3 	bl	80028fc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d003      	beq.n	8002b66 <LL_GPIO_Init+0x60>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d106      	bne.n	8002b74 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	69b9      	ldr	r1, [r7, #24]
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ff0b 	bl	800298a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	69b9      	ldr	r1, [r7, #24]
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff ff33 	bl	80029e8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d11a      	bne.n	8002bc0 <LL_GPIO_Init+0xba>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	60bb      	str	r3, [r7, #8]
  return result;
 8002b96:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b07      	cmp	r3, #7
 8002ba0:	d807      	bhi.n	8002bb2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	69b9      	ldr	r1, [r7, #24]
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ff4b 	bl	8002a46 <LL_GPIO_SetAFPin_0_7>
 8002bb0:	e006      	b.n	8002bc0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	69b9      	ldr	r1, [r7, #24]
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ff72 	bl	8002aa4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ae      	bne.n	8002b32 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d003      	beq.n	8002be4 <LL_GPIO_Init+0xde>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d107      	bne.n	8002bf4 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	461a      	mov	r2, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff feb3 	bl	800295a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	615a      	str	r2, [r3, #20]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3d      	ldr	r2, [pc, #244]	; (8002dec <LL_TIM_Init+0x108>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <LL_TIM_Init+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d02:	d00f      	beq.n	8002d24 <LL_TIM_Init+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3a      	ldr	r2, [pc, #232]	; (8002df0 <LL_TIM_Init+0x10c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00b      	beq.n	8002d24 <LL_TIM_Init+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a39      	ldr	r2, [pc, #228]	; (8002df4 <LL_TIM_Init+0x110>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d007      	beq.n	8002d24 <LL_TIM_Init+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a38      	ldr	r2, [pc, #224]	; (8002df8 <LL_TIM_Init+0x114>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <LL_TIM_Init+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a37      	ldr	r2, [pc, #220]	; (8002dfc <LL_TIM_Init+0x118>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d106      	bne.n	8002d32 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a2d      	ldr	r2, [pc, #180]	; (8002dec <LL_TIM_Init+0x108>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02b      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d027      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <LL_TIM_Init+0x10c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d023      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <LL_TIM_Init+0x110>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01f      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a28      	ldr	r2, [pc, #160]	; (8002df8 <LL_TIM_Init+0x114>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01b      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <LL_TIM_Init+0x118>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d017      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <LL_TIM_Init+0x11c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <LL_TIM_Init+0x120>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00f      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <LL_TIM_Init+0x124>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00b      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <LL_TIM_Init+0x128>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <LL_TIM_Init+0x12c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d003      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a21      	ldr	r2, [pc, #132]	; (8002e14 <LL_TIM_Init+0x130>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d106      	bne.n	8002da0 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	4619      	mov	r1, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ff34 	bl	8002c1a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	4619      	mov	r1, r3
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ff20 	bl	8002bfe <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <LL_TIM_Init+0x108>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d003      	beq.n	8002dce <LL_TIM_Init+0xea>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <LL_TIM_Init+0x118>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d105      	bne.n	8002dda <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	7c1b      	ldrb	r3, [r3, #16]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff2e 	bl	8002c36 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ff71 	bl	8002cc2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40010000 	.word	0x40010000
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40000800 	.word	0x40000800
 8002df8:	40000c00 	.word	0x40000c00
 8002dfc:	40010400 	.word	0x40010400
 8002e00:	40014000 	.word	0x40014000
 8002e04:	40014400 	.word	0x40014400
 8002e08:	40014800 	.word	0x40014800
 8002e0c:	40001800 	.word	0x40001800
 8002e10:	40001c00 	.word	0x40001c00
 8002e14:	40002000 	.word	0x40002000

08002e18 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d012      	beq.n	8002e54 <LL_TIM_OC_Init+0x3c>
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d802      	bhi.n	8002e38 <LL_TIM_OC_Init+0x20>
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d007      	beq.n	8002e46 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002e36:	e022      	b.n	8002e7e <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8002e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3c:	d011      	beq.n	8002e62 <LL_TIM_OC_Init+0x4a>
 8002e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e42:	d015      	beq.n	8002e70 <LL_TIM_OC_Init+0x58>
      break;
 8002e44:	e01b      	b.n	8002e7e <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f867 	bl	8002f1c <OC1Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	75fb      	strb	r3, [r7, #23]
      break;
 8002e52:	e014      	b.n	8002e7e <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f8cc 	bl	8002ff4 <OC2Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e60:	e00d      	b.n	8002e7e <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f935 	bl	80030d4 <OC3Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e6e:	e006      	b.n	8002e7e <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f99e 	bl	80031b4 <OC4Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7c:	bf00      	nop
  }

  return result;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	7b12      	ldrb	r2, [r2, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	89d2      	ldrh	r2, [r2, #14]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f023 0201 	bic.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0303 	bic.w	r3, r3, #3
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 0202 	bic.w	r2, r3, #2
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f023 0201 	bic.w	r2, r3, #1
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <OC1Config+0xd0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <OC1Config+0x6a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <OC1Config+0xd4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d11e      	bne.n	8002fc4 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f023 0208 	bic.w	r2, r3, #8
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f023 0204 	bic.w	r2, r3, #4
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fe3b 	bl	8002c52 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	40010400 	.word	0x40010400

08002ff4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f023 0210 	bic.w	r2, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0220 	bic.w	r2, r3, #32
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f023 0210 	bic.w	r2, r3, #16
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <OC2Config+0xd8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <OC2Config+0x70>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <OC2Config+0xdc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d11f      	bne.n	80030a4 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	019b      	lsls	r3, r3, #6
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	019b      	lsls	r3, r3, #6
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fdd9 	bl	8002c6e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40010400 	.word	0x40010400

080030d4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <OC3Config+0xd8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d003      	beq.n	8003142 <OC3Config+0x6e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <OC3Config+0xdc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d11f      	bne.n	8003182 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	029b      	lsls	r3, r3, #10
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	029b      	lsls	r3, r3, #10
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	015b      	lsls	r3, r3, #5
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff fd78 	bl	8002c8a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40010400 	.word	0x40010400

080031b4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	031b      	lsls	r3, r3, #12
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	031b      	lsls	r3, r3, #12
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a11      	ldr	r2, [pc, #68]	; (800325c <OC4Config+0xa8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <OC4Config+0x70>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a10      	ldr	r2, [pc, #64]	; (8003260 <OC4Config+0xac>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d107      	bne.n	8003234 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	019b      	lsls	r3, r3, #6
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fd2d 	bl	8002ca6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40010000 	.word	0x40010000
 8003260:	40010400 	.word	0x40010400

08003264 <_ZN9ArgSensorC1Ev>:
 */

#include "ArgSensor.hpp"
#include "math.h"

ArgSensor::ArgSensor() {
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	4a06      	ldr	r2, [pc, #24]	; (8003288 <_ZN9ArgSensorC1Ev+0x24>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mArg = 0;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	605a      	str	r2, [r3, #4]
}
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	08009730 	.word	0x08009730

0800328c <_ZN9ArgSensorD1Ev>:

ArgSensor::~ArgSensor() {
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <_ZN9ArgSensorD1Ev+0x1c>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	08009730 	.word	0x08009730

080032ac <_ZN9ArgSensorD0Ev>:
ArgSensor::~ArgSensor() {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
}
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ffe9 	bl	800328c <_ZN9ArgSensorD1Ev>
 80032ba:	2108      	movs	r1, #8
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f003 f93a 	bl	8006536 <_ZdlPvj>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	0000      	movs	r0, r0
	...

080032d0 <_ZN9ArgSensor9incrementEf>:

void ArgSensor::Init(void) {
	mArg = 0;
}

void ArgSensor::increment(float pArg){
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	ed87 0a00 	vstr	s0, [r7]
	mArg = mArg + pArg;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	ed93 7a01 	vldr	s14, [r3, #4]
 80032e2:	edd7 7a00 	vldr	s15, [r7]
 80032e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	edc3 7a01 	vstr	s15, [r3, #4]
	mArg = fmodl(mArg, (2*M_PI));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f8f3 	bl	80004e0 <__aeabi_f2d>
 80032fa:	4603      	mov	r3, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8003328 <_ZN9ArgSensor9incrementEf+0x58>
 8003302:	ec44 3b10 	vmov	d0, r3, r4
 8003306:	f003 f929 	bl	800655c <fmodl>
 800330a:	ec54 3b10 	vmov	r3, r4, d0
 800330e:	4618      	mov	r0, r3
 8003310:	4621      	mov	r1, r4
 8003312:	f7fd fc15 	bl	8000b40 <__aeabi_d2f>
 8003316:	4602      	mov	r2, r0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	605a      	str	r2, [r3, #4]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bd90      	pop	{r4, r7, pc}
 8003324:	f3af 8000 	nop.w
 8003328:	54442d18 	.word	0x54442d18
 800332c:	401921fb 	.word	0x401921fb

08003330 <_ZN9ArgSensor6getArgEv>:
void ArgSensor::decrement(float pArg){
	mArg = mArg - pArg;
	mArg = fmodl(mArg, (2*M_PI));
}

float ArgSensor::getArg(void){
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	return mArg;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	ee07 3a90 	vmov	s15, r3
}
 8003340:	eeb0 0a67 	vmov.f32	s0, s15
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <_ZN7MathLibC1Ev>:

#include "MathLib.hpp"
#include <vector>
#include "math.h"

MathLib::MathLib() {
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <_ZN7MathLibC1Ev+0x34>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3304      	adds	r3, #4
 800337a:	4618      	mov	r0, r3
 800337c:	f000 f96d 	bl	800365a <_ZNSt6vectorIfSaIfEEC1Ev>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3310      	adds	r3, #16
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f968 	bl	800365a <_ZNSt6vectorIfSaIfEEC1Ev>
	mSize = 0;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	61da      	str	r2, [r3, #28]
}
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	08009740 	.word	0x08009740

080033a0 <_ZN7MathLibD1Ev>:

MathLib::~MathLib() {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	4a0f      	ldr	r2, [pc, #60]	; (80033e8 <_ZN7MathLibD1Ev+0x48>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	601a      	str	r2, [r3, #0]
	mSize = 0;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	61da      	str	r2, [r3, #28]
	mSinList.clear();
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 f976 	bl	80036aa <_ZNSt6vectorIfSaIfEE5clearEv>
	mCosList.clear();
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3310      	adds	r3, #16
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f971 	bl	80036aa <_ZNSt6vectorIfSaIfEE5clearEv>
MathLib::~MathLib() {
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3310      	adds	r3, #16
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f951 	bl	8003674 <_ZNSt6vectorIfSaIfEED1Ev>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f94c 	bl	8003674 <_ZNSt6vectorIfSaIfEED1Ev>
}
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	08009740 	.word	0x08009740

080033ec <_ZN7MathLibD0Ev>:
MathLib::~MathLib() {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
}
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ffd3 	bl	80033a0 <_ZN7MathLibD1Ev>
 80033fa:	2124      	movs	r1, #36	; 0x24
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f003 f89a 	bl	8006536 <_ZdlPvj>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_ZN7MathLib10setLibSizeEi>:

void MathLib::setLibSize(int pSize){
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	mSize = pSize;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	61da      	str	r2, [r3, #28]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <_ZN7MathLib5fInitEi>:

void MathLib::fInit(int pSize){
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
	setLibSize(pSize);
 8003432:	6839      	ldr	r1, [r7, #0]
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ffe9 	bl	800340c <_ZN7MathLib10setLibSizeEi>
	if(mSize == 0){
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d100      	bne.n	8003444 <_ZN7MathLib5fInitEi+0x1c>
		while(1){}//error check
 8003442:	e7fe      	b.n	8003442 <_ZN7MathLib5fInitEi+0x1a>
	}
	mRadvsSize = mSize / 2*M_PI;//サイズと1radianの比
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	0fda      	lsrs	r2, r3, #31
 800344a:	4413      	add	r3, r2
 800344c:	105b      	asrs	r3, r3, #1
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd f834 	bl	80004bc <__aeabi_i2d>
 8003454:	a30e      	add	r3, pc, #56	; (adr r3, 8003490 <_ZN7MathLib5fInitEi+0x68>)
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fd f899 	bl	8000590 <__aeabi_dmul>
 800345e:	4603      	mov	r3, r0
 8003460:	460c      	mov	r4, r1
 8003462:	4618      	mov	r0, r3
 8003464:	4621      	mov	r1, r4
 8003466:	f7fd fb6b 	bl	8000b40 <__aeabi_d2f>
 800346a:	4602      	mov	r2, r0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	621a      	str	r2, [r3, #32]

	fSinVectorInit(&mSinList);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f81a 	bl	80034b0 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>
	fCosVectorInit(&mCosList);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3310      	adds	r3, #16
 8003480:	4619      	mov	r1, r3
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f864 	bl	8003550 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bd90      	pop	{r4, r7, pc}
 8003490:	54442d18 	.word	0x54442d18
 8003494:	400921fb 	.word	0x400921fb

08003498 <_ZN7MathLib10getLibSizeEv>:

int MathLib::getLibSize(void){return mSize;}
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fSinVectorInit(std::vector<float> *pVector){
 80034b0:	b5b0      	push	{r4, r5, r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	da39      	bge.n	800353c <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fsinval = sin(i*2*M_PI/(float)mSize);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fc fff5 	bl	80004bc <__aeabi_i2d>
 80034d2:	a31d      	add	r3, pc, #116	; (adr r3, 8003548 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x98>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f7fd f85a 	bl	8000590 <__aeabi_dmul>
 80034dc:	4603      	mov	r3, r0
 80034de:	460c      	mov	r4, r1
 80034e0:	4625      	mov	r5, r4
 80034e2:	461c      	mov	r4, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f0:	ee17 0a90 	vmov	r0, s15
 80034f4:	f7fc fff4 	bl	80004e0 <__aeabi_f2d>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4620      	mov	r0, r4
 80034fe:	4629      	mov	r1, r5
 8003500:	f7fd f970 	bl	80007e4 <__aeabi_ddiv>
 8003504:	4603      	mov	r3, r0
 8003506:	460c      	mov	r4, r1
 8003508:	ec44 3b17 	vmov	d7, r3, r4
 800350c:	eeb0 0a47 	vmov.f32	s0, s14
 8003510:	eef0 0a67 	vmov.f32	s1, s15
 8003514:	f003 fa2c 	bl	8006970 <sin>
 8003518:	ec54 3b10 	vmov	r3, r4, d0
 800351c:	4618      	mov	r0, r3
 800351e:	4621      	mov	r1, r4
 8003520:	f7fd fb0e 	bl	8000b40 <__aeabi_d2f>
 8003524:	4603      	mov	r3, r0
 8003526:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fsinval);
 8003528:	f107 0308 	add.w	r3, r7, #8
 800352c:	4619      	mov	r1, r3
 800352e:	6838      	ldr	r0, [r7, #0]
 8003530:	f000 f8c9 	bl	80036c6 <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3301      	adds	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e7c0      	b.n	80034be <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bdb0      	pop	{r4, r5, r7, pc}
 8003544:	f3af 8000 	nop.w
 8003548:	54442d18 	.word	0x54442d18
 800354c:	400921fb 	.word	0x400921fb

08003550 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fCosVectorInit(std::vector<float> *pVector){
 8003550:	b5b0      	push	{r4, r5, r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	429a      	cmp	r2, r3
 8003566:	da39      	bge.n	80035dc <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fcosval = cos(i*2*M_PI/(float)mSize);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f7fc ffa5 	bl	80004bc <__aeabi_i2d>
 8003572:	a31d      	add	r3, pc, #116	; (adr r3, 80035e8 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x98>)
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	f7fd f80a 	bl	8000590 <__aeabi_dmul>
 800357c:	4603      	mov	r3, r0
 800357e:	460c      	mov	r4, r1
 8003580:	4625      	mov	r5, r4
 8003582:	461c      	mov	r4, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003590:	ee17 0a90 	vmov	r0, s15
 8003594:	f7fc ffa4 	bl	80004e0 <__aeabi_f2d>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4620      	mov	r0, r4
 800359e:	4629      	mov	r1, r5
 80035a0:	f7fd f920 	bl	80007e4 <__aeabi_ddiv>
 80035a4:	4603      	mov	r3, r0
 80035a6:	460c      	mov	r4, r1
 80035a8:	ec44 3b17 	vmov	d7, r3, r4
 80035ac:	eeb0 0a47 	vmov.f32	s0, s14
 80035b0:	eef0 0a67 	vmov.f32	s1, s15
 80035b4:	f003 f890 	bl	80066d8 <cos>
 80035b8:	ec54 3b10 	vmov	r3, r4, d0
 80035bc:	4618      	mov	r0, r3
 80035be:	4621      	mov	r1, r4
 80035c0:	f7fd fabe 	bl	8000b40 <__aeabi_d2f>
 80035c4:	4603      	mov	r3, r0
 80035c6:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fcosval);
 80035c8:	f107 0308 	add.w	r3, r7, #8
 80035cc:	4619      	mov	r1, r3
 80035ce:	6838      	ldr	r0, [r7, #0]
 80035d0:	f000 f879 	bl	80036c6 <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3301      	adds	r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	e7c0      	b.n	800355e <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bdb0      	pop	{r4, r5, r7, pc}
 80035e4:	f3af 8000 	nop.w
 80035e8:	54442d18 	.word	0x54442d18
 80035ec:	400921fb 	.word	0x400921fb

080035f0 <_ZN7MathLib10getSinListEv>:

std::vector<float> MathLib::getSinList(void){
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
	return mSinList;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4619      	mov	r1, r3
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f885 	bl	8003710 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <_ZN7MathLib10getCosListEv>:

std::vector<float> MathLib::getCosList(void){
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
	return mCosList;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	3310      	adds	r3, #16
 800361c:	4619      	mov	r1, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f876 	bl	8003710 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <_ZN7MathLib14radToSizeCountEf>:

int MathLib::radToSizeCount(float pradian){
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	ed87 0a00 	vstr	s0, [r7]
	return pradian * mRadvsSize;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	ed93 7a08 	vldr	s14, [r3, #32]
 800363e:	edd7 7a00 	vldr	s15, [r7]
 8003642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800364a:	ee17 3a90 	vmov	r3, s15
}
 800364e:	4618      	mov	r0, r3
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <_ZNSt6vectorIfSaIfEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f89c 	bl	80037a2 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8003674:	b5b0      	push	{r4, r5, r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681c      	ldr	r4, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f8b2 	bl	80037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800368c:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800368e:	461a      	mov	r2, r3
 8003690:	4629      	mov	r1, r5
 8003692:	4620      	mov	r0, r4
 8003694:	f000 f8b7 	bl	8003806 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f88e 	bl	80037bc <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bdb0      	pop	{r4, r5, r7, pc}

080036aa <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4619      	mov	r1, r3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f8b2 	bl	8003822 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d00c      	beq.n	80036f6 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	4619      	mov	r1, r3
 80036e6:	f000 f8bf 	bl	8003868 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	1d1a      	adds	r2, r3, #4
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	605a      	str	r2, [r3, #4]
      }
 80036f4:	e008      	b.n	8003708 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f8c9 	bl	800388e <_ZNSt6vectorIfSaIfEE3endEv>
 80036fc:	4603      	mov	r3, r0
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8d4 	bl	80038b0 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8003710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800371a:	687c      	ldr	r4, [r7, #4]
 800371c:	6838      	ldr	r0, [r7, #0]
 800371e:	f000 f953 	bl	80039c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003722:	4605      	mov	r5, r0
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f96d 	bl	8003a06 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800372c:	4602      	mov	r2, r0
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f958 	bl	80039ea <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>
 800373a:	f107 030c 	add.w	r3, r7, #12
 800373e:	461a      	mov	r2, r3
 8003740:	4629      	mov	r1, r5
 8003742:	4620      	mov	r0, r4
 8003744:	f000 f976 	bl	8003a34 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f965 	bl	8003a1c <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003752:	6838      	ldr	r0, [r7, #0]
 8003754:	f000 f982 	bl	8003a5c <_ZNKSt6vectorIfSaIfEE5beginEv>
 8003758:	4605      	mov	r5, r0
 800375a:	6838      	ldr	r0, [r7, #0]
 800375c:	f000 f992 	bl	8003a84 <_ZNKSt6vectorIfSaIfEE3endEv>
 8003760:	4606      	mov	r6, r0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f841 	bl	80037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800376e:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003770:	4622      	mov	r2, r4
 8003772:	4631      	mov	r1, r6
 8003774:	4628      	mov	r0, r5
 8003776:	f000 f999 	bl	8003aac <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 800377a:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	605a      	str	r2, [r3, #4]
      }
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800378a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f942 	bl	8003a1c <_ZNSaIfED1Ev>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base()
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 f98e 	bl	8003ace <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6819      	ldr	r1, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80037cc:	461a      	mov	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80037d6:	461a      	mov	r2, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f98d 	bl	8003af8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		      - this->_M_impl._M_start); }
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff ffd2 	bl	800378a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f982 	bl	8003b1e <_ZSt8_DestroyIPfEvT_S1_>
    }
 800381a:	bf00      	nop
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8003822:	b590      	push	{r4, r7, lr}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685c      	ldr	r4, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ffdc 	bl	80037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	4621      	mov	r1, r4
 800383e:	6838      	ldr	r0, [r7, #0]
 8003840:	f7ff ffe1 	bl	8003806 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	605a      	str	r2, [r3, #4]
      }
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bd90      	pop	{r4, r7, pc}

08003852 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ffec 	bl	8003852 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f959 	bl	8003b38 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	1d1a      	adds	r2, r3, #4
 800389a:	f107 030c 	add.w	r3, r7, #12
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f961 	bl	8003b68 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80038b0:	b5b0      	push	{r4, r5, r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80038bc:	4a41      	ldr	r2, [pc, #260]	; (80039c4 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x114>)
 80038be:	2101      	movs	r1, #1
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f961 	bl	8003b88 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 80038c6:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f9a5 	bl	8003c18 <_ZNSt6vectorIfSaIfEE5beginEv>
 80038ce:	4603      	mov	r3, r0
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	f107 0214 	add.w	r2, r7, #20
 80038d6:	f107 0308 	add.w	r3, r7, #8
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f9ab 	bl	8003c38 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80038e2:	4603      	mov	r3, r0
 80038e4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f9ba 	bl	8003c64 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80038f0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80038f6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	18d5      	adds	r5, r2, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ffa6 	bl	8003852 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003906:	4603      	mov	r3, r0
 8003908:	461a      	mov	r2, r3
 800390a:	4629      	mov	r1, r5
 800390c:	4620      	mov	r0, r4
 800390e:	f7ff ffab 	bl	8003868 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681c      	ldr	r4, [r3, #0]
 800391a:	f107 0308 	add.w	r3, r7, #8
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f9b4 	bl	8003c8c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003924:	4603      	mov	r3, r0
 8003926:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ff60 	bl	80037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003930:	4603      	mov	r3, r0
	  __new_finish
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	4629      	mov	r1, r5
 8003936:	4620      	mov	r0, r4
 8003938:	f000 f9b3 	bl	8003ca2 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 800393c:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	3304      	adds	r3, #4
 8003942:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8003944:	f107 0308 	add.w	r3, r7, #8
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f99f 	bl	8003c8c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800394e:	4603      	mov	r3, r0
 8003950:	681c      	ldr	r4, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff49 	bl	80037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800395e:	4603      	mov	r3, r0
	  __new_finish
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4629      	mov	r1, r5
 8003964:	4620      	mov	r0, r4
 8003966:	f000 f99c 	bl	8003ca2 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 800396a:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681c      	ldr	r4, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff3a 	bl	80037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800397c:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800397e:	461a      	mov	r2, r3
 8003980:	4629      	mov	r1, r5
 8003982:	4620      	mov	r0, r4
 8003984:	f7ff ff3f 	bl	8003806 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 800399c:	461a      	mov	r2, r3
 800399e:	f000 f8ab 	bl	8003af8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	441a      	add	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	609a      	str	r2, [r3, #8]
    }
 80039ba:	bf00      	nop
 80039bc:	3728      	adds	r7, #40	; 0x28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bdb0      	pop	{r4, r5, r7, pc}
 80039c2:	bf00      	nop
 80039c4:	080096c0 	.word	0x080096c0

080039c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	461a      	mov	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	109b      	asrs	r3, r3, #2
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6839      	ldr	r1, [r7, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f96b 	bl	8003cd4 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <_ZNSaIfED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f970 	bl	8003d0a <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f96b 	bl	8003d20 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f97e 	bl	8003d4e <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	f107 020c 	add.w	r2, r7, #12
 8003a6e:	f107 0308 	add.w	r3, r7, #8
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f985 	bl	8003d84 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	f107 020c 	add.w	r2, r7, #12
 8003a96:	f107 0308 	add.w	r3, r7, #8
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f971 	bl	8003d84 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f970 	bl	8003da4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl()
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f976 	bl	8003dc8 <_ZNSaIfEC1Ev>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
	{ }
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
	if (__p)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f965 	bl	8003de0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003b28:	6839      	ldr	r1, [r7, #0]
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f967 	bl	8003dfe <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fe84 	bl	8003852 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	681c      	ldr	r4, [r3, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4619      	mov	r1, r3
 8003b52:	2004      	movs	r0, #4
 8003b54:	f7ff fbfb 	bl	800334e <_ZnwjPv>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d000      	beq.n	8003b60 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_+0x28>
 8003b5e:	601c      	str	r4, [r3, #0]
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd90      	pop	{r4, r7, pc}

08003b68 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f93d 	bl	8003e14 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff ff13 	bl	80039c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	1ae2      	subs	r2, r4, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	bf34      	ite	cc
 8003bac:	2301      	movcc	r3, #1
 8003bae:	2300      	movcs	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f002 fcd7 	bl	800656c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff ff02 	bl	80039c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff fefe 	bl	80039c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	f107 0208 	add.w	r2, r7, #8
 8003bd4:	f107 0310 	add.w	r3, r7, #16
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f92b 	bl	8003e36 <_ZSt3maxIjERKT_S2_S2_>
 8003be0:	4603      	mov	r3, r0
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4423      	add	r3, r4
 8003be6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7ff feed 	bl	80039c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d306      	bcc.n	8003c04 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7c>
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f90c 	bl	8003e14 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d904      	bls.n	8003c0e <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f905 	bl	8003e14 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	e000      	b.n	8003c10 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x88>
 8003c0e:	697b      	ldr	r3, [r7, #20]
      }
 8003c10:	4618      	mov	r0, r3
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd90      	pop	{r4, r7, pc}

08003c18 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	f107 030c 	add.w	r3, r7, #12
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff9d 	bl	8003b68 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003c38:	b590      	push	{r4, r7, lr}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f822 	bl	8003c8c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461c      	mov	r4, r3
 8003c4e:	6838      	ldr	r0, [r7, #0]
 8003c50:	f000 f81c 	bl	8003c8c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003c54:	4603      	mov	r3, r0
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	1ae3      	subs	r3, r4, r3
 8003c5a:	109b      	asrs	r3, r3, #2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd90      	pop	{r4, r7, pc}

08003c64 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6839      	ldr	r1, [r7, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 f8f0 	bl	8003e5e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	e000      	b.n	8003c84 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8003c82:	2300      	movs	r3, #0
      }
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003ca2:	b590      	push	{r4, r7, lr}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f8e3 	bl	8003e7c <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	68b8      	ldr	r0, [r7, #8]
 8003cba:	f000 f8df 	bl	8003e7c <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8003cbe:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f000 f8e8 	bl	8003e9a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 8003cca:	4603      	mov	r3, r0
    }
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd90      	pop	{r4, r7, pc}

08003cd4 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f804 	bl	8003cee <_ZNSaIfEC1ERKS_>
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) throw()
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003cf8:	6839      	ldr	r1, [r7, #0]
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8de 	bl	8003ebc <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8003d2a:	6839      	ldr	r1, [r7, #0]
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ffde 	bl	8003cee <_ZNSaIfEC1ERKS_>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
	{ }
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003d58:	6839      	ldr	r1, [r7, #0]
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ff82 	bl	8003c64 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003d60:	4602      	mov	r2, r0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	441a      	add	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	609a      	str	r2, [r3, #8]
      }
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003db0:	2301      	movs	r3, #1
 8003db2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f88b 	bl	8003ed4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8003dbe:	4603      	mov	r3, r0
    }
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_ZNSaIfEC1Ev>:
      allocator() throw() { }
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f88f 	bl	8003ef4 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f88a 	bl	8003f0a <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fdf1 	bl	8003a06 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003e24:	4603      	mov	r3, r0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f87c 	bl	8003f24 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d201      	bcs.n	8003e50 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	e000      	b.n	8003e52 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003e50:	687b      	ldr	r3, [r7, #4]
    }
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003e68:	2200      	movs	r2, #0
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f865 	bl	8003f3c <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8003e72:	4603      	mov	r3, r0
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003e84:	f107 030c 	add.w	r3, r7, #12
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f874 	bl	8003f78 <_ZNSt13move_iteratorIPfEC1ES0_>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f872 	bl	8003f96 <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	68b9      	ldr	r1, [r7, #8]
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f868 	bl	8003fba <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003f16:	68b8      	ldr	r0, [r7, #8]
 8003f18:	f002 fb0b 	bl	8006532 <_ZdlPv>
      }
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f85c 	bl	8003fea <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f84e 	bl	8003fea <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4293      	cmp	r3, r2
 8003f54:	bf8c      	ite	hi
 8003f56:	2301      	movhi	r3, #1
 8003f58:	2300      	movls	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003f60:	f002 fafe 	bl	8006560 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f002 fae6 	bl	800653a <_Znwj>
 8003f6e:	4603      	mov	r3, r0
      }
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f829 	bl	8004002 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8003fb0:	4603      	mov	r3, r0
    }
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003fba:	b590      	push	{r4, r7, lr}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f82b 	bl	8004022 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003fcc:	4604      	mov	r4, r0
 8003fce:	68b8      	ldr	r0, [r7, #8]
 8003fd0:	f000 f827 	bl	8004022 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003fd4:	4603      	mov	r3, r0
	       __result));
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f000 f82c 	bl	8004038 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8003fe0:	4603      	mov	r3, r0
    }
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd90      	pop	{r4, r7, pc}

08003fea <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003ff2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f82c 	bl	8004070 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8004018:	4603      	mov	r3, r0
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
    { return __it; }
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004038:	b5b0      	push	{r4, r5, r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f82b 	bl	80040a0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800404a:	4604      	mov	r4, r0
 800404c:	68b8      	ldr	r0, [r7, #8]
 800404e:	f000 f827 	bl	80040a0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004052:	4605      	mov	r5, r0
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f831 	bl	80040bc <_ZSt12__niter_baseIPfET_S1_>
 800405a:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800405c:	461a      	mov	r2, r3
 800405e:	4629      	mov	r1, r5
 8004060:	4620      	mov	r0, r4
 8004062:	f000 f836 	bl	80040d2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8004066:	4603      	mov	r3, r0
    }
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bdb0      	pop	{r4, r5, r7, pc}

08004070 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f83a 	bl	80040f6 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004082:	4604      	mov	r4, r0
 8004084:	68b8      	ldr	r0, [r7, #8]
 8004086:	f000 f836 	bl	80040f6 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800408a:	4603      	mov	r3, r0
	       __result));
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4619      	mov	r1, r3
 8004090:	4620      	mov	r0, r4
 8004092:	f000 f841 	bl	8004118 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 8004096:	4603      	mov	r3, r0
    }
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	bd90      	pop	{r4, r7, pc}

080040a0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f850 	bl	8004150 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 80040b0:	4603      	mov	r3, r0
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4618      	mov	r0, r3
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b086      	sub	sp, #24
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f83d 	bl	8004166 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80040ec:	4603      	mov	r3, r0
    }
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80040fe:	1d3b      	adds	r3, r7, #4
 8004100:	4618      	mov	r0, r3
 8004102:	f000 f84d 	bl	80041a0 <_ZNKSt13move_iteratorIPfE4baseEv>
 8004106:	4603      	mov	r3, r0
 8004108:	4618      	mov	r0, r3
 800410a:	f000 f855 	bl	80041b8 <_ZSt12__miter_baseIPfET_S1_>
 800410e:	4603      	mov	r3, r0
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004118:	b5b0      	push	{r4, r5, r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7ff ffc9 	bl	80040bc <_ZSt12__niter_baseIPfET_S1_>
 800412a:	4604      	mov	r4, r0
 800412c:	68b8      	ldr	r0, [r7, #8]
 800412e:	f7ff ffc5 	bl	80040bc <_ZSt12__niter_baseIPfET_S1_>
 8004132:	4605      	mov	r5, r0
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff ffc1 	bl	80040bc <_ZSt12__niter_baseIPfET_S1_>
 800413a:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800413c:	461a      	mov	r2, r3
 800413e:	4629      	mov	r1, r5
 8004140:	4620      	mov	r0, r4
 8004142:	f000 f844 	bl	80041ce <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 8004146:	4603      	mov	r3, r0
    }
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bdb0      	pop	{r4, r5, r7, pc}

08004150 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004166:	b580      	push	{r7, lr}
 8004168:	b086      	sub	sp, #24
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	109b      	asrs	r3, r3, #2
 800417a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d006      	beq.n	8004190 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	461a      	mov	r2, r3
 8004188:	68f9      	ldr	r1, [r7, #12]
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f003 fcc3 	bl	8007b16 <memmove>
	  return __result + _Num;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4413      	add	r3, r2
	}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
    { return __it; }
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b086      	sub	sp, #24
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80041da:	2301      	movs	r3, #1
 80041dc:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f805 	bl	80041f2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80041e8:	4603      	mov	r3, r0
    }
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b086      	sub	sp, #24
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	109b      	asrs	r3, r3, #2
 8004206:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d006      	beq.n	800421c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	461a      	mov	r2, r3
 8004214:	68f9      	ldr	r1, [r7, #12]
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f003 fc7d 	bl	8007b16 <memmove>
	  return __result + _Num;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	4413      	add	r3, r2
	}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <_ZN9MotorInfoC1Ev>:


#include "MotorInfo.hpp"
#include "Mathlib.hpp"

MotorInfo::MotorInfo() {
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	4a06      	ldr	r2, [pc, #24]	; (8004250 <_ZN9MotorInfoC1Ev+0x24>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	333c      	adds	r3, #60	; 0x3c
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff f892 	bl	8003368 <_ZN7MathLibC1Ev>
	// TODO Auto-generated constructor stub

}
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	08009750 	.word	0x08009750

08004254 <_ZN9MotorInfoD1Ev>:

MotorInfo::~MotorInfo() {
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	4a06      	ldr	r2, [pc, #24]	; (8004278 <_ZN9MotorInfoD1Ev+0x24>)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	333c      	adds	r3, #60	; 0x3c
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff f89a 	bl	80033a0 <_ZN7MathLibD1Ev>
	// TODO Auto-generated destructor stub
}
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	08009750 	.word	0x08009750

0800427c <_ZN9MotorInfoD0Ev>:
MotorInfo::~MotorInfo() {
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
}
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff ffe5 	bl	8004254 <_ZN9MotorInfoD1Ev>
 800428a:	2164      	movs	r1, #100	; 0x64
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f002 f952 	bl	8006536 <_ZdlPvj>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <_ZN7MathLibaSERKS_>:
#ifndef MATHLIB_HPP_
#define MATHLIB_HPP_

#include <vector>

class MathLib {
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	1d1a      	adds	r2, r3, #4
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f000 f9a0 	bl	80045f6 <_ZNSt6vectorIfSaIfEEaSERKS1_>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f103 0210 	add.w	r2, r3, #16
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	3310      	adds	r3, #16
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 f997 	bl	80045f6 <_ZNSt6vectorIfSaIfEEaSERKS1_>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	61da      	str	r2, [r3, #28]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6a1a      	ldr	r2, [r3, #32]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	621a      	str	r2, [r3, #32]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <_ZN9MotorInfo10setMathLibE7MathLib>:

void MotorInfo::setMathLib(MathLib pLib){
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
	mLib = pLib;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	333c      	adds	r3, #60	; 0x3c
 80042f0:	6839      	ldr	r1, [r7, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff ffd2 	bl	800429c <_ZN7MathLibaSERKS_>
}
 80042f8:	bf00      	nop
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <_ZN7MathLibC1ERKS_>:
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
 800430a:	4a10      	ldr	r2, [pc, #64]	; (800434c <_ZN7MathLibC1ERKS_+0x4c>)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	1d1a      	adds	r2, r3, #4
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	3304      	adds	r3, #4
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f7ff f9f8 	bl	8003710 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f103 0210 	add.w	r2, r3, #16
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	3310      	adds	r3, #16
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f7ff f9ef 	bl	8003710 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	61da      	str	r2, [r3, #28]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6a1a      	ldr	r2, [r3, #32]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	621a      	str	r2, [r3, #32]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	08009740 	.word	0x08009740

08004350 <_ZN9MotorInfo10getMathLibEv>:

MathLib MotorInfo::getMathLib(void){return mLib;}
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	333c      	adds	r3, #60	; 0x3c
 800435e:	4619      	mov	r1, r3
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ffcd 	bl	8004300 <_ZN7MathLibC1ERKS_>
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <_ZN9MotorInfo6setArgEi>:

void MotorInfo::setVu(float pVu){mVu=pVu;};
void MotorInfo::setVv(float pVv){mVv=pVv;};
void MotorInfo::setVw(float pVw){mVw=pVw;};

void MotorInfo::setArg(int parg){
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
	marg = parg;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <_ZN9MotorInfo5setVdEf>:
	mIq = -mLib.getSinList().at(marg) * mIalpha + mLib.getCosList().at(marg) * mIbeta;
};

void MotorInfo::PID(void){}

void MotorInfo::setVd(float pVd){mVd = pVd;}
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	ed87 0a00 	vstr	s0, [r7]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	635a      	str	r2, [r3, #52]	; 0x34
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_ZN9MotorInfo5setVqEf>:
void MotorInfo::setVq(float pVq){mVq = pVq;}
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	ed87 0a00 	vstr	s0, [r7]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <_ZN9MotorInfo17invClarkTransformEv>:

void MotorInfo::invClarkTransform(void){
 80043c6:	b580      	push	{r7, lr}
 80043c8:	ed2d 8b02 	vpush	{d8}
 80043cc:	b08e      	sub	sp, #56	; 0x38
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
	mValpha = mLib.getCosList().at(marg) * mVd - mLib.getSinList().at(marg) * mVq;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80043d8:	f107 0308 	add.w	r3, r7, #8
 80043dc:	4611      	mov	r1, r2
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff f915 	bl	800360e <_ZN7MathLib10getCosListEv>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e8:	461a      	mov	r2, r3
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 f9f7 	bl	80047e4 <_ZNSt6vectorIfSaIfEE2atEj>
 80043f6:	4603      	mov	r3, r0
 80043f8:	ed93 7a00 	vldr	s14, [r3]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004402:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800440c:	f107 0314 	add.w	r3, r7, #20
 8004410:	4611      	mov	r1, r2
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff f8ec 	bl	80035f0 <_ZN7MathLib10getSinListEv>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441c:	461a      	mov	r2, r3
 800441e:	f107 0314 	add.w	r3, r7, #20
 8004422:	4611      	mov	r1, r2
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f9dd 	bl	80047e4 <_ZNSt6vectorIfSaIfEE2atEj>
 800442a:	4603      	mov	r3, r0
 800442c:	ed93 7a00 	vldr	s14, [r3]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 8004444:	f107 0314 	add.w	r3, r7, #20
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff f913 	bl	8003674 <_ZNSt6vectorIfSaIfEED1Ev>
 800444e:	f107 0308 	add.w	r3, r7, #8
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff f90e 	bl	8003674 <_ZNSt6vectorIfSaIfEED1Ev>
	mVbeta  = mLib.getSinList().at(marg) * mVd + mLib.getCosList().at(marg) * mVq;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800445e:	f107 0320 	add.w	r3, r7, #32
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff f8c3 	bl	80035f0 <_ZN7MathLib10getSinListEv>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446e:	461a      	mov	r2, r3
 8004470:	f107 0320 	add.w	r3, r7, #32
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f9b4 	bl	80047e4 <_ZNSt6vectorIfSaIfEE2atEj>
 800447c:	4603      	mov	r3, r0
 800447e:	ed93 7a00 	vldr	s14, [r3]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004488:	ee27 8a27 	vmul.f32	s16, s14, s15
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004496:	4611      	mov	r1, r2
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff f8b8 	bl	800360e <_ZN7MathLib10getCosListEv>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a2:	461a      	mov	r2, r3
 80044a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f99a 	bl	80047e4 <_ZNSt6vectorIfSaIfEE2atEj>
 80044b0:	4603      	mov	r3, r0
 80044b2:	ed93 7a00 	vldr	s14, [r3]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80044bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 80044ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff f8d0 	bl	8003674 <_ZNSt6vectorIfSaIfEED1Ev>
 80044d4:	f107 0320 	add.w	r3, r7, #32
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff f8cb 	bl	8003674 <_ZNSt6vectorIfSaIfEED1Ev>
};
 80044de:	bf00      	nop
 80044e0:	3738      	adds	r7, #56	; 0x38
 80044e2:	46bd      	mov	sp, r7
 80044e4:	ecbd 8b02 	vpop	{d8}
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <_ZN9MotorInfo16invParkTransformEv>:

void MotorInfo::invParkTransform(void){
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	mVu = 0.75f * mValpha;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80044fa:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80044fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	edc3 7a08 	vstr	s15, [r3, #32]
	mVv = -0.75f * mValpha + mValpha / 3 + mVbeta / 1.7320508f;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800450e:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 8004512:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800451c:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8004520:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800452e:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8004578 <_ZN9MotorInfo16invParkTransformEv+0x8c>
 8004532:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	mVw = - mValpha / 3 - mVbeta / 1.7320508f;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004546:	eef1 7a67 	vneg.f32	s15, s15
 800454a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800454e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8004558:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8004578 <_ZN9MotorInfo16invParkTransformEv+0x8c>
 800455c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
//	Iu + Iv - Iw = -2*Iw;
//	Ialpha * 2/3 + Ibeta * 2/sqrt(3) = -2 Iw;
//
//
//	Iv = -Iu - Iw;
};
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	3fddb3d7 	.word	0x3fddb3d7

0800457c <_ZN9MotorInfo5getVuEv>:
float MotorInfo::getVq(void){return mVq;};

float MotorInfo::getValpha(void){return mValpha;};
float MotorInfo::getVbeta(void){return mVbeta;};

float MotorInfo::getVu(void){return mVu;};
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eeb0 0a67 	vmov.f32	s0, s15
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <_ZN9MotorInfo5getVvEv>:
float MotorInfo::getVv(void){return mVv;};
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eeb0 0a67 	vmov.f32	s0, s15
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <_ZN9MotorInfo5getVwEv>:
float MotorInfo::getVw(void){return mVw;};
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	ee07 3a90 	vmov	s15, r3
 80045c8:	eeb0 0a67 	vmov.f32	s0, s15
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>:

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 80045d6:	b480      	push	{r7}
 80045d8:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 80045da:	2300      	movs	r3, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 80045e6:	b480      	push	{r7}
 80045e8:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 80045ea:	2301      	movs	r3, #1
 80045ec:	4618      	mov	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 80045f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	f000 80e8 	beq.w	80047da <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e4>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800460a:	f7ff ffe4 	bl	80045d6 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d044      	beq.n	800469e <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa8>
	      if (!_Alloc_traits::_S_always_equal()
 8004614:	f7ff ffe7 	bl	80045e6 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>
 8004618:	4603      	mov	r3, r0
 800461a:	f083 0301 	eor.w	r3, r3, #1
 800461e:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8004620:	2b00      	cmp	r3, #0
 8004622:	d012      	beq.n	800464a <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff f8e2 	bl	80037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800462c:	4604      	mov	r4, r0
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff f9e8 	bl	8003a06 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004636:	4603      	mov	r3, r0
 8004638:	4619      	mov	r1, r3
 800463a:	4620      	mov	r0, r4
 800463c:	f000 f8e4 	bl	8004808 <_ZStneIfEbRKSaIT_ES3_>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
 800464a:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800464c:	2b00      	cmp	r3, #0
 800464e:	d018      	beq.n	8004682 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x8c>
		  this->clear();
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff f82a 	bl	80036aa <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
				- this->_M_impl._M_start);
 8004660:	461a      	mov	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800466a:	461a      	mov	r2, r3
 800466c:	f7ff fa44 	bl	8003af8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff f8b3 	bl	80037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800468a:	4604      	mov	r4, r0
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff f9b9 	bl	8003a06 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004694:	4603      	mov	r3, r0
 8004696:	4619      	mov	r1, r3
 8004698:	4620      	mov	r0, r4
 800469a:	f000 f8c1 	bl	8004820 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 800469e:	6838      	ldr	r0, [r7, #0]
 80046a0:	f7ff f992 	bl	80039c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80046a4:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f8c8 	bl	800483c <_ZNKSt6vectorIfSaIfEE8capacityEv>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4293      	cmp	r3, r2
 80046b2:	bf8c      	ite	hi
 80046b4:	2301      	movhi	r3, #1
 80046b6:	2300      	movls	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d033      	beq.n	8004726 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x130>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 80046be:	6838      	ldr	r0, [r7, #0]
 80046c0:	f7ff f9cc 	bl	8003a5c <_ZNKSt6vectorIfSaIfEE5beginEv>
 80046c4:	4604      	mov	r4, r0
 80046c6:	6838      	ldr	r0, [r7, #0]
 80046c8:	f7ff f9dc 	bl	8003a84 <_ZNKSt6vectorIfSaIfEE3endEv>
 80046cc:	4603      	mov	r3, r0
 80046ce:	4622      	mov	r2, r4
 80046d0:	68f9      	ldr	r1, [r7, #12]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f8c3 	bl	800485e <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 80046d8:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681c      	ldr	r4, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff f883 	bl	80037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80046ea:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80046ec:	461a      	mov	r2, r3
 80046ee:	4629      	mov	r1, r5
 80046f0:	4620      	mov	r0, r4
 80046f2:	f7ff f888 	bl	8003806 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800470a:	461a      	mov	r2, r3
 800470c:	f7ff f9f4 	bl	8003af8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	e052      	b.n	80047cc <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	  else if (size() >= __xlen)
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff f94e 	bl	80039c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800472c:	4602      	mov	r2, r0
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4293      	cmp	r3, r2
 8004732:	bf94      	ite	ls
 8004734:	2301      	movls	r3, #1
 8004736:	2300      	movhi	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d020      	beq.n	8004780 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18a>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800473e:	6838      	ldr	r0, [r7, #0]
 8004740:	f7ff f98c 	bl	8003a5c <_ZNKSt6vectorIfSaIfEE5beginEv>
 8004744:	4604      	mov	r4, r0
 8004746:	6838      	ldr	r0, [r7, #0]
 8004748:	f7ff f99c 	bl	8003a84 <_ZNKSt6vectorIfSaIfEE3endEv>
 800474c:	4605      	mov	r5, r0
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fa62 	bl	8003c18 <_ZNSt6vectorIfSaIfEE5beginEv>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	4629      	mov	r1, r5
 800475a:	4620      	mov	r0, r4
 800475c:	f000 f89b 	bl	8004896 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 8004760:	4604      	mov	r4, r0
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff f893 	bl	800388e <_ZNSt6vectorIfSaIfEE3endEv>
 8004768:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff f83f 	bl	80037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004772:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8004774:	461a      	mov	r2, r3
 8004776:	4629      	mov	r1, r5
 8004778:	4620      	mov	r0, r4
 800477a:	f000 f8a4 	bl	80048c6 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 800477e:	e025      	b.n	80047cc <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681d      	ldr	r5, [r3, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681c      	ldr	r4, [r3, #0]
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff f91d 	bl	80039c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800478e:	4603      	mov	r3, r0
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	18e1      	adds	r1, r4, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	4628      	mov	r0, r5
 800479c:	f000 f8a1 	bl	80048e2 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681c      	ldr	r4, [r3, #0]
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff f90f 	bl	80039c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80047aa:	4603      	mov	r3, r0
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff f818 	bl	80037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80047c0:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80047c2:	4632      	mov	r2, r6
 80047c4:	4629      	mov	r1, r5
 80047c6:	4620      	mov	r0, r4
 80047c8:	f000 f8a3 	bl	8004912 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	441a      	add	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	605a      	str	r2, [r3, #4]
      return *this;
 80047da:	687b      	ldr	r3, [r7, #4]
    }
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047e4 <_ZNSt6vectorIfSaIfEE2atEj>:
      at(size_type __n)
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 80047ee:	6839      	ldr	r1, [r7, #0]
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f89f 	bl	8004934 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>
	return (*this)[__n];
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f8bb 	bl	8004974 <_ZNSt6vectorIfSaIfEEixEj>
 80047fe:	4603      	mov	r3, r0
      }
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <_ZStneIfEbRKSaIT_ES3_>:
    _GLIBCXX_USE_NOEXCEPT
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
    _GLIBCXX_USE_NOEXCEPT
    { return false; }
 8004812:	2300      	movs	r3, #0
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 800482a:	461a      	mov	r2, r3
 800482c:	6839      	ldr	r1, [r7, #0]
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f8b0 	bl	8004994 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8004834:	bf00      	nop
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 8004848:	461a      	mov	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	109b      	asrs	r3, r3, #2
 8004852:	4618      	mov	r0, r3
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 800485e:	b580      	push	{r7, lr}
 8004860:	b086      	sub	sp, #24
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff f9f7 	bl	8003c64 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8004876:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe ffb8 	bl	80037f0 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004880:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff f910 	bl	8003aac <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 800488c:	697b      	ldr	r3, [r7, #20]
	}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8004896:	b590      	push	{r4, r7, lr}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f7ff fbbd 	bl	8004022 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80048a8:	4604      	mov	r4, r0
 80048aa:	68b8      	ldr	r0, [r7, #8]
 80048ac:	f7ff fbb9 	bl	8004022 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80048b0:	4603      	mov	r3, r0
	       __result));
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4619      	mov	r1, r3
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 f878 	bl	80049ac <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 80048bc:	4603      	mov	r3, r0
    }
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd90      	pop	{r4, r7, pc}

080048c6 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f88f 	bl	80049f8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80048e2:	b590      	push	{r4, r7, lr}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff fc62 	bl	80041b8 <_ZSt12__miter_baseIPfET_S1_>
 80048f4:	4604      	mov	r4, r0
 80048f6:	68b8      	ldr	r0, [r7, #8]
 80048f8:	f7ff fc5e 	bl	80041b8 <_ZSt12__miter_baseIPfET_S1_>
 80048fc:	4603      	mov	r3, r0
	       __result));
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	4619      	mov	r1, r3
 8004902:	4620      	mov	r0, r4
 8004904:	f000 f885 	bl	8004a12 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 8004908:	4603      	mov	r3, r0
    }
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	bd90      	pop	{r4, r7, pc}

08004912 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	68b9      	ldr	r1, [r7, #8]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f890 	bl	8004a4a <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 800492a:	4603      	mov	r3, r0
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff f842 	bl	80039c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004944:	4602      	mov	r2, r0
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	4293      	cmp	r3, r2
 800494a:	bf2c      	ite	cs
 800494c:	2301      	movcs	r3, #1
 800494e:	2300      	movcc	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff f836 	bl	80039c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800495c:	4603      	mov	r3, r0
 800495e:	461a      	mov	r2, r3
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	4803      	ldr	r0, [pc, #12]	; (8004970 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x3c>)
 8004964:	f001 fe05 	bl	8006572 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	080096dc 	.word	0x080096dc

08004974 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
      }
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	713a      	strb	r2, [r7, #4]
    { }
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80049ac:	b5b0      	push	{r4, r5, r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff fb71 	bl	80040a0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80049be:	4604      	mov	r4, r0
 80049c0:	68b8      	ldr	r0, [r7, #8]
 80049c2:	f7ff fb6d 	bl	80040a0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80049c6:	4605      	mov	r5, r0
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f850 	bl	8004a6e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80049ce:	4603      	mov	r3, r0
 80049d0:	461a      	mov	r2, r3
 80049d2:	4629      	mov	r1, r5
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7ff fb7c 	bl	80040d2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80049da:	4603      	mov	r3, r0
 80049dc:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 80049de:	f107 0214 	add.w	r2, r7, #20
 80049e2:	f107 0310 	add.w	r3, r7, #16
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff f8bd 	bl	8003b68 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80049ee:	693b      	ldr	r3, [r7, #16]
    }
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bdb0      	pop	{r4, r5, r7, pc}

080049f8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004a02:	6839      	ldr	r1, [r7, #0]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f840 	bl	8004a8a <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004a12:	b5b0      	push	{r4, r5, r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f7ff fb4c 	bl	80040bc <_ZSt12__niter_baseIPfET_S1_>
 8004a24:	4604      	mov	r4, r0
 8004a26:	68b8      	ldr	r0, [r7, #8]
 8004a28:	f7ff fb48 	bl	80040bc <_ZSt12__niter_baseIPfET_S1_>
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fb44 	bl	80040bc <_ZSt12__niter_baseIPfET_S1_>
 8004a34:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8004a36:	461a      	mov	r2, r3
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f000 f830 	bl	8004aa0 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 8004a40:	4603      	mov	r3, r0
    }
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bdb0      	pop	{r4, r5, r7, pc}

08004a4a <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004a56:	2301      	movs	r3, #1
 8004a58:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f830 	bl	8004ac4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 8004a64:	4603      	mov	r3, r0
    }
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff f907 	bl	8003c8c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8004aac:	2301      	movs	r3, #1
 8004aae:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7ff fb56 	bl	8004166 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004aba:	4603      	mov	r3, r0
    }
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff ff04 	bl	80048e2 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <LL_TIM_EnableCounter>:
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f043 0201 	orr.w	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <LL_TIM_CC_EnableChannel>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1a      	ldr	r2, [r3, #32]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <LL_TIM_EnableAllOutputs>:
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <_ZN3PWM6setTIMEP11TIM_TypeDef>:

#include "PWM.hpp"
#include "stm32f4xx_hal.h"
#include "tim.h"

void PWM::setTIM(TIM_TypeDef* pTIMx){
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	601a      	str	r2, [r3, #0]
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	605a      	str	r2, [r3, #4]
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <_ZN3PWM5fInitEi>:
	LL_TIM_EnableAllOutputs(mTIMx);// need
	//PWM TIM Init end

}

void PWM::fInit(int pTimReload){
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	6039      	str	r1, [r7, #0]

	mTimReload = pTimReload;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	609a      	str	r2, [r3, #8]

	if(mCH==0){//error check
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d100      	bne.n	8004b98 <_ZN3PWM5fInitEi+0x1a>
		while(1){}
 8004b96:	e7fe      	b.n	8004b96 <_ZN3PWM5fInitEi+0x18>
	}

	//mREG Init
	if (mCH == 1){
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d105      	bne.n	8004bac <_ZN3PWM5fInitEi+0x2e>
		mREG=&(mTIMx->CCR1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 2){
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d105      	bne.n	8004bc0 <_ZN3PWM5fInitEi+0x42>
		mREG=&(mTIMx->CCR2);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 3){
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d105      	bne.n	8004bd4 <_ZN3PWM5fInitEi+0x56>
		mREG=&(mTIMx->CCR3);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 4){
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d105      	bne.n	8004be8 <_ZN3PWM5fInitEi+0x6a>
		mREG=&(mTIMx->CCR4);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60da      	str	r2, [r3, #12]
	}

	if(mREG==NULL){//error check
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d100      	bne.n	8004bf2 <_ZN3PWM5fInitEi+0x74>
		while(1){}
 8004bf0:	e7fe      	b.n	8004bf0 <_ZN3PWM5fInitEi+0x72>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d100      	bne.n	8004bfc <_ZN3PWM5fInitEi+0x7e>
		while(1){}
 8004bfa:	e7fe      	b.n	8004bfa <_ZN3PWM5fInitEi+0x7c>
	}
	if (mCH == 1){
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d105      	bne.n	8004c10 <_ZN3PWM5fInitEi+0x92>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2101      	movs	r1, #1
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff ff7a 	bl	8004b04 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d105      	bne.n	8004c24 <_ZN3PWM5fInitEi+0xa6>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2110      	movs	r1, #16
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff ff70 	bl	8004b04 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d106      	bne.n	8004c3a <_ZN3PWM5fInitEi+0xbc>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff65 	bl	8004b04 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d106      	bne.n	8004c50 <_ZN3PWM5fInitEi+0xd2>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff ff5a 	bl	8004b04 <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff ff45 	bl	8004ae4 <LL_TIM_EnableCounter>
	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff ff61 	bl	8004b26 <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 8004c64:	bf00      	nop
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int pDuty = pfDuty * (float)mTimReload;
	WRITE_REG(*mREG, pDuty);
}

void PWM::f2Duty(float pfDuty){
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	ed87 0a00 	vstr	s0, [r7]
	int pDuty = (pfDuty + 1)/2 * (float)mTimReload;
 8004c78:	edd7 7a00 	vldr	s15, [r7]
 8004c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c84:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004c88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ca0:	ee17 3a90 	vmov	r3, s15
 8004ca4:	60fb      	str	r3, [r7, #12]
	WRITE_REG(*mREG, pDuty);
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	601a      	str	r2, [r3, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <__NVIC_GetPriorityGrouping>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	f003 0307 	and.w	r3, r3, #7
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	e000ed00 	.word	0xe000ed00

08004cd8 <__NVIC_EnableIRQ>:
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	db0b      	blt.n	8004d02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	f003 021f 	and.w	r2, r3, #31
 8004cf0:	4907      	ldr	r1, [pc, #28]	; (8004d10 <__NVIC_EnableIRQ+0x38>)
 8004cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8004cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	e000e100 	.word	0xe000e100

08004d14 <__NVIC_SetPriority>:
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	db0a      	blt.n	8004d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	490c      	ldr	r1, [pc, #48]	; (8004d60 <__NVIC_SetPriority+0x4c>)
 8004d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d32:	0112      	lsls	r2, r2, #4
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	440b      	add	r3, r1
 8004d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d3c:	e00a      	b.n	8004d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	4908      	ldr	r1, [pc, #32]	; (8004d64 <__NVIC_SetPriority+0x50>)
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	3b04      	subs	r3, #4
 8004d4c:	0112      	lsls	r2, r2, #4
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	440b      	add	r3, r1
 8004d52:	761a      	strb	r2, [r3, #24]
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000e100 	.word	0xe000e100
 8004d64:	e000ed00 	.word	0xe000ed00

08004d68 <NVIC_EncodePriority>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b089      	sub	sp, #36	; 0x24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f1c3 0307 	rsb	r3, r3, #7
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	bf28      	it	cs
 8004d86:	2304      	movcs	r3, #4
 8004d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	2b06      	cmp	r3, #6
 8004d90:	d902      	bls.n	8004d98 <NVIC_EncodePriority+0x30>
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	3b03      	subs	r3, #3
 8004d96:	e000      	b.n	8004d9a <NVIC_EncodePriority+0x32>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	43da      	mvns	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	401a      	ands	r2, r3
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dba:	43d9      	mvns	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc0:	4313      	orrs	r3, r2
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3724      	adds	r7, #36	; 0x24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <LL_ADC_REG_SetSequencerRanks>:
{
 8004dce:	b490      	push	{r4, r7}
 8004dd0:	b086      	sub	sp, #24
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	332c      	adds	r3, #44	; 0x2c
 8004dde:	4619      	mov	r1, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004dea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	fa92 f2a2 	rbit	r2, r2
 8004df2:	613a      	str	r2, [r7, #16]
  return result;
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	fab2 f282 	clz	r2, r2
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	40d3      	lsrs	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004e04:	6822      	ldr	r2, [r4, #0]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	211f      	movs	r1, #31
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	43db      	mvns	r3, r3
 8004e14:	401a      	ands	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f003 011f 	and.w	r1, r3, #31
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	fa01 f303 	lsl.w	r3, r1, r3
 8004e26:	4313      	orrs	r3, r2
 8004e28:	6023      	str	r3, [r4, #0]
}
 8004e2a:	bf00      	nop
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc90      	pop	{r4, r7}
 8004e32:	4770      	bx	lr

08004e34 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_ADC_INJ_SetSequencerRanks>:
{
 8004e5a:	b490      	push	{r4, r7}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	0d1b      	lsrs	r3, r3, #20
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	1c5c      	adds	r4, r3, #1
  MODIFY_REG(ADCx->JSQR,
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	b2d9      	uxtb	r1, r3
 8004e7a:	b2e3      	uxtb	r3, r4
 8004e7c:	1acb      	subs	r3, r1, r3
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	3303      	adds	r3, #3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	4619      	mov	r1, r3
 8004e86:	460b      	mov	r3, r1
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	211f      	movs	r1, #31
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	401a      	ands	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f003 011f 	and.w	r1, r3, #31
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	b2d8      	uxtb	r0, r3
 8004ea0:	b2e3      	uxtb	r3, r4
 8004ea2:	1ac3      	subs	r3, r0, r3
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	3303      	adds	r3, #3
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	4618      	mov	r0, r3
 8004eac:	4603      	mov	r3, r0
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4403      	add	r3, r0
 8004eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc90      	pop	{r4, r7}
 8004ec4:	4770      	bx	lr

08004ec6 <LL_ADC_INJ_SetOffset>:
{
 8004ec6:	b490      	push	{r4, r7}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3314      	adds	r3, #20
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ede:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	fa92 f2a2 	rbit	r2, r2
 8004eea:	613a      	str	r2, [r7, #16]
  return result;
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	fab2 f282 	clz	r2, r2
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	40d3      	lsrs	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004f02:	f023 030f 	bic.w	r3, r3, #15
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	6023      	str	r3, [r4, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc90      	pop	{r4, r7}
 8004f14:	4770      	bx	lr

08004f16 <LL_ADC_SetChannelSamplingTime>:
{
 8004f16:	b490      	push	{r4, r7}
 8004f18:	b08a      	sub	sp, #40	; 0x28
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	330c      	adds	r3, #12
 8004f26:	4619      	mov	r1, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	fa92 f2a2 	rbit	r2, r2
 8004f3a:	613a      	str	r2, [r7, #16]
  return result;
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	fab2 f282 	clz	r2, r2
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	40d3      	lsrs	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004f4c:	6822      	ldr	r2, [r4, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8004f54:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8004f58:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5a:	69f9      	ldr	r1, [r7, #28]
 8004f5c:	fa91 f1a1 	rbit	r1, r1
 8004f60:	61b9      	str	r1, [r7, #24]
  return result;
 8004f62:	69b9      	ldr	r1, [r7, #24]
 8004f64:	fab1 f181 	clz	r1, r1
 8004f68:	b2c9      	uxtb	r1, r1
 8004f6a:	40cb      	lsrs	r3, r1
 8004f6c:	2107      	movs	r1, #7
 8004f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f72:	43db      	mvns	r3, r3
 8004f74:	401a      	ands	r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8004f7c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8004f80:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f84:	fa91 f1a1 	rbit	r1, r1
 8004f88:	6239      	str	r1, [r7, #32]
  return result;
 8004f8a:	6a39      	ldr	r1, [r7, #32]
 8004f8c:	fab1 f181 	clz	r1, r1
 8004f90:	b2c9      	uxtb	r1, r1
 8004f92:	40cb      	lsrs	r3, r1
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	6023      	str	r3, [r4, #0]
}
 8004f9e:	bf00      	nop
 8004fa0:	3728      	adds	r7, #40	; 0x28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc90      	pop	{r4, r7}
 8004fa6:	4770      	bx	lr

08004fa8 <LL_ADC_INJ_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f023 0220 	bic.w	r2, r3, #32
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	605a      	str	r2, [r3, #4]
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	605a      	str	r2, [r3, #4]
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005014:	4b08      	ldr	r3, [pc, #32]	; (8005038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005018:	4907      	ldr	r1, [pc, #28]	; (8005038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4313      	orrs	r3, r2
 800501e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4013      	ands	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800502a:	68fb      	ldr	r3, [r7, #12]
}
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40023800 	.word	0x40023800

0800503c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005044:	4b08      	ldr	r3, [pc, #32]	; (8005068 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005048:	4907      	ldr	r1, [pc, #28]	; (8005068 <LL_APB2_GRP1_EnableClock+0x2c>)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4313      	orrs	r3, r2
 800504e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4013      	ands	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800505a:	68fb      	ldr	r3, [r7, #12]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40023800 	.word	0x40023800

0800506c <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b096      	sub	sp, #88	; 0x58
 8005070:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8005072:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	605a      	str	r2, [r3, #4]
 800507c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800507e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	605a      	str	r2, [r3, #4]
 8005088:	609a      	str	r2, [r3, #8]
 800508a:	60da      	str	r2, [r3, #12]
 800508c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800508e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	605a      	str	r2, [r3, #4]
 8005098:	609a      	str	r2, [r3, #8]
 800509a:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 800509c:	f107 0318 	add.w	r3, r7, #24
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	605a      	str	r2, [r3, #4]
 80050a6:	609a      	str	r2, [r3, #8]
 80050a8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050aa:	463b      	mov	r3, r7
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	605a      	str	r2, [r3, #4]
 80050b2:	609a      	str	r2, [r3, #8]
 80050b4:	60da      	str	r2, [r3, #12]
 80050b6:	611a      	str	r2, [r3, #16]
 80050b8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80050ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80050be:	f7ff ffbd 	bl	800503c <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80050c2:	2004      	movs	r0, #4
 80050c4:	f7ff ffa2 	bl	800500c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80050c8:	2001      	movs	r0, #1
 80050ca:	f7ff ff9f 	bl	800500c <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 80050ce:	2307      	movs	r3, #7
 80050d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80050d2:	2303      	movs	r3, #3
 80050d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050da:	463b      	mov	r3, r7
 80050dc:	4619      	mov	r1, r3
 80050de:	4869      	ldr	r0, [pc, #420]	; (8005284 <MX_ADC1_Init+0x218>)
 80050e0:	f7fd fd11 	bl	8002b06 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80050e4:	2303      	movs	r3, #3
 80050e6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80050e8:	2303      	movs	r3, #3
 80050ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80050ec:	2300      	movs	r3, #0
 80050ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f0:	463b      	mov	r3, r7
 80050f2:	4619      	mov	r1, r3
 80050f4:	4864      	ldr	r0, [pc, #400]	; (8005288 <MX_ADC1_Init+0x21c>)
 80050f6:	f7fd fd06 	bl	8002b06 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80050fa:	f7ff fddf 	bl	8004cbc <__NVIC_GetPriorityGrouping>
 80050fe:	4603      	mov	r3, r0
 8005100:	2200      	movs	r2, #0
 8005102:	2102      	movs	r1, #2
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fe2f 	bl	8004d68 <NVIC_EncodePriority>
 800510a:	4603      	mov	r3, r0
 800510c:	4619      	mov	r1, r3
 800510e:	2012      	movs	r0, #18
 8005110:	f7ff fe00 	bl	8004d14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8005114:	2012      	movs	r0, #18
 8005116:	f7ff fddf 	bl	8004cd8 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800511a:	2300      	movs	r3, #0
 800511c:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800511e:	2300      	movs	r3, #0
 8005120:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8005122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005126:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8005128:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800512c:	4619      	mov	r1, r3
 800512e:	4857      	ldr	r0, [pc, #348]	; (800528c <MX_ADC1_Init+0x220>)
 8005130:	f7fd fa1c 	bl	800256c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8005134:	2300      	movs	r3, #0
 8005136:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8005138:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800513c:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800513e:	2300      	movs	r3, #0
 8005140:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8005142:	2300      	movs	r3, #0
 8005144:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8005146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800514a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800514c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005150:	4619      	mov	r1, r3
 8005152:	484e      	ldr	r0, [pc, #312]	; (800528c <MX_ADC1_Init+0x220>)
 8005154:	f7fd fa36 	bl	80025c4 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8005158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800515c:	484b      	ldr	r0, [pc, #300]	; (800528c <MX_ADC1_Init+0x220>)
 800515e:	f7ff fe69 	bl	8004e34 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 8005162:	484a      	ldr	r0, [pc, #296]	; (800528c <MX_ADC1_Init+0x220>)
 8005164:	f7ff ff31 	bl	8004fca <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8005168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800516e:	2300      	movs	r3, #0
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8005172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005176:	4619      	mov	r1, r3
 8005178:	4845      	ldr	r0, [pc, #276]	; (8005290 <MX_ADC1_Init+0x224>)
 800517a:	f7fd f9af 	bl	80024dc <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800517e:	4a45      	ldr	r2, [pc, #276]	; (8005294 <MX_ADC1_Init+0x228>)
 8005180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005184:	4841      	ldr	r0, [pc, #260]	; (800528c <MX_ADC1_Init+0x220>)
 8005186:	f7ff fe22 	bl	8004dce <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 800518a:	2202      	movs	r2, #2
 800518c:	4941      	ldr	r1, [pc, #260]	; (8005294 <MX_ADC1_Init+0x228>)
 800518e:	483f      	ldr	r0, [pc, #252]	; (800528c <MX_ADC1_Init+0x220>)
 8005190:	f7ff fec1 	bl	8004f16 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 8005194:	4a40      	ldr	r2, [pc, #256]	; (8005298 <MX_ADC1_Init+0x22c>)
 8005196:	f240 2105 	movw	r1, #517	; 0x205
 800519a:	483c      	ldr	r0, [pc, #240]	; (800528c <MX_ADC1_Init+0x220>)
 800519c:	f7ff fe17 	bl	8004dce <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 80051a0:	2202      	movs	r2, #2
 80051a2:	493d      	ldr	r1, [pc, #244]	; (8005298 <MX_ADC1_Init+0x22c>)
 80051a4:	4839      	ldr	r0, [pc, #228]	; (800528c <MX_ADC1_Init+0x220>)
 80051a6:	f7ff feb6 	bl	8004f16 <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80051aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80051ae:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 80051b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051b4:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 80051b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ba:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 80051bc:	2300      	movs	r3, #0
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 80051c0:	f107 0318 	add.w	r3, r7, #24
 80051c4:	4619      	mov	r1, r3
 80051c6:	4831      	ldr	r0, [pc, #196]	; (800528c <MX_ADC1_Init+0x220>)
 80051c8:	f7fd fa44 	bl	8002654 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 80051cc:	482f      	ldr	r0, [pc, #188]	; (800528c <MX_ADC1_Init+0x220>)
 80051ce:	f7ff ff0c 	bl	8004fea <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 80051d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051d6:	2101      	movs	r1, #1
 80051d8:	482c      	ldr	r0, [pc, #176]	; (800528c <MX_ADC1_Init+0x220>)
 80051da:	f7ff fe3e 	bl	8004e5a <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 80051de:	2200      	movs	r2, #0
 80051e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051e4:	4829      	ldr	r0, [pc, #164]	; (800528c <MX_ADC1_Init+0x220>)
 80051e6:	f7ff fe96 	bl	8004f16 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 80051ea:	2200      	movs	r2, #0
 80051ec:	2101      	movs	r1, #1
 80051ee:	4827      	ldr	r0, [pc, #156]	; (800528c <MX_ADC1_Init+0x220>)
 80051f0:	f7ff fe69 	bl	8004ec6 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 80051f4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80051f8:	4824      	ldr	r0, [pc, #144]	; (800528c <MX_ADC1_Init+0x220>)
 80051fa:	f7ff fed5 	bl	8004fa8 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 80051fe:	f107 0318 	add.w	r3, r7, #24
 8005202:	4619      	mov	r1, r3
 8005204:	4821      	ldr	r0, [pc, #132]	; (800528c <MX_ADC1_Init+0x220>)
 8005206:	f7fd fa25 	bl	8002654 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 800520a:	4820      	ldr	r0, [pc, #128]	; (800528c <MX_ADC1_Init+0x220>)
 800520c:	f7ff feed 	bl	8004fea <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8005210:	4a22      	ldr	r2, [pc, #136]	; (800529c <MX_ADC1_Init+0x230>)
 8005212:	f241 1102 	movw	r1, #4354	; 0x1102
 8005216:	481d      	ldr	r0, [pc, #116]	; (800528c <MX_ADC1_Init+0x220>)
 8005218:	f7ff fe1f 	bl	8004e5a <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 800521c:	2200      	movs	r2, #0
 800521e:	491f      	ldr	r1, [pc, #124]	; (800529c <MX_ADC1_Init+0x230>)
 8005220:	481a      	ldr	r0, [pc, #104]	; (800528c <MX_ADC1_Init+0x220>)
 8005222:	f7ff fe78 	bl	8004f16 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 8005226:	2200      	movs	r2, #0
 8005228:	f241 1102 	movw	r1, #4354	; 0x1102
 800522c:	4817      	ldr	r0, [pc, #92]	; (800528c <MX_ADC1_Init+0x220>)
 800522e:	f7ff fe4a 	bl	8004ec6 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8005232:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005236:	4815      	ldr	r0, [pc, #84]	; (800528c <MX_ADC1_Init+0x220>)
 8005238:	f7ff feb6 	bl	8004fa8 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 800523c:	f107 0318 	add.w	r3, r7, #24
 8005240:	4619      	mov	r1, r3
 8005242:	4812      	ldr	r0, [pc, #72]	; (800528c <MX_ADC1_Init+0x220>)
 8005244:	f7fd fa06 	bl	8002654 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8005248:	4810      	ldr	r0, [pc, #64]	; (800528c <MX_ADC1_Init+0x220>)
 800524a:	f7ff fece 	bl	8004fea <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 800524e:	220a      	movs	r2, #10
 8005250:	f242 2103 	movw	r1, #8707	; 0x2203
 8005254:	480d      	ldr	r0, [pc, #52]	; (800528c <MX_ADC1_Init+0x220>)
 8005256:	f7ff fe00 	bl	8004e5a <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 800525a:	2200      	movs	r2, #0
 800525c:	210a      	movs	r1, #10
 800525e:	480b      	ldr	r0, [pc, #44]	; (800528c <MX_ADC1_Init+0x220>)
 8005260:	f7ff fe59 	bl	8004f16 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 8005264:	2200      	movs	r2, #0
 8005266:	f242 2103 	movw	r1, #8707	; 0x2203
 800526a:	4808      	ldr	r0, [pc, #32]	; (800528c <MX_ADC1_Init+0x220>)
 800526c:	f7ff fe2b 	bl	8004ec6 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8005270:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005274:	4805      	ldr	r0, [pc, #20]	; (800528c <MX_ADC1_Init+0x220>)
 8005276:	f7ff fe97 	bl	8004fa8 <LL_ADC_INJ_StartConversionExtTrig>

}
 800527a:	bf00      	nop
 800527c:	3758      	adds	r7, #88	; 0x58
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40020800 	.word	0x40020800
 8005288:	40020000 	.word	0x40020000
 800528c:	40012000 	.word	0x40012000
 8005290:	40012300 	.word	0x40012300
 8005294:	02300001 	.word	0x02300001
 8005298:	0060000c 	.word	0x0060000c
 800529c:	0030000b 	.word	0x0030000b

080052a0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b092      	sub	sp, #72	; 0x48
 80052a4:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80052a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	605a      	str	r2, [r3, #4]
 80052b0:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80052b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	605a      	str	r2, [r3, #4]
 80052bc:	609a      	str	r2, [r3, #8]
 80052be:	60da      	str	r2, [r3, #12]
 80052c0:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 80052c2:	f107 0318 	add.w	r3, r7, #24
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	605a      	str	r2, [r3, #4]
 80052cc:	609a      	str	r2, [r3, #8]
 80052ce:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d0:	463b      	mov	r3, r7
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	605a      	str	r2, [r3, #4]
 80052d8:	609a      	str	r2, [r3, #8]
 80052da:	60da      	str	r2, [r3, #12]
 80052dc:	611a      	str	r2, [r3, #16]
 80052de:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 80052e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80052e4:	f7ff feaa 	bl	800503c <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80052e8:	2004      	movs	r0, #4
 80052ea:	f7ff fe8f 	bl	800500c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80052ee:	2001      	movs	r0, #1
 80052f0:	f7ff fe8c 	bl	800500c <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration  
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80052f4:	2303      	movs	r3, #3
 80052f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80052f8:	2303      	movs	r3, #3
 80052fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005300:	463b      	mov	r3, r7
 8005302:	4619      	mov	r1, r3
 8005304:	485e      	ldr	r0, [pc, #376]	; (8005480 <MX_ADC2_Init+0x1e0>)
 8005306:	f7fd fbfe 	bl	8002b06 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800530a:	2301      	movs	r3, #1
 800530c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800530e:	2303      	movs	r3, #3
 8005310:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005312:	2300      	movs	r3, #0
 8005314:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005316:	463b      	mov	r3, r7
 8005318:	4619      	mov	r1, r3
 800531a:	485a      	ldr	r0, [pc, #360]	; (8005484 <MX_ADC2_Init+0x1e4>)
 800531c:	f7fd fbf3 	bl	8002b06 <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8005320:	f7ff fccc 	bl	8004cbc <__NVIC_GetPriorityGrouping>
 8005324:	4603      	mov	r3, r0
 8005326:	2200      	movs	r2, #0
 8005328:	2102      	movs	r1, #2
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff fd1c 	bl	8004d68 <NVIC_EncodePriority>
 8005330:	4603      	mov	r3, r0
 8005332:	4619      	mov	r1, r3
 8005334:	2012      	movs	r0, #18
 8005336:	f7ff fced 	bl	8004d14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 800533a:	2012      	movs	r0, #18
 800533c:	f7ff fccc 	bl	8004cd8 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8005340:	2300      	movs	r3, #0
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8005344:	2300      	movs	r3, #0
 8005346:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8005348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800534c:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 800534e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005352:	4619      	mov	r1, r3
 8005354:	484c      	ldr	r0, [pc, #304]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005356:	f7fd f909 	bl	800256c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800535a:	2300      	movs	r3, #0
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800535e:	2300      	movs	r3, #0
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8005362:	2300      	movs	r3, #0
 8005364:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8005366:	2300      	movs	r3, #0
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800536a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800536e:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8005370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005374:	4619      	mov	r1, r3
 8005376:	4844      	ldr	r0, [pc, #272]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005378:	f7fd f924 	bl	80025c4 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 800537c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005380:	4841      	ldr	r0, [pc, #260]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005382:	f7ff fd57 	bl	8004e34 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 8005386:	4840      	ldr	r0, [pc, #256]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005388:	f7ff fe1f 	bl	8004fca <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 800538c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005394:	483c      	ldr	r0, [pc, #240]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005396:	f7ff fd1a 	bl	8004dce <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 800539a:	2200      	movs	r2, #0
 800539c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053a0:	4839      	ldr	r0, [pc, #228]	; (8005488 <MX_ADC2_Init+0x1e8>)
 80053a2:	f7ff fdb8 	bl	8004f16 <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80053a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80053aa:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 80053ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80053b0:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 80053b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053b6:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 80053b8:	2300      	movs	r3, #0
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 80053bc:	f107 0318 	add.w	r3, r7, #24
 80053c0:	4619      	mov	r1, r3
 80053c2:	4831      	ldr	r0, [pc, #196]	; (8005488 <MX_ADC2_Init+0x1e8>)
 80053c4:	f7fd f946 	bl	8002654 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 80053c8:	482f      	ldr	r0, [pc, #188]	; (8005488 <MX_ADC2_Init+0x1e8>)
 80053ca:	f7ff fe0e 	bl	8004fea <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 80053ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053d2:	2101      	movs	r1, #1
 80053d4:	482c      	ldr	r0, [pc, #176]	; (8005488 <MX_ADC2_Init+0x1e8>)
 80053d6:	f7ff fd40 	bl	8004e5a <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 80053da:	2200      	movs	r2, #0
 80053dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053e0:	4829      	ldr	r0, [pc, #164]	; (8005488 <MX_ADC2_Init+0x1e8>)
 80053e2:	f7ff fd98 	bl	8004f16 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 80053e6:	2200      	movs	r2, #0
 80053e8:	2101      	movs	r1, #1
 80053ea:	4827      	ldr	r0, [pc, #156]	; (8005488 <MX_ADC2_Init+0x1e8>)
 80053ec:	f7ff fd6b 	bl	8004ec6 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 80053f0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80053f4:	4824      	ldr	r0, [pc, #144]	; (8005488 <MX_ADC2_Init+0x1e8>)
 80053f6:	f7ff fdd7 	bl	8004fa8 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 80053fa:	f107 0318 	add.w	r3, r7, #24
 80053fe:	4619      	mov	r1, r3
 8005400:	4821      	ldr	r0, [pc, #132]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005402:	f7fd f927 	bl	8002654 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8005406:	4820      	ldr	r0, [pc, #128]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005408:	f7ff fdef 	bl	8004fea <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 800540c:	4a1f      	ldr	r2, [pc, #124]	; (800548c <MX_ADC2_Init+0x1ec>)
 800540e:	f241 1102 	movw	r1, #4354	; 0x1102
 8005412:	481d      	ldr	r0, [pc, #116]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005414:	f7ff fd21 	bl	8004e5a <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8005418:	2200      	movs	r2, #0
 800541a:	491c      	ldr	r1, [pc, #112]	; (800548c <MX_ADC2_Init+0x1ec>)
 800541c:	481a      	ldr	r0, [pc, #104]	; (8005488 <MX_ADC2_Init+0x1e8>)
 800541e:	f7ff fd7a 	bl	8004f16 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 8005422:	2200      	movs	r2, #0
 8005424:	f241 1102 	movw	r1, #4354	; 0x1102
 8005428:	4817      	ldr	r0, [pc, #92]	; (8005488 <MX_ADC2_Init+0x1e8>)
 800542a:	f7ff fd4c 	bl	8004ec6 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 800542e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005432:	4815      	ldr	r0, [pc, #84]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005434:	f7ff fdb8 	bl	8004fa8 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8005438:	f107 0318 	add.w	r3, r7, #24
 800543c:	4619      	mov	r1, r3
 800543e:	4812      	ldr	r0, [pc, #72]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005440:	f7fd f908 	bl	8002654 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8005444:	4810      	ldr	r0, [pc, #64]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005446:	f7ff fdd0 	bl	8004fea <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 800544a:	220a      	movs	r2, #10
 800544c:	f242 2103 	movw	r1, #8707	; 0x2203
 8005450:	480d      	ldr	r0, [pc, #52]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005452:	f7ff fd02 	bl	8004e5a <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8005456:	2200      	movs	r2, #0
 8005458:	210a      	movs	r1, #10
 800545a:	480b      	ldr	r0, [pc, #44]	; (8005488 <MX_ADC2_Init+0x1e8>)
 800545c:	f7ff fd5b 	bl	8004f16 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 8005460:	2200      	movs	r2, #0
 8005462:	f242 2103 	movw	r1, #8707	; 0x2203
 8005466:	4808      	ldr	r0, [pc, #32]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005468:	f7ff fd2d 	bl	8004ec6 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 800546c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005470:	4805      	ldr	r0, [pc, #20]	; (8005488 <MX_ADC2_Init+0x1e8>)
 8005472:	f7ff fd99 	bl	8004fa8 <LL_ADC_INJ_StartConversionExtTrig>

}
 8005476:	bf00      	nop
 8005478:	3748      	adds	r7, #72	; 0x48
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40020800 	.word	0x40020800
 8005484:	40020000 	.word	0x40020000
 8005488:	40012100 	.word	0x40012100
 800548c:	0030000b 	.word	0x0030000b

08005490 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800549a:	4a13      	ldr	r2, [pc, #76]	; (80054e8 <LL_SYSCFG_SetEXTISource+0x58>)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	3302      	adds	r3, #2
 80054a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	0c1b      	lsrs	r3, r3, #16
 80054aa:	43db      	mvns	r3, r3
 80054ac:	ea02 0103 	and.w	r1, r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	0c1b      	lsrs	r3, r3, #16
 80054b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	fa93 f3a3 	rbit	r3, r3
 80054bc:	60bb      	str	r3, [r7, #8]
  return result;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	fab3 f383 	clz	r3, r3
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	fa03 f202 	lsl.w	r2, r3, r2
 80054ce:	4806      	ldr	r0, [pc, #24]	; (80054e8 <LL_SYSCFG_SetEXTISource+0x58>)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	430a      	orrs	r2, r1
 80054d6:	3302      	adds	r3, #2
 80054d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40013800 	.word	0x40013800

080054ec <LL_GPIO_SetPinMode>:
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	fa93 f3a3 	rbit	r3, r3
 8005506:	613b      	str	r3, [r7, #16]
  return result;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	fab3 f383 	clz	r3, r3
 800550e:	b2db      	uxtb	r3, r3
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	2103      	movs	r1, #3
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	401a      	ands	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	fa93 f3a3 	rbit	r3, r3
 8005526:	61bb      	str	r3, [r7, #24]
  return result;
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	fab3 f383 	clz	r3, r3
 800552e:	b2db      	uxtb	r3, r3
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	fa01 f303 	lsl.w	r3, r1, r3
 8005538:	431a      	orrs	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	601a      	str	r2, [r3, #0]
}
 800553e:	bf00      	nop
 8005540:	3724      	adds	r7, #36	; 0x24
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <LL_GPIO_SetPinPull>:
{
 800554a:	b480      	push	{r7}
 800554c:	b089      	sub	sp, #36	; 0x24
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	fa93 f3a3 	rbit	r3, r3
 8005564:	613b      	str	r3, [r7, #16]
  return result;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	fab3 f383 	clz	r3, r3
 800556c:	b2db      	uxtb	r3, r3
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	2103      	movs	r1, #3
 8005572:	fa01 f303 	lsl.w	r3, r1, r3
 8005576:	43db      	mvns	r3, r3
 8005578:	401a      	ands	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	fa93 f3a3 	rbit	r3, r3
 8005584:	61bb      	str	r3, [r7, #24]
  return result;
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	fab3 f383 	clz	r3, r3
 800558c:	b2db      	uxtb	r3, r3
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	fa01 f303 	lsl.w	r3, r1, r3
 8005596:	431a      	orrs	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	60da      	str	r2, [r3, #12]
}
 800559c:	bf00      	nop
 800559e:	3724      	adds	r7, #36	; 0x24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	041a      	lsls	r2, r3, #16
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	619a      	str	r2, [r3, #24]
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <LL_AHB1_GRP1_EnableClock>:
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80055d0:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80055d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d4:	4907      	ldr	r1, [pc, #28]	; (80055f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4313      	orrs	r3, r2
 80055da:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80055de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4013      	ands	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055e6:	68fb      	ldr	r3, [r7, #12]
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40023800 	.word	0x40023800

080055f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80055fe:	f107 0318 	add.w	r3, r7, #24
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005608:	463b      	mov	r3, r7
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	605a      	str	r2, [r3, #4]
 8005610:	609a      	str	r2, [r3, #8]
 8005612:	60da      	str	r2, [r3, #12]
 8005614:	611a      	str	r2, [r3, #16]
 8005616:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005618:	2004      	movs	r0, #4
 800561a:	f7ff ffd5 	bl	80055c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800561e:	2080      	movs	r0, #128	; 0x80
 8005620:	f7ff ffd2 	bl	80055c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005624:	2001      	movs	r0, #1
 8005626:	f7ff ffcf 	bl	80055c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800562a:	2002      	movs	r0, #2
 800562c:	f7ff ffcc 	bl	80055c8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8005630:	2120      	movs	r1, #32
 8005632:	481a      	ldr	r0, [pc, #104]	; (800569c <MX_GPIO_Init+0xa4>)
 8005634:	f7ff ffb8 	bl	80055a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8005638:	4919      	ldr	r1, [pc, #100]	; (80056a0 <MX_GPIO_Init+0xa8>)
 800563a:	2002      	movs	r0, #2
 800563c:	f7ff ff28 	bl	8005490 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8005640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005644:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8005646:	2301      	movs	r3, #1
 8005648:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800564a:	2300      	movs	r3, #0
 800564c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800564e:	2302      	movs	r3, #2
 8005650:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8005652:	f107 0318 	add.w	r3, r7, #24
 8005656:	4618      	mov	r0, r3
 8005658:	f7fd f8d4 	bl	8002804 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800565c:	2200      	movs	r2, #0
 800565e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005662:	4810      	ldr	r0, [pc, #64]	; (80056a4 <MX_GPIO_Init+0xac>)
 8005664:	f7ff ff71 	bl	800554a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8005668:	2200      	movs	r2, #0
 800566a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800566e:	480d      	ldr	r0, [pc, #52]	; (80056a4 <MX_GPIO_Init+0xac>)
 8005670:	f7ff ff3c 	bl	80054ec <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8005674:	2320      	movs	r3, #32
 8005676:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005678:	2301      	movs	r3, #1
 800567a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800567c:	2300      	movs	r3, #0
 800567e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005688:	463b      	mov	r3, r7
 800568a:	4619      	mov	r1, r3
 800568c:	4803      	ldr	r0, [pc, #12]	; (800569c <MX_GPIO_Init+0xa4>)
 800568e:	f7fd fa3a 	bl	8002b06 <LL_GPIO_Init>

}
 8005692:	bf00      	nop
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40020000 	.word	0x40020000
 80056a0:	00f00003 	.word	0x00f00003
 80056a4:	40020800 	.word	0x40020800

080056a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80056ac:	f7fb fc18 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80056b0:	f000 f80e 	bl	80056d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80056b4:	f7ff ffa0 	bl	80055f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80056b8:	f000 fc48 	bl	8005f4c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80056bc:	f000 fb28 	bl	8005d10 <MX_TIM1_Init>
  MX_ADC1_Init();
 80056c0:	f7ff fcd4 	bl	800506c <MX_ADC1_Init>
  MX_ADC2_Init();
 80056c4:	f7ff fdec 	bl	80052a0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  cppwrapper();
 80056c8:	f000 fd26 	bl	8006118 <cppwrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80056cc:	e7fe      	b.n	80056cc <main+0x24>
	...

080056d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b094      	sub	sp, #80	; 0x50
 80056d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80056d6:	f107 031c 	add.w	r3, r7, #28
 80056da:	2234      	movs	r2, #52	; 0x34
 80056dc:	2100      	movs	r1, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	f002 fa32 	bl	8007b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056e4:	f107 0308 	add.w	r3, r7, #8
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	60da      	str	r2, [r3, #12]
 80056f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80056f4:	2300      	movs	r3, #0
 80056f6:	607b      	str	r3, [r7, #4]
 80056f8:	4b2c      	ldr	r3, [pc, #176]	; (80057ac <SystemClock_Config+0xdc>)
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	4a2b      	ldr	r2, [pc, #172]	; (80057ac <SystemClock_Config+0xdc>)
 80056fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005702:	6413      	str	r3, [r2, #64]	; 0x40
 8005704:	4b29      	ldr	r3, [pc, #164]	; (80057ac <SystemClock_Config+0xdc>)
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570c:	607b      	str	r3, [r7, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005710:	2300      	movs	r3, #0
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	4b26      	ldr	r3, [pc, #152]	; (80057b0 <SystemClock_Config+0xe0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a25      	ldr	r2, [pc, #148]	; (80057b0 <SystemClock_Config+0xe0>)
 800571a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	4b23      	ldr	r3, [pc, #140]	; (80057b0 <SystemClock_Config+0xe0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005728:	603b      	str	r3, [r7, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800572c:	2301      	movs	r3, #1
 800572e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005734:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005736:	2302      	movs	r3, #2
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800573a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800573e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005740:	2304      	movs	r3, #4
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005744:	23b4      	movs	r3, #180	; 0xb4
 8005746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005748:	2302      	movs	r3, #2
 800574a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800574c:	2302      	movs	r3, #2
 800574e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005750:	2302      	movs	r3, #2
 8005752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005754:	f107 031c 	add.w	r3, r7, #28
 8005758:	4618      	mov	r0, r3
 800575a:	f7fc f9d3 	bl	8001b04 <HAL_RCC_OscConfig>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005764:	f000 f826 	bl	80057b4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005768:	f7fb fec6 	bl	80014f8 <HAL_PWREx_EnableOverDrive>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8005772:	f000 f81f 	bl	80057b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005776:	230f      	movs	r3, #15
 8005778:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800577a:	2302      	movs	r3, #2
 800577c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800577e:	2300      	movs	r3, #0
 8005780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005782:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800578c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800578e:	f107 0308 	add.w	r3, r7, #8
 8005792:	2105      	movs	r1, #5
 8005794:	4618      	mov	r0, r3
 8005796:	f7fb feff 	bl	8001598 <HAL_RCC_ClockConfig>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80057a0:	f000 f808 	bl	80057b4 <Error_Handler>
  }
}
 80057a4:	bf00      	nop
 80057a6:	3750      	adds	r7, #80	; 0x50
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40023800 	.word	0x40023800
 80057b0:	40007000 	.word	0x40007000

080057b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80057b8:	bf00      	nop
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
	...

080057c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ca:	2300      	movs	r3, #0
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <HAL_MspInit+0x4c>)
 80057d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d2:	4a0f      	ldr	r2, [pc, #60]	; (8005810 <HAL_MspInit+0x4c>)
 80057d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057d8:	6453      	str	r3, [r2, #68]	; 0x44
 80057da:	4b0d      	ldr	r3, [pc, #52]	; (8005810 <HAL_MspInit+0x4c>)
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057e2:	607b      	str	r3, [r7, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057e6:	2300      	movs	r3, #0
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_MspInit+0x4c>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	4a08      	ldr	r2, [pc, #32]	; (8005810 <HAL_MspInit+0x4c>)
 80057f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f4:	6413      	str	r3, [r2, #64]	; 0x40
 80057f6:	4b06      	ldr	r3, [pc, #24]	; (8005810 <HAL_MspInit+0x4c>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8005802:	2004      	movs	r0, #4
 8005804:	f7fb fcb2 	bl	800116c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40023800 	.word	0x40023800

08005814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005818:	bf00      	nop
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005822:	b480      	push	{r7}
 8005824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005826:	e7fe      	b.n	8005826 <HardFault_Handler+0x4>

08005828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800582c:	e7fe      	b.n	800582c <MemManage_Handler+0x4>

0800582e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800582e:	b480      	push	{r7}
 8005830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005832:	e7fe      	b.n	8005832 <BusFault_Handler+0x4>

08005834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005838:	e7fe      	b.n	8005838 <UsageFault_Handler+0x4>

0800583a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800583a:	b480      	push	{r7}
 800583c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800583e:	bf00      	nop
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800584c:	bf00      	nop
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005856:	b480      	push	{r7}
 8005858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800585a:	bf00      	nop
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005868:	f7fb fb8c 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800586c:	bf00      	nop
 800586e:	bd80      	pop	{r7, pc}

08005870 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	HighFreqTask();
 8005874:	f000 fd50 	bl	8006318 <HighFreqTask>
  /* USER CODE END ADC_IRQn 0 */
  
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005878:	bf00      	nop
 800587a:	bd80      	pop	{r7, pc}

0800587c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005880:	bf00      	nop
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800588a:	b480      	push	{r7}
 800588c:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800588e:	bf00      	nop
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
	return 1;
 800589c:	2301      	movs	r3, #1
}
 800589e:	4618      	mov	r0, r3
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <_kill>:

int _kill(int pid, int sig)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80058b2:	f002 f8eb 	bl	8007a8c <__errno>
 80058b6:	4602      	mov	r2, r0
 80058b8:	2316      	movs	r3, #22
 80058ba:	6013      	str	r3, [r2, #0]
	return -1;
 80058bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <_exit>:

void _exit (int status)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80058d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff ffe7 	bl	80058a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80058da:	e7fe      	b.n	80058da <_exit+0x12>

080058dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80058e4:	4b11      	ldr	r3, [pc, #68]	; (800592c <_sbrk+0x50>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <_sbrk+0x16>
		heap_end = &end;
 80058ec:	4b0f      	ldr	r3, [pc, #60]	; (800592c <_sbrk+0x50>)
 80058ee:	4a10      	ldr	r2, [pc, #64]	; (8005930 <_sbrk+0x54>)
 80058f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80058f2:	4b0e      	ldr	r3, [pc, #56]	; (800592c <_sbrk+0x50>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <_sbrk+0x50>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4413      	add	r3, r2
 8005900:	466a      	mov	r2, sp
 8005902:	4293      	cmp	r3, r2
 8005904:	d907      	bls.n	8005916 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005906:	f002 f8c1 	bl	8007a8c <__errno>
 800590a:	4602      	mov	r2, r0
 800590c:	230c      	movs	r3, #12
 800590e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005914:	e006      	b.n	8005924 <_sbrk+0x48>
	}

	heap_end += incr;
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <_sbrk+0x50>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	4a03      	ldr	r2, [pc, #12]	; (800592c <_sbrk+0x50>)
 8005920:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005922:	68fb      	ldr	r3, [r7, #12]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	200001fc 	.word	0x200001fc
 8005930:	20000308 	.word	0x20000308

08005934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005938:	4b16      	ldr	r3, [pc, #88]	; (8005994 <SystemInit+0x60>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	4a15      	ldr	r2, [pc, #84]	; (8005994 <SystemInit+0x60>)
 8005940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005948:	4b13      	ldr	r3, [pc, #76]	; (8005998 <SystemInit+0x64>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a12      	ldr	r2, [pc, #72]	; (8005998 <SystemInit+0x64>)
 800594e:	f043 0301 	orr.w	r3, r3, #1
 8005952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005954:	4b10      	ldr	r3, [pc, #64]	; (8005998 <SystemInit+0x64>)
 8005956:	2200      	movs	r2, #0
 8005958:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800595a:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <SystemInit+0x64>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a0e      	ldr	r2, [pc, #56]	; (8005998 <SystemInit+0x64>)
 8005960:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005968:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <SystemInit+0x64>)
 800596c:	4a0b      	ldr	r2, [pc, #44]	; (800599c <SystemInit+0x68>)
 800596e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <SystemInit+0x64>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a08      	ldr	r2, [pc, #32]	; (8005998 <SystemInit+0x64>)
 8005976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800597a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <SystemInit+0x64>)
 800597e:	2200      	movs	r2, #0
 8005980:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005982:	4b04      	ldr	r3, [pc, #16]	; (8005994 <SystemInit+0x60>)
 8005984:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005988:	609a      	str	r2, [r3, #8]
#endif
}
 800598a:	bf00      	nop
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	e000ed00 	.word	0xe000ed00
 8005998:	40023800 	.word	0x40023800
 800599c:	24003010 	.word	0x24003010

080059a0 <__NVIC_GetPriorityGrouping>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <__NVIC_GetPriorityGrouping+0x18>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	0a1b      	lsrs	r3, r3, #8
 80059aa:	f003 0307 	and.w	r3, r3, #7
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	e000ed00 	.word	0xe000ed00

080059bc <__NVIC_EnableIRQ>:
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	db0b      	blt.n	80059e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	f003 021f 	and.w	r2, r3, #31
 80059d4:	4907      	ldr	r1, [pc, #28]	; (80059f4 <__NVIC_EnableIRQ+0x38>)
 80059d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	2001      	movs	r0, #1
 80059de:	fa00 f202 	lsl.w	r2, r0, r2
 80059e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	e000e100 	.word	0xe000e100

080059f8 <__NVIC_SetPriority>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	6039      	str	r1, [r7, #0]
 8005a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	db0a      	blt.n	8005a22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	490c      	ldr	r1, [pc, #48]	; (8005a44 <__NVIC_SetPriority+0x4c>)
 8005a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a16:	0112      	lsls	r2, r2, #4
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a20:	e00a      	b.n	8005a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	4908      	ldr	r1, [pc, #32]	; (8005a48 <__NVIC_SetPriority+0x50>)
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	3b04      	subs	r3, #4
 8005a30:	0112      	lsls	r2, r2, #4
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	440b      	add	r3, r1
 8005a36:	761a      	strb	r2, [r3, #24]
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	e000e100 	.word	0xe000e100
 8005a48:	e000ed00 	.word	0xe000ed00

08005a4c <NVIC_EncodePriority>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b089      	sub	sp, #36	; 0x24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f1c3 0307 	rsb	r3, r3, #7
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	bf28      	it	cs
 8005a6a:	2304      	movcs	r3, #4
 8005a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3304      	adds	r3, #4
 8005a72:	2b06      	cmp	r3, #6
 8005a74:	d902      	bls.n	8005a7c <NVIC_EncodePriority+0x30>
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	3b03      	subs	r3, #3
 8005a7a:	e000      	b.n	8005a7e <NVIC_EncodePriority+0x32>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43da      	mvns	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	401a      	ands	r2, r3
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9e:	43d9      	mvns	r1, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aa4:	4313      	orrs	r3, r2
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3724      	adds	r7, #36	; 0x24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <LL_TIM_DisableARRPreload>:
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	601a      	str	r2, [r3, #0]
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <LL_TIM_OC_DisableFast>:
{
 8005ad4:	b4b0      	push	{r4, r5, r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d01c      	beq.n	8005b1e <LL_TIM_OC_DisableFast+0x4a>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d017      	beq.n	8005b1a <LL_TIM_OC_DisableFast+0x46>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d012      	beq.n	8005b16 <LL_TIM_OC_DisableFast+0x42>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d00d      	beq.n	8005b12 <LL_TIM_OC_DisableFast+0x3e>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005afc:	d007      	beq.n	8005b0e <LL_TIM_OC_DisableFast+0x3a>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b04:	d101      	bne.n	8005b0a <LL_TIM_OC_DisableFast+0x36>
 8005b06:	2305      	movs	r3, #5
 8005b08:	e00a      	b.n	8005b20 <LL_TIM_OC_DisableFast+0x4c>
 8005b0a:	2306      	movs	r3, #6
 8005b0c:	e008      	b.n	8005b20 <LL_TIM_OC_DisableFast+0x4c>
 8005b0e:	2304      	movs	r3, #4
 8005b10:	e006      	b.n	8005b20 <LL_TIM_OC_DisableFast+0x4c>
 8005b12:	2303      	movs	r3, #3
 8005b14:	e004      	b.n	8005b20 <LL_TIM_OC_DisableFast+0x4c>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e002      	b.n	8005b20 <LL_TIM_OC_DisableFast+0x4c>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <LL_TIM_OC_DisableFast+0x4c>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3318      	adds	r3, #24
 8005b26:	461a      	mov	r2, r3
 8005b28:	4629      	mov	r1, r5
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <LL_TIM_OC_DisableFast+0x7c>)
 8005b2c:	5c5b      	ldrb	r3, [r3, r1]
 8005b2e:	4413      	add	r3, r2
 8005b30:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8005b32:	6822      	ldr	r2, [r4, #0]
 8005b34:	4629      	mov	r1, r5
 8005b36:	4b07      	ldr	r3, [pc, #28]	; (8005b54 <LL_TIM_OC_DisableFast+0x80>)
 8005b38:	5c5b      	ldrb	r3, [r3, r1]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	408b      	lsls	r3, r1
 8005b40:	43db      	mvns	r3, r3
 8005b42:	4013      	ands	r3, r2
 8005b44:	6023      	str	r3, [r4, #0]
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bcb0      	pop	{r4, r5, r7}
 8005b4e:	4770      	bx	lr
 8005b50:	08009770 	.word	0x08009770
 8005b54:	08009778 	.word	0x08009778

08005b58 <LL_TIM_OC_EnablePreload>:
{
 8005b58:	b4b0      	push	{r4, r5, r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d01c      	beq.n	8005ba2 <LL_TIM_OC_EnablePreload+0x4a>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d017      	beq.n	8005b9e <LL_TIM_OC_EnablePreload+0x46>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b10      	cmp	r3, #16
 8005b72:	d012      	beq.n	8005b9a <LL_TIM_OC_EnablePreload+0x42>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b40      	cmp	r3, #64	; 0x40
 8005b78:	d00d      	beq.n	8005b96 <LL_TIM_OC_EnablePreload+0x3e>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b80:	d007      	beq.n	8005b92 <LL_TIM_OC_EnablePreload+0x3a>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b88:	d101      	bne.n	8005b8e <LL_TIM_OC_EnablePreload+0x36>
 8005b8a:	2305      	movs	r3, #5
 8005b8c:	e00a      	b.n	8005ba4 <LL_TIM_OC_EnablePreload+0x4c>
 8005b8e:	2306      	movs	r3, #6
 8005b90:	e008      	b.n	8005ba4 <LL_TIM_OC_EnablePreload+0x4c>
 8005b92:	2304      	movs	r3, #4
 8005b94:	e006      	b.n	8005ba4 <LL_TIM_OC_EnablePreload+0x4c>
 8005b96:	2303      	movs	r3, #3
 8005b98:	e004      	b.n	8005ba4 <LL_TIM_OC_EnablePreload+0x4c>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e002      	b.n	8005ba4 <LL_TIM_OC_EnablePreload+0x4c>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <LL_TIM_OC_EnablePreload+0x4c>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3318      	adds	r3, #24
 8005baa:	461a      	mov	r2, r3
 8005bac:	4629      	mov	r1, r5
 8005bae:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <LL_TIM_OC_EnablePreload+0x7c>)
 8005bb0:	5c5b      	ldrb	r3, [r3, r1]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005bb6:	6822      	ldr	r2, [r4, #0]
 8005bb8:	4629      	mov	r1, r5
 8005bba:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <LL_TIM_OC_EnablePreload+0x80>)
 8005bbc:	5c5b      	ldrb	r3, [r3, r1]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	2308      	movs	r3, #8
 8005bc2:	408b      	lsls	r3, r1
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	6023      	str	r3, [r4, #0]
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bcb0      	pop	{r4, r5, r7}
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	08009770 	.word	0x08009770
 8005bd8:	08009778 	.word	0x08009778

08005bdc <LL_TIM_SetTriggerOutput>:
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	605a      	str	r2, [r3, #4]
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <LL_TIM_SetSlaveMode>:
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f023 0207 	bic.w	r2, r3, #7
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	609a      	str	r2, [r3, #8]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <LL_TIM_SetTriggerInput>:
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	609a      	str	r2, [r3, #8]
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <LL_TIM_DisableMasterSlaveMode>:
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	609a      	str	r2, [r3, #8]
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <LL_TIM_DisableIT_TRIG>:
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60da      	str	r2, [r3, #12]
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <LL_TIM_DisableDMAReq_TRIG>:
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60da      	str	r2, [r3, #12]
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <LL_AHB1_GRP1_EnableClock>:
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005cb8:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cbc:	4907      	ldr	r1, [pc, #28]	; (8005cdc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005cce:	68fb      	ldr	r3, [r7, #12]
}
 8005cd0:	bf00      	nop
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40023800 	.word	0x40023800

08005ce0 <LL_APB2_GRP1_EnableClock>:
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005ce8:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8005cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cec:	4907      	ldr	r1, [pc, #28]	; (8005d0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8005cf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40023800 	.word	0x40023800

08005d10 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b09a      	sub	sp, #104	; 0x68
 8005d14:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005d16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	605a      	str	r2, [r3, #4]
 8005d20:	609a      	str	r2, [r3, #8]
 8005d22:	60da      	str	r2, [r3, #12]
 8005d24:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005d26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 ff0a 	bl	8007b48 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8005d34:	f107 031c 	add.w	r3, r7, #28
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	609a      	str	r2, [r3, #8]
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	611a      	str	r2, [r3, #16]
 8005d44:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d46:	1d3b      	adds	r3, r7, #4
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	605a      	str	r2, [r3, #4]
 8005d4e:	609a      	str	r2, [r3, #8]
 8005d50:	60da      	str	r2, [r3, #12]
 8005d52:	611a      	str	r2, [r3, #16]
 8005d54:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8005d56:	2001      	movs	r0, #1
 8005d58:	f7ff ffc2 	bl	8005ce0 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	f7ff ffa7 	bl	8005cb0 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration  
  PA6   ------> TIM1_BKIN 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8005d62:	2340      	movs	r3, #64	; 0x40
 8005d64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005d66:	2302      	movs	r3, #2
 8005d68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005d72:	2302      	movs	r3, #2
 8005d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005d76:	2301      	movs	r3, #1
 8005d78:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4871      	ldr	r0, [pc, #452]	; (8005f44 <MX_TIM1_Init+0x234>)
 8005d80:	f7fc fec1 	bl	8002b06 <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 8005d84:	f7ff fe0c 	bl	80059a0 <__NVIC_GetPriorityGrouping>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	2104      	movs	r1, #4
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fe5c 	bl	8005a4c <NVIC_EncodePriority>
 8005d94:	4603      	mov	r3, r0
 8005d96:	4619      	mov	r1, r3
 8005d98:	2018      	movs	r0, #24
 8005d9a:	f7ff fe2d 	bl	80059f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005d9e:	2018      	movs	r0, #24
 8005da0:	f7ff fe0c 	bl	80059bc <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005da4:	f7ff fdfc 	bl	80059a0 <__NVIC_GetPriorityGrouping>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2200      	movs	r2, #0
 8005dac:	2100      	movs	r1, #0
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff fe4c 	bl	8005a4c <NVIC_EncodePriority>
 8005db4:	4603      	mov	r3, r0
 8005db6:	4619      	mov	r1, r3
 8005db8:	2019      	movs	r0, #25
 8005dba:	f7ff fe1d 	bl	80059f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005dbe:	2019      	movs	r0, #25
 8005dc0:	f7ff fdfc 	bl	80059bc <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8005dca:	2320      	movs	r3, #32
 8005dcc:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 8005dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8005dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dd8:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8005de0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005de4:	4619      	mov	r1, r3
 8005de6:	4858      	ldr	r0, [pc, #352]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005de8:	f7fc ff7c 	bl	8002ce4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8005dec:	4856      	ldr	r0, [pc, #344]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005dee:	f7ff fe60 	bl	8005ab2 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8005df2:	2101      	movs	r1, #1
 8005df4:	4854      	ldr	r0, [pc, #336]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005df6:	f7ff feaf 	bl	8005b58 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005dfa:	2360      	movs	r3, #96	; 0x60
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005e12:	2300      	movs	r3, #0
 8005e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005e16:	2300      	movs	r3, #0
 8005e18:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005e1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e1e:	461a      	mov	r2, r3
 8005e20:	2101      	movs	r1, #1
 8005e22:	4849      	ldr	r0, [pc, #292]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005e24:	f7fc fff8 	bl	8002e18 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8005e28:	2101      	movs	r1, #1
 8005e2a:	4847      	ldr	r0, [pc, #284]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005e2c:	f7ff fe52 	bl	8005ad4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8005e30:	2110      	movs	r1, #16
 8005e32:	4845      	ldr	r0, [pc, #276]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005e34:	f7ff fe90 	bl	8005b58 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8005e40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e44:	461a      	mov	r2, r3
 8005e46:	2110      	movs	r1, #16
 8005e48:	483f      	ldr	r0, [pc, #252]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005e4a:	f7fc ffe5 	bl	8002e18 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8005e4e:	2110      	movs	r1, #16
 8005e50:	483d      	ldr	r0, [pc, #244]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005e52:	f7ff fe3f 	bl	8005ad4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8005e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e5a:	483b      	ldr	r0, [pc, #236]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005e5c:	f7ff fe7c 	bl	8005b58 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005e64:	2300      	movs	r3, #0
 8005e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8005e68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e72:	4835      	ldr	r0, [pc, #212]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005e74:	f7fc ffd0 	bl	8002e18 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8005e78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e7c:	4832      	ldr	r0, [pc, #200]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005e7e:	f7ff fe29 	bl	8005ad4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8005e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e86:	4830      	ldr	r0, [pc, #192]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005e88:	f7ff fe66 	bl	8005b58 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8005e8c:	2370      	movs	r3, #112	; 0x70
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005e90:	2300      	movs	r3, #0
 8005e92:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005e94:	2300      	movs	r3, #0
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005e98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ea2:	4829      	ldr	r0, [pc, #164]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005ea4:	f7fc ffb8 	bl	8002e18 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8005ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005eac:	4826      	ldr	r0, [pc, #152]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005eae:	f7ff fe11 	bl	8005ad4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8005eb2:	2110      	movs	r1, #16
 8005eb4:	4824      	ldr	r0, [pc, #144]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005eb6:	f7ff feb7 	bl	8005c28 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8005eba:	2106      	movs	r1, #6
 8005ebc:	4822      	ldr	r0, [pc, #136]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005ebe:	f7ff fea0 	bl	8005c02 <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8005ec2:	4821      	ldr	r0, [pc, #132]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005ec4:	f7ff fed3 	bl	8005c6e <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8005ec8:	481f      	ldr	r0, [pc, #124]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005eca:	f7ff fee0 	bl	8005c8e <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8005ece:	2100      	movs	r1, #0
 8005ed0:	481d      	ldr	r0, [pc, #116]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005ed2:	f7ff fe83 	bl	8005bdc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8005ed6:	481c      	ldr	r0, [pc, #112]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005ed8:	f7ff feb9 	bl	8005c4e <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8005edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ee0:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 8005ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee6:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8005ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8005ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ef8:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8005efa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8005f00:	2300      	movs	r3, #0
 8005f02:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8005f04:	f107 031c 	add.w	r3, r7, #28
 8005f08:	4619      	mov	r1, r3
 8005f0a:	480f      	ldr	r0, [pc, #60]	; (8005f48 <MX_TIM1_Init+0x238>)
 8005f0c:	f7fc ffbc 	bl	8002e88 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005f10:	2001      	movs	r0, #1
 8005f12:	f7ff fecd 	bl	8005cb0 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8005f16:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005f1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005f20:	2302      	movs	r3, #2
 8005f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f30:	1d3b      	adds	r3, r7, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	4803      	ldr	r0, [pc, #12]	; (8005f44 <MX_TIM1_Init+0x234>)
 8005f36:	f7fc fde6 	bl	8002b06 <LL_GPIO_Init>

}
 8005f3a:	bf00      	nop
 8005f3c:	3768      	adds	r7, #104	; 0x68
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40020000 	.word	0x40020000
 8005f48:	40010000 	.word	0x40010000

08005f4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005f50:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <MX_USART2_UART_Init+0x4c>)
 8005f52:	4a12      	ldr	r2, [pc, #72]	; (8005f9c <MX_USART2_UART_Init+0x50>)
 8005f54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005f56:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <MX_USART2_UART_Init+0x4c>)
 8005f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f5e:	4b0e      	ldr	r3, [pc, #56]	; (8005f98 <MX_USART2_UART_Init+0x4c>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <MX_USART2_UART_Init+0x4c>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f6a:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <MX_USART2_UART_Init+0x4c>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f70:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <MX_USART2_UART_Init+0x4c>)
 8005f72:	220c      	movs	r2, #12
 8005f74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f76:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <MX_USART2_UART_Init+0x4c>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <MX_USART2_UART_Init+0x4c>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f82:	4805      	ldr	r0, [pc, #20]	; (8005f98 <MX_USART2_UART_Init+0x4c>)
 8005f84:	f7fc f818 	bl	8001fb8 <HAL_UART_Init>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005f8e:	f7ff fc11 	bl	80057b4 <Error_Handler>
  }

}
 8005f92:	bf00      	nop
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200002c4 	.word	0x200002c4
 8005f9c:	40004400 	.word	0x40004400

08005fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	; 0x28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa8:	f107 0314 	add.w	r3, r7, #20
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	60da      	str	r2, [r3, #12]
 8005fb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a19      	ldr	r2, [pc, #100]	; (8006024 <HAL_UART_MspInit+0x84>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d12b      	bne.n	800601a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	4b18      	ldr	r3, [pc, #96]	; (8006028 <HAL_UART_MspInit+0x88>)
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	4a17      	ldr	r2, [pc, #92]	; (8006028 <HAL_UART_MspInit+0x88>)
 8005fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fd2:	4b15      	ldr	r3, [pc, #84]	; (8006028 <HAL_UART_MspInit+0x88>)
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	4b11      	ldr	r3, [pc, #68]	; (8006028 <HAL_UART_MspInit+0x88>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	4a10      	ldr	r2, [pc, #64]	; (8006028 <HAL_UART_MspInit+0x88>)
 8005fe8:	f043 0301 	orr.w	r3, r3, #1
 8005fec:	6313      	str	r3, [r2, #48]	; 0x30
 8005fee:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <HAL_UART_MspInit+0x88>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005ffa:	230c      	movs	r3, #12
 8005ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ffe:	2302      	movs	r3, #2
 8006000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006002:	2301      	movs	r3, #1
 8006004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006006:	2303      	movs	r3, #3
 8006008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800600a:	2307      	movs	r3, #7
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800600e:	f107 0314 	add.w	r3, r7, #20
 8006012:	4619      	mov	r1, r3
 8006014:	4805      	ldr	r0, [pc, #20]	; (800602c <HAL_UART_MspInit+0x8c>)
 8006016:	f7fb f8dd 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800601a:	bf00      	nop
 800601c:	3728      	adds	r7, #40	; 0x28
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40004400 	.word	0x40004400
 8006028:	40023800 	.word	0x40023800
 800602c:	40020000 	.word	0x40020000

08006030 <LL_ADC_Enable>:
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f043 0201 	orr.w	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	609a      	str	r2, [r3, #8]
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <LL_ADC_INJ_ReadConversionData12>:
{
 8006050:	b490      	push	{r4, r7}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	333c      	adds	r3, #60	; 0x3c
 800605e:	4619      	mov	r1, r3
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006066:	f44f 7240 	mov.w	r2, #768	; 0x300
 800606a:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	fa92 f2a2 	rbit	r2, r2
 8006072:	60ba      	str	r2, [r7, #8]
  return result;
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	fab2 f282 	clz	r2, r2
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	40d3      	lsrs	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	461c      	mov	r4, r3
  return (uint16_t)(READ_BIT(*preg,
 8006084:	6823      	ldr	r3, [r4, #0]
                   );
 8006086:	b29b      	uxth	r3, r3
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bc90      	pop	{r4, r7}
 8006090:	4770      	bx	lr

08006092 <LL_ADC_IsActiveFlag_JEOS>:
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	bf0c      	ite	eq
 80060a6:	2301      	moveq	r3, #1
 80060a8:	2300      	movne	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <LL_ADC_ClearFlag_JEOS>:
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f06f 0204 	mvn.w	r2, #4
 80060c6:	601a      	str	r2, [r3, #0]
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <LL_ADC_EnableIT_JEOS>:
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	605a      	str	r2, [r3, #4]
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <_ZN3PWMC1Ev>:


#ifndef PWM_HPP_
#define PWM_HPP_

class PWM {
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	605a      	str	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	609a      	str	r2, [r3, #8]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <cppwrapper>:
PWM PWM_Object3;
PWM PWM_Object4;

ArgSensor sensor;

void cppwrapper(void){
 8006118:	b580      	push	{r7, lr}
 800611a:	b094      	sub	sp, #80	; 0x50
 800611c:	af00      	add	r7, sp, #0
	MathLib mathlibrary;//三角関数を取得
 800611e:	463b      	mov	r3, r7
 8006120:	4618      	mov	r0, r3
 8006122:	f7fd f921 	bl	8003368 <_ZN7MathLibC1Ev>
	int mathlib_size = 256;//ライブラリのサイズを指定
 8006126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800612a:	64bb      	str	r3, [r7, #72]	; 0x48
	mathlibrary.fInit(mathlib_size);
 800612c:	463b      	mov	r3, r7
 800612e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006130:	4618      	mov	r0, r3
 8006132:	f7fd f979 	bl	8003428 <_ZN7MathLib5fInitEi>

	Motor.setMathLib(mathlibrary);//モータクラスに算術ライブラリを渡す
 8006136:	463a      	mov	r2, r7
 8006138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800613c:	4611      	mov	r1, r2
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe f8de 	bl	8004300 <_ZN7MathLibC1ERKS_>
 8006144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006148:	4619      	mov	r1, r3
 800614a:	4848      	ldr	r0, [pc, #288]	; (800626c <cppwrapper+0x154>)
 800614c:	f7fe f8c9 	bl	80042e2 <_ZN9MotorInfo10setMathLibE7MathLib>
 8006150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006154:	4618      	mov	r0, r3
 8006156:	f7fd f923 	bl	80033a0 <_ZN7MathLibD1Ev>

	PWM_Object1.setTIM(TIM1);
 800615a:	4945      	ldr	r1, [pc, #276]	; (8006270 <cppwrapper+0x158>)
 800615c:	4845      	ldr	r0, [pc, #276]	; (8006274 <cppwrapper+0x15c>)
 800615e:	f7fe fcf2 	bl	8004b46 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 8006162:	4943      	ldr	r1, [pc, #268]	; (8006270 <cppwrapper+0x158>)
 8006164:	4844      	ldr	r0, [pc, #272]	; (8006278 <cppwrapper+0x160>)
 8006166:	f7fe fcee 	bl	8004b46 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 800616a:	4941      	ldr	r1, [pc, #260]	; (8006270 <cppwrapper+0x158>)
 800616c:	4843      	ldr	r0, [pc, #268]	; (800627c <cppwrapper+0x164>)
 800616e:	f7fe fcea 	bl	8004b46 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 8006172:	493f      	ldr	r1, [pc, #252]	; (8006270 <cppwrapper+0x158>)
 8006174:	4842      	ldr	r0, [pc, #264]	; (8006280 <cppwrapper+0x168>)
 8006176:	f7fe fce6 	bl	8004b46 <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 800617a:	2101      	movs	r1, #1
 800617c:	483d      	ldr	r0, [pc, #244]	; (8006274 <cppwrapper+0x15c>)
 800617e:	f7fe fcf0 	bl	8004b62 <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 8006182:	2102      	movs	r1, #2
 8006184:	483c      	ldr	r0, [pc, #240]	; (8006278 <cppwrapper+0x160>)
 8006186:	f7fe fcec 	bl	8004b62 <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 800618a:	2103      	movs	r1, #3
 800618c:	483b      	ldr	r0, [pc, #236]	; (800627c <cppwrapper+0x164>)
 800618e:	f7fe fce8 	bl	8004b62 <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 8006192:	2104      	movs	r1, #4
 8006194:	483a      	ldr	r0, [pc, #232]	; (8006280 <cppwrapper+0x168>)
 8006196:	f7fe fce4 	bl	8004b62 <_ZN3PWM5setCHEi>

	PWM_Object1.fInit(65535);
 800619a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800619e:	4835      	ldr	r0, [pc, #212]	; (8006274 <cppwrapper+0x15c>)
 80061a0:	f7fe fced 	bl	8004b7e <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(65535);
 80061a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061a8:	4833      	ldr	r0, [pc, #204]	; (8006278 <cppwrapper+0x160>)
 80061aa:	f7fe fce8 	bl	8004b7e <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(65535);
 80061ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061b2:	4832      	ldr	r0, [pc, #200]	; (800627c <cppwrapper+0x164>)
 80061b4:	f7fe fce3 	bl	8004b7e <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(65535);
 80061b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061bc:	4830      	ldr	r0, [pc, #192]	; (8006280 <cppwrapper+0x168>)
 80061be:	f7fe fcde 	bl	8004b7e <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 80061c2:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8006284 <cppwrapper+0x16c>
 80061c6:	482b      	ldr	r0, [pc, #172]	; (8006274 <cppwrapper+0x15c>)
 80061c8:	f7fe fd50 	bl	8004c6c <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 80061cc:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8006284 <cppwrapper+0x16c>
 80061d0:	4829      	ldr	r0, [pc, #164]	; (8006278 <cppwrapper+0x160>)
 80061d2:	f7fe fd4b 	bl	8004c6c <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 80061d6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8006284 <cppwrapper+0x16c>
 80061da:	4828      	ldr	r0, [pc, #160]	; (800627c <cppwrapper+0x164>)
 80061dc:	f7fe fd46 	bl	8004c6c <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 80061e0:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8006284 <cppwrapper+0x16c>
 80061e4:	4826      	ldr	r0, [pc, #152]	; (8006280 <cppwrapper+0x168>)
 80061e6:	f7fe fd41 	bl	8004c6c <_ZN3PWM6f2DutyEf>

	ADC_Init();
 80061ea:	f000 f91b 	bl	8006424 <_Z8ADC_Initv>
	while(1){

//		for (const auto& e : mathlibrary.getSinList()) {
//		  //std::cout << e << std::endl;
//		}
		for(int i=0;i<mathlib_size;i++){
 80061ee:	2300      	movs	r3, #0
 80061f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f6:	429a      	cmp	r2, r3
 80061f8:	daf9      	bge.n	80061ee <cppwrapper+0xd6>
			Motor.setArg(i);
 80061fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80061fc:	481b      	ldr	r0, [pc, #108]	; (800626c <cppwrapper+0x154>)
 80061fe:	f7fe f8b6 	bl	800436e <_ZN9MotorInfo6setArgEi>
			Motor.setVd(0);
 8006202:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8006284 <cppwrapper+0x16c>
 8006206:	4819      	ldr	r0, [pc, #100]	; (800626c <cppwrapper+0x154>)
 8006208:	f7fe f8bf 	bl	800438a <_ZN9MotorInfo5setVdEf>
			Motor.setVq(0.5);
 800620c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006210:	4816      	ldr	r0, [pc, #88]	; (800626c <cppwrapper+0x154>)
 8006212:	f7fe f8c9 	bl	80043a8 <_ZN9MotorInfo5setVqEf>
			Motor.invClarkTransform();
 8006216:	4815      	ldr	r0, [pc, #84]	; (800626c <cppwrapper+0x154>)
 8006218:	f7fe f8d5 	bl	80043c6 <_ZN9MotorInfo17invClarkTransformEv>
			Motor.invParkTransform();
 800621c:	4813      	ldr	r0, [pc, #76]	; (800626c <cppwrapper+0x154>)
 800621e:	f7fe f965 	bl	80044ec <_ZN9MotorInfo16invParkTransformEv>

			PWM_Object1.f2Duty(Motor.getVu());
 8006222:	4812      	ldr	r0, [pc, #72]	; (800626c <cppwrapper+0x154>)
 8006224:	f7fe f9aa 	bl	800457c <_ZN9MotorInfo5getVuEv>
 8006228:	eef0 7a40 	vmov.f32	s15, s0
 800622c:	eeb0 0a67 	vmov.f32	s0, s15
 8006230:	4810      	ldr	r0, [pc, #64]	; (8006274 <cppwrapper+0x15c>)
 8006232:	f7fe fd1b 	bl	8004c6c <_ZN3PWM6f2DutyEf>
			PWM_Object2.f2Duty(Motor.getVv());
 8006236:	480d      	ldr	r0, [pc, #52]	; (800626c <cppwrapper+0x154>)
 8006238:	f7fe f9af 	bl	800459a <_ZN9MotorInfo5getVvEv>
 800623c:	eef0 7a40 	vmov.f32	s15, s0
 8006240:	eeb0 0a67 	vmov.f32	s0, s15
 8006244:	480c      	ldr	r0, [pc, #48]	; (8006278 <cppwrapper+0x160>)
 8006246:	f7fe fd11 	bl	8004c6c <_ZN3PWM6f2DutyEf>
			PWM_Object3.f2Duty(Motor.getVw());
 800624a:	4808      	ldr	r0, [pc, #32]	; (800626c <cppwrapper+0x154>)
 800624c:	f7fe f9b4 	bl	80045b8 <_ZN9MotorInfo5getVwEv>
 8006250:	eef0 7a40 	vmov.f32	s15, s0
 8006254:	eeb0 0a67 	vmov.f32	s0, s15
 8006258:	4808      	ldr	r0, [pc, #32]	; (800627c <cppwrapper+0x164>)
 800625a:	f7fe fd07 	bl	8004c6c <_ZN3PWM6f2DutyEf>
			HAL_Delay(10);
 800625e:	200a      	movs	r0, #10
 8006260:	f7fa feb0 	bl	8000fc4 <HAL_Delay>
		for(int i=0;i<mathlib_size;i++){
 8006264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006266:	3301      	adds	r3, #1
 8006268:	64fb      	str	r3, [r7, #76]	; 0x4c
 800626a:	e7c2      	b.n	80061f2 <cppwrapper+0xda>
 800626c:	20000208 	.word	0x20000208
 8006270:	40010000 	.word	0x40010000
 8006274:	2000026c 	.word	0x2000026c
 8006278:	2000027c 	.word	0x2000027c
 800627c:	2000028c 	.word	0x2000028c
 8006280:	2000029c 	.word	0x2000029c
 8006284:	00000000 	.word	0x00000000

08006288 <_Z12MotorPWMTaskiff>:
		}
	}
}

void MotorPWMTask(int pArg, float pVd, float pVq){//パラメータの物理量は将来的に変える
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	ed87 0a02 	vstr	s0, [r7, #8]
 8006294:	edc7 0a01 	vstr	s1, [r7, #4]
	//int mathlib_size = Motor.getMathLib().getLibSize();
	Motor.setArg(pArg);
 8006298:	68f9      	ldr	r1, [r7, #12]
 800629a:	481a      	ldr	r0, [pc, #104]	; (8006304 <_Z12MotorPWMTaskiff+0x7c>)
 800629c:	f7fe f867 	bl	800436e <_ZN9MotorInfo6setArgEi>
	Motor.setVd(pVd);
 80062a0:	ed97 0a02 	vldr	s0, [r7, #8]
 80062a4:	4817      	ldr	r0, [pc, #92]	; (8006304 <_Z12MotorPWMTaskiff+0x7c>)
 80062a6:	f7fe f870 	bl	800438a <_ZN9MotorInfo5setVdEf>
	Motor.setVq(pVq);
 80062aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80062ae:	4815      	ldr	r0, [pc, #84]	; (8006304 <_Z12MotorPWMTaskiff+0x7c>)
 80062b0:	f7fe f87a 	bl	80043a8 <_ZN9MotorInfo5setVqEf>
	Motor.invClarkTransform();
 80062b4:	4813      	ldr	r0, [pc, #76]	; (8006304 <_Z12MotorPWMTaskiff+0x7c>)
 80062b6:	f7fe f886 	bl	80043c6 <_ZN9MotorInfo17invClarkTransformEv>
	Motor.invParkTransform();
 80062ba:	4812      	ldr	r0, [pc, #72]	; (8006304 <_Z12MotorPWMTaskiff+0x7c>)
 80062bc:	f7fe f916 	bl	80044ec <_ZN9MotorInfo16invParkTransformEv>

	PWM_Object1.f2Duty(Motor.getVu());
 80062c0:	4810      	ldr	r0, [pc, #64]	; (8006304 <_Z12MotorPWMTaskiff+0x7c>)
 80062c2:	f7fe f95b 	bl	800457c <_ZN9MotorInfo5getVuEv>
 80062c6:	eef0 7a40 	vmov.f32	s15, s0
 80062ca:	eeb0 0a67 	vmov.f32	s0, s15
 80062ce:	480e      	ldr	r0, [pc, #56]	; (8006308 <_Z12MotorPWMTaskiff+0x80>)
 80062d0:	f7fe fccc 	bl	8004c6c <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(Motor.getVv());
 80062d4:	480b      	ldr	r0, [pc, #44]	; (8006304 <_Z12MotorPWMTaskiff+0x7c>)
 80062d6:	f7fe f960 	bl	800459a <_ZN9MotorInfo5getVvEv>
 80062da:	eef0 7a40 	vmov.f32	s15, s0
 80062de:	eeb0 0a67 	vmov.f32	s0, s15
 80062e2:	480a      	ldr	r0, [pc, #40]	; (800630c <_Z12MotorPWMTaskiff+0x84>)
 80062e4:	f7fe fcc2 	bl	8004c6c <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(Motor.getVw());
 80062e8:	4806      	ldr	r0, [pc, #24]	; (8006304 <_Z12MotorPWMTaskiff+0x7c>)
 80062ea:	f7fe f965 	bl	80045b8 <_ZN9MotorInfo5getVwEv>
 80062ee:	eef0 7a40 	vmov.f32	s15, s0
 80062f2:	eeb0 0a67 	vmov.f32	s0, s15
 80062f6:	4806      	ldr	r0, [pc, #24]	; (8006310 <_Z12MotorPWMTaskiff+0x88>)
 80062f8:	f7fe fcb8 	bl	8004c6c <_ZN3PWM6f2DutyEf>
}
 80062fc:	bf00      	nop
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	20000208 	.word	0x20000208
 8006308:	2000026c 	.word	0x2000026c
 800630c:	2000027c 	.word	0x2000027c
 8006310:	2000028c 	.word	0x2000028c
 8006314:	00000000 	.word	0x00000000

08006318 <HighFreqTask>:



int argnum = 0;
void HighFreqTask(void){
 8006318:	b590      	push	{r4, r7, lr}
 800631a:	b093      	sub	sp, #76	; 0x4c
 800631c:	af00      	add	r7, sp, #0

	if (LL_ADC_IsActiveFlag_JEOS(ADC1) == 1)
 800631e:	483a      	ldr	r0, [pc, #232]	; (8006408 <HighFreqTask+0xf0>)
 8006320:	f7ff feb7 	bl	8006092 <LL_ADC_IsActiveFlag_JEOS>
 8006324:	4603      	mov	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	bf0c      	ite	eq
 800632a:	2301      	moveq	r3, #1
 800632c:	2300      	movne	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d061      	beq.n	80063f8 <HighFreqTask+0xe0>
		{
			LL_ADC_ClearFlag_JEOS(ADC1);
 8006334:	4834      	ldr	r0, [pc, #208]	; (8006408 <HighFreqTask+0xf0>)
 8006336:	f7ff febf 	bl	80060b8 <LL_ADC_ClearFlag_JEOS>
			adc_data1 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1);
 800633a:	2101      	movs	r1, #1
 800633c:	4832      	ldr	r0, [pc, #200]	; (8006408 <HighFreqTask+0xf0>)
 800633e:	f7ff fe87 	bl	8006050 <LL_ADC_INJ_ReadConversionData12>
 8006342:	4603      	mov	r3, r0
 8006344:	461a      	mov	r2, r3
 8006346:	4b31      	ldr	r3, [pc, #196]	; (800640c <HighFreqTask+0xf4>)
 8006348:	801a      	strh	r2, [r3, #0]
			adc_data2 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2);
 800634a:	f241 1102 	movw	r1, #4354	; 0x1102
 800634e:	482e      	ldr	r0, [pc, #184]	; (8006408 <HighFreqTask+0xf0>)
 8006350:	f7ff fe7e 	bl	8006050 <LL_ADC_INJ_ReadConversionData12>
 8006354:	4603      	mov	r3, r0
 8006356:	461a      	mov	r2, r3
 8006358:	4b2d      	ldr	r3, [pc, #180]	; (8006410 <HighFreqTask+0xf8>)
 800635a:	801a      	strh	r2, [r3, #0]
			adc_data3 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3);
 800635c:	f242 2103 	movw	r1, #8707	; 0x2203
 8006360:	4829      	ldr	r0, [pc, #164]	; (8006408 <HighFreqTask+0xf0>)
 8006362:	f7ff fe75 	bl	8006050 <LL_ADC_INJ_ReadConversionData12>
 8006366:	4603      	mov	r3, r0
 8006368:	461a      	mov	r2, r3
 800636a:	4b2a      	ldr	r3, [pc, #168]	; (8006414 <HighFreqTask+0xfc>)
 800636c:	801a      	strh	r2, [r3, #0]


			//位置センサを叩くTask
			sensor.increment((float)2*M_PI / Motor.getMathLib().getLibSize());
 800636e:	463b      	mov	r3, r7
 8006370:	4929      	ldr	r1, [pc, #164]	; (8006418 <HighFreqTask+0x100>)
 8006372:	4618      	mov	r0, r3
 8006374:	f7fd ffec 	bl	8004350 <_ZN9MotorInfo10getMathLibEv>
 8006378:	463b      	mov	r3, r7
 800637a:	4618      	mov	r0, r3
 800637c:	f7fd f88c 	bl	8003498 <_ZN7MathLib10getLibSizeEv>
 8006380:	4603      	mov	r3, r0
 8006382:	4618      	mov	r0, r3
 8006384:	f7fa f89a 	bl	80004bc <__aeabi_i2d>
 8006388:	4603      	mov	r3, r0
 800638a:	460c      	mov	r4, r1
 800638c:	461a      	mov	r2, r3
 800638e:	4623      	mov	r3, r4
 8006390:	a11b      	add	r1, pc, #108	; (adr r1, 8006400 <HighFreqTask+0xe8>)
 8006392:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006396:	f7fa fa25 	bl	80007e4 <__aeabi_ddiv>
 800639a:	4603      	mov	r3, r0
 800639c:	460c      	mov	r4, r1
 800639e:	4618      	mov	r0, r3
 80063a0:	4621      	mov	r1, r4
 80063a2:	f7fa fbcd 	bl	8000b40 <__aeabi_d2f>
 80063a6:	4603      	mov	r3, r0
 80063a8:	ee00 3a10 	vmov	s0, r3
 80063ac:	481b      	ldr	r0, [pc, #108]	; (800641c <HighFreqTask+0x104>)
 80063ae:	f7fc ff8f 	bl	80032d0 <_ZN9ArgSensor9incrementEf>
 80063b2:	463b      	mov	r3, r7
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fc fff3 	bl	80033a0 <_ZN7MathLibD1Ev>
			//float arg = sensor.getArg();

			MotorPWMTask(Motor.getMathLib().radToSizeCount(sensor.getArg()), 0, 0.5f);//暫定で作った関数
 80063ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063be:	4916      	ldr	r1, [pc, #88]	; (8006418 <HighFreqTask+0x100>)
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fd ffc5 	bl	8004350 <_ZN9MotorInfo10getMathLibEv>
 80063c6:	4815      	ldr	r0, [pc, #84]	; (800641c <HighFreqTask+0x104>)
 80063c8:	f7fc ffb2 	bl	8003330 <_ZN9ArgSensor6getArgEv>
 80063cc:	eef0 7a40 	vmov.f32	s15, s0
 80063d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063d4:	eeb0 0a67 	vmov.f32	s0, s15
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fd f927 	bl	800362c <_ZN7MathLib14radToSizeCountEf>
 80063de:	4603      	mov	r3, r0
 80063e0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80063e4:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006420 <HighFreqTask+0x108>
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff ff4d 	bl	8006288 <_Z12MotorPWMTaskiff>
 80063ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fc ffd4 	bl	80033a0 <_ZN7MathLibD1Ev>
		{
			LL_ADC_WriteReg(ADC1,ISR,0);
		}*/


}
 80063f8:	bf00      	nop
 80063fa:	374c      	adds	r7, #76	; 0x4c
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd90      	pop	{r4, r7, pc}
 8006400:	54442d18 	.word	0x54442d18
 8006404:	401921fb 	.word	0x401921fb
 8006408:	40012000 	.word	0x40012000
 800640c:	20000200 	.word	0x20000200
 8006410:	20000202 	.word	0x20000202
 8006414:	20000204 	.word	0x20000204
 8006418:	20000208 	.word	0x20000208
 800641c:	200002ac 	.word	0x200002ac
 8006420:	00000000 	.word	0x00000000

08006424 <_Z8ADC_Initv>:


void ADC_Init()
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
    LL_ADC_Enable( ADC1 );
 8006428:	4805      	ldr	r0, [pc, #20]	; (8006440 <_Z8ADC_Initv+0x1c>)
 800642a:	f7ff fe01 	bl	8006030 <LL_ADC_Enable>
    //LL_ADC_Enable( ADC2 );

    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 800642e:	4804      	ldr	r0, [pc, #16]	; (8006440 <_Z8ADC_Initv+0x1c>)
 8006430:	f7ff fe42 	bl	80060b8 <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 8006434:	4802      	ldr	r0, [pc, #8]	; (8006440 <_Z8ADC_Initv+0x1c>)
 8006436:	f7ff fe4d 	bl	80060d4 <LL_ADC_EnableIT_JEOS>
}
 800643a:	bf00      	nop
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40012000 	.word	0x40012000

08006444 <_Z41__static_initialization_and_destruction_0ii>:
	//Str.push_back(buf2);
	UART uartob;
	uartob.setString(Str);
	uartob.Transmit();
	//HAL_UART_Transmit(huart, pData, Size, Timeout);
}
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d116      	bne.n	8006482 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800645a:	4293      	cmp	r3, r2
 800645c:	d111      	bne.n	8006482 <_Z41__static_initialization_and_destruction_0ii+0x3e>
MotorInfo Motor;
 800645e:	4812      	ldr	r0, [pc, #72]	; (80064a8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8006460:	f7fd fee4 	bl	800422c <_ZN9MotorInfoC1Ev>
PWM PWM_Object1;
 8006464:	4811      	ldr	r0, [pc, #68]	; (80064ac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8006466:	f7ff fe45 	bl	80060f4 <_ZN3PWMC1Ev>
PWM PWM_Object2;
 800646a:	4811      	ldr	r0, [pc, #68]	; (80064b0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800646c:	f7ff fe42 	bl	80060f4 <_ZN3PWMC1Ev>
PWM PWM_Object3;
 8006470:	4810      	ldr	r0, [pc, #64]	; (80064b4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8006472:	f7ff fe3f 	bl	80060f4 <_ZN3PWMC1Ev>
PWM PWM_Object4;
 8006476:	4810      	ldr	r0, [pc, #64]	; (80064b8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8006478:	f7ff fe3c 	bl	80060f4 <_ZN3PWMC1Ev>
ArgSensor sensor;
 800647c:	480f      	ldr	r0, [pc, #60]	; (80064bc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800647e:	f7fc fef1 	bl	8003264 <_ZN9ArgSensorC1Ev>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800648e:	4293      	cmp	r3, r2
 8006490:	d105      	bne.n	800649e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8006492:	480a      	ldr	r0, [pc, #40]	; (80064bc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006494:	f7fc fefa 	bl	800328c <_ZN9ArgSensorD1Ev>
MotorInfo Motor;
 8006498:	4803      	ldr	r0, [pc, #12]	; (80064a8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800649a:	f7fd fedb 	bl	8004254 <_ZN9MotorInfoD1Ev>
}
 800649e:	bf00      	nop
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000208 	.word	0x20000208
 80064ac:	2000026c 	.word	0x2000026c
 80064b0:	2000027c 	.word	0x2000027c
 80064b4:	2000028c 	.word	0x2000028c
 80064b8:	2000029c 	.word	0x2000029c
 80064bc:	200002ac 	.word	0x200002ac

080064c0 <_GLOBAL__sub_I_adc_data1>:
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064c8:	2001      	movs	r0, #1
 80064ca:	f7ff ffbb 	bl	8006444 <_Z41__static_initialization_and_destruction_0ii>
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <_GLOBAL__sub_D_adc_data1>:
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064d8:	2000      	movs	r0, #0
 80064da:	f7ff ffb3 	bl	8006444 <_Z41__static_initialization_and_destruction_0ii>
 80064de:	bd80      	pop	{r7, pc}

080064e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80064e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006518 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80064e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80064e6:	e003      	b.n	80064f0 <LoopCopyDataInit>

080064e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80064e8:	4b0c      	ldr	r3, [pc, #48]	; (800651c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80064ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80064ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80064ee:	3104      	adds	r1, #4

080064f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80064f0:	480b      	ldr	r0, [pc, #44]	; (8006520 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80064f2:	4b0c      	ldr	r3, [pc, #48]	; (8006524 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80064f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80064f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80064f8:	d3f6      	bcc.n	80064e8 <CopyDataInit>
  ldr  r2, =_sbss
 80064fa:	4a0b      	ldr	r2, [pc, #44]	; (8006528 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80064fc:	e002      	b.n	8006504 <LoopFillZerobss>

080064fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80064fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006500:	f842 3b04 	str.w	r3, [r2], #4

08006504 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006504:	4b09      	ldr	r3, [pc, #36]	; (800652c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006506:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006508:	d3f9      	bcc.n	80064fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800650a:	f7ff fa13 	bl	8005934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800650e:	f001 fac3 	bl	8007a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006512:	f7ff f8c9 	bl	80056a8 <main>
  bx  lr    
 8006516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006518:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 800651c:	08009c20 	.word	0x08009c20
  ldr  r0, =_sdata
 8006520:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006524:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8006528:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800652c:	20000308 	.word	0x20000308

08006530 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006530:	e7fe      	b.n	8006530 <CAN1_RX0_IRQHandler>

08006532 <_ZdlPv>:
 8006532:	f001 badd 	b.w	8007af0 <free>

08006536 <_ZdlPvj>:
 8006536:	f7ff bffc 	b.w	8006532 <_ZdlPv>

0800653a <_Znwj>:
 800653a:	b510      	push	{r4, lr}
 800653c:	2800      	cmp	r0, #0
 800653e:	bf14      	ite	ne
 8006540:	4604      	movne	r4, r0
 8006542:	2401      	moveq	r4, #1
 8006544:	4620      	mov	r0, r4
 8006546:	f001 facb 	bl	8007ae0 <malloc>
 800654a:	b930      	cbnz	r0, 800655a <_Znwj+0x20>
 800654c:	f000 f8ba 	bl	80066c4 <_ZSt15get_new_handlerv>
 8006550:	b908      	cbnz	r0, 8006556 <_Znwj+0x1c>
 8006552:	f001 fa94 	bl	8007a7e <abort>
 8006556:	4780      	blx	r0
 8006558:	e7f4      	b.n	8006544 <_Znwj+0xa>
 800655a:	bd10      	pop	{r4, pc}

0800655c <fmodl>:
 800655c:	f000 ba50 	b.w	8006a00 <fmod>

08006560 <_ZSt17__throw_bad_allocv>:
 8006560:	b508      	push	{r3, lr}
 8006562:	f001 fa8c 	bl	8007a7e <abort>

08006566 <_ZSt19__throw_logic_errorPKc>:
 8006566:	b508      	push	{r3, lr}
 8006568:	f001 fa89 	bl	8007a7e <abort>

0800656c <_ZSt20__throw_length_errorPKc>:
 800656c:	b508      	push	{r3, lr}
 800656e:	f001 fa86 	bl	8007a7e <abort>

08006572 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8006572:	b40f      	push	{r0, r1, r2, r3}
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	f107 0410 	add.w	r4, r7, #16
 800657e:	f854 5b04 	ldr.w	r5, [r4], #4
 8006582:	4628      	mov	r0, r5
 8006584:	f7f9 fe40 	bl	8000208 <strlen>
 8006588:	f200 230e 	addw	r3, r0, #526	; 0x20e
 800658c:	f023 0307 	bic.w	r3, r3, #7
 8006590:	ebad 0d03 	sub.w	sp, sp, r3
 8006594:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8006598:	4623      	mov	r3, r4
 800659a:	462a      	mov	r2, r5
 800659c:	4668      	mov	r0, sp
 800659e:	607c      	str	r4, [r7, #4]
 80065a0:	f000 f850 	bl	8006644 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80065a4:	f001 fa6b 	bl	8007a7e <abort>

080065a8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b09c      	sub	sp, #112	; 0x70
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	1a0e      	subs	r6, r1, r0
 80065b0:	4680      	mov	r8, r0
 80065b2:	2269      	movs	r2, #105	; 0x69
 80065b4:	490e      	ldr	r1, [pc, #56]	; (80065f0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80065b6:	1d38      	adds	r0, r7, #4
 80065b8:	f001 faa2 	bl	8007b00 <memcpy>
 80065bc:	f106 0377 	add.w	r3, r6, #119	; 0x77
 80065c0:	f023 0307 	bic.w	r3, r3, #7
 80065c4:	ebad 0d03 	sub.w	sp, sp, r3
 80065c8:	466c      	mov	r4, sp
 80065ca:	2268      	movs	r2, #104	; 0x68
 80065cc:	1d39      	adds	r1, r7, #4
 80065ce:	1c75      	adds	r5, r6, #1
 80065d0:	4620      	mov	r0, r4
 80065d2:	f001 fa95 	bl	8007b00 <memcpy>
 80065d6:	4425      	add	r5, r4
 80065d8:	4632      	mov	r2, r6
 80065da:	4641      	mov	r1, r8
 80065dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80065e0:	f001 fa8e 	bl	8007b00 <memcpy>
 80065e4:	2300      	movs	r3, #0
 80065e6:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 80065ea:	4620      	mov	r0, r4
 80065ec:	f7ff ffbb 	bl	8006566 <_ZSt19__throw_logic_errorPKc>
 80065f0:	0800978a 	.word	0x0800978a

080065f4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	b086      	sub	sp, #24
 80065fa:	466d      	mov	r5, sp
 80065fc:	f105 040c 	add.w	r4, r5, #12
 8006600:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8006640 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8006604:	4623      	mov	r3, r4
 8006606:	f04f 0c0a 	mov.w	ip, #10
 800660a:	fbb2 f6fc 	udiv	r6, r2, ip
 800660e:	fb0c 2216 	mls	r2, ip, r6, r2
 8006612:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8006616:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800661a:	4632      	mov	r2, r6
 800661c:	2e00      	cmp	r6, #0
 800661e:	d1f4      	bne.n	800660a <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8006620:	1ae4      	subs	r4, r4, r3
 8006622:	428c      	cmp	r4, r1
 8006624:	d808      	bhi.n	8006638 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8006626:	f1c4 010c 	rsb	r1, r4, #12
 800662a:	4622      	mov	r2, r4
 800662c:	4429      	add	r1, r5
 800662e:	f001 fa67 	bl	8007b00 <memcpy>
 8006632:	4620      	mov	r0, r4
 8006634:	46bd      	mov	sp, r7
 8006636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006638:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800663c:	e7f9      	b.n	8006632 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 800663e:	bf00      	nop
 8006640:	0800977f 	.word	0x0800977f

08006644 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8006644:	3901      	subs	r1, #1
 8006646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664a:	4606      	mov	r6, r0
 800664c:	4615      	mov	r5, r2
 800664e:	1847      	adds	r7, r0, r1
 8006650:	4604      	mov	r4, r0
 8006652:	782a      	ldrb	r2, [r5, #0]
 8006654:	b392      	cbz	r2, 80066bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 8006656:	42bc      	cmp	r4, r7
 8006658:	d22c      	bcs.n	80066b4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800665a:	2a25      	cmp	r2, #37	; 0x25
 800665c:	d107      	bne.n	800666e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800665e:	786a      	ldrb	r2, [r5, #1]
 8006660:	2a73      	cmp	r2, #115	; 0x73
 8006662:	d009      	beq.n	8006678 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 8006664:	2a7a      	cmp	r2, #122	; 0x7a
 8006666:	d012      	beq.n	800668e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 8006668:	2a25      	cmp	r2, #37	; 0x25
 800666a:	d100      	bne.n	800666e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800666c:	3501      	adds	r5, #1
 800666e:	782a      	ldrb	r2, [r5, #0]
 8006670:	7022      	strb	r2, [r4, #0]
 8006672:	3501      	adds	r5, #1
 8006674:	3401      	adds	r4, #1
 8006676:	e7ec      	b.n	8006652 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8006678:	1d19      	adds	r1, r3, #4
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3b01      	subs	r3, #1
 800667e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006682:	b1a2      	cbz	r2, 80066ae <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 8006684:	42bc      	cmp	r4, r7
 8006686:	d015      	beq.n	80066b4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8006688:	f804 2b01 	strb.w	r2, [r4], #1
 800668c:	e7f7      	b.n	800667e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 800668e:	78aa      	ldrb	r2, [r5, #2]
 8006690:	2a75      	cmp	r2, #117	; 0x75
 8006692:	d1ec      	bne.n	800666e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	1b39      	subs	r1, r7, r4
 8006698:	4620      	mov	r0, r4
 800669a:	f103 0804 	add.w	r8, r3, #4
 800669e:	f7ff ffa9 	bl	80065f4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	dd06      	ble.n	80066b4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80066a6:	4404      	add	r4, r0
 80066a8:	3503      	adds	r5, #3
 80066aa:	4643      	mov	r3, r8
 80066ac:	e7d1      	b.n	8006652 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80066ae:	3502      	adds	r5, #2
 80066b0:	460b      	mov	r3, r1
 80066b2:	e7ce      	b.n	8006652 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80066b4:	4621      	mov	r1, r4
 80066b6:	4630      	mov	r0, r6
 80066b8:	f7ff ff76 	bl	80065a8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80066bc:	7022      	strb	r2, [r4, #0]
 80066be:	1ba0      	subs	r0, r4, r6
 80066c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080066c4 <_ZSt15get_new_handlerv>:
 80066c4:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <_ZSt15get_new_handlerv+0xc>)
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	f3bf 8f5b 	dmb	ish
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	200002b4 	.word	0x200002b4
 80066d4:	00000000 	.word	0x00000000

080066d8 <cos>:
 80066d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066da:	ec51 0b10 	vmov	r0, r1, d0
 80066de:	4a1e      	ldr	r2, [pc, #120]	; (8006758 <cos+0x80>)
 80066e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066e4:	4293      	cmp	r3, r2
 80066e6:	dc06      	bgt.n	80066f6 <cos+0x1e>
 80066e8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006750 <cos+0x78>
 80066ec:	f000 fcf4 	bl	80070d8 <__kernel_cos>
 80066f0:	ec51 0b10 	vmov	r0, r1, d0
 80066f4:	e007      	b.n	8006706 <cos+0x2e>
 80066f6:	4a19      	ldr	r2, [pc, #100]	; (800675c <cos+0x84>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	dd09      	ble.n	8006710 <cos+0x38>
 80066fc:	ee10 2a10 	vmov	r2, s0
 8006700:	460b      	mov	r3, r1
 8006702:	f7f9 fd8d 	bl	8000220 <__aeabi_dsub>
 8006706:	ec41 0b10 	vmov	d0, r0, r1
 800670a:	b005      	add	sp, #20
 800670c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006710:	4668      	mov	r0, sp
 8006712:	f000 faed 	bl	8006cf0 <__ieee754_rem_pio2>
 8006716:	f000 0003 	and.w	r0, r0, #3
 800671a:	2801      	cmp	r0, #1
 800671c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006720:	ed9d 0b00 	vldr	d0, [sp]
 8006724:	d007      	beq.n	8006736 <cos+0x5e>
 8006726:	2802      	cmp	r0, #2
 8006728:	d00e      	beq.n	8006748 <cos+0x70>
 800672a:	2800      	cmp	r0, #0
 800672c:	d0de      	beq.n	80066ec <cos+0x14>
 800672e:	2001      	movs	r0, #1
 8006730:	f001 f8da 	bl	80078e8 <__kernel_sin>
 8006734:	e7dc      	b.n	80066f0 <cos+0x18>
 8006736:	f001 f8d7 	bl	80078e8 <__kernel_sin>
 800673a:	ec53 2b10 	vmov	r2, r3, d0
 800673e:	ee10 0a10 	vmov	r0, s0
 8006742:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006746:	e7de      	b.n	8006706 <cos+0x2e>
 8006748:	f000 fcc6 	bl	80070d8 <__kernel_cos>
 800674c:	e7f5      	b.n	800673a <cos+0x62>
 800674e:	bf00      	nop
	...
 8006758:	3fe921fb 	.word	0x3fe921fb
 800675c:	7fefffff 	.word	0x7fefffff

08006760 <fabs>:
 8006760:	ec51 0b10 	vmov	r0, r1, d0
 8006764:	ee10 2a10 	vmov	r2, s0
 8006768:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800676c:	ec43 2b10 	vmov	d0, r2, r3
 8006770:	4770      	bx	lr
 8006772:	0000      	movs	r0, r0
 8006774:	0000      	movs	r0, r0
	...

08006778 <floor>:
 8006778:	ec51 0b10 	vmov	r0, r1, d0
 800677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006780:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006784:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006788:	2e13      	cmp	r6, #19
 800678a:	460c      	mov	r4, r1
 800678c:	ee10 5a10 	vmov	r5, s0
 8006790:	4680      	mov	r8, r0
 8006792:	dc34      	bgt.n	80067fe <floor+0x86>
 8006794:	2e00      	cmp	r6, #0
 8006796:	da16      	bge.n	80067c6 <floor+0x4e>
 8006798:	a335      	add	r3, pc, #212	; (adr r3, 8006870 <floor+0xf8>)
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	f7f9 fd41 	bl	8000224 <__adddf3>
 80067a2:	2200      	movs	r2, #0
 80067a4:	2300      	movs	r3, #0
 80067a6:	f7fa f983 	bl	8000ab0 <__aeabi_dcmpgt>
 80067aa:	b148      	cbz	r0, 80067c0 <floor+0x48>
 80067ac:	2c00      	cmp	r4, #0
 80067ae:	da59      	bge.n	8006864 <floor+0xec>
 80067b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80067b4:	4a30      	ldr	r2, [pc, #192]	; (8006878 <floor+0x100>)
 80067b6:	432b      	orrs	r3, r5
 80067b8:	2500      	movs	r5, #0
 80067ba:	42ab      	cmp	r3, r5
 80067bc:	bf18      	it	ne
 80067be:	4614      	movne	r4, r2
 80067c0:	4621      	mov	r1, r4
 80067c2:	4628      	mov	r0, r5
 80067c4:	e025      	b.n	8006812 <floor+0x9a>
 80067c6:	4f2d      	ldr	r7, [pc, #180]	; (800687c <floor+0x104>)
 80067c8:	4137      	asrs	r7, r6
 80067ca:	ea01 0307 	and.w	r3, r1, r7
 80067ce:	4303      	orrs	r3, r0
 80067d0:	d01f      	beq.n	8006812 <floor+0x9a>
 80067d2:	a327      	add	r3, pc, #156	; (adr r3, 8006870 <floor+0xf8>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f7f9 fd24 	bl	8000224 <__adddf3>
 80067dc:	2200      	movs	r2, #0
 80067de:	2300      	movs	r3, #0
 80067e0:	f7fa f966 	bl	8000ab0 <__aeabi_dcmpgt>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d0eb      	beq.n	80067c0 <floor+0x48>
 80067e8:	2c00      	cmp	r4, #0
 80067ea:	bfbe      	ittt	lt
 80067ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80067f0:	fa43 f606 	asrlt.w	r6, r3, r6
 80067f4:	19a4      	addlt	r4, r4, r6
 80067f6:	ea24 0407 	bic.w	r4, r4, r7
 80067fa:	2500      	movs	r5, #0
 80067fc:	e7e0      	b.n	80067c0 <floor+0x48>
 80067fe:	2e33      	cmp	r6, #51	; 0x33
 8006800:	dd0b      	ble.n	800681a <floor+0xa2>
 8006802:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006806:	d104      	bne.n	8006812 <floor+0x9a>
 8006808:	ee10 2a10 	vmov	r2, s0
 800680c:	460b      	mov	r3, r1
 800680e:	f7f9 fd09 	bl	8000224 <__adddf3>
 8006812:	ec41 0b10 	vmov	d0, r0, r1
 8006816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800681a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800681e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006822:	fa23 f707 	lsr.w	r7, r3, r7
 8006826:	4207      	tst	r7, r0
 8006828:	d0f3      	beq.n	8006812 <floor+0x9a>
 800682a:	a311      	add	r3, pc, #68	; (adr r3, 8006870 <floor+0xf8>)
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	f7f9 fcf8 	bl	8000224 <__adddf3>
 8006834:	2200      	movs	r2, #0
 8006836:	2300      	movs	r3, #0
 8006838:	f7fa f93a 	bl	8000ab0 <__aeabi_dcmpgt>
 800683c:	2800      	cmp	r0, #0
 800683e:	d0bf      	beq.n	80067c0 <floor+0x48>
 8006840:	2c00      	cmp	r4, #0
 8006842:	da02      	bge.n	800684a <floor+0xd2>
 8006844:	2e14      	cmp	r6, #20
 8006846:	d103      	bne.n	8006850 <floor+0xd8>
 8006848:	3401      	adds	r4, #1
 800684a:	ea25 0507 	bic.w	r5, r5, r7
 800684e:	e7b7      	b.n	80067c0 <floor+0x48>
 8006850:	2301      	movs	r3, #1
 8006852:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006856:	fa03 f606 	lsl.w	r6, r3, r6
 800685a:	4435      	add	r5, r6
 800685c:	4545      	cmp	r5, r8
 800685e:	bf38      	it	cc
 8006860:	18e4      	addcc	r4, r4, r3
 8006862:	e7f2      	b.n	800684a <floor+0xd2>
 8006864:	2500      	movs	r5, #0
 8006866:	462c      	mov	r4, r5
 8006868:	e7aa      	b.n	80067c0 <floor+0x48>
 800686a:	bf00      	nop
 800686c:	f3af 8000 	nop.w
 8006870:	8800759c 	.word	0x8800759c
 8006874:	7e37e43c 	.word	0x7e37e43c
 8006878:	bff00000 	.word	0xbff00000
 800687c:	000fffff 	.word	0x000fffff

08006880 <scalbn>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	ec55 4b10 	vmov	r4, r5, d0
 8006886:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800688a:	4606      	mov	r6, r0
 800688c:	462b      	mov	r3, r5
 800688e:	b9aa      	cbnz	r2, 80068bc <scalbn+0x3c>
 8006890:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006894:	4323      	orrs	r3, r4
 8006896:	d03b      	beq.n	8006910 <scalbn+0x90>
 8006898:	4b31      	ldr	r3, [pc, #196]	; (8006960 <scalbn+0xe0>)
 800689a:	4629      	mov	r1, r5
 800689c:	2200      	movs	r2, #0
 800689e:	ee10 0a10 	vmov	r0, s0
 80068a2:	f7f9 fe75 	bl	8000590 <__aeabi_dmul>
 80068a6:	4b2f      	ldr	r3, [pc, #188]	; (8006964 <scalbn+0xe4>)
 80068a8:	429e      	cmp	r6, r3
 80068aa:	4604      	mov	r4, r0
 80068ac:	460d      	mov	r5, r1
 80068ae:	da12      	bge.n	80068d6 <scalbn+0x56>
 80068b0:	a327      	add	r3, pc, #156	; (adr r3, 8006950 <scalbn+0xd0>)
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f7f9 fe6b 	bl	8000590 <__aeabi_dmul>
 80068ba:	e009      	b.n	80068d0 <scalbn+0x50>
 80068bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80068c0:	428a      	cmp	r2, r1
 80068c2:	d10c      	bne.n	80068de <scalbn+0x5e>
 80068c4:	ee10 2a10 	vmov	r2, s0
 80068c8:	4620      	mov	r0, r4
 80068ca:	4629      	mov	r1, r5
 80068cc:	f7f9 fcaa 	bl	8000224 <__adddf3>
 80068d0:	4604      	mov	r4, r0
 80068d2:	460d      	mov	r5, r1
 80068d4:	e01c      	b.n	8006910 <scalbn+0x90>
 80068d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80068da:	460b      	mov	r3, r1
 80068dc:	3a36      	subs	r2, #54	; 0x36
 80068de:	4432      	add	r2, r6
 80068e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80068e4:	428a      	cmp	r2, r1
 80068e6:	dd0b      	ble.n	8006900 <scalbn+0x80>
 80068e8:	ec45 4b11 	vmov	d1, r4, r5
 80068ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006958 <scalbn+0xd8>
 80068f0:	f001 f8b4 	bl	8007a5c <copysign>
 80068f4:	a318      	add	r3, pc, #96	; (adr r3, 8006958 <scalbn+0xd8>)
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	ec51 0b10 	vmov	r0, r1, d0
 80068fe:	e7da      	b.n	80068b6 <scalbn+0x36>
 8006900:	2a00      	cmp	r2, #0
 8006902:	dd08      	ble.n	8006916 <scalbn+0x96>
 8006904:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006908:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800690c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006910:	ec45 4b10 	vmov	d0, r4, r5
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800691a:	da0d      	bge.n	8006938 <scalbn+0xb8>
 800691c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006920:	429e      	cmp	r6, r3
 8006922:	ec45 4b11 	vmov	d1, r4, r5
 8006926:	dce1      	bgt.n	80068ec <scalbn+0x6c>
 8006928:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006950 <scalbn+0xd0>
 800692c:	f001 f896 	bl	8007a5c <copysign>
 8006930:	a307      	add	r3, pc, #28	; (adr r3, 8006950 <scalbn+0xd0>)
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	e7e0      	b.n	80068fa <scalbn+0x7a>
 8006938:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800693c:	3236      	adds	r2, #54	; 0x36
 800693e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006942:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006946:	4620      	mov	r0, r4
 8006948:	4629      	mov	r1, r5
 800694a:	2200      	movs	r2, #0
 800694c:	4b06      	ldr	r3, [pc, #24]	; (8006968 <scalbn+0xe8>)
 800694e:	e7b2      	b.n	80068b6 <scalbn+0x36>
 8006950:	c2f8f359 	.word	0xc2f8f359
 8006954:	01a56e1f 	.word	0x01a56e1f
 8006958:	8800759c 	.word	0x8800759c
 800695c:	7e37e43c 	.word	0x7e37e43c
 8006960:	43500000 	.word	0x43500000
 8006964:	ffff3cb0 	.word	0xffff3cb0
 8006968:	3c900000 	.word	0x3c900000
 800696c:	00000000 	.word	0x00000000

08006970 <sin>:
 8006970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006972:	ec51 0b10 	vmov	r0, r1, d0
 8006976:	4a20      	ldr	r2, [pc, #128]	; (80069f8 <sin+0x88>)
 8006978:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800697c:	4293      	cmp	r3, r2
 800697e:	dc07      	bgt.n	8006990 <sin+0x20>
 8006980:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80069f0 <sin+0x80>
 8006984:	2000      	movs	r0, #0
 8006986:	f000 ffaf 	bl	80078e8 <__kernel_sin>
 800698a:	ec51 0b10 	vmov	r0, r1, d0
 800698e:	e007      	b.n	80069a0 <sin+0x30>
 8006990:	4a1a      	ldr	r2, [pc, #104]	; (80069fc <sin+0x8c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	dd09      	ble.n	80069aa <sin+0x3a>
 8006996:	ee10 2a10 	vmov	r2, s0
 800699a:	460b      	mov	r3, r1
 800699c:	f7f9 fc40 	bl	8000220 <__aeabi_dsub>
 80069a0:	ec41 0b10 	vmov	d0, r0, r1
 80069a4:	b005      	add	sp, #20
 80069a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80069aa:	4668      	mov	r0, sp
 80069ac:	f000 f9a0 	bl	8006cf0 <__ieee754_rem_pio2>
 80069b0:	f000 0003 	and.w	r0, r0, #3
 80069b4:	2801      	cmp	r0, #1
 80069b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069ba:	ed9d 0b00 	vldr	d0, [sp]
 80069be:	d004      	beq.n	80069ca <sin+0x5a>
 80069c0:	2802      	cmp	r0, #2
 80069c2:	d005      	beq.n	80069d0 <sin+0x60>
 80069c4:	b970      	cbnz	r0, 80069e4 <sin+0x74>
 80069c6:	2001      	movs	r0, #1
 80069c8:	e7dd      	b.n	8006986 <sin+0x16>
 80069ca:	f000 fb85 	bl	80070d8 <__kernel_cos>
 80069ce:	e7dc      	b.n	800698a <sin+0x1a>
 80069d0:	2001      	movs	r0, #1
 80069d2:	f000 ff89 	bl	80078e8 <__kernel_sin>
 80069d6:	ec53 2b10 	vmov	r2, r3, d0
 80069da:	ee10 0a10 	vmov	r0, s0
 80069de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80069e2:	e7dd      	b.n	80069a0 <sin+0x30>
 80069e4:	f000 fb78 	bl	80070d8 <__kernel_cos>
 80069e8:	e7f5      	b.n	80069d6 <sin+0x66>
 80069ea:	bf00      	nop
 80069ec:	f3af 8000 	nop.w
	...
 80069f8:	3fe921fb 	.word	0x3fe921fb
 80069fc:	7fefffff 	.word	0x7fefffff

08006a00 <fmod>:
 8006a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a04:	ed2d 8b02 	vpush	{d8}
 8006a08:	b08b      	sub	sp, #44	; 0x2c
 8006a0a:	ec55 4b10 	vmov	r4, r5, d0
 8006a0e:	ec57 6b11 	vmov	r6, r7, d1
 8006a12:	f000 f859 	bl	8006ac8 <__ieee754_fmod>
 8006a16:	4b2a      	ldr	r3, [pc, #168]	; (8006ac0 <fmod+0xc0>)
 8006a18:	eeb0 8a40 	vmov.f32	s16, s0
 8006a1c:	eef0 8a60 	vmov.f32	s17, s1
 8006a20:	f993 8000 	ldrsb.w	r8, [r3]
 8006a24:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8006a28:	d030      	beq.n	8006a8c <fmod+0x8c>
 8006a2a:	4632      	mov	r2, r6
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	4630      	mov	r0, r6
 8006a30:	4639      	mov	r1, r7
 8006a32:	f7fa f847 	bl	8000ac4 <__aeabi_dcmpun>
 8006a36:	bb48      	cbnz	r0, 8006a8c <fmod+0x8c>
 8006a38:	4622      	mov	r2, r4
 8006a3a:	462b      	mov	r3, r5
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	4629      	mov	r1, r5
 8006a40:	f7fa f840 	bl	8000ac4 <__aeabi_dcmpun>
 8006a44:	4681      	mov	r9, r0
 8006a46:	bb08      	cbnz	r0, 8006a8c <fmod+0x8c>
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	4639      	mov	r1, r7
 8006a50:	f7fa f806 	bl	8000a60 <__aeabi_dcmpeq>
 8006a54:	b1d0      	cbz	r0, 8006a8c <fmod+0x8c>
 8006a56:	2301      	movs	r3, #1
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	4b1a      	ldr	r3, [pc, #104]	; (8006ac4 <fmod+0xc4>)
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006a62:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006a66:	f8cd 9020 	str.w	r9, [sp, #32]
 8006a6a:	f1b8 0f00 	cmp.w	r8, #0
 8006a6e:	d116      	bne.n	8006a9e <fmod+0x9e>
 8006a70:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006a74:	4668      	mov	r0, sp
 8006a76:	f001 f800 	bl	8007a7a <matherr>
 8006a7a:	b1d8      	cbz	r0, 8006ab4 <fmod+0xb4>
 8006a7c:	9b08      	ldr	r3, [sp, #32]
 8006a7e:	b11b      	cbz	r3, 8006a88 <fmod+0x88>
 8006a80:	f001 f804 	bl	8007a8c <__errno>
 8006a84:	9b08      	ldr	r3, [sp, #32]
 8006a86:	6003      	str	r3, [r0, #0]
 8006a88:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006a8c:	eeb0 0a48 	vmov.f32	s0, s16
 8006a90:	eef0 0a68 	vmov.f32	s1, s17
 8006a94:	b00b      	add	sp, #44	; 0x2c
 8006a96:	ecbd 8b02 	vpop	{d8}
 8006a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	f7f9 fe9d 	bl	80007e4 <__aeabi_ddiv>
 8006aaa:	f1b8 0f02 	cmp.w	r8, #2
 8006aae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ab2:	d1df      	bne.n	8006a74 <fmod+0x74>
 8006ab4:	f000 ffea 	bl	8007a8c <__errno>
 8006ab8:	2321      	movs	r3, #33	; 0x21
 8006aba:	6003      	str	r3, [r0, #0]
 8006abc:	e7de      	b.n	8006a7c <fmod+0x7c>
 8006abe:	bf00      	nop
 8006ac0:	2000000c 	.word	0x2000000c
 8006ac4:	080097f3 	.word	0x080097f3

08006ac8 <__ieee754_fmod>:
 8006ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006acc:	ec53 2b11 	vmov	r2, r3, d1
 8006ad0:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8006ad4:	ea5e 0402 	orrs.w	r4, lr, r2
 8006ad8:	ec51 0b10 	vmov	r0, r1, d0
 8006adc:	461e      	mov	r6, r3
 8006ade:	ee11 5a10 	vmov	r5, s2
 8006ae2:	4694      	mov	ip, r2
 8006ae4:	d00c      	beq.n	8006b00 <__ieee754_fmod+0x38>
 8006ae6:	4c7a      	ldr	r4, [pc, #488]	; (8006cd0 <__ieee754_fmod+0x208>)
 8006ae8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8006aec:	45a0      	cmp	r8, r4
 8006aee:	4689      	mov	r9, r1
 8006af0:	dc06      	bgt.n	8006b00 <__ieee754_fmod+0x38>
 8006af2:	4254      	negs	r4, r2
 8006af4:	4314      	orrs	r4, r2
 8006af6:	4f77      	ldr	r7, [pc, #476]	; (8006cd4 <__ieee754_fmod+0x20c>)
 8006af8:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8006afc:	42bc      	cmp	r4, r7
 8006afe:	d909      	bls.n	8006b14 <__ieee754_fmod+0x4c>
 8006b00:	f7f9 fd46 	bl	8000590 <__aeabi_dmul>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	f7f9 fe6c 	bl	80007e4 <__aeabi_ddiv>
 8006b0c:	ec41 0b10 	vmov	d0, r0, r1
 8006b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b14:	45f0      	cmp	r8, lr
 8006b16:	ee10 2a10 	vmov	r2, s0
 8006b1a:	4607      	mov	r7, r0
 8006b1c:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8006b20:	dc0a      	bgt.n	8006b38 <__ieee754_fmod+0x70>
 8006b22:	dbf3      	blt.n	8006b0c <__ieee754_fmod+0x44>
 8006b24:	42a8      	cmp	r0, r5
 8006b26:	d3f1      	bcc.n	8006b0c <__ieee754_fmod+0x44>
 8006b28:	d106      	bne.n	8006b38 <__ieee754_fmod+0x70>
 8006b2a:	496b      	ldr	r1, [pc, #428]	; (8006cd8 <__ieee754_fmod+0x210>)
 8006b2c:	0fe4      	lsrs	r4, r4, #31
 8006b2e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8006b32:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006b36:	e7e9      	b.n	8006b0c <__ieee754_fmod+0x44>
 8006b38:	4b68      	ldr	r3, [pc, #416]	; (8006cdc <__ieee754_fmod+0x214>)
 8006b3a:	4598      	cmp	r8, r3
 8006b3c:	dc49      	bgt.n	8006bd2 <__ieee754_fmod+0x10a>
 8006b3e:	f1b8 0f00 	cmp.w	r8, #0
 8006b42:	d13d      	bne.n	8006bc0 <__ieee754_fmod+0xf8>
 8006b44:	4866      	ldr	r0, [pc, #408]	; (8006ce0 <__ieee754_fmod+0x218>)
 8006b46:	4611      	mov	r1, r2
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	dc36      	bgt.n	8006bba <__ieee754_fmod+0xf2>
 8006b4c:	459e      	cmp	lr, r3
 8006b4e:	dc51      	bgt.n	8006bf4 <__ieee754_fmod+0x12c>
 8006b50:	f1be 0f00 	cmp.w	lr, #0
 8006b54:	d145      	bne.n	8006be2 <__ieee754_fmod+0x11a>
 8006b56:	4b62      	ldr	r3, [pc, #392]	; (8006ce0 <__ieee754_fmod+0x218>)
 8006b58:	4629      	mov	r1, r5
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	dc3e      	bgt.n	8006bdc <__ieee754_fmod+0x114>
 8006b5e:	4961      	ldr	r1, [pc, #388]	; (8006ce4 <__ieee754_fmod+0x21c>)
 8006b60:	4288      	cmp	r0, r1
 8006b62:	db4c      	blt.n	8006bfe <__ieee754_fmod+0x136>
 8006b64:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8006b68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006b6c:	4a5d      	ldr	r2, [pc, #372]	; (8006ce4 <__ieee754_fmod+0x21c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	db59      	blt.n	8006c26 <__ieee754_fmod+0x15e>
 8006b72:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8006b76:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8006b7a:	1ac0      	subs	r0, r0, r3
 8006b7c:	1b8a      	subs	r2, r1, r6
 8006b7e:	eba7 050c 	sub.w	r5, r7, ip
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d166      	bne.n	8006c54 <__ieee754_fmod+0x18c>
 8006b86:	4567      	cmp	r7, ip
 8006b88:	bf38      	it	cc
 8006b8a:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	bfbc      	itt	lt
 8006b92:	463d      	movlt	r5, r7
 8006b94:	460a      	movlt	r2, r1
 8006b96:	ea52 0105 	orrs.w	r1, r2, r5
 8006b9a:	d0c6      	beq.n	8006b2a <__ieee754_fmod+0x62>
 8006b9c:	494f      	ldr	r1, [pc, #316]	; (8006cdc <__ieee754_fmod+0x214>)
 8006b9e:	428a      	cmp	r2, r1
 8006ba0:	dd6d      	ble.n	8006c7e <__ieee754_fmod+0x1b6>
 8006ba2:	4950      	ldr	r1, [pc, #320]	; (8006ce4 <__ieee754_fmod+0x21c>)
 8006ba4:	428b      	cmp	r3, r1
 8006ba6:	db70      	blt.n	8006c8a <__ieee754_fmod+0x1c2>
 8006ba8:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8006bac:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8006bb0:	4314      	orrs	r4, r2
 8006bb2:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	e7a8      	b.n	8006b0c <__ieee754_fmod+0x44>
 8006bba:	3801      	subs	r0, #1
 8006bbc:	0049      	lsls	r1, r1, #1
 8006bbe:	e7c3      	b.n	8006b48 <__ieee754_fmod+0x80>
 8006bc0:	4848      	ldr	r0, [pc, #288]	; (8006ce4 <__ieee754_fmod+0x21c>)
 8006bc2:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8006bc6:	0049      	lsls	r1, r1, #1
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8006bce:	dcfa      	bgt.n	8006bc6 <__ieee754_fmod+0xfe>
 8006bd0:	e7bc      	b.n	8006b4c <__ieee754_fmod+0x84>
 8006bd2:	ea4f 5028 	mov.w	r0, r8, asr #20
 8006bd6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8006bda:	e7b7      	b.n	8006b4c <__ieee754_fmod+0x84>
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	0049      	lsls	r1, r1, #1
 8006be0:	e7bb      	b.n	8006b5a <__ieee754_fmod+0x92>
 8006be2:	4b40      	ldr	r3, [pc, #256]	; (8006ce4 <__ieee754_fmod+0x21c>)
 8006be4:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8006be8:	0049      	lsls	r1, r1, #1
 8006bea:	2900      	cmp	r1, #0
 8006bec:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006bf0:	dcfa      	bgt.n	8006be8 <__ieee754_fmod+0x120>
 8006bf2:	e7b4      	b.n	8006b5e <__ieee754_fmod+0x96>
 8006bf4:	ea4f 532e 	mov.w	r3, lr, asr #20
 8006bf8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006bfc:	e7af      	b.n	8006b5e <__ieee754_fmod+0x96>
 8006bfe:	1a0f      	subs	r7, r1, r0
 8006c00:	2f1f      	cmp	r7, #31
 8006c02:	dc0a      	bgt.n	8006c1a <__ieee754_fmod+0x152>
 8006c04:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8006c08:	fa08 f807 	lsl.w	r8, r8, r7
 8006c0c:	fa22 f101 	lsr.w	r1, r2, r1
 8006c10:	ea41 0108 	orr.w	r1, r1, r8
 8006c14:	fa02 f707 	lsl.w	r7, r2, r7
 8006c18:	e7a8      	b.n	8006b6c <__ieee754_fmod+0xa4>
 8006c1a:	4933      	ldr	r1, [pc, #204]	; (8006ce8 <__ieee754_fmod+0x220>)
 8006c1c:	1a09      	subs	r1, r1, r0
 8006c1e:	fa02 f101 	lsl.w	r1, r2, r1
 8006c22:	2700      	movs	r7, #0
 8006c24:	e7a2      	b.n	8006b6c <__ieee754_fmod+0xa4>
 8006c26:	eba2 0c03 	sub.w	ip, r2, r3
 8006c2a:	f1bc 0f1f 	cmp.w	ip, #31
 8006c2e:	dc0a      	bgt.n	8006c46 <__ieee754_fmod+0x17e>
 8006c30:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8006c34:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006c38:	fa25 f606 	lsr.w	r6, r5, r6
 8006c3c:	ea46 060e 	orr.w	r6, r6, lr
 8006c40:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006c44:	e799      	b.n	8006b7a <__ieee754_fmod+0xb2>
 8006c46:	4e28      	ldr	r6, [pc, #160]	; (8006ce8 <__ieee754_fmod+0x220>)
 8006c48:	1af6      	subs	r6, r6, r3
 8006c4a:	fa05 f606 	lsl.w	r6, r5, r6
 8006c4e:	f04f 0c00 	mov.w	ip, #0
 8006c52:	e792      	b.n	8006b7a <__ieee754_fmod+0xb2>
 8006c54:	4567      	cmp	r7, ip
 8006c56:	bf38      	it	cc
 8006c58:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8006c5c:	2a00      	cmp	r2, #0
 8006c5e:	da05      	bge.n	8006c6c <__ieee754_fmod+0x1a4>
 8006c60:	0ffa      	lsrs	r2, r7, #31
 8006c62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006c66:	007f      	lsls	r7, r7, #1
 8006c68:	3801      	subs	r0, #1
 8006c6a:	e787      	b.n	8006b7c <__ieee754_fmod+0xb4>
 8006c6c:	ea52 0105 	orrs.w	r1, r2, r5
 8006c70:	f43f af5b 	beq.w	8006b2a <__ieee754_fmod+0x62>
 8006c74:	0fe9      	lsrs	r1, r5, #31
 8006c76:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8006c7a:	006f      	lsls	r7, r5, #1
 8006c7c:	e7f4      	b.n	8006c68 <__ieee754_fmod+0x1a0>
 8006c7e:	0fe8      	lsrs	r0, r5, #31
 8006c80:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006c84:	006d      	lsls	r5, r5, #1
 8006c86:	3b01      	subs	r3, #1
 8006c88:	e789      	b.n	8006b9e <__ieee754_fmod+0xd6>
 8006c8a:	1ac9      	subs	r1, r1, r3
 8006c8c:	2914      	cmp	r1, #20
 8006c8e:	dc0a      	bgt.n	8006ca6 <__ieee754_fmod+0x1de>
 8006c90:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	40cd      	lsrs	r5, r1
 8006c9a:	432b      	orrs	r3, r5
 8006c9c:	410a      	asrs	r2, r1
 8006c9e:	ea42 0104 	orr.w	r1, r2, r4
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	e732      	b.n	8006b0c <__ieee754_fmod+0x44>
 8006ca6:	291f      	cmp	r1, #31
 8006ca8:	dc07      	bgt.n	8006cba <__ieee754_fmod+0x1f2>
 8006caa:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006cae:	40cd      	lsrs	r5, r1
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	432b      	orrs	r3, r5
 8006cb6:	4622      	mov	r2, r4
 8006cb8:	e7f1      	b.n	8006c9e <__ieee754_fmod+0x1d6>
 8006cba:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8006cbe:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8006cc2:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8006cc6:	33e2      	adds	r3, #226	; 0xe2
 8006cc8:	fa42 f303 	asr.w	r3, r2, r3
 8006ccc:	e7f3      	b.n	8006cb6 <__ieee754_fmod+0x1ee>
 8006cce:	bf00      	nop
 8006cd0:	7fefffff 	.word	0x7fefffff
 8006cd4:	7ff00000 	.word	0x7ff00000
 8006cd8:	080097f8 	.word	0x080097f8
 8006cdc:	000fffff 	.word	0x000fffff
 8006ce0:	fffffbed 	.word	0xfffffbed
 8006ce4:	fffffc02 	.word	0xfffffc02
 8006ce8:	fffffbe2 	.word	0xfffffbe2
 8006cec:	00000000 	.word	0x00000000

08006cf0 <__ieee754_rem_pio2>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	ec57 6b10 	vmov	r6, r7, d0
 8006cf8:	4bc3      	ldr	r3, [pc, #780]	; (8007008 <__ieee754_rem_pio2+0x318>)
 8006cfa:	b08d      	sub	sp, #52	; 0x34
 8006cfc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006d00:	4598      	cmp	r8, r3
 8006d02:	4604      	mov	r4, r0
 8006d04:	9704      	str	r7, [sp, #16]
 8006d06:	dc07      	bgt.n	8006d18 <__ieee754_rem_pio2+0x28>
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	ed84 0b00 	vstr	d0, [r4]
 8006d10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006d14:	2500      	movs	r5, #0
 8006d16:	e027      	b.n	8006d68 <__ieee754_rem_pio2+0x78>
 8006d18:	4bbc      	ldr	r3, [pc, #752]	; (800700c <__ieee754_rem_pio2+0x31c>)
 8006d1a:	4598      	cmp	r8, r3
 8006d1c:	dc75      	bgt.n	8006e0a <__ieee754_rem_pio2+0x11a>
 8006d1e:	9b04      	ldr	r3, [sp, #16]
 8006d20:	4dbb      	ldr	r5, [pc, #748]	; (8007010 <__ieee754_rem_pio2+0x320>)
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	ee10 0a10 	vmov	r0, s0
 8006d28:	a3a9      	add	r3, pc, #676	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x2e0>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	4639      	mov	r1, r7
 8006d30:	dd36      	ble.n	8006da0 <__ieee754_rem_pio2+0xb0>
 8006d32:	f7f9 fa75 	bl	8000220 <__aeabi_dsub>
 8006d36:	45a8      	cmp	r8, r5
 8006d38:	4606      	mov	r6, r0
 8006d3a:	460f      	mov	r7, r1
 8006d3c:	d018      	beq.n	8006d70 <__ieee754_rem_pio2+0x80>
 8006d3e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x2e8>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	f7f9 fa6c 	bl	8000220 <__aeabi_dsub>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	e9c4 2300 	strd	r2, r3, [r4]
 8006d50:	4630      	mov	r0, r6
 8006d52:	4639      	mov	r1, r7
 8006d54:	f7f9 fa64 	bl	8000220 <__aeabi_dsub>
 8006d58:	a39f      	add	r3, pc, #636	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x2e8>)
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	f7f9 fa5f 	bl	8000220 <__aeabi_dsub>
 8006d62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d66:	2501      	movs	r5, #1
 8006d68:	4628      	mov	r0, r5
 8006d6a:	b00d      	add	sp, #52	; 0x34
 8006d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d70:	a39b      	add	r3, pc, #620	; (adr r3, 8006fe0 <__ieee754_rem_pio2+0x2f0>)
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f7f9 fa53 	bl	8000220 <__aeabi_dsub>
 8006d7a:	a39b      	add	r3, pc, #620	; (adr r3, 8006fe8 <__ieee754_rem_pio2+0x2f8>)
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	4606      	mov	r6, r0
 8006d82:	460f      	mov	r7, r1
 8006d84:	f7f9 fa4c 	bl	8000220 <__aeabi_dsub>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	e9c4 2300 	strd	r2, r3, [r4]
 8006d90:	4630      	mov	r0, r6
 8006d92:	4639      	mov	r1, r7
 8006d94:	f7f9 fa44 	bl	8000220 <__aeabi_dsub>
 8006d98:	a393      	add	r3, pc, #588	; (adr r3, 8006fe8 <__ieee754_rem_pio2+0x2f8>)
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	e7de      	b.n	8006d5e <__ieee754_rem_pio2+0x6e>
 8006da0:	f7f9 fa40 	bl	8000224 <__adddf3>
 8006da4:	45a8      	cmp	r8, r5
 8006da6:	4606      	mov	r6, r0
 8006da8:	460f      	mov	r7, r1
 8006daa:	d016      	beq.n	8006dda <__ieee754_rem_pio2+0xea>
 8006dac:	a38a      	add	r3, pc, #552	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x2e8>)
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	f7f9 fa37 	bl	8000224 <__adddf3>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	e9c4 2300 	strd	r2, r3, [r4]
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	f7f9 fa2d 	bl	8000220 <__aeabi_dsub>
 8006dc6:	a384      	add	r3, pc, #528	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x2e8>)
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	f7f9 fa2a 	bl	8000224 <__adddf3>
 8006dd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006dd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006dd8:	e7c6      	b.n	8006d68 <__ieee754_rem_pio2+0x78>
 8006dda:	a381      	add	r3, pc, #516	; (adr r3, 8006fe0 <__ieee754_rem_pio2+0x2f0>)
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	f7f9 fa20 	bl	8000224 <__adddf3>
 8006de4:	a380      	add	r3, pc, #512	; (adr r3, 8006fe8 <__ieee754_rem_pio2+0x2f8>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	4606      	mov	r6, r0
 8006dec:	460f      	mov	r7, r1
 8006dee:	f7f9 fa19 	bl	8000224 <__adddf3>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	e9c4 2300 	strd	r2, r3, [r4]
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	f7f9 fa0f 	bl	8000220 <__aeabi_dsub>
 8006e02:	a379      	add	r3, pc, #484	; (adr r3, 8006fe8 <__ieee754_rem_pio2+0x2f8>)
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	e7e0      	b.n	8006dcc <__ieee754_rem_pio2+0xdc>
 8006e0a:	4b82      	ldr	r3, [pc, #520]	; (8007014 <__ieee754_rem_pio2+0x324>)
 8006e0c:	4598      	cmp	r8, r3
 8006e0e:	f300 80d0 	bgt.w	8006fb2 <__ieee754_rem_pio2+0x2c2>
 8006e12:	f7ff fca5 	bl	8006760 <fabs>
 8006e16:	ec57 6b10 	vmov	r6, r7, d0
 8006e1a:	ee10 0a10 	vmov	r0, s0
 8006e1e:	a374      	add	r3, pc, #464	; (adr r3, 8006ff0 <__ieee754_rem_pio2+0x300>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 fbb3 	bl	8000590 <__aeabi_dmul>
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4b7a      	ldr	r3, [pc, #488]	; (8007018 <__ieee754_rem_pio2+0x328>)
 8006e2e:	f7f9 f9f9 	bl	8000224 <__adddf3>
 8006e32:	f7f9 fe5d 	bl	8000af0 <__aeabi_d2iz>
 8006e36:	4605      	mov	r5, r0
 8006e38:	f7f9 fb40 	bl	80004bc <__aeabi_i2d>
 8006e3c:	a364      	add	r3, pc, #400	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x2e0>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e46:	f7f9 fba3 	bl	8000590 <__aeabi_dmul>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4630      	mov	r0, r6
 8006e50:	4639      	mov	r1, r7
 8006e52:	f7f9 f9e5 	bl	8000220 <__aeabi_dsub>
 8006e56:	a360      	add	r3, pc, #384	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x2e8>)
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	4682      	mov	sl, r0
 8006e5e:	468b      	mov	fp, r1
 8006e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e64:	f7f9 fb94 	bl	8000590 <__aeabi_dmul>
 8006e68:	2d1f      	cmp	r5, #31
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	460f      	mov	r7, r1
 8006e6e:	dc0c      	bgt.n	8006e8a <__ieee754_rem_pio2+0x19a>
 8006e70:	1e6a      	subs	r2, r5, #1
 8006e72:	4b6a      	ldr	r3, [pc, #424]	; (800701c <__ieee754_rem_pio2+0x32c>)
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	4543      	cmp	r3, r8
 8006e7a:	d006      	beq.n	8006e8a <__ieee754_rem_pio2+0x19a>
 8006e7c:	4632      	mov	r2, r6
 8006e7e:	463b      	mov	r3, r7
 8006e80:	4650      	mov	r0, sl
 8006e82:	4659      	mov	r1, fp
 8006e84:	f7f9 f9cc 	bl	8000220 <__aeabi_dsub>
 8006e88:	e00e      	b.n	8006ea8 <__ieee754_rem_pio2+0x1b8>
 8006e8a:	4632      	mov	r2, r6
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	4650      	mov	r0, sl
 8006e90:	4659      	mov	r1, fp
 8006e92:	f7f9 f9c5 	bl	8000220 <__aeabi_dsub>
 8006e96:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006e9a:	9305      	str	r3, [sp, #20]
 8006e9c:	9a05      	ldr	r2, [sp, #20]
 8006e9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b10      	cmp	r3, #16
 8006ea6:	dc02      	bgt.n	8006eae <__ieee754_rem_pio2+0x1be>
 8006ea8:	e9c4 0100 	strd	r0, r1, [r4]
 8006eac:	e039      	b.n	8006f22 <__ieee754_rem_pio2+0x232>
 8006eae:	a34c      	add	r3, pc, #304	; (adr r3, 8006fe0 <__ieee754_rem_pio2+0x2f0>)
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eb8:	f7f9 fb6a 	bl	8000590 <__aeabi_dmul>
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	460f      	mov	r7, r1
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4650      	mov	r0, sl
 8006ec6:	4659      	mov	r1, fp
 8006ec8:	f7f9 f9aa 	bl	8000220 <__aeabi_dsub>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	4689      	mov	r9, r1
 8006ed4:	4650      	mov	r0, sl
 8006ed6:	4659      	mov	r1, fp
 8006ed8:	f7f9 f9a2 	bl	8000220 <__aeabi_dsub>
 8006edc:	4632      	mov	r2, r6
 8006ede:	463b      	mov	r3, r7
 8006ee0:	f7f9 f99e 	bl	8000220 <__aeabi_dsub>
 8006ee4:	a340      	add	r3, pc, #256	; (adr r3, 8006fe8 <__ieee754_rem_pio2+0x2f8>)
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	4606      	mov	r6, r0
 8006eec:	460f      	mov	r7, r1
 8006eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef2:	f7f9 fb4d 	bl	8000590 <__aeabi_dmul>
 8006ef6:	4632      	mov	r2, r6
 8006ef8:	463b      	mov	r3, r7
 8006efa:	f7f9 f991 	bl	8000220 <__aeabi_dsub>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4606      	mov	r6, r0
 8006f04:	460f      	mov	r7, r1
 8006f06:	4640      	mov	r0, r8
 8006f08:	4649      	mov	r1, r9
 8006f0a:	f7f9 f989 	bl	8000220 <__aeabi_dsub>
 8006f0e:	9a05      	ldr	r2, [sp, #20]
 8006f10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b31      	cmp	r3, #49	; 0x31
 8006f18:	dc20      	bgt.n	8006f5c <__ieee754_rem_pio2+0x26c>
 8006f1a:	e9c4 0100 	strd	r0, r1, [r4]
 8006f1e:	46c2      	mov	sl, r8
 8006f20:	46cb      	mov	fp, r9
 8006f22:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006f26:	4650      	mov	r0, sl
 8006f28:	4642      	mov	r2, r8
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	4659      	mov	r1, fp
 8006f2e:	f7f9 f977 	bl	8000220 <__aeabi_dsub>
 8006f32:	463b      	mov	r3, r7
 8006f34:	4632      	mov	r2, r6
 8006f36:	f7f9 f973 	bl	8000220 <__aeabi_dsub>
 8006f3a:	9b04      	ldr	r3, [sp, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f42:	f6bf af11 	bge.w	8006d68 <__ieee754_rem_pio2+0x78>
 8006f46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f4a:	6063      	str	r3, [r4, #4]
 8006f4c:	f8c4 8000 	str.w	r8, [r4]
 8006f50:	60a0      	str	r0, [r4, #8]
 8006f52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f56:	60e3      	str	r3, [r4, #12]
 8006f58:	426d      	negs	r5, r5
 8006f5a:	e705      	b.n	8006d68 <__ieee754_rem_pio2+0x78>
 8006f5c:	a326      	add	r3, pc, #152	; (adr r3, 8006ff8 <__ieee754_rem_pio2+0x308>)
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f66:	f7f9 fb13 	bl	8000590 <__aeabi_dmul>
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	460f      	mov	r7, r1
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f7f9 f953 	bl	8000220 <__aeabi_dsub>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4682      	mov	sl, r0
 8006f80:	468b      	mov	fp, r1
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 f94b 	bl	8000220 <__aeabi_dsub>
 8006f8a:	4632      	mov	r2, r6
 8006f8c:	463b      	mov	r3, r7
 8006f8e:	f7f9 f947 	bl	8000220 <__aeabi_dsub>
 8006f92:	a31b      	add	r3, pc, #108	; (adr r3, 8007000 <__ieee754_rem_pio2+0x310>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	4606      	mov	r6, r0
 8006f9a:	460f      	mov	r7, r1
 8006f9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fa0:	f7f9 faf6 	bl	8000590 <__aeabi_dmul>
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	f7f9 f93a 	bl	8000220 <__aeabi_dsub>
 8006fac:	4606      	mov	r6, r0
 8006fae:	460f      	mov	r7, r1
 8006fb0:	e764      	b.n	8006e7c <__ieee754_rem_pio2+0x18c>
 8006fb2:	4b1b      	ldr	r3, [pc, #108]	; (8007020 <__ieee754_rem_pio2+0x330>)
 8006fb4:	4598      	cmp	r8, r3
 8006fb6:	dd35      	ble.n	8007024 <__ieee754_rem_pio2+0x334>
 8006fb8:	ee10 2a10 	vmov	r2, s0
 8006fbc:	463b      	mov	r3, r7
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	f7f9 f92d 	bl	8000220 <__aeabi_dsub>
 8006fc6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006fca:	e9c4 0100 	strd	r0, r1, [r4]
 8006fce:	e6a1      	b.n	8006d14 <__ieee754_rem_pio2+0x24>
 8006fd0:	54400000 	.word	0x54400000
 8006fd4:	3ff921fb 	.word	0x3ff921fb
 8006fd8:	1a626331 	.word	0x1a626331
 8006fdc:	3dd0b461 	.word	0x3dd0b461
 8006fe0:	1a600000 	.word	0x1a600000
 8006fe4:	3dd0b461 	.word	0x3dd0b461
 8006fe8:	2e037073 	.word	0x2e037073
 8006fec:	3ba3198a 	.word	0x3ba3198a
 8006ff0:	6dc9c883 	.word	0x6dc9c883
 8006ff4:	3fe45f30 	.word	0x3fe45f30
 8006ff8:	2e000000 	.word	0x2e000000
 8006ffc:	3ba3198a 	.word	0x3ba3198a
 8007000:	252049c1 	.word	0x252049c1
 8007004:	397b839a 	.word	0x397b839a
 8007008:	3fe921fb 	.word	0x3fe921fb
 800700c:	4002d97b 	.word	0x4002d97b
 8007010:	3ff921fb 	.word	0x3ff921fb
 8007014:	413921fb 	.word	0x413921fb
 8007018:	3fe00000 	.word	0x3fe00000
 800701c:	08009808 	.word	0x08009808
 8007020:	7fefffff 	.word	0x7fefffff
 8007024:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007028:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800702c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007030:	4630      	mov	r0, r6
 8007032:	460f      	mov	r7, r1
 8007034:	f7f9 fd5c 	bl	8000af0 <__aeabi_d2iz>
 8007038:	f7f9 fa40 	bl	80004bc <__aeabi_i2d>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	4630      	mov	r0, r6
 8007042:	4639      	mov	r1, r7
 8007044:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007048:	f7f9 f8ea 	bl	8000220 <__aeabi_dsub>
 800704c:	2200      	movs	r2, #0
 800704e:	4b1f      	ldr	r3, [pc, #124]	; (80070cc <__ieee754_rem_pio2+0x3dc>)
 8007050:	f7f9 fa9e 	bl	8000590 <__aeabi_dmul>
 8007054:	460f      	mov	r7, r1
 8007056:	4606      	mov	r6, r0
 8007058:	f7f9 fd4a 	bl	8000af0 <__aeabi_d2iz>
 800705c:	f7f9 fa2e 	bl	80004bc <__aeabi_i2d>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4630      	mov	r0, r6
 8007066:	4639      	mov	r1, r7
 8007068:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800706c:	f7f9 f8d8 	bl	8000220 <__aeabi_dsub>
 8007070:	2200      	movs	r2, #0
 8007072:	4b16      	ldr	r3, [pc, #88]	; (80070cc <__ieee754_rem_pio2+0x3dc>)
 8007074:	f7f9 fa8c 	bl	8000590 <__aeabi_dmul>
 8007078:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800707c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007080:	f04f 0803 	mov.w	r8, #3
 8007084:	2600      	movs	r6, #0
 8007086:	2700      	movs	r7, #0
 8007088:	4632      	mov	r2, r6
 800708a:	463b      	mov	r3, r7
 800708c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007090:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8007094:	f7f9 fce4 	bl	8000a60 <__aeabi_dcmpeq>
 8007098:	b9b0      	cbnz	r0, 80070c8 <__ieee754_rem_pio2+0x3d8>
 800709a:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <__ieee754_rem_pio2+0x3e0>)
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	2302      	movs	r3, #2
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	462a      	mov	r2, r5
 80070a4:	4643      	mov	r3, r8
 80070a6:	4621      	mov	r1, r4
 80070a8:	a806      	add	r0, sp, #24
 80070aa:	f000 f8dd 	bl	8007268 <__kernel_rem_pio2>
 80070ae:	9b04      	ldr	r3, [sp, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	4605      	mov	r5, r0
 80070b4:	f6bf ae58 	bge.w	8006d68 <__ieee754_rem_pio2+0x78>
 80070b8:	6863      	ldr	r3, [r4, #4]
 80070ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80070be:	6063      	str	r3, [r4, #4]
 80070c0:	68e3      	ldr	r3, [r4, #12]
 80070c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80070c6:	e746      	b.n	8006f56 <__ieee754_rem_pio2+0x266>
 80070c8:	46d0      	mov	r8, sl
 80070ca:	e7dd      	b.n	8007088 <__ieee754_rem_pio2+0x398>
 80070cc:	41700000 	.word	0x41700000
 80070d0:	08009888 	.word	0x08009888
 80070d4:	00000000 	.word	0x00000000

080070d8 <__kernel_cos>:
 80070d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	ec59 8b10 	vmov	r8, r9, d0
 80070e0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80070e4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80070e8:	ed2d 8b02 	vpush	{d8}
 80070ec:	eeb0 8a41 	vmov.f32	s16, s2
 80070f0:	eef0 8a61 	vmov.f32	s17, s3
 80070f4:	da07      	bge.n	8007106 <__kernel_cos+0x2e>
 80070f6:	ee10 0a10 	vmov	r0, s0
 80070fa:	4649      	mov	r1, r9
 80070fc:	f7f9 fcf8 	bl	8000af0 <__aeabi_d2iz>
 8007100:	2800      	cmp	r0, #0
 8007102:	f000 8089 	beq.w	8007218 <__kernel_cos+0x140>
 8007106:	4642      	mov	r2, r8
 8007108:	464b      	mov	r3, r9
 800710a:	4640      	mov	r0, r8
 800710c:	4649      	mov	r1, r9
 800710e:	f7f9 fa3f 	bl	8000590 <__aeabi_dmul>
 8007112:	2200      	movs	r2, #0
 8007114:	4b4e      	ldr	r3, [pc, #312]	; (8007250 <__kernel_cos+0x178>)
 8007116:	4604      	mov	r4, r0
 8007118:	460d      	mov	r5, r1
 800711a:	f7f9 fa39 	bl	8000590 <__aeabi_dmul>
 800711e:	a340      	add	r3, pc, #256	; (adr r3, 8007220 <__kernel_cos+0x148>)
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	4682      	mov	sl, r0
 8007126:	468b      	mov	fp, r1
 8007128:	4620      	mov	r0, r4
 800712a:	4629      	mov	r1, r5
 800712c:	f7f9 fa30 	bl	8000590 <__aeabi_dmul>
 8007130:	a33d      	add	r3, pc, #244	; (adr r3, 8007228 <__kernel_cos+0x150>)
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	f7f9 f875 	bl	8000224 <__adddf3>
 800713a:	4622      	mov	r2, r4
 800713c:	462b      	mov	r3, r5
 800713e:	f7f9 fa27 	bl	8000590 <__aeabi_dmul>
 8007142:	a33b      	add	r3, pc, #236	; (adr r3, 8007230 <__kernel_cos+0x158>)
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f7f9 f86a 	bl	8000220 <__aeabi_dsub>
 800714c:	4622      	mov	r2, r4
 800714e:	462b      	mov	r3, r5
 8007150:	f7f9 fa1e 	bl	8000590 <__aeabi_dmul>
 8007154:	a338      	add	r3, pc, #224	; (adr r3, 8007238 <__kernel_cos+0x160>)
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	f7f9 f863 	bl	8000224 <__adddf3>
 800715e:	4622      	mov	r2, r4
 8007160:	462b      	mov	r3, r5
 8007162:	f7f9 fa15 	bl	8000590 <__aeabi_dmul>
 8007166:	a336      	add	r3, pc, #216	; (adr r3, 8007240 <__kernel_cos+0x168>)
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	f7f9 f858 	bl	8000220 <__aeabi_dsub>
 8007170:	4622      	mov	r2, r4
 8007172:	462b      	mov	r3, r5
 8007174:	f7f9 fa0c 	bl	8000590 <__aeabi_dmul>
 8007178:	a333      	add	r3, pc, #204	; (adr r3, 8007248 <__kernel_cos+0x170>)
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	f7f9 f851 	bl	8000224 <__adddf3>
 8007182:	4622      	mov	r2, r4
 8007184:	462b      	mov	r3, r5
 8007186:	f7f9 fa03 	bl	8000590 <__aeabi_dmul>
 800718a:	4622      	mov	r2, r4
 800718c:	462b      	mov	r3, r5
 800718e:	f7f9 f9ff 	bl	8000590 <__aeabi_dmul>
 8007192:	ec53 2b18 	vmov	r2, r3, d8
 8007196:	4604      	mov	r4, r0
 8007198:	460d      	mov	r5, r1
 800719a:	4640      	mov	r0, r8
 800719c:	4649      	mov	r1, r9
 800719e:	f7f9 f9f7 	bl	8000590 <__aeabi_dmul>
 80071a2:	460b      	mov	r3, r1
 80071a4:	4602      	mov	r2, r0
 80071a6:	4629      	mov	r1, r5
 80071a8:	4620      	mov	r0, r4
 80071aa:	f7f9 f839 	bl	8000220 <__aeabi_dsub>
 80071ae:	4b29      	ldr	r3, [pc, #164]	; (8007254 <__kernel_cos+0x17c>)
 80071b0:	429e      	cmp	r6, r3
 80071b2:	4680      	mov	r8, r0
 80071b4:	4689      	mov	r9, r1
 80071b6:	dc11      	bgt.n	80071dc <__kernel_cos+0x104>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4650      	mov	r0, sl
 80071be:	4659      	mov	r1, fp
 80071c0:	f7f9 f82e 	bl	8000220 <__aeabi_dsub>
 80071c4:	460b      	mov	r3, r1
 80071c6:	4924      	ldr	r1, [pc, #144]	; (8007258 <__kernel_cos+0x180>)
 80071c8:	4602      	mov	r2, r0
 80071ca:	2000      	movs	r0, #0
 80071cc:	f7f9 f828 	bl	8000220 <__aeabi_dsub>
 80071d0:	ecbd 8b02 	vpop	{d8}
 80071d4:	ec41 0b10 	vmov	d0, r0, r1
 80071d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071dc:	4b1f      	ldr	r3, [pc, #124]	; (800725c <__kernel_cos+0x184>)
 80071de:	491e      	ldr	r1, [pc, #120]	; (8007258 <__kernel_cos+0x180>)
 80071e0:	429e      	cmp	r6, r3
 80071e2:	bfcc      	ite	gt
 80071e4:	4d1e      	ldrgt	r5, [pc, #120]	; (8007260 <__kernel_cos+0x188>)
 80071e6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80071ea:	2400      	movs	r4, #0
 80071ec:	4622      	mov	r2, r4
 80071ee:	462b      	mov	r3, r5
 80071f0:	2000      	movs	r0, #0
 80071f2:	f7f9 f815 	bl	8000220 <__aeabi_dsub>
 80071f6:	4622      	mov	r2, r4
 80071f8:	4606      	mov	r6, r0
 80071fa:	460f      	mov	r7, r1
 80071fc:	462b      	mov	r3, r5
 80071fe:	4650      	mov	r0, sl
 8007200:	4659      	mov	r1, fp
 8007202:	f7f9 f80d 	bl	8000220 <__aeabi_dsub>
 8007206:	4642      	mov	r2, r8
 8007208:	464b      	mov	r3, r9
 800720a:	f7f9 f809 	bl	8000220 <__aeabi_dsub>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4630      	mov	r0, r6
 8007214:	4639      	mov	r1, r7
 8007216:	e7d9      	b.n	80071cc <__kernel_cos+0xf4>
 8007218:	2000      	movs	r0, #0
 800721a:	490f      	ldr	r1, [pc, #60]	; (8007258 <__kernel_cos+0x180>)
 800721c:	e7d8      	b.n	80071d0 <__kernel_cos+0xf8>
 800721e:	bf00      	nop
 8007220:	be8838d4 	.word	0xbe8838d4
 8007224:	bda8fae9 	.word	0xbda8fae9
 8007228:	bdb4b1c4 	.word	0xbdb4b1c4
 800722c:	3e21ee9e 	.word	0x3e21ee9e
 8007230:	809c52ad 	.word	0x809c52ad
 8007234:	3e927e4f 	.word	0x3e927e4f
 8007238:	19cb1590 	.word	0x19cb1590
 800723c:	3efa01a0 	.word	0x3efa01a0
 8007240:	16c15177 	.word	0x16c15177
 8007244:	3f56c16c 	.word	0x3f56c16c
 8007248:	5555554c 	.word	0x5555554c
 800724c:	3fa55555 	.word	0x3fa55555
 8007250:	3fe00000 	.word	0x3fe00000
 8007254:	3fd33332 	.word	0x3fd33332
 8007258:	3ff00000 	.word	0x3ff00000
 800725c:	3fe90000 	.word	0x3fe90000
 8007260:	3fd20000 	.word	0x3fd20000
 8007264:	00000000 	.word	0x00000000

08007268 <__kernel_rem_pio2>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	ed2d 8b02 	vpush	{d8}
 8007270:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007274:	1ed4      	subs	r4, r2, #3
 8007276:	9308      	str	r3, [sp, #32]
 8007278:	9101      	str	r1, [sp, #4]
 800727a:	4bc5      	ldr	r3, [pc, #788]	; (8007590 <__kernel_rem_pio2+0x328>)
 800727c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800727e:	9009      	str	r0, [sp, #36]	; 0x24
 8007280:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007284:	9304      	str	r3, [sp, #16]
 8007286:	9b08      	ldr	r3, [sp, #32]
 8007288:	3b01      	subs	r3, #1
 800728a:	9307      	str	r3, [sp, #28]
 800728c:	2318      	movs	r3, #24
 800728e:	fb94 f4f3 	sdiv	r4, r4, r3
 8007292:	f06f 0317 	mvn.w	r3, #23
 8007296:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800729a:	fb04 3303 	mla	r3, r4, r3, r3
 800729e:	eb03 0a02 	add.w	sl, r3, r2
 80072a2:	9b04      	ldr	r3, [sp, #16]
 80072a4:	9a07      	ldr	r2, [sp, #28]
 80072a6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007580 <__kernel_rem_pio2+0x318>
 80072aa:	eb03 0802 	add.w	r8, r3, r2
 80072ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80072b0:	1aa7      	subs	r7, r4, r2
 80072b2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80072b6:	ae22      	add	r6, sp, #136	; 0x88
 80072b8:	2500      	movs	r5, #0
 80072ba:	4545      	cmp	r5, r8
 80072bc:	dd13      	ble.n	80072e6 <__kernel_rem_pio2+0x7e>
 80072be:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007580 <__kernel_rem_pio2+0x318>
 80072c2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80072c6:	2600      	movs	r6, #0
 80072c8:	9b04      	ldr	r3, [sp, #16]
 80072ca:	429e      	cmp	r6, r3
 80072cc:	dc32      	bgt.n	8007334 <__kernel_rem_pio2+0xcc>
 80072ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d0:	9302      	str	r3, [sp, #8]
 80072d2:	9b08      	ldr	r3, [sp, #32]
 80072d4:	199d      	adds	r5, r3, r6
 80072d6:	ab22      	add	r3, sp, #136	; 0x88
 80072d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80072dc:	9306      	str	r3, [sp, #24]
 80072de:	ec59 8b18 	vmov	r8, r9, d8
 80072e2:	2700      	movs	r7, #0
 80072e4:	e01f      	b.n	8007326 <__kernel_rem_pio2+0xbe>
 80072e6:	42ef      	cmn	r7, r5
 80072e8:	d407      	bmi.n	80072fa <__kernel_rem_pio2+0x92>
 80072ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80072ee:	f7f9 f8e5 	bl	80004bc <__aeabi_i2d>
 80072f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80072f6:	3501      	adds	r5, #1
 80072f8:	e7df      	b.n	80072ba <__kernel_rem_pio2+0x52>
 80072fa:	ec51 0b18 	vmov	r0, r1, d8
 80072fe:	e7f8      	b.n	80072f2 <__kernel_rem_pio2+0x8a>
 8007300:	9906      	ldr	r1, [sp, #24]
 8007302:	9d02      	ldr	r5, [sp, #8]
 8007304:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007308:	9106      	str	r1, [sp, #24]
 800730a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800730e:	9502      	str	r5, [sp, #8]
 8007310:	f7f9 f93e 	bl	8000590 <__aeabi_dmul>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4640      	mov	r0, r8
 800731a:	4649      	mov	r1, r9
 800731c:	f7f8 ff82 	bl	8000224 <__adddf3>
 8007320:	3701      	adds	r7, #1
 8007322:	4680      	mov	r8, r0
 8007324:	4689      	mov	r9, r1
 8007326:	9b07      	ldr	r3, [sp, #28]
 8007328:	429f      	cmp	r7, r3
 800732a:	dde9      	ble.n	8007300 <__kernel_rem_pio2+0x98>
 800732c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007330:	3601      	adds	r6, #1
 8007332:	e7c9      	b.n	80072c8 <__kernel_rem_pio2+0x60>
 8007334:	9b04      	ldr	r3, [sp, #16]
 8007336:	aa0e      	add	r2, sp, #56	; 0x38
 8007338:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800733c:	930c      	str	r3, [sp, #48]	; 0x30
 800733e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007340:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007344:	9c04      	ldr	r4, [sp, #16]
 8007346:	930b      	str	r3, [sp, #44]	; 0x2c
 8007348:	ab9a      	add	r3, sp, #616	; 0x268
 800734a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800734e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007352:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007356:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800735a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800735e:	ab9a      	add	r3, sp, #616	; 0x268
 8007360:	445b      	add	r3, fp
 8007362:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007366:	2500      	movs	r5, #0
 8007368:	1b63      	subs	r3, r4, r5
 800736a:	2b00      	cmp	r3, #0
 800736c:	dc78      	bgt.n	8007460 <__kernel_rem_pio2+0x1f8>
 800736e:	4650      	mov	r0, sl
 8007370:	ec49 8b10 	vmov	d0, r8, r9
 8007374:	f7ff fa84 	bl	8006880 <scalbn>
 8007378:	ec57 6b10 	vmov	r6, r7, d0
 800737c:	2200      	movs	r2, #0
 800737e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007382:	ee10 0a10 	vmov	r0, s0
 8007386:	4639      	mov	r1, r7
 8007388:	f7f9 f902 	bl	8000590 <__aeabi_dmul>
 800738c:	ec41 0b10 	vmov	d0, r0, r1
 8007390:	f7ff f9f2 	bl	8006778 <floor>
 8007394:	2200      	movs	r2, #0
 8007396:	ec51 0b10 	vmov	r0, r1, d0
 800739a:	4b7e      	ldr	r3, [pc, #504]	; (8007594 <__kernel_rem_pio2+0x32c>)
 800739c:	f7f9 f8f8 	bl	8000590 <__aeabi_dmul>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4630      	mov	r0, r6
 80073a6:	4639      	mov	r1, r7
 80073a8:	f7f8 ff3a 	bl	8000220 <__aeabi_dsub>
 80073ac:	460f      	mov	r7, r1
 80073ae:	4606      	mov	r6, r0
 80073b0:	f7f9 fb9e 	bl	8000af0 <__aeabi_d2iz>
 80073b4:	9006      	str	r0, [sp, #24]
 80073b6:	f7f9 f881 	bl	80004bc <__aeabi_i2d>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4630      	mov	r0, r6
 80073c0:	4639      	mov	r1, r7
 80073c2:	f7f8 ff2d 	bl	8000220 <__aeabi_dsub>
 80073c6:	f1ba 0f00 	cmp.w	sl, #0
 80073ca:	4606      	mov	r6, r0
 80073cc:	460f      	mov	r7, r1
 80073ce:	dd6c      	ble.n	80074aa <__kernel_rem_pio2+0x242>
 80073d0:	1e62      	subs	r2, r4, #1
 80073d2:	ab0e      	add	r3, sp, #56	; 0x38
 80073d4:	f1ca 0118 	rsb	r1, sl, #24
 80073d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80073dc:	9d06      	ldr	r5, [sp, #24]
 80073de:	fa40 f301 	asr.w	r3, r0, r1
 80073e2:	441d      	add	r5, r3
 80073e4:	408b      	lsls	r3, r1
 80073e6:	1ac0      	subs	r0, r0, r3
 80073e8:	ab0e      	add	r3, sp, #56	; 0x38
 80073ea:	9506      	str	r5, [sp, #24]
 80073ec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80073f0:	f1ca 0317 	rsb	r3, sl, #23
 80073f4:	fa40 f303 	asr.w	r3, r0, r3
 80073f8:	9302      	str	r3, [sp, #8]
 80073fa:	9b02      	ldr	r3, [sp, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dd62      	ble.n	80074c6 <__kernel_rem_pio2+0x25e>
 8007400:	9b06      	ldr	r3, [sp, #24]
 8007402:	2200      	movs	r2, #0
 8007404:	3301      	adds	r3, #1
 8007406:	9306      	str	r3, [sp, #24]
 8007408:	4615      	mov	r5, r2
 800740a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800740e:	4294      	cmp	r4, r2
 8007410:	f300 8095 	bgt.w	800753e <__kernel_rem_pio2+0x2d6>
 8007414:	f1ba 0f00 	cmp.w	sl, #0
 8007418:	dd07      	ble.n	800742a <__kernel_rem_pio2+0x1c2>
 800741a:	f1ba 0f01 	cmp.w	sl, #1
 800741e:	f000 80a2 	beq.w	8007566 <__kernel_rem_pio2+0x2fe>
 8007422:	f1ba 0f02 	cmp.w	sl, #2
 8007426:	f000 80c1 	beq.w	80075ac <__kernel_rem_pio2+0x344>
 800742a:	9b02      	ldr	r3, [sp, #8]
 800742c:	2b02      	cmp	r3, #2
 800742e:	d14a      	bne.n	80074c6 <__kernel_rem_pio2+0x25e>
 8007430:	4632      	mov	r2, r6
 8007432:	463b      	mov	r3, r7
 8007434:	2000      	movs	r0, #0
 8007436:	4958      	ldr	r1, [pc, #352]	; (8007598 <__kernel_rem_pio2+0x330>)
 8007438:	f7f8 fef2 	bl	8000220 <__aeabi_dsub>
 800743c:	4606      	mov	r6, r0
 800743e:	460f      	mov	r7, r1
 8007440:	2d00      	cmp	r5, #0
 8007442:	d040      	beq.n	80074c6 <__kernel_rem_pio2+0x25e>
 8007444:	4650      	mov	r0, sl
 8007446:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007588 <__kernel_rem_pio2+0x320>
 800744a:	f7ff fa19 	bl	8006880 <scalbn>
 800744e:	4630      	mov	r0, r6
 8007450:	4639      	mov	r1, r7
 8007452:	ec53 2b10 	vmov	r2, r3, d0
 8007456:	f7f8 fee3 	bl	8000220 <__aeabi_dsub>
 800745a:	4606      	mov	r6, r0
 800745c:	460f      	mov	r7, r1
 800745e:	e032      	b.n	80074c6 <__kernel_rem_pio2+0x25e>
 8007460:	2200      	movs	r2, #0
 8007462:	4b4e      	ldr	r3, [pc, #312]	; (800759c <__kernel_rem_pio2+0x334>)
 8007464:	4640      	mov	r0, r8
 8007466:	4649      	mov	r1, r9
 8007468:	f7f9 f892 	bl	8000590 <__aeabi_dmul>
 800746c:	f7f9 fb40 	bl	8000af0 <__aeabi_d2iz>
 8007470:	f7f9 f824 	bl	80004bc <__aeabi_i2d>
 8007474:	2200      	movs	r2, #0
 8007476:	4b4a      	ldr	r3, [pc, #296]	; (80075a0 <__kernel_rem_pio2+0x338>)
 8007478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800747c:	f7f9 f888 	bl	8000590 <__aeabi_dmul>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4640      	mov	r0, r8
 8007486:	4649      	mov	r1, r9
 8007488:	f7f8 feca 	bl	8000220 <__aeabi_dsub>
 800748c:	f7f9 fb30 	bl	8000af0 <__aeabi_d2iz>
 8007490:	ab0e      	add	r3, sp, #56	; 0x38
 8007492:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007496:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800749a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800749e:	f7f8 fec1 	bl	8000224 <__adddf3>
 80074a2:	3501      	adds	r5, #1
 80074a4:	4680      	mov	r8, r0
 80074a6:	4689      	mov	r9, r1
 80074a8:	e75e      	b.n	8007368 <__kernel_rem_pio2+0x100>
 80074aa:	d105      	bne.n	80074b8 <__kernel_rem_pio2+0x250>
 80074ac:	1e63      	subs	r3, r4, #1
 80074ae:	aa0e      	add	r2, sp, #56	; 0x38
 80074b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80074b4:	15c3      	asrs	r3, r0, #23
 80074b6:	e79f      	b.n	80073f8 <__kernel_rem_pio2+0x190>
 80074b8:	2200      	movs	r2, #0
 80074ba:	4b3a      	ldr	r3, [pc, #232]	; (80075a4 <__kernel_rem_pio2+0x33c>)
 80074bc:	f7f9 faee 	bl	8000a9c <__aeabi_dcmpge>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d139      	bne.n	8007538 <__kernel_rem_pio2+0x2d0>
 80074c4:	9002      	str	r0, [sp, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	2300      	movs	r3, #0
 80074ca:	4630      	mov	r0, r6
 80074cc:	4639      	mov	r1, r7
 80074ce:	f7f9 fac7 	bl	8000a60 <__aeabi_dcmpeq>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	f000 80c7 	beq.w	8007666 <__kernel_rem_pio2+0x3fe>
 80074d8:	1e65      	subs	r5, r4, #1
 80074da:	462b      	mov	r3, r5
 80074dc:	2200      	movs	r2, #0
 80074de:	9904      	ldr	r1, [sp, #16]
 80074e0:	428b      	cmp	r3, r1
 80074e2:	da6a      	bge.n	80075ba <__kernel_rem_pio2+0x352>
 80074e4:	2a00      	cmp	r2, #0
 80074e6:	f000 8088 	beq.w	80075fa <__kernel_rem_pio2+0x392>
 80074ea:	ab0e      	add	r3, sp, #56	; 0x38
 80074ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80074f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 80b4 	beq.w	8007662 <__kernel_rem_pio2+0x3fa>
 80074fa:	4650      	mov	r0, sl
 80074fc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007588 <__kernel_rem_pio2+0x320>
 8007500:	f7ff f9be 	bl	8006880 <scalbn>
 8007504:	00ec      	lsls	r4, r5, #3
 8007506:	ab72      	add	r3, sp, #456	; 0x1c8
 8007508:	191e      	adds	r6, r3, r4
 800750a:	ec59 8b10 	vmov	r8, r9, d0
 800750e:	f106 0a08 	add.w	sl, r6, #8
 8007512:	462f      	mov	r7, r5
 8007514:	2f00      	cmp	r7, #0
 8007516:	f280 80df 	bge.w	80076d8 <__kernel_rem_pio2+0x470>
 800751a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007580 <__kernel_rem_pio2+0x318>
 800751e:	f04f 0a00 	mov.w	sl, #0
 8007522:	eba5 030a 	sub.w	r3, r5, sl
 8007526:	2b00      	cmp	r3, #0
 8007528:	f2c0 810a 	blt.w	8007740 <__kernel_rem_pio2+0x4d8>
 800752c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80075a8 <__kernel_rem_pio2+0x340>
 8007530:	ec59 8b18 	vmov	r8, r9, d8
 8007534:	2700      	movs	r7, #0
 8007536:	e0f5      	b.n	8007724 <__kernel_rem_pio2+0x4bc>
 8007538:	2302      	movs	r3, #2
 800753a:	9302      	str	r3, [sp, #8]
 800753c:	e760      	b.n	8007400 <__kernel_rem_pio2+0x198>
 800753e:	ab0e      	add	r3, sp, #56	; 0x38
 8007540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007544:	b94d      	cbnz	r5, 800755a <__kernel_rem_pio2+0x2f2>
 8007546:	b12b      	cbz	r3, 8007554 <__kernel_rem_pio2+0x2ec>
 8007548:	a80e      	add	r0, sp, #56	; 0x38
 800754a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800754e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007552:	2301      	movs	r3, #1
 8007554:	3201      	adds	r2, #1
 8007556:	461d      	mov	r5, r3
 8007558:	e759      	b.n	800740e <__kernel_rem_pio2+0x1a6>
 800755a:	a80e      	add	r0, sp, #56	; 0x38
 800755c:	1acb      	subs	r3, r1, r3
 800755e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007562:	462b      	mov	r3, r5
 8007564:	e7f6      	b.n	8007554 <__kernel_rem_pio2+0x2ec>
 8007566:	1e62      	subs	r2, r4, #1
 8007568:	ab0e      	add	r3, sp, #56	; 0x38
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007572:	a90e      	add	r1, sp, #56	; 0x38
 8007574:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007578:	e757      	b.n	800742a <__kernel_rem_pio2+0x1c2>
 800757a:	bf00      	nop
 800757c:	f3af 8000 	nop.w
	...
 800758c:	3ff00000 	.word	0x3ff00000
 8007590:	080099d0 	.word	0x080099d0
 8007594:	40200000 	.word	0x40200000
 8007598:	3ff00000 	.word	0x3ff00000
 800759c:	3e700000 	.word	0x3e700000
 80075a0:	41700000 	.word	0x41700000
 80075a4:	3fe00000 	.word	0x3fe00000
 80075a8:	08009990 	.word	0x08009990
 80075ac:	1e62      	subs	r2, r4, #1
 80075ae:	ab0e      	add	r3, sp, #56	; 0x38
 80075b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80075b8:	e7db      	b.n	8007572 <__kernel_rem_pio2+0x30a>
 80075ba:	a90e      	add	r1, sp, #56	; 0x38
 80075bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	430a      	orrs	r2, r1
 80075c4:	e78b      	b.n	80074de <__kernel_rem_pio2+0x276>
 80075c6:	3301      	adds	r3, #1
 80075c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80075cc:	2900      	cmp	r1, #0
 80075ce:	d0fa      	beq.n	80075c6 <__kernel_rem_pio2+0x35e>
 80075d0:	9a08      	ldr	r2, [sp, #32]
 80075d2:	4422      	add	r2, r4
 80075d4:	00d2      	lsls	r2, r2, #3
 80075d6:	a922      	add	r1, sp, #136	; 0x88
 80075d8:	18e3      	adds	r3, r4, r3
 80075da:	9206      	str	r2, [sp, #24]
 80075dc:	440a      	add	r2, r1
 80075de:	9302      	str	r3, [sp, #8]
 80075e0:	f10b 0108 	add.w	r1, fp, #8
 80075e4:	f102 0308 	add.w	r3, r2, #8
 80075e8:	1c66      	adds	r6, r4, #1
 80075ea:	910a      	str	r1, [sp, #40]	; 0x28
 80075ec:	2500      	movs	r5, #0
 80075ee:	930d      	str	r3, [sp, #52]	; 0x34
 80075f0:	9b02      	ldr	r3, [sp, #8]
 80075f2:	42b3      	cmp	r3, r6
 80075f4:	da04      	bge.n	8007600 <__kernel_rem_pio2+0x398>
 80075f6:	461c      	mov	r4, r3
 80075f8:	e6a6      	b.n	8007348 <__kernel_rem_pio2+0xe0>
 80075fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075fc:	2301      	movs	r3, #1
 80075fe:	e7e3      	b.n	80075c8 <__kernel_rem_pio2+0x360>
 8007600:	9b06      	ldr	r3, [sp, #24]
 8007602:	18ef      	adds	r7, r5, r3
 8007604:	ab22      	add	r3, sp, #136	; 0x88
 8007606:	441f      	add	r7, r3
 8007608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800760a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800760e:	f7f8 ff55 	bl	80004bc <__aeabi_i2d>
 8007612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007614:	461c      	mov	r4, r3
 8007616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007618:	e9c7 0100 	strd	r0, r1, [r7]
 800761c:	eb03 0b05 	add.w	fp, r3, r5
 8007620:	2700      	movs	r7, #0
 8007622:	f04f 0800 	mov.w	r8, #0
 8007626:	f04f 0900 	mov.w	r9, #0
 800762a:	9b07      	ldr	r3, [sp, #28]
 800762c:	429f      	cmp	r7, r3
 800762e:	dd08      	ble.n	8007642 <__kernel_rem_pio2+0x3da>
 8007630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007632:	aa72      	add	r2, sp, #456	; 0x1c8
 8007634:	18eb      	adds	r3, r5, r3
 8007636:	4413      	add	r3, r2
 8007638:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800763c:	3601      	adds	r6, #1
 800763e:	3508      	adds	r5, #8
 8007640:	e7d6      	b.n	80075f0 <__kernel_rem_pio2+0x388>
 8007642:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007646:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800764a:	f7f8 ffa1 	bl	8000590 <__aeabi_dmul>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	4640      	mov	r0, r8
 8007654:	4649      	mov	r1, r9
 8007656:	f7f8 fde5 	bl	8000224 <__adddf3>
 800765a:	3701      	adds	r7, #1
 800765c:	4680      	mov	r8, r0
 800765e:	4689      	mov	r9, r1
 8007660:	e7e3      	b.n	800762a <__kernel_rem_pio2+0x3c2>
 8007662:	3d01      	subs	r5, #1
 8007664:	e741      	b.n	80074ea <__kernel_rem_pio2+0x282>
 8007666:	f1ca 0000 	rsb	r0, sl, #0
 800766a:	ec47 6b10 	vmov	d0, r6, r7
 800766e:	f7ff f907 	bl	8006880 <scalbn>
 8007672:	ec57 6b10 	vmov	r6, r7, d0
 8007676:	2200      	movs	r2, #0
 8007678:	4b99      	ldr	r3, [pc, #612]	; (80078e0 <__kernel_rem_pio2+0x678>)
 800767a:	ee10 0a10 	vmov	r0, s0
 800767e:	4639      	mov	r1, r7
 8007680:	f7f9 fa0c 	bl	8000a9c <__aeabi_dcmpge>
 8007684:	b1f8      	cbz	r0, 80076c6 <__kernel_rem_pio2+0x45e>
 8007686:	2200      	movs	r2, #0
 8007688:	4b96      	ldr	r3, [pc, #600]	; (80078e4 <__kernel_rem_pio2+0x67c>)
 800768a:	4630      	mov	r0, r6
 800768c:	4639      	mov	r1, r7
 800768e:	f7f8 ff7f 	bl	8000590 <__aeabi_dmul>
 8007692:	f7f9 fa2d 	bl	8000af0 <__aeabi_d2iz>
 8007696:	4680      	mov	r8, r0
 8007698:	f7f8 ff10 	bl	80004bc <__aeabi_i2d>
 800769c:	2200      	movs	r2, #0
 800769e:	4b90      	ldr	r3, [pc, #576]	; (80078e0 <__kernel_rem_pio2+0x678>)
 80076a0:	f7f8 ff76 	bl	8000590 <__aeabi_dmul>
 80076a4:	460b      	mov	r3, r1
 80076a6:	4602      	mov	r2, r0
 80076a8:	4639      	mov	r1, r7
 80076aa:	4630      	mov	r0, r6
 80076ac:	f7f8 fdb8 	bl	8000220 <__aeabi_dsub>
 80076b0:	f7f9 fa1e 	bl	8000af0 <__aeabi_d2iz>
 80076b4:	1c65      	adds	r5, r4, #1
 80076b6:	ab0e      	add	r3, sp, #56	; 0x38
 80076b8:	f10a 0a18 	add.w	sl, sl, #24
 80076bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80076c0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80076c4:	e719      	b.n	80074fa <__kernel_rem_pio2+0x292>
 80076c6:	4630      	mov	r0, r6
 80076c8:	4639      	mov	r1, r7
 80076ca:	f7f9 fa11 	bl	8000af0 <__aeabi_d2iz>
 80076ce:	ab0e      	add	r3, sp, #56	; 0x38
 80076d0:	4625      	mov	r5, r4
 80076d2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80076d6:	e710      	b.n	80074fa <__kernel_rem_pio2+0x292>
 80076d8:	ab0e      	add	r3, sp, #56	; 0x38
 80076da:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80076de:	f7f8 feed 	bl	80004bc <__aeabi_i2d>
 80076e2:	4642      	mov	r2, r8
 80076e4:	464b      	mov	r3, r9
 80076e6:	f7f8 ff53 	bl	8000590 <__aeabi_dmul>
 80076ea:	2200      	movs	r2, #0
 80076ec:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80076f0:	4b7c      	ldr	r3, [pc, #496]	; (80078e4 <__kernel_rem_pio2+0x67c>)
 80076f2:	4640      	mov	r0, r8
 80076f4:	4649      	mov	r1, r9
 80076f6:	f7f8 ff4b 	bl	8000590 <__aeabi_dmul>
 80076fa:	3f01      	subs	r7, #1
 80076fc:	4680      	mov	r8, r0
 80076fe:	4689      	mov	r9, r1
 8007700:	e708      	b.n	8007514 <__kernel_rem_pio2+0x2ac>
 8007702:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8007706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800770e:	f7f8 ff3f 	bl	8000590 <__aeabi_dmul>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4640      	mov	r0, r8
 8007718:	4649      	mov	r1, r9
 800771a:	f7f8 fd83 	bl	8000224 <__adddf3>
 800771e:	3701      	adds	r7, #1
 8007720:	4680      	mov	r8, r0
 8007722:	4689      	mov	r9, r1
 8007724:	9b04      	ldr	r3, [sp, #16]
 8007726:	429f      	cmp	r7, r3
 8007728:	dc01      	bgt.n	800772e <__kernel_rem_pio2+0x4c6>
 800772a:	45ba      	cmp	sl, r7
 800772c:	dae9      	bge.n	8007702 <__kernel_rem_pio2+0x49a>
 800772e:	ab4a      	add	r3, sp, #296	; 0x128
 8007730:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007734:	e9c3 8900 	strd	r8, r9, [r3]
 8007738:	f10a 0a01 	add.w	sl, sl, #1
 800773c:	3e08      	subs	r6, #8
 800773e:	e6f0      	b.n	8007522 <__kernel_rem_pio2+0x2ba>
 8007740:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007742:	2b03      	cmp	r3, #3
 8007744:	d85b      	bhi.n	80077fe <__kernel_rem_pio2+0x596>
 8007746:	e8df f003 	tbb	[pc, r3]
 800774a:	264a      	.short	0x264a
 800774c:	0226      	.short	0x0226
 800774e:	ab9a      	add	r3, sp, #616	; 0x268
 8007750:	441c      	add	r4, r3
 8007752:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007756:	46a2      	mov	sl, r4
 8007758:	46ab      	mov	fp, r5
 800775a:	f1bb 0f00 	cmp.w	fp, #0
 800775e:	dc6c      	bgt.n	800783a <__kernel_rem_pio2+0x5d2>
 8007760:	46a2      	mov	sl, r4
 8007762:	46ab      	mov	fp, r5
 8007764:	f1bb 0f01 	cmp.w	fp, #1
 8007768:	f300 8086 	bgt.w	8007878 <__kernel_rem_pio2+0x610>
 800776c:	2000      	movs	r0, #0
 800776e:	2100      	movs	r1, #0
 8007770:	2d01      	cmp	r5, #1
 8007772:	f300 80a0 	bgt.w	80078b6 <__kernel_rem_pio2+0x64e>
 8007776:	9b02      	ldr	r3, [sp, #8]
 8007778:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800777c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007780:	2b00      	cmp	r3, #0
 8007782:	f040 809e 	bne.w	80078c2 <__kernel_rem_pio2+0x65a>
 8007786:	9b01      	ldr	r3, [sp, #4]
 8007788:	e9c3 7800 	strd	r7, r8, [r3]
 800778c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007790:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007794:	e033      	b.n	80077fe <__kernel_rem_pio2+0x596>
 8007796:	3408      	adds	r4, #8
 8007798:	ab4a      	add	r3, sp, #296	; 0x128
 800779a:	441c      	add	r4, r3
 800779c:	462e      	mov	r6, r5
 800779e:	2000      	movs	r0, #0
 80077a0:	2100      	movs	r1, #0
 80077a2:	2e00      	cmp	r6, #0
 80077a4:	da3a      	bge.n	800781c <__kernel_rem_pio2+0x5b4>
 80077a6:	9b02      	ldr	r3, [sp, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d03d      	beq.n	8007828 <__kernel_rem_pio2+0x5c0>
 80077ac:	4602      	mov	r2, r0
 80077ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077b2:	9c01      	ldr	r4, [sp, #4]
 80077b4:	e9c4 2300 	strd	r2, r3, [r4]
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80077c0:	f7f8 fd2e 	bl	8000220 <__aeabi_dsub>
 80077c4:	ae4c      	add	r6, sp, #304	; 0x130
 80077c6:	2401      	movs	r4, #1
 80077c8:	42a5      	cmp	r5, r4
 80077ca:	da30      	bge.n	800782e <__kernel_rem_pio2+0x5c6>
 80077cc:	9b02      	ldr	r3, [sp, #8]
 80077ce:	b113      	cbz	r3, 80077d6 <__kernel_rem_pio2+0x56e>
 80077d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077d4:	4619      	mov	r1, r3
 80077d6:	9b01      	ldr	r3, [sp, #4]
 80077d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80077dc:	e00f      	b.n	80077fe <__kernel_rem_pio2+0x596>
 80077de:	ab9a      	add	r3, sp, #616	; 0x268
 80077e0:	441c      	add	r4, r3
 80077e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80077e6:	2000      	movs	r0, #0
 80077e8:	2100      	movs	r1, #0
 80077ea:	2d00      	cmp	r5, #0
 80077ec:	da10      	bge.n	8007810 <__kernel_rem_pio2+0x5a8>
 80077ee:	9b02      	ldr	r3, [sp, #8]
 80077f0:	b113      	cbz	r3, 80077f8 <__kernel_rem_pio2+0x590>
 80077f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077f6:	4619      	mov	r1, r3
 80077f8:	9b01      	ldr	r3, [sp, #4]
 80077fa:	e9c3 0100 	strd	r0, r1, [r3]
 80077fe:	9b06      	ldr	r3, [sp, #24]
 8007800:	f003 0007 	and.w	r0, r3, #7
 8007804:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007808:	ecbd 8b02 	vpop	{d8}
 800780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007810:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007814:	f7f8 fd06 	bl	8000224 <__adddf3>
 8007818:	3d01      	subs	r5, #1
 800781a:	e7e6      	b.n	80077ea <__kernel_rem_pio2+0x582>
 800781c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007820:	f7f8 fd00 	bl	8000224 <__adddf3>
 8007824:	3e01      	subs	r6, #1
 8007826:	e7bc      	b.n	80077a2 <__kernel_rem_pio2+0x53a>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	e7c1      	b.n	80077b2 <__kernel_rem_pio2+0x54a>
 800782e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007832:	f7f8 fcf7 	bl	8000224 <__adddf3>
 8007836:	3401      	adds	r4, #1
 8007838:	e7c6      	b.n	80077c8 <__kernel_rem_pio2+0x560>
 800783a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800783e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007842:	4640      	mov	r0, r8
 8007844:	ec53 2b17 	vmov	r2, r3, d7
 8007848:	4649      	mov	r1, r9
 800784a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800784e:	f7f8 fce9 	bl	8000224 <__adddf3>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4606      	mov	r6, r0
 8007858:	460f      	mov	r7, r1
 800785a:	4640      	mov	r0, r8
 800785c:	4649      	mov	r1, r9
 800785e:	f7f8 fcdf 	bl	8000220 <__aeabi_dsub>
 8007862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007866:	f7f8 fcdd 	bl	8000224 <__adddf3>
 800786a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800786e:	e9ca 0100 	strd	r0, r1, [sl]
 8007872:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8007876:	e770      	b.n	800775a <__kernel_rem_pio2+0x4f2>
 8007878:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800787c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007880:	4630      	mov	r0, r6
 8007882:	ec53 2b17 	vmov	r2, r3, d7
 8007886:	4639      	mov	r1, r7
 8007888:	ed8d 7b04 	vstr	d7, [sp, #16]
 800788c:	f7f8 fcca 	bl	8000224 <__adddf3>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4680      	mov	r8, r0
 8007896:	4689      	mov	r9, r1
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f8 fcc0 	bl	8000220 <__aeabi_dsub>
 80078a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078a4:	f7f8 fcbe 	bl	8000224 <__adddf3>
 80078a8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80078ac:	e9ca 0100 	strd	r0, r1, [sl]
 80078b0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80078b4:	e756      	b.n	8007764 <__kernel_rem_pio2+0x4fc>
 80078b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80078ba:	f7f8 fcb3 	bl	8000224 <__adddf3>
 80078be:	3d01      	subs	r5, #1
 80078c0:	e756      	b.n	8007770 <__kernel_rem_pio2+0x508>
 80078c2:	9b01      	ldr	r3, [sp, #4]
 80078c4:	9a01      	ldr	r2, [sp, #4]
 80078c6:	601f      	str	r7, [r3, #0]
 80078c8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80078cc:	605c      	str	r4, [r3, #4]
 80078ce:	609d      	str	r5, [r3, #8]
 80078d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80078d4:	60d3      	str	r3, [r2, #12]
 80078d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078da:	6110      	str	r0, [r2, #16]
 80078dc:	6153      	str	r3, [r2, #20]
 80078de:	e78e      	b.n	80077fe <__kernel_rem_pio2+0x596>
 80078e0:	41700000 	.word	0x41700000
 80078e4:	3e700000 	.word	0x3e700000

080078e8 <__kernel_sin>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	ec55 4b10 	vmov	r4, r5, d0
 80078f0:	b085      	sub	sp, #20
 80078f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80078f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80078fa:	ed8d 1b00 	vstr	d1, [sp]
 80078fe:	9002      	str	r0, [sp, #8]
 8007900:	da06      	bge.n	8007910 <__kernel_sin+0x28>
 8007902:	ee10 0a10 	vmov	r0, s0
 8007906:	4629      	mov	r1, r5
 8007908:	f7f9 f8f2 	bl	8000af0 <__aeabi_d2iz>
 800790c:	2800      	cmp	r0, #0
 800790e:	d051      	beq.n	80079b4 <__kernel_sin+0xcc>
 8007910:	4622      	mov	r2, r4
 8007912:	462b      	mov	r3, r5
 8007914:	4620      	mov	r0, r4
 8007916:	4629      	mov	r1, r5
 8007918:	f7f8 fe3a 	bl	8000590 <__aeabi_dmul>
 800791c:	4682      	mov	sl, r0
 800791e:	468b      	mov	fp, r1
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	4620      	mov	r0, r4
 8007926:	4629      	mov	r1, r5
 8007928:	f7f8 fe32 	bl	8000590 <__aeabi_dmul>
 800792c:	a341      	add	r3, pc, #260	; (adr r3, 8007a34 <__kernel_sin+0x14c>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	4680      	mov	r8, r0
 8007934:	4689      	mov	r9, r1
 8007936:	4650      	mov	r0, sl
 8007938:	4659      	mov	r1, fp
 800793a:	f7f8 fe29 	bl	8000590 <__aeabi_dmul>
 800793e:	a33f      	add	r3, pc, #252	; (adr r3, 8007a3c <__kernel_sin+0x154>)
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	f7f8 fc6c 	bl	8000220 <__aeabi_dsub>
 8007948:	4652      	mov	r2, sl
 800794a:	465b      	mov	r3, fp
 800794c:	f7f8 fe20 	bl	8000590 <__aeabi_dmul>
 8007950:	a33c      	add	r3, pc, #240	; (adr r3, 8007a44 <__kernel_sin+0x15c>)
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f7f8 fc65 	bl	8000224 <__adddf3>
 800795a:	4652      	mov	r2, sl
 800795c:	465b      	mov	r3, fp
 800795e:	f7f8 fe17 	bl	8000590 <__aeabi_dmul>
 8007962:	a33a      	add	r3, pc, #232	; (adr r3, 8007a4c <__kernel_sin+0x164>)
 8007964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007968:	f7f8 fc5a 	bl	8000220 <__aeabi_dsub>
 800796c:	4652      	mov	r2, sl
 800796e:	465b      	mov	r3, fp
 8007970:	f7f8 fe0e 	bl	8000590 <__aeabi_dmul>
 8007974:	a337      	add	r3, pc, #220	; (adr r3, 8007a54 <__kernel_sin+0x16c>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f7f8 fc53 	bl	8000224 <__adddf3>
 800797e:	9b02      	ldr	r3, [sp, #8]
 8007980:	4606      	mov	r6, r0
 8007982:	460f      	mov	r7, r1
 8007984:	b9db      	cbnz	r3, 80079be <__kernel_sin+0xd6>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	4650      	mov	r0, sl
 800798c:	4659      	mov	r1, fp
 800798e:	f7f8 fdff 	bl	8000590 <__aeabi_dmul>
 8007992:	a325      	add	r3, pc, #148	; (adr r3, 8007a28 <__kernel_sin+0x140>)
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	f7f8 fc42 	bl	8000220 <__aeabi_dsub>
 800799c:	4642      	mov	r2, r8
 800799e:	464b      	mov	r3, r9
 80079a0:	f7f8 fdf6 	bl	8000590 <__aeabi_dmul>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4620      	mov	r0, r4
 80079aa:	4629      	mov	r1, r5
 80079ac:	f7f8 fc3a 	bl	8000224 <__adddf3>
 80079b0:	4604      	mov	r4, r0
 80079b2:	460d      	mov	r5, r1
 80079b4:	ec45 4b10 	vmov	d0, r4, r5
 80079b8:	b005      	add	sp, #20
 80079ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079be:	2200      	movs	r2, #0
 80079c0:	4b1b      	ldr	r3, [pc, #108]	; (8007a30 <__kernel_sin+0x148>)
 80079c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079c6:	f7f8 fde3 	bl	8000590 <__aeabi_dmul>
 80079ca:	4632      	mov	r2, r6
 80079cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079d0:	463b      	mov	r3, r7
 80079d2:	4640      	mov	r0, r8
 80079d4:	4649      	mov	r1, r9
 80079d6:	f7f8 fddb 	bl	8000590 <__aeabi_dmul>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079e2:	f7f8 fc1d 	bl	8000220 <__aeabi_dsub>
 80079e6:	4652      	mov	r2, sl
 80079e8:	465b      	mov	r3, fp
 80079ea:	f7f8 fdd1 	bl	8000590 <__aeabi_dmul>
 80079ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079f2:	f7f8 fc15 	bl	8000220 <__aeabi_dsub>
 80079f6:	a30c      	add	r3, pc, #48	; (adr r3, 8007a28 <__kernel_sin+0x140>)
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	4606      	mov	r6, r0
 80079fe:	460f      	mov	r7, r1
 8007a00:	4640      	mov	r0, r8
 8007a02:	4649      	mov	r1, r9
 8007a04:	f7f8 fdc4 	bl	8000590 <__aeabi_dmul>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	f7f8 fc08 	bl	8000224 <__adddf3>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4620      	mov	r0, r4
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	f7f8 fc00 	bl	8000220 <__aeabi_dsub>
 8007a20:	e7c6      	b.n	80079b0 <__kernel_sin+0xc8>
 8007a22:	bf00      	nop
 8007a24:	f3af 8000 	nop.w
 8007a28:	55555549 	.word	0x55555549
 8007a2c:	3fc55555 	.word	0x3fc55555
 8007a30:	3fe00000 	.word	0x3fe00000
 8007a34:	5acfd57c 	.word	0x5acfd57c
 8007a38:	3de5d93a 	.word	0x3de5d93a
 8007a3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007a40:	3e5ae5e6 	.word	0x3e5ae5e6
 8007a44:	57b1fe7d 	.word	0x57b1fe7d
 8007a48:	3ec71de3 	.word	0x3ec71de3
 8007a4c:	19c161d5 	.word	0x19c161d5
 8007a50:	3f2a01a0 	.word	0x3f2a01a0
 8007a54:	1110f8a6 	.word	0x1110f8a6
 8007a58:	3f811111 	.word	0x3f811111

08007a5c <copysign>:
 8007a5c:	ec51 0b10 	vmov	r0, r1, d0
 8007a60:	ee11 0a90 	vmov	r0, s3
 8007a64:	ee10 2a10 	vmov	r2, s0
 8007a68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007a6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007a70:	ea41 0300 	orr.w	r3, r1, r0
 8007a74:	ec43 2b10 	vmov	d0, r2, r3
 8007a78:	4770      	bx	lr

08007a7a <matherr>:
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	4770      	bx	lr

08007a7e <abort>:
 8007a7e:	b508      	push	{r3, lr}
 8007a80:	2006      	movs	r0, #6
 8007a82:	f000 fc93 	bl	80083ac <raise>
 8007a86:	2001      	movs	r0, #1
 8007a88:	f7fd ff1e 	bl	80058c8 <_exit>

08007a8c <__errno>:
 8007a8c:	4b01      	ldr	r3, [pc, #4]	; (8007a94 <__errno+0x8>)
 8007a8e:	6818      	ldr	r0, [r3, #0]
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20000010 	.word	0x20000010

08007a98 <__libc_init_array>:
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	4e0d      	ldr	r6, [pc, #52]	; (8007ad0 <__libc_init_array+0x38>)
 8007a9c:	4c0d      	ldr	r4, [pc, #52]	; (8007ad4 <__libc_init_array+0x3c>)
 8007a9e:	1ba4      	subs	r4, r4, r6
 8007aa0:	10a4      	asrs	r4, r4, #2
 8007aa2:	2500      	movs	r5, #0
 8007aa4:	42a5      	cmp	r5, r4
 8007aa6:	d109      	bne.n	8007abc <__libc_init_array+0x24>
 8007aa8:	4e0b      	ldr	r6, [pc, #44]	; (8007ad8 <__libc_init_array+0x40>)
 8007aaa:	4c0c      	ldr	r4, [pc, #48]	; (8007adc <__libc_init_array+0x44>)
 8007aac:	f001 fdfa 	bl	80096a4 <_init>
 8007ab0:	1ba4      	subs	r4, r4, r6
 8007ab2:	10a4      	asrs	r4, r4, #2
 8007ab4:	2500      	movs	r5, #0
 8007ab6:	42a5      	cmp	r5, r4
 8007ab8:	d105      	bne.n	8007ac6 <__libc_init_array+0x2e>
 8007aba:	bd70      	pop	{r4, r5, r6, pc}
 8007abc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ac0:	4798      	blx	r3
 8007ac2:	3501      	adds	r5, #1
 8007ac4:	e7ee      	b.n	8007aa4 <__libc_init_array+0xc>
 8007ac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007aca:	4798      	blx	r3
 8007acc:	3501      	adds	r5, #1
 8007ace:	e7f2      	b.n	8007ab6 <__libc_init_array+0x1e>
 8007ad0:	08009c10 	.word	0x08009c10
 8007ad4:	08009c10 	.word	0x08009c10
 8007ad8:	08009c10 	.word	0x08009c10
 8007adc:	08009c18 	.word	0x08009c18

08007ae0 <malloc>:
 8007ae0:	4b02      	ldr	r3, [pc, #8]	; (8007aec <malloc+0xc>)
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	f000 b885 	b.w	8007bf4 <_malloc_r>
 8007aea:	bf00      	nop
 8007aec:	20000010 	.word	0x20000010

08007af0 <free>:
 8007af0:	4b02      	ldr	r3, [pc, #8]	; (8007afc <free+0xc>)
 8007af2:	4601      	mov	r1, r0
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	f000 b82f 	b.w	8007b58 <_free_r>
 8007afa:	bf00      	nop
 8007afc:	20000010 	.word	0x20000010

08007b00 <memcpy>:
 8007b00:	b510      	push	{r4, lr}
 8007b02:	1e43      	subs	r3, r0, #1
 8007b04:	440a      	add	r2, r1
 8007b06:	4291      	cmp	r1, r2
 8007b08:	d100      	bne.n	8007b0c <memcpy+0xc>
 8007b0a:	bd10      	pop	{r4, pc}
 8007b0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b14:	e7f7      	b.n	8007b06 <memcpy+0x6>

08007b16 <memmove>:
 8007b16:	4288      	cmp	r0, r1
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	eb01 0302 	add.w	r3, r1, r2
 8007b1e:	d807      	bhi.n	8007b30 <memmove+0x1a>
 8007b20:	1e42      	subs	r2, r0, #1
 8007b22:	4299      	cmp	r1, r3
 8007b24:	d00a      	beq.n	8007b3c <memmove+0x26>
 8007b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b2a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007b2e:	e7f8      	b.n	8007b22 <memmove+0xc>
 8007b30:	4283      	cmp	r3, r0
 8007b32:	d9f5      	bls.n	8007b20 <memmove+0xa>
 8007b34:	1881      	adds	r1, r0, r2
 8007b36:	1ad2      	subs	r2, r2, r3
 8007b38:	42d3      	cmn	r3, r2
 8007b3a:	d100      	bne.n	8007b3e <memmove+0x28>
 8007b3c:	bd10      	pop	{r4, pc}
 8007b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b42:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007b46:	e7f7      	b.n	8007b38 <memmove+0x22>

08007b48 <memset>:
 8007b48:	4402      	add	r2, r0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d100      	bne.n	8007b52 <memset+0xa>
 8007b50:	4770      	bx	lr
 8007b52:	f803 1b01 	strb.w	r1, [r3], #1
 8007b56:	e7f9      	b.n	8007b4c <memset+0x4>

08007b58 <_free_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	d045      	beq.n	8007bec <_free_r+0x94>
 8007b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b64:	1f0c      	subs	r4, r1, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bfb8      	it	lt
 8007b6a:	18e4      	addlt	r4, r4, r3
 8007b6c:	f001 fa8e 	bl	800908c <__malloc_lock>
 8007b70:	4a1f      	ldr	r2, [pc, #124]	; (8007bf0 <_free_r+0x98>)
 8007b72:	6813      	ldr	r3, [r2, #0]
 8007b74:	4610      	mov	r0, r2
 8007b76:	b933      	cbnz	r3, 8007b86 <_free_r+0x2e>
 8007b78:	6063      	str	r3, [r4, #4]
 8007b7a:	6014      	str	r4, [r2, #0]
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b82:	f001 ba84 	b.w	800908e <__malloc_unlock>
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	d90c      	bls.n	8007ba4 <_free_r+0x4c>
 8007b8a:	6821      	ldr	r1, [r4, #0]
 8007b8c:	1862      	adds	r2, r4, r1
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	bf04      	itt	eq
 8007b92:	681a      	ldreq	r2, [r3, #0]
 8007b94:	685b      	ldreq	r3, [r3, #4]
 8007b96:	6063      	str	r3, [r4, #4]
 8007b98:	bf04      	itt	eq
 8007b9a:	1852      	addeq	r2, r2, r1
 8007b9c:	6022      	streq	r2, [r4, #0]
 8007b9e:	6004      	str	r4, [r0, #0]
 8007ba0:	e7ec      	b.n	8007b7c <_free_r+0x24>
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	b10a      	cbz	r2, 8007bac <_free_r+0x54>
 8007ba8:	42a2      	cmp	r2, r4
 8007baa:	d9fa      	bls.n	8007ba2 <_free_r+0x4a>
 8007bac:	6819      	ldr	r1, [r3, #0]
 8007bae:	1858      	adds	r0, r3, r1
 8007bb0:	42a0      	cmp	r0, r4
 8007bb2:	d10b      	bne.n	8007bcc <_free_r+0x74>
 8007bb4:	6820      	ldr	r0, [r4, #0]
 8007bb6:	4401      	add	r1, r0
 8007bb8:	1858      	adds	r0, r3, r1
 8007bba:	4282      	cmp	r2, r0
 8007bbc:	6019      	str	r1, [r3, #0]
 8007bbe:	d1dd      	bne.n	8007b7c <_free_r+0x24>
 8007bc0:	6810      	ldr	r0, [r2, #0]
 8007bc2:	6852      	ldr	r2, [r2, #4]
 8007bc4:	605a      	str	r2, [r3, #4]
 8007bc6:	4401      	add	r1, r0
 8007bc8:	6019      	str	r1, [r3, #0]
 8007bca:	e7d7      	b.n	8007b7c <_free_r+0x24>
 8007bcc:	d902      	bls.n	8007bd4 <_free_r+0x7c>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	602b      	str	r3, [r5, #0]
 8007bd2:	e7d3      	b.n	8007b7c <_free_r+0x24>
 8007bd4:	6820      	ldr	r0, [r4, #0]
 8007bd6:	1821      	adds	r1, r4, r0
 8007bd8:	428a      	cmp	r2, r1
 8007bda:	bf04      	itt	eq
 8007bdc:	6811      	ldreq	r1, [r2, #0]
 8007bde:	6852      	ldreq	r2, [r2, #4]
 8007be0:	6062      	str	r2, [r4, #4]
 8007be2:	bf04      	itt	eq
 8007be4:	1809      	addeq	r1, r1, r0
 8007be6:	6021      	streq	r1, [r4, #0]
 8007be8:	605c      	str	r4, [r3, #4]
 8007bea:	e7c7      	b.n	8007b7c <_free_r+0x24>
 8007bec:	bd38      	pop	{r3, r4, r5, pc}
 8007bee:	bf00      	nop
 8007bf0:	200002b8 	.word	0x200002b8

08007bf4 <_malloc_r>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	1ccd      	adds	r5, r1, #3
 8007bf8:	f025 0503 	bic.w	r5, r5, #3
 8007bfc:	3508      	adds	r5, #8
 8007bfe:	2d0c      	cmp	r5, #12
 8007c00:	bf38      	it	cc
 8007c02:	250c      	movcc	r5, #12
 8007c04:	2d00      	cmp	r5, #0
 8007c06:	4606      	mov	r6, r0
 8007c08:	db01      	blt.n	8007c0e <_malloc_r+0x1a>
 8007c0a:	42a9      	cmp	r1, r5
 8007c0c:	d903      	bls.n	8007c16 <_malloc_r+0x22>
 8007c0e:	230c      	movs	r3, #12
 8007c10:	6033      	str	r3, [r6, #0]
 8007c12:	2000      	movs	r0, #0
 8007c14:	bd70      	pop	{r4, r5, r6, pc}
 8007c16:	f001 fa39 	bl	800908c <__malloc_lock>
 8007c1a:	4a21      	ldr	r2, [pc, #132]	; (8007ca0 <_malloc_r+0xac>)
 8007c1c:	6814      	ldr	r4, [r2, #0]
 8007c1e:	4621      	mov	r1, r4
 8007c20:	b991      	cbnz	r1, 8007c48 <_malloc_r+0x54>
 8007c22:	4c20      	ldr	r4, [pc, #128]	; (8007ca4 <_malloc_r+0xb0>)
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	b91b      	cbnz	r3, 8007c30 <_malloc_r+0x3c>
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f000 fb87 	bl	800833c <_sbrk_r>
 8007c2e:	6020      	str	r0, [r4, #0]
 8007c30:	4629      	mov	r1, r5
 8007c32:	4630      	mov	r0, r6
 8007c34:	f000 fb82 	bl	800833c <_sbrk_r>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d124      	bne.n	8007c86 <_malloc_r+0x92>
 8007c3c:	230c      	movs	r3, #12
 8007c3e:	6033      	str	r3, [r6, #0]
 8007c40:	4630      	mov	r0, r6
 8007c42:	f001 fa24 	bl	800908e <__malloc_unlock>
 8007c46:	e7e4      	b.n	8007c12 <_malloc_r+0x1e>
 8007c48:	680b      	ldr	r3, [r1, #0]
 8007c4a:	1b5b      	subs	r3, r3, r5
 8007c4c:	d418      	bmi.n	8007c80 <_malloc_r+0x8c>
 8007c4e:	2b0b      	cmp	r3, #11
 8007c50:	d90f      	bls.n	8007c72 <_malloc_r+0x7e>
 8007c52:	600b      	str	r3, [r1, #0]
 8007c54:	50cd      	str	r5, [r1, r3]
 8007c56:	18cc      	adds	r4, r1, r3
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f001 fa18 	bl	800908e <__malloc_unlock>
 8007c5e:	f104 000b 	add.w	r0, r4, #11
 8007c62:	1d23      	adds	r3, r4, #4
 8007c64:	f020 0007 	bic.w	r0, r0, #7
 8007c68:	1ac3      	subs	r3, r0, r3
 8007c6a:	d0d3      	beq.n	8007c14 <_malloc_r+0x20>
 8007c6c:	425a      	negs	r2, r3
 8007c6e:	50e2      	str	r2, [r4, r3]
 8007c70:	e7d0      	b.n	8007c14 <_malloc_r+0x20>
 8007c72:	428c      	cmp	r4, r1
 8007c74:	684b      	ldr	r3, [r1, #4]
 8007c76:	bf16      	itet	ne
 8007c78:	6063      	strne	r3, [r4, #4]
 8007c7a:	6013      	streq	r3, [r2, #0]
 8007c7c:	460c      	movne	r4, r1
 8007c7e:	e7eb      	b.n	8007c58 <_malloc_r+0x64>
 8007c80:	460c      	mov	r4, r1
 8007c82:	6849      	ldr	r1, [r1, #4]
 8007c84:	e7cc      	b.n	8007c20 <_malloc_r+0x2c>
 8007c86:	1cc4      	adds	r4, r0, #3
 8007c88:	f024 0403 	bic.w	r4, r4, #3
 8007c8c:	42a0      	cmp	r0, r4
 8007c8e:	d005      	beq.n	8007c9c <_malloc_r+0xa8>
 8007c90:	1a21      	subs	r1, r4, r0
 8007c92:	4630      	mov	r0, r6
 8007c94:	f000 fb52 	bl	800833c <_sbrk_r>
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d0cf      	beq.n	8007c3c <_malloc_r+0x48>
 8007c9c:	6025      	str	r5, [r4, #0]
 8007c9e:	e7db      	b.n	8007c58 <_malloc_r+0x64>
 8007ca0:	200002b8 	.word	0x200002b8
 8007ca4:	200002bc 	.word	0x200002bc

08007ca8 <__cvt>:
 8007ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	ec55 4b10 	vmov	r4, r5, d0
 8007cb0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007cb2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007cb6:	2d00      	cmp	r5, #0
 8007cb8:	460e      	mov	r6, r1
 8007cba:	4691      	mov	r9, r2
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	bfb8      	it	lt
 8007cc0:	4622      	movlt	r2, r4
 8007cc2:	462b      	mov	r3, r5
 8007cc4:	f027 0720 	bic.w	r7, r7, #32
 8007cc8:	bfbb      	ittet	lt
 8007cca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007cce:	461d      	movlt	r5, r3
 8007cd0:	2300      	movge	r3, #0
 8007cd2:	232d      	movlt	r3, #45	; 0x2d
 8007cd4:	bfb8      	it	lt
 8007cd6:	4614      	movlt	r4, r2
 8007cd8:	2f46      	cmp	r7, #70	; 0x46
 8007cda:	700b      	strb	r3, [r1, #0]
 8007cdc:	d004      	beq.n	8007ce8 <__cvt+0x40>
 8007cde:	2f45      	cmp	r7, #69	; 0x45
 8007ce0:	d100      	bne.n	8007ce4 <__cvt+0x3c>
 8007ce2:	3601      	adds	r6, #1
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	e000      	b.n	8007cea <__cvt+0x42>
 8007ce8:	2103      	movs	r1, #3
 8007cea:	ab03      	add	r3, sp, #12
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	ab02      	add	r3, sp, #8
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	4632      	mov	r2, r6
 8007cf4:	4653      	mov	r3, sl
 8007cf6:	ec45 4b10 	vmov	d0, r4, r5
 8007cfa:	f000 fc01 	bl	8008500 <_dtoa_r>
 8007cfe:	2f47      	cmp	r7, #71	; 0x47
 8007d00:	4680      	mov	r8, r0
 8007d02:	d102      	bne.n	8007d0a <__cvt+0x62>
 8007d04:	f019 0f01 	tst.w	r9, #1
 8007d08:	d026      	beq.n	8007d58 <__cvt+0xb0>
 8007d0a:	2f46      	cmp	r7, #70	; 0x46
 8007d0c:	eb08 0906 	add.w	r9, r8, r6
 8007d10:	d111      	bne.n	8007d36 <__cvt+0x8e>
 8007d12:	f898 3000 	ldrb.w	r3, [r8]
 8007d16:	2b30      	cmp	r3, #48	; 0x30
 8007d18:	d10a      	bne.n	8007d30 <__cvt+0x88>
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4620      	mov	r0, r4
 8007d20:	4629      	mov	r1, r5
 8007d22:	f7f8 fe9d 	bl	8000a60 <__aeabi_dcmpeq>
 8007d26:	b918      	cbnz	r0, 8007d30 <__cvt+0x88>
 8007d28:	f1c6 0601 	rsb	r6, r6, #1
 8007d2c:	f8ca 6000 	str.w	r6, [sl]
 8007d30:	f8da 3000 	ldr.w	r3, [sl]
 8007d34:	4499      	add	r9, r3
 8007d36:	2200      	movs	r2, #0
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	f7f8 fe8f 	bl	8000a60 <__aeabi_dcmpeq>
 8007d42:	b938      	cbnz	r0, 8007d54 <__cvt+0xac>
 8007d44:	2230      	movs	r2, #48	; 0x30
 8007d46:	9b03      	ldr	r3, [sp, #12]
 8007d48:	454b      	cmp	r3, r9
 8007d4a:	d205      	bcs.n	8007d58 <__cvt+0xb0>
 8007d4c:	1c59      	adds	r1, r3, #1
 8007d4e:	9103      	str	r1, [sp, #12]
 8007d50:	701a      	strb	r2, [r3, #0]
 8007d52:	e7f8      	b.n	8007d46 <__cvt+0x9e>
 8007d54:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d58:	9b03      	ldr	r3, [sp, #12]
 8007d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d5c:	eba3 0308 	sub.w	r3, r3, r8
 8007d60:	4640      	mov	r0, r8
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	b004      	add	sp, #16
 8007d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d6a <__exponent>:
 8007d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	4604      	mov	r4, r0
 8007d70:	bfba      	itte	lt
 8007d72:	4249      	neglt	r1, r1
 8007d74:	232d      	movlt	r3, #45	; 0x2d
 8007d76:	232b      	movge	r3, #43	; 0x2b
 8007d78:	2909      	cmp	r1, #9
 8007d7a:	f804 2b02 	strb.w	r2, [r4], #2
 8007d7e:	7043      	strb	r3, [r0, #1]
 8007d80:	dd20      	ble.n	8007dc4 <__exponent+0x5a>
 8007d82:	f10d 0307 	add.w	r3, sp, #7
 8007d86:	461f      	mov	r7, r3
 8007d88:	260a      	movs	r6, #10
 8007d8a:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d8e:	fb06 1115 	mls	r1, r6, r5, r1
 8007d92:	3130      	adds	r1, #48	; 0x30
 8007d94:	2d09      	cmp	r5, #9
 8007d96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d9a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007d9e:	4629      	mov	r1, r5
 8007da0:	dc09      	bgt.n	8007db6 <__exponent+0x4c>
 8007da2:	3130      	adds	r1, #48	; 0x30
 8007da4:	3b02      	subs	r3, #2
 8007da6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007daa:	42bb      	cmp	r3, r7
 8007dac:	4622      	mov	r2, r4
 8007dae:	d304      	bcc.n	8007dba <__exponent+0x50>
 8007db0:	1a10      	subs	r0, r2, r0
 8007db2:	b003      	add	sp, #12
 8007db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007db6:	4613      	mov	r3, r2
 8007db8:	e7e7      	b.n	8007d8a <__exponent+0x20>
 8007dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dbe:	f804 2b01 	strb.w	r2, [r4], #1
 8007dc2:	e7f2      	b.n	8007daa <__exponent+0x40>
 8007dc4:	2330      	movs	r3, #48	; 0x30
 8007dc6:	4419      	add	r1, r3
 8007dc8:	7083      	strb	r3, [r0, #2]
 8007dca:	1d02      	adds	r2, r0, #4
 8007dcc:	70c1      	strb	r1, [r0, #3]
 8007dce:	e7ef      	b.n	8007db0 <__exponent+0x46>

08007dd0 <_printf_float>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	b08d      	sub	sp, #52	; 0x34
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007ddc:	4616      	mov	r6, r2
 8007dde:	461f      	mov	r7, r3
 8007de0:	4605      	mov	r5, r0
 8007de2:	f001 f945 	bl	8009070 <_localeconv_r>
 8007de6:	6803      	ldr	r3, [r0, #0]
 8007de8:	9304      	str	r3, [sp, #16]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7f8 fa0c 	bl	8000208 <strlen>
 8007df0:	2300      	movs	r3, #0
 8007df2:	930a      	str	r3, [sp, #40]	; 0x28
 8007df4:	f8d8 3000 	ldr.w	r3, [r8]
 8007df8:	9005      	str	r0, [sp, #20]
 8007dfa:	3307      	adds	r3, #7
 8007dfc:	f023 0307 	bic.w	r3, r3, #7
 8007e00:	f103 0208 	add.w	r2, r3, #8
 8007e04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e08:	f8d4 b000 	ldr.w	fp, [r4]
 8007e0c:	f8c8 2000 	str.w	r2, [r8]
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e18:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e20:	9307      	str	r3, [sp, #28]
 8007e22:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e2a:	4ba7      	ldr	r3, [pc, #668]	; (80080c8 <_printf_float+0x2f8>)
 8007e2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e30:	f7f8 fe48 	bl	8000ac4 <__aeabi_dcmpun>
 8007e34:	bb70      	cbnz	r0, 8007e94 <_printf_float+0xc4>
 8007e36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e3a:	4ba3      	ldr	r3, [pc, #652]	; (80080c8 <_printf_float+0x2f8>)
 8007e3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e40:	f7f8 fe22 	bl	8000a88 <__aeabi_dcmple>
 8007e44:	bb30      	cbnz	r0, 8007e94 <_printf_float+0xc4>
 8007e46:	2200      	movs	r2, #0
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	f7f8 fe11 	bl	8000a74 <__aeabi_dcmplt>
 8007e52:	b110      	cbz	r0, 8007e5a <_printf_float+0x8a>
 8007e54:	232d      	movs	r3, #45	; 0x2d
 8007e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e5a:	4a9c      	ldr	r2, [pc, #624]	; (80080cc <_printf_float+0x2fc>)
 8007e5c:	4b9c      	ldr	r3, [pc, #624]	; (80080d0 <_printf_float+0x300>)
 8007e5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e62:	bf8c      	ite	hi
 8007e64:	4690      	movhi	r8, r2
 8007e66:	4698      	movls	r8, r3
 8007e68:	2303      	movs	r3, #3
 8007e6a:	f02b 0204 	bic.w	r2, fp, #4
 8007e6e:	6123      	str	r3, [r4, #16]
 8007e70:	6022      	str	r2, [r4, #0]
 8007e72:	f04f 0900 	mov.w	r9, #0
 8007e76:	9700      	str	r7, [sp, #0]
 8007e78:	4633      	mov	r3, r6
 8007e7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f000 f9e6 	bl	8008250 <_printf_common>
 8007e84:	3001      	adds	r0, #1
 8007e86:	f040 808d 	bne.w	8007fa4 <_printf_float+0x1d4>
 8007e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e8e:	b00d      	add	sp, #52	; 0x34
 8007e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e94:	4642      	mov	r2, r8
 8007e96:	464b      	mov	r3, r9
 8007e98:	4640      	mov	r0, r8
 8007e9a:	4649      	mov	r1, r9
 8007e9c:	f7f8 fe12 	bl	8000ac4 <__aeabi_dcmpun>
 8007ea0:	b110      	cbz	r0, 8007ea8 <_printf_float+0xd8>
 8007ea2:	4a8c      	ldr	r2, [pc, #560]	; (80080d4 <_printf_float+0x304>)
 8007ea4:	4b8c      	ldr	r3, [pc, #560]	; (80080d8 <_printf_float+0x308>)
 8007ea6:	e7da      	b.n	8007e5e <_printf_float+0x8e>
 8007ea8:	6861      	ldr	r1, [r4, #4]
 8007eaa:	1c4b      	adds	r3, r1, #1
 8007eac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007eb0:	a80a      	add	r0, sp, #40	; 0x28
 8007eb2:	d13e      	bne.n	8007f32 <_printf_float+0x162>
 8007eb4:	2306      	movs	r3, #6
 8007eb6:	6063      	str	r3, [r4, #4]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007ebe:	ab09      	add	r3, sp, #36	; 0x24
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	ec49 8b10 	vmov	d0, r8, r9
 8007ec6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007eca:	6022      	str	r2, [r4, #0]
 8007ecc:	f8cd a004 	str.w	sl, [sp, #4]
 8007ed0:	6861      	ldr	r1, [r4, #4]
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7ff fee8 	bl	8007ca8 <__cvt>
 8007ed8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007edc:	2b47      	cmp	r3, #71	; 0x47
 8007ede:	4680      	mov	r8, r0
 8007ee0:	d109      	bne.n	8007ef6 <_printf_float+0x126>
 8007ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee4:	1cd8      	adds	r0, r3, #3
 8007ee6:	db02      	blt.n	8007eee <_printf_float+0x11e>
 8007ee8:	6862      	ldr	r2, [r4, #4]
 8007eea:	4293      	cmp	r3, r2
 8007eec:	dd47      	ble.n	8007f7e <_printf_float+0x1ae>
 8007eee:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ef2:	fa5f fa8a 	uxtb.w	sl, sl
 8007ef6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007efc:	d824      	bhi.n	8007f48 <_printf_float+0x178>
 8007efe:	3901      	subs	r1, #1
 8007f00:	4652      	mov	r2, sl
 8007f02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f06:	9109      	str	r1, [sp, #36]	; 0x24
 8007f08:	f7ff ff2f 	bl	8007d6a <__exponent>
 8007f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f0e:	1813      	adds	r3, r2, r0
 8007f10:	2a01      	cmp	r2, #1
 8007f12:	4681      	mov	r9, r0
 8007f14:	6123      	str	r3, [r4, #16]
 8007f16:	dc02      	bgt.n	8007f1e <_printf_float+0x14e>
 8007f18:	6822      	ldr	r2, [r4, #0]
 8007f1a:	07d1      	lsls	r1, r2, #31
 8007f1c:	d501      	bpl.n	8007f22 <_printf_float+0x152>
 8007f1e:	3301      	adds	r3, #1
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0a5      	beq.n	8007e76 <_printf_float+0xa6>
 8007f2a:	232d      	movs	r3, #45	; 0x2d
 8007f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f30:	e7a1      	b.n	8007e76 <_printf_float+0xa6>
 8007f32:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007f36:	f000 8177 	beq.w	8008228 <_printf_float+0x458>
 8007f3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007f3e:	d1bb      	bne.n	8007eb8 <_printf_float+0xe8>
 8007f40:	2900      	cmp	r1, #0
 8007f42:	d1b9      	bne.n	8007eb8 <_printf_float+0xe8>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e7b6      	b.n	8007eb6 <_printf_float+0xe6>
 8007f48:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007f4c:	d119      	bne.n	8007f82 <_printf_float+0x1b2>
 8007f4e:	2900      	cmp	r1, #0
 8007f50:	6863      	ldr	r3, [r4, #4]
 8007f52:	dd0c      	ble.n	8007f6e <_printf_float+0x19e>
 8007f54:	6121      	str	r1, [r4, #16]
 8007f56:	b913      	cbnz	r3, 8007f5e <_printf_float+0x18e>
 8007f58:	6822      	ldr	r2, [r4, #0]
 8007f5a:	07d2      	lsls	r2, r2, #31
 8007f5c:	d502      	bpl.n	8007f64 <_printf_float+0x194>
 8007f5e:	3301      	adds	r3, #1
 8007f60:	440b      	add	r3, r1
 8007f62:	6123      	str	r3, [r4, #16]
 8007f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f66:	65a3      	str	r3, [r4, #88]	; 0x58
 8007f68:	f04f 0900 	mov.w	r9, #0
 8007f6c:	e7d9      	b.n	8007f22 <_printf_float+0x152>
 8007f6e:	b913      	cbnz	r3, 8007f76 <_printf_float+0x1a6>
 8007f70:	6822      	ldr	r2, [r4, #0]
 8007f72:	07d0      	lsls	r0, r2, #31
 8007f74:	d501      	bpl.n	8007f7a <_printf_float+0x1aa>
 8007f76:	3302      	adds	r3, #2
 8007f78:	e7f3      	b.n	8007f62 <_printf_float+0x192>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e7f1      	b.n	8007f62 <_printf_float+0x192>
 8007f7e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007f82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f86:	4293      	cmp	r3, r2
 8007f88:	db05      	blt.n	8007f96 <_printf_float+0x1c6>
 8007f8a:	6822      	ldr	r2, [r4, #0]
 8007f8c:	6123      	str	r3, [r4, #16]
 8007f8e:	07d1      	lsls	r1, r2, #31
 8007f90:	d5e8      	bpl.n	8007f64 <_printf_float+0x194>
 8007f92:	3301      	adds	r3, #1
 8007f94:	e7e5      	b.n	8007f62 <_printf_float+0x192>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bfd4      	ite	le
 8007f9a:	f1c3 0302 	rsble	r3, r3, #2
 8007f9e:	2301      	movgt	r3, #1
 8007fa0:	4413      	add	r3, r2
 8007fa2:	e7de      	b.n	8007f62 <_printf_float+0x192>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	055a      	lsls	r2, r3, #21
 8007fa8:	d407      	bmi.n	8007fba <_printf_float+0x1ea>
 8007faa:	6923      	ldr	r3, [r4, #16]
 8007fac:	4642      	mov	r2, r8
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b8      	blx	r7
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d12b      	bne.n	8008010 <_printf_float+0x240>
 8007fb8:	e767      	b.n	8007e8a <_printf_float+0xba>
 8007fba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007fbe:	f240 80dc 	bls.w	800817a <_printf_float+0x3aa>
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fca:	f7f8 fd49 	bl	8000a60 <__aeabi_dcmpeq>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d033      	beq.n	800803a <_printf_float+0x26a>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4a41      	ldr	r2, [pc, #260]	; (80080dc <_printf_float+0x30c>)
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4628      	mov	r0, r5
 8007fda:	47b8      	blx	r7
 8007fdc:	3001      	adds	r0, #1
 8007fde:	f43f af54 	beq.w	8007e8a <_printf_float+0xba>
 8007fe2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	db02      	blt.n	8007ff0 <_printf_float+0x220>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	07d8      	lsls	r0, r3, #31
 8007fee:	d50f      	bpl.n	8008010 <_printf_float+0x240>
 8007ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b8      	blx	r7
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	f43f af45 	beq.w	8007e8a <_printf_float+0xba>
 8008000:	f04f 0800 	mov.w	r8, #0
 8008004:	f104 091a 	add.w	r9, r4, #26
 8008008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800800a:	3b01      	subs	r3, #1
 800800c:	4543      	cmp	r3, r8
 800800e:	dc09      	bgt.n	8008024 <_printf_float+0x254>
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	079b      	lsls	r3, r3, #30
 8008014:	f100 8103 	bmi.w	800821e <_printf_float+0x44e>
 8008018:	68e0      	ldr	r0, [r4, #12]
 800801a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800801c:	4298      	cmp	r0, r3
 800801e:	bfb8      	it	lt
 8008020:	4618      	movlt	r0, r3
 8008022:	e734      	b.n	8007e8e <_printf_float+0xbe>
 8008024:	2301      	movs	r3, #1
 8008026:	464a      	mov	r2, r9
 8008028:	4631      	mov	r1, r6
 800802a:	4628      	mov	r0, r5
 800802c:	47b8      	blx	r7
 800802e:	3001      	adds	r0, #1
 8008030:	f43f af2b 	beq.w	8007e8a <_printf_float+0xba>
 8008034:	f108 0801 	add.w	r8, r8, #1
 8008038:	e7e6      	b.n	8008008 <_printf_float+0x238>
 800803a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	dc2b      	bgt.n	8008098 <_printf_float+0x2c8>
 8008040:	2301      	movs	r3, #1
 8008042:	4a26      	ldr	r2, [pc, #152]	; (80080dc <_printf_float+0x30c>)
 8008044:	4631      	mov	r1, r6
 8008046:	4628      	mov	r0, r5
 8008048:	47b8      	blx	r7
 800804a:	3001      	adds	r0, #1
 800804c:	f43f af1d 	beq.w	8007e8a <_printf_float+0xba>
 8008050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008052:	b923      	cbnz	r3, 800805e <_printf_float+0x28e>
 8008054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008056:	b913      	cbnz	r3, 800805e <_printf_float+0x28e>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	07d9      	lsls	r1, r3, #31
 800805c:	d5d8      	bpl.n	8008010 <_printf_float+0x240>
 800805e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008062:	4631      	mov	r1, r6
 8008064:	4628      	mov	r0, r5
 8008066:	47b8      	blx	r7
 8008068:	3001      	adds	r0, #1
 800806a:	f43f af0e 	beq.w	8007e8a <_printf_float+0xba>
 800806e:	f04f 0900 	mov.w	r9, #0
 8008072:	f104 0a1a 	add.w	sl, r4, #26
 8008076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008078:	425b      	negs	r3, r3
 800807a:	454b      	cmp	r3, r9
 800807c:	dc01      	bgt.n	8008082 <_printf_float+0x2b2>
 800807e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008080:	e794      	b.n	8007fac <_printf_float+0x1dc>
 8008082:	2301      	movs	r3, #1
 8008084:	4652      	mov	r2, sl
 8008086:	4631      	mov	r1, r6
 8008088:	4628      	mov	r0, r5
 800808a:	47b8      	blx	r7
 800808c:	3001      	adds	r0, #1
 800808e:	f43f aefc 	beq.w	8007e8a <_printf_float+0xba>
 8008092:	f109 0901 	add.w	r9, r9, #1
 8008096:	e7ee      	b.n	8008076 <_printf_float+0x2a6>
 8008098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800809a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800809c:	429a      	cmp	r2, r3
 800809e:	bfa8      	it	ge
 80080a0:	461a      	movge	r2, r3
 80080a2:	2a00      	cmp	r2, #0
 80080a4:	4691      	mov	r9, r2
 80080a6:	dd07      	ble.n	80080b8 <_printf_float+0x2e8>
 80080a8:	4613      	mov	r3, r2
 80080aa:	4631      	mov	r1, r6
 80080ac:	4642      	mov	r2, r8
 80080ae:	4628      	mov	r0, r5
 80080b0:	47b8      	blx	r7
 80080b2:	3001      	adds	r0, #1
 80080b4:	f43f aee9 	beq.w	8007e8a <_printf_float+0xba>
 80080b8:	f104 031a 	add.w	r3, r4, #26
 80080bc:	f04f 0b00 	mov.w	fp, #0
 80080c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080c4:	9306      	str	r3, [sp, #24]
 80080c6:	e015      	b.n	80080f4 <_printf_float+0x324>
 80080c8:	7fefffff 	.word	0x7fefffff
 80080cc:	080099e4 	.word	0x080099e4
 80080d0:	080099e0 	.word	0x080099e0
 80080d4:	080099ec 	.word	0x080099ec
 80080d8:	080099e8 	.word	0x080099e8
 80080dc:	080099f0 	.word	0x080099f0
 80080e0:	2301      	movs	r3, #1
 80080e2:	9a06      	ldr	r2, [sp, #24]
 80080e4:	4631      	mov	r1, r6
 80080e6:	4628      	mov	r0, r5
 80080e8:	47b8      	blx	r7
 80080ea:	3001      	adds	r0, #1
 80080ec:	f43f aecd 	beq.w	8007e8a <_printf_float+0xba>
 80080f0:	f10b 0b01 	add.w	fp, fp, #1
 80080f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80080f8:	ebaa 0309 	sub.w	r3, sl, r9
 80080fc:	455b      	cmp	r3, fp
 80080fe:	dcef      	bgt.n	80080e0 <_printf_float+0x310>
 8008100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008104:	429a      	cmp	r2, r3
 8008106:	44d0      	add	r8, sl
 8008108:	db15      	blt.n	8008136 <_printf_float+0x366>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	07da      	lsls	r2, r3, #31
 800810e:	d412      	bmi.n	8008136 <_printf_float+0x366>
 8008110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008112:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008114:	eba3 020a 	sub.w	r2, r3, sl
 8008118:	eba3 0a01 	sub.w	sl, r3, r1
 800811c:	4592      	cmp	sl, r2
 800811e:	bfa8      	it	ge
 8008120:	4692      	movge	sl, r2
 8008122:	f1ba 0f00 	cmp.w	sl, #0
 8008126:	dc0e      	bgt.n	8008146 <_printf_float+0x376>
 8008128:	f04f 0800 	mov.w	r8, #0
 800812c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008130:	f104 091a 	add.w	r9, r4, #26
 8008134:	e019      	b.n	800816a <_printf_float+0x39a>
 8008136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	d1e5      	bne.n	8008110 <_printf_float+0x340>
 8008144:	e6a1      	b.n	8007e8a <_printf_float+0xba>
 8008146:	4653      	mov	r3, sl
 8008148:	4642      	mov	r2, r8
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	d1e9      	bne.n	8008128 <_printf_float+0x358>
 8008154:	e699      	b.n	8007e8a <_printf_float+0xba>
 8008156:	2301      	movs	r3, #1
 8008158:	464a      	mov	r2, r9
 800815a:	4631      	mov	r1, r6
 800815c:	4628      	mov	r0, r5
 800815e:	47b8      	blx	r7
 8008160:	3001      	adds	r0, #1
 8008162:	f43f ae92 	beq.w	8007e8a <_printf_float+0xba>
 8008166:	f108 0801 	add.w	r8, r8, #1
 800816a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800816e:	1a9b      	subs	r3, r3, r2
 8008170:	eba3 030a 	sub.w	r3, r3, sl
 8008174:	4543      	cmp	r3, r8
 8008176:	dcee      	bgt.n	8008156 <_printf_float+0x386>
 8008178:	e74a      	b.n	8008010 <_printf_float+0x240>
 800817a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800817c:	2a01      	cmp	r2, #1
 800817e:	dc01      	bgt.n	8008184 <_printf_float+0x3b4>
 8008180:	07db      	lsls	r3, r3, #31
 8008182:	d53a      	bpl.n	80081fa <_printf_float+0x42a>
 8008184:	2301      	movs	r3, #1
 8008186:	4642      	mov	r2, r8
 8008188:	4631      	mov	r1, r6
 800818a:	4628      	mov	r0, r5
 800818c:	47b8      	blx	r7
 800818e:	3001      	adds	r0, #1
 8008190:	f43f ae7b 	beq.w	8007e8a <_printf_float+0xba>
 8008194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008198:	4631      	mov	r1, r6
 800819a:	4628      	mov	r0, r5
 800819c:	47b8      	blx	r7
 800819e:	3001      	adds	r0, #1
 80081a0:	f108 0801 	add.w	r8, r8, #1
 80081a4:	f43f ae71 	beq.w	8007e8a <_printf_float+0xba>
 80081a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081aa:	2200      	movs	r2, #0
 80081ac:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80081b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081b4:	2300      	movs	r3, #0
 80081b6:	f7f8 fc53 	bl	8000a60 <__aeabi_dcmpeq>
 80081ba:	b9c8      	cbnz	r0, 80081f0 <_printf_float+0x420>
 80081bc:	4653      	mov	r3, sl
 80081be:	4642      	mov	r2, r8
 80081c0:	4631      	mov	r1, r6
 80081c2:	4628      	mov	r0, r5
 80081c4:	47b8      	blx	r7
 80081c6:	3001      	adds	r0, #1
 80081c8:	d10e      	bne.n	80081e8 <_printf_float+0x418>
 80081ca:	e65e      	b.n	8007e8a <_printf_float+0xba>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4652      	mov	r2, sl
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	f43f ae57 	beq.w	8007e8a <_printf_float+0xba>
 80081dc:	f108 0801 	add.w	r8, r8, #1
 80081e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e2:	3b01      	subs	r3, #1
 80081e4:	4543      	cmp	r3, r8
 80081e6:	dcf1      	bgt.n	80081cc <_printf_float+0x3fc>
 80081e8:	464b      	mov	r3, r9
 80081ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081ee:	e6de      	b.n	8007fae <_printf_float+0x1de>
 80081f0:	f04f 0800 	mov.w	r8, #0
 80081f4:	f104 0a1a 	add.w	sl, r4, #26
 80081f8:	e7f2      	b.n	80081e0 <_printf_float+0x410>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e7df      	b.n	80081be <_printf_float+0x3ee>
 80081fe:	2301      	movs	r3, #1
 8008200:	464a      	mov	r2, r9
 8008202:	4631      	mov	r1, r6
 8008204:	4628      	mov	r0, r5
 8008206:	47b8      	blx	r7
 8008208:	3001      	adds	r0, #1
 800820a:	f43f ae3e 	beq.w	8007e8a <_printf_float+0xba>
 800820e:	f108 0801 	add.w	r8, r8, #1
 8008212:	68e3      	ldr	r3, [r4, #12]
 8008214:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	4543      	cmp	r3, r8
 800821a:	dcf0      	bgt.n	80081fe <_printf_float+0x42e>
 800821c:	e6fc      	b.n	8008018 <_printf_float+0x248>
 800821e:	f04f 0800 	mov.w	r8, #0
 8008222:	f104 0919 	add.w	r9, r4, #25
 8008226:	e7f4      	b.n	8008212 <_printf_float+0x442>
 8008228:	2900      	cmp	r1, #0
 800822a:	f43f ae8b 	beq.w	8007f44 <_printf_float+0x174>
 800822e:	2300      	movs	r3, #0
 8008230:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008234:	ab09      	add	r3, sp, #36	; 0x24
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	ec49 8b10 	vmov	d0, r8, r9
 800823c:	6022      	str	r2, [r4, #0]
 800823e:	f8cd a004 	str.w	sl, [sp, #4]
 8008242:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008246:	4628      	mov	r0, r5
 8008248:	f7ff fd2e 	bl	8007ca8 <__cvt>
 800824c:	4680      	mov	r8, r0
 800824e:	e648      	b.n	8007ee2 <_printf_float+0x112>

08008250 <_printf_common>:
 8008250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008254:	4691      	mov	r9, r2
 8008256:	461f      	mov	r7, r3
 8008258:	688a      	ldr	r2, [r1, #8]
 800825a:	690b      	ldr	r3, [r1, #16]
 800825c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008260:	4293      	cmp	r3, r2
 8008262:	bfb8      	it	lt
 8008264:	4613      	movlt	r3, r2
 8008266:	f8c9 3000 	str.w	r3, [r9]
 800826a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800826e:	4606      	mov	r6, r0
 8008270:	460c      	mov	r4, r1
 8008272:	b112      	cbz	r2, 800827a <_printf_common+0x2a>
 8008274:	3301      	adds	r3, #1
 8008276:	f8c9 3000 	str.w	r3, [r9]
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	0699      	lsls	r1, r3, #26
 800827e:	bf42      	ittt	mi
 8008280:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008284:	3302      	addmi	r3, #2
 8008286:	f8c9 3000 	strmi.w	r3, [r9]
 800828a:	6825      	ldr	r5, [r4, #0]
 800828c:	f015 0506 	ands.w	r5, r5, #6
 8008290:	d107      	bne.n	80082a2 <_printf_common+0x52>
 8008292:	f104 0a19 	add.w	sl, r4, #25
 8008296:	68e3      	ldr	r3, [r4, #12]
 8008298:	f8d9 2000 	ldr.w	r2, [r9]
 800829c:	1a9b      	subs	r3, r3, r2
 800829e:	42ab      	cmp	r3, r5
 80082a0:	dc28      	bgt.n	80082f4 <_printf_common+0xa4>
 80082a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80082a6:	6822      	ldr	r2, [r4, #0]
 80082a8:	3300      	adds	r3, #0
 80082aa:	bf18      	it	ne
 80082ac:	2301      	movne	r3, #1
 80082ae:	0692      	lsls	r2, r2, #26
 80082b0:	d42d      	bmi.n	800830e <_printf_common+0xbe>
 80082b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082b6:	4639      	mov	r1, r7
 80082b8:	4630      	mov	r0, r6
 80082ba:	47c0      	blx	r8
 80082bc:	3001      	adds	r0, #1
 80082be:	d020      	beq.n	8008302 <_printf_common+0xb2>
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	68e5      	ldr	r5, [r4, #12]
 80082c4:	f8d9 2000 	ldr.w	r2, [r9]
 80082c8:	f003 0306 	and.w	r3, r3, #6
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	bf08      	it	eq
 80082d0:	1aad      	subeq	r5, r5, r2
 80082d2:	68a3      	ldr	r3, [r4, #8]
 80082d4:	6922      	ldr	r2, [r4, #16]
 80082d6:	bf0c      	ite	eq
 80082d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082dc:	2500      	movne	r5, #0
 80082de:	4293      	cmp	r3, r2
 80082e0:	bfc4      	itt	gt
 80082e2:	1a9b      	subgt	r3, r3, r2
 80082e4:	18ed      	addgt	r5, r5, r3
 80082e6:	f04f 0900 	mov.w	r9, #0
 80082ea:	341a      	adds	r4, #26
 80082ec:	454d      	cmp	r5, r9
 80082ee:	d11a      	bne.n	8008326 <_printf_common+0xd6>
 80082f0:	2000      	movs	r0, #0
 80082f2:	e008      	b.n	8008306 <_printf_common+0xb6>
 80082f4:	2301      	movs	r3, #1
 80082f6:	4652      	mov	r2, sl
 80082f8:	4639      	mov	r1, r7
 80082fa:	4630      	mov	r0, r6
 80082fc:	47c0      	blx	r8
 80082fe:	3001      	adds	r0, #1
 8008300:	d103      	bne.n	800830a <_printf_common+0xba>
 8008302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830a:	3501      	adds	r5, #1
 800830c:	e7c3      	b.n	8008296 <_printf_common+0x46>
 800830e:	18e1      	adds	r1, r4, r3
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	2030      	movs	r0, #48	; 0x30
 8008314:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008318:	4422      	add	r2, r4
 800831a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800831e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008322:	3302      	adds	r3, #2
 8008324:	e7c5      	b.n	80082b2 <_printf_common+0x62>
 8008326:	2301      	movs	r3, #1
 8008328:	4622      	mov	r2, r4
 800832a:	4639      	mov	r1, r7
 800832c:	4630      	mov	r0, r6
 800832e:	47c0      	blx	r8
 8008330:	3001      	adds	r0, #1
 8008332:	d0e6      	beq.n	8008302 <_printf_common+0xb2>
 8008334:	f109 0901 	add.w	r9, r9, #1
 8008338:	e7d8      	b.n	80082ec <_printf_common+0x9c>
	...

0800833c <_sbrk_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4c06      	ldr	r4, [pc, #24]	; (8008358 <_sbrk_r+0x1c>)
 8008340:	2300      	movs	r3, #0
 8008342:	4605      	mov	r5, r0
 8008344:	4608      	mov	r0, r1
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	f7fd fac8 	bl	80058dc <_sbrk>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d102      	bne.n	8008356 <_sbrk_r+0x1a>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	b103      	cbz	r3, 8008356 <_sbrk_r+0x1a>
 8008354:	602b      	str	r3, [r5, #0]
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	20000304 	.word	0x20000304

0800835c <_raise_r>:
 800835c:	291f      	cmp	r1, #31
 800835e:	b538      	push	{r3, r4, r5, lr}
 8008360:	4604      	mov	r4, r0
 8008362:	460d      	mov	r5, r1
 8008364:	d904      	bls.n	8008370 <_raise_r+0x14>
 8008366:	2316      	movs	r3, #22
 8008368:	6003      	str	r3, [r0, #0]
 800836a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008372:	b112      	cbz	r2, 800837a <_raise_r+0x1e>
 8008374:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008378:	b94b      	cbnz	r3, 800838e <_raise_r+0x32>
 800837a:	4620      	mov	r0, r4
 800837c:	f000 f830 	bl	80083e0 <_getpid_r>
 8008380:	462a      	mov	r2, r5
 8008382:	4601      	mov	r1, r0
 8008384:	4620      	mov	r0, r4
 8008386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800838a:	f000 b817 	b.w	80083bc <_kill_r>
 800838e:	2b01      	cmp	r3, #1
 8008390:	d00a      	beq.n	80083a8 <_raise_r+0x4c>
 8008392:	1c59      	adds	r1, r3, #1
 8008394:	d103      	bne.n	800839e <_raise_r+0x42>
 8008396:	2316      	movs	r3, #22
 8008398:	6003      	str	r3, [r0, #0]
 800839a:	2001      	movs	r0, #1
 800839c:	e7e7      	b.n	800836e <_raise_r+0x12>
 800839e:	2400      	movs	r4, #0
 80083a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083a4:	4628      	mov	r0, r5
 80083a6:	4798      	blx	r3
 80083a8:	2000      	movs	r0, #0
 80083aa:	e7e0      	b.n	800836e <_raise_r+0x12>

080083ac <raise>:
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <raise+0xc>)
 80083ae:	4601      	mov	r1, r0
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	f7ff bfd3 	b.w	800835c <_raise_r>
 80083b6:	bf00      	nop
 80083b8:	20000010 	.word	0x20000010

080083bc <_kill_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4c07      	ldr	r4, [pc, #28]	; (80083dc <_kill_r+0x20>)
 80083c0:	2300      	movs	r3, #0
 80083c2:	4605      	mov	r5, r0
 80083c4:	4608      	mov	r0, r1
 80083c6:	4611      	mov	r1, r2
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	f7fd fa6d 	bl	80058a8 <_kill>
 80083ce:	1c43      	adds	r3, r0, #1
 80083d0:	d102      	bne.n	80083d8 <_kill_r+0x1c>
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	b103      	cbz	r3, 80083d8 <_kill_r+0x1c>
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	bd38      	pop	{r3, r4, r5, pc}
 80083da:	bf00      	nop
 80083dc:	20000304 	.word	0x20000304

080083e0 <_getpid_r>:
 80083e0:	f7fd ba5a 	b.w	8005898 <_getpid>

080083e4 <quorem>:
 80083e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e8:	6903      	ldr	r3, [r0, #16]
 80083ea:	690c      	ldr	r4, [r1, #16]
 80083ec:	42a3      	cmp	r3, r4
 80083ee:	4680      	mov	r8, r0
 80083f0:	f2c0 8082 	blt.w	80084f8 <quorem+0x114>
 80083f4:	3c01      	subs	r4, #1
 80083f6:	f101 0714 	add.w	r7, r1, #20
 80083fa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80083fe:	f100 0614 	add.w	r6, r0, #20
 8008402:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008406:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800840a:	eb06 030c 	add.w	r3, r6, ip
 800840e:	3501      	adds	r5, #1
 8008410:	eb07 090c 	add.w	r9, r7, ip
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	fbb0 f5f5 	udiv	r5, r0, r5
 800841a:	b395      	cbz	r5, 8008482 <quorem+0x9e>
 800841c:	f04f 0a00 	mov.w	sl, #0
 8008420:	4638      	mov	r0, r7
 8008422:	46b6      	mov	lr, r6
 8008424:	46d3      	mov	fp, sl
 8008426:	f850 2b04 	ldr.w	r2, [r0], #4
 800842a:	b293      	uxth	r3, r2
 800842c:	fb05 a303 	mla	r3, r5, r3, sl
 8008430:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008434:	b29b      	uxth	r3, r3
 8008436:	ebab 0303 	sub.w	r3, fp, r3
 800843a:	0c12      	lsrs	r2, r2, #16
 800843c:	f8de b000 	ldr.w	fp, [lr]
 8008440:	fb05 a202 	mla	r2, r5, r2, sl
 8008444:	fa13 f38b 	uxtah	r3, r3, fp
 8008448:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800844c:	fa1f fb82 	uxth.w	fp, r2
 8008450:	f8de 2000 	ldr.w	r2, [lr]
 8008454:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008458:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800845c:	b29b      	uxth	r3, r3
 800845e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008462:	4581      	cmp	r9, r0
 8008464:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008468:	f84e 3b04 	str.w	r3, [lr], #4
 800846c:	d2db      	bcs.n	8008426 <quorem+0x42>
 800846e:	f856 300c 	ldr.w	r3, [r6, ip]
 8008472:	b933      	cbnz	r3, 8008482 <quorem+0x9e>
 8008474:	9b01      	ldr	r3, [sp, #4]
 8008476:	3b04      	subs	r3, #4
 8008478:	429e      	cmp	r6, r3
 800847a:	461a      	mov	r2, r3
 800847c:	d330      	bcc.n	80084e0 <quorem+0xfc>
 800847e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008482:	4640      	mov	r0, r8
 8008484:	f001 f81a 	bl	80094bc <__mcmp>
 8008488:	2800      	cmp	r0, #0
 800848a:	db25      	blt.n	80084d8 <quorem+0xf4>
 800848c:	3501      	adds	r5, #1
 800848e:	4630      	mov	r0, r6
 8008490:	f04f 0c00 	mov.w	ip, #0
 8008494:	f857 2b04 	ldr.w	r2, [r7], #4
 8008498:	f8d0 e000 	ldr.w	lr, [r0]
 800849c:	b293      	uxth	r3, r2
 800849e:	ebac 0303 	sub.w	r3, ip, r3
 80084a2:	0c12      	lsrs	r2, r2, #16
 80084a4:	fa13 f38e 	uxtah	r3, r3, lr
 80084a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80084ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084b6:	45b9      	cmp	r9, r7
 80084b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80084bc:	f840 3b04 	str.w	r3, [r0], #4
 80084c0:	d2e8      	bcs.n	8008494 <quorem+0xb0>
 80084c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80084c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80084ca:	b92a      	cbnz	r2, 80084d8 <quorem+0xf4>
 80084cc:	3b04      	subs	r3, #4
 80084ce:	429e      	cmp	r6, r3
 80084d0:	461a      	mov	r2, r3
 80084d2:	d30b      	bcc.n	80084ec <quorem+0x108>
 80084d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80084d8:	4628      	mov	r0, r5
 80084da:	b003      	add	sp, #12
 80084dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e0:	6812      	ldr	r2, [r2, #0]
 80084e2:	3b04      	subs	r3, #4
 80084e4:	2a00      	cmp	r2, #0
 80084e6:	d1ca      	bne.n	800847e <quorem+0x9a>
 80084e8:	3c01      	subs	r4, #1
 80084ea:	e7c5      	b.n	8008478 <quorem+0x94>
 80084ec:	6812      	ldr	r2, [r2, #0]
 80084ee:	3b04      	subs	r3, #4
 80084f0:	2a00      	cmp	r2, #0
 80084f2:	d1ef      	bne.n	80084d4 <quorem+0xf0>
 80084f4:	3c01      	subs	r4, #1
 80084f6:	e7ea      	b.n	80084ce <quorem+0xea>
 80084f8:	2000      	movs	r0, #0
 80084fa:	e7ee      	b.n	80084da <quorem+0xf6>
 80084fc:	0000      	movs	r0, r0
	...

08008500 <_dtoa_r>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	ec57 6b10 	vmov	r6, r7, d0
 8008508:	b097      	sub	sp, #92	; 0x5c
 800850a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800850c:	9106      	str	r1, [sp, #24]
 800850e:	4604      	mov	r4, r0
 8008510:	920b      	str	r2, [sp, #44]	; 0x2c
 8008512:	9312      	str	r3, [sp, #72]	; 0x48
 8008514:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008518:	e9cd 6700 	strd	r6, r7, [sp]
 800851c:	b93d      	cbnz	r5, 800852e <_dtoa_r+0x2e>
 800851e:	2010      	movs	r0, #16
 8008520:	f7ff fade 	bl	8007ae0 <malloc>
 8008524:	6260      	str	r0, [r4, #36]	; 0x24
 8008526:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800852a:	6005      	str	r5, [r0, #0]
 800852c:	60c5      	str	r5, [r0, #12]
 800852e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008530:	6819      	ldr	r1, [r3, #0]
 8008532:	b151      	cbz	r1, 800854a <_dtoa_r+0x4a>
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	604a      	str	r2, [r1, #4]
 8008538:	2301      	movs	r3, #1
 800853a:	4093      	lsls	r3, r2
 800853c:	608b      	str	r3, [r1, #8]
 800853e:	4620      	mov	r0, r4
 8008540:	f000 fdda 	bl	80090f8 <_Bfree>
 8008544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008546:	2200      	movs	r2, #0
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	1e3b      	subs	r3, r7, #0
 800854c:	bfbb      	ittet	lt
 800854e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008552:	9301      	strlt	r3, [sp, #4]
 8008554:	2300      	movge	r3, #0
 8008556:	2201      	movlt	r2, #1
 8008558:	bfac      	ite	ge
 800855a:	f8c8 3000 	strge.w	r3, [r8]
 800855e:	f8c8 2000 	strlt.w	r2, [r8]
 8008562:	4baf      	ldr	r3, [pc, #700]	; (8008820 <_dtoa_r+0x320>)
 8008564:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008568:	ea33 0308 	bics.w	r3, r3, r8
 800856c:	d114      	bne.n	8008598 <_dtoa_r+0x98>
 800856e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008570:	f242 730f 	movw	r3, #9999	; 0x270f
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	9b00      	ldr	r3, [sp, #0]
 8008578:	b923      	cbnz	r3, 8008584 <_dtoa_r+0x84>
 800857a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800857e:	2800      	cmp	r0, #0
 8008580:	f000 8542 	beq.w	8009008 <_dtoa_r+0xb08>
 8008584:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008586:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008834 <_dtoa_r+0x334>
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 8544 	beq.w	8009018 <_dtoa_r+0xb18>
 8008590:	f10b 0303 	add.w	r3, fp, #3
 8008594:	f000 bd3e 	b.w	8009014 <_dtoa_r+0xb14>
 8008598:	e9dd 6700 	ldrd	r6, r7, [sp]
 800859c:	2200      	movs	r2, #0
 800859e:	2300      	movs	r3, #0
 80085a0:	4630      	mov	r0, r6
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f8 fa5c 	bl	8000a60 <__aeabi_dcmpeq>
 80085a8:	4681      	mov	r9, r0
 80085aa:	b168      	cbz	r0, 80085c8 <_dtoa_r+0xc8>
 80085ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085ae:	2301      	movs	r3, #1
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 8524 	beq.w	8009002 <_dtoa_r+0xb02>
 80085ba:	4b9a      	ldr	r3, [pc, #616]	; (8008824 <_dtoa_r+0x324>)
 80085bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085be:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80085c2:	6013      	str	r3, [r2, #0]
 80085c4:	f000 bd28 	b.w	8009018 <_dtoa_r+0xb18>
 80085c8:	aa14      	add	r2, sp, #80	; 0x50
 80085ca:	a915      	add	r1, sp, #84	; 0x54
 80085cc:	ec47 6b10 	vmov	d0, r6, r7
 80085d0:	4620      	mov	r0, r4
 80085d2:	f000 ffea 	bl	80095aa <__d2b>
 80085d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80085da:	9004      	str	r0, [sp, #16]
 80085dc:	2d00      	cmp	r5, #0
 80085de:	d07c      	beq.n	80086da <_dtoa_r+0x1da>
 80085e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085e4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80085e8:	46b2      	mov	sl, r6
 80085ea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80085ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80085f6:	2200      	movs	r2, #0
 80085f8:	4b8b      	ldr	r3, [pc, #556]	; (8008828 <_dtoa_r+0x328>)
 80085fa:	4650      	mov	r0, sl
 80085fc:	4659      	mov	r1, fp
 80085fe:	f7f7 fe0f 	bl	8000220 <__aeabi_dsub>
 8008602:	a381      	add	r3, pc, #516	; (adr r3, 8008808 <_dtoa_r+0x308>)
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	f7f7 ffc2 	bl	8000590 <__aeabi_dmul>
 800860c:	a380      	add	r3, pc, #512	; (adr r3, 8008810 <_dtoa_r+0x310>)
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f7f7 fe07 	bl	8000224 <__adddf3>
 8008616:	4606      	mov	r6, r0
 8008618:	4628      	mov	r0, r5
 800861a:	460f      	mov	r7, r1
 800861c:	f7f7 ff4e 	bl	80004bc <__aeabi_i2d>
 8008620:	a37d      	add	r3, pc, #500	; (adr r3, 8008818 <_dtoa_r+0x318>)
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	f7f7 ffb3 	bl	8000590 <__aeabi_dmul>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4630      	mov	r0, r6
 8008630:	4639      	mov	r1, r7
 8008632:	f7f7 fdf7 	bl	8000224 <__adddf3>
 8008636:	4606      	mov	r6, r0
 8008638:	460f      	mov	r7, r1
 800863a:	f7f8 fa59 	bl	8000af0 <__aeabi_d2iz>
 800863e:	2200      	movs	r2, #0
 8008640:	4682      	mov	sl, r0
 8008642:	2300      	movs	r3, #0
 8008644:	4630      	mov	r0, r6
 8008646:	4639      	mov	r1, r7
 8008648:	f7f8 fa14 	bl	8000a74 <__aeabi_dcmplt>
 800864c:	b148      	cbz	r0, 8008662 <_dtoa_r+0x162>
 800864e:	4650      	mov	r0, sl
 8008650:	f7f7 ff34 	bl	80004bc <__aeabi_i2d>
 8008654:	4632      	mov	r2, r6
 8008656:	463b      	mov	r3, r7
 8008658:	f7f8 fa02 	bl	8000a60 <__aeabi_dcmpeq>
 800865c:	b908      	cbnz	r0, 8008662 <_dtoa_r+0x162>
 800865e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008662:	f1ba 0f16 	cmp.w	sl, #22
 8008666:	d859      	bhi.n	800871c <_dtoa_r+0x21c>
 8008668:	4970      	ldr	r1, [pc, #448]	; (800882c <_dtoa_r+0x32c>)
 800866a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800866e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008676:	f7f8 fa1b 	bl	8000ab0 <__aeabi_dcmpgt>
 800867a:	2800      	cmp	r0, #0
 800867c:	d050      	beq.n	8008720 <_dtoa_r+0x220>
 800867e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008682:	2300      	movs	r3, #0
 8008684:	930f      	str	r3, [sp, #60]	; 0x3c
 8008686:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008688:	1b5d      	subs	r5, r3, r5
 800868a:	f1b5 0801 	subs.w	r8, r5, #1
 800868e:	bf49      	itett	mi
 8008690:	f1c5 0301 	rsbmi	r3, r5, #1
 8008694:	2300      	movpl	r3, #0
 8008696:	9305      	strmi	r3, [sp, #20]
 8008698:	f04f 0800 	movmi.w	r8, #0
 800869c:	bf58      	it	pl
 800869e:	9305      	strpl	r3, [sp, #20]
 80086a0:	f1ba 0f00 	cmp.w	sl, #0
 80086a4:	db3e      	blt.n	8008724 <_dtoa_r+0x224>
 80086a6:	2300      	movs	r3, #0
 80086a8:	44d0      	add	r8, sl
 80086aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80086ae:	9307      	str	r3, [sp, #28]
 80086b0:	9b06      	ldr	r3, [sp, #24]
 80086b2:	2b09      	cmp	r3, #9
 80086b4:	f200 8090 	bhi.w	80087d8 <_dtoa_r+0x2d8>
 80086b8:	2b05      	cmp	r3, #5
 80086ba:	bfc4      	itt	gt
 80086bc:	3b04      	subgt	r3, #4
 80086be:	9306      	strgt	r3, [sp, #24]
 80086c0:	9b06      	ldr	r3, [sp, #24]
 80086c2:	f1a3 0302 	sub.w	r3, r3, #2
 80086c6:	bfcc      	ite	gt
 80086c8:	2500      	movgt	r5, #0
 80086ca:	2501      	movle	r5, #1
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	f200 808f 	bhi.w	80087f0 <_dtoa_r+0x2f0>
 80086d2:	e8df f003 	tbb	[pc, r3]
 80086d6:	7f7d      	.short	0x7f7d
 80086d8:	7131      	.short	0x7131
 80086da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80086de:	441d      	add	r5, r3
 80086e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80086e4:	2820      	cmp	r0, #32
 80086e6:	dd13      	ble.n	8008710 <_dtoa_r+0x210>
 80086e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80086ec:	9b00      	ldr	r3, [sp, #0]
 80086ee:	fa08 f800 	lsl.w	r8, r8, r0
 80086f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80086f6:	fa23 f000 	lsr.w	r0, r3, r0
 80086fa:	ea48 0000 	orr.w	r0, r8, r0
 80086fe:	f7f7 fecd 	bl	800049c <__aeabi_ui2d>
 8008702:	2301      	movs	r3, #1
 8008704:	4682      	mov	sl, r0
 8008706:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800870a:	3d01      	subs	r5, #1
 800870c:	9313      	str	r3, [sp, #76]	; 0x4c
 800870e:	e772      	b.n	80085f6 <_dtoa_r+0xf6>
 8008710:	9b00      	ldr	r3, [sp, #0]
 8008712:	f1c0 0020 	rsb	r0, r0, #32
 8008716:	fa03 f000 	lsl.w	r0, r3, r0
 800871a:	e7f0      	b.n	80086fe <_dtoa_r+0x1fe>
 800871c:	2301      	movs	r3, #1
 800871e:	e7b1      	b.n	8008684 <_dtoa_r+0x184>
 8008720:	900f      	str	r0, [sp, #60]	; 0x3c
 8008722:	e7b0      	b.n	8008686 <_dtoa_r+0x186>
 8008724:	9b05      	ldr	r3, [sp, #20]
 8008726:	eba3 030a 	sub.w	r3, r3, sl
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	f1ca 0300 	rsb	r3, sl, #0
 8008730:	9307      	str	r3, [sp, #28]
 8008732:	2300      	movs	r3, #0
 8008734:	930e      	str	r3, [sp, #56]	; 0x38
 8008736:	e7bb      	b.n	80086b0 <_dtoa_r+0x1b0>
 8008738:	2301      	movs	r3, #1
 800873a:	930a      	str	r3, [sp, #40]	; 0x28
 800873c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800873e:	2b00      	cmp	r3, #0
 8008740:	dd59      	ble.n	80087f6 <_dtoa_r+0x2f6>
 8008742:	9302      	str	r3, [sp, #8]
 8008744:	4699      	mov	r9, r3
 8008746:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008748:	2200      	movs	r2, #0
 800874a:	6072      	str	r2, [r6, #4]
 800874c:	2204      	movs	r2, #4
 800874e:	f102 0014 	add.w	r0, r2, #20
 8008752:	4298      	cmp	r0, r3
 8008754:	6871      	ldr	r1, [r6, #4]
 8008756:	d953      	bls.n	8008800 <_dtoa_r+0x300>
 8008758:	4620      	mov	r0, r4
 800875a:	f000 fc99 	bl	8009090 <_Balloc>
 800875e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008760:	6030      	str	r0, [r6, #0]
 8008762:	f1b9 0f0e 	cmp.w	r9, #14
 8008766:	f8d3 b000 	ldr.w	fp, [r3]
 800876a:	f200 80e6 	bhi.w	800893a <_dtoa_r+0x43a>
 800876e:	2d00      	cmp	r5, #0
 8008770:	f000 80e3 	beq.w	800893a <_dtoa_r+0x43a>
 8008774:	ed9d 7b00 	vldr	d7, [sp]
 8008778:	f1ba 0f00 	cmp.w	sl, #0
 800877c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008780:	dd74      	ble.n	800886c <_dtoa_r+0x36c>
 8008782:	4a2a      	ldr	r2, [pc, #168]	; (800882c <_dtoa_r+0x32c>)
 8008784:	f00a 030f 	and.w	r3, sl, #15
 8008788:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800878c:	ed93 7b00 	vldr	d7, [r3]
 8008790:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008794:	06f0      	lsls	r0, r6, #27
 8008796:	ed8d 7b08 	vstr	d7, [sp, #32]
 800879a:	d565      	bpl.n	8008868 <_dtoa_r+0x368>
 800879c:	4b24      	ldr	r3, [pc, #144]	; (8008830 <_dtoa_r+0x330>)
 800879e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087a6:	f7f8 f81d 	bl	80007e4 <__aeabi_ddiv>
 80087aa:	e9cd 0100 	strd	r0, r1, [sp]
 80087ae:	f006 060f 	and.w	r6, r6, #15
 80087b2:	2503      	movs	r5, #3
 80087b4:	4f1e      	ldr	r7, [pc, #120]	; (8008830 <_dtoa_r+0x330>)
 80087b6:	e04c      	b.n	8008852 <_dtoa_r+0x352>
 80087b8:	2301      	movs	r3, #1
 80087ba:	930a      	str	r3, [sp, #40]	; 0x28
 80087bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087be:	4453      	add	r3, sl
 80087c0:	f103 0901 	add.w	r9, r3, #1
 80087c4:	9302      	str	r3, [sp, #8]
 80087c6:	464b      	mov	r3, r9
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	bfb8      	it	lt
 80087cc:	2301      	movlt	r3, #1
 80087ce:	e7ba      	b.n	8008746 <_dtoa_r+0x246>
 80087d0:	2300      	movs	r3, #0
 80087d2:	e7b2      	b.n	800873a <_dtoa_r+0x23a>
 80087d4:	2300      	movs	r3, #0
 80087d6:	e7f0      	b.n	80087ba <_dtoa_r+0x2ba>
 80087d8:	2501      	movs	r5, #1
 80087da:	2300      	movs	r3, #0
 80087dc:	9306      	str	r3, [sp, #24]
 80087de:	950a      	str	r5, [sp, #40]	; 0x28
 80087e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087e4:	9302      	str	r3, [sp, #8]
 80087e6:	4699      	mov	r9, r3
 80087e8:	2200      	movs	r2, #0
 80087ea:	2312      	movs	r3, #18
 80087ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80087ee:	e7aa      	b.n	8008746 <_dtoa_r+0x246>
 80087f0:	2301      	movs	r3, #1
 80087f2:	930a      	str	r3, [sp, #40]	; 0x28
 80087f4:	e7f4      	b.n	80087e0 <_dtoa_r+0x2e0>
 80087f6:	2301      	movs	r3, #1
 80087f8:	9302      	str	r3, [sp, #8]
 80087fa:	4699      	mov	r9, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	e7f5      	b.n	80087ec <_dtoa_r+0x2ec>
 8008800:	3101      	adds	r1, #1
 8008802:	6071      	str	r1, [r6, #4]
 8008804:	0052      	lsls	r2, r2, #1
 8008806:	e7a2      	b.n	800874e <_dtoa_r+0x24e>
 8008808:	636f4361 	.word	0x636f4361
 800880c:	3fd287a7 	.word	0x3fd287a7
 8008810:	8b60c8b3 	.word	0x8b60c8b3
 8008814:	3fc68a28 	.word	0x3fc68a28
 8008818:	509f79fb 	.word	0x509f79fb
 800881c:	3fd34413 	.word	0x3fd34413
 8008820:	7ff00000 	.word	0x7ff00000
 8008824:	080099f1 	.word	0x080099f1
 8008828:	3ff80000 	.word	0x3ff80000
 800882c:	08009a28 	.word	0x08009a28
 8008830:	08009a00 	.word	0x08009a00
 8008834:	080099fb 	.word	0x080099fb
 8008838:	07f1      	lsls	r1, r6, #31
 800883a:	d508      	bpl.n	800884e <_dtoa_r+0x34e>
 800883c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008844:	f7f7 fea4 	bl	8000590 <__aeabi_dmul>
 8008848:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800884c:	3501      	adds	r5, #1
 800884e:	1076      	asrs	r6, r6, #1
 8008850:	3708      	adds	r7, #8
 8008852:	2e00      	cmp	r6, #0
 8008854:	d1f0      	bne.n	8008838 <_dtoa_r+0x338>
 8008856:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800885a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800885e:	f7f7 ffc1 	bl	80007e4 <__aeabi_ddiv>
 8008862:	e9cd 0100 	strd	r0, r1, [sp]
 8008866:	e01a      	b.n	800889e <_dtoa_r+0x39e>
 8008868:	2502      	movs	r5, #2
 800886a:	e7a3      	b.n	80087b4 <_dtoa_r+0x2b4>
 800886c:	f000 80a0 	beq.w	80089b0 <_dtoa_r+0x4b0>
 8008870:	f1ca 0600 	rsb	r6, sl, #0
 8008874:	4b9f      	ldr	r3, [pc, #636]	; (8008af4 <_dtoa_r+0x5f4>)
 8008876:	4fa0      	ldr	r7, [pc, #640]	; (8008af8 <_dtoa_r+0x5f8>)
 8008878:	f006 020f 	and.w	r2, r6, #15
 800887c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008888:	f7f7 fe82 	bl	8000590 <__aeabi_dmul>
 800888c:	e9cd 0100 	strd	r0, r1, [sp]
 8008890:	1136      	asrs	r6, r6, #4
 8008892:	2300      	movs	r3, #0
 8008894:	2502      	movs	r5, #2
 8008896:	2e00      	cmp	r6, #0
 8008898:	d17f      	bne.n	800899a <_dtoa_r+0x49a>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e1      	bne.n	8008862 <_dtoa_r+0x362>
 800889e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 8087 	beq.w	80089b4 <_dtoa_r+0x4b4>
 80088a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80088aa:	2200      	movs	r2, #0
 80088ac:	4b93      	ldr	r3, [pc, #588]	; (8008afc <_dtoa_r+0x5fc>)
 80088ae:	4630      	mov	r0, r6
 80088b0:	4639      	mov	r1, r7
 80088b2:	f7f8 f8df 	bl	8000a74 <__aeabi_dcmplt>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d07c      	beq.n	80089b4 <_dtoa_r+0x4b4>
 80088ba:	f1b9 0f00 	cmp.w	r9, #0
 80088be:	d079      	beq.n	80089b4 <_dtoa_r+0x4b4>
 80088c0:	9b02      	ldr	r3, [sp, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	dd35      	ble.n	8008932 <_dtoa_r+0x432>
 80088c6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80088ca:	9308      	str	r3, [sp, #32]
 80088cc:	4639      	mov	r1, r7
 80088ce:	2200      	movs	r2, #0
 80088d0:	4b8b      	ldr	r3, [pc, #556]	; (8008b00 <_dtoa_r+0x600>)
 80088d2:	4630      	mov	r0, r6
 80088d4:	f7f7 fe5c 	bl	8000590 <__aeabi_dmul>
 80088d8:	e9cd 0100 	strd	r0, r1, [sp]
 80088dc:	9f02      	ldr	r7, [sp, #8]
 80088de:	3501      	adds	r5, #1
 80088e0:	4628      	mov	r0, r5
 80088e2:	f7f7 fdeb 	bl	80004bc <__aeabi_i2d>
 80088e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088ea:	f7f7 fe51 	bl	8000590 <__aeabi_dmul>
 80088ee:	2200      	movs	r2, #0
 80088f0:	4b84      	ldr	r3, [pc, #528]	; (8008b04 <_dtoa_r+0x604>)
 80088f2:	f7f7 fc97 	bl	8000224 <__adddf3>
 80088f6:	4605      	mov	r5, r0
 80088f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80088fc:	2f00      	cmp	r7, #0
 80088fe:	d15d      	bne.n	80089bc <_dtoa_r+0x4bc>
 8008900:	2200      	movs	r2, #0
 8008902:	4b81      	ldr	r3, [pc, #516]	; (8008b08 <_dtoa_r+0x608>)
 8008904:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008908:	f7f7 fc8a 	bl	8000220 <__aeabi_dsub>
 800890c:	462a      	mov	r2, r5
 800890e:	4633      	mov	r3, r6
 8008910:	e9cd 0100 	strd	r0, r1, [sp]
 8008914:	f7f8 f8cc 	bl	8000ab0 <__aeabi_dcmpgt>
 8008918:	2800      	cmp	r0, #0
 800891a:	f040 8288 	bne.w	8008e2e <_dtoa_r+0x92e>
 800891e:	462a      	mov	r2, r5
 8008920:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008924:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008928:	f7f8 f8a4 	bl	8000a74 <__aeabi_dcmplt>
 800892c:	2800      	cmp	r0, #0
 800892e:	f040 827c 	bne.w	8008e2a <_dtoa_r+0x92a>
 8008932:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008936:	e9cd 2300 	strd	r2, r3, [sp]
 800893a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800893c:	2b00      	cmp	r3, #0
 800893e:	f2c0 8150 	blt.w	8008be2 <_dtoa_r+0x6e2>
 8008942:	f1ba 0f0e 	cmp.w	sl, #14
 8008946:	f300 814c 	bgt.w	8008be2 <_dtoa_r+0x6e2>
 800894a:	4b6a      	ldr	r3, [pc, #424]	; (8008af4 <_dtoa_r+0x5f4>)
 800894c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008950:	ed93 7b00 	vldr	d7, [r3]
 8008954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008956:	2b00      	cmp	r3, #0
 8008958:	ed8d 7b02 	vstr	d7, [sp, #8]
 800895c:	f280 80d8 	bge.w	8008b10 <_dtoa_r+0x610>
 8008960:	f1b9 0f00 	cmp.w	r9, #0
 8008964:	f300 80d4 	bgt.w	8008b10 <_dtoa_r+0x610>
 8008968:	f040 825e 	bne.w	8008e28 <_dtoa_r+0x928>
 800896c:	2200      	movs	r2, #0
 800896e:	4b66      	ldr	r3, [pc, #408]	; (8008b08 <_dtoa_r+0x608>)
 8008970:	ec51 0b17 	vmov	r0, r1, d7
 8008974:	f7f7 fe0c 	bl	8000590 <__aeabi_dmul>
 8008978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800897c:	f7f8 f88e 	bl	8000a9c <__aeabi_dcmpge>
 8008980:	464f      	mov	r7, r9
 8008982:	464e      	mov	r6, r9
 8008984:	2800      	cmp	r0, #0
 8008986:	f040 8234 	bne.w	8008df2 <_dtoa_r+0x8f2>
 800898a:	2331      	movs	r3, #49	; 0x31
 800898c:	f10b 0501 	add.w	r5, fp, #1
 8008990:	f88b 3000 	strb.w	r3, [fp]
 8008994:	f10a 0a01 	add.w	sl, sl, #1
 8008998:	e22f      	b.n	8008dfa <_dtoa_r+0x8fa>
 800899a:	07f2      	lsls	r2, r6, #31
 800899c:	d505      	bpl.n	80089aa <_dtoa_r+0x4aa>
 800899e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089a2:	f7f7 fdf5 	bl	8000590 <__aeabi_dmul>
 80089a6:	3501      	adds	r5, #1
 80089a8:	2301      	movs	r3, #1
 80089aa:	1076      	asrs	r6, r6, #1
 80089ac:	3708      	adds	r7, #8
 80089ae:	e772      	b.n	8008896 <_dtoa_r+0x396>
 80089b0:	2502      	movs	r5, #2
 80089b2:	e774      	b.n	800889e <_dtoa_r+0x39e>
 80089b4:	f8cd a020 	str.w	sl, [sp, #32]
 80089b8:	464f      	mov	r7, r9
 80089ba:	e791      	b.n	80088e0 <_dtoa_r+0x3e0>
 80089bc:	4b4d      	ldr	r3, [pc, #308]	; (8008af4 <_dtoa_r+0x5f4>)
 80089be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80089c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d047      	beq.n	8008a5c <_dtoa_r+0x55c>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	2000      	movs	r0, #0
 80089d2:	494e      	ldr	r1, [pc, #312]	; (8008b0c <_dtoa_r+0x60c>)
 80089d4:	f7f7 ff06 	bl	80007e4 <__aeabi_ddiv>
 80089d8:	462a      	mov	r2, r5
 80089da:	4633      	mov	r3, r6
 80089dc:	f7f7 fc20 	bl	8000220 <__aeabi_dsub>
 80089e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80089e4:	465d      	mov	r5, fp
 80089e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089ea:	f7f8 f881 	bl	8000af0 <__aeabi_d2iz>
 80089ee:	4606      	mov	r6, r0
 80089f0:	f7f7 fd64 	bl	80004bc <__aeabi_i2d>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089fc:	f7f7 fc10 	bl	8000220 <__aeabi_dsub>
 8008a00:	3630      	adds	r6, #48	; 0x30
 8008a02:	f805 6b01 	strb.w	r6, [r5], #1
 8008a06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a0a:	e9cd 0100 	strd	r0, r1, [sp]
 8008a0e:	f7f8 f831 	bl	8000a74 <__aeabi_dcmplt>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d163      	bne.n	8008ade <_dtoa_r+0x5de>
 8008a16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	4937      	ldr	r1, [pc, #220]	; (8008afc <_dtoa_r+0x5fc>)
 8008a1e:	f7f7 fbff 	bl	8000220 <__aeabi_dsub>
 8008a22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a26:	f7f8 f825 	bl	8000a74 <__aeabi_dcmplt>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	f040 80b7 	bne.w	8008b9e <_dtoa_r+0x69e>
 8008a30:	eba5 030b 	sub.w	r3, r5, fp
 8008a34:	429f      	cmp	r7, r3
 8008a36:	f77f af7c 	ble.w	8008932 <_dtoa_r+0x432>
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	4b30      	ldr	r3, [pc, #192]	; (8008b00 <_dtoa_r+0x600>)
 8008a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a42:	f7f7 fda5 	bl	8000590 <__aeabi_dmul>
 8008a46:	2200      	movs	r2, #0
 8008a48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008a4c:	4b2c      	ldr	r3, [pc, #176]	; (8008b00 <_dtoa_r+0x600>)
 8008a4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a52:	f7f7 fd9d 	bl	8000590 <__aeabi_dmul>
 8008a56:	e9cd 0100 	strd	r0, r1, [sp]
 8008a5a:	e7c4      	b.n	80089e6 <_dtoa_r+0x4e6>
 8008a5c:	462a      	mov	r2, r5
 8008a5e:	4633      	mov	r3, r6
 8008a60:	f7f7 fd96 	bl	8000590 <__aeabi_dmul>
 8008a64:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008a68:	eb0b 0507 	add.w	r5, fp, r7
 8008a6c:	465e      	mov	r6, fp
 8008a6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a72:	f7f8 f83d 	bl	8000af0 <__aeabi_d2iz>
 8008a76:	4607      	mov	r7, r0
 8008a78:	f7f7 fd20 	bl	80004bc <__aeabi_i2d>
 8008a7c:	3730      	adds	r7, #48	; 0x30
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a86:	f7f7 fbcb 	bl	8000220 <__aeabi_dsub>
 8008a8a:	f806 7b01 	strb.w	r7, [r6], #1
 8008a8e:	42ae      	cmp	r6, r5
 8008a90:	e9cd 0100 	strd	r0, r1, [sp]
 8008a94:	f04f 0200 	mov.w	r2, #0
 8008a98:	d126      	bne.n	8008ae8 <_dtoa_r+0x5e8>
 8008a9a:	4b1c      	ldr	r3, [pc, #112]	; (8008b0c <_dtoa_r+0x60c>)
 8008a9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008aa0:	f7f7 fbc0 	bl	8000224 <__adddf3>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008aac:	f7f8 f800 	bl	8000ab0 <__aeabi_dcmpgt>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d174      	bne.n	8008b9e <_dtoa_r+0x69e>
 8008ab4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ab8:	2000      	movs	r0, #0
 8008aba:	4914      	ldr	r1, [pc, #80]	; (8008b0c <_dtoa_r+0x60c>)
 8008abc:	f7f7 fbb0 	bl	8000220 <__aeabi_dsub>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ac8:	f7f7 ffd4 	bl	8000a74 <__aeabi_dcmplt>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f43f af30 	beq.w	8008932 <_dtoa_r+0x432>
 8008ad2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ad6:	2b30      	cmp	r3, #48	; 0x30
 8008ad8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008adc:	d002      	beq.n	8008ae4 <_dtoa_r+0x5e4>
 8008ade:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008ae2:	e04a      	b.n	8008b7a <_dtoa_r+0x67a>
 8008ae4:	4615      	mov	r5, r2
 8008ae6:	e7f4      	b.n	8008ad2 <_dtoa_r+0x5d2>
 8008ae8:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <_dtoa_r+0x600>)
 8008aea:	f7f7 fd51 	bl	8000590 <__aeabi_dmul>
 8008aee:	e9cd 0100 	strd	r0, r1, [sp]
 8008af2:	e7bc      	b.n	8008a6e <_dtoa_r+0x56e>
 8008af4:	08009a28 	.word	0x08009a28
 8008af8:	08009a00 	.word	0x08009a00
 8008afc:	3ff00000 	.word	0x3ff00000
 8008b00:	40240000 	.word	0x40240000
 8008b04:	401c0000 	.word	0x401c0000
 8008b08:	40140000 	.word	0x40140000
 8008b0c:	3fe00000 	.word	0x3fe00000
 8008b10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b14:	465d      	mov	r5, fp
 8008b16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	f7f7 fe61 	bl	80007e4 <__aeabi_ddiv>
 8008b22:	f7f7 ffe5 	bl	8000af0 <__aeabi_d2iz>
 8008b26:	4680      	mov	r8, r0
 8008b28:	f7f7 fcc8 	bl	80004bc <__aeabi_i2d>
 8008b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b30:	f7f7 fd2e 	bl	8000590 <__aeabi_dmul>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4630      	mov	r0, r6
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008b40:	f7f7 fb6e 	bl	8000220 <__aeabi_dsub>
 8008b44:	f805 6b01 	strb.w	r6, [r5], #1
 8008b48:	eba5 060b 	sub.w	r6, r5, fp
 8008b4c:	45b1      	cmp	r9, r6
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	d139      	bne.n	8008bc8 <_dtoa_r+0x6c8>
 8008b54:	f7f7 fb66 	bl	8000224 <__adddf3>
 8008b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	460f      	mov	r7, r1
 8008b60:	f7f7 ffa6 	bl	8000ab0 <__aeabi_dcmpgt>
 8008b64:	b9c8      	cbnz	r0, 8008b9a <_dtoa_r+0x69a>
 8008b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	4639      	mov	r1, r7
 8008b6e:	f7f7 ff77 	bl	8000a60 <__aeabi_dcmpeq>
 8008b72:	b110      	cbz	r0, 8008b7a <_dtoa_r+0x67a>
 8008b74:	f018 0f01 	tst.w	r8, #1
 8008b78:	d10f      	bne.n	8008b9a <_dtoa_r+0x69a>
 8008b7a:	9904      	ldr	r1, [sp, #16]
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 fabb 	bl	80090f8 <_Bfree>
 8008b82:	2300      	movs	r3, #0
 8008b84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b86:	702b      	strb	r3, [r5, #0]
 8008b88:	f10a 0301 	add.w	r3, sl, #1
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 8241 	beq.w	8009018 <_dtoa_r+0xb18>
 8008b96:	601d      	str	r5, [r3, #0]
 8008b98:	e23e      	b.n	8009018 <_dtoa_r+0xb18>
 8008b9a:	f8cd a020 	str.w	sl, [sp, #32]
 8008b9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008ba2:	2a39      	cmp	r2, #57	; 0x39
 8008ba4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008ba8:	d108      	bne.n	8008bbc <_dtoa_r+0x6bc>
 8008baa:	459b      	cmp	fp, r3
 8008bac:	d10a      	bne.n	8008bc4 <_dtoa_r+0x6c4>
 8008bae:	9b08      	ldr	r3, [sp, #32]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	9308      	str	r3, [sp, #32]
 8008bb4:	2330      	movs	r3, #48	; 0x30
 8008bb6:	f88b 3000 	strb.w	r3, [fp]
 8008bba:	465b      	mov	r3, fp
 8008bbc:	781a      	ldrb	r2, [r3, #0]
 8008bbe:	3201      	adds	r2, #1
 8008bc0:	701a      	strb	r2, [r3, #0]
 8008bc2:	e78c      	b.n	8008ade <_dtoa_r+0x5de>
 8008bc4:	461d      	mov	r5, r3
 8008bc6:	e7ea      	b.n	8008b9e <_dtoa_r+0x69e>
 8008bc8:	2200      	movs	r2, #0
 8008bca:	4b9b      	ldr	r3, [pc, #620]	; (8008e38 <_dtoa_r+0x938>)
 8008bcc:	f7f7 fce0 	bl	8000590 <__aeabi_dmul>
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	460f      	mov	r7, r1
 8008bd8:	f7f7 ff42 	bl	8000a60 <__aeabi_dcmpeq>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d09a      	beq.n	8008b16 <_dtoa_r+0x616>
 8008be0:	e7cb      	b.n	8008b7a <_dtoa_r+0x67a>
 8008be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008be4:	2a00      	cmp	r2, #0
 8008be6:	f000 808b 	beq.w	8008d00 <_dtoa_r+0x800>
 8008bea:	9a06      	ldr	r2, [sp, #24]
 8008bec:	2a01      	cmp	r2, #1
 8008bee:	dc6e      	bgt.n	8008cce <_dtoa_r+0x7ce>
 8008bf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008bf2:	2a00      	cmp	r2, #0
 8008bf4:	d067      	beq.n	8008cc6 <_dtoa_r+0x7c6>
 8008bf6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bfa:	9f07      	ldr	r7, [sp, #28]
 8008bfc:	9d05      	ldr	r5, [sp, #20]
 8008bfe:	9a05      	ldr	r2, [sp, #20]
 8008c00:	2101      	movs	r1, #1
 8008c02:	441a      	add	r2, r3
 8008c04:	4620      	mov	r0, r4
 8008c06:	9205      	str	r2, [sp, #20]
 8008c08:	4498      	add	r8, r3
 8008c0a:	f000 fb15 	bl	8009238 <__i2b>
 8008c0e:	4606      	mov	r6, r0
 8008c10:	2d00      	cmp	r5, #0
 8008c12:	dd0c      	ble.n	8008c2e <_dtoa_r+0x72e>
 8008c14:	f1b8 0f00 	cmp.w	r8, #0
 8008c18:	dd09      	ble.n	8008c2e <_dtoa_r+0x72e>
 8008c1a:	4545      	cmp	r5, r8
 8008c1c:	9a05      	ldr	r2, [sp, #20]
 8008c1e:	462b      	mov	r3, r5
 8008c20:	bfa8      	it	ge
 8008c22:	4643      	movge	r3, r8
 8008c24:	1ad2      	subs	r2, r2, r3
 8008c26:	9205      	str	r2, [sp, #20]
 8008c28:	1aed      	subs	r5, r5, r3
 8008c2a:	eba8 0803 	sub.w	r8, r8, r3
 8008c2e:	9b07      	ldr	r3, [sp, #28]
 8008c30:	b1eb      	cbz	r3, 8008c6e <_dtoa_r+0x76e>
 8008c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d067      	beq.n	8008d08 <_dtoa_r+0x808>
 8008c38:	b18f      	cbz	r7, 8008c5e <_dtoa_r+0x75e>
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	463a      	mov	r2, r7
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f000 fb9a 	bl	8009378 <__pow5mult>
 8008c44:	9a04      	ldr	r2, [sp, #16]
 8008c46:	4601      	mov	r1, r0
 8008c48:	4606      	mov	r6, r0
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 fafd 	bl	800924a <__multiply>
 8008c50:	9904      	ldr	r1, [sp, #16]
 8008c52:	9008      	str	r0, [sp, #32]
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 fa4f 	bl	80090f8 <_Bfree>
 8008c5a:	9b08      	ldr	r3, [sp, #32]
 8008c5c:	9304      	str	r3, [sp, #16]
 8008c5e:	9b07      	ldr	r3, [sp, #28]
 8008c60:	1bda      	subs	r2, r3, r7
 8008c62:	d004      	beq.n	8008c6e <_dtoa_r+0x76e>
 8008c64:	9904      	ldr	r1, [sp, #16]
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 fb86 	bl	8009378 <__pow5mult>
 8008c6c:	9004      	str	r0, [sp, #16]
 8008c6e:	2101      	movs	r1, #1
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 fae1 	bl	8009238 <__i2b>
 8008c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c78:	4607      	mov	r7, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 81d0 	beq.w	8009020 <_dtoa_r+0xb20>
 8008c80:	461a      	mov	r2, r3
 8008c82:	4601      	mov	r1, r0
 8008c84:	4620      	mov	r0, r4
 8008c86:	f000 fb77 	bl	8009378 <__pow5mult>
 8008c8a:	9b06      	ldr	r3, [sp, #24]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	4607      	mov	r7, r0
 8008c90:	dc40      	bgt.n	8008d14 <_dtoa_r+0x814>
 8008c92:	9b00      	ldr	r3, [sp, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d139      	bne.n	8008d0c <_dtoa_r+0x80c>
 8008c98:	9b01      	ldr	r3, [sp, #4]
 8008c9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d136      	bne.n	8008d10 <_dtoa_r+0x810>
 8008ca2:	9b01      	ldr	r3, [sp, #4]
 8008ca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ca8:	0d1b      	lsrs	r3, r3, #20
 8008caa:	051b      	lsls	r3, r3, #20
 8008cac:	b12b      	cbz	r3, 8008cba <_dtoa_r+0x7ba>
 8008cae:	9b05      	ldr	r3, [sp, #20]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	9305      	str	r3, [sp, #20]
 8008cb4:	f108 0801 	add.w	r8, r8, #1
 8008cb8:	2301      	movs	r3, #1
 8008cba:	9307      	str	r3, [sp, #28]
 8008cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d12a      	bne.n	8008d18 <_dtoa_r+0x818>
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	e030      	b.n	8008d28 <_dtoa_r+0x828>
 8008cc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cc8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ccc:	e795      	b.n	8008bfa <_dtoa_r+0x6fa>
 8008cce:	9b07      	ldr	r3, [sp, #28]
 8008cd0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8008cd4:	42bb      	cmp	r3, r7
 8008cd6:	bfbf      	itttt	lt
 8008cd8:	9b07      	ldrlt	r3, [sp, #28]
 8008cda:	9707      	strlt	r7, [sp, #28]
 8008cdc:	1afa      	sublt	r2, r7, r3
 8008cde:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008ce0:	bfbb      	ittet	lt
 8008ce2:	189b      	addlt	r3, r3, r2
 8008ce4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008ce6:	1bdf      	subge	r7, r3, r7
 8008ce8:	2700      	movlt	r7, #0
 8008cea:	f1b9 0f00 	cmp.w	r9, #0
 8008cee:	bfb5      	itete	lt
 8008cf0:	9b05      	ldrlt	r3, [sp, #20]
 8008cf2:	9d05      	ldrge	r5, [sp, #20]
 8008cf4:	eba3 0509 	sublt.w	r5, r3, r9
 8008cf8:	464b      	movge	r3, r9
 8008cfa:	bfb8      	it	lt
 8008cfc:	2300      	movlt	r3, #0
 8008cfe:	e77e      	b.n	8008bfe <_dtoa_r+0x6fe>
 8008d00:	9f07      	ldr	r7, [sp, #28]
 8008d02:	9d05      	ldr	r5, [sp, #20]
 8008d04:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008d06:	e783      	b.n	8008c10 <_dtoa_r+0x710>
 8008d08:	9a07      	ldr	r2, [sp, #28]
 8008d0a:	e7ab      	b.n	8008c64 <_dtoa_r+0x764>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e7d4      	b.n	8008cba <_dtoa_r+0x7ba>
 8008d10:	9b00      	ldr	r3, [sp, #0]
 8008d12:	e7d2      	b.n	8008cba <_dtoa_r+0x7ba>
 8008d14:	2300      	movs	r3, #0
 8008d16:	9307      	str	r3, [sp, #28]
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008d1e:	6918      	ldr	r0, [r3, #16]
 8008d20:	f000 fa3c 	bl	800919c <__hi0bits>
 8008d24:	f1c0 0020 	rsb	r0, r0, #32
 8008d28:	4440      	add	r0, r8
 8008d2a:	f010 001f 	ands.w	r0, r0, #31
 8008d2e:	d047      	beq.n	8008dc0 <_dtoa_r+0x8c0>
 8008d30:	f1c0 0320 	rsb	r3, r0, #32
 8008d34:	2b04      	cmp	r3, #4
 8008d36:	dd3b      	ble.n	8008db0 <_dtoa_r+0x8b0>
 8008d38:	9b05      	ldr	r3, [sp, #20]
 8008d3a:	f1c0 001c 	rsb	r0, r0, #28
 8008d3e:	4403      	add	r3, r0
 8008d40:	9305      	str	r3, [sp, #20]
 8008d42:	4405      	add	r5, r0
 8008d44:	4480      	add	r8, r0
 8008d46:	9b05      	ldr	r3, [sp, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	dd05      	ble.n	8008d58 <_dtoa_r+0x858>
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	9904      	ldr	r1, [sp, #16]
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 fb5f 	bl	8009414 <__lshift>
 8008d56:	9004      	str	r0, [sp, #16]
 8008d58:	f1b8 0f00 	cmp.w	r8, #0
 8008d5c:	dd05      	ble.n	8008d6a <_dtoa_r+0x86a>
 8008d5e:	4639      	mov	r1, r7
 8008d60:	4642      	mov	r2, r8
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 fb56 	bl	8009414 <__lshift>
 8008d68:	4607      	mov	r7, r0
 8008d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d6c:	b353      	cbz	r3, 8008dc4 <_dtoa_r+0x8c4>
 8008d6e:	4639      	mov	r1, r7
 8008d70:	9804      	ldr	r0, [sp, #16]
 8008d72:	f000 fba3 	bl	80094bc <__mcmp>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	da24      	bge.n	8008dc4 <_dtoa_r+0x8c4>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	220a      	movs	r2, #10
 8008d7e:	9904      	ldr	r1, [sp, #16]
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 f9d0 	bl	8009126 <__multadd>
 8008d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d88:	9004      	str	r0, [sp, #16]
 8008d8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 814d 	beq.w	800902e <_dtoa_r+0xb2e>
 8008d94:	2300      	movs	r3, #0
 8008d96:	4631      	mov	r1, r6
 8008d98:	220a      	movs	r2, #10
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 f9c3 	bl	8009126 <__multadd>
 8008da0:	9b02      	ldr	r3, [sp, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	4606      	mov	r6, r0
 8008da6:	dc4f      	bgt.n	8008e48 <_dtoa_r+0x948>
 8008da8:	9b06      	ldr	r3, [sp, #24]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	dd4c      	ble.n	8008e48 <_dtoa_r+0x948>
 8008dae:	e011      	b.n	8008dd4 <_dtoa_r+0x8d4>
 8008db0:	d0c9      	beq.n	8008d46 <_dtoa_r+0x846>
 8008db2:	9a05      	ldr	r2, [sp, #20]
 8008db4:	331c      	adds	r3, #28
 8008db6:	441a      	add	r2, r3
 8008db8:	9205      	str	r2, [sp, #20]
 8008dba:	441d      	add	r5, r3
 8008dbc:	4498      	add	r8, r3
 8008dbe:	e7c2      	b.n	8008d46 <_dtoa_r+0x846>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	e7f6      	b.n	8008db2 <_dtoa_r+0x8b2>
 8008dc4:	f1b9 0f00 	cmp.w	r9, #0
 8008dc8:	dc38      	bgt.n	8008e3c <_dtoa_r+0x93c>
 8008dca:	9b06      	ldr	r3, [sp, #24]
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	dd35      	ble.n	8008e3c <_dtoa_r+0x93c>
 8008dd0:	f8cd 9008 	str.w	r9, [sp, #8]
 8008dd4:	9b02      	ldr	r3, [sp, #8]
 8008dd6:	b963      	cbnz	r3, 8008df2 <_dtoa_r+0x8f2>
 8008dd8:	4639      	mov	r1, r7
 8008dda:	2205      	movs	r2, #5
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f000 f9a2 	bl	8009126 <__multadd>
 8008de2:	4601      	mov	r1, r0
 8008de4:	4607      	mov	r7, r0
 8008de6:	9804      	ldr	r0, [sp, #16]
 8008de8:	f000 fb68 	bl	80094bc <__mcmp>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	f73f adcc 	bgt.w	800898a <_dtoa_r+0x48a>
 8008df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008df4:	465d      	mov	r5, fp
 8008df6:	ea6f 0a03 	mvn.w	sl, r3
 8008dfa:	f04f 0900 	mov.w	r9, #0
 8008dfe:	4639      	mov	r1, r7
 8008e00:	4620      	mov	r0, r4
 8008e02:	f000 f979 	bl	80090f8 <_Bfree>
 8008e06:	2e00      	cmp	r6, #0
 8008e08:	f43f aeb7 	beq.w	8008b7a <_dtoa_r+0x67a>
 8008e0c:	f1b9 0f00 	cmp.w	r9, #0
 8008e10:	d005      	beq.n	8008e1e <_dtoa_r+0x91e>
 8008e12:	45b1      	cmp	r9, r6
 8008e14:	d003      	beq.n	8008e1e <_dtoa_r+0x91e>
 8008e16:	4649      	mov	r1, r9
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 f96d 	bl	80090f8 <_Bfree>
 8008e1e:	4631      	mov	r1, r6
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 f969 	bl	80090f8 <_Bfree>
 8008e26:	e6a8      	b.n	8008b7a <_dtoa_r+0x67a>
 8008e28:	2700      	movs	r7, #0
 8008e2a:	463e      	mov	r6, r7
 8008e2c:	e7e1      	b.n	8008df2 <_dtoa_r+0x8f2>
 8008e2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e32:	463e      	mov	r6, r7
 8008e34:	e5a9      	b.n	800898a <_dtoa_r+0x48a>
 8008e36:	bf00      	nop
 8008e38:	40240000 	.word	0x40240000
 8008e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 80fa 	beq.w	800903c <_dtoa_r+0xb3c>
 8008e48:	2d00      	cmp	r5, #0
 8008e4a:	dd05      	ble.n	8008e58 <_dtoa_r+0x958>
 8008e4c:	4631      	mov	r1, r6
 8008e4e:	462a      	mov	r2, r5
 8008e50:	4620      	mov	r0, r4
 8008e52:	f000 fadf 	bl	8009414 <__lshift>
 8008e56:	4606      	mov	r6, r0
 8008e58:	9b07      	ldr	r3, [sp, #28]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d04c      	beq.n	8008ef8 <_dtoa_r+0x9f8>
 8008e5e:	6871      	ldr	r1, [r6, #4]
 8008e60:	4620      	mov	r0, r4
 8008e62:	f000 f915 	bl	8009090 <_Balloc>
 8008e66:	6932      	ldr	r2, [r6, #16]
 8008e68:	3202      	adds	r2, #2
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	0092      	lsls	r2, r2, #2
 8008e6e:	f106 010c 	add.w	r1, r6, #12
 8008e72:	300c      	adds	r0, #12
 8008e74:	f7fe fe44 	bl	8007b00 <memcpy>
 8008e78:	2201      	movs	r2, #1
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f000 fac9 	bl	8009414 <__lshift>
 8008e82:	9b00      	ldr	r3, [sp, #0]
 8008e84:	f8cd b014 	str.w	fp, [sp, #20]
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	46b1      	mov	r9, r6
 8008e8e:	9307      	str	r3, [sp, #28]
 8008e90:	4606      	mov	r6, r0
 8008e92:	4639      	mov	r1, r7
 8008e94:	9804      	ldr	r0, [sp, #16]
 8008e96:	f7ff faa5 	bl	80083e4 <quorem>
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008ea2:	9804      	ldr	r0, [sp, #16]
 8008ea4:	f000 fb0a 	bl	80094bc <__mcmp>
 8008ea8:	4632      	mov	r2, r6
 8008eaa:	9000      	str	r0, [sp, #0]
 8008eac:	4639      	mov	r1, r7
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f000 fb1e 	bl	80094f0 <__mdiff>
 8008eb4:	68c3      	ldr	r3, [r0, #12]
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	bb03      	cbnz	r3, 8008efc <_dtoa_r+0x9fc>
 8008eba:	4601      	mov	r1, r0
 8008ebc:	9008      	str	r0, [sp, #32]
 8008ebe:	9804      	ldr	r0, [sp, #16]
 8008ec0:	f000 fafc 	bl	80094bc <__mcmp>
 8008ec4:	9a08      	ldr	r2, [sp, #32]
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4620      	mov	r0, r4
 8008ecc:	9308      	str	r3, [sp, #32]
 8008ece:	f000 f913 	bl	80090f8 <_Bfree>
 8008ed2:	9b08      	ldr	r3, [sp, #32]
 8008ed4:	b9a3      	cbnz	r3, 8008f00 <_dtoa_r+0xa00>
 8008ed6:	9a06      	ldr	r2, [sp, #24]
 8008ed8:	b992      	cbnz	r2, 8008f00 <_dtoa_r+0xa00>
 8008eda:	9a07      	ldr	r2, [sp, #28]
 8008edc:	b982      	cbnz	r2, 8008f00 <_dtoa_r+0xa00>
 8008ede:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ee2:	d029      	beq.n	8008f38 <_dtoa_r+0xa38>
 8008ee4:	9b00      	ldr	r3, [sp, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	dd01      	ble.n	8008eee <_dtoa_r+0x9ee>
 8008eea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008eee:	9b05      	ldr	r3, [sp, #20]
 8008ef0:	1c5d      	adds	r5, r3, #1
 8008ef2:	f883 8000 	strb.w	r8, [r3]
 8008ef6:	e782      	b.n	8008dfe <_dtoa_r+0x8fe>
 8008ef8:	4630      	mov	r0, r6
 8008efa:	e7c2      	b.n	8008e82 <_dtoa_r+0x982>
 8008efc:	2301      	movs	r3, #1
 8008efe:	e7e3      	b.n	8008ec8 <_dtoa_r+0x9c8>
 8008f00:	9a00      	ldr	r2, [sp, #0]
 8008f02:	2a00      	cmp	r2, #0
 8008f04:	db04      	blt.n	8008f10 <_dtoa_r+0xa10>
 8008f06:	d125      	bne.n	8008f54 <_dtoa_r+0xa54>
 8008f08:	9a06      	ldr	r2, [sp, #24]
 8008f0a:	bb1a      	cbnz	r2, 8008f54 <_dtoa_r+0xa54>
 8008f0c:	9a07      	ldr	r2, [sp, #28]
 8008f0e:	bb0a      	cbnz	r2, 8008f54 <_dtoa_r+0xa54>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	ddec      	ble.n	8008eee <_dtoa_r+0x9ee>
 8008f14:	2201      	movs	r2, #1
 8008f16:	9904      	ldr	r1, [sp, #16]
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f000 fa7b 	bl	8009414 <__lshift>
 8008f1e:	4639      	mov	r1, r7
 8008f20:	9004      	str	r0, [sp, #16]
 8008f22:	f000 facb 	bl	80094bc <__mcmp>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	dc03      	bgt.n	8008f32 <_dtoa_r+0xa32>
 8008f2a:	d1e0      	bne.n	8008eee <_dtoa_r+0x9ee>
 8008f2c:	f018 0f01 	tst.w	r8, #1
 8008f30:	d0dd      	beq.n	8008eee <_dtoa_r+0x9ee>
 8008f32:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f36:	d1d8      	bne.n	8008eea <_dtoa_r+0x9ea>
 8008f38:	9b05      	ldr	r3, [sp, #20]
 8008f3a:	9a05      	ldr	r2, [sp, #20]
 8008f3c:	1c5d      	adds	r5, r3, #1
 8008f3e:	2339      	movs	r3, #57	; 0x39
 8008f40:	7013      	strb	r3, [r2, #0]
 8008f42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f46:	2b39      	cmp	r3, #57	; 0x39
 8008f48:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008f4c:	d04f      	beq.n	8008fee <_dtoa_r+0xaee>
 8008f4e:	3301      	adds	r3, #1
 8008f50:	7013      	strb	r3, [r2, #0]
 8008f52:	e754      	b.n	8008dfe <_dtoa_r+0x8fe>
 8008f54:	9a05      	ldr	r2, [sp, #20]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f102 0501 	add.w	r5, r2, #1
 8008f5c:	dd06      	ble.n	8008f6c <_dtoa_r+0xa6c>
 8008f5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f62:	d0e9      	beq.n	8008f38 <_dtoa_r+0xa38>
 8008f64:	f108 0801 	add.w	r8, r8, #1
 8008f68:	9b05      	ldr	r3, [sp, #20]
 8008f6a:	e7c2      	b.n	8008ef2 <_dtoa_r+0x9f2>
 8008f6c:	9a02      	ldr	r2, [sp, #8]
 8008f6e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008f72:	eba5 030b 	sub.w	r3, r5, fp
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d021      	beq.n	8008fbe <_dtoa_r+0xabe>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	220a      	movs	r2, #10
 8008f7e:	9904      	ldr	r1, [sp, #16]
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 f8d0 	bl	8009126 <__multadd>
 8008f86:	45b1      	cmp	r9, r6
 8008f88:	9004      	str	r0, [sp, #16]
 8008f8a:	f04f 0300 	mov.w	r3, #0
 8008f8e:	f04f 020a 	mov.w	r2, #10
 8008f92:	4649      	mov	r1, r9
 8008f94:	4620      	mov	r0, r4
 8008f96:	d105      	bne.n	8008fa4 <_dtoa_r+0xaa4>
 8008f98:	f000 f8c5 	bl	8009126 <__multadd>
 8008f9c:	4681      	mov	r9, r0
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	9505      	str	r5, [sp, #20]
 8008fa2:	e776      	b.n	8008e92 <_dtoa_r+0x992>
 8008fa4:	f000 f8bf 	bl	8009126 <__multadd>
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4681      	mov	r9, r0
 8008fac:	2300      	movs	r3, #0
 8008fae:	220a      	movs	r2, #10
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 f8b8 	bl	8009126 <__multadd>
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	e7f2      	b.n	8008fa0 <_dtoa_r+0xaa0>
 8008fba:	f04f 0900 	mov.w	r9, #0
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	9904      	ldr	r1, [sp, #16]
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 fa26 	bl	8009414 <__lshift>
 8008fc8:	4639      	mov	r1, r7
 8008fca:	9004      	str	r0, [sp, #16]
 8008fcc:	f000 fa76 	bl	80094bc <__mcmp>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	dcb6      	bgt.n	8008f42 <_dtoa_r+0xa42>
 8008fd4:	d102      	bne.n	8008fdc <_dtoa_r+0xadc>
 8008fd6:	f018 0f01 	tst.w	r8, #1
 8008fda:	d1b2      	bne.n	8008f42 <_dtoa_r+0xa42>
 8008fdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fe0:	2b30      	cmp	r3, #48	; 0x30
 8008fe2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008fe6:	f47f af0a 	bne.w	8008dfe <_dtoa_r+0x8fe>
 8008fea:	4615      	mov	r5, r2
 8008fec:	e7f6      	b.n	8008fdc <_dtoa_r+0xadc>
 8008fee:	4593      	cmp	fp, r2
 8008ff0:	d105      	bne.n	8008ffe <_dtoa_r+0xafe>
 8008ff2:	2331      	movs	r3, #49	; 0x31
 8008ff4:	f10a 0a01 	add.w	sl, sl, #1
 8008ff8:	f88b 3000 	strb.w	r3, [fp]
 8008ffc:	e6ff      	b.n	8008dfe <_dtoa_r+0x8fe>
 8008ffe:	4615      	mov	r5, r2
 8009000:	e79f      	b.n	8008f42 <_dtoa_r+0xa42>
 8009002:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009068 <_dtoa_r+0xb68>
 8009006:	e007      	b.n	8009018 <_dtoa_r+0xb18>
 8009008:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800900a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800906c <_dtoa_r+0xb6c>
 800900e:	b11b      	cbz	r3, 8009018 <_dtoa_r+0xb18>
 8009010:	f10b 0308 	add.w	r3, fp, #8
 8009014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	4658      	mov	r0, fp
 800901a:	b017      	add	sp, #92	; 0x5c
 800901c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009020:	9b06      	ldr	r3, [sp, #24]
 8009022:	2b01      	cmp	r3, #1
 8009024:	f77f ae35 	ble.w	8008c92 <_dtoa_r+0x792>
 8009028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	e649      	b.n	8008cc2 <_dtoa_r+0x7c2>
 800902e:	9b02      	ldr	r3, [sp, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	dc03      	bgt.n	800903c <_dtoa_r+0xb3c>
 8009034:	9b06      	ldr	r3, [sp, #24]
 8009036:	2b02      	cmp	r3, #2
 8009038:	f73f aecc 	bgt.w	8008dd4 <_dtoa_r+0x8d4>
 800903c:	465d      	mov	r5, fp
 800903e:	4639      	mov	r1, r7
 8009040:	9804      	ldr	r0, [sp, #16]
 8009042:	f7ff f9cf 	bl	80083e4 <quorem>
 8009046:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800904a:	f805 8b01 	strb.w	r8, [r5], #1
 800904e:	9a02      	ldr	r2, [sp, #8]
 8009050:	eba5 030b 	sub.w	r3, r5, fp
 8009054:	429a      	cmp	r2, r3
 8009056:	ddb0      	ble.n	8008fba <_dtoa_r+0xaba>
 8009058:	2300      	movs	r3, #0
 800905a:	220a      	movs	r2, #10
 800905c:	9904      	ldr	r1, [sp, #16]
 800905e:	4620      	mov	r0, r4
 8009060:	f000 f861 	bl	8009126 <__multadd>
 8009064:	9004      	str	r0, [sp, #16]
 8009066:	e7ea      	b.n	800903e <_dtoa_r+0xb3e>
 8009068:	080099f0 	.word	0x080099f0
 800906c:	080099f2 	.word	0x080099f2

08009070 <_localeconv_r>:
 8009070:	4b04      	ldr	r3, [pc, #16]	; (8009084 <_localeconv_r+0x14>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6a18      	ldr	r0, [r3, #32]
 8009076:	4b04      	ldr	r3, [pc, #16]	; (8009088 <_localeconv_r+0x18>)
 8009078:	2800      	cmp	r0, #0
 800907a:	bf08      	it	eq
 800907c:	4618      	moveq	r0, r3
 800907e:	30f0      	adds	r0, #240	; 0xf0
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	20000010 	.word	0x20000010
 8009088:	20000074 	.word	0x20000074

0800908c <__malloc_lock>:
 800908c:	4770      	bx	lr

0800908e <__malloc_unlock>:
 800908e:	4770      	bx	lr

08009090 <_Balloc>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009094:	4604      	mov	r4, r0
 8009096:	460e      	mov	r6, r1
 8009098:	b93d      	cbnz	r5, 80090aa <_Balloc+0x1a>
 800909a:	2010      	movs	r0, #16
 800909c:	f7fe fd20 	bl	8007ae0 <malloc>
 80090a0:	6260      	str	r0, [r4, #36]	; 0x24
 80090a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090a6:	6005      	str	r5, [r0, #0]
 80090a8:	60c5      	str	r5, [r0, #12]
 80090aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80090ac:	68eb      	ldr	r3, [r5, #12]
 80090ae:	b183      	cbz	r3, 80090d2 <_Balloc+0x42>
 80090b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80090b8:	b9b8      	cbnz	r0, 80090ea <_Balloc+0x5a>
 80090ba:	2101      	movs	r1, #1
 80090bc:	fa01 f506 	lsl.w	r5, r1, r6
 80090c0:	1d6a      	adds	r2, r5, #5
 80090c2:	0092      	lsls	r2, r2, #2
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 fabf 	bl	8009648 <_calloc_r>
 80090ca:	b160      	cbz	r0, 80090e6 <_Balloc+0x56>
 80090cc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80090d0:	e00e      	b.n	80090f0 <_Balloc+0x60>
 80090d2:	2221      	movs	r2, #33	; 0x21
 80090d4:	2104      	movs	r1, #4
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 fab6 	bl	8009648 <_calloc_r>
 80090dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090de:	60e8      	str	r0, [r5, #12]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e4      	bne.n	80090b0 <_Balloc+0x20>
 80090e6:	2000      	movs	r0, #0
 80090e8:	bd70      	pop	{r4, r5, r6, pc}
 80090ea:	6802      	ldr	r2, [r0, #0]
 80090ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80090f0:	2300      	movs	r3, #0
 80090f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090f6:	e7f7      	b.n	80090e8 <_Balloc+0x58>

080090f8 <_Bfree>:
 80090f8:	b570      	push	{r4, r5, r6, lr}
 80090fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80090fc:	4606      	mov	r6, r0
 80090fe:	460d      	mov	r5, r1
 8009100:	b93c      	cbnz	r4, 8009112 <_Bfree+0x1a>
 8009102:	2010      	movs	r0, #16
 8009104:	f7fe fcec 	bl	8007ae0 <malloc>
 8009108:	6270      	str	r0, [r6, #36]	; 0x24
 800910a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800910e:	6004      	str	r4, [r0, #0]
 8009110:	60c4      	str	r4, [r0, #12]
 8009112:	b13d      	cbz	r5, 8009124 <_Bfree+0x2c>
 8009114:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009116:	686a      	ldr	r2, [r5, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800911e:	6029      	str	r1, [r5, #0]
 8009120:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009124:	bd70      	pop	{r4, r5, r6, pc}

08009126 <__multadd>:
 8009126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912a:	690d      	ldr	r5, [r1, #16]
 800912c:	461f      	mov	r7, r3
 800912e:	4606      	mov	r6, r0
 8009130:	460c      	mov	r4, r1
 8009132:	f101 0c14 	add.w	ip, r1, #20
 8009136:	2300      	movs	r3, #0
 8009138:	f8dc 0000 	ldr.w	r0, [ip]
 800913c:	b281      	uxth	r1, r0
 800913e:	fb02 7101 	mla	r1, r2, r1, r7
 8009142:	0c0f      	lsrs	r7, r1, #16
 8009144:	0c00      	lsrs	r0, r0, #16
 8009146:	fb02 7000 	mla	r0, r2, r0, r7
 800914a:	b289      	uxth	r1, r1
 800914c:	3301      	adds	r3, #1
 800914e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009152:	429d      	cmp	r5, r3
 8009154:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009158:	f84c 1b04 	str.w	r1, [ip], #4
 800915c:	dcec      	bgt.n	8009138 <__multadd+0x12>
 800915e:	b1d7      	cbz	r7, 8009196 <__multadd+0x70>
 8009160:	68a3      	ldr	r3, [r4, #8]
 8009162:	42ab      	cmp	r3, r5
 8009164:	dc12      	bgt.n	800918c <__multadd+0x66>
 8009166:	6861      	ldr	r1, [r4, #4]
 8009168:	4630      	mov	r0, r6
 800916a:	3101      	adds	r1, #1
 800916c:	f7ff ff90 	bl	8009090 <_Balloc>
 8009170:	6922      	ldr	r2, [r4, #16]
 8009172:	3202      	adds	r2, #2
 8009174:	f104 010c 	add.w	r1, r4, #12
 8009178:	4680      	mov	r8, r0
 800917a:	0092      	lsls	r2, r2, #2
 800917c:	300c      	adds	r0, #12
 800917e:	f7fe fcbf 	bl	8007b00 <memcpy>
 8009182:	4621      	mov	r1, r4
 8009184:	4630      	mov	r0, r6
 8009186:	f7ff ffb7 	bl	80090f8 <_Bfree>
 800918a:	4644      	mov	r4, r8
 800918c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009190:	3501      	adds	r5, #1
 8009192:	615f      	str	r7, [r3, #20]
 8009194:	6125      	str	r5, [r4, #16]
 8009196:	4620      	mov	r0, r4
 8009198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800919c <__hi0bits>:
 800919c:	0c02      	lsrs	r2, r0, #16
 800919e:	0412      	lsls	r2, r2, #16
 80091a0:	4603      	mov	r3, r0
 80091a2:	b9b2      	cbnz	r2, 80091d2 <__hi0bits+0x36>
 80091a4:	0403      	lsls	r3, r0, #16
 80091a6:	2010      	movs	r0, #16
 80091a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80091ac:	bf04      	itt	eq
 80091ae:	021b      	lsleq	r3, r3, #8
 80091b0:	3008      	addeq	r0, #8
 80091b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80091b6:	bf04      	itt	eq
 80091b8:	011b      	lsleq	r3, r3, #4
 80091ba:	3004      	addeq	r0, #4
 80091bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80091c0:	bf04      	itt	eq
 80091c2:	009b      	lsleq	r3, r3, #2
 80091c4:	3002      	addeq	r0, #2
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	db06      	blt.n	80091d8 <__hi0bits+0x3c>
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	d503      	bpl.n	80091d6 <__hi0bits+0x3a>
 80091ce:	3001      	adds	r0, #1
 80091d0:	4770      	bx	lr
 80091d2:	2000      	movs	r0, #0
 80091d4:	e7e8      	b.n	80091a8 <__hi0bits+0xc>
 80091d6:	2020      	movs	r0, #32
 80091d8:	4770      	bx	lr

080091da <__lo0bits>:
 80091da:	6803      	ldr	r3, [r0, #0]
 80091dc:	f013 0207 	ands.w	r2, r3, #7
 80091e0:	4601      	mov	r1, r0
 80091e2:	d00b      	beq.n	80091fc <__lo0bits+0x22>
 80091e4:	07da      	lsls	r2, r3, #31
 80091e6:	d423      	bmi.n	8009230 <__lo0bits+0x56>
 80091e8:	0798      	lsls	r0, r3, #30
 80091ea:	bf49      	itett	mi
 80091ec:	085b      	lsrmi	r3, r3, #1
 80091ee:	089b      	lsrpl	r3, r3, #2
 80091f0:	2001      	movmi	r0, #1
 80091f2:	600b      	strmi	r3, [r1, #0]
 80091f4:	bf5c      	itt	pl
 80091f6:	600b      	strpl	r3, [r1, #0]
 80091f8:	2002      	movpl	r0, #2
 80091fa:	4770      	bx	lr
 80091fc:	b298      	uxth	r0, r3
 80091fe:	b9a8      	cbnz	r0, 800922c <__lo0bits+0x52>
 8009200:	0c1b      	lsrs	r3, r3, #16
 8009202:	2010      	movs	r0, #16
 8009204:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009208:	bf04      	itt	eq
 800920a:	0a1b      	lsreq	r3, r3, #8
 800920c:	3008      	addeq	r0, #8
 800920e:	071a      	lsls	r2, r3, #28
 8009210:	bf04      	itt	eq
 8009212:	091b      	lsreq	r3, r3, #4
 8009214:	3004      	addeq	r0, #4
 8009216:	079a      	lsls	r2, r3, #30
 8009218:	bf04      	itt	eq
 800921a:	089b      	lsreq	r3, r3, #2
 800921c:	3002      	addeq	r0, #2
 800921e:	07da      	lsls	r2, r3, #31
 8009220:	d402      	bmi.n	8009228 <__lo0bits+0x4e>
 8009222:	085b      	lsrs	r3, r3, #1
 8009224:	d006      	beq.n	8009234 <__lo0bits+0x5a>
 8009226:	3001      	adds	r0, #1
 8009228:	600b      	str	r3, [r1, #0]
 800922a:	4770      	bx	lr
 800922c:	4610      	mov	r0, r2
 800922e:	e7e9      	b.n	8009204 <__lo0bits+0x2a>
 8009230:	2000      	movs	r0, #0
 8009232:	4770      	bx	lr
 8009234:	2020      	movs	r0, #32
 8009236:	4770      	bx	lr

08009238 <__i2b>:
 8009238:	b510      	push	{r4, lr}
 800923a:	460c      	mov	r4, r1
 800923c:	2101      	movs	r1, #1
 800923e:	f7ff ff27 	bl	8009090 <_Balloc>
 8009242:	2201      	movs	r2, #1
 8009244:	6144      	str	r4, [r0, #20]
 8009246:	6102      	str	r2, [r0, #16]
 8009248:	bd10      	pop	{r4, pc}

0800924a <__multiply>:
 800924a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924e:	4614      	mov	r4, r2
 8009250:	690a      	ldr	r2, [r1, #16]
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	429a      	cmp	r2, r3
 8009256:	bfb8      	it	lt
 8009258:	460b      	movlt	r3, r1
 800925a:	4688      	mov	r8, r1
 800925c:	bfbc      	itt	lt
 800925e:	46a0      	movlt	r8, r4
 8009260:	461c      	movlt	r4, r3
 8009262:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009266:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800926a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800926e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009272:	eb07 0609 	add.w	r6, r7, r9
 8009276:	42b3      	cmp	r3, r6
 8009278:	bfb8      	it	lt
 800927a:	3101      	addlt	r1, #1
 800927c:	f7ff ff08 	bl	8009090 <_Balloc>
 8009280:	f100 0514 	add.w	r5, r0, #20
 8009284:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009288:	462b      	mov	r3, r5
 800928a:	2200      	movs	r2, #0
 800928c:	4573      	cmp	r3, lr
 800928e:	d316      	bcc.n	80092be <__multiply+0x74>
 8009290:	f104 0214 	add.w	r2, r4, #20
 8009294:	f108 0114 	add.w	r1, r8, #20
 8009298:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800929c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	9b00      	ldr	r3, [sp, #0]
 80092a4:	9201      	str	r2, [sp, #4]
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d80c      	bhi.n	80092c4 <__multiply+0x7a>
 80092aa:	2e00      	cmp	r6, #0
 80092ac:	dd03      	ble.n	80092b6 <__multiply+0x6c>
 80092ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d05d      	beq.n	8009372 <__multiply+0x128>
 80092b6:	6106      	str	r6, [r0, #16]
 80092b8:	b003      	add	sp, #12
 80092ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092be:	f843 2b04 	str.w	r2, [r3], #4
 80092c2:	e7e3      	b.n	800928c <__multiply+0x42>
 80092c4:	f8b2 b000 	ldrh.w	fp, [r2]
 80092c8:	f1bb 0f00 	cmp.w	fp, #0
 80092cc:	d023      	beq.n	8009316 <__multiply+0xcc>
 80092ce:	4689      	mov	r9, r1
 80092d0:	46ac      	mov	ip, r5
 80092d2:	f04f 0800 	mov.w	r8, #0
 80092d6:	f859 4b04 	ldr.w	r4, [r9], #4
 80092da:	f8dc a000 	ldr.w	sl, [ip]
 80092de:	b2a3      	uxth	r3, r4
 80092e0:	fa1f fa8a 	uxth.w	sl, sl
 80092e4:	fb0b a303 	mla	r3, fp, r3, sl
 80092e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80092ec:	f8dc 4000 	ldr.w	r4, [ip]
 80092f0:	4443      	add	r3, r8
 80092f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80092f6:	fb0b 840a 	mla	r4, fp, sl, r8
 80092fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80092fe:	46e2      	mov	sl, ip
 8009300:	b29b      	uxth	r3, r3
 8009302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009306:	454f      	cmp	r7, r9
 8009308:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800930c:	f84a 3b04 	str.w	r3, [sl], #4
 8009310:	d82b      	bhi.n	800936a <__multiply+0x120>
 8009312:	f8cc 8004 	str.w	r8, [ip, #4]
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800931c:	3204      	adds	r2, #4
 800931e:	f1ba 0f00 	cmp.w	sl, #0
 8009322:	d020      	beq.n	8009366 <__multiply+0x11c>
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	4689      	mov	r9, r1
 8009328:	46a8      	mov	r8, r5
 800932a:	f04f 0b00 	mov.w	fp, #0
 800932e:	f8b9 c000 	ldrh.w	ip, [r9]
 8009332:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009336:	fb0a 440c 	mla	r4, sl, ip, r4
 800933a:	445c      	add	r4, fp
 800933c:	46c4      	mov	ip, r8
 800933e:	b29b      	uxth	r3, r3
 8009340:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009344:	f84c 3b04 	str.w	r3, [ip], #4
 8009348:	f859 3b04 	ldr.w	r3, [r9], #4
 800934c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009350:	0c1b      	lsrs	r3, r3, #16
 8009352:	fb0a b303 	mla	r3, sl, r3, fp
 8009356:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800935a:	454f      	cmp	r7, r9
 800935c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009360:	d805      	bhi.n	800936e <__multiply+0x124>
 8009362:	f8c8 3004 	str.w	r3, [r8, #4]
 8009366:	3504      	adds	r5, #4
 8009368:	e79b      	b.n	80092a2 <__multiply+0x58>
 800936a:	46d4      	mov	ip, sl
 800936c:	e7b3      	b.n	80092d6 <__multiply+0x8c>
 800936e:	46e0      	mov	r8, ip
 8009370:	e7dd      	b.n	800932e <__multiply+0xe4>
 8009372:	3e01      	subs	r6, #1
 8009374:	e799      	b.n	80092aa <__multiply+0x60>
	...

08009378 <__pow5mult>:
 8009378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800937c:	4615      	mov	r5, r2
 800937e:	f012 0203 	ands.w	r2, r2, #3
 8009382:	4606      	mov	r6, r0
 8009384:	460f      	mov	r7, r1
 8009386:	d007      	beq.n	8009398 <__pow5mult+0x20>
 8009388:	3a01      	subs	r2, #1
 800938a:	4c21      	ldr	r4, [pc, #132]	; (8009410 <__pow5mult+0x98>)
 800938c:	2300      	movs	r3, #0
 800938e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009392:	f7ff fec8 	bl	8009126 <__multadd>
 8009396:	4607      	mov	r7, r0
 8009398:	10ad      	asrs	r5, r5, #2
 800939a:	d035      	beq.n	8009408 <__pow5mult+0x90>
 800939c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800939e:	b93c      	cbnz	r4, 80093b0 <__pow5mult+0x38>
 80093a0:	2010      	movs	r0, #16
 80093a2:	f7fe fb9d 	bl	8007ae0 <malloc>
 80093a6:	6270      	str	r0, [r6, #36]	; 0x24
 80093a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093ac:	6004      	str	r4, [r0, #0]
 80093ae:	60c4      	str	r4, [r0, #12]
 80093b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093b8:	b94c      	cbnz	r4, 80093ce <__pow5mult+0x56>
 80093ba:	f240 2171 	movw	r1, #625	; 0x271
 80093be:	4630      	mov	r0, r6
 80093c0:	f7ff ff3a 	bl	8009238 <__i2b>
 80093c4:	2300      	movs	r3, #0
 80093c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80093ca:	4604      	mov	r4, r0
 80093cc:	6003      	str	r3, [r0, #0]
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	07eb      	lsls	r3, r5, #31
 80093d4:	d50a      	bpl.n	80093ec <__pow5mult+0x74>
 80093d6:	4639      	mov	r1, r7
 80093d8:	4622      	mov	r2, r4
 80093da:	4630      	mov	r0, r6
 80093dc:	f7ff ff35 	bl	800924a <__multiply>
 80093e0:	4639      	mov	r1, r7
 80093e2:	4681      	mov	r9, r0
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7ff fe87 	bl	80090f8 <_Bfree>
 80093ea:	464f      	mov	r7, r9
 80093ec:	106d      	asrs	r5, r5, #1
 80093ee:	d00b      	beq.n	8009408 <__pow5mult+0x90>
 80093f0:	6820      	ldr	r0, [r4, #0]
 80093f2:	b938      	cbnz	r0, 8009404 <__pow5mult+0x8c>
 80093f4:	4622      	mov	r2, r4
 80093f6:	4621      	mov	r1, r4
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff ff26 	bl	800924a <__multiply>
 80093fe:	6020      	str	r0, [r4, #0]
 8009400:	f8c0 8000 	str.w	r8, [r0]
 8009404:	4604      	mov	r4, r0
 8009406:	e7e4      	b.n	80093d2 <__pow5mult+0x5a>
 8009408:	4638      	mov	r0, r7
 800940a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800940e:	bf00      	nop
 8009410:	08009af0 	.word	0x08009af0

08009414 <__lshift>:
 8009414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009418:	460c      	mov	r4, r1
 800941a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800941e:	6923      	ldr	r3, [r4, #16]
 8009420:	6849      	ldr	r1, [r1, #4]
 8009422:	eb0a 0903 	add.w	r9, sl, r3
 8009426:	68a3      	ldr	r3, [r4, #8]
 8009428:	4607      	mov	r7, r0
 800942a:	4616      	mov	r6, r2
 800942c:	f109 0501 	add.w	r5, r9, #1
 8009430:	42ab      	cmp	r3, r5
 8009432:	db32      	blt.n	800949a <__lshift+0x86>
 8009434:	4638      	mov	r0, r7
 8009436:	f7ff fe2b 	bl	8009090 <_Balloc>
 800943a:	2300      	movs	r3, #0
 800943c:	4680      	mov	r8, r0
 800943e:	f100 0114 	add.w	r1, r0, #20
 8009442:	461a      	mov	r2, r3
 8009444:	4553      	cmp	r3, sl
 8009446:	db2b      	blt.n	80094a0 <__lshift+0x8c>
 8009448:	6920      	ldr	r0, [r4, #16]
 800944a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800944e:	f104 0314 	add.w	r3, r4, #20
 8009452:	f016 021f 	ands.w	r2, r6, #31
 8009456:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800945a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800945e:	d025      	beq.n	80094ac <__lshift+0x98>
 8009460:	f1c2 0e20 	rsb	lr, r2, #32
 8009464:	2000      	movs	r0, #0
 8009466:	681e      	ldr	r6, [r3, #0]
 8009468:	468a      	mov	sl, r1
 800946a:	4096      	lsls	r6, r2
 800946c:	4330      	orrs	r0, r6
 800946e:	f84a 0b04 	str.w	r0, [sl], #4
 8009472:	f853 0b04 	ldr.w	r0, [r3], #4
 8009476:	459c      	cmp	ip, r3
 8009478:	fa20 f00e 	lsr.w	r0, r0, lr
 800947c:	d814      	bhi.n	80094a8 <__lshift+0x94>
 800947e:	6048      	str	r0, [r1, #4]
 8009480:	b108      	cbz	r0, 8009486 <__lshift+0x72>
 8009482:	f109 0502 	add.w	r5, r9, #2
 8009486:	3d01      	subs	r5, #1
 8009488:	4638      	mov	r0, r7
 800948a:	f8c8 5010 	str.w	r5, [r8, #16]
 800948e:	4621      	mov	r1, r4
 8009490:	f7ff fe32 	bl	80090f8 <_Bfree>
 8009494:	4640      	mov	r0, r8
 8009496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800949a:	3101      	adds	r1, #1
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	e7c7      	b.n	8009430 <__lshift+0x1c>
 80094a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80094a4:	3301      	adds	r3, #1
 80094a6:	e7cd      	b.n	8009444 <__lshift+0x30>
 80094a8:	4651      	mov	r1, sl
 80094aa:	e7dc      	b.n	8009466 <__lshift+0x52>
 80094ac:	3904      	subs	r1, #4
 80094ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80094b6:	459c      	cmp	ip, r3
 80094b8:	d8f9      	bhi.n	80094ae <__lshift+0x9a>
 80094ba:	e7e4      	b.n	8009486 <__lshift+0x72>

080094bc <__mcmp>:
 80094bc:	6903      	ldr	r3, [r0, #16]
 80094be:	690a      	ldr	r2, [r1, #16]
 80094c0:	1a9b      	subs	r3, r3, r2
 80094c2:	b530      	push	{r4, r5, lr}
 80094c4:	d10c      	bne.n	80094e0 <__mcmp+0x24>
 80094c6:	0092      	lsls	r2, r2, #2
 80094c8:	3014      	adds	r0, #20
 80094ca:	3114      	adds	r1, #20
 80094cc:	1884      	adds	r4, r0, r2
 80094ce:	4411      	add	r1, r2
 80094d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094d8:	4295      	cmp	r5, r2
 80094da:	d003      	beq.n	80094e4 <__mcmp+0x28>
 80094dc:	d305      	bcc.n	80094ea <__mcmp+0x2e>
 80094de:	2301      	movs	r3, #1
 80094e0:	4618      	mov	r0, r3
 80094e2:	bd30      	pop	{r4, r5, pc}
 80094e4:	42a0      	cmp	r0, r4
 80094e6:	d3f3      	bcc.n	80094d0 <__mcmp+0x14>
 80094e8:	e7fa      	b.n	80094e0 <__mcmp+0x24>
 80094ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094ee:	e7f7      	b.n	80094e0 <__mcmp+0x24>

080094f0 <__mdiff>:
 80094f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f4:	460d      	mov	r5, r1
 80094f6:	4607      	mov	r7, r0
 80094f8:	4611      	mov	r1, r2
 80094fa:	4628      	mov	r0, r5
 80094fc:	4614      	mov	r4, r2
 80094fe:	f7ff ffdd 	bl	80094bc <__mcmp>
 8009502:	1e06      	subs	r6, r0, #0
 8009504:	d108      	bne.n	8009518 <__mdiff+0x28>
 8009506:	4631      	mov	r1, r6
 8009508:	4638      	mov	r0, r7
 800950a:	f7ff fdc1 	bl	8009090 <_Balloc>
 800950e:	2301      	movs	r3, #1
 8009510:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009518:	bfa4      	itt	ge
 800951a:	4623      	movge	r3, r4
 800951c:	462c      	movge	r4, r5
 800951e:	4638      	mov	r0, r7
 8009520:	6861      	ldr	r1, [r4, #4]
 8009522:	bfa6      	itte	ge
 8009524:	461d      	movge	r5, r3
 8009526:	2600      	movge	r6, #0
 8009528:	2601      	movlt	r6, #1
 800952a:	f7ff fdb1 	bl	8009090 <_Balloc>
 800952e:	692b      	ldr	r3, [r5, #16]
 8009530:	60c6      	str	r6, [r0, #12]
 8009532:	6926      	ldr	r6, [r4, #16]
 8009534:	f105 0914 	add.w	r9, r5, #20
 8009538:	f104 0214 	add.w	r2, r4, #20
 800953c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009540:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009544:	f100 0514 	add.w	r5, r0, #20
 8009548:	f04f 0e00 	mov.w	lr, #0
 800954c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009550:	f859 4b04 	ldr.w	r4, [r9], #4
 8009554:	fa1e f18a 	uxtah	r1, lr, sl
 8009558:	b2a3      	uxth	r3, r4
 800955a:	1ac9      	subs	r1, r1, r3
 800955c:	0c23      	lsrs	r3, r4, #16
 800955e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009562:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009566:	b289      	uxth	r1, r1
 8009568:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800956c:	45c8      	cmp	r8, r9
 800956e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009572:	4694      	mov	ip, r2
 8009574:	f845 3b04 	str.w	r3, [r5], #4
 8009578:	d8e8      	bhi.n	800954c <__mdiff+0x5c>
 800957a:	45bc      	cmp	ip, r7
 800957c:	d304      	bcc.n	8009588 <__mdiff+0x98>
 800957e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009582:	b183      	cbz	r3, 80095a6 <__mdiff+0xb6>
 8009584:	6106      	str	r6, [r0, #16]
 8009586:	e7c5      	b.n	8009514 <__mdiff+0x24>
 8009588:	f85c 1b04 	ldr.w	r1, [ip], #4
 800958c:	fa1e f381 	uxtah	r3, lr, r1
 8009590:	141a      	asrs	r2, r3, #16
 8009592:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009596:	b29b      	uxth	r3, r3
 8009598:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800959c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80095a0:	f845 3b04 	str.w	r3, [r5], #4
 80095a4:	e7e9      	b.n	800957a <__mdiff+0x8a>
 80095a6:	3e01      	subs	r6, #1
 80095a8:	e7e9      	b.n	800957e <__mdiff+0x8e>

080095aa <__d2b>:
 80095aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095ae:	460e      	mov	r6, r1
 80095b0:	2101      	movs	r1, #1
 80095b2:	ec59 8b10 	vmov	r8, r9, d0
 80095b6:	4615      	mov	r5, r2
 80095b8:	f7ff fd6a 	bl	8009090 <_Balloc>
 80095bc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80095c0:	4607      	mov	r7, r0
 80095c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095c6:	bb34      	cbnz	r4, 8009616 <__d2b+0x6c>
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	f1b8 0300 	subs.w	r3, r8, #0
 80095ce:	d027      	beq.n	8009620 <__d2b+0x76>
 80095d0:	a802      	add	r0, sp, #8
 80095d2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80095d6:	f7ff fe00 	bl	80091da <__lo0bits>
 80095da:	9900      	ldr	r1, [sp, #0]
 80095dc:	b1f0      	cbz	r0, 800961c <__d2b+0x72>
 80095de:	9a01      	ldr	r2, [sp, #4]
 80095e0:	f1c0 0320 	rsb	r3, r0, #32
 80095e4:	fa02 f303 	lsl.w	r3, r2, r3
 80095e8:	430b      	orrs	r3, r1
 80095ea:	40c2      	lsrs	r2, r0
 80095ec:	617b      	str	r3, [r7, #20]
 80095ee:	9201      	str	r2, [sp, #4]
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	61bb      	str	r3, [r7, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	bf14      	ite	ne
 80095f8:	2102      	movne	r1, #2
 80095fa:	2101      	moveq	r1, #1
 80095fc:	6139      	str	r1, [r7, #16]
 80095fe:	b1c4      	cbz	r4, 8009632 <__d2b+0x88>
 8009600:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009604:	4404      	add	r4, r0
 8009606:	6034      	str	r4, [r6, #0]
 8009608:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800960c:	6028      	str	r0, [r5, #0]
 800960e:	4638      	mov	r0, r7
 8009610:	b003      	add	sp, #12
 8009612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800961a:	e7d5      	b.n	80095c8 <__d2b+0x1e>
 800961c:	6179      	str	r1, [r7, #20]
 800961e:	e7e7      	b.n	80095f0 <__d2b+0x46>
 8009620:	a801      	add	r0, sp, #4
 8009622:	f7ff fdda 	bl	80091da <__lo0bits>
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	617b      	str	r3, [r7, #20]
 800962a:	2101      	movs	r1, #1
 800962c:	6139      	str	r1, [r7, #16]
 800962e:	3020      	adds	r0, #32
 8009630:	e7e5      	b.n	80095fe <__d2b+0x54>
 8009632:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009636:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800963a:	6030      	str	r0, [r6, #0]
 800963c:	6918      	ldr	r0, [r3, #16]
 800963e:	f7ff fdad 	bl	800919c <__hi0bits>
 8009642:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009646:	e7e1      	b.n	800960c <__d2b+0x62>

08009648 <_calloc_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	fb02 f401 	mul.w	r4, r2, r1
 800964e:	4621      	mov	r1, r4
 8009650:	f7fe fad0 	bl	8007bf4 <_malloc_r>
 8009654:	4605      	mov	r5, r0
 8009656:	b118      	cbz	r0, 8009660 <_calloc_r+0x18>
 8009658:	4622      	mov	r2, r4
 800965a:	2100      	movs	r1, #0
 800965c:	f7fe fa74 	bl	8007b48 <memset>
 8009660:	4628      	mov	r0, r5
 8009662:	bd38      	pop	{r3, r4, r5, pc}

08009664 <__ascii_mbtowc>:
 8009664:	b082      	sub	sp, #8
 8009666:	b901      	cbnz	r1, 800966a <__ascii_mbtowc+0x6>
 8009668:	a901      	add	r1, sp, #4
 800966a:	b142      	cbz	r2, 800967e <__ascii_mbtowc+0x1a>
 800966c:	b14b      	cbz	r3, 8009682 <__ascii_mbtowc+0x1e>
 800966e:	7813      	ldrb	r3, [r2, #0]
 8009670:	600b      	str	r3, [r1, #0]
 8009672:	7812      	ldrb	r2, [r2, #0]
 8009674:	1c10      	adds	r0, r2, #0
 8009676:	bf18      	it	ne
 8009678:	2001      	movne	r0, #1
 800967a:	b002      	add	sp, #8
 800967c:	4770      	bx	lr
 800967e:	4610      	mov	r0, r2
 8009680:	e7fb      	b.n	800967a <__ascii_mbtowc+0x16>
 8009682:	f06f 0001 	mvn.w	r0, #1
 8009686:	e7f8      	b.n	800967a <__ascii_mbtowc+0x16>

08009688 <__ascii_wctomb>:
 8009688:	b149      	cbz	r1, 800969e <__ascii_wctomb+0x16>
 800968a:	2aff      	cmp	r2, #255	; 0xff
 800968c:	bf85      	ittet	hi
 800968e:	238a      	movhi	r3, #138	; 0x8a
 8009690:	6003      	strhi	r3, [r0, #0]
 8009692:	700a      	strbls	r2, [r1, #0]
 8009694:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009698:	bf98      	it	ls
 800969a:	2001      	movls	r0, #1
 800969c:	4770      	bx	lr
 800969e:	4608      	mov	r0, r1
 80096a0:	4770      	bx	lr
	...

080096a4 <_init>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	bf00      	nop
 80096a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096aa:	bc08      	pop	{r3}
 80096ac:	469e      	mov	lr, r3
 80096ae:	4770      	bx	lr

080096b0 <_fini>:
 80096b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b2:	bf00      	nop
 80096b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b6:	bc08      	pop	{r3}
 80096b8:	469e      	mov	lr, r3
 80096ba:	4770      	bx	lr
